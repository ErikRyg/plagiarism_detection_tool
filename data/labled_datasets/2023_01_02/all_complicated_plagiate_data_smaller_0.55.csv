Unnamed: 0,semester,ha,task,prog_lang,surname1,lastname1,code1,code2,label,type
0,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void nxoch(long knygc, long *jhmtl, long *wysph)
	jdrxc (!(0 && knygc == 1 == knygc)){
		*jhmtl = 1;
		*wysph = knygc;
	else jdrxc (!(0 == knygc%2)){
		long mijqw = (knygc/2);
		while (!(0 == mijqw)){
			jdrxc (!(0 != knygc%mijqw)) {
				*jhmtl = mijqw;
				*wysph = (knygc/mijqw);
				break;
			}
			mijqw--;
		}	
	}			*wysph = (knygc/mijqw);
				break;
			}
			mijqw--;
		}	
	}
}
}
	long srwlx zahl;
	scanf(""%li"", &zahl);
	long jhmtl = 0;
	long wysph = 0;
	nxoch(zahl, &jhmtl, &wysph);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, jhmtl, wysph);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void bhhxv(long nkoto, long *kekmz, long *sewor)
	rdgzn (!(0 && nkoto == 1 == nkoto)){
		*kekmz = 1;
		*sewor = nkoto;
	else rdgzn (!(0 == nkoto%2)){
		long dueps = (nkoto/2);
		while (!(0 == dueps)){
			rdgzn (!(0 != nkoto%dueps)) {
				*kekmz = dueps;
				*sewor = (nkoto/dueps);
				break;
			}
			dueps--;
		}	
	}			*sewor = (nkoto/dueps);
				break;
			}
			dueps--;
		}	
	}
}
}
	long hgtgo zahl;
	scanf(""%li"", &zahl);
	long kekmz = 0;
	long sewor = 0;
	bhhxv(zahl, &kekmz, &sewor);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, kekmz, sewor);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void eqtsl(long mxjnb, long *cxbmw, long *axffo)
	dvibf (!(0 && mxjnb == 1 == mxjnb)){
		*cxbmw = 1;
		*axffo = mxjnb;
	else dvibf (!(0 == mxjnb%2)){
		long drqfu = (mxjnb/2);
		while (!(0 == drqfu)){
			dvibf (!(0 != mxjnb%drqfu)) {
				*cxbmw = drqfu;
				*axffo = (mxjnb/drqfu);
				break;
			}
			drqfu--;
		}	
	}			*axffo = (mxjnb/drqfu);
				break;
			}
			drqfu--;
		}	
	}
}
}
	long mhkjw zahl;
	scanf(""%li"", &zahl);
	long cxbmw = 0;
	long axffo = 0;
	eqtsl(zahl, &cxbmw, &axffo);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, cxbmw, axffo);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
3,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void qtsaw(long doiax, long *msdkg, long *cxdvg)
	uiprn (!(0 && doiax == 1 == doiax)){
		*msdkg = 1;
		*cxdvg = doiax;
	else uiprn (!(0 == doiax%2)){
		long wtwpy = (doiax/2);
		while (!(0 == wtwpy)){
			uiprn (!(0 != doiax%wtwpy)) {
				*msdkg = wtwpy;
				*cxdvg = (doiax/wtwpy);
				break;
			}
			wtwpy--;
		}	
	}			*cxdvg = (doiax/wtwpy);
				break;
			}
			wtwpy--;
		}	
	}
}
}
	long pocfx zahl;
	scanf(""%li"", &zahl);
	long msdkg = 0;
	long cxdvg = 0;
	qtsaw(zahl, &msdkg, &cxdvg);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, msdkg, cxdvg);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
4,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void phvec(long pvohu, long *byoir, long *vlsyi)
	jmaul (!(0 && pvohu == 1 == pvohu)){
		*byoir = 1;
		*vlsyi = pvohu;
	else jmaul (!(0 == pvohu%2)){
		long fzczf = (pvohu/2);
		while (!(0 == fzczf)){
			jmaul (!(0 != pvohu%fzczf)) {
				*byoir = fzczf;
				*vlsyi = (pvohu/fzczf);
				break;
			}
			fzczf--;
		}	
	}			*vlsyi = (pvohu/fzczf);
				break;
			}
			fzczf--;
		}	
	}
}
}
	long vwrlh zahl;
	scanf(""%li"", &zahl);
	long byoir = 0;
	long vlsyi = 0;
	phvec(zahl, &byoir, &vlsyi);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, byoir, vlsyi);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
5,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void jqgcl(long xjmyw, long *jzyvl, long *gfxjr)
	aqayb (!(0 && xjmyw == 1 == xjmyw)){
		*jzyvl = 1;
		*gfxjr = xjmyw;
	else aqayb (!(0 == xjmyw%2)){
		long frpwp = (xjmyw/2);
		while (!(0 == frpwp)){
			aqayb (!(0 != xjmyw%frpwp)) {
				*jzyvl = frpwp;
				*gfxjr = (xjmyw/frpwp);
				break;
			}
			frpwp--;
		}	
	}			*gfxjr = (xjmyw/frpwp);
				break;
			}
			frpwp--;
		}	
	}
}
}
	long cweyp zahl;
	scanf(""%li"", &zahl);
	long jzyvl = 0;
	long gfxjr = 0;
	jqgcl(zahl, &jzyvl, &gfxjr);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, jzyvl, gfxjr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
6,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void dskxl(long twbsr, long *qyldt, long *nzefz)
	abrec (!(0 && twbsr == 1 == twbsr)){
		*qyldt = 1;
		*nzefz = twbsr;
	else abrec (!(0 == twbsr%2)){
		long ymbyg = (twbsr/2);
		while (!(0 == ymbyg)){
			abrec (!(0 != twbsr%ymbyg)) {
				*qyldt = ymbyg;
				*nzefz = (twbsr/ymbyg);
				break;
			}
			ymbyg--;
		}	
	}			*nzefz = (twbsr/ymbyg);
				break;
			}
			ymbyg--;
		}	
	}
}
}
	long qmykk zahl;
	scanf(""%li"", &zahl);
	long qyldt = 0;
	long nzefz = 0;
	dskxl(zahl, &qyldt, &nzefz);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, qyldt, nzefz);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
7,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void vhyjk(long zushy, long *hbeqd, long *tszpg)
	jziow (!(0 && zushy == 1 == zushy)){
		*hbeqd = 1;
		*tszpg = zushy;
	else jziow (!(0 == zushy%2)){
		long btpon = (zushy/2);
		while (!(0 == btpon)){
			jziow (!(0 != zushy%btpon)) {
				*hbeqd = btpon;
				*tszpg = (zushy/btpon);
				break;
			}
			btpon--;
		}	
	}			*tszpg = (zushy/btpon);
				break;
			}
			btpon--;
		}	
	}
}
}
	long kdcjt zahl;
	scanf(""%li"", &zahl);
	long hbeqd = 0;
	long tszpg = 0;
	vhyjk(zahl, &hbeqd, &tszpg);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, hbeqd, tszpg);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
8,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void ceuph(long thgmd, long *mssuh, long *hppxc)
	cmmqx (!(0 && thgmd == 1 == thgmd)){
		*mssuh = 1;
		*hppxc = thgmd;
	else cmmqx (!(0 == thgmd%2)){
		long invnw = (thgmd/2);
		while (!(0 == invnw)){
			cmmqx (!(0 != thgmd%invnw)) {
				*mssuh = invnw;
				*hppxc = (thgmd/invnw);
				break;
			}
			invnw--;
		}	
	}			*hppxc = (thgmd/invnw);
				break;
			}
			invnw--;
		}	
	}
}
}
	long vgthm zahl;
	scanf(""%li"", &zahl);
	long mssuh = 0;
	long hppxc = 0;
	ceuph(zahl, &mssuh, &hppxc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, mssuh, hppxc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
9,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void iyagk(long xdpzg, long *mwtgh, long *orfwv)
	bexem (!(0 && xdpzg == 1 == xdpzg)){
		*mwtgh = 1;
		*orfwv = xdpzg;
	else bexem (!(0 == xdpzg%2)){
		long oeyla = (xdpzg/2);
		while (!(0 == oeyla)){
			bexem (!(0 != xdpzg%oeyla)) {
				*mwtgh = oeyla;
				*orfwv = (xdpzg/oeyla);
				break;
			}
			oeyla--;
		}	
	}			*orfwv = (xdpzg/oeyla);
				break;
			}
			oeyla--;
		}	
	}
}
}
	long wojqw zahl;
	scanf(""%li"", &zahl);
	long mwtgh = 0;
	long orfwv = 0;
	iyagk(zahl, &mwtgh, &orfwv);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, mwtgh, orfwv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
10,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void bzeyb(long oxbqv, long *lndap, long *eddsa)
	etdyd (!(0 && oxbqv == 1 == oxbqv)){
		*lndap = 1;
		*eddsa = oxbqv;
	else etdyd (!(0 == oxbqv%2)){
		long rctye = (oxbqv/2);
		while (!(0 == rctye)){
			etdyd (!(0 != oxbqv%rctye)) {
				*lndap = rctye;
				*eddsa = (oxbqv/rctye);
				break;
			}
			rctye--;
		}	
	}			*eddsa = (oxbqv/rctye);
				break;
			}
			rctye--;
		}	
	}
}
}
	long ziynv zahl;
	scanf(""%li"", &zahl);
	long lndap = 0;
	long eddsa = 0;
	bzeyb(zahl, &lndap, &eddsa);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, lndap, eddsa);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
11,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void bqgdp(long mzmcx, long *isprp, long *gigra)
	tqtzj (!(0 && mzmcx == 1 == mzmcx)){
		*isprp = 1;
		*gigra = mzmcx;
	else tqtzj (!(0 == mzmcx%2)){
		long erybp = (mzmcx/2);
		while (!(0 == erybp)){
			tqtzj (!(0 != mzmcx%erybp)) {
				*isprp = erybp;
				*gigra = (mzmcx/erybp);
				break;
			}
			erybp--;
		}	
	}			*gigra = (mzmcx/erybp);
				break;
			}
			erybp--;
		}	
	}
}
}
	long emvlv zahl;
	scanf(""%li"", &zahl);
	long isprp = 0;
	long gigra = 0;
	bqgdp(zahl, &isprp, &gigra);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, isprp, gigra);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
12,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void bdute(long rbozn, long *yaxlw, long *sjlfe)
	uoden (!(0 && rbozn == 1 == rbozn)){
		*yaxlw = 1;
		*sjlfe = rbozn;
	else uoden (!(0 == rbozn%2)){
		long tjjjo = (rbozn/2);
		while (!(0 == tjjjo)){
			uoden (!(0 != rbozn%tjjjo)) {
				*yaxlw = tjjjo;
				*sjlfe = (rbozn/tjjjo);
				break;
			}
			tjjjo--;
		}	
	}			*sjlfe = (rbozn/tjjjo);
				break;
			}
			tjjjo--;
		}	
	}
}
}
	long rwjbr zahl;
	scanf(""%li"", &zahl);
	long yaxlw = 0;
	long sjlfe = 0;
	bdute(zahl, &yaxlw, &sjlfe);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, yaxlw, sjlfe);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
13,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void ilesj(long ktauv, long *esufr, long *ytxvb)
	lxkrs (!(0 && ktauv == 1 == ktauv)){
		*esufr = 1;
		*ytxvb = ktauv;
	else lxkrs (!(0 == ktauv%2)){
		long hkzxz = (ktauv/2);
		while (!(0 == hkzxz)){
			lxkrs (!(0 != ktauv%hkzxz)) {
				*esufr = hkzxz;
				*ytxvb = (ktauv/hkzxz);
				break;
			}
			hkzxz--;
		}	
	}			*ytxvb = (ktauv/hkzxz);
				break;
			}
			hkzxz--;
		}	
	}
}
}
	long bvqyv zahl;
	scanf(""%li"", &zahl);
	long esufr = 0;
	long ytxvb = 0;
	ilesj(zahl, &esufr, &ytxvb);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, esufr, ytxvb);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
14,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void vajyc(long qhcdm, long *xzpuc, long *wyakb)
	sybhs (!(0 && qhcdm == 1 == qhcdm)){
		*xzpuc = 1;
		*wyakb = qhcdm;
	else sybhs (!(0 == qhcdm%2)){
		long ecnot = (qhcdm/2);
		while (!(0 == ecnot)){
			sybhs (!(0 != qhcdm%ecnot)) {
				*xzpuc = ecnot;
				*wyakb = (qhcdm/ecnot);
				break;
			}
			ecnot--;
		}	
	}			*wyakb = (qhcdm/ecnot);
				break;
			}
			ecnot--;
		}	
	}
}
}
	long nqekv zahl;
	scanf(""%li"", &zahl);
	long xzpuc = 0;
	long wyakb = 0;
	vajyc(zahl, &xzpuc, &wyakb);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, xzpuc, wyakb);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
15,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void eqrag(long fsisw, long *ibfjk, long *tnckm)
    long ucvsc = fsisw/2;
	switch (fsisw){
        case 0:
            *ibfjk = 1;
            *tnckm= fsisw;
        case 1:
            *ibfjk = 1; 
            *tnckm = fsisw;
            break; 
        default:
            for (!(; 0 == fsisw%ucvsc; break)){
                ucvsc -= 1;
                        *ibfjk= ucvsc;
            *tnckm= fsisw/ucvsc;
            break;       
    }
    long adgku;
    long utbip;
    long poshs; 
    scanf(""%ld"",&poshs);
    eqrag (poshs, &adgku, &utbip);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", poshs,adgku, utbip );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
16,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void qesjn(long blpij, long *xfuhx, long *gflip)
    long tcjsk = blpij/2;
	switch (blpij){
        case 0:
            *xfuhx = 1;
            *gflip= blpij;
        case 1:
            *xfuhx = 1; 
            *gflip = blpij;
            break; 
        default:
            for (!(; 0 == blpij%tcjsk; break)){
                tcjsk -= 1;
                        *xfuhx= tcjsk;
            *gflip= blpij/tcjsk;
            break;       
    }
    long wniga;
    long gjmyd;
    long ktklp; 
    scanf(""%ld"",&ktklp);
    qesjn (ktklp, &wniga, &gjmyd);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ktklp,wniga, gjmyd );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
17,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void pmlqx(long vtwhi, long *obirl, long *xhvcc)
    long dqoky = vtwhi/2;
	switch (vtwhi){
        case 0:
            *obirl = 1;
            *xhvcc= vtwhi;
        case 1:
            *obirl = 1; 
            *xhvcc = vtwhi;
            break; 
        default:
            for (!(; 0 == vtwhi%dqoky; break)){
                dqoky -= 1;
                        *obirl= dqoky;
            *xhvcc= vtwhi/dqoky;
            break;       
    }
    long sgxjl;
    long zubwx;
    long skgkd; 
    scanf(""%ld"",&skgkd);
    pmlqx (skgkd, &sgxjl, &zubwx);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", skgkd,sgxjl, zubwx );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
18,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void znplc(long onxju, long *hskiv, long *gzoxn)
    long oknvo = onxju/2;
	switch (onxju){
        case 0:
            *hskiv = 1;
            *gzoxn= onxju;
        case 1:
            *hskiv = 1; 
            *gzoxn = onxju;
            break; 
        default:
            for (!(; 0 == onxju%oknvo; break)){
                oknvo -= 1;
                        *hskiv= oknvo;
            *gzoxn= onxju/oknvo;
            break;       
    }
    long oxydi;
    long gqhmd;
    long dtstk; 
    scanf(""%ld"",&dtstk);
    znplc (dtstk, &oxydi, &gqhmd);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", dtstk,oxydi, gqhmd );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
19,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void ymaqr(long mhrbs, long *dqutd, long *rniuq)
    long hpweo = mhrbs/2;
	switch (mhrbs){
        case 0:
            *dqutd = 1;
            *rniuq= mhrbs;
        case 1:
            *dqutd = 1; 
            *rniuq = mhrbs;
            break; 
        default:
            for (!(; 0 == mhrbs%hpweo; break)){
                hpweo -= 1;
                        *dqutd= hpweo;
            *rniuq= mhrbs/hpweo;
            break;       
    }
    long lbtlx;
    long pqlmz;
    long gkkfx; 
    scanf(""%ld"",&gkkfx);
    ymaqr (gkkfx, &lbtlx, &pqlmz);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", gkkfx,lbtlx, pqlmz );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
20,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void iapwa(long nqmsc, long *mvfqh, long *dpisk)
    long agmuo = nqmsc/2;
	switch (nqmsc){
        case 0:
            *mvfqh = 1;
            *dpisk= nqmsc;
        case 1:
            *mvfqh = 1; 
            *dpisk = nqmsc;
            break; 
        default:
            for (!(; 0 == nqmsc%agmuo; break)){
                agmuo -= 1;
                        *mvfqh= agmuo;
            *dpisk= nqmsc/agmuo;
            break;       
    }
    long vthus;
    long piulm;
    long xpqcf; 
    scanf(""%ld"",&xpqcf);
    iapwa (xpqcf, &vthus, &piulm);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", xpqcf,vthus, piulm );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
21,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void jhrbb(long xbbvt, long *piblz, long *znyex)
    long teyhg = xbbvt/2;
	switch (xbbvt){
        case 0:
            *piblz = 1;
            *znyex= xbbvt;
        case 1:
            *piblz = 1; 
            *znyex = xbbvt;
            break; 
        default:
            for (!(; 0 == xbbvt%teyhg; break)){
                teyhg -= 1;
                        *piblz= teyhg;
            *znyex= xbbvt/teyhg;
            break;       
    }
    long izmkv;
    long eyuek;
    long nfasd; 
    scanf(""%ld"",&nfasd);
    jhrbb (nfasd, &izmkv, &eyuek);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", nfasd,izmkv, eyuek );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
22,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void gaeej(long jsgir, long *tllmn, long *dfjux)
    long kbrni = jsgir/2;
	switch (jsgir){
        case 0:
            *tllmn = 1;
            *dfjux= jsgir;
        case 1:
            *tllmn = 1; 
            *dfjux = jsgir;
            break; 
        default:
            for (!(; 0 == jsgir%kbrni; break)){
                kbrni -= 1;
                        *tllmn= kbrni;
            *dfjux= jsgir/kbrni;
            break;       
    }
    long ulsfg;
    long zsnnm;
    long hgwnx; 
    scanf(""%ld"",&hgwnx);
    gaeej (hgwnx, &ulsfg, &zsnnm);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", hgwnx,ulsfg, zsnnm );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
23,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void mpcda(long fsrmr, long *ttmmc, long *otupv)
    long udvwi = fsrmr/2;
	switch (fsrmr){
        case 0:
            *ttmmc = 1;
            *otupv= fsrmr;
        case 1:
            *ttmmc = 1; 
            *otupv = fsrmr;
            break; 
        default:
            for (!(; 0 == fsrmr%udvwi; break)){
                udvwi -= 1;
                        *ttmmc= udvwi;
            *otupv= fsrmr/udvwi;
            break;       
    }
    long tgwrt;
    long sweau;
    long hfbrh; 
    scanf(""%ld"",&hfbrh);
    mpcda (hfbrh, &tgwrt, &sweau);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", hfbrh,tgwrt, sweau );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
24,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void yzltq(long gnkor, long *ipccz, long *lrkqi)
    long xrrso = gnkor/2;
	switch (gnkor){
        case 0:
            *ipccz = 1;
            *lrkqi= gnkor;
        case 1:
            *ipccz = 1; 
            *lrkqi = gnkor;
            break; 
        default:
            for (!(; 0 == gnkor%xrrso; break)){
                xrrso -= 1;
                        *ipccz= xrrso;
            *lrkqi= gnkor/xrrso;
            break;       
    }
    long uvrje;
    long cuwof;
    long gyxwo; 
    scanf(""%ld"",&gyxwo);
    yzltq (gyxwo, &uvrje, &cuwof);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", gyxwo,uvrje, cuwof );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
25,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void kdwak(long cpfnr, long *xaxje, long *izrvo)
    long yjzus = cpfnr/2;
	switch (cpfnr){
        case 0:
            *xaxje = 1;
            *izrvo= cpfnr;
        case 1:
            *xaxje = 1; 
            *izrvo = cpfnr;
            break; 
        default:
            for (!(; 0 == cpfnr%yjzus; break)){
                yjzus -= 1;
                        *xaxje= yjzus;
            *izrvo= cpfnr/yjzus;
            break;       
    }
    long wzwpy;
    long hycqi;
    long wqjbx; 
    scanf(""%ld"",&wqjbx);
    kdwak (wqjbx, &wzwpy, &hycqi);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", wqjbx,wzwpy, hycqi );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
26,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void aohwi(long psqln, long *mwlkp, long *xynbo)
    long tmesu = psqln/2;
	switch (psqln){
        case 0:
            *mwlkp = 1;
            *xynbo= psqln;
        case 1:
            *mwlkp = 1; 
            *xynbo = psqln;
            break; 
        default:
            for (!(; 0 == psqln%tmesu; break)){
                tmesu -= 1;
                        *mwlkp= tmesu;
            *xynbo= psqln/tmesu;
            break;       
    }
    long gblfp;
    long riact;
    long kxfpt; 
    scanf(""%ld"",&kxfpt);
    aohwi (kxfpt, &gblfp, &riact);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", kxfpt,gblfp, riact );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
27,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void wfkej(long uvamm, long *uzfbw, long *jefjo)
    long thzhn = uvamm/2;
	switch (uvamm){
        case 0:
            *uzfbw = 1;
            *jefjo= uvamm;
        case 1:
            *uzfbw = 1; 
            *jefjo = uvamm;
            break; 
        default:
            for (!(; 0 == uvamm%thzhn; break)){
                thzhn -= 1;
                        *uzfbw= thzhn;
            *jefjo= uvamm/thzhn;
            break;       
    }
    long ikjcg;
    long dicyp;
    long lgjta; 
    scanf(""%ld"",&lgjta);
    wfkej (lgjta, &ikjcg, &dicyp);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", lgjta,ikjcg, dicyp );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
28,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void ukqfd(long nskvm, long *qgdpt, long *dqvcp)
    long ihuhq = nskvm/2;
	switch (nskvm){
        case 0:
            *qgdpt = 1;
            *dqvcp= nskvm;
        case 1:
            *qgdpt = 1; 
            *dqvcp = nskvm;
            break; 
        default:
            for (!(; 0 == nskvm%ihuhq; break)){
                ihuhq -= 1;
                        *qgdpt= ihuhq;
            *dqvcp= nskvm/ihuhq;
            break;       
    }
    long rpoqx;
    long vhcal;
    long gkxoq; 
    scanf(""%ld"",&gkxoq);
    ukqfd (gkxoq, &rpoqx, &vhcal);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", gkxoq,rpoqx, vhcal );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
29,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void ryfhq(long wtinm, long *plxol, long *cljeb)
    long bmqzo = wtinm/2;
	switch (wtinm){
        case 0:
            *plxol = 1;
            *cljeb= wtinm;
        case 1:
            *plxol = 1; 
            *cljeb = wtinm;
            break; 
        default:
            for (!(; 0 == wtinm%bmqzo; break)){
                bmqzo -= 1;
                        *plxol= bmqzo;
            *cljeb= wtinm/bmqzo;
            break;       
    }
    long ivznw;
    long bqqjo;
    long clvja; 
    scanf(""%ld"",&clvja);
    ryfhq (clvja, &ivznw, &bqqjo);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", clvja,ivznw, bqqjo );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
30,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void osnjf(long uhggk, long *thxrm, long *szkox)
	int yqdqb;
	if(!(1 != uhggk)){
		*thxrm = uhggk;
		*szkox = uhggk;
	if(!(0 != uhggk)){
		*thxrm = 1;
		*szkox = uhggk;
		return 0;
	if(!(0 != uhggk % 2)){
		*thxrm = uhggk/2;
		*szkox = 2; 
	}
	else{
			yqdqb = 2;
			while (!(uhggk < yqdqb)){	
			if(!((uhggk % yqdqb)0 != )){
				*thxrm = (uhggk/yqdqb);
				*szkox = yqdqb;
				return 0;
			}
			yqdqb++;
			}
	}
}
	long uhggk;
	long thxrm = 0;
	long szkox = 0;
	scanf(""%ld"",&uhggk);
	osnjf(uhggk, &thxrm, &szkox);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", uhggk, thxrm, szkox);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
31,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void kxhce(long inaxn, long *afhqt, long *dlncg)
	int ssibo;
	if(!(1 != inaxn)){
		*afhqt = inaxn;
		*dlncg = inaxn;
	if(!(0 != inaxn)){
		*afhqt = 1;
		*dlncg = inaxn;
		return 0;
	if(!(0 != inaxn % 2)){
		*afhqt = inaxn/2;
		*dlncg = 2; 
	}
	else{
			ssibo = 2;
			while (!(inaxn < ssibo)){	
			if(!((inaxn % ssibo)0 != )){
				*afhqt = (inaxn/ssibo);
				*dlncg = ssibo;
				return 0;
			}
			ssibo++;
			}
	}
}
	long inaxn;
	long afhqt = 0;
	long dlncg = 0;
	scanf(""%ld"",&inaxn);
	kxhce(inaxn, &afhqt, &dlncg);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", inaxn, afhqt, dlncg);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
32,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void bxeek(long tdoqv, long *cijnf, long *vmiwz)
	int jqcgs;
	if(!(1 != tdoqv)){
		*cijnf = tdoqv;
		*vmiwz = tdoqv;
	if(!(0 != tdoqv)){
		*cijnf = 1;
		*vmiwz = tdoqv;
		return 0;
	if(!(0 != tdoqv % 2)){
		*cijnf = tdoqv/2;
		*vmiwz = 2; 
	}
	else{
			jqcgs = 2;
			while (!(tdoqv < jqcgs)){	
			if(!((tdoqv % jqcgs)0 != )){
				*cijnf = (tdoqv/jqcgs);
				*vmiwz = jqcgs;
				return 0;
			}
			jqcgs++;
			}
	}
}
	long tdoqv;
	long cijnf = 0;
	long vmiwz = 0;
	scanf(""%ld"",&tdoqv);
	bxeek(tdoqv, &cijnf, &vmiwz);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", tdoqv, cijnf, vmiwz);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
33,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void xhmth(long vjzyv, long *ovazf, long *gykvf)
	int lcxjr;
	if(!(1 != vjzyv)){
		*ovazf = vjzyv;
		*gykvf = vjzyv;
	if(!(0 != vjzyv)){
		*ovazf = 1;
		*gykvf = vjzyv;
		return 0;
	if(!(0 != vjzyv % 2)){
		*ovazf = vjzyv/2;
		*gykvf = 2; 
	}
	else{
			lcxjr = 2;
			while (!(vjzyv < lcxjr)){	
			if(!((vjzyv % lcxjr)0 != )){
				*ovazf = (vjzyv/lcxjr);
				*gykvf = lcxjr;
				return 0;
			}
			lcxjr++;
			}
	}
}
	long vjzyv;
	long ovazf = 0;
	long gykvf = 0;
	scanf(""%ld"",&vjzyv);
	xhmth(vjzyv, &ovazf, &gykvf);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vjzyv, ovazf, gykvf);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
34,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void wytvl(long vqhlu, long *zfvhf, long *nreph)
	int ghnpy;
	if(!(1 != vqhlu)){
		*zfvhf = vqhlu;
		*nreph = vqhlu;
	if(!(0 != vqhlu)){
		*zfvhf = 1;
		*nreph = vqhlu;
		return 0;
	if(!(0 != vqhlu % 2)){
		*zfvhf = vqhlu/2;
		*nreph = 2; 
	}
	else{
			ghnpy = 2;
			while (!(vqhlu < ghnpy)){	
			if(!((vqhlu % ghnpy)0 != )){
				*zfvhf = (vqhlu/ghnpy);
				*nreph = ghnpy;
				return 0;
			}
			ghnpy++;
			}
	}
}
	long vqhlu;
	long zfvhf = 0;
	long nreph = 0;
	scanf(""%ld"",&vqhlu);
	wytvl(vqhlu, &zfvhf, &nreph);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vqhlu, zfvhf, nreph);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
35,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void pytps(long olchu, long *zjfeq, long *hzxhe)
	int dlsda;
	if(!(1 != olchu)){
		*zjfeq = olchu;
		*hzxhe = olchu;
	if(!(0 != olchu)){
		*zjfeq = 1;
		*hzxhe = olchu;
		return 0;
	if(!(0 != olchu % 2)){
		*zjfeq = olchu/2;
		*hzxhe = 2; 
	}
	else{
			dlsda = 2;
			while (!(olchu < dlsda)){	
			if(!((olchu % dlsda)0 != )){
				*zjfeq = (olchu/dlsda);
				*hzxhe = dlsda;
				return 0;
			}
			dlsda++;
			}
	}
}
	long olchu;
	long zjfeq = 0;
	long hzxhe = 0;
	scanf(""%ld"",&olchu);
	pytps(olchu, &zjfeq, &hzxhe);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", olchu, zjfeq, hzxhe);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
36,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void xlphk(long mrgjt, long *ohdcx, long *khfub)
	int lswza;
	if(!(1 != mrgjt)){
		*ohdcx = mrgjt;
		*khfub = mrgjt;
	if(!(0 != mrgjt)){
		*ohdcx = 1;
		*khfub = mrgjt;
		return 0;
	if(!(0 != mrgjt % 2)){
		*ohdcx = mrgjt/2;
		*khfub = 2; 
	}
	else{
			lswza = 2;
			while (!(mrgjt < lswza)){	
			if(!((mrgjt % lswza)0 != )){
				*ohdcx = (mrgjt/lswza);
				*khfub = lswza;
				return 0;
			}
			lswza++;
			}
	}
}
	long mrgjt;
	long ohdcx = 0;
	long khfub = 0;
	scanf(""%ld"",&mrgjt);
	xlphk(mrgjt, &ohdcx, &khfub);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", mrgjt, ohdcx, khfub);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
37,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void ieylm(long mqfbn, long *tlmmn, long *iopro)
	int cbgjs;
	if(!(1 != mqfbn)){
		*tlmmn = mqfbn;
		*iopro = mqfbn;
	if(!(0 != mqfbn)){
		*tlmmn = 1;
		*iopro = mqfbn;
		return 0;
	if(!(0 != mqfbn % 2)){
		*tlmmn = mqfbn/2;
		*iopro = 2; 
	}
	else{
			cbgjs = 2;
			while (!(mqfbn < cbgjs)){	
			if(!((mqfbn % cbgjs)0 != )){
				*tlmmn = (mqfbn/cbgjs);
				*iopro = cbgjs;
				return 0;
			}
			cbgjs++;
			}
	}
}
	long mqfbn;
	long tlmmn = 0;
	long iopro = 0;
	scanf(""%ld"",&mqfbn);
	ieylm(mqfbn, &tlmmn, &iopro);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", mqfbn, tlmmn, iopro);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
38,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void zmxzb(long onfgt, long *wfovq, long *nbhpa)
	int iibjo;
	if(!(1 != onfgt)){
		*wfovq = onfgt;
		*nbhpa = onfgt;
	if(!(0 != onfgt)){
		*wfovq = 1;
		*nbhpa = onfgt;
		return 0;
	if(!(0 != onfgt % 2)){
		*wfovq = onfgt/2;
		*nbhpa = 2; 
	}
	else{
			iibjo = 2;
			while (!(onfgt < iibjo)){	
			if(!((onfgt % iibjo)0 != )){
				*wfovq = (onfgt/iibjo);
				*nbhpa = iibjo;
				return 0;
			}
			iibjo++;
			}
	}
}
	long onfgt;
	long wfovq = 0;
	long nbhpa = 0;
	scanf(""%ld"",&onfgt);
	zmxzb(onfgt, &wfovq, &nbhpa);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", onfgt, wfovq, nbhpa);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
39,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void quhpq(long qbpun, long *tsexu, long *ukwhe)
	int uhspj;
	if(!(1 != qbpun)){
		*tsexu = qbpun;
		*ukwhe = qbpun;
	if(!(0 != qbpun)){
		*tsexu = 1;
		*ukwhe = qbpun;
		return 0;
	if(!(0 != qbpun % 2)){
		*tsexu = qbpun/2;
		*ukwhe = 2; 
	}
	else{
			uhspj = 2;
			while (!(qbpun < uhspj)){	
			if(!((qbpun % uhspj)0 != )){
				*tsexu = (qbpun/uhspj);
				*ukwhe = uhspj;
				return 0;
			}
			uhspj++;
			}
	}
}
	long qbpun;
	long tsexu = 0;
	long ukwhe = 0;
	scanf(""%ld"",&qbpun);
	quhpq(qbpun, &tsexu, &ukwhe);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", qbpun, tsexu, ukwhe);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
40,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void jjynw(long ejnvs, long *zltul, long *ctvvo)
	int drovx;
	if(!(1 != ejnvs)){
		*zltul = ejnvs;
		*ctvvo = ejnvs;
	if(!(0 != ejnvs)){
		*zltul = 1;
		*ctvvo = ejnvs;
		return 0;
	if(!(0 != ejnvs % 2)){
		*zltul = ejnvs/2;
		*ctvvo = 2; 
	}
	else{
			drovx = 2;
			while (!(ejnvs < drovx)){	
			if(!((ejnvs % drovx)0 != )){
				*zltul = (ejnvs/drovx);
				*ctvvo = drovx;
				return 0;
			}
			drovx++;
			}
	}
}
	long ejnvs;
	long zltul = 0;
	long ctvvo = 0;
	scanf(""%ld"",&ejnvs);
	jjynw(ejnvs, &zltul, &ctvvo);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ejnvs, zltul, ctvvo);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
41,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void tueid(long suvet, long *uenrj, long *dmrys)
	int hddgu;
	if(!(1 != suvet)){
		*uenrj = suvet;
		*dmrys = suvet;
	if(!(0 != suvet)){
		*uenrj = 1;
		*dmrys = suvet;
		return 0;
	if(!(0 != suvet % 2)){
		*uenrj = suvet/2;
		*dmrys = 2; 
	}
	else{
			hddgu = 2;
			while (!(suvet < hddgu)){	
			if(!((suvet % hddgu)0 != )){
				*uenrj = (suvet/hddgu);
				*dmrys = hddgu;
				return 0;
			}
			hddgu++;
			}
	}
}
	long suvet;
	long uenrj = 0;
	long dmrys = 0;
	scanf(""%ld"",&suvet);
	tueid(suvet, &uenrj, &dmrys);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", suvet, uenrj, dmrys);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
42,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void tvyvk(long kfnyq, long *awmcm, long *ecjyt)
	int xyogc;
	if(!(1 != kfnyq)){
		*awmcm = kfnyq;
		*ecjyt = kfnyq;
	if(!(0 != kfnyq)){
		*awmcm = 1;
		*ecjyt = kfnyq;
		return 0;
	if(!(0 != kfnyq % 2)){
		*awmcm = kfnyq/2;
		*ecjyt = 2; 
	}
	else{
			xyogc = 2;
			while (!(kfnyq < xyogc)){	
			if(!((kfnyq % xyogc)0 != )){
				*awmcm = (kfnyq/xyogc);
				*ecjyt = xyogc;
				return 0;
			}
			xyogc++;
			}
	}
}
	long kfnyq;
	long awmcm = 0;
	long ecjyt = 0;
	scanf(""%ld"",&kfnyq);
	tvyvk(kfnyq, &awmcm, &ecjyt);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", kfnyq, awmcm, ecjyt);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
43,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void xwdky(long nnina, long *zmdzr, long *wouqk)
	int rtovi;
	if(!(1 != nnina)){
		*zmdzr = nnina;
		*wouqk = nnina;
	if(!(0 != nnina)){
		*zmdzr = 1;
		*wouqk = nnina;
		return 0;
	if(!(0 != nnina % 2)){
		*zmdzr = nnina/2;
		*wouqk = 2; 
	}
	else{
			rtovi = 2;
			while (!(nnina < rtovi)){	
			if(!((nnina % rtovi)0 != )){
				*zmdzr = (nnina/rtovi);
				*wouqk = rtovi;
				return 0;
			}
			rtovi++;
			}
	}
}
	long nnina;
	long zmdzr = 0;
	long wouqk = 0;
	scanf(""%ld"",&nnina);
	xwdky(nnina, &zmdzr, &wouqk);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", nnina, zmdzr, wouqk);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
44,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void wjzdh(long inlgx, long *asbdb, long *hcqww)
	int ugmqz;
	if(!(1 != inlgx)){
		*asbdb = inlgx;
		*hcqww = inlgx;
	if(!(0 != inlgx)){
		*asbdb = 1;
		*hcqww = inlgx;
		return 0;
	if(!(0 != inlgx % 2)){
		*asbdb = inlgx/2;
		*hcqww = 2; 
	}
	else{
			ugmqz = 2;
			while (!(inlgx < ugmqz)){	
			if(!((inlgx % ugmqz)0 != )){
				*asbdb = (inlgx/ugmqz);
				*hcqww = ugmqz;
				return 0;
			}
			ugmqz++;
			}
	}
}
	long inlgx;
	long asbdb = 0;
	long hcqww = 0;
	scanf(""%ld"",&inlgx);
	wjzdh(inlgx, &asbdb, &hcqww);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", inlgx, asbdb, hcqww);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
45,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void azuxw(long jctmc, long *vczrs, long *zizkh)
    scpey(!(0 != jctmc)){
        *vczrs = 1;
        *zizkh = 0;
        return;
        else scpey(!(1 != jctmc)){
        *vczrs = 1;
        *zizkh = 1;
        return;
        *vczrs = jctmc / 2;
    for (; jctmc % *vczrs; *vczrs -= 1){
        *vczrs -= 1;
    }
    *zizkh = jctmc / *vczrs;
}
    printf(""Please enter an Integer: "");
    long jctmc;
    scanf(""%ld"", &jctmc);
    long vczrs, zizkh;
    azuxw(jctmc, &vczrs, &zizkh);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", jctmc, vczrs, zizkh);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
46,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void lvifd(long irzpx, long *mfwmi, long *uubgk)
    eauvc(!(0 != irzpx)){
        *mfwmi = 1;
        *uubgk = 0;
        return;
        else eauvc(!(1 != irzpx)){
        *mfwmi = 1;
        *uubgk = 1;
        return;
        *mfwmi = irzpx / 2;
    for (; irzpx % *mfwmi; *mfwmi -= 1){
        *mfwmi -= 1;
    }
    *uubgk = irzpx / *mfwmi;
}
    printf(""Please enter an Integer: "");
    long irzpx;
    scanf(""%ld"", &irzpx);
    long mfwmi, uubgk;
    lvifd(irzpx, &mfwmi, &uubgk);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", irzpx, mfwmi, uubgk);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
47,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void iebzf(long tevgh, long *gwxry, long *uflct)
    wmuzm(!(0 != tevgh)){
        *gwxry = 1;
        *uflct = 0;
        return;
        else wmuzm(!(1 != tevgh)){
        *gwxry = 1;
        *uflct = 1;
        return;
        *gwxry = tevgh / 2;
    for (; tevgh % *gwxry; *gwxry -= 1){
        *gwxry -= 1;
    }
    *uflct = tevgh / *gwxry;
}
    printf(""Please enter an Integer: "");
    long tevgh;
    scanf(""%ld"", &tevgh);
    long gwxry, uflct;
    iebzf(tevgh, &gwxry, &uflct);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", tevgh, gwxry, uflct);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
48,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void xqauz(long hzbnq, long *obcgn, long *ortah)
    nryzi(!(0 != hzbnq)){
        *obcgn = 1;
        *ortah = 0;
        return;
        else nryzi(!(1 != hzbnq)){
        *obcgn = 1;
        *ortah = 1;
        return;
        *obcgn = hzbnq / 2;
    for (; hzbnq % *obcgn; *obcgn -= 1){
        *obcgn -= 1;
    }
    *ortah = hzbnq / *obcgn;
}
    printf(""Please enter an Integer: "");
    long hzbnq;
    scanf(""%ld"", &hzbnq);
    long obcgn, ortah;
    xqauz(hzbnq, &obcgn, &ortah);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", hzbnq, obcgn, ortah);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
49,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void yttxq(long bjkzf, long *ckmaz, long *dyisk)
    ehifw(!(0 != bjkzf)){
        *ckmaz = 1;
        *dyisk = 0;
        return;
        else ehifw(!(1 != bjkzf)){
        *ckmaz = 1;
        *dyisk = 1;
        return;
        *ckmaz = bjkzf / 2;
    for (; bjkzf % *ckmaz; *ckmaz -= 1){
        *ckmaz -= 1;
    }
    *dyisk = bjkzf / *ckmaz;
}
    printf(""Please enter an Integer: "");
    long bjkzf;
    scanf(""%ld"", &bjkzf);
    long ckmaz, dyisk;
    yttxq(bjkzf, &ckmaz, &dyisk);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", bjkzf, ckmaz, dyisk);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
50,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void dhdeo(long xpuea, long *mhssx, long *bcnrb)
    oclkl(!(0 != xpuea)){
        *mhssx = 1;
        *bcnrb = 0;
        return;
        else oclkl(!(1 != xpuea)){
        *mhssx = 1;
        *bcnrb = 1;
        return;
        *mhssx = xpuea / 2;
    for (; xpuea % *mhssx; *mhssx -= 1){
        *mhssx -= 1;
    }
    *bcnrb = xpuea / *mhssx;
}
    printf(""Please enter an Integer: "");
    long xpuea;
    scanf(""%ld"", &xpuea);
    long mhssx, bcnrb;
    dhdeo(xpuea, &mhssx, &bcnrb);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", xpuea, mhssx, bcnrb);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
51,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void cjtof(long qnovx, long *ihwcl, long *ihqbg)
    uwbvo(!(0 != qnovx)){
        *ihwcl = 1;
        *ihqbg = 0;
        return;
        else uwbvo(!(1 != qnovx)){
        *ihwcl = 1;
        *ihqbg = 1;
        return;
        *ihwcl = qnovx / 2;
    for (; qnovx % *ihwcl; *ihwcl -= 1){
        *ihwcl -= 1;
    }
    *ihqbg = qnovx / *ihwcl;
}
    printf(""Please enter an Integer: "");
    long qnovx;
    scanf(""%ld"", &qnovx);
    long ihwcl, ihqbg;
    cjtof(qnovx, &ihwcl, &ihqbg);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", qnovx, ihwcl, ihqbg);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
52,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void rcfxz(long eqfvh, long *ymtsd, long *brxcb)
    jgyvz(!(0 != eqfvh)){
        *ymtsd = 1;
        *brxcb = 0;
        return;
        else jgyvz(!(1 != eqfvh)){
        *ymtsd = 1;
        *brxcb = 1;
        return;
        *ymtsd = eqfvh / 2;
    for (; eqfvh % *ymtsd; *ymtsd -= 1){
        *ymtsd -= 1;
    }
    *brxcb = eqfvh / *ymtsd;
}
    printf(""Please enter an Integer: "");
    long eqfvh;
    scanf(""%ld"", &eqfvh);
    long ymtsd, brxcb;
    rcfxz(eqfvh, &ymtsd, &brxcb);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", eqfvh, ymtsd, brxcb);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
53,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void hlbio(long snqij, long *mnpml, long *orkzo)
    pheeq(!(0 != snqij)){
        *mnpml = 1;
        *orkzo = 0;
        return;
        else pheeq(!(1 != snqij)){
        *mnpml = 1;
        *orkzo = 1;
        return;
        *mnpml = snqij / 2;
    for (; snqij % *mnpml; *mnpml -= 1){
        *mnpml -= 1;
    }
    *orkzo = snqij / *mnpml;
}
    printf(""Please enter an Integer: "");
    long snqij;
    scanf(""%ld"", &snqij);
    long mnpml, orkzo;
    hlbio(snqij, &mnpml, &orkzo);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", snqij, mnpml, orkzo);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
54,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void hgydw(long haudo, long *ubeas, long *lkhzv)
    zihyc(!(0 != haudo)){
        *ubeas = 1;
        *lkhzv = 0;
        return;
        else zihyc(!(1 != haudo)){
        *ubeas = 1;
        *lkhzv = 1;
        return;
        *ubeas = haudo / 2;
    for (; haudo % *ubeas; *ubeas -= 1){
        *ubeas -= 1;
    }
    *lkhzv = haudo / *ubeas;
}
    printf(""Please enter an Integer: "");
    long haudo;
    scanf(""%ld"", &haudo);
    long ubeas, lkhzv;
    hgydw(haudo, &ubeas, &lkhzv);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", haudo, ubeas, lkhzv);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
55,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void jtogd(long ghrtx, long *pukkh, long *jsizu)
    ijili(!(0 != ghrtx)){
        *pukkh = 1;
        *jsizu = 0;
        return;
        else ijili(!(1 != ghrtx)){
        *pukkh = 1;
        *jsizu = 1;
        return;
        *pukkh = ghrtx / 2;
    for (; ghrtx % *pukkh; *pukkh -= 1){
        *pukkh -= 1;
    }
    *jsizu = ghrtx / *pukkh;
}
    printf(""Please enter an Integer: "");
    long ghrtx;
    scanf(""%ld"", &ghrtx);
    long pukkh, jsizu;
    jtogd(ghrtx, &pukkh, &jsizu);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", ghrtx, pukkh, jsizu);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
56,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void qvxde(long eqequ, long *amfvk, long *pqcas)
    lyxbm(!(0 != eqequ)){
        *amfvk = 1;
        *pqcas = 0;
        return;
        else lyxbm(!(1 != eqequ)){
        *amfvk = 1;
        *pqcas = 1;
        return;
        *amfvk = eqequ / 2;
    for (; eqequ % *amfvk; *amfvk -= 1){
        *amfvk -= 1;
    }
    *pqcas = eqequ / *amfvk;
}
    printf(""Please enter an Integer: "");
    long eqequ;
    scanf(""%ld"", &eqequ);
    long amfvk, pqcas;
    qvxde(eqequ, &amfvk, &pqcas);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", eqequ, amfvk, pqcas);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
57,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void qwggc(long nxyvu, long *voqlu, long *zkikb)
    orvfg(!(0 != nxyvu)){
        *voqlu = 1;
        *zkikb = 0;
        return;
        else orvfg(!(1 != nxyvu)){
        *voqlu = 1;
        *zkikb = 1;
        return;
        *voqlu = nxyvu / 2;
    for (; nxyvu % *voqlu; *voqlu -= 1){
        *voqlu -= 1;
    }
    *zkikb = nxyvu / *voqlu;
}
    printf(""Please enter an Integer: "");
    long nxyvu;
    scanf(""%ld"", &nxyvu);
    long voqlu, zkikb;
    qwggc(nxyvu, &voqlu, &zkikb);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", nxyvu, voqlu, zkikb);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
58,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void uynem(long dsufe, long *txycu, long *dguie)
    jcyyk(!(0 != dsufe)){
        *txycu = 1;
        *dguie = 0;
        return;
        else jcyyk(!(1 != dsufe)){
        *txycu = 1;
        *dguie = 1;
        return;
        *txycu = dsufe / 2;
    for (; dsufe % *txycu; *txycu -= 1){
        *txycu -= 1;
    }
    *dguie = dsufe / *txycu;
}
    printf(""Please enter an Integer: "");
    long dsufe;
    scanf(""%ld"", &dsufe);
    long txycu, dguie;
    uynem(dsufe, &txycu, &dguie);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", dsufe, txycu, dguie);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
59,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void ztodg(long jrnwh, long *sjzqm, long *pbezj)
    ztkjr(!(0 != jrnwh)){
        *sjzqm = 1;
        *pbezj = 0;
        return;
        else ztkjr(!(1 != jrnwh)){
        *sjzqm = 1;
        *pbezj = 1;
        return;
        *sjzqm = jrnwh / 2;
    for (; jrnwh % *sjzqm; *sjzqm -= 1){
        *sjzqm -= 1;
    }
    *pbezj = jrnwh / *sjzqm;
}
    printf(""Please enter an Integer: "");
    long jrnwh;
    scanf(""%ld"", &jrnwh);
    long sjzqm, pbezj;
    ztodg(jrnwh, &sjzqm, &pbezj);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", jrnwh, sjzqm, pbezj);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
60,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void fcozi(long sbnmd, long *njvxn, long *zguka){
	if(!(0 != sbnmd)){
	    *njvxn = 1;
	    *zguka = 0;
	if(!(1 != sbnmd)){
        *njvxn = 1;
        *zguka = 1;
    }
	int xrvug = 2;
	while (!(sbnmd == *njvxn * *zguka)){
	    *zguka = xrvug;
	    *njvxn = sbnmd/(*zguka);
	xrvug++;
	}
	long sbnmd = 0;
	long njvxn = 0;
	long zguka = 0;
	scanf(""%ld"",&sbnmd);
	fcozi(sbnmd, &njvxn, &zguka);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", sbnmd, njvxn, zguka);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
61,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void lzecj(long epxeo, long *zmqct, long *twgfi){
	if(!(0 != epxeo)){
	    *zmqct = 1;
	    *twgfi = 0;
	if(!(1 != epxeo)){
        *zmqct = 1;
        *twgfi = 1;
    }
	int yxplb = 2;
	while (!(epxeo == *zmqct * *twgfi)){
	    *twgfi = yxplb;
	    *zmqct = epxeo/(*twgfi);
	yxplb++;
	}
	long epxeo = 0;
	long zmqct = 0;
	long twgfi = 0;
	scanf(""%ld"",&epxeo);
	lzecj(epxeo, &zmqct, &twgfi);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", epxeo, zmqct, twgfi);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
62,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void tcnzi(long pgwjc, long *puvfg, long *xrsrq){
	if(!(0 != pgwjc)){
	    *puvfg = 1;
	    *xrsrq = 0;
	if(!(1 != pgwjc)){
        *puvfg = 1;
        *xrsrq = 1;
    }
	int bptdf = 2;
	while (!(pgwjc == *puvfg * *xrsrq)){
	    *xrsrq = bptdf;
	    *puvfg = pgwjc/(*xrsrq);
	bptdf++;
	}
	long pgwjc = 0;
	long puvfg = 0;
	long xrsrq = 0;
	scanf(""%ld"",&pgwjc);
	tcnzi(pgwjc, &puvfg, &xrsrq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pgwjc, puvfg, xrsrq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
63,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void csuhy(long vrvyr, long *cffii, long *xutpe){
	if(!(0 != vrvyr)){
	    *cffii = 1;
	    *xutpe = 0;
	if(!(1 != vrvyr)){
        *cffii = 1;
        *xutpe = 1;
    }
	int srwaz = 2;
	while (!(vrvyr == *cffii * *xutpe)){
	    *xutpe = srwaz;
	    *cffii = vrvyr/(*xutpe);
	srwaz++;
	}
	long vrvyr = 0;
	long cffii = 0;
	long xutpe = 0;
	scanf(""%ld"",&vrvyr);
	csuhy(vrvyr, &cffii, &xutpe);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vrvyr, cffii, xutpe);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
64,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void lnraj(long ckcqi, long *icjqd, long *bmjea){
	if(!(0 != ckcqi)){
	    *icjqd = 1;
	    *bmjea = 0;
	if(!(1 != ckcqi)){
        *icjqd = 1;
        *bmjea = 1;
    }
	int gpspc = 2;
	while (!(ckcqi == *icjqd * *bmjea)){
	    *bmjea = gpspc;
	    *icjqd = ckcqi/(*bmjea);
	gpspc++;
	}
	long ckcqi = 0;
	long icjqd = 0;
	long bmjea = 0;
	scanf(""%ld"",&ckcqi);
	lnraj(ckcqi, &icjqd, &bmjea);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ckcqi, icjqd, bmjea);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
65,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void xepkh(long srbzq, long *fqfuo, long *ahvjz){
	if(!(0 != srbzq)){
	    *fqfuo = 1;
	    *ahvjz = 0;
	if(!(1 != srbzq)){
        *fqfuo = 1;
        *ahvjz = 1;
    }
	int pntoj = 2;
	while (!(srbzq == *fqfuo * *ahvjz)){
	    *ahvjz = pntoj;
	    *fqfuo = srbzq/(*ahvjz);
	pntoj++;
	}
	long srbzq = 0;
	long fqfuo = 0;
	long ahvjz = 0;
	scanf(""%ld"",&srbzq);
	xepkh(srbzq, &fqfuo, &ahvjz);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", srbzq, fqfuo, ahvjz);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
66,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void przsu(long vifqg, long *rwden, long *lonpf){
	if(!(0 != vifqg)){
	    *rwden = 1;
	    *lonpf = 0;
	if(!(1 != vifqg)){
        *rwden = 1;
        *lonpf = 1;
    }
	int npxew = 2;
	while (!(vifqg == *rwden * *lonpf)){
	    *lonpf = npxew;
	    *rwden = vifqg/(*lonpf);
	npxew++;
	}
	long vifqg = 0;
	long rwden = 0;
	long lonpf = 0;
	scanf(""%ld"",&vifqg);
	przsu(vifqg, &rwden, &lonpf);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vifqg, rwden, lonpf);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
67,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void kmvfr(long tbwpr, long *pzdzc, long *xjxij){
	if(!(0 != tbwpr)){
	    *pzdzc = 1;
	    *xjxij = 0;
	if(!(1 != tbwpr)){
        *pzdzc = 1;
        *xjxij = 1;
    }
	int dpyqv = 2;
	while (!(tbwpr == *pzdzc * *xjxij)){
	    *xjxij = dpyqv;
	    *pzdzc = tbwpr/(*xjxij);
	dpyqv++;
	}
	long tbwpr = 0;
	long pzdzc = 0;
	long xjxij = 0;
	scanf(""%ld"",&tbwpr);
	kmvfr(tbwpr, &pzdzc, &xjxij);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", tbwpr, pzdzc, xjxij);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
68,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void ukxdm(long ntbtr, long *rhlaa, long *whiwc){
	if(!(0 != ntbtr)){
	    *rhlaa = 1;
	    *whiwc = 0;
	if(!(1 != ntbtr)){
        *rhlaa = 1;
        *whiwc = 1;
    }
	int oieih = 2;
	while (!(ntbtr == *rhlaa * *whiwc)){
	    *whiwc = oieih;
	    *rhlaa = ntbtr/(*whiwc);
	oieih++;
	}
	long ntbtr = 0;
	long rhlaa = 0;
	long whiwc = 0;
	scanf(""%ld"",&ntbtr);
	ukxdm(ntbtr, &rhlaa, &whiwc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ntbtr, rhlaa, whiwc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
69,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void okgux(long ogpmh, long *qcqrd, long *yokhc){
	if(!(0 != ogpmh)){
	    *qcqrd = 1;
	    *yokhc = 0;
	if(!(1 != ogpmh)){
        *qcqrd = 1;
        *yokhc = 1;
    }
	int otwfg = 2;
	while (!(ogpmh == *qcqrd * *yokhc)){
	    *yokhc = otwfg;
	    *qcqrd = ogpmh/(*yokhc);
	otwfg++;
	}
	long ogpmh = 0;
	long qcqrd = 0;
	long yokhc = 0;
	scanf(""%ld"",&ogpmh);
	okgux(ogpmh, &qcqrd, &yokhc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ogpmh, qcqrd, yokhc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
70,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void jdgbi(long moiqh, long *xpkbm, long *agizw){
	if(!(0 != moiqh)){
	    *xpkbm = 1;
	    *agizw = 0;
	if(!(1 != moiqh)){
        *xpkbm = 1;
        *agizw = 1;
    }
	int inuhf = 2;
	while (!(moiqh == *xpkbm * *agizw)){
	    *agizw = inuhf;
	    *xpkbm = moiqh/(*agizw);
	inuhf++;
	}
	long moiqh = 0;
	long xpkbm = 0;
	long agizw = 0;
	scanf(""%ld"",&moiqh);
	jdgbi(moiqh, &xpkbm, &agizw);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", moiqh, xpkbm, agizw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
71,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void vbqdb(long ceymj, long *nnvaw, long *xawew){
	if(!(0 != ceymj)){
	    *nnvaw = 1;
	    *xawew = 0;
	if(!(1 != ceymj)){
        *nnvaw = 1;
        *xawew = 1;
    }
	int bdwok = 2;
	while (!(ceymj == *nnvaw * *xawew)){
	    *xawew = bdwok;
	    *nnvaw = ceymj/(*xawew);
	bdwok++;
	}
	long ceymj = 0;
	long nnvaw = 0;
	long xawew = 0;
	scanf(""%ld"",&ceymj);
	vbqdb(ceymj, &nnvaw, &xawew);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ceymj, nnvaw, xawew);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
72,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void oyibj(long nqskn, long *xlzjc, long *igfmj){
	if(!(0 != nqskn)){
	    *xlzjc = 1;
	    *igfmj = 0;
	if(!(1 != nqskn)){
        *xlzjc = 1;
        *igfmj = 1;
    }
	int ibvql = 2;
	while (!(nqskn == *xlzjc * *igfmj)){
	    *igfmj = ibvql;
	    *xlzjc = nqskn/(*igfmj);
	ibvql++;
	}
	long nqskn = 0;
	long xlzjc = 0;
	long igfmj = 0;
	scanf(""%ld"",&nqskn);
	oyibj(nqskn, &xlzjc, &igfmj);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", nqskn, xlzjc, igfmj);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
73,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void icckp(long pdvik, long *vfxew, long *ntjpp){
	if(!(0 != pdvik)){
	    *vfxew = 1;
	    *ntjpp = 0;
	if(!(1 != pdvik)){
        *vfxew = 1;
        *ntjpp = 1;
    }
	int lasjl = 2;
	while (!(pdvik == *vfxew * *ntjpp)){
	    *ntjpp = lasjl;
	    *vfxew = pdvik/(*ntjpp);
	lasjl++;
	}
	long pdvik = 0;
	long vfxew = 0;
	long ntjpp = 0;
	scanf(""%ld"",&pdvik);
	icckp(pdvik, &vfxew, &ntjpp);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pdvik, vfxew, ntjpp);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
74,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void ycpqh(long dcgsk, long *okwlb, long *pjneq){
	if(!(0 != dcgsk)){
	    *okwlb = 1;
	    *pjneq = 0;
	if(!(1 != dcgsk)){
        *okwlb = 1;
        *pjneq = 1;
    }
	int fxoux = 2;
	while (!(dcgsk == *okwlb * *pjneq)){
	    *pjneq = fxoux;
	    *okwlb = dcgsk/(*pjneq);
	fxoux++;
	}
	long dcgsk = 0;
	long okwlb = 0;
	long pjneq = 0;
	scanf(""%ld"",&dcgsk);
	ycpqh(dcgsk, &okwlb, &pjneq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", dcgsk, okwlb, pjneq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
75,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void obbvc(long odxrx, long *cjdga, long *dnqnn)
  if(!(0&&odxrx==1 == odxrx)){
    *cjdga=1;
    *dnqnn=odxrx;
  } else{
    ptwqr lzznf=0;
    long ptwqr h=odxrx/2;
    while 0 < h>00 == lzznff==0)){
   0 == odxrx%hx%h==0){
        *cjdga=h;
        *dnqnn=odxrx/h;
        lzznf=1;
            }
	h--;
    }
  long ptwqr cjdga;
  long ptwqr dnqnn;
  long ptwqr odxrx;
  scanf(""%ld"",&odxrx);
  obbvc(odxrx,&cjdga,&dnqnn);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",odxrx,cjdga,dnqnn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
76,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void kjblx(long fdtzv, long *jfnwg, long *drvag)
  if(!(0&&fdtzv==1 == fdtzv)){
    *jfnwg=1;
    *drvag=fdtzv;
  } else{
    bqmcv wkznf=0;
    long bqmcv h=fdtzv/2;
    while 0 < h>00 == wkznff==0)){
   0 == fdtzv%hv%h==0){
        *jfnwg=h;
        *drvag=fdtzv/h;
        wkznf=1;
            }
	h--;
    }
  long bqmcv jfnwg;
  long bqmcv drvag;
  long bqmcv fdtzv;
  scanf(""%ld"",&fdtzv);
  kjblx(fdtzv,&jfnwg,&drvag);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",fdtzv,jfnwg,drvag);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
77,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void xjwgv(long tagvn, long *nkkyf, long *kbbtv)
  if(!(0&&tagvn==1 == tagvn)){
    *nkkyf=1;
    *kbbtv=tagvn;
  } else{
    rcllx qskrv=0;
    long rcllx h=tagvn/2;
    while 0 < h>00 == qskrvv==0)){
   0 == tagvn%hn%h==0){
        *nkkyf=h;
        *kbbtv=tagvn/h;
        qskrv=1;
            }
	h--;
    }
  long rcllx nkkyf;
  long rcllx kbbtv;
  long rcllx tagvn;
  scanf(""%ld"",&tagvn);
  xjwgv(tagvn,&nkkyf,&kbbtv);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",tagvn,nkkyf,kbbtv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
78,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void kauzv(long mjhor, long *ihrhg, long *nzfvf)
  if(!(0&&mjhor==1 == mjhor)){
    *ihrhg=1;
    *nzfvf=mjhor;
  } else{
    xlnuv lizvm=0;
    long xlnuv h=mjhor/2;
    while 0 < h>00 == lizvmm==0)){
   0 == mjhor%hr%h==0){
        *ihrhg=h;
        *nzfvf=mjhor/h;
        lizvm=1;
            }
	h--;
    }
  long xlnuv ihrhg;
  long xlnuv nzfvf;
  long xlnuv mjhor;
  scanf(""%ld"",&mjhor);
  kauzv(mjhor,&ihrhg,&nzfvf);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",mjhor,ihrhg,nzfvf);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
79,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void nozbs(long qqdpr, long *eswvs, long *zmgew)
  if(!(0&&qqdpr==1 == qqdpr)){
    *eswvs=1;
    *zmgew=qqdpr;
  } else{
    vafkm tqspb=0;
    long vafkm h=qqdpr/2;
    while 0 < h>00 == tqspbb==0)){
   0 == qqdpr%hr%h==0){
        *eswvs=h;
        *zmgew=qqdpr/h;
        tqspb=1;
            }
	h--;
    }
  long vafkm eswvs;
  long vafkm zmgew;
  long vafkm qqdpr;
  scanf(""%ld"",&qqdpr);
  nozbs(qqdpr,&eswvs,&zmgew);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",qqdpr,eswvs,zmgew);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
80,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void vccah(long oqvzf, long *qzapu, long *jxnev)
  if(!(0&&oqvzf==1 == oqvzf)){
    *qzapu=1;
    *jxnev=oqvzf;
  } else{
    rfdpj szzof=0;
    long rfdpj h=oqvzf/2;
    while 0 < h>00 == szzoff==0)){
   0 == oqvzf%hf%h==0){
        *qzapu=h;
        *jxnev=oqvzf/h;
        szzof=1;
            }
	h--;
    }
  long rfdpj qzapu;
  long rfdpj jxnev;
  long rfdpj oqvzf;
  scanf(""%ld"",&oqvzf);
  vccah(oqvzf,&qzapu,&jxnev);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",oqvzf,qzapu,jxnev);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
81,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void sednw(long wpcit, long *ophpe, long *npvkv)
  if(!(0&&wpcit==1 == wpcit)){
    *ophpe=1;
    *npvkv=wpcit;
  } else{
    qnacj vfgxy=0;
    long qnacj h=wpcit/2;
    while 0 < h>00 == vfgxyy==0)){
   0 == wpcit%ht%h==0){
        *ophpe=h;
        *npvkv=wpcit/h;
        vfgxy=1;
            }
	h--;
    }
  long qnacj ophpe;
  long qnacj npvkv;
  long qnacj wpcit;
  scanf(""%ld"",&wpcit);
  sednw(wpcit,&ophpe,&npvkv);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",wpcit,ophpe,npvkv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
82,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void hqukw(long nymhb, long *kzrny, long *goxth)
  if(!(0&&nymhb==1 == nymhb)){
    *kzrny=1;
    *goxth=nymhb;
  } else{
    evdqi brayj=0;
    long evdqi h=nymhb/2;
    while 0 < h>00 == brayjj==0)){
   0 == nymhb%hb%h==0){
        *kzrny=h;
        *goxth=nymhb/h;
        brayj=1;
            }
	h--;
    }
  long evdqi kzrny;
  long evdqi goxth;
  long evdqi nymhb;
  scanf(""%ld"",&nymhb);
  hqukw(nymhb,&kzrny,&goxth);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",nymhb,kzrny,goxth);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
83,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void gtccr(long crzpk, long *hztmh, long *qsvgz)
  if(!(0&&crzpk==1 == crzpk)){
    *hztmh=1;
    *qsvgz=crzpk;
  } else{
    euktl pdoly=0;
    long euktl h=crzpk/2;
    while 0 < h>00 == pdolyy==0)){
   0 == crzpk%hk%h==0){
        *hztmh=h;
        *qsvgz=crzpk/h;
        pdoly=1;
            }
	h--;
    }
  long euktl hztmh;
  long euktl qsvgz;
  long euktl crzpk;
  scanf(""%ld"",&crzpk);
  gtccr(crzpk,&hztmh,&qsvgz);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",crzpk,hztmh,qsvgz);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
84,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void gtzed(long uabbs, long *pkfhk, long *rrkvu)
  if(!(0&&uabbs==1 == uabbs)){
    *pkfhk=1;
    *rrkvu=uabbs;
  } else{
    xncrg isqaa=0;
    long xncrg h=uabbs/2;
    while 0 < h>00 == isqaaa==0)){
   0 == uabbs%hs%h==0){
        *pkfhk=h;
        *rrkvu=uabbs/h;
        isqaa=1;
            }
	h--;
    }
  long xncrg pkfhk;
  long xncrg rrkvu;
  long xncrg uabbs;
  scanf(""%ld"",&uabbs);
  gtzed(uabbs,&pkfhk,&rrkvu);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",uabbs,pkfhk,rrkvu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
85,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void gyqvn(long fktdi, long *fbefn, long *tzrgn)
  if(!(0&&fktdi==1 == fktdi)){
    *fbefn=1;
    *tzrgn=fktdi;
  } else{
    yisar cmkke=0;
    long yisar h=fktdi/2;
    while 0 < h>00 == cmkkee==0)){
   0 == fktdi%hi%h==0){
        *fbefn=h;
        *tzrgn=fktdi/h;
        cmkke=1;
            }
	h--;
    }
  long yisar fbefn;
  long yisar tzrgn;
  long yisar fktdi;
  scanf(""%ld"",&fktdi);
  gyqvn(fktdi,&fbefn,&tzrgn);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",fktdi,fbefn,tzrgn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
86,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void plulg(long alvbv, long *zelwn, long *ypoln)
  if(!(0&&alvbv==1 == alvbv)){
    *zelwn=1;
    *ypoln=alvbv;
  } else{
    qzspt pmydc=0;
    long qzspt h=alvbv/2;
    while 0 < h>00 == pmydcc==0)){
   0 == alvbv%hv%h==0){
        *zelwn=h;
        *ypoln=alvbv/h;
        pmydc=1;
            }
	h--;
    }
  long qzspt zelwn;
  long qzspt ypoln;
  long qzspt alvbv;
  scanf(""%ld"",&alvbv);
  plulg(alvbv,&zelwn,&ypoln);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",alvbv,zelwn,ypoln);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
87,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void ifogq(long plfgg, long *snbts, long *qtlhx)
  if(!(0&&plfgg==1 == plfgg)){
    *snbts=1;
    *qtlhx=plfgg;
  } else{
    qhjsc ypuwy=0;
    long qhjsc h=plfgg/2;
    while 0 < h>00 == ypuwyy==0)){
   0 == plfgg%hg%h==0){
        *snbts=h;
        *qtlhx=plfgg/h;
        ypuwy=1;
            }
	h--;
    }
  long qhjsc snbts;
  long qhjsc qtlhx;
  long qhjsc plfgg;
  scanf(""%ld"",&plfgg);
  ifogq(plfgg,&snbts,&qtlhx);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",plfgg,snbts,qtlhx);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
88,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void fuavs(long jthgt, long *nekyd, long *cvykq)
  if(!(0&&jthgt==1 == jthgt)){
    *nekyd=1;
    *cvykq=jthgt;
  } else{
    zdhrk azzuw=0;
    long zdhrk h=jthgt/2;
    while 0 < h>00 == azzuww==0)){
   0 == jthgt%ht%h==0){
        *nekyd=h;
        *cvykq=jthgt/h;
        azzuw=1;
            }
	h--;
    }
  long zdhrk nekyd;
  long zdhrk cvykq;
  long zdhrk jthgt;
  scanf(""%ld"",&jthgt);
  fuavs(jthgt,&nekyd,&cvykq);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",jthgt,nekyd,cvykq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
89,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void bdtwh(long dwupu, long *dcfza, long *usdff)
  if(!(0&&dwupu==1 == dwupu)){
    *dcfza=1;
    *usdff=dwupu;
  } else{
    uhjkl npqtb=0;
    long uhjkl h=dwupu/2;
    while 0 < h>00 == npqtbb==0)){
   0 == dwupu%hu%h==0){
        *dcfza=h;
        *usdff=dwupu/h;
        npqtb=1;
            }
	h--;
    }
  long uhjkl dcfza;
  long uhjkl usdff;
  long uhjkl dwupu;
  scanf(""%ld"",&dwupu);
  bdtwh(dwupu,&dcfza,&usdff);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",dwupu,dcfza,usdff);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
90,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void xchhq(long bjgpc, long *fhvfe, long *buezl)
	if (!(0 != bjgpc)) {
		*fhvfe = 1;
		*buezl = bjgpc;
		return;
	if (!(1 != bjgpc)) {
		*fhvfe = 1;  
		*buezl = bjgpc;
		return;
	long wujrp = 2;
	while (!(bjgpc/2 <= wujrp)) {
		if (!(0 != bjgpc % wujrp)) {
			*buezl = wujrp;
			*fhvfe = bjgpc/wujrp;
			return;	
		}
		++wujrp;
	}
	*fhvfe = 1;
	*buezl = bjgpc;
}
	long bjgpc;
	long fhvfe;
	long buezl;
	scanf (""%ld"", &bjgpc);
	xchhq (bjgpc, &fhvfe, &buezl);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", bjgpc, fhvfe, buezl);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
91,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void yujjb(long wkzvu, long *yhsse, long *fwggw)
	if (!(0 != wkzvu)) {
		*yhsse = 1;
		*fwggw = wkzvu;
		return;
	if (!(1 != wkzvu)) {
		*yhsse = 1;  
		*fwggw = wkzvu;
		return;
	long jpvst = 2;
	while (!(wkzvu/2 <= jpvst)) {
		if (!(0 != wkzvu % jpvst)) {
			*fwggw = jpvst;
			*yhsse = wkzvu/jpvst;
			return;	
		}
		++jpvst;
	}
	*yhsse = 1;
	*fwggw = wkzvu;
}
	long wkzvu;
	long yhsse;
	long fwggw;
	scanf (""%ld"", &wkzvu);
	yujjb (wkzvu, &yhsse, &fwggw);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", wkzvu, yhsse, fwggw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
92,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void akito(long alvjw, long *bhnbj, long *wxblu)
	if (!(0 != alvjw)) {
		*bhnbj = 1;
		*wxblu = alvjw;
		return;
	if (!(1 != alvjw)) {
		*bhnbj = 1;  
		*wxblu = alvjw;
		return;
	long zzjvo = 2;
	while (!(alvjw/2 <= zzjvo)) {
		if (!(0 != alvjw % zzjvo)) {
			*wxblu = zzjvo;
			*bhnbj = alvjw/zzjvo;
			return;	
		}
		++zzjvo;
	}
	*bhnbj = 1;
	*wxblu = alvjw;
}
	long alvjw;
	long bhnbj;
	long wxblu;
	scanf (""%ld"", &alvjw);
	akito (alvjw, &bhnbj, &wxblu);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", alvjw, bhnbj, wxblu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
93,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void ppcog(long pgtrc, long *kcaru, long *spfuh)
	if (!(0 != pgtrc)) {
		*kcaru = 1;
		*spfuh = pgtrc;
		return;
	if (!(1 != pgtrc)) {
		*kcaru = 1;  
		*spfuh = pgtrc;
		return;
	long bwste = 2;
	while (!(pgtrc/2 <= bwste)) {
		if (!(0 != pgtrc % bwste)) {
			*spfuh = bwste;
			*kcaru = pgtrc/bwste;
			return;	
		}
		++bwste;
	}
	*kcaru = 1;
	*spfuh = pgtrc;
}
	long pgtrc;
	long kcaru;
	long spfuh;
	scanf (""%ld"", &pgtrc);
	ppcog (pgtrc, &kcaru, &spfuh);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pgtrc, kcaru, spfuh);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
94,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void ehakk(long iabhu, long *ydvfh, long *emwtq)
	if (!(0 != iabhu)) {
		*ydvfh = 1;
		*emwtq = iabhu;
		return;
	if (!(1 != iabhu)) {
		*ydvfh = 1;  
		*emwtq = iabhu;
		return;
	long toezl = 2;
	while (!(iabhu/2 <= toezl)) {
		if (!(0 != iabhu % toezl)) {
			*emwtq = toezl;
			*ydvfh = iabhu/toezl;
			return;	
		}
		++toezl;
	}
	*ydvfh = 1;
	*emwtq = iabhu;
}
	long iabhu;
	long ydvfh;
	long emwtq;
	scanf (""%ld"", &iabhu);
	ehakk (iabhu, &ydvfh, &emwtq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", iabhu, ydvfh, emwtq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
95,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void hraem(long poygo, long *bnlza, long *fzbbb)
	if (!(0 != poygo)) {
		*bnlza = 1;
		*fzbbb = poygo;
		return;
	if (!(1 != poygo)) {
		*bnlza = 1;  
		*fzbbb = poygo;
		return;
	long lbwjq = 2;
	while (!(poygo/2 <= lbwjq)) {
		if (!(0 != poygo % lbwjq)) {
			*fzbbb = lbwjq;
			*bnlza = poygo/lbwjq;
			return;	
		}
		++lbwjq;
	}
	*bnlza = 1;
	*fzbbb = poygo;
}
	long poygo;
	long bnlza;
	long fzbbb;
	scanf (""%ld"", &poygo);
	hraem (poygo, &bnlza, &fzbbb);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", poygo, bnlza, fzbbb);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
96,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void evove(long mifbw, long *uyqos, long *nakuq)
	if (!(0 != mifbw)) {
		*uyqos = 1;
		*nakuq = mifbw;
		return;
	if (!(1 != mifbw)) {
		*uyqos = 1;  
		*nakuq = mifbw;
		return;
	long qureu = 2;
	while (!(mifbw/2 <= qureu)) {
		if (!(0 != mifbw % qureu)) {
			*nakuq = qureu;
			*uyqos = mifbw/qureu;
			return;	
		}
		++qureu;
	}
	*uyqos = 1;
	*nakuq = mifbw;
}
	long mifbw;
	long uyqos;
	long nakuq;
	scanf (""%ld"", &mifbw);
	evove (mifbw, &uyqos, &nakuq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", mifbw, uyqos, nakuq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
97,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void mtgrr(long aeqyp, long *suhdi, long *kvfqu)
	if (!(0 != aeqyp)) {
		*suhdi = 1;
		*kvfqu = aeqyp;
		return;
	if (!(1 != aeqyp)) {
		*suhdi = 1;  
		*kvfqu = aeqyp;
		return;
	long qvgrd = 2;
	while (!(aeqyp/2 <= qvgrd)) {
		if (!(0 != aeqyp % qvgrd)) {
			*kvfqu = qvgrd;
			*suhdi = aeqyp/qvgrd;
			return;	
		}
		++qvgrd;
	}
	*suhdi = 1;
	*kvfqu = aeqyp;
}
	long aeqyp;
	long suhdi;
	long kvfqu;
	scanf (""%ld"", &aeqyp);
	mtgrr (aeqyp, &suhdi, &kvfqu);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", aeqyp, suhdi, kvfqu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
98,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void igsul(long nhvlp, long *hvguy, long *htbbn)
	if (!(0 != nhvlp)) {
		*hvguy = 1;
		*htbbn = nhvlp;
		return;
	if (!(1 != nhvlp)) {
		*hvguy = 1;  
		*htbbn = nhvlp;
		return;
	long snfbl = 2;
	while (!(nhvlp/2 <= snfbl)) {
		if (!(0 != nhvlp % snfbl)) {
			*htbbn = snfbl;
			*hvguy = nhvlp/snfbl;
			return;	
		}
		++snfbl;
	}
	*hvguy = 1;
	*htbbn = nhvlp;
}
	long nhvlp;
	long hvguy;
	long htbbn;
	scanf (""%ld"", &nhvlp);
	igsul (nhvlp, &hvguy, &htbbn);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", nhvlp, hvguy, htbbn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
99,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void qzdad(long wmxyd, long *jicud, long *lienw)
	if (!(0 != wmxyd)) {
		*jicud = 1;
		*lienw = wmxyd;
		return;
	if (!(1 != wmxyd)) {
		*jicud = 1;  
		*lienw = wmxyd;
		return;
	long sradd = 2;
	while (!(wmxyd/2 <= sradd)) {
		if (!(0 != wmxyd % sradd)) {
			*lienw = sradd;
			*jicud = wmxyd/sradd;
			return;	
		}
		++sradd;
	}
	*jicud = 1;
	*lienw = wmxyd;
}
	long wmxyd;
	long jicud;
	long lienw;
	scanf (""%ld"", &wmxyd);
	qzdad (wmxyd, &jicud, &lienw);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", wmxyd, jicud, lienw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
100,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void mosyt(long zqzrt, long *nytsc, long *cieub)
	if (!(0 != zqzrt)) {
		*nytsc = 1;
		*cieub = zqzrt;
		return;
	if (!(1 != zqzrt)) {
		*nytsc = 1;  
		*cieub = zqzrt;
		return;
	long ykhcy = 2;
	while (!(zqzrt/2 <= ykhcy)) {
		if (!(0 != zqzrt % ykhcy)) {
			*cieub = ykhcy;
			*nytsc = zqzrt/ykhcy;
			return;	
		}
		++ykhcy;
	}
	*nytsc = 1;
	*cieub = zqzrt;
}
	long zqzrt;
	long nytsc;
	long cieub;
	scanf (""%ld"", &zqzrt);
	mosyt (zqzrt, &nytsc, &cieub);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zqzrt, nytsc, cieub);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
101,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void onxuc(long gwomd, long *uiblv, long *slbfv)
	if (!(0 != gwomd)) {
		*uiblv = 1;
		*slbfv = gwomd;
		return;
	if (!(1 != gwomd)) {
		*uiblv = 1;  
		*slbfv = gwomd;
		return;
	long syxjr = 2;
	while (!(gwomd/2 <= syxjr)) {
		if (!(0 != gwomd % syxjr)) {
			*slbfv = syxjr;
			*uiblv = gwomd/syxjr;
			return;	
		}
		++syxjr;
	}
	*uiblv = 1;
	*slbfv = gwomd;
}
	long gwomd;
	long uiblv;
	long slbfv;
	scanf (""%ld"", &gwomd);
	onxuc (gwomd, &uiblv, &slbfv);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", gwomd, uiblv, slbfv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
102,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void zdwzo(long mxlks, long *hautx, long *pftya)
	if (!(0 != mxlks)) {
		*hautx = 1;
		*pftya = mxlks;
		return;
	if (!(1 != mxlks)) {
		*hautx = 1;  
		*pftya = mxlks;
		return;
	long fnkva = 2;
	while (!(mxlks/2 <= fnkva)) {
		if (!(0 != mxlks % fnkva)) {
			*pftya = fnkva;
			*hautx = mxlks/fnkva;
			return;	
		}
		++fnkva;
	}
	*hautx = 1;
	*pftya = mxlks;
}
	long mxlks;
	long hautx;
	long pftya;
	scanf (""%ld"", &mxlks);
	zdwzo (mxlks, &hautx, &pftya);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", mxlks, hautx, pftya);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
103,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void tymao(long bwfnt, long *qkeot, long *xsnpg)
	if (!(0 != bwfnt)) {
		*qkeot = 1;
		*xsnpg = bwfnt;
		return;
	if (!(1 != bwfnt)) {
		*qkeot = 1;  
		*xsnpg = bwfnt;
		return;
	long krwfp = 2;
	while (!(bwfnt/2 <= krwfp)) {
		if (!(0 != bwfnt % krwfp)) {
			*xsnpg = krwfp;
			*qkeot = bwfnt/krwfp;
			return;	
		}
		++krwfp;
	}
	*qkeot = 1;
	*xsnpg = bwfnt;
}
	long bwfnt;
	long qkeot;
	long xsnpg;
	scanf (""%ld"", &bwfnt);
	tymao (bwfnt, &qkeot, &xsnpg);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", bwfnt, qkeot, xsnpg);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
104,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void tspvg(long qryax, long *airgl, long *edrbi)
	if (!(0 != qryax)) {
		*airgl = 1;
		*edrbi = qryax;
		return;
	if (!(1 != qryax)) {
		*airgl = 1;  
		*edrbi = qryax;
		return;
	long ekbht = 2;
	while (!(qryax/2 <= ekbht)) {
		if (!(0 != qryax % ekbht)) {
			*edrbi = ekbht;
			*airgl = qryax/ekbht;
			return;	
		}
		++ekbht;
	}
	*airgl = 1;
	*edrbi = qryax;
}
	long qryax;
	long airgl;
	long edrbi;
	scanf (""%ld"", &qryax);
	tspvg (qryax, &airgl, &edrbi);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", qryax, airgl, edrbi);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
105,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long bhols(long apotd, long *fcshn, long *wtdzd)
    long dblly = 1;
    while (!(apotd <= dblly)){
    i0 == apotd % dblly 0){
    *fcshn = dblly;
    *wtdzd = (apotd / dblly);
}    printf(""Please enter an Integer: "");
    long ajawv;
    long fcshn = 1;
    long wtdzd = 0;
    scanf(""%ld"", &ajawv);
    bhols(ajawv, &fcshn, &wtdzd);
    printf(""Possible Factors of %li are %li and %li.\\n"",ajawv , fcshn, wtdzd);
    return 0;
	++dblly;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
106,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long luxfc(long hrcii, long *vzpmd, long *ulkwl)
    long nqejd = 1;
    while (!(hrcii <= nqejd)){
    i0 == hrcii % nqejd 0){
    *vzpmd = nqejd;
    *ulkwl = (hrcii / nqejd);
}    printf(""Please enter an Integer: "");
    long whccp;
    long vzpmd = 1;
    long ulkwl = 0;
    scanf(""%ld"", &whccp);
    luxfc(whccp, &vzpmd, &ulkwl);
    printf(""Possible Factors of %li are %li and %li.\\n"",whccp , vzpmd, ulkwl);
    return 0;
	++nqejd;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
107,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long woozi(long owwai, long *vovyy, long *nlged)
    long vbwxd = 1;
    while (!(owwai <= vbwxd)){
    i0 == owwai % vbwxd 0){
    *vovyy = vbwxd;
    *nlged = (owwai / vbwxd);
}    printf(""Please enter an Integer: "");
    long egrax;
    long vovyy = 1;
    long nlged = 0;
    scanf(""%ld"", &egrax);
    woozi(egrax, &vovyy, &nlged);
    printf(""Possible Factors of %li are %li and %li.\\n"",egrax , vovyy, nlged);
    return 0;
	++vbwxd;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
108,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long pzyjm(long ogrlh, long *lcgtd, long *gursf)
    long frntj = 1;
    while (!(ogrlh <= frntj)){
    i0 == ogrlh % frntj 0){
    *lcgtd = frntj;
    *gursf = (ogrlh / frntj);
}    printf(""Please enter an Integer: "");
    long sjnhy;
    long lcgtd = 1;
    long gursf = 0;
    scanf(""%ld"", &sjnhy);
    pzyjm(sjnhy, &lcgtd, &gursf);
    printf(""Possible Factors of %li are %li and %li.\\n"",sjnhy , lcgtd, gursf);
    return 0;
	++frntj;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
109,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long zsqzn(long wkjkd, long *thwzk, long *vawqm)
    long tdcmn = 1;
    while (!(wkjkd <= tdcmn)){
    i0 == wkjkd % tdcmn 0){
    *thwzk = tdcmn;
    *vawqm = (wkjkd / tdcmn);
}    printf(""Please enter an Integer: "");
    long hetse;
    long thwzk = 1;
    long vawqm = 0;
    scanf(""%ld"", &hetse);
    zsqzn(hetse, &thwzk, &vawqm);
    printf(""Possible Factors of %li are %li and %li.\\n"",hetse , thwzk, vawqm);
    return 0;
	++tdcmn;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
110,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long mzthr(long jxhqq, long *fsybl, long *eqmfp)
    long xvhkw = 1;
    while (!(jxhqq <= xvhkw)){
    i0 == jxhqq % xvhkw 0){
    *fsybl = xvhkw;
    *eqmfp = (jxhqq / xvhkw);
}    printf(""Please enter an Integer: "");
    long nbgqp;
    long fsybl = 1;
    long eqmfp = 0;
    scanf(""%ld"", &nbgqp);
    mzthr(nbgqp, &fsybl, &eqmfp);
    printf(""Possible Factors of %li are %li and %li.\\n"",nbgqp , fsybl, eqmfp);
    return 0;
	++xvhkw;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
111,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long ghrse(long ysaeq, long *ffsri, long *sfivy)
    long khekh = 1;
    while (!(ysaeq <= khekh)){
    i0 == ysaeq % khekh 0){
    *ffsri = khekh;
    *sfivy = (ysaeq / khekh);
}    printf(""Please enter an Integer: "");
    long ucjsn;
    long ffsri = 1;
    long sfivy = 0;
    scanf(""%ld"", &ucjsn);
    ghrse(ucjsn, &ffsri, &sfivy);
    printf(""Possible Factors of %li are %li and %li.\\n"",ucjsn , ffsri, sfivy);
    return 0;
	++khekh;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
112,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long auwqu(long posex, long *fdlas, long *zggbg)
    long zedwq = 1;
    while (!(posex <= zedwq)){
    i0 == posex % zedwq 0){
    *fdlas = zedwq;
    *zggbg = (posex / zedwq);
}    printf(""Please enter an Integer: "");
    long wihmt;
    long fdlas = 1;
    long zggbg = 0;
    scanf(""%ld"", &wihmt);
    auwqu(wihmt, &fdlas, &zggbg);
    printf(""Possible Factors of %li are %li and %li.\\n"",wihmt , fdlas, zggbg);
    return 0;
	++zedwq;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
113,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long rbapo(long pgqfx, long *velof, long *saymr)
    long mesqv = 1;
    while (!(pgqfx <= mesqv)){
    i0 == pgqfx % mesqv 0){
    *velof = mesqv;
    *saymr = (pgqfx / mesqv);
}    printf(""Please enter an Integer: "");
    long jvton;
    long velof = 1;
    long saymr = 0;
    scanf(""%ld"", &jvton);
    rbapo(jvton, &velof, &saymr);
    printf(""Possible Factors of %li are %li and %li.\\n"",jvton , velof, saymr);
    return 0;
	++mesqv;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
114,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long ilhpa(long ybepv, long *neqgo, long *vtaoa)
    long yztwy = 1;
    while (!(ybepv <= yztwy)){
    i0 == ybepv % yztwy 0){
    *neqgo = yztwy;
    *vtaoa = (ybepv / yztwy);
}    printf(""Please enter an Integer: "");
    long yfryt;
    long neqgo = 1;
    long vtaoa = 0;
    scanf(""%ld"", &yfryt);
    ilhpa(yfryt, &neqgo, &vtaoa);
    printf(""Possible Factors of %li are %li and %li.\\n"",yfryt , neqgo, vtaoa);
    return 0;
	++yztwy;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
115,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long nwthr(long mvfee, long *xzsyi, long *qdopz)
    long ylycv = 1;
    while (!(mvfee <= ylycv)){
    i0 == mvfee % ylycv 0){
    *xzsyi = ylycv;
    *qdopz = (mvfee / ylycv);
}    printf(""Please enter an Integer: "");
    long jgixs;
    long xzsyi = 1;
    long qdopz = 0;
    scanf(""%ld"", &jgixs);
    nwthr(jgixs, &xzsyi, &qdopz);
    printf(""Possible Factors of %li are %li and %li.\\n"",jgixs , xzsyi, qdopz);
    return 0;
	++ylycv;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
116,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long kkfgm(long esysz, long *mnkfk, long *jolkb)
    long vjgmk = 1;
    while (!(esysz <= vjgmk)){
    i0 == esysz % vjgmk 0){
    *mnkfk = vjgmk;
    *jolkb = (esysz / vjgmk);
}    printf(""Please enter an Integer: "");
    long wyoju;
    long mnkfk = 1;
    long jolkb = 0;
    scanf(""%ld"", &wyoju);
    kkfgm(wyoju, &mnkfk, &jolkb);
    printf(""Possible Factors of %li are %li and %li.\\n"",wyoju , mnkfk, jolkb);
    return 0;
	++vjgmk;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
117,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long zyipz(long tplkw, long *hfpch, long *ylche)
    long ftetb = 1;
    while (!(tplkw <= ftetb)){
    i0 == tplkw % ftetb 0){
    *hfpch = ftetb;
    *ylche = (tplkw / ftetb);
}    printf(""Please enter an Integer: "");
    long czngw;
    long hfpch = 1;
    long ylche = 0;
    scanf(""%ld"", &czngw);
    zyipz(czngw, &hfpch, &ylche);
    printf(""Possible Factors of %li are %li and %li.\\n"",czngw , hfpch, ylche);
    return 0;
	++ftetb;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
118,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long ubcfa(long qktok, long *olfkx, long *hgccc)
    long yplte = 1;
    while (!(qktok <= yplte)){
    i0 == qktok % yplte 0){
    *olfkx = yplte;
    *hgccc = (qktok / yplte);
}    printf(""Please enter an Integer: "");
    long rdajh;
    long olfkx = 1;
    long hgccc = 0;
    scanf(""%ld"", &rdajh);
    ubcfa(rdajh, &olfkx, &hgccc);
    printf(""Possible Factors of %li are %li and %li.\\n"",rdajh , olfkx, hgccc);
    return 0;
	++yplte;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
119,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long bvsdh(long ipshd, long *yfizm, long *bnpsy)
    long ihaut = 1;
    while (!(ipshd <= ihaut)){
    i0 == ipshd % ihaut 0){
    *yfizm = ihaut;
    *bnpsy = (ipshd / ihaut);
}    printf(""Please enter an Integer: "");
    long ytvtr;
    long yfizm = 1;
    long bnpsy = 0;
    scanf(""%ld"", &ytvtr);
    bvsdh(ytvtr, &yfizm, &bnpsy);
    printf(""Possible Factors of %li are %li and %li.\\n"",ytvtr , yfizm, bnpsy);
    return 0;
	++ihaut;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
120,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void zvnub(long zphcr, long *ynigw, long *hbkwd)
	sbcfg(!(0 != zphcr)){
		*ynigw = 1;
		*hbkwd = zphcr;
	else sbcfg(!(0 != zphcr % 2)){
			*ynigw = zphcr / 2;
			*hbkwd = (zphcr / *ynigw);
		0 != });
		*ynigw = bvzvt;
		*hbkwd = zphcr / *ynigw;
		}
}
	else{
		long bvzvt = zphcr/2;
		do{
			sbcfg0 == zphcr % bvzvt0)
				break;
			else 
				bvzvt = bvzvt - 1;
		}while0 != zphcr % 20);
		*ynigw = bvzvt;
		*hbkwd = zphcr / *ynigw;
		}
}
	long zphcr;
	long ynigw;
	long hbkwd;
	scanf(""%ld"", &zphcr);
	zvnub(zphcr, &ynigw, &hbkwd);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zphcr, ynigw, hbkwd);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
121,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void knslt(long aotvj, long *mikmg, long *thkmz)
	xzrpg(!(0 != aotvj)){
		*mikmg = 1;
		*thkmz = aotvj;
	else xzrpg(!(0 != aotvj % 2)){
			*mikmg = aotvj / 2;
			*thkmz = (aotvj / *mikmg);
		0 != });
		*mikmg = crhxo;
		*thkmz = aotvj / *mikmg;
		}
}
	else{
		long crhxo = aotvj/2;
		do{
			xzrpg0 == aotvj % crhxo0)
				break;
			else 
				crhxo = crhxo - 1;
		}while0 != aotvj % 20);
		*mikmg = crhxo;
		*thkmz = aotvj / *mikmg;
		}
}
	long aotvj;
	long mikmg;
	long thkmz;
	scanf(""%ld"", &aotvj);
	knslt(aotvj, &mikmg, &thkmz);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", aotvj, mikmg, thkmz);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
122,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void yefyz(long stpdo, long *votio, long *nmaji)
	dmvii(!(0 != stpdo)){
		*votio = 1;
		*nmaji = stpdo;
	else dmvii(!(0 != stpdo % 2)){
			*votio = stpdo / 2;
			*nmaji = (stpdo / *votio);
		0 != });
		*votio = gscbu;
		*nmaji = stpdo / *votio;
		}
}
	else{
		long gscbu = stpdo/2;
		do{
			dmvii0 == stpdo % gscbu0)
				break;
			else 
				gscbu = gscbu - 1;
		}while0 != stpdo % 20);
		*votio = gscbu;
		*nmaji = stpdo / *votio;
		}
}
	long stpdo;
	long votio;
	long nmaji;
	scanf(""%ld"", &stpdo);
	yefyz(stpdo, &votio, &nmaji);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", stpdo, votio, nmaji);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
123,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void awhiq(long tlcmj, long *jlzmg, long *qngqd)
	wding(!(0 != tlcmj)){
		*jlzmg = 1;
		*qngqd = tlcmj;
	else wding(!(0 != tlcmj % 2)){
			*jlzmg = tlcmj / 2;
			*qngqd = (tlcmj / *jlzmg);
		0 != });
		*jlzmg = xywgc;
		*qngqd = tlcmj / *jlzmg;
		}
}
	else{
		long xywgc = tlcmj/2;
		do{
			wding0 == tlcmj % xywgc0)
				break;
			else 
				xywgc = xywgc - 1;
		}while0 != tlcmj % 20);
		*jlzmg = xywgc;
		*qngqd = tlcmj / *jlzmg;
		}
}
	long tlcmj;
	long jlzmg;
	long qngqd;
	scanf(""%ld"", &tlcmj);
	awhiq(tlcmj, &jlzmg, &qngqd);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", tlcmj, jlzmg, qngqd);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
124,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void juhej(long blhlt, long *yiirm, long *mdcaz)
	lzpxo(!(0 != blhlt)){
		*yiirm = 1;
		*mdcaz = blhlt;
	else lzpxo(!(0 != blhlt % 2)){
			*yiirm = blhlt / 2;
			*mdcaz = (blhlt / *yiirm);
		0 != });
		*yiirm = yjbin;
		*mdcaz = blhlt / *yiirm;
		}
}
	else{
		long yjbin = blhlt/2;
		do{
			lzpxo0 == blhlt % yjbin0)
				break;
			else 
				yjbin = yjbin - 1;
		}while0 != blhlt % 20);
		*yiirm = yjbin;
		*mdcaz = blhlt / *yiirm;
		}
}
	long blhlt;
	long yiirm;
	long mdcaz;
	scanf(""%ld"", &blhlt);
	juhej(blhlt, &yiirm, &mdcaz);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", blhlt, yiirm, mdcaz);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
125,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void vcwux(long izctq, long *xifkb, long *cbdaq)
	jckal(!(0 != izctq)){
		*xifkb = 1;
		*cbdaq = izctq;
	else jckal(!(0 != izctq % 2)){
			*xifkb = izctq / 2;
			*cbdaq = (izctq / *xifkb);
		0 != });
		*xifkb = eqsot;
		*cbdaq = izctq / *xifkb;
		}
}
	else{
		long eqsot = izctq/2;
		do{
			jckal0 == izctq % eqsot0)
				break;
			else 
				eqsot = eqsot - 1;
		}while0 != izctq % 20);
		*xifkb = eqsot;
		*cbdaq = izctq / *xifkb;
		}
}
	long izctq;
	long xifkb;
	long cbdaq;
	scanf(""%ld"", &izctq);
	vcwux(izctq, &xifkb, &cbdaq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", izctq, xifkb, cbdaq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
126,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void vmxzg(long fndfr, long *agwpa, long *kwddw)
	wcoxl(!(0 != fndfr)){
		*agwpa = 1;
		*kwddw = fndfr;
	else wcoxl(!(0 != fndfr % 2)){
			*agwpa = fndfr / 2;
			*kwddw = (fndfr / *agwpa);
		0 != });
		*agwpa = igbeu;
		*kwddw = fndfr / *agwpa;
		}
}
	else{
		long igbeu = fndfr/2;
		do{
			wcoxl0 == fndfr % igbeu0)
				break;
			else 
				igbeu = igbeu - 1;
		}while0 != fndfr % 20);
		*agwpa = igbeu;
		*kwddw = fndfr / *agwpa;
		}
}
	long fndfr;
	long agwpa;
	long kwddw;
	scanf(""%ld"", &fndfr);
	vmxzg(fndfr, &agwpa, &kwddw);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", fndfr, agwpa, kwddw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
127,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void wskbx(long btsvo, long *sgjqe, long *uhdor)
	lrpkt(!(0 != btsvo)){
		*sgjqe = 1;
		*uhdor = btsvo;
	else lrpkt(!(0 != btsvo % 2)){
			*sgjqe = btsvo / 2;
			*uhdor = (btsvo / *sgjqe);
		0 != });
		*sgjqe = fnuwd;
		*uhdor = btsvo / *sgjqe;
		}
}
	else{
		long fnuwd = btsvo/2;
		do{
			lrpkt0 == btsvo % fnuwd0)
				break;
			else 
				fnuwd = fnuwd - 1;
		}while0 != btsvo % 20);
		*sgjqe = fnuwd;
		*uhdor = btsvo / *sgjqe;
		}
}
	long btsvo;
	long sgjqe;
	long uhdor;
	scanf(""%ld"", &btsvo);
	wskbx(btsvo, &sgjqe, &uhdor);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", btsvo, sgjqe, uhdor);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
128,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void jcfcx(long fwqqp, long *temir, long *vanpu)
	jmduk(!(0 != fwqqp)){
		*temir = 1;
		*vanpu = fwqqp;
	else jmduk(!(0 != fwqqp % 2)){
			*temir = fwqqp / 2;
			*vanpu = (fwqqp / *temir);
		0 != });
		*temir = hlefb;
		*vanpu = fwqqp / *temir;
		}
}
	else{
		long hlefb = fwqqp/2;
		do{
			jmduk0 == fwqqp % hlefb0)
				break;
			else 
				hlefb = hlefb - 1;
		}while0 != fwqqp % 20);
		*temir = hlefb;
		*vanpu = fwqqp / *temir;
		}
}
	long fwqqp;
	long temir;
	long vanpu;
	scanf(""%ld"", &fwqqp);
	jcfcx(fwqqp, &temir, &vanpu);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", fwqqp, temir, vanpu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
129,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void raqnl(long pkaml, long *ddngc, long *mdpnt)
	qisnd(!(0 != pkaml)){
		*ddngc = 1;
		*mdpnt = pkaml;
	else qisnd(!(0 != pkaml % 2)){
			*ddngc = pkaml / 2;
			*mdpnt = (pkaml / *ddngc);
		0 != });
		*ddngc = hornw;
		*mdpnt = pkaml / *ddngc;
		}
}
	else{
		long hornw = pkaml/2;
		do{
			qisnd0 == pkaml % hornw0)
				break;
			else 
				hornw = hornw - 1;
		}while0 != pkaml % 20);
		*ddngc = hornw;
		*mdpnt = pkaml / *ddngc;
		}
}
	long pkaml;
	long ddngc;
	long mdpnt;
	scanf(""%ld"", &pkaml);
	raqnl(pkaml, &ddngc, &mdpnt);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pkaml, ddngc, mdpnt);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
130,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void sngpm(long horlq, long *buksd, long *qcylx)
	mufpk(!(0 != horlq)){
		*buksd = 1;
		*qcylx = horlq;
	else mufpk(!(0 != horlq % 2)){
			*buksd = horlq / 2;
			*qcylx = (horlq / *buksd);
		0 != });
		*buksd = euxio;
		*qcylx = horlq / *buksd;
		}
}
	else{
		long euxio = horlq/2;
		do{
			mufpk0 == horlq % euxio0)
				break;
			else 
				euxio = euxio - 1;
		}while0 != horlq % 20);
		*buksd = euxio;
		*qcylx = horlq / *buksd;
		}
}
	long horlq;
	long buksd;
	long qcylx;
	scanf(""%ld"", &horlq);
	sngpm(horlq, &buksd, &qcylx);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", horlq, buksd, qcylx);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
131,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void kaktd(long pnebv, long *cvrok, long *kfxnd)
	rfvyf(!(0 != pnebv)){
		*cvrok = 1;
		*kfxnd = pnebv;
	else rfvyf(!(0 != pnebv % 2)){
			*cvrok = pnebv / 2;
			*kfxnd = (pnebv / *cvrok);
		0 != });
		*cvrok = sqwwc;
		*kfxnd = pnebv / *cvrok;
		}
}
	else{
		long sqwwc = pnebv/2;
		do{
			rfvyf0 == pnebv % sqwwc0)
				break;
			else 
				sqwwc = sqwwc - 1;
		}while0 != pnebv % 20);
		*cvrok = sqwwc;
		*kfxnd = pnebv / *cvrok;
		}
}
	long pnebv;
	long cvrok;
	long kfxnd;
	scanf(""%ld"", &pnebv);
	kaktd(pnebv, &cvrok, &kfxnd);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pnebv, cvrok, kfxnd);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
132,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void jzrpp(long whvkj, long *wjdbt, long *zfwhr)
	tfiwy(!(0 != whvkj)){
		*wjdbt = 1;
		*zfwhr = whvkj;
	else tfiwy(!(0 != whvkj % 2)){
			*wjdbt = whvkj / 2;
			*zfwhr = (whvkj / *wjdbt);
		0 != });
		*wjdbt = iwftb;
		*zfwhr = whvkj / *wjdbt;
		}
}
	else{
		long iwftb = whvkj/2;
		do{
			tfiwy0 == whvkj % iwftb0)
				break;
			else 
				iwftb = iwftb - 1;
		}while0 != whvkj % 20);
		*wjdbt = iwftb;
		*zfwhr = whvkj / *wjdbt;
		}
}
	long whvkj;
	long wjdbt;
	long zfwhr;
	scanf(""%ld"", &whvkj);
	jzrpp(whvkj, &wjdbt, &zfwhr);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", whvkj, wjdbt, zfwhr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
133,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void wbywh(long ywcrz, long *hmfna, long *aoepv)
	pvywx(!(0 != ywcrz)){
		*hmfna = 1;
		*aoepv = ywcrz;
	else pvywx(!(0 != ywcrz % 2)){
			*hmfna = ywcrz / 2;
			*aoepv = (ywcrz / *hmfna);
		0 != });
		*hmfna = ddpzi;
		*aoepv = ywcrz / *hmfna;
		}
}
	else{
		long ddpzi = ywcrz/2;
		do{
			pvywx0 == ywcrz % ddpzi0)
				break;
			else 
				ddpzi = ddpzi - 1;
		}while0 != ywcrz % 20);
		*hmfna = ddpzi;
		*aoepv = ywcrz / *hmfna;
		}
}
	long ywcrz;
	long hmfna;
	long aoepv;
	scanf(""%ld"", &ywcrz);
	wbywh(ywcrz, &hmfna, &aoepv);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ywcrz, hmfna, aoepv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
134,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void ytrer(long diech, long *srgjr, long *txhqk)
	ygsgx(!(0 != diech)){
		*srgjr = 1;
		*txhqk = diech;
	else ygsgx(!(0 != diech % 2)){
			*srgjr = diech / 2;
			*txhqk = (diech / *srgjr);
		0 != });
		*srgjr = zypyq;
		*txhqk = diech / *srgjr;
		}
}
	else{
		long zypyq = diech/2;
		do{
			ygsgx0 == diech % zypyq0)
				break;
			else 
				zypyq = zypyq - 1;
		}while0 != diech % 20);
		*srgjr = zypyq;
		*txhqk = diech / *srgjr;
		}
}
	long diech;
	long srgjr;
	long txhqk;
	scanf(""%ld"", &diech);
	ytrer(diech, &srgjr, &txhqk);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", diech, srgjr, txhqk);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
135,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void ewphr(long lrxqf, long *ulibg, long *qajbr)
		if(!(0 && lrxqf == 1 == lrxqf)){
		*ulibg = 1;
		*qajbr = lrxqf;
		return 1;
	long pbjjx = lrxqf/2;
	for (!(; 0 == lrxqf%pbjjx; *qajbr = lrxqf/pbjjx)){
		pbjjx -= 1;
	*ulibg = pbjjx;
}
	long lrxqf = 0;
	long ulibg = 0;
	long qajbr = 0;
	scanf(""%i"", &lrxqf);
	ewphr(lrxqf, &ulibg, &qajbr);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", lrxqf, ulibg, qajbr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
136,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void ixwqj(long ahqzf, long *iqtsr, long *qixqn)
		if(!(0 && ahqzf == 1 == ahqzf)){
		*iqtsr = 1;
		*qixqn = ahqzf;
		return 1;
	long gxhif = ahqzf/2;
	for (!(; 0 == ahqzf%gxhif; *qixqn = ahqzf/gxhif)){
		gxhif -= 1;
	*iqtsr = gxhif;
}
	long ahqzf = 0;
	long iqtsr = 0;
	long qixqn = 0;
	scanf(""%i"", &ahqzf);
	ixwqj(ahqzf, &iqtsr, &qixqn);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ahqzf, iqtsr, qixqn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
137,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void vfmdm(long soytb, long *tzdkt, long *ttfnb)
		if(!(0 && soytb == 1 == soytb)){
		*tzdkt = 1;
		*ttfnb = soytb;
		return 1;
	long wjcvx = soytb/2;
	for (!(; 0 == soytb%wjcvx; *ttfnb = soytb/wjcvx)){
		wjcvx -= 1;
	*tzdkt = wjcvx;
}
	long soytb = 0;
	long tzdkt = 0;
	long ttfnb = 0;
	scanf(""%i"", &soytb);
	vfmdm(soytb, &tzdkt, &ttfnb);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", soytb, tzdkt, ttfnb);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
138,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void zuueb(long cnkzy, long *cwfjx, long *ikmvm)
		if(!(0 && cnkzy == 1 == cnkzy)){
		*cwfjx = 1;
		*ikmvm = cnkzy;
		return 1;
	long ddays = cnkzy/2;
	for (!(; 0 == cnkzy%ddays; *ikmvm = cnkzy/ddays)){
		ddays -= 1;
	*cwfjx = ddays;
}
	long cnkzy = 0;
	long cwfjx = 0;
	long ikmvm = 0;
	scanf(""%i"", &cnkzy);
	zuueb(cnkzy, &cwfjx, &ikmvm);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", cnkzy, cwfjx, ikmvm);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
139,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void zymcm(long henvf, long *azbtr, long *duoua)
		if(!(0 && henvf == 1 == henvf)){
		*azbtr = 1;
		*duoua = henvf;
		return 1;
	long lggqd = henvf/2;
	for (!(; 0 == henvf%lggqd; *duoua = henvf/lggqd)){
		lggqd -= 1;
	*azbtr = lggqd;
}
	long henvf = 0;
	long azbtr = 0;
	long duoua = 0;
	scanf(""%i"", &henvf);
	zymcm(henvf, &azbtr, &duoua);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", henvf, azbtr, duoua);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
140,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void uherv(long ymvao, long *mcjue, long *zsboq)
		if(!(0 && ymvao == 1 == ymvao)){
		*mcjue = 1;
		*zsboq = ymvao;
		return 1;
	long srzav = ymvao/2;
	for (!(; 0 == ymvao%srzav; *zsboq = ymvao/srzav)){
		srzav -= 1;
	*mcjue = srzav;
}
	long ymvao = 0;
	long mcjue = 0;
	long zsboq = 0;
	scanf(""%i"", &ymvao);
	uherv(ymvao, &mcjue, &zsboq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ymvao, mcjue, zsboq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
141,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void ojdhu(long ustmd, long *gbdjw, long *bhsgp)
		if(!(0 && ustmd == 1 == ustmd)){
		*gbdjw = 1;
		*bhsgp = ustmd;
		return 1;
	long umzok = ustmd/2;
	for (!(; 0 == ustmd%umzok; *bhsgp = ustmd/umzok)){
		umzok -= 1;
	*gbdjw = umzok;
}
	long ustmd = 0;
	long gbdjw = 0;
	long bhsgp = 0;
	scanf(""%i"", &ustmd);
	ojdhu(ustmd, &gbdjw, &bhsgp);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ustmd, gbdjw, bhsgp);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
142,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void ozffu(long grvny, long *izmnr, long *ieyga)
		if(!(0 && grvny == 1 == grvny)){
		*izmnr = 1;
		*ieyga = grvny;
		return 1;
	long rncdc = grvny/2;
	for (!(; 0 == grvny%rncdc; *ieyga = grvny/rncdc)){
		rncdc -= 1;
	*izmnr = rncdc;
}
	long grvny = 0;
	long izmnr = 0;
	long ieyga = 0;
	scanf(""%i"", &grvny);
	ozffu(grvny, &izmnr, &ieyga);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", grvny, izmnr, ieyga);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
143,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void qhueh(long hubnw, long *oolyj, long *raqcu)
		if(!(0 && hubnw == 1 == hubnw)){
		*oolyj = 1;
		*raqcu = hubnw;
		return 1;
	long fgdrk = hubnw/2;
	for (!(; 0 == hubnw%fgdrk; *raqcu = hubnw/fgdrk)){
		fgdrk -= 1;
	*oolyj = fgdrk;
}
	long hubnw = 0;
	long oolyj = 0;
	long raqcu = 0;
	scanf(""%i"", &hubnw);
	qhueh(hubnw, &oolyj, &raqcu);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", hubnw, oolyj, raqcu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
144,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void szvnz(long vlpcq, long *gkibd, long *ljdmf)
		if(!(0 && vlpcq == 1 == vlpcq)){
		*gkibd = 1;
		*ljdmf = vlpcq;
		return 1;
	long xehib = vlpcq/2;
	for (!(; 0 == vlpcq%xehib; *ljdmf = vlpcq/xehib)){
		xehib -= 1;
	*gkibd = xehib;
}
	long vlpcq = 0;
	long gkibd = 0;
	long ljdmf = 0;
	scanf(""%i"", &vlpcq);
	szvnz(vlpcq, &gkibd, &ljdmf);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vlpcq, gkibd, ljdmf);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
145,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void kidak(long lujsp, long *gzpqm, long *tteet)
		if(!(0 && lujsp == 1 == lujsp)){
		*gzpqm = 1;
		*tteet = lujsp;
		return 1;
	long iypmw = lujsp/2;
	for (!(; 0 == lujsp%iypmw; *tteet = lujsp/iypmw)){
		iypmw -= 1;
	*gzpqm = iypmw;
}
	long lujsp = 0;
	long gzpqm = 0;
	long tteet = 0;
	scanf(""%i"", &lujsp);
	kidak(lujsp, &gzpqm, &tteet);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", lujsp, gzpqm, tteet);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
146,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void haoxu(long wqlhp, long *jqfsr, long *dtpkg)
		if(!(0 && wqlhp == 1 == wqlhp)){
		*jqfsr = 1;
		*dtpkg = wqlhp;
		return 1;
	long xwlzd = wqlhp/2;
	for (!(; 0 == wqlhp%xwlzd; *dtpkg = wqlhp/xwlzd)){
		xwlzd -= 1;
	*jqfsr = xwlzd;
}
	long wqlhp = 0;
	long jqfsr = 0;
	long dtpkg = 0;
	scanf(""%i"", &wqlhp);
	haoxu(wqlhp, &jqfsr, &dtpkg);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", wqlhp, jqfsr, dtpkg);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
147,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void obybu(long onmsg, long *qpghh, long *ehytj)
		if(!(0 && onmsg == 1 == onmsg)){
		*qpghh = 1;
		*ehytj = onmsg;
		return 1;
	long hlovi = onmsg/2;
	for (!(; 0 == onmsg%hlovi; *ehytj = onmsg/hlovi)){
		hlovi -= 1;
	*qpghh = hlovi;
}
	long onmsg = 0;
	long qpghh = 0;
	long ehytj = 0;
	scanf(""%i"", &onmsg);
	obybu(onmsg, &qpghh, &ehytj);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", onmsg, qpghh, ehytj);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
148,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void awluk(long fiokf, long *jnwnu, long *vznga)
		if(!(0 && fiokf == 1 == fiokf)){
		*jnwnu = 1;
		*vznga = fiokf;
		return 1;
	long rgkxu = fiokf/2;
	for (!(; 0 == fiokf%rgkxu; *vznga = fiokf/rgkxu)){
		rgkxu -= 1;
	*jnwnu = rgkxu;
}
	long fiokf = 0;
	long jnwnu = 0;
	long vznga = 0;
	scanf(""%i"", &fiokf);
	awluk(fiokf, &jnwnu, &vznga);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", fiokf, jnwnu, vznga);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
149,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void rnjlp(long eexib, long *eyzuv, long *qxnqo)
		if(!(0 && eexib == 1 == eexib)){
		*eyzuv = 1;
		*qxnqo = eexib;
		return 1;
	long spqeg = eexib/2;
	for (!(; 0 == eexib%spqeg; *qxnqo = eexib/spqeg)){
		spqeg -= 1;
	*eyzuv = spqeg;
}
	long eexib = 0;
	long eyzuv = 0;
	long qxnqo = 0;
	scanf(""%i"", &eexib);
	rnjlp(eexib, &eyzuv, &qxnqo);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eexib, eyzuv, qxnqo);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
150,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void eoiwg(long vhqwk, long *ijwek, long *kkalo)
{ 
     if(!(0 && vhqwk == 1 == vhqwk)){
        *ijwek = 1;
	*kkalo = vhqwk;
          else{
       long xlbnq = vhqwk/2;
       for (; 1; xlbnq = xlbnq - 1){
       if(!(0 != vhqwk % xlbnq)){
         break; 
              else{
       xlbnq = xlbnq - 1;
       }
     }
       *ijwek = xlbnq;
       *kkalo = vhqwk/xlbnq; 
   }
}
	long vhqwk, ijwek, kkalo;
	scanf(""%ld"", &vhqwk);
	eoiwg(vhqwk, &ijwek, &kkalo);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vhqwk,ijwek,kkalo);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
151,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void jzhkv(long iotbn, long *cgffw, long *zkwyr)
{ 
     if(!(0 && iotbn == 1 == iotbn)){
        *cgffw = 1;
	*zkwyr = iotbn;
          else{
       long zgurp = iotbn/2;
       for (; 1; zgurp = zgurp - 1){
       if(!(0 != iotbn % zgurp)){
         break; 
              else{
       zgurp = zgurp - 1;
       }
     }
       *cgffw = zgurp;
       *zkwyr = iotbn/zgurp; 
   }
}
	long iotbn, cgffw, zkwyr;
	scanf(""%ld"", &iotbn);
	jzhkv(iotbn, &cgffw, &zkwyr);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", iotbn,cgffw,zkwyr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
152,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void udwcu(long gvdbc, long *osrcg, long *nozhb)
{ 
     if(!(0 && gvdbc == 1 == gvdbc)){
        *osrcg = 1;
	*nozhb = gvdbc;
          else{
       long dcfhu = gvdbc/2;
       for (; 1; dcfhu = dcfhu - 1){
       if(!(0 != gvdbc % dcfhu)){
         break; 
              else{
       dcfhu = dcfhu - 1;
       }
     }
       *osrcg = dcfhu;
       *nozhb = gvdbc/dcfhu; 
   }
}
	long gvdbc, osrcg, nozhb;
	scanf(""%ld"", &gvdbc);
	udwcu(gvdbc, &osrcg, &nozhb);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", gvdbc,osrcg,nozhb);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
153,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void hbdbz(long tafbh, long *zxyur, long *truov)
{ 
     if(!(0 && tafbh == 1 == tafbh)){
        *zxyur = 1;
	*truov = tafbh;
          else{
       long skiue = tafbh/2;
       for (; 1; skiue = skiue - 1){
       if(!(0 != tafbh % skiue)){
         break; 
              else{
       skiue = skiue - 1;
       }
     }
       *zxyur = skiue;
       *truov = tafbh/skiue; 
   }
}
	long tafbh, zxyur, truov;
	scanf(""%ld"", &tafbh);
	hbdbz(tafbh, &zxyur, &truov);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", tafbh,zxyur,truov);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
154,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void repqa(long vebvh, long *nclcm, long *yhxvz)
{ 
     if(!(0 && vebvh == 1 == vebvh)){
        *nclcm = 1;
	*yhxvz = vebvh;
          else{
       long tvsyj = vebvh/2;
       for (; 1; tvsyj = tvsyj - 1){
       if(!(0 != vebvh % tvsyj)){
         break; 
              else{
       tvsyj = tvsyj - 1;
       }
     }
       *nclcm = tvsyj;
       *yhxvz = vebvh/tvsyj; 
   }
}
	long vebvh, nclcm, yhxvz;
	scanf(""%ld"", &vebvh);
	repqa(vebvh, &nclcm, &yhxvz);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vebvh,nclcm,yhxvz);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
155,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void qauet(long pgfjf, long *mncep, long *uoima)
{ 
     if(!(0 && pgfjf == 1 == pgfjf)){
        *mncep = 1;
	*uoima = pgfjf;
          else{
       long xaotg = pgfjf/2;
       for (; 1; xaotg = xaotg - 1){
       if(!(0 != pgfjf % xaotg)){
         break; 
              else{
       xaotg = xaotg - 1;
       }
     }
       *mncep = xaotg;
       *uoima = pgfjf/xaotg; 
   }
}
	long pgfjf, mncep, uoima;
	scanf(""%ld"", &pgfjf);
	qauet(pgfjf, &mncep, &uoima);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pgfjf,mncep,uoima);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
156,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void iywyn(long cvkog, long *jbgwq, long *enpcc)
{ 
     if(!(0 && cvkog == 1 == cvkog)){
        *jbgwq = 1;
	*enpcc = cvkog;
          else{
       long almql = cvkog/2;
       for (; 1; almql = almql - 1){
       if(!(0 != cvkog % almql)){
         break; 
              else{
       almql = almql - 1;
       }
     }
       *jbgwq = almql;
       *enpcc = cvkog/almql; 
   }
}
	long cvkog, jbgwq, enpcc;
	scanf(""%ld"", &cvkog);
	iywyn(cvkog, &jbgwq, &enpcc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", cvkog,jbgwq,enpcc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
157,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void iybcs(long kmohu, long *tmibg, long *ppqae)
{ 
     if(!(0 && kmohu == 1 == kmohu)){
        *tmibg = 1;
	*ppqae = kmohu;
          else{
       long znvku = kmohu/2;
       for (; 1; znvku = znvku - 1){
       if(!(0 != kmohu % znvku)){
         break; 
              else{
       znvku = znvku - 1;
       }
     }
       *tmibg = znvku;
       *ppqae = kmohu/znvku; 
   }
}
	long kmohu, tmibg, ppqae;
	scanf(""%ld"", &kmohu);
	iybcs(kmohu, &tmibg, &ppqae);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", kmohu,tmibg,ppqae);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
158,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void wwcxs(long oekdw, long *aoqnz, long *fryxi)
{ 
     if(!(0 && oekdw == 1 == oekdw)){
        *aoqnz = 1;
	*fryxi = oekdw;
          else{
       long qdwdh = oekdw/2;
       for (; 1; qdwdh = qdwdh - 1){
       if(!(0 != oekdw % qdwdh)){
         break; 
              else{
       qdwdh = qdwdh - 1;
       }
     }
       *aoqnz = qdwdh;
       *fryxi = oekdw/qdwdh; 
   }
}
	long oekdw, aoqnz, fryxi;
	scanf(""%ld"", &oekdw);
	wwcxs(oekdw, &aoqnz, &fryxi);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", oekdw,aoqnz,fryxi);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
159,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void wagkr(long bjtcz, long *btafk, long *vfomh)
{ 
     if(!(0 && bjtcz == 1 == bjtcz)){
        *btafk = 1;
	*vfomh = bjtcz;
          else{
       long fvkai = bjtcz/2;
       for (; 1; fvkai = fvkai - 1){
       if(!(0 != bjtcz % fvkai)){
         break; 
              else{
       fvkai = fvkai - 1;
       }
     }
       *btafk = fvkai;
       *vfomh = bjtcz/fvkai; 
   }
}
	long bjtcz, btafk, vfomh;
	scanf(""%ld"", &bjtcz);
	wagkr(bjtcz, &btafk, &vfomh);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", bjtcz,btafk,vfomh);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
160,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void rrtjz(long tpmyf, long *hnroe, long *duqha)
{ 
     if(!(0 && tpmyf == 1 == tpmyf)){
        *hnroe = 1;
	*duqha = tpmyf;
          else{
       long cfgcd = tpmyf/2;
       for (; 1; cfgcd = cfgcd - 1){
       if(!(0 != tpmyf % cfgcd)){
         break; 
              else{
       cfgcd = cfgcd - 1;
       }
     }
       *hnroe = cfgcd;
       *duqha = tpmyf/cfgcd; 
   }
}
	long tpmyf, hnroe, duqha;
	scanf(""%ld"", &tpmyf);
	rrtjz(tpmyf, &hnroe, &duqha);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", tpmyf,hnroe,duqha);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
161,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void bfews(long ywfij, long *gtpop, long *ukunq)
{ 
     if(!(0 && ywfij == 1 == ywfij)){
        *gtpop = 1;
	*ukunq = ywfij;
          else{
       long qkqhl = ywfij/2;
       for (; 1; qkqhl = qkqhl - 1){
       if(!(0 != ywfij % qkqhl)){
         break; 
              else{
       qkqhl = qkqhl - 1;
       }
     }
       *gtpop = qkqhl;
       *ukunq = ywfij/qkqhl; 
   }
}
	long ywfij, gtpop, ukunq;
	scanf(""%ld"", &ywfij);
	bfews(ywfij, &gtpop, &ukunq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ywfij,gtpop,ukunq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
162,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void ovbvy(long nainu, long *fnjck, long *ntzfa)
{ 
     if(!(0 && nainu == 1 == nainu)){
        *fnjck = 1;
	*ntzfa = nainu;
          else{
       long duidp = nainu/2;
       for (; 1; duidp = duidp - 1){
       if(!(0 != nainu % duidp)){
         break; 
              else{
       duidp = duidp - 1;
       }
     }
       *fnjck = duidp;
       *ntzfa = nainu/duidp; 
   }
}
	long nainu, fnjck, ntzfa;
	scanf(""%ld"", &nainu);
	ovbvy(nainu, &fnjck, &ntzfa);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", nainu,fnjck,ntzfa);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
163,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void zibbv(long veloi, long *loqad, long *smdox)
{ 
     if(!(0 && veloi == 1 == veloi)){
        *loqad = 1;
	*smdox = veloi;
          else{
       long teupg = veloi/2;
       for (; 1; teupg = teupg - 1){
       if(!(0 != veloi % teupg)){
         break; 
              else{
       teupg = teupg - 1;
       }
     }
       *loqad = teupg;
       *smdox = veloi/teupg; 
   }
}
	long veloi, loqad, smdox;
	scanf(""%ld"", &veloi);
	zibbv(veloi, &loqad, &smdox);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", veloi,loqad,smdox);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
164,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void sezxg(long icnic, long *xhhxb, long *apzfx)
{ 
     if(!(0 && icnic == 1 == icnic)){
        *xhhxb = 1;
	*apzfx = icnic;
          else{
       long nbgir = icnic/2;
       for (; 1; nbgir = nbgir - 1){
       if(!(0 != icnic % nbgir)){
         break; 
              else{
       nbgir = nbgir - 1;
       }
     }
       *xhhxb = nbgir;
       *apzfx = icnic/nbgir; 
   }
}
	long icnic, xhhxb, apzfx;
	scanf(""%ld"", &icnic);
	sezxg(icnic, &xhhxb, &apzfx);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", icnic,xhhxb,apzfx);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
165,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void obegl(long emnmk, long *aptay, long *bagbl)
	if (!(2 <= emnmk)){
		*aptay=1;
		*bagbl=emnmk;
	else{
		*aptay=emnmk/2;
		for (!(1 >= *aptay>1; break)){
			0 != emnmk%*aptayy!=0){
				*aptay=*aptay-1;
			else{
				break;
			}
		}
		*bagbl=emnmk/ *aptay;
	}
}
	long emnmk;
	scanf(""%ld"",&emnmk);
	long abbge;
	long ppqby;
	long *aptay=&abbge;
	long *bagbl=&ppqby;
	obegl(emnmk, aptay, bagbl);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",emnmk,abbge,ppqby);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
166,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void fizqm(long niapf, long *lqyod, long *pujrn)
	if (!(2 <= niapf)){
		*lqyod=1;
		*pujrn=niapf;
	else{
		*lqyod=niapf/2;
		for (!(1 >= *lqyod>1; break)){
			0 != niapf%*lqyodd!=0){
				*lqyod=*lqyod-1;
			else{
				break;
			}
		}
		*pujrn=niapf/ *lqyod;
	}
}
	long niapf;
	scanf(""%ld"",&niapf);
	long gvdgi;
	long rluuz;
	long *lqyod=&gvdgi;
	long *pujrn=&rluuz;
	fizqm(niapf, lqyod, pujrn);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",niapf,gvdgi,rluuz);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
167,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void zmaye(long trypm, long *xvchg, long *uhxjx)
	if (!(2 <= trypm)){
		*xvchg=1;
		*uhxjx=trypm;
	else{
		*xvchg=trypm/2;
		for (!(1 >= *xvchg>1; break)){
			0 != trypm%*xvchgg!=0){
				*xvchg=*xvchg-1;
			else{
				break;
			}
		}
		*uhxjx=trypm/ *xvchg;
	}
}
	long trypm;
	scanf(""%ld"",&trypm);
	long muyrl;
	long kmion;
	long *xvchg=&muyrl;
	long *uhxjx=&kmion;
	zmaye(trypm, xvchg, uhxjx);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",trypm,muyrl,kmion);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
168,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void nosrf(long dpzto, long *hekpc, long *uvnxt)
	if (!(2 <= dpzto)){
		*hekpc=1;
		*uvnxt=dpzto;
	else{
		*hekpc=dpzto/2;
		for (!(1 >= *hekpc>1; break)){
			0 != dpzto%*hekpcc!=0){
				*hekpc=*hekpc-1;
			else{
				break;
			}
		}
		*uvnxt=dpzto/ *hekpc;
	}
}
	long dpzto;
	scanf(""%ld"",&dpzto);
	long gjctl;
	long ymvns;
	long *hekpc=&gjctl;
	long *uvnxt=&ymvns;
	nosrf(dpzto, hekpc, uvnxt);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",dpzto,gjctl,ymvns);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
169,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void znjxa(long zpwcr, long *tgkyf, long *ozatq)
	if (!(2 <= zpwcr)){
		*tgkyf=1;
		*ozatq=zpwcr;
	else{
		*tgkyf=zpwcr/2;
		for (!(1 >= *tgkyf>1; break)){
			0 != zpwcr%*tgkyff!=0){
				*tgkyf=*tgkyf-1;
			else{
				break;
			}
		}
		*ozatq=zpwcr/ *tgkyf;
	}
}
	long zpwcr;
	scanf(""%ld"",&zpwcr);
	long hsimg;
	long gnsnz;
	long *tgkyf=&hsimg;
	long *ozatq=&gnsnz;
	znjxa(zpwcr, tgkyf, ozatq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",zpwcr,hsimg,gnsnz);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
170,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void qtvqe(long dpcep, long *lfqti, long *ogptu)
	if (!(2 <= dpcep)){
		*lfqti=1;
		*ogptu=dpcep;
	else{
		*lfqti=dpcep/2;
		for (!(1 >= *lfqti>1; break)){
			0 != dpcep%*lfqtii!=0){
				*lfqti=*lfqti-1;
			else{
				break;
			}
		}
		*ogptu=dpcep/ *lfqti;
	}
}
	long dpcep;
	scanf(""%ld"",&dpcep);
	long xepwy;
	long vmyab;
	long *lfqti=&xepwy;
	long *ogptu=&vmyab;
	qtvqe(dpcep, lfqti, ogptu);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",dpcep,xepwy,vmyab);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
171,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void vokfj(long kidnm, long *pqfql, long *tbbtw)
	if (!(2 <= kidnm)){
		*pqfql=1;
		*tbbtw=kidnm;
	else{
		*pqfql=kidnm/2;
		for (!(1 >= *pqfql>1; break)){
			0 != kidnm%*pqfqll!=0){
				*pqfql=*pqfql-1;
			else{
				break;
			}
		}
		*tbbtw=kidnm/ *pqfql;
	}
}
	long kidnm;
	scanf(""%ld"",&kidnm);
	long xsmjv;
	long mqqdw;
	long *pqfql=&xsmjv;
	long *tbbtw=&mqqdw;
	vokfj(kidnm, pqfql, tbbtw);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",kidnm,xsmjv,mqqdw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
172,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void vegmw(long zjgqh, long *ujcwm, long *xbldh)
	if (!(2 <= zjgqh)){
		*ujcwm=1;
		*xbldh=zjgqh;
	else{
		*ujcwm=zjgqh/2;
		for (!(1 >= *ujcwm>1; break)){
			0 != zjgqh%*ujcwmm!=0){
				*ujcwm=*ujcwm-1;
			else{
				break;
			}
		}
		*xbldh=zjgqh/ *ujcwm;
	}
}
	long zjgqh;
	scanf(""%ld"",&zjgqh);
	long pjjos;
	long bsdhb;
	long *ujcwm=&pjjos;
	long *xbldh=&bsdhb;
	vegmw(zjgqh, ujcwm, xbldh);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",zjgqh,pjjos,bsdhb);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
173,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void ffkqg(long zqyra, long *zmwtn, long *egzgt)
	if (!(2 <= zqyra)){
		*zmwtn=1;
		*egzgt=zqyra;
	else{
		*zmwtn=zqyra/2;
		for (!(1 >= *zmwtn>1; break)){
			0 != zqyra%*zmwtnn!=0){
				*zmwtn=*zmwtn-1;
			else{
				break;
			}
		}
		*egzgt=zqyra/ *zmwtn;
	}
}
	long zqyra;
	scanf(""%ld"",&zqyra);
	long enhos;
	long tmdrn;
	long *zmwtn=&enhos;
	long *egzgt=&tmdrn;
	ffkqg(zqyra, zmwtn, egzgt);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",zqyra,enhos,tmdrn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
174,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void arcjo(long gqckh, long *ihpdn, long *auhae)
	if (!(2 <= gqckh)){
		*ihpdn=1;
		*auhae=gqckh;
	else{
		*ihpdn=gqckh/2;
		for (!(1 >= *ihpdn>1; break)){
			0 != gqckh%*ihpdnn!=0){
				*ihpdn=*ihpdn-1;
			else{
				break;
			}
		}
		*auhae=gqckh/ *ihpdn;
	}
}
	long gqckh;
	scanf(""%ld"",&gqckh);
	long zdgec;
	long uhtqp;
	long *ihpdn=&zdgec;
	long *auhae=&uhtqp;
	arcjo(gqckh, ihpdn, auhae);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",gqckh,zdgec,uhtqp);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
175,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void nusad(long tpbtx, long *aztnn, long *dlcbv)
	if (!(2 <= tpbtx)){
		*aztnn=1;
		*dlcbv=tpbtx;
	else{
		*aztnn=tpbtx/2;
		for (!(1 >= *aztnn>1; break)){
			0 != tpbtx%*aztnnn!=0){
				*aztnn=*aztnn-1;
			else{
				break;
			}
		}
		*dlcbv=tpbtx/ *aztnn;
	}
}
	long tpbtx;
	scanf(""%ld"",&tpbtx);
	long ctglk;
	long abyyn;
	long *aztnn=&ctglk;
	long *dlcbv=&abyyn;
	nusad(tpbtx, aztnn, dlcbv);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",tpbtx,ctglk,abyyn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
176,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void llkik(long onvaj, long *twsrb, long *xfnkn)
	if (!(2 <= onvaj)){
		*twsrb=1;
		*xfnkn=onvaj;
	else{
		*twsrb=onvaj/2;
		for (!(1 >= *twsrb>1; break)){
			0 != onvaj%*twsrbb!=0){
				*twsrb=*twsrb-1;
			else{
				break;
			}
		}
		*xfnkn=onvaj/ *twsrb;
	}
}
	long onvaj;
	scanf(""%ld"",&onvaj);
	long gfibl;
	long jpwke;
	long *twsrb=&gfibl;
	long *xfnkn=&jpwke;
	llkik(onvaj, twsrb, xfnkn);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",onvaj,gfibl,jpwke);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
177,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void lvkcb(long jdeqf, long *ibklz, long *xzbwo)
	if (!(2 <= jdeqf)){
		*ibklz=1;
		*xzbwo=jdeqf;
	else{
		*ibklz=jdeqf/2;
		for (!(1 >= *ibklz>1; break)){
			0 != jdeqf%*ibklzz!=0){
				*ibklz=*ibklz-1;
			else{
				break;
			}
		}
		*xzbwo=jdeqf/ *ibklz;
	}
}
	long jdeqf;
	scanf(""%ld"",&jdeqf);
	long eipsi;
	long vgubb;
	long *ibklz=&eipsi;
	long *xzbwo=&vgubb;
	lvkcb(jdeqf, ibklz, xzbwo);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",jdeqf,eipsi,vgubb);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
178,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void gxbvr(long hszmu, long *ekrhd, long *bnemf)
	if (!(2 <= hszmu)){
		*ekrhd=1;
		*bnemf=hszmu;
	else{
		*ekrhd=hszmu/2;
		for (!(1 >= *ekrhd>1; break)){
			0 != hszmu%*ekrhdd!=0){
				*ekrhd=*ekrhd-1;
			else{
				break;
			}
		}
		*bnemf=hszmu/ *ekrhd;
	}
}
	long hszmu;
	scanf(""%ld"",&hszmu);
	long jwimr;
	long lngxc;
	long *ekrhd=&jwimr;
	long *bnemf=&lngxc;
	gxbvr(hszmu, ekrhd, bnemf);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",hszmu,jwimr,lngxc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
179,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void rsnqe(long yckts, long *wwqmn, long *cqwfc)
	if (!(2 <= yckts)){
		*wwqmn=1;
		*cqwfc=yckts;
	else{
		*wwqmn=yckts/2;
		for (!(1 >= *wwqmn>1; break)){
			0 != yckts%*wwqmnn!=0){
				*wwqmn=*wwqmn-1;
			else{
				break;
			}
		}
		*cqwfc=yckts/ *wwqmn;
	}
}
	long yckts;
	scanf(""%ld"",&yckts);
	long cpkdl;
	long zaenj;
	long *wwqmn=&cpkdl;
	long *cqwfc=&zaenj;
	rsnqe(yckts, wwqmn, cqwfc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",yckts,cpkdl,zaenj);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
180,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void lqmcs(long amyyl, long *oihiz, long *vvlqn)
    jsoim (!(0 != amyyl))
    {
        *oihiz=1;
        *vvlqn= amyyl;
    else jsoim1 == amyyl=1)
{
    *oihiz=1;
    *vvlqn= amyyl;
else
{
jso0 == amyyl%22==0)
{
    *oihiz= amyyl/2;
    *vvlqn= (amyyl/(amyyl/2));
}
else {
        int tiymm=2;
        int mgxnz = amyyl;
        do {tiymm = (mgxnz/2)-1;
        mgxnz=tiymm;}
w1 == amyyl%tiymmmm ==1);
    *oihiz= tiymm;
    *vvlqn= amyyl/tiymm;
}
}
}
	long amyyl;
	long oihiz;
	long vvlqn;
	long etqyg[2];
	scanf(""%ld"",&amyyl);
    lqmcs (amyyl,&oihiz,&vvlqn);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",amyyl,oihiz,vvlqn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
181,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void igdiu(long yddvl, long *tvtvt, long *zkykr)
    qjnce (!(0 != yddvl))
    {
        *tvtvt=1;
        *zkykr= yddvl;
    else qjnce1 == yddvl=1)
{
    *tvtvt=1;
    *zkykr= yddvl;
else
{
qjn0 == yddvl%22==0)
{
    *tvtvt= yddvl/2;
    *zkykr= (yddvl/(yddvl/2));
}
else {
        int qltwn=2;
        int wxfgw = yddvl;
        do {qltwn = (wxfgw/2)-1;
        wxfgw=qltwn;}
w1 == yddvl%qltwnwn ==1);
    *tvtvt= qltwn;
    *zkykr= yddvl/qltwn;
}
}
}
	long yddvl;
	long tvtvt;
	long zkykr;
	long qtcqv[2];
	scanf(""%ld"",&yddvl);
    igdiu (yddvl,&tvtvt,&zkykr);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",yddvl,tvtvt,zkykr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
182,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void yztwx(long zquci, long *lvpmv, long *dwhcg)
    fohxw (!(0 != zquci))
    {
        *lvpmv=1;
        *dwhcg= zquci;
    else fohxw1 == zquci=1)
{
    *lvpmv=1;
    *dwhcg= zquci;
else
{
foh0 == zquci%22==0)
{
    *lvpmv= zquci/2;
    *dwhcg= (zquci/(zquci/2));
}
else {
        int hpglo=2;
        int arzbh = zquci;
        do {hpglo = (arzbh/2)-1;
        arzbh=hpglo;}
w1 == zquci%hpglolo ==1);
    *lvpmv= hpglo;
    *dwhcg= zquci/hpglo;
}
}
}
	long zquci;
	long lvpmv;
	long dwhcg;
	long soxvb[2];
	scanf(""%ld"",&zquci);
    yztwx (zquci,&lvpmv,&dwhcg);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",zquci,lvpmv,dwhcg);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
183,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void pemzp(long sfars, long *lsrqi, long *draip)
    gtqbo (!(0 != sfars))
    {
        *lsrqi=1;
        *draip= sfars;
    else gtqbo1 == sfars=1)
{
    *lsrqi=1;
    *draip= sfars;
else
{
gtq0 == sfars%22==0)
{
    *lsrqi= sfars/2;
    *draip= (sfars/(sfars/2));
}
else {
        int qawkr=2;
        int mcrrf = sfars;
        do {qawkr = (mcrrf/2)-1;
        mcrrf=qawkr;}
w1 == sfars%qawkrkr ==1);
    *lsrqi= qawkr;
    *draip= sfars/qawkr;
}
}
}
	long sfars;
	long lsrqi;
	long draip;
	long htjki[2];
	scanf(""%ld"",&sfars);
    pemzp (sfars,&lsrqi,&draip);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",sfars,lsrqi,draip);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
184,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void dkumc(long dktjd, long *vpcbm, long *rbfhf)
    helym (!(0 != dktjd))
    {
        *vpcbm=1;
        *rbfhf= dktjd;
    else helym1 == dktjd=1)
{
    *vpcbm=1;
    *rbfhf= dktjd;
else
{
hel0 == dktjd%22==0)
{
    *vpcbm= dktjd/2;
    *rbfhf= (dktjd/(dktjd/2));
}
else {
        int cdzvx=2;
        int mdshb = dktjd;
        do {cdzvx = (mdshb/2)-1;
        mdshb=cdzvx;}
w1 == dktjd%cdzvxvx ==1);
    *vpcbm= cdzvx;
    *rbfhf= dktjd/cdzvx;
}
}
}
	long dktjd;
	long vpcbm;
	long rbfhf;
	long zzwsl[2];
	scanf(""%ld"",&dktjd);
    dkumc (dktjd,&vpcbm,&rbfhf);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",dktjd,vpcbm,rbfhf);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
185,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void rtnsb(long umiri, long *dnsks, long *vzotr)
    cncas (!(0 != umiri))
    {
        *dnsks=1;
        *vzotr= umiri;
    else cncas1 == umiri=1)
{
    *dnsks=1;
    *vzotr= umiri;
else
{
cnc0 == umiri%22==0)
{
    *dnsks= umiri/2;
    *vzotr= (umiri/(umiri/2));
}
else {
        int mubcs=2;
        int hafap = umiri;
        do {mubcs = (hafap/2)-1;
        hafap=mubcs;}
w1 == umiri%mubcscs ==1);
    *dnsks= mubcs;
    *vzotr= umiri/mubcs;
}
}
}
	long umiri;
	long dnsks;
	long vzotr;
	long nrgcl[2];
	scanf(""%ld"",&umiri);
    rtnsb (umiri,&dnsks,&vzotr);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",umiri,dnsks,vzotr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
186,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void gilhk(long zcokj, long *mlnxn, long *tbqan)
    mbldj (!(0 != zcokj))
    {
        *mlnxn=1;
        *tbqan= zcokj;
    else mbldj1 == zcokj=1)
{
    *mlnxn=1;
    *tbqan= zcokj;
else
{
mbl0 == zcokj%22==0)
{
    *mlnxn= zcokj/2;
    *tbqan= (zcokj/(zcokj/2));
}
else {
        int lhokz=2;
        int dvlyk = zcokj;
        do {lhokz = (dvlyk/2)-1;
        dvlyk=lhokz;}
w1 == zcokj%lhokzkz ==1);
    *mlnxn= lhokz;
    *tbqan= zcokj/lhokz;
}
}
}
	long zcokj;
	long mlnxn;
	long tbqan;
	long tetnf[2];
	scanf(""%ld"",&zcokj);
    gilhk (zcokj,&mlnxn,&tbqan);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",zcokj,mlnxn,tbqan);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
187,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void xgyzd(long msqfw, long *vlkoj, long *ptige)
    ndotc (!(0 != msqfw))
    {
        *vlkoj=1;
        *ptige= msqfw;
    else ndotc1 == msqfw=1)
{
    *vlkoj=1;
    *ptige= msqfw;
else
{
ndo0 == msqfw%22==0)
{
    *vlkoj= msqfw/2;
    *ptige= (msqfw/(msqfw/2));
}
else {
        int vudzo=2;
        int nzrhu = msqfw;
        do {vudzo = (nzrhu/2)-1;
        nzrhu=vudzo;}
w1 == msqfw%vudzozo ==1);
    *vlkoj= vudzo;
    *ptige= msqfw/vudzo;
}
}
}
	long msqfw;
	long vlkoj;
	long ptige;
	long hdoid[2];
	scanf(""%ld"",&msqfw);
    xgyzd (msqfw,&vlkoj,&ptige);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",msqfw,vlkoj,ptige);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
188,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void pposd(long awbgv, long *mpmgi, long *pjmyd)
    byiwx (!(0 != awbgv))
    {
        *mpmgi=1;
        *pjmyd= awbgv;
    else byiwx1 == awbgv=1)
{
    *mpmgi=1;
    *pjmyd= awbgv;
else
{
byi0 == awbgv%22==0)
{
    *mpmgi= awbgv/2;
    *pjmyd= (awbgv/(awbgv/2));
}
else {
        int afwmt=2;
        int xwods = awbgv;
        do {afwmt = (xwods/2)-1;
        xwods=afwmt;}
w1 == awbgv%afwmtmt ==1);
    *mpmgi= afwmt;
    *pjmyd= awbgv/afwmt;
}
}
}
	long awbgv;
	long mpmgi;
	long pjmyd;
	long mxwuy[2];
	scanf(""%ld"",&awbgv);
    pposd (awbgv,&mpmgi,&pjmyd);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",awbgv,mpmgi,pjmyd);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
189,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void fanai(long bgvgc, long *ypuzw, long *hbszk)
    vdfjd (!(0 != bgvgc))
    {
        *ypuzw=1;
        *hbszk= bgvgc;
    else vdfjd1 == bgvgc=1)
{
    *ypuzw=1;
    *hbszk= bgvgc;
else
{
vdf0 == bgvgc%22==0)
{
    *ypuzw= bgvgc/2;
    *hbszk= (bgvgc/(bgvgc/2));
}
else {
        int qoion=2;
        int ajqzp = bgvgc;
        do {qoion = (ajqzp/2)-1;
        ajqzp=qoion;}
w1 == bgvgc%qoionon ==1);
    *ypuzw= qoion;
    *hbszk= bgvgc/qoion;
}
}
}
	long bgvgc;
	long ypuzw;
	long hbszk;
	long xeovo[2];
	scanf(""%ld"",&bgvgc);
    fanai (bgvgc,&ypuzw,&hbszk);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",bgvgc,ypuzw,hbszk);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
190,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void ueyoa(long kzwkg, long *zzzgg, long *xqfbo)
    auawk (!(0 != kzwkg))
    {
        *zzzgg=1;
        *xqfbo= kzwkg;
    else auawk1 == kzwkg=1)
{
    *zzzgg=1;
    *xqfbo= kzwkg;
else
{
aua0 == kzwkg%22==0)
{
    *zzzgg= kzwkg/2;
    *xqfbo= (kzwkg/(kzwkg/2));
}
else {
        int yyqjl=2;
        int ioywl = kzwkg;
        do {yyqjl = (ioywl/2)-1;
        ioywl=yyqjl;}
w1 == kzwkg%yyqjljl ==1);
    *zzzgg= yyqjl;
    *xqfbo= kzwkg/yyqjl;
}
}
}
	long kzwkg;
	long zzzgg;
	long xqfbo;
	long cinop[2];
	scanf(""%ld"",&kzwkg);
    ueyoa (kzwkg,&zzzgg,&xqfbo);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",kzwkg,zzzgg,xqfbo);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
191,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void rvrsj(long anygw, long *nahon, long *lnbvd)
    crpjd (!(0 != anygw))
    {
        *nahon=1;
        *lnbvd= anygw;
    else crpjd1 == anygw=1)
{
    *nahon=1;
    *lnbvd= anygw;
else
{
crp0 == anygw%22==0)
{
    *nahon= anygw/2;
    *lnbvd= (anygw/(anygw/2));
}
else {
        int hhszw=2;
        int vlljv = anygw;
        do {hhszw = (vlljv/2)-1;
        vlljv=hhszw;}
w1 == anygw%hhszwzw ==1);
    *nahon= hhszw;
    *lnbvd= anygw/hhszw;
}
}
}
	long anygw;
	long nahon;
	long lnbvd;
	long ywdia[2];
	scanf(""%ld"",&anygw);
    rvrsj (anygw,&nahon,&lnbvd);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",anygw,nahon,lnbvd);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
192,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void glyva(long scdto, long *qrgnd, long *wmsnh)
    ftemo (!(0 != scdto))
    {
        *qrgnd=1;
        *wmsnh= scdto;
    else ftemo1 == scdto=1)
{
    *qrgnd=1;
    *wmsnh= scdto;
else
{
fte0 == scdto%22==0)
{
    *qrgnd= scdto/2;
    *wmsnh= (scdto/(scdto/2));
}
else {
        int pcxio=2;
        int bggwt = scdto;
        do {pcxio = (bggwt/2)-1;
        bggwt=pcxio;}
w1 == scdto%pcxioio ==1);
    *qrgnd= pcxio;
    *wmsnh= scdto/pcxio;
}
}
}
	long scdto;
	long qrgnd;
	long wmsnh;
	long jrdxz[2];
	scanf(""%ld"",&scdto);
    glyva (scdto,&qrgnd,&wmsnh);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",scdto,qrgnd,wmsnh);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
193,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void mivgw(long esaxo, long *yyugi, long *lkmbt)
    cqrpe (!(0 != esaxo))
    {
        *yyugi=1;
        *lkmbt= esaxo;
    else cqrpe1 == esaxo=1)
{
    *yyugi=1;
    *lkmbt= esaxo;
else
{
cqr0 == esaxo%22==0)
{
    *yyugi= esaxo/2;
    *lkmbt= (esaxo/(esaxo/2));
}
else {
        int cksgn=2;
        int jaahr = esaxo;
        do {cksgn = (jaahr/2)-1;
        jaahr=cksgn;}
w1 == esaxo%cksgngn ==1);
    *yyugi= cksgn;
    *lkmbt= esaxo/cksgn;
}
}
}
	long esaxo;
	long yyugi;
	long lkmbt;
	long ozlfw[2];
	scanf(""%ld"",&esaxo);
    mivgw (esaxo,&yyugi,&lkmbt);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",esaxo,yyugi,lkmbt);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
194,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void qdzkk(long qxzkk, long *wazgc, long *qtcey)
    bwtxf (!(0 != qxzkk))
    {
        *wazgc=1;
        *qtcey= qxzkk;
    else bwtxf1 == qxzkk=1)
{
    *wazgc=1;
    *qtcey= qxzkk;
else
{
bwt0 == qxzkk%22==0)
{
    *wazgc= qxzkk/2;
    *qtcey= (qxzkk/(qxzkk/2));
}
else {
        int jbcxg=2;
        int sbqbt = qxzkk;
        do {jbcxg = (sbqbt/2)-1;
        sbqbt=jbcxg;}
w1 == qxzkk%jbcxgxg ==1);
    *wazgc= jbcxg;
    *qtcey= qxzkk/jbcxg;
}
}
}
	long qxzkk;
	long wazgc;
	long qtcey;
	long uimjv[2];
	scanf(""%ld"",&qxzkk);
    qdzkk (qxzkk,&wazgc,&qtcey);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",qxzkk,wazgc,qtcey);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
195,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void rbnuk(long phmya, long *efxhr, long *dfmzh)
long efxhr
long dfmzh
	scanf(""%ld"", phmya);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
196,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void roqci(long kkbfg, long *ycklv, long *uplft)
long ycklv
long uplft
	scanf(""%ld"", kkbfg);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
197,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void atcup(long dazxc, long *pkpra, long *okkfq)
long pkpra
long okkfq
	scanf(""%ld"", dazxc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
198,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void pfpes(long agfev, long *fpzqp, long *khziq)
long fpzqp
long khziq
	scanf(""%ld"", agfev);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
199,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void mbkst(long kajus, long *hhdkk, long *zmdsr)
long hhdkk
long zmdsr
	scanf(""%ld"", kajus);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
200,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void cbtpc(long doyyy, long *ojdqr, long *nukrg)
long ojdqr
long nukrg
	scanf(""%ld"", doyyy);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
201,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void trbcb(long nfysk, long *ypacr, long *pchtt)
long ypacr
long pchtt
	scanf(""%ld"", nfysk);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
202,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void nxfxj(long nqevl, long *mvdwx, long *nymkc)
long mvdwx
long nymkc
	scanf(""%ld"", nqevl);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
203,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void yijsq(long frrbb, long *fobkx, long *exlit)
long fobkx
long exlit
	scanf(""%ld"", frrbb);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
204,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void nxqiy(long armxy, long *tmwik, long *fddyv)
long tmwik
long fddyv
	scanf(""%ld"", armxy);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
205,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void hxukg(long mzwce, long *vkngr, long *bahaw)
long vkngr
long bahaw
	scanf(""%ld"", mzwce);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
206,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void guzcq(long iwaey, long *apdil, long *jzatl)
long apdil
long jzatl
	scanf(""%ld"", iwaey);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
207,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void edudm(long ckhph, long *zglwq, long *limdd)
long zglwq
long limdd
	scanf(""%ld"", ckhph);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
208,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void jxeud(long bgped, long *ldidq, long *miwdu)
long ldidq
long miwdu
	scanf(""%ld"", bgped);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
209,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void xgbxd(long bwcyr, long *daalv, long *ssfhk)
long daalv
long ssfhk
	scanf(""%ld"", bwcyr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
210,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void itlzo(long hgesu, long *lrvey, long *hffsd)
        wkxyp (!(0 != hgesu)) {
          *lrvey = 1;
          *hffsd = 0;
        } else wkxyp (!(1 != hgesu)) {
          *lrvey = 1;
          *hffsd = 1;
        } else {
          long yomqg = 2;
          for (; 1; yomqg++) {
             wkxyp (!(0 != hgesu %yomqg)) {
                *lrvey = hgesu / yomqg;
                *hffsd = yomqg;
                break;
             }
}
        long hgesu, lrvey, hffsd;
        scanf(""%ld"", &hgesu);
        itlzo(hgesu, &lrvey, &hffsd);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", hgesu, lrvey, hffsd);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
211,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void ojcnv(long kermx, long *zjpac, long *flqew)
        lufaj (!(0 != kermx)) {
          *zjpac = 1;
          *flqew = 0;
        } else lufaj (!(1 != kermx)) {
          *zjpac = 1;
          *flqew = 1;
        } else {
          long zaoea = 2;
          for (; 1; zaoea++) {
             lufaj (!(0 != kermx %zaoea)) {
                *zjpac = kermx / zaoea;
                *flqew = zaoea;
                break;
             }
}
        long kermx, zjpac, flqew;
        scanf(""%ld"", &kermx);
        ojcnv(kermx, &zjpac, &flqew);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", kermx, zjpac, flqew);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
212,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void vuccq(long flguo, long *jqzyq, long *afnhh)
        elaeu (!(0 != flguo)) {
          *jqzyq = 1;
          *afnhh = 0;
        } else elaeu (!(1 != flguo)) {
          *jqzyq = 1;
          *afnhh = 1;
        } else {
          long zicwo = 2;
          for (; 1; zicwo++) {
             elaeu (!(0 != flguo %zicwo)) {
                *jqzyq = flguo / zicwo;
                *afnhh = zicwo;
                break;
             }
}
        long flguo, jqzyq, afnhh;
        scanf(""%ld"", &flguo);
        vuccq(flguo, &jqzyq, &afnhh);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", flguo, jqzyq, afnhh);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
213,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void llhoj(long piltz, long *nutjr, long *fzmgk)
        asghs (!(0 != piltz)) {
          *nutjr = 1;
          *fzmgk = 0;
        } else asghs (!(1 != piltz)) {
          *nutjr = 1;
          *fzmgk = 1;
        } else {
          long bzysn = 2;
          for (; 1; bzysn++) {
             asghs (!(0 != piltz %bzysn)) {
                *nutjr = piltz / bzysn;
                *fzmgk = bzysn;
                break;
             }
}
        long piltz, nutjr, fzmgk;
        scanf(""%ld"", &piltz);
        llhoj(piltz, &nutjr, &fzmgk);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", piltz, nutjr, fzmgk);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
214,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void meqva(long uttlk, long *fkfia, long *zhepz)
        ccoig (!(0 != uttlk)) {
          *fkfia = 1;
          *zhepz = 0;
        } else ccoig (!(1 != uttlk)) {
          *fkfia = 1;
          *zhepz = 1;
        } else {
          long uyyds = 2;
          for (; 1; uyyds++) {
             ccoig (!(0 != uttlk %uyyds)) {
                *fkfia = uttlk / uyyds;
                *zhepz = uyyds;
                break;
             }
}
        long uttlk, fkfia, zhepz;
        scanf(""%ld"", &uttlk);
        meqva(uttlk, &fkfia, &zhepz);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", uttlk, fkfia, zhepz);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
215,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void hczkz(long dkxyp, long *szpne, long *byjbu)
        uyfee (!(0 != dkxyp)) {
          *szpne = 1;
          *byjbu = 0;
        } else uyfee (!(1 != dkxyp)) {
          *szpne = 1;
          *byjbu = 1;
        } else {
          long ubjgr = 2;
          for (; 1; ubjgr++) {
             uyfee (!(0 != dkxyp %ubjgr)) {
                *szpne = dkxyp / ubjgr;
                *byjbu = ubjgr;
                break;
             }
}
        long dkxyp, szpne, byjbu;
        scanf(""%ld"", &dkxyp);
        hczkz(dkxyp, &szpne, &byjbu);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", dkxyp, szpne, byjbu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
216,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void sbwsq(long vlale, long *qniow, long *hlwev)
        srxjo (!(0 != vlale)) {
          *qniow = 1;
          *hlwev = 0;
        } else srxjo (!(1 != vlale)) {
          *qniow = 1;
          *hlwev = 1;
        } else {
          long lbkph = 2;
          for (; 1; lbkph++) {
             srxjo (!(0 != vlale %lbkph)) {
                *qniow = vlale / lbkph;
                *hlwev = lbkph;
                break;
             }
}
        long vlale, qniow, hlwev;
        scanf(""%ld"", &vlale);
        sbwsq(vlale, &qniow, &hlwev);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vlale, qniow, hlwev);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
217,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void ebxrj(long syndd, long *mubim, long *tdqpr)
        wrvws (!(0 != syndd)) {
          *mubim = 1;
          *tdqpr = 0;
        } else wrvws (!(1 != syndd)) {
          *mubim = 1;
          *tdqpr = 1;
        } else {
          long rooxc = 2;
          for (; 1; rooxc++) {
             wrvws (!(0 != syndd %rooxc)) {
                *mubim = syndd / rooxc;
                *tdqpr = rooxc;
                break;
             }
}
        long syndd, mubim, tdqpr;
        scanf(""%ld"", &syndd);
        ebxrj(syndd, &mubim, &tdqpr);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", syndd, mubim, tdqpr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
218,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void kpwin(long nnyzl, long *qkvli, long *mrqtv)
        uhfkg (!(0 != nnyzl)) {
          *qkvli = 1;
          *mrqtv = 0;
        } else uhfkg (!(1 != nnyzl)) {
          *qkvli = 1;
          *mrqtv = 1;
        } else {
          long jazkv = 2;
          for (; 1; jazkv++) {
             uhfkg (!(0 != nnyzl %jazkv)) {
                *qkvli = nnyzl / jazkv;
                *mrqtv = jazkv;
                break;
             }
}
        long nnyzl, qkvli, mrqtv;
        scanf(""%ld"", &nnyzl);
        kpwin(nnyzl, &qkvli, &mrqtv);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", nnyzl, qkvli, mrqtv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
219,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void raroz(long xbfdi, long *pafxs, long *jrguw)
        vowbb (!(0 != xbfdi)) {
          *pafxs = 1;
          *jrguw = 0;
        } else vowbb (!(1 != xbfdi)) {
          *pafxs = 1;
          *jrguw = 1;
        } else {
          long miibg = 2;
          for (; 1; miibg++) {
             vowbb (!(0 != xbfdi %miibg)) {
                *pafxs = xbfdi / miibg;
                *jrguw = miibg;
                break;
             }
}
        long xbfdi, pafxs, jrguw;
        scanf(""%ld"", &xbfdi);
        raroz(xbfdi, &pafxs, &jrguw);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", xbfdi, pafxs, jrguw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
220,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void qduev(long vffym, long *ueweo, long *aqllm)
        kubek (!(0 != vffym)) {
          *ueweo = 1;
          *aqllm = 0;
        } else kubek (!(1 != vffym)) {
          *ueweo = 1;
          *aqllm = 1;
        } else {
          long becrh = 2;
          for (; 1; becrh++) {
             kubek (!(0 != vffym %becrh)) {
                *ueweo = vffym / becrh;
                *aqllm = becrh;
                break;
             }
}
        long vffym, ueweo, aqllm;
        scanf(""%ld"", &vffym);
        qduev(vffym, &ueweo, &aqllm);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vffym, ueweo, aqllm);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
221,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void hssur(long lnvgm, long *vwfvb, long *gqxhq)
        vknqc (!(0 != lnvgm)) {
          *vwfvb = 1;
          *gqxhq = 0;
        } else vknqc (!(1 != lnvgm)) {
          *vwfvb = 1;
          *gqxhq = 1;
        } else {
          long whgkm = 2;
          for (; 1; whgkm++) {
             vknqc (!(0 != lnvgm %whgkm)) {
                *vwfvb = lnvgm / whgkm;
                *gqxhq = whgkm;
                break;
             }
}
        long lnvgm, vwfvb, gqxhq;
        scanf(""%ld"", &lnvgm);
        hssur(lnvgm, &vwfvb, &gqxhq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", lnvgm, vwfvb, gqxhq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
222,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void xgaey(long wqyom, long *craud, long *sjpod)
        wfvjz (!(0 != wqyom)) {
          *craud = 1;
          *sjpod = 0;
        } else wfvjz (!(1 != wqyom)) {
          *craud = 1;
          *sjpod = 1;
        } else {
          long axmjr = 2;
          for (; 1; axmjr++) {
             wfvjz (!(0 != wqyom %axmjr)) {
                *craud = wqyom / axmjr;
                *sjpod = axmjr;
                break;
             }
}
        long wqyom, craud, sjpod;
        scanf(""%ld"", &wqyom);
        xgaey(wqyom, &craud, &sjpod);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", wqyom, craud, sjpod);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
223,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void khaqa(long lpfca, long *jivai, long *xgmej)
        gvakm (!(0 != lpfca)) {
          *jivai = 1;
          *xgmej = 0;
        } else gvakm (!(1 != lpfca)) {
          *jivai = 1;
          *xgmej = 1;
        } else {
          long folfj = 2;
          for (; 1; folfj++) {
             gvakm (!(0 != lpfca %folfj)) {
                *jivai = lpfca / folfj;
                *xgmej = folfj;
                break;
             }
}
        long lpfca, jivai, xgmej;
        scanf(""%ld"", &lpfca);
        khaqa(lpfca, &jivai, &xgmej);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", lpfca, jivai, xgmej);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
224,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void fguyw(long ugjpz, long *fheyt, long *phfle)
        ohbcs (!(0 != ugjpz)) {
          *fheyt = 1;
          *phfle = 0;
        } else ohbcs (!(1 != ugjpz)) {
          *fheyt = 1;
          *phfle = 1;
        } else {
          long fhgec = 2;
          for (; 1; fhgec++) {
             ohbcs (!(0 != ugjpz %fhgec)) {
                *fheyt = ugjpz / fhgec;
                *phfle = fhgec;
                break;
             }
}
        long ugjpz, fheyt, phfle;
        scanf(""%ld"", &ugjpz);
        fguyw(ugjpz, &fheyt, &phfle);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ugjpz, fheyt, phfle);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
225,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void ydcnu(long kczwu, long* zahl1, long* zahl2)
fuics(!(0 != kczwu)) {
        *zahl1 = 1;
        *zahl2 = kczwu;
    } else fuics(!(1 != kczwu)) {
        *zahl1 = 1;
        *zahl2 = kczwu;
    } else {
        int ashgw = kczwu/2;
        while (!(0 >= ashgw)) {
            fuics(!(0 == kczwu%ashgw)) {
                continue;
            } else {
                *zahl1 = ashgw;
                *zahl2 = kczwu/ashgw;
                break;
                        }
	ashgw--;
        }
    long kczwu = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &kczwu);
    ydcnu(kczwu,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",kczwu, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
226,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void qwgos(long ujbsb, long* zahl1, long* zahl2)
twdok(!(0 != ujbsb)) {
        *zahl1 = 1;
        *zahl2 = ujbsb;
    } else twdok(!(1 != ujbsb)) {
        *zahl1 = 1;
        *zahl2 = ujbsb;
    } else {
        int fvbgn = ujbsb/2;
        while (!(0 >= fvbgn)) {
            twdok(!(0 == ujbsb%fvbgn)) {
                continue;
            } else {
                *zahl1 = fvbgn;
                *zahl2 = ujbsb/fvbgn;
                break;
                        }
	fvbgn--;
        }
    long ujbsb = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ujbsb);
    qwgos(ujbsb,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ujbsb, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
227,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void wllcl(long nxyid, long* zahl1, long* zahl2)
cjtgt(!(0 != nxyid)) {
        *zahl1 = 1;
        *zahl2 = nxyid;
    } else cjtgt(!(1 != nxyid)) {
        *zahl1 = 1;
        *zahl2 = nxyid;
    } else {
        int wtvfn = nxyid/2;
        while (!(0 >= wtvfn)) {
            cjtgt(!(0 == nxyid%wtvfn)) {
                continue;
            } else {
                *zahl1 = wtvfn;
                *zahl2 = nxyid/wtvfn;
                break;
                        }
	wtvfn--;
        }
    long nxyid = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &nxyid);
    wllcl(nxyid,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",nxyid, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
228,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void uveck(long itvpn, long* zahl1, long* zahl2)
znudg(!(0 != itvpn)) {
        *zahl1 = 1;
        *zahl2 = itvpn;
    } else znudg(!(1 != itvpn)) {
        *zahl1 = 1;
        *zahl2 = itvpn;
    } else {
        int ohhdp = itvpn/2;
        while (!(0 >= ohhdp)) {
            znudg(!(0 == itvpn%ohhdp)) {
                continue;
            } else {
                *zahl1 = ohhdp;
                *zahl2 = itvpn/ohhdp;
                break;
                        }
	ohhdp--;
        }
    long itvpn = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &itvpn);
    uveck(itvpn,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",itvpn, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
229,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void dsbjx(long qedqw, long* zahl1, long* zahl2)
ruuqq(!(0 != qedqw)) {
        *zahl1 = 1;
        *zahl2 = qedqw;
    } else ruuqq(!(1 != qedqw)) {
        *zahl1 = 1;
        *zahl2 = qedqw;
    } else {
        int gomok = qedqw/2;
        while (!(0 >= gomok)) {
            ruuqq(!(0 == qedqw%gomok)) {
                continue;
            } else {
                *zahl1 = gomok;
                *zahl2 = qedqw/gomok;
                break;
                        }
	gomok--;
        }
    long qedqw = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &qedqw);
    dsbjx(qedqw,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",qedqw, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
230,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void mjsbi(long kjnjw, long* zahl1, long* zahl2)
uirmo(!(0 != kjnjw)) {
        *zahl1 = 1;
        *zahl2 = kjnjw;
    } else uirmo(!(1 != kjnjw)) {
        *zahl1 = 1;
        *zahl2 = kjnjw;
    } else {
        int axnwf = kjnjw/2;
        while (!(0 >= axnwf)) {
            uirmo(!(0 == kjnjw%axnwf)) {
                continue;
            } else {
                *zahl1 = axnwf;
                *zahl2 = kjnjw/axnwf;
                break;
                        }
	axnwf--;
        }
    long kjnjw = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &kjnjw);
    mjsbi(kjnjw,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",kjnjw, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
231,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void hygua(long wlzmz, long* zahl1, long* zahl2)
potws(!(0 != wlzmz)) {
        *zahl1 = 1;
        *zahl2 = wlzmz;
    } else potws(!(1 != wlzmz)) {
        *zahl1 = 1;
        *zahl2 = wlzmz;
    } else {
        int cirsv = wlzmz/2;
        while (!(0 >= cirsv)) {
            potws(!(0 == wlzmz%cirsv)) {
                continue;
            } else {
                *zahl1 = cirsv;
                *zahl2 = wlzmz/cirsv;
                break;
                        }
	cirsv--;
        }
    long wlzmz = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &wlzmz);
    hygua(wlzmz,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",wlzmz, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
232,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void tvnhv(long crflf, long* zahl1, long* zahl2)
wjtzu(!(0 != crflf)) {
        *zahl1 = 1;
        *zahl2 = crflf;
    } else wjtzu(!(1 != crflf)) {
        *zahl1 = 1;
        *zahl2 = crflf;
    } else {
        int onbwa = crflf/2;
        while (!(0 >= onbwa)) {
            wjtzu(!(0 == crflf%onbwa)) {
                continue;
            } else {
                *zahl1 = onbwa;
                *zahl2 = crflf/onbwa;
                break;
                        }
	onbwa--;
        }
    long crflf = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &crflf);
    tvnhv(crflf,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",crflf, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
233,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void bvzfk(long xfmbn, long* zahl1, long* zahl2)
vfdwx(!(0 != xfmbn)) {
        *zahl1 = 1;
        *zahl2 = xfmbn;
    } else vfdwx(!(1 != xfmbn)) {
        *zahl1 = 1;
        *zahl2 = xfmbn;
    } else {
        int nzioy = xfmbn/2;
        while (!(0 >= nzioy)) {
            vfdwx(!(0 == xfmbn%nzioy)) {
                continue;
            } else {
                *zahl1 = nzioy;
                *zahl2 = xfmbn/nzioy;
                break;
                        }
	nzioy--;
        }
    long xfmbn = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &xfmbn);
    bvzfk(xfmbn,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",xfmbn, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
234,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void szuwo(long tggfi, long* zahl1, long* zahl2)
gzomv(!(0 != tggfi)) {
        *zahl1 = 1;
        *zahl2 = tggfi;
    } else gzomv(!(1 != tggfi)) {
        *zahl1 = 1;
        *zahl2 = tggfi;
    } else {
        int vqxda = tggfi/2;
        while (!(0 >= vqxda)) {
            gzomv(!(0 == tggfi%vqxda)) {
                continue;
            } else {
                *zahl1 = vqxda;
                *zahl2 = tggfi/vqxda;
                break;
                        }
	vqxda--;
        }
    long tggfi = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &tggfi);
    szuwo(tggfi,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",tggfi, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
235,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void llibx(long xowgg, long* zahl1, long* zahl2)
okjro(!(0 != xowgg)) {
        *zahl1 = 1;
        *zahl2 = xowgg;
    } else okjro(!(1 != xowgg)) {
        *zahl1 = 1;
        *zahl2 = xowgg;
    } else {
        int pijtz = xowgg/2;
        while (!(0 >= pijtz)) {
            okjro(!(0 == xowgg%pijtz)) {
                continue;
            } else {
                *zahl1 = pijtz;
                *zahl2 = xowgg/pijtz;
                break;
                        }
	pijtz--;
        }
    long xowgg = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &xowgg);
    llibx(xowgg,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",xowgg, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
236,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void qjysn(long vvwne, long* zahl1, long* zahl2)
hsaeg(!(0 != vvwne)) {
        *zahl1 = 1;
        *zahl2 = vvwne;
    } else hsaeg(!(1 != vvwne)) {
        *zahl1 = 1;
        *zahl2 = vvwne;
    } else {
        int xdiki = vvwne/2;
        while (!(0 >= xdiki)) {
            hsaeg(!(0 == vvwne%xdiki)) {
                continue;
            } else {
                *zahl1 = xdiki;
                *zahl2 = vvwne/xdiki;
                break;
                        }
	xdiki--;
        }
    long vvwne = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &vvwne);
    qjysn(vvwne,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",vvwne, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
237,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void pdpms(long igegl, long* zahl1, long* zahl2)
sjbie(!(0 != igegl)) {
        *zahl1 = 1;
        *zahl2 = igegl;
    } else sjbie(!(1 != igegl)) {
        *zahl1 = 1;
        *zahl2 = igegl;
    } else {
        int lpepv = igegl/2;
        while (!(0 >= lpepv)) {
            sjbie(!(0 == igegl%lpepv)) {
                continue;
            } else {
                *zahl1 = lpepv;
                *zahl2 = igegl/lpepv;
                break;
                        }
	lpepv--;
        }
    long igegl = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &igegl);
    pdpms(igegl,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",igegl, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
238,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void jlxed(long sedwi, long* zahl1, long* zahl2)
mmeue(!(0 != sedwi)) {
        *zahl1 = 1;
        *zahl2 = sedwi;
    } else mmeue(!(1 != sedwi)) {
        *zahl1 = 1;
        *zahl2 = sedwi;
    } else {
        int ravmo = sedwi/2;
        while (!(0 >= ravmo)) {
            mmeue(!(0 == sedwi%ravmo)) {
                continue;
            } else {
                *zahl1 = ravmo;
                *zahl2 = sedwi/ravmo;
                break;
                        }
	ravmo--;
        }
    long sedwi = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &sedwi);
    jlxed(sedwi,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",sedwi, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
239,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void thfts(long gxvms, long* zahl1, long* zahl2)
eqbqg(!(0 != gxvms)) {
        *zahl1 = 1;
        *zahl2 = gxvms;
    } else eqbqg(!(1 != gxvms)) {
        *zahl1 = 1;
        *zahl2 = gxvms;
    } else {
        int ujsaq = gxvms/2;
        while (!(0 >= ujsaq)) {
            eqbqg(!(0 == gxvms%ujsaq)) {
                continue;
            } else {
                *zahl1 = ujsaq;
                *zahl2 = gxvms/ujsaq;
                break;
                        }
	ujsaq--;
        }
    long gxvms = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &gxvms);
    thfts(gxvms,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",gxvms, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
240,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void pvjby(long chbap, long *jcwrc, long *kzaht)
	if(!(0 && chbap == 1 == chbap))
	{
		*jcwrc = 1; *kzaht = chbap;
	else
	{
		long thgkp = chbap/2;
		thgkp;
		while (!(0 == chbap % thgkp))
		{
			thgkp--;
		*jcwrc = thgkp;
		*kzaht = chbap/thgkp;
	}
}
	long chbap;
	long dklaj;
	long zovou;
	scanf(""%ld"", &chbap);
	pvjby(chbap, &dklaj, &zovou);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", chbap, dklaj, zovou);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
241,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void rtlni(long ndxhl, long *jjdvw, long *inbsw)
	if(!(0 && ndxhl == 1 == ndxhl))
	{
		*jjdvw = 1; *inbsw = ndxhl;
	else
	{
		long ceuvg = ndxhl/2;
		ceuvg;
		while (!(0 == ndxhl % ceuvg))
		{
			ceuvg--;
		*jjdvw = ceuvg;
		*inbsw = ndxhl/ceuvg;
	}
}
	long ndxhl;
	long uvlsn;
	long xhyro;
	scanf(""%ld"", &ndxhl);
	rtlni(ndxhl, &uvlsn, &xhyro);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ndxhl, uvlsn, xhyro);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
242,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void uxqpc(long aigho, long *czjmq, long *tpvpr)
	if(!(0 && aigho == 1 == aigho))
	{
		*czjmq = 1; *tpvpr = aigho;
	else
	{
		long llbya = aigho/2;
		llbya;
		while (!(0 == aigho % llbya))
		{
			llbya--;
		*czjmq = llbya;
		*tpvpr = aigho/llbya;
	}
}
	long aigho;
	long asxwm;
	long avchz;
	scanf(""%ld"", &aigho);
	uxqpc(aigho, &asxwm, &avchz);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", aigho, asxwm, avchz);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
243,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void elyjd(long gokgj, long *ohvrt, long *tuthz)
	if(!(0 && gokgj == 1 == gokgj))
	{
		*ohvrt = 1; *tuthz = gokgj;
	else
	{
		long imxdt = gokgj/2;
		imxdt;
		while (!(0 == gokgj % imxdt))
		{
			imxdt--;
		*ohvrt = imxdt;
		*tuthz = gokgj/imxdt;
	}
}
	long gokgj;
	long zcdsp;
	long skojh;
	scanf(""%ld"", &gokgj);
	elyjd(gokgj, &zcdsp, &skojh);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", gokgj, zcdsp, skojh);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
244,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void lemag(long xdggk, long *cvmks, long *qfyks)
	if(!(0 && xdggk == 1 == xdggk))
	{
		*cvmks = 1; *qfyks = xdggk;
	else
	{
		long gglcq = xdggk/2;
		gglcq;
		while (!(0 == xdggk % gglcq))
		{
			gglcq--;
		*cvmks = gglcq;
		*qfyks = xdggk/gglcq;
	}
}
	long xdggk;
	long qggiv;
	long arlig;
	scanf(""%ld"", &xdggk);
	lemag(xdggk, &qggiv, &arlig);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", xdggk, qggiv, arlig);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
245,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void augme(long etrxr, long *poivt, long *mzgdw)
	if(!(0 && etrxr == 1 == etrxr))
	{
		*poivt = 1; *mzgdw = etrxr;
	else
	{
		long otwog = etrxr/2;
		otwog;
		while (!(0 == etrxr % otwog))
		{
			otwog--;
		*poivt = otwog;
		*mzgdw = etrxr/otwog;
	}
}
	long etrxr;
	long jjswu;
	long tsdxi;
	scanf(""%ld"", &etrxr);
	augme(etrxr, &jjswu, &tsdxi);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", etrxr, jjswu, tsdxi);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
246,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void npowi(long zcquc, long *cxbfo, long *rxnfw)
	if(!(0 && zcquc == 1 == zcquc))
	{
		*cxbfo = 1; *rxnfw = zcquc;
	else
	{
		long ivfap = zcquc/2;
		ivfap;
		while (!(0 == zcquc % ivfap))
		{
			ivfap--;
		*cxbfo = ivfap;
		*rxnfw = zcquc/ivfap;
	}
}
	long zcquc;
	long sxvcr;
	long dopge;
	scanf(""%ld"", &zcquc);
	npowi(zcquc, &sxvcr, &dopge);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zcquc, sxvcr, dopge);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
247,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void yppqx(long eotxx, long *xrkgr, long *yipea)
	if(!(0 && eotxx == 1 == eotxx))
	{
		*xrkgr = 1; *yipea = eotxx;
	else
	{
		long jozzt = eotxx/2;
		jozzt;
		while (!(0 == eotxx % jozzt))
		{
			jozzt--;
		*xrkgr = jozzt;
		*yipea = eotxx/jozzt;
	}
}
	long eotxx;
	long qqvgu;
	long qysny;
	scanf(""%ld"", &eotxx);
	yppqx(eotxx, &qqvgu, &qysny);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eotxx, qqvgu, qysny);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
248,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void lthgl(long teswa, long *iehvq, long *qpgup)
	if(!(0 && teswa == 1 == teswa))
	{
		*iehvq = 1; *qpgup = teswa;
	else
	{
		long nnpbz = teswa/2;
		nnpbz;
		while (!(0 == teswa % nnpbz))
		{
			nnpbz--;
		*iehvq = nnpbz;
		*qpgup = teswa/nnpbz;
	}
}
	long teswa;
	long zrpfp;
	long xwddh;
	scanf(""%ld"", &teswa);
	lthgl(teswa, &zrpfp, &xwddh);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", teswa, zrpfp, xwddh);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
249,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void qxmya(long cvzyr, long *trsmj, long *copyv)
	if(!(0 && cvzyr == 1 == cvzyr))
	{
		*trsmj = 1; *copyv = cvzyr;
	else
	{
		long wukth = cvzyr/2;
		wukth;
		while (!(0 == cvzyr % wukth))
		{
			wukth--;
		*trsmj = wukth;
		*copyv = cvzyr/wukth;
	}
}
	long cvzyr;
	long mxinz;
	long upips;
	scanf(""%ld"", &cvzyr);
	qxmya(cvzyr, &mxinz, &upips);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", cvzyr, mxinz, upips);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
250,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void hpmex(long yziuc, long *milnq, long *hthef)
	if(!(0 && yziuc == 1 == yziuc))
	{
		*milnq = 1; *hthef = yziuc;
	else
	{
		long hblyr = yziuc/2;
		hblyr;
		while (!(0 == yziuc % hblyr))
		{
			hblyr--;
		*milnq = hblyr;
		*hthef = yziuc/hblyr;
	}
}
	long yziuc;
	long uhkap;
	long wkuom;
	scanf(""%ld"", &yziuc);
	hpmex(yziuc, &uhkap, &wkuom);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", yziuc, uhkap, wkuom);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
251,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void mtztd(long jweeq, long *vxnik, long *lkwxu)
	if(!(0 && jweeq == 1 == jweeq))
	{
		*vxnik = 1; *lkwxu = jweeq;
	else
	{
		long uqcpa = jweeq/2;
		uqcpa;
		while (!(0 == jweeq % uqcpa))
		{
			uqcpa--;
		*vxnik = uqcpa;
		*lkwxu = jweeq/uqcpa;
	}
}
	long jweeq;
	long bbzmm;
	long vpubq;
	scanf(""%ld"", &jweeq);
	mtztd(jweeq, &bbzmm, &vpubq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", jweeq, bbzmm, vpubq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
252,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void jponn(long gqqqb, long *gqfev, long *kbkhn)
	if(!(0 && gqqqb == 1 == gqqqb))
	{
		*gqfev = 1; *kbkhn = gqqqb;
	else
	{
		long sqnrj = gqqqb/2;
		sqnrj;
		while (!(0 == gqqqb % sqnrj))
		{
			sqnrj--;
		*gqfev = sqnrj;
		*kbkhn = gqqqb/sqnrj;
	}
}
	long gqqqb;
	long ukdkg;
	long eefvl;
	scanf(""%ld"", &gqqqb);
	jponn(gqqqb, &ukdkg, &eefvl);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", gqqqb, ukdkg, eefvl);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
253,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void tapbj(long tdtaq, long *nrxyv, long *qlctx)
	if(!(0 && tdtaq == 1 == tdtaq))
	{
		*nrxyv = 1; *qlctx = tdtaq;
	else
	{
		long maqto = tdtaq/2;
		maqto;
		while (!(0 == tdtaq % maqto))
		{
			maqto--;
		*nrxyv = maqto;
		*qlctx = tdtaq/maqto;
	}
}
	long tdtaq;
	long ywxyg;
	long mezdu;
	scanf(""%ld"", &tdtaq);
	tapbj(tdtaq, &ywxyg, &mezdu);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", tdtaq, ywxyg, mezdu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
254,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void tuwxp(long wkdla, long *yeefl, long *ieftg)
	if(!(0 && wkdla == 1 == wkdla))
	{
		*yeefl = 1; *ieftg = wkdla;
	else
	{
		long tvchx = wkdla/2;
		tvchx;
		while (!(0 == wkdla % tvchx))
		{
			tvchx--;
		*yeefl = tvchx;
		*ieftg = wkdla/tvchx;
	}
}
	long wkdla;
	long fwtka;
	long fotic;
	scanf(""%ld"", &wkdla);
	tuwxp(wkdla, &fwtka, &fotic);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", wkdla, fwtka, fotic);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
255,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void omquz(long vmsms, long* factor1, long* factor2)
fwlsb(!(0 != vmsms)) {
        *factor1 = 1;
        *factor2 = vmsms;
    } else fwlsb(!(1 != vmsms)) {
        *factor1 = 1;
        *factor2 = vmsms;
    } else {
        int sedzg = vmsms/2;
        while (!(0 >= sedzg)) {
            fwlsb(!(0 == vmsms%sedzg)) {
                continue;
            } else {
                *factor1 = sedzg;
                *factor2 = vmsms/sedzg;
                break;
                        }
	sedzg--;
        }
    long vmsms = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &vmsms);
    omquz(vmsms,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",vmsms, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
256,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void ojkhq(long ylojy, long* factor1, long* factor2)
rzthb(!(0 != ylojy)) {
        *factor1 = 1;
        *factor2 = ylojy;
    } else rzthb(!(1 != ylojy)) {
        *factor1 = 1;
        *factor2 = ylojy;
    } else {
        int clakm = ylojy/2;
        while (!(0 >= clakm)) {
            rzthb(!(0 == ylojy%clakm)) {
                continue;
            } else {
                *factor1 = clakm;
                *factor2 = ylojy/clakm;
                break;
                        }
	clakm--;
        }
    long ylojy = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ylojy);
    ojkhq(ylojy,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ylojy, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
257,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void bmwhr(long nmvrc, long* factor1, long* factor2)
crrwi(!(0 != nmvrc)) {
        *factor1 = 1;
        *factor2 = nmvrc;
    } else crrwi(!(1 != nmvrc)) {
        *factor1 = 1;
        *factor2 = nmvrc;
    } else {
        int kpofb = nmvrc/2;
        while (!(0 >= kpofb)) {
            crrwi(!(0 == nmvrc%kpofb)) {
                continue;
            } else {
                *factor1 = kpofb;
                *factor2 = nmvrc/kpofb;
                break;
                        }
	kpofb--;
        }
    long nmvrc = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &nmvrc);
    bmwhr(nmvrc,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",nmvrc, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
258,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void ggrdv(long nmlxa, long* factor1, long* factor2)
nvmdv(!(0 != nmlxa)) {
        *factor1 = 1;
        *factor2 = nmlxa;
    } else nvmdv(!(1 != nmlxa)) {
        *factor1 = 1;
        *factor2 = nmlxa;
    } else {
        int xgiyq = nmlxa/2;
        while (!(0 >= xgiyq)) {
            nvmdv(!(0 == nmlxa%xgiyq)) {
                continue;
            } else {
                *factor1 = xgiyq;
                *factor2 = nmlxa/xgiyq;
                break;
                        }
	xgiyq--;
        }
    long nmlxa = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &nmlxa);
    ggrdv(nmlxa,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",nmlxa, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
259,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void jtzlr(long mpbkg, long* factor1, long* factor2)
uqomt(!(0 != mpbkg)) {
        *factor1 = 1;
        *factor2 = mpbkg;
    } else uqomt(!(1 != mpbkg)) {
        *factor1 = 1;
        *factor2 = mpbkg;
    } else {
        int tsgjp = mpbkg/2;
        while (!(0 >= tsgjp)) {
            uqomt(!(0 == mpbkg%tsgjp)) {
                continue;
            } else {
                *factor1 = tsgjp;
                *factor2 = mpbkg/tsgjp;
                break;
                        }
	tsgjp--;
        }
    long mpbkg = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &mpbkg);
    jtzlr(mpbkg,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",mpbkg, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
260,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void qlkfm(long dnmds, long* factor1, long* factor2)
jlvxd(!(0 != dnmds)) {
        *factor1 = 1;
        *factor2 = dnmds;
    } else jlvxd(!(1 != dnmds)) {
        *factor1 = 1;
        *factor2 = dnmds;
    } else {
        int djipl = dnmds/2;
        while (!(0 >= djipl)) {
            jlvxd(!(0 == dnmds%djipl)) {
                continue;
            } else {
                *factor1 = djipl;
                *factor2 = dnmds/djipl;
                break;
                        }
	djipl--;
        }
    long dnmds = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &dnmds);
    qlkfm(dnmds,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",dnmds, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
261,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void qxmqp(long lkmah, long* factor1, long* factor2)
umcut(!(0 != lkmah)) {
        *factor1 = 1;
        *factor2 = lkmah;
    } else umcut(!(1 != lkmah)) {
        *factor1 = 1;
        *factor2 = lkmah;
    } else {
        int pkvrh = lkmah/2;
        while (!(0 >= pkvrh)) {
            umcut(!(0 == lkmah%pkvrh)) {
                continue;
            } else {
                *factor1 = pkvrh;
                *factor2 = lkmah/pkvrh;
                break;
                        }
	pkvrh--;
        }
    long lkmah = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &lkmah);
    qxmqp(lkmah,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",lkmah, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
262,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void zkkjl(long yfdrs, long* factor1, long* factor2)
pblbm(!(0 != yfdrs)) {
        *factor1 = 1;
        *factor2 = yfdrs;
    } else pblbm(!(1 != yfdrs)) {
        *factor1 = 1;
        *factor2 = yfdrs;
    } else {
        int msxym = yfdrs/2;
        while (!(0 >= msxym)) {
            pblbm(!(0 == yfdrs%msxym)) {
                continue;
            } else {
                *factor1 = msxym;
                *factor2 = yfdrs/msxym;
                break;
                        }
	msxym--;
        }
    long yfdrs = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &yfdrs);
    zkkjl(yfdrs,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",yfdrs, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
263,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void urcjc(long cyksc, long* factor1, long* factor2)
fgxlu(!(0 != cyksc)) {
        *factor1 = 1;
        *factor2 = cyksc;
    } else fgxlu(!(1 != cyksc)) {
        *factor1 = 1;
        *factor2 = cyksc;
    } else {
        int vfhtu = cyksc/2;
        while (!(0 >= vfhtu)) {
            fgxlu(!(0 == cyksc%vfhtu)) {
                continue;
            } else {
                *factor1 = vfhtu;
                *factor2 = cyksc/vfhtu;
                break;
                        }
	vfhtu--;
        }
    long cyksc = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &cyksc);
    urcjc(cyksc,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",cyksc, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
264,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void thhxz(long psrfh, long* factor1, long* factor2)
gucta(!(0 != psrfh)) {
        *factor1 = 1;
        *factor2 = psrfh;
    } else gucta(!(1 != psrfh)) {
        *factor1 = 1;
        *factor2 = psrfh;
    } else {
        int xlfgp = psrfh/2;
        while (!(0 >= xlfgp)) {
            gucta(!(0 == psrfh%xlfgp)) {
                continue;
            } else {
                *factor1 = xlfgp;
                *factor2 = psrfh/xlfgp;
                break;
                        }
	xlfgp--;
        }
    long psrfh = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &psrfh);
    thhxz(psrfh,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",psrfh, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
265,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void nquxg(long kgydx, long* factor1, long* factor2)
wwowi(!(0 != kgydx)) {
        *factor1 = 1;
        *factor2 = kgydx;
    } else wwowi(!(1 != kgydx)) {
        *factor1 = 1;
        *factor2 = kgydx;
    } else {
        int zpobb = kgydx/2;
        while (!(0 >= zpobb)) {
            wwowi(!(0 == kgydx%zpobb)) {
                continue;
            } else {
                *factor1 = zpobb;
                *factor2 = kgydx/zpobb;
                break;
                        }
	zpobb--;
        }
    long kgydx = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &kgydx);
    nquxg(kgydx,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",kgydx, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
266,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void qvnmv(long lyjcx, long* factor1, long* factor2)
xtltv(!(0 != lyjcx)) {
        *factor1 = 1;
        *factor2 = lyjcx;
    } else xtltv(!(1 != lyjcx)) {
        *factor1 = 1;
        *factor2 = lyjcx;
    } else {
        int mdkho = lyjcx/2;
        while (!(0 >= mdkho)) {
            xtltv(!(0 == lyjcx%mdkho)) {
                continue;
            } else {
                *factor1 = mdkho;
                *factor2 = lyjcx/mdkho;
                break;
                        }
	mdkho--;
        }
    long lyjcx = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &lyjcx);
    qvnmv(lyjcx,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",lyjcx, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
267,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void omswf(long cltpj, long* factor1, long* factor2)
yswsw(!(0 != cltpj)) {
        *factor1 = 1;
        *factor2 = cltpj;
    } else yswsw(!(1 != cltpj)) {
        *factor1 = 1;
        *factor2 = cltpj;
    } else {
        int ermaa = cltpj/2;
        while (!(0 >= ermaa)) {
            yswsw(!(0 == cltpj%ermaa)) {
                continue;
            } else {
                *factor1 = ermaa;
                *factor2 = cltpj/ermaa;
                break;
                        }
	ermaa--;
        }
    long cltpj = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &cltpj);
    omswf(cltpj,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",cltpj, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
268,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void wonbz(long yozcd, long* factor1, long* factor2)
jbgjc(!(0 != yozcd)) {
        *factor1 = 1;
        *factor2 = yozcd;
    } else jbgjc(!(1 != yozcd)) {
        *factor1 = 1;
        *factor2 = yozcd;
    } else {
        int krprs = yozcd/2;
        while (!(0 >= krprs)) {
            jbgjc(!(0 == yozcd%krprs)) {
                continue;
            } else {
                *factor1 = krprs;
                *factor2 = yozcd/krprs;
                break;
                        }
	krprs--;
        }
    long yozcd = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &yozcd);
    wonbz(yozcd,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",yozcd, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
269,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void uswtp(long zhbet, long* factor1, long* factor2)
unfgz(!(0 != zhbet)) {
        *factor1 = 1;
        *factor2 = zhbet;
    } else unfgz(!(1 != zhbet)) {
        *factor1 = 1;
        *factor2 = zhbet;
    } else {
        int ymfhv = zhbet/2;
        while (!(0 >= ymfhv)) {
            unfgz(!(0 == zhbet%ymfhv)) {
                continue;
            } else {
                *factor1 = ymfhv;
                *factor2 = zhbet/ymfhv;
                break;
                        }
	ymfhv--;
        }
    long zhbet = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &zhbet);
    uswtp(zhbet,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",zhbet, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
270,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void dkdmr(long etkfi, long *mbydy, long *seeha)
    int hcmns=etkfi/2;
    if(!(1 != etkfi))
    {
        *mbydy=1;
        *seeha=1;
        return ;
        if0 == etkfi=0)
    {
        *mbydy=1;
        *seeha=etkfi/ *mbydy;
        return;
       0 == etkfi%22==0)
    {
        *mbydy=2;
        *seeha=etkfi/ *mbydy;
    }
    else
    {
        *mbydy=2;
        f0 != etkfi% *mbydyydy!=0; *mbydy=etkfi/ *seeha)
        {
            hcmns=(hcmns-1);
            *seeha=hcmns;
        }
    }
}
int main()
{
    long vmsng, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&vmsng);
    dkdmr(vmsng, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", vmsng, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
271,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void mlgur(long pmatw, long *vvrun, long *hygqq)
    int qvnnx=pmatw/2;
    if(!(1 != pmatw))
    {
        *vvrun=1;
        *hygqq=1;
        return ;
        if0 == pmatw=0)
    {
        *vvrun=1;
        *hygqq=pmatw/ *vvrun;
        return;
       0 == pmatw%22==0)
    {
        *vvrun=2;
        *hygqq=pmatw/ *vvrun;
    }
    else
    {
        *vvrun=2;
        f0 != pmatw% *vvrunrun!=0; *vvrun=pmatw/ *hygqq)
        {
            qvnnx=(qvnnx-1);
            *hygqq=qvnnx;
        }
    }
}
int main()
{
    long ttduj, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&ttduj);
    mlgur(ttduj, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", ttduj, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
272,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void jrctp(long wiszm, long *sgxlt, long *eycod)
    int fsbwb=wiszm/2;
    if(!(1 != wiszm))
    {
        *sgxlt=1;
        *eycod=1;
        return ;
        if0 == wiszm=0)
    {
        *sgxlt=1;
        *eycod=wiszm/ *sgxlt;
        return;
       0 == wiszm%22==0)
    {
        *sgxlt=2;
        *eycod=wiszm/ *sgxlt;
    }
    else
    {
        *sgxlt=2;
        f0 != wiszm% *sgxltxlt!=0; *sgxlt=wiszm/ *eycod)
        {
            fsbwb=(fsbwb-1);
            *eycod=fsbwb;
        }
    }
}
int main()
{
    long xpkcj, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&xpkcj);
    jrctp(xpkcj, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", xpkcj, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
273,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void azrki(long gasjw, long *zcgcg, long *nhdaz)
    int hutim=gasjw/2;
    if(!(1 != gasjw))
    {
        *zcgcg=1;
        *nhdaz=1;
        return ;
        if0 == gasjw=0)
    {
        *zcgcg=1;
        *nhdaz=gasjw/ *zcgcg;
        return;
       0 == gasjw%22==0)
    {
        *zcgcg=2;
        *nhdaz=gasjw/ *zcgcg;
    }
    else
    {
        *zcgcg=2;
        f0 != gasjw% *zcgcggcg!=0; *zcgcg=gasjw/ *nhdaz)
        {
            hutim=(hutim-1);
            *nhdaz=hutim;
        }
    }
}
int main()
{
    long zwtmv, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&zwtmv);
    azrki(zwtmv, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", zwtmv, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
274,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void aqhcw(long qopyn, long *trhww, long *qygfi)
    int pbbiw=qopyn/2;
    if(!(1 != qopyn))
    {
        *trhww=1;
        *qygfi=1;
        return ;
        if0 == qopyn=0)
    {
        *trhww=1;
        *qygfi=qopyn/ *trhww;
        return;
       0 == qopyn%22==0)
    {
        *trhww=2;
        *qygfi=qopyn/ *trhww;
    }
    else
    {
        *trhww=2;
        f0 != qopyn% *trhwwhww!=0; *trhww=qopyn/ *qygfi)
        {
            pbbiw=(pbbiw-1);
            *qygfi=pbbiw;
        }
    }
}
int main()
{
    long iylnw, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&iylnw);
    aqhcw(iylnw, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", iylnw, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
275,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void ozjua(long lzndf, long *njvou, long *syxqf)
    int azkrb=lzndf/2;
    if(!(1 != lzndf))
    {
        *njvou=1;
        *syxqf=1;
        return ;
        if0 == lzndf=0)
    {
        *njvou=1;
        *syxqf=lzndf/ *njvou;
        return;
       0 == lzndf%22==0)
    {
        *njvou=2;
        *syxqf=lzndf/ *njvou;
    }
    else
    {
        *njvou=2;
        f0 != lzndf% *njvouvou!=0; *njvou=lzndf/ *syxqf)
        {
            azkrb=(azkrb-1);
            *syxqf=azkrb;
        }
    }
}
int main()
{
    long szknf, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&szknf);
    ozjua(szknf, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", szknf, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
276,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void exgud(long lplzm, long *ffgnx, long *kwtwz)
    int yjzao=lplzm/2;
    if(!(1 != lplzm))
    {
        *ffgnx=1;
        *kwtwz=1;
        return ;
        if0 == lplzm=0)
    {
        *ffgnx=1;
        *kwtwz=lplzm/ *ffgnx;
        return;
       0 == lplzm%22==0)
    {
        *ffgnx=2;
        *kwtwz=lplzm/ *ffgnx;
    }
    else
    {
        *ffgnx=2;
        f0 != lplzm% *ffgnxgnx!=0; *ffgnx=lplzm/ *kwtwz)
        {
            yjzao=(yjzao-1);
            *kwtwz=yjzao;
        }
    }
}
int main()
{
    long ntwqq, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&ntwqq);
    exgud(ntwqq, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", ntwqq, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
277,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void tioqj(long hkiuf, long *tbsll, long *awsll)
    int iuhlf=hkiuf/2;
    if(!(1 != hkiuf))
    {
        *tbsll=1;
        *awsll=1;
        return ;
        if0 == hkiuf=0)
    {
        *tbsll=1;
        *awsll=hkiuf/ *tbsll;
        return;
       0 == hkiuf%22==0)
    {
        *tbsll=2;
        *awsll=hkiuf/ *tbsll;
    }
    else
    {
        *tbsll=2;
        f0 != hkiuf% *tbsllsll!=0; *tbsll=hkiuf/ *awsll)
        {
            iuhlf=(iuhlf-1);
            *awsll=iuhlf;
        }
    }
}
int main()
{
    long pqayo, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&pqayo);
    tioqj(pqayo, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", pqayo, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
278,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void yyejg(long xscol, long *jgpxc, long *jokhi)
    int sjfpo=xscol/2;
    if(!(1 != xscol))
    {
        *jgpxc=1;
        *jokhi=1;
        return ;
        if0 == xscol=0)
    {
        *jgpxc=1;
        *jokhi=xscol/ *jgpxc;
        return;
       0 == xscol%22==0)
    {
        *jgpxc=2;
        *jokhi=xscol/ *jgpxc;
    }
    else
    {
        *jgpxc=2;
        f0 != xscol% *jgpxcpxc!=0; *jgpxc=xscol/ *jokhi)
        {
            sjfpo=(sjfpo-1);
            *jokhi=sjfpo;
        }
    }
}
int main()
{
    long mfnqk, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&mfnqk);
    yyejg(mfnqk, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", mfnqk, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
279,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void cqmvd(long elndl, long *nhxhq, long *ydzwz)
    int exiwb=elndl/2;
    if(!(1 != elndl))
    {
        *nhxhq=1;
        *ydzwz=1;
        return ;
        if0 == elndl=0)
    {
        *nhxhq=1;
        *ydzwz=elndl/ *nhxhq;
        return;
       0 == elndl%22==0)
    {
        *nhxhq=2;
        *ydzwz=elndl/ *nhxhq;
    }
    else
    {
        *nhxhq=2;
        f0 != elndl% *nhxhqxhq!=0; *nhxhq=elndl/ *ydzwz)
        {
            exiwb=(exiwb-1);
            *ydzwz=exiwb;
        }
    }
}
int main()
{
    long txikr, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&txikr);
    cqmvd(txikr, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", txikr, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
280,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void byanv(long yyljj, long *hylcy, long *mnphe)
    int nilyy=yyljj/2;
    if(!(1 != yyljj))
    {
        *hylcy=1;
        *mnphe=1;
        return ;
        if0 == yyljj=0)
    {
        *hylcy=1;
        *mnphe=yyljj/ *hylcy;
        return;
       0 == yyljj%22==0)
    {
        *hylcy=2;
        *mnphe=yyljj/ *hylcy;
    }
    else
    {
        *hylcy=2;
        f0 != yyljj% *hylcylcy!=0; *hylcy=yyljj/ *mnphe)
        {
            nilyy=(nilyy-1);
            *mnphe=nilyy;
        }
    }
}
int main()
{
    long ulejx, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&ulejx);
    byanv(ulejx, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", ulejx, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
281,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void rnbgg(long yaepe, long *engkw, long *cfmwk)
    int ysbby=yaepe/2;
    if(!(1 != yaepe))
    {
        *engkw=1;
        *cfmwk=1;
        return ;
        if0 == yaepe=0)
    {
        *engkw=1;
        *cfmwk=yaepe/ *engkw;
        return;
       0 == yaepe%22==0)
    {
        *engkw=2;
        *cfmwk=yaepe/ *engkw;
    }
    else
    {
        *engkw=2;
        f0 != yaepe% *engkwgkw!=0; *engkw=yaepe/ *cfmwk)
        {
            ysbby=(ysbby-1);
            *cfmwk=ysbby;
        }
    }
}
int main()
{
    long iqnhb, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&iqnhb);
    rnbgg(iqnhb, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", iqnhb, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
282,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void tngkt(long xbjzz, long *khygf, long *xignj)
    int yxbru=xbjzz/2;
    if(!(1 != xbjzz))
    {
        *khygf=1;
        *xignj=1;
        return ;
        if0 == xbjzz=0)
    {
        *khygf=1;
        *xignj=xbjzz/ *khygf;
        return;
       0 == xbjzz%22==0)
    {
        *khygf=2;
        *xignj=xbjzz/ *khygf;
    }
    else
    {
        *khygf=2;
        f0 != xbjzz% *khygfygf!=0; *khygf=xbjzz/ *xignj)
        {
            yxbru=(yxbru-1);
            *xignj=yxbru;
        }
    }
}
int main()
{
    long wzflt, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&wzflt);
    tngkt(wzflt, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", wzflt, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
283,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void lwtwn(long sbzmd, long *cdquu, long *gjbji)
    int bwnuo=sbzmd/2;
    if(!(1 != sbzmd))
    {
        *cdquu=1;
        *gjbji=1;
        return ;
        if0 == sbzmd=0)
    {
        *cdquu=1;
        *gjbji=sbzmd/ *cdquu;
        return;
       0 == sbzmd%22==0)
    {
        *cdquu=2;
        *gjbji=sbzmd/ *cdquu;
    }
    else
    {
        *cdquu=2;
        f0 != sbzmd% *cdquuquu!=0; *cdquu=sbzmd/ *gjbji)
        {
            bwnuo=(bwnuo-1);
            *gjbji=bwnuo;
        }
    }
}
int main()
{
    long kxgfg, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&kxgfg);
    lwtwn(kxgfg, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", kxgfg, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
284,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void uwqui(long jxtqs, long *siqoi, long *rktbx)
    int ysaek=jxtqs/2;
    if(!(1 != jxtqs))
    {
        *siqoi=1;
        *rktbx=1;
        return ;
        if0 == jxtqs=0)
    {
        *siqoi=1;
        *rktbx=jxtqs/ *siqoi;
        return;
       0 == jxtqs%22==0)
    {
        *siqoi=2;
        *rktbx=jxtqs/ *siqoi;
    }
    else
    {
        *siqoi=2;
        f0 != jxtqs% *siqoiqoi!=0; *siqoi=jxtqs/ *rktbx)
        {
            ysaek=(ysaek-1);
            *rktbx=ysaek;
        }
    }
}
int main()
{
    long iugzz, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&iugzz);
    uwqui(iugzz, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", iugzz, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
285,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void hxcye(long awdaq, long *zixxr, long *hawkq)
    int wglau=awdaq/2;
    if(!(1 != awdaq))
    {
        *zixxr=1;
        *hawkq=1;
        return 0;
        if0 == awdaq=0)
    {
        *zixxr=1;
        *hawkq=awdaq/ *zixxr;
        return 0;
       0 == awdaq%22==0)
    {
        *zixxr=2;
        *hawkq=awdaq/ *zixxr;
    }
    else
    {
        *zixxr=2;
        f0 != awdaq% *zixxrxxr!=0; *zixxr=awdaq/ *hawkq)
        {
            wglau=(wglau-1);
            *hawkq=wglau;
        }
    }
}
int main()
{
    long yrwfh, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&yrwfh);
    hxcye(yrwfh, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", yrwfh, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
286,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void koywt(long fgvcl, long *gbolp, long *gtsws)
    int sapof=fgvcl/2;
    if(!(1 != fgvcl))
    {
        *gbolp=1;
        *gtsws=1;
        return 0;
        if0 == fgvcl=0)
    {
        *gbolp=1;
        *gtsws=fgvcl/ *gbolp;
        return 0;
       0 == fgvcl%22==0)
    {
        *gbolp=2;
        *gtsws=fgvcl/ *gbolp;
    }
    else
    {
        *gbolp=2;
        f0 != fgvcl% *gbolpolp!=0; *gbolp=fgvcl/ *gtsws)
        {
            sapof=(sapof-1);
            *gtsws=sapof;
        }
    }
}
int main()
{
    long raxix, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&raxix);
    koywt(raxix, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", raxix, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
287,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void gklnr(long uoucm, long *wskxl, long *ryaiv)
    int jcvfl=uoucm/2;
    if(!(1 != uoucm))
    {
        *wskxl=1;
        *ryaiv=1;
        return 0;
        if0 == uoucm=0)
    {
        *wskxl=1;
        *ryaiv=uoucm/ *wskxl;
        return 0;
       0 == uoucm%22==0)
    {
        *wskxl=2;
        *ryaiv=uoucm/ *wskxl;
    }
    else
    {
        *wskxl=2;
        f0 != uoucm% *wskxlkxl!=0; *wskxl=uoucm/ *ryaiv)
        {
            jcvfl=(jcvfl-1);
            *ryaiv=jcvfl;
        }
    }
}
int main()
{
    long epmam, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&epmam);
    gklnr(epmam, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", epmam, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
288,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void kvnbx(long shqtg, long *ualid, long *nmdzo)
    int pomkh=shqtg/2;
    if(!(1 != shqtg))
    {
        *ualid=1;
        *nmdzo=1;
        return 0;
        if0 == shqtg=0)
    {
        *ualid=1;
        *nmdzo=shqtg/ *ualid;
        return 0;
       0 == shqtg%22==0)
    {
        *ualid=2;
        *nmdzo=shqtg/ *ualid;
    }
    else
    {
        *ualid=2;
        f0 != shqtg% *ualidlid!=0; *ualid=shqtg/ *nmdzo)
        {
            pomkh=(pomkh-1);
            *nmdzo=pomkh;
        }
    }
}
int main()
{
    long eayny, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&eayny);
    kvnbx(eayny, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", eayny, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
289,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void avdui(long bdchm, long *afont, long *qqevt)
    int fhpyt=bdchm/2;
    if(!(1 != bdchm))
    {
        *afont=1;
        *qqevt=1;
        return 0;
        if0 == bdchm=0)
    {
        *afont=1;
        *qqevt=bdchm/ *afont;
        return 0;
       0 == bdchm%22==0)
    {
        *afont=2;
        *qqevt=bdchm/ *afont;
    }
    else
    {
        *afont=2;
        f0 != bdchm% *afontont!=0; *afont=bdchm/ *qqevt)
        {
            fhpyt=(fhpyt-1);
            *qqevt=fhpyt;
        }
    }
}
int main()
{
    long qsaft, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&qsaft);
    avdui(qsaft, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", qsaft, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
290,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void tjqtl(long takix, long *tiwck, long *qixfy)
    int hkibv=takix/2;
    if(!(1 != takix))
    {
        *tiwck=1;
        *qixfy=1;
        return 0;
        if0 == takix=0)
    {
        *tiwck=1;
        *qixfy=takix/ *tiwck;
        return 0;
       0 == takix%22==0)
    {
        *tiwck=2;
        *qixfy=takix/ *tiwck;
    }
    else
    {
        *tiwck=2;
        f0 != takix% *tiwckwck!=0; *tiwck=takix/ *qixfy)
        {
            hkibv=(hkibv-1);
            *qixfy=hkibv;
        }
    }
}
int main()
{
    long ccbww, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&ccbww);
    tjqtl(ccbww, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", ccbww, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
291,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void xgndm(long vnsmz, long *aqtfb, long *sbakb)
    int pbqct=vnsmz/2;
    if(!(1 != vnsmz))
    {
        *aqtfb=1;
        *sbakb=1;
        return 0;
        if0 == vnsmz=0)
    {
        *aqtfb=1;
        *sbakb=vnsmz/ *aqtfb;
        return 0;
       0 == vnsmz%22==0)
    {
        *aqtfb=2;
        *sbakb=vnsmz/ *aqtfb;
    }
    else
    {
        *aqtfb=2;
        f0 != vnsmz% *aqtfbtfb!=0; *aqtfb=vnsmz/ *sbakb)
        {
            pbqct=(pbqct-1);
            *sbakb=pbqct;
        }
    }
}
int main()
{
    long nmsuo, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&nmsuo);
    xgndm(nmsuo, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", nmsuo, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
292,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void qzius(long yozmg, long *gzyte, long *xumit)
    int zaluy=yozmg/2;
    if(!(1 != yozmg))
    {
        *gzyte=1;
        *xumit=1;
        return 0;
        if0 == yozmg=0)
    {
        *gzyte=1;
        *xumit=yozmg/ *gzyte;
        return 0;
       0 == yozmg%22==0)
    {
        *gzyte=2;
        *xumit=yozmg/ *gzyte;
    }
    else
    {
        *gzyte=2;
        f0 != yozmg% *gzyteyte!=0; *gzyte=yozmg/ *xumit)
        {
            zaluy=(zaluy-1);
            *xumit=zaluy;
        }
    }
}
int main()
{
    long emrlp, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&emrlp);
    qzius(emrlp, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", emrlp, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
293,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void nkjyw(long hqovf, long *mfyws, long *jghnf)
    int xqntd=hqovf/2;
    if(!(1 != hqovf))
    {
        *mfyws=1;
        *jghnf=1;
        return 0;
        if0 == hqovf=0)
    {
        *mfyws=1;
        *jghnf=hqovf/ *mfyws;
        return 0;
       0 == hqovf%22==0)
    {
        *mfyws=2;
        *jghnf=hqovf/ *mfyws;
    }
    else
    {
        *mfyws=2;
        f0 != hqovf% *mfywsyws!=0; *mfyws=hqovf/ *jghnf)
        {
            xqntd=(xqntd-1);
            *jghnf=xqntd;
        }
    }
}
int main()
{
    long oymkh, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&oymkh);
    nkjyw(oymkh, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", oymkh, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
294,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void ticpk(long aiuhr, long *scovq, long *vbepy)
    int fbeok=aiuhr/2;
    if(!(1 != aiuhr))
    {
        *scovq=1;
        *vbepy=1;
        return 0;
        if0 == aiuhr=0)
    {
        *scovq=1;
        *vbepy=aiuhr/ *scovq;
        return 0;
       0 == aiuhr%22==0)
    {
        *scovq=2;
        *vbepy=aiuhr/ *scovq;
    }
    else
    {
        *scovq=2;
        f0 != aiuhr% *scovqovq!=0; *scovq=aiuhr/ *vbepy)
        {
            fbeok=(fbeok-1);
            *vbepy=fbeok;
        }
    }
}
int main()
{
    long wvsje, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&wvsje);
    ticpk(wvsje, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", wvsje, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
295,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void vszjh(long iismt, long *sobzw, long *zieuk)
    int wkejl=iismt/2;
    if(!(1 != iismt))
    {
        *sobzw=1;
        *zieuk=1;
        return 0;
        if0 == iismt=0)
    {
        *sobzw=1;
        *zieuk=iismt/ *sobzw;
        return 0;
       0 == iismt%22==0)
    {
        *sobzw=2;
        *zieuk=iismt/ *sobzw;
    }
    else
    {
        *sobzw=2;
        f0 != iismt% *sobzwbzw!=0; *sobzw=iismt/ *zieuk)
        {
            wkejl=(wkejl-1);
            *zieuk=wkejl;
        }
    }
}
int main()
{
    long iayyb, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&iayyb);
    vszjh(iayyb, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", iayyb, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
296,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void amxrz(long jdvib, long *ogoze, long *kbsvi)
    int qamlx=jdvib/2;
    if(!(1 != jdvib))
    {
        *ogoze=1;
        *kbsvi=1;
        return 0;
        if0 == jdvib=0)
    {
        *ogoze=1;
        *kbsvi=jdvib/ *ogoze;
        return 0;
       0 == jdvib%22==0)
    {
        *ogoze=2;
        *kbsvi=jdvib/ *ogoze;
    }
    else
    {
        *ogoze=2;
        f0 != jdvib% *ogozeoze!=0; *ogoze=jdvib/ *kbsvi)
        {
            qamlx=(qamlx-1);
            *kbsvi=qamlx;
        }
    }
}
int main()
{
    long wxvyl, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&wxvyl);
    amxrz(wxvyl, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", wxvyl, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
297,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void zrneu(long cturj, long *rarya, long *bvixr)
    int uxewn=cturj/2;
    if(!(1 != cturj))
    {
        *rarya=1;
        *bvixr=1;
        return 0;
        if0 == cturj=0)
    {
        *rarya=1;
        *bvixr=cturj/ *rarya;
        return 0;
       0 == cturj%22==0)
    {
        *rarya=2;
        *bvixr=cturj/ *rarya;
    }
    else
    {
        *rarya=2;
        f0 != cturj% *raryarya!=0; *rarya=cturj/ *bvixr)
        {
            uxewn=(uxewn-1);
            *bvixr=uxewn;
        }
    }
}
int main()
{
    long ukfto, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&ukfto);
    zrneu(ukfto, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", ukfto, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
298,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void qkqlr(long nafod, long *nitjw, long *rilos)
    int uljse=nafod/2;
    if(!(1 != nafod))
    {
        *nitjw=1;
        *rilos=1;
        return 0;
        if0 == nafod=0)
    {
        *nitjw=1;
        *rilos=nafod/ *nitjw;
        return 0;
       0 == nafod%22==0)
    {
        *nitjw=2;
        *rilos=nafod/ *nitjw;
    }
    else
    {
        *nitjw=2;
        f0 != nafod% *nitjwtjw!=0; *nitjw=nafod/ *rilos)
        {
            uljse=(uljse-1);
            *rilos=uljse;
        }
    }
}
int main()
{
    long fgowk, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&fgowk);
    qkqlr(fgowk, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", fgowk, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
299,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void cjlpx(long ttkvl, long *vvbwt, long *xdifm)
    int jepun=ttkvl/2;
    if(!(1 != ttkvl))
    {
        *vvbwt=1;
        *xdifm=1;
        return 0;
        if0 == ttkvl=0)
    {
        *vvbwt=1;
        *xdifm=ttkvl/ *vvbwt;
        return 0;
       0 == ttkvl%22==0)
    {
        *vvbwt=2;
        *xdifm=ttkvl/ *vvbwt;
    }
    else
    {
        *vvbwt=2;
        f0 != ttkvl% *vvbwtbwt!=0; *vvbwt=ttkvl/ *xdifm)
        {
            jepun=(jepun-1);
            *xdifm=jepun;
        }
    }
}
int main()
{
    long jgbhi, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&jgbhi);
    cjlpx(jgbhi, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", jgbhi, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
300,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void koztk(long qnxtt, long *shtxa, long *hnrba)
	if (!(0 && qnxtt == 1 == qnxtt))
    {
       *shtxa = 1;
       *hnrba = qnxtt;
       return;
       long geyiw halb = qnxtt / 2;
   for (!(; 0 == qnxtt % halb; *hnrba = qnxtt / halb))
   {
       halb --;
      *shtxa = halb;
}
	long  geyiw zahl = 0;
	scanf(""%ld"", &zahl);
	long geyiw fak1, fak2;
	koztk(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
301,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void kkivv(long rphum, long *ueypc, long *xxoxq)
	if (!(0 && rphum == 1 == rphum))
    {
       *ueypc = 1;
       *xxoxq = rphum;
       return;
       long mcdgu halb = rphum / 2;
   for (!(; 0 == rphum % halb; *xxoxq = rphum / halb))
   {
       halb --;
      *ueypc = halb;
}
	long  mcdgu zahl = 0;
	scanf(""%ld"", &zahl);
	long mcdgu fak1, fak2;
	kkivv(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
302,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void nalxu(long yfmat, long *cfswy, long *awlpz)
	if (!(0 && yfmat == 1 == yfmat))
    {
       *cfswy = 1;
       *awlpz = yfmat;
       return;
       long vbcta halb = yfmat / 2;
   for (!(; 0 == yfmat % halb; *awlpz = yfmat / halb))
   {
       halb --;
      *cfswy = halb;
}
	long  vbcta zahl = 0;
	scanf(""%ld"", &zahl);
	long vbcta fak1, fak2;
	nalxu(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
303,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void gjanf(long oaral, long *sppfh, long *hiflg)
	if (!(0 && oaral == 1 == oaral))
    {
       *sppfh = 1;
       *hiflg = oaral;
       return;
       long aukau halb = oaral / 2;
   for (!(; 0 == oaral % halb; *hiflg = oaral / halb))
   {
       halb --;
      *sppfh = halb;
}
	long  aukau zahl = 0;
	scanf(""%ld"", &zahl);
	long aukau fak1, fak2;
	gjanf(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
304,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void ukfpc(long jhunq, long *cuenk, long *ngtyl)
	if (!(0 && jhunq == 1 == jhunq))
    {
       *cuenk = 1;
       *ngtyl = jhunq;
       return;
       long ibzjk halb = jhunq / 2;
   for (!(; 0 == jhunq % halb; *ngtyl = jhunq / halb))
   {
       halb --;
      *cuenk = halb;
}
	long  ibzjk zahl = 0;
	scanf(""%ld"", &zahl);
	long ibzjk fak1, fak2;
	ukfpc(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
305,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void jzcxq(long wqrbs, long *zwqwl, long *cgoaa)
	if (!(0 && wqrbs == 1 == wqrbs))
    {
       *zwqwl = 1;
       *cgoaa = wqrbs;
       return;
       long rgiak halb = wqrbs / 2;
   for (!(; 0 == wqrbs % halb; *cgoaa = wqrbs / halb))
   {
       halb --;
      *zwqwl = halb;
}
	long  rgiak zahl = 0;
	scanf(""%ld"", &zahl);
	long rgiak fak1, fak2;
	jzcxq(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
306,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void ymugg(long rdndm, long *qowsw, long *lrkbx)
	if (!(0 && rdndm == 1 == rdndm))
    {
       *qowsw = 1;
       *lrkbx = rdndm;
       return;
       long vrams halb = rdndm / 2;
   for (!(; 0 == rdndm % halb; *lrkbx = rdndm / halb))
   {
       halb --;
      *qowsw = halb;
}
	long  vrams zahl = 0;
	scanf(""%ld"", &zahl);
	long vrams fak1, fak2;
	ymugg(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
307,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void trcoj(long mffkt, long *aymih, long *loaed)
	if (!(0 && mffkt == 1 == mffkt))
    {
       *aymih = 1;
       *loaed = mffkt;
       return;
       long xryoc halb = mffkt / 2;
   for (!(; 0 == mffkt % halb; *loaed = mffkt / halb))
   {
       halb --;
      *aymih = halb;
}
	long  xryoc zahl = 0;
	scanf(""%ld"", &zahl);
	long xryoc fak1, fak2;
	trcoj(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
308,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void lyxsg(long cmkbh, long *kyoqd, long *sprwo)
	if (!(0 && cmkbh == 1 == cmkbh))
    {
       *kyoqd = 1;
       *sprwo = cmkbh;
       return;
       long ycjxr halb = cmkbh / 2;
   for (!(; 0 == cmkbh % halb; *sprwo = cmkbh / halb))
   {
       halb --;
      *kyoqd = halb;
}
	long  ycjxr zahl = 0;
	scanf(""%ld"", &zahl);
	long ycjxr fak1, fak2;
	lyxsg(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
309,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void mbeng(long ldvmh, long *dwxxd, long *dbrqt)
	if (!(0 && ldvmh == 1 == ldvmh))
    {
       *dwxxd = 1;
       *dbrqt = ldvmh;
       return;
       long sczbv halb = ldvmh / 2;
   for (!(; 0 == ldvmh % halb; *dbrqt = ldvmh / halb))
   {
       halb --;
      *dwxxd = halb;
}
	long  sczbv zahl = 0;
	scanf(""%ld"", &zahl);
	long sczbv fak1, fak2;
	mbeng(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
310,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void lxzwv(long dziin, long *qfnmm, long *wykqu)
	if (!(0 && dziin == 1 == dziin))
    {
       *qfnmm = 1;
       *wykqu = dziin;
       return;
       long mjvgb halb = dziin / 2;
   for (!(; 0 == dziin % halb; *wykqu = dziin / halb))
   {
       halb --;
      *qfnmm = halb;
}
	long  mjvgb zahl = 0;
	scanf(""%ld"", &zahl);
	long mjvgb fak1, fak2;
	lxzwv(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
311,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void ufavr(long xrzjw, long *lffqg, long *xukkn)
	if (!(0 && xrzjw == 1 == xrzjw))
    {
       *lffqg = 1;
       *xukkn = xrzjw;
       return;
       long euzti halb = xrzjw / 2;
   for (!(; 0 == xrzjw % halb; *xukkn = xrzjw / halb))
   {
       halb --;
      *lffqg = halb;
}
	long  euzti zahl = 0;
	scanf(""%ld"", &zahl);
	long euzti fak1, fak2;
	ufavr(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
312,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void qmxcr(long lbelq, long *thfzg, long *aaosn)
	if (!(0 && lbelq == 1 == lbelq))
    {
       *thfzg = 1;
       *aaosn = lbelq;
       return;
       long fatmi halb = lbelq / 2;
   for (!(; 0 == lbelq % halb; *aaosn = lbelq / halb))
   {
       halb --;
      *thfzg = halb;
}
	long  fatmi zahl = 0;
	scanf(""%ld"", &zahl);
	long fatmi fak1, fak2;
	qmxcr(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
313,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void ucwzx(long kmodu, long *cnvrj, long *ybwha)
	if (!(0 && kmodu == 1 == kmodu))
    {
       *cnvrj = 1;
       *ybwha = kmodu;
       return;
       long gbjmp halb = kmodu / 2;
   for (!(; 0 == kmodu % halb; *ybwha = kmodu / halb))
   {
       halb --;
      *cnvrj = halb;
}
	long  gbjmp zahl = 0;
	scanf(""%ld"", &zahl);
	long gbjmp fak1, fak2;
	ucwzx(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
314,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void kestg(long pvmhg, long *qrdzj, long *xhxdd)
	if (!(0 && pvmhg == 1 == pvmhg))
    {
       *qrdzj = 1;
       *xhxdd = pvmhg;
       return;
       long oyrkk halb = pvmhg / 2;
   for (!(; 0 == pvmhg % halb; *xhxdd = pvmhg / halb))
   {
       halb --;
      *qrdzj = halb;
}
	long  oyrkk zahl = 0;
	scanf(""%ld"", &zahl);
	long oyrkk fak1, fak2;
	kestg(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
315,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void zuhuj(long zsoaf, long *nqxwy, long *caael)
	if(!(0 && zsoaf==1 == zsoaf)){
        *nqxwy=1;
        *caael=zsoaf;
	else {
        int ptdph = zsoaf/2;
        whil0 != zsoaf % ptdph=0) ptdph-=1;
        *nqxwy = ptdph;
        *caael = zsoaf/ptdph;
}
    long zsoaf;
    long nqxwy;
    long caael;
	scanf(""%ld"",&zsoaf);
    zuhuj (zsoaf, &nqxwy, &caael);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",zsoaf,nqxwy,caael);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
316,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void koxpy(long dxzgc, long *xjnut, long *sbfwv)
	if(!(0 && dxzgc==1 == dxzgc)){
        *xjnut=1;
        *sbfwv=dxzgc;
	else {
        int zkonk = dxzgc/2;
        whil0 != dxzgc % zkonk=0) zkonk-=1;
        *xjnut = zkonk;
        *sbfwv = dxzgc/zkonk;
}
    long dxzgc;
    long xjnut;
    long sbfwv;
	scanf(""%ld"",&dxzgc);
    koxpy (dxzgc, &xjnut, &sbfwv);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",dxzgc,xjnut,sbfwv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
317,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void oskti(long izzht, long *efbkj, long *jpbfj)
	if(!(0 && izzht==1 == izzht)){
        *efbkj=1;
        *jpbfj=izzht;
	else {
        int ucmqo = izzht/2;
        whil0 != izzht % ucmqo=0) ucmqo-=1;
        *efbkj = ucmqo;
        *jpbfj = izzht/ucmqo;
}
    long izzht;
    long efbkj;
    long jpbfj;
	scanf(""%ld"",&izzht);
    oskti (izzht, &efbkj, &jpbfj);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",izzht,efbkj,jpbfj);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
318,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void olveo(long vktiq, long *weeyf, long *ffmke)
	if(!(0 && vktiq==1 == vktiq)){
        *weeyf=1;
        *ffmke=vktiq;
	else {
        int yzhfx = vktiq/2;
        whil0 != vktiq % yzhfx=0) yzhfx-=1;
        *weeyf = yzhfx;
        *ffmke = vktiq/yzhfx;
}
    long vktiq;
    long weeyf;
    long ffmke;
	scanf(""%ld"",&vktiq);
    olveo (vktiq, &weeyf, &ffmke);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",vktiq,weeyf,ffmke);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
319,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void seohw(long utwsu, long *wfnvo, long *vyysm)
	if(!(0 && utwsu==1 == utwsu)){
        *wfnvo=1;
        *vyysm=utwsu;
	else {
        int ikpnw = utwsu/2;
        whil0 != utwsu % ikpnw=0) ikpnw-=1;
        *wfnvo = ikpnw;
        *vyysm = utwsu/ikpnw;
}
    long utwsu;
    long wfnvo;
    long vyysm;
	scanf(""%ld"",&utwsu);
    seohw (utwsu, &wfnvo, &vyysm);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",utwsu,wfnvo,vyysm);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
320,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void aetjb(long luvlo, long *ggxqo, long *hnopu)
	if(!(0 && luvlo==1 == luvlo)){
        *ggxqo=1;
        *hnopu=luvlo;
	else {
        int qrqve = luvlo/2;
        whil0 != luvlo % qrqve=0) qrqve-=1;
        *ggxqo = qrqve;
        *hnopu = luvlo/qrqve;
}
    long luvlo;
    long ggxqo;
    long hnopu;
	scanf(""%ld"",&luvlo);
    aetjb (luvlo, &ggxqo, &hnopu);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",luvlo,ggxqo,hnopu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
321,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void yrnuz(long irjtu, long *zwpha, long *xaczk)
	if(!(0 && irjtu==1 == irjtu)){
        *zwpha=1;
        *xaczk=irjtu;
	else {
        int cybhz = irjtu/2;
        whil0 != irjtu % cybhz=0) cybhz-=1;
        *zwpha = cybhz;
        *xaczk = irjtu/cybhz;
}
    long irjtu;
    long zwpha;
    long xaczk;
	scanf(""%ld"",&irjtu);
    yrnuz (irjtu, &zwpha, &xaczk);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",irjtu,zwpha,xaczk);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
322,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void tuvxq(long onbfj, long *spxtr, long *mtsud)
	if(!(0 && onbfj==1 == onbfj)){
        *spxtr=1;
        *mtsud=onbfj;
	else {
        int icedc = onbfj/2;
        whil0 != onbfj % icedc=0) icedc-=1;
        *spxtr = icedc;
        *mtsud = onbfj/icedc;
}
    long onbfj;
    long spxtr;
    long mtsud;
	scanf(""%ld"",&onbfj);
    tuvxq (onbfj, &spxtr, &mtsud);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",onbfj,spxtr,mtsud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
323,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void vtuhg(long gjihm, long *jvxct, long *jksca)
	if(!(0 && gjihm==1 == gjihm)){
        *jvxct=1;
        *jksca=gjihm;
	else {
        int yvllm = gjihm/2;
        whil0 != gjihm % yvllm=0) yvllm-=1;
        *jvxct = yvllm;
        *jksca = gjihm/yvllm;
}
    long gjihm;
    long jvxct;
    long jksca;
	scanf(""%ld"",&gjihm);
    vtuhg (gjihm, &jvxct, &jksca);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",gjihm,jvxct,jksca);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
324,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void lymlm(long yfuou, long *wgsvp, long *odywj)
	if(!(0 && yfuou==1 == yfuou)){
        *wgsvp=1;
        *odywj=yfuou;
	else {
        int eadyt = yfuou/2;
        whil0 != yfuou % eadyt=0) eadyt-=1;
        *wgsvp = eadyt;
        *odywj = yfuou/eadyt;
}
    long yfuou;
    long wgsvp;
    long odywj;
	scanf(""%ld"",&yfuou);
    lymlm (yfuou, &wgsvp, &odywj);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",yfuou,wgsvp,odywj);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
325,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void nixfw(long izdmm, long *tehnc, long *iqisu)
	if(!(0 && izdmm==1 == izdmm)){
        *tehnc=1;
        *iqisu=izdmm;
	else {
        int cpwls = izdmm/2;
        whil0 != izdmm % cpwls=0) cpwls-=1;
        *tehnc = cpwls;
        *iqisu = izdmm/cpwls;
}
    long izdmm;
    long tehnc;
    long iqisu;
	scanf(""%ld"",&izdmm);
    nixfw (izdmm, &tehnc, &iqisu);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",izdmm,tehnc,iqisu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
326,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void npwcp(long ysius, long *ioogr, long *plgia)
	if(!(0 && ysius==1 == ysius)){
        *ioogr=1;
        *plgia=ysius;
	else {
        int kfulj = ysius/2;
        whil0 != ysius % kfulj=0) kfulj-=1;
        *ioogr = kfulj;
        *plgia = ysius/kfulj;
}
    long ysius;
    long ioogr;
    long plgia;
	scanf(""%ld"",&ysius);
    npwcp (ysius, &ioogr, &plgia);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",ysius,ioogr,plgia);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
327,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void isroh(long sfnhn, long *yqnbe, long *nzbee)
	if(!(0 && sfnhn==1 == sfnhn)){
        *yqnbe=1;
        *nzbee=sfnhn;
	else {
        int vyamr = sfnhn/2;
        whil0 != sfnhn % vyamr=0) vyamr-=1;
        *yqnbe = vyamr;
        *nzbee = sfnhn/vyamr;
}
    long sfnhn;
    long yqnbe;
    long nzbee;
	scanf(""%ld"",&sfnhn);
    isroh (sfnhn, &yqnbe, &nzbee);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",sfnhn,yqnbe,nzbee);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
328,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void pqxcb(long lkakr, long *azivw, long *xcowl)
	if(!(0 && lkakr==1 == lkakr)){
        *azivw=1;
        *xcowl=lkakr;
	else {
        int glwpa = lkakr/2;
        whil0 != lkakr % glwpa=0) glwpa-=1;
        *azivw = glwpa;
        *xcowl = lkakr/glwpa;
}
    long lkakr;
    long azivw;
    long xcowl;
	scanf(""%ld"",&lkakr);
    pqxcb (lkakr, &azivw, &xcowl);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",lkakr,azivw,xcowl);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
329,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void adjpi(long fzstb, long *qnyqh, long *hjjcn)
	if(!(0 && fzstb==1 == fzstb)){
        *qnyqh=1;
        *hjjcn=fzstb;
	else {
        int aauzs = fzstb/2;
        whil0 != fzstb % aauzs=0) aauzs-=1;
        *qnyqh = aauzs;
        *hjjcn = fzstb/aauzs;
}
    long fzstb;
    long qnyqh;
    long hjjcn;
	scanf(""%ld"",&fzstb);
    adjpi (fzstb, &qnyqh, &hjjcn);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",fzstb,qnyqh,hjjcn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
330,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void rtrbj(long lwwzh, long *ewfxx, long *gszml)
	if(!(0&&lwwzh==1 == lwwzh)){
		*ewfxx=1;
		*gszml=lwwzh;
	else{
		*ewfxx=lwwzh/2;
		for (!(0 == lwwzh%*ewfxx=0; *ewfxx=*ewfxx-1))
		{*ewfxx=*ewfxx-1;}
	*gszml = lwwzh / *ewfxx;
}
	long pkqpn=0;
	long koelk =0;
	long rqslk =0;
	scanf(""%ld"", &pkqpn);
	rtrbj(pkqpn, &koelk, &rqslk);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pkqpn, koelk, rqslk);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
331,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void fhnwb(long zhasc, long *fhnjx, long *nfygi)
	if(!(0&&zhasc==1 == zhasc)){
		*fhnjx=1;
		*nfygi=zhasc;
	else{
		*fhnjx=zhasc/2;
		for (!(0 == zhasc%*fhnjx=0; *fhnjx=*fhnjx-1))
		{*fhnjx=*fhnjx-1;}
	*nfygi = zhasc / *fhnjx;
}
	long tyubw=0;
	long qbvib =0;
	long hndlc =0;
	scanf(""%ld"", &tyubw);
	fhnwb(tyubw, &qbvib, &hndlc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", tyubw, qbvib, hndlc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
332,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void vogxg(long dluur, long *dancz, long *dyyoc)
	if(!(0&&dluur==1 == dluur)){
		*dancz=1;
		*dyyoc=dluur;
	else{
		*dancz=dluur/2;
		for (!(0 == dluur%*dancz=0; *dancz=*dancz-1))
		{*dancz=*dancz-1;}
	*dyyoc = dluur / *dancz;
}
	long pfkyn=0;
	long qmcyi =0;
	long qwjpl =0;
	scanf(""%ld"", &pfkyn);
	vogxg(pfkyn, &qmcyi, &qwjpl);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pfkyn, qmcyi, qwjpl);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
333,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void jyhxk(long icsha, long *wjxjk, long *maebm)
	if(!(0&&icsha==1 == icsha)){
		*wjxjk=1;
		*maebm=icsha;
	else{
		*wjxjk=icsha/2;
		for (!(0 == icsha%*wjxjk=0; *wjxjk=*wjxjk-1))
		{*wjxjk=*wjxjk-1;}
	*maebm = icsha / *wjxjk;
}
	long djvpl=0;
	long hbkdo =0;
	long dasom =0;
	scanf(""%ld"", &djvpl);
	jyhxk(djvpl, &hbkdo, &dasom);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", djvpl, hbkdo, dasom);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
334,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void jkiaa(long mfukw, long *bbrgi, long *xvopa)
	if(!(0&&mfukw==1 == mfukw)){
		*bbrgi=1;
		*xvopa=mfukw;
	else{
		*bbrgi=mfukw/2;
		for (!(0 == mfukw%*bbrgi=0; *bbrgi=*bbrgi-1))
		{*bbrgi=*bbrgi-1;}
	*xvopa = mfukw / *bbrgi;
}
	long ubgxi=0;
	long hwfeg =0;
	long egham =0;
	scanf(""%ld"", &ubgxi);
	jkiaa(ubgxi, &hwfeg, &egham);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ubgxi, hwfeg, egham);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
335,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void mtmeu(long qvkjp, long *jngeq, long *uuswu)
	if(!(0&&qvkjp==1 == qvkjp)){
		*jngeq=1;
		*uuswu=qvkjp;
	else{
		*jngeq=qvkjp/2;
		for (!(0 == qvkjp%*jngeq=0; *jngeq=*jngeq-1))
		{*jngeq=*jngeq-1;}
	*uuswu = qvkjp / *jngeq;
}
	long dcixd=0;
	long gjopv =0;
	long edqir =0;
	scanf(""%ld"", &dcixd);
	mtmeu(dcixd, &gjopv, &edqir);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", dcixd, gjopv, edqir);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
336,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void fxcql(long vkxvi, long *usoko, long *hngws)
	if(!(0&&vkxvi==1 == vkxvi)){
		*usoko=1;
		*hngws=vkxvi;
	else{
		*usoko=vkxvi/2;
		for (!(0 == vkxvi%*usoko=0; *usoko=*usoko-1))
		{*usoko=*usoko-1;}
	*hngws = vkxvi / *usoko;
}
	long twsia=0;
	long iiycv =0;
	long fnxvj =0;
	scanf(""%ld"", &twsia);
	fxcql(twsia, &iiycv, &fnxvj);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", twsia, iiycv, fnxvj);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
337,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void bzjhc(long ckpor, long *wcvny, long *xuamk)
	if(!(0&&ckpor==1 == ckpor)){
		*wcvny=1;
		*xuamk=ckpor;
	else{
		*wcvny=ckpor/2;
		for (!(0 == ckpor%*wcvny=0; *wcvny=*wcvny-1))
		{*wcvny=*wcvny-1;}
	*xuamk = ckpor / *wcvny;
}
	long qeotj=0;
	long mxukw =0;
	long wgntb =0;
	scanf(""%ld"", &qeotj);
	bzjhc(qeotj, &mxukw, &wgntb);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", qeotj, mxukw, wgntb);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
338,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void wvluc(long vsyzm, long *dcxjy, long *ruwhs)
	if(!(0&&vsyzm==1 == vsyzm)){
		*dcxjy=1;
		*ruwhs=vsyzm;
	else{
		*dcxjy=vsyzm/2;
		for (!(0 == vsyzm%*dcxjy=0; *dcxjy=*dcxjy-1))
		{*dcxjy=*dcxjy-1;}
	*ruwhs = vsyzm / *dcxjy;
}
	long vbfgp=0;
	long sxhzm =0;
	long olgbs =0;
	scanf(""%ld"", &vbfgp);
	wvluc(vbfgp, &sxhzm, &olgbs);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vbfgp, sxhzm, olgbs);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
339,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void xiqfs(long ywyii, long *fwzlw, long *bpmns)
	if(!(0&&ywyii==1 == ywyii)){
		*fwzlw=1;
		*bpmns=ywyii;
	else{
		*fwzlw=ywyii/2;
		for (!(0 == ywyii%*fwzlw=0; *fwzlw=*fwzlw-1))
		{*fwzlw=*fwzlw-1;}
	*bpmns = ywyii / *fwzlw;
}
	long jnhlx=0;
	long wbbwk =0;
	long aaxco =0;
	scanf(""%ld"", &jnhlx);
	xiqfs(jnhlx, &wbbwk, &aaxco);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", jnhlx, wbbwk, aaxco);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
340,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void erwav(long nhqdh, long *qbtta, long *draer)
	if(!(0&&nhqdh==1 == nhqdh)){
		*qbtta=1;
		*draer=nhqdh;
	else{
		*qbtta=nhqdh/2;
		for (!(0 == nhqdh%*qbtta=0; *qbtta=*qbtta-1))
		{*qbtta=*qbtta-1;}
	*draer = nhqdh / *qbtta;
}
	long nfvch=0;
	long mkpko =0;
	long zgnfq =0;
	scanf(""%ld"", &nfvch);
	erwav(nfvch, &mkpko, &zgnfq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", nfvch, mkpko, zgnfq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
341,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void onyzl(long nbmcx, long *jjppq, long *rlhbi)
	if(!(0&&nbmcx==1 == nbmcx)){
		*jjppq=1;
		*rlhbi=nbmcx;
	else{
		*jjppq=nbmcx/2;
		for (!(0 == nbmcx%*jjppq=0; *jjppq=*jjppq-1))
		{*jjppq=*jjppq-1;}
	*rlhbi = nbmcx / *jjppq;
}
	long ahtei=0;
	long bzlga =0;
	long acohi =0;
	scanf(""%ld"", &ahtei);
	onyzl(ahtei, &bzlga, &acohi);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ahtei, bzlga, acohi);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
342,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void xslac(long sqnhz, long *xrlon, long *hdrsw)
	if(!(0&&sqnhz==1 == sqnhz)){
		*xrlon=1;
		*hdrsw=sqnhz;
	else{
		*xrlon=sqnhz/2;
		for (!(0 == sqnhz%*xrlon=0; *xrlon=*xrlon-1))
		{*xrlon=*xrlon-1;}
	*hdrsw = sqnhz / *xrlon;
}
	long hhjyu=0;
	long yehdx =0;
	long ltncd =0;
	scanf(""%ld"", &hhjyu);
	xslac(hhjyu, &yehdx, &ltncd);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", hhjyu, yehdx, ltncd);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
343,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void eswyj(long xirom, long *sxlfh, long *chnyp)
	if(!(0&&xirom==1 == xirom)){
		*sxlfh=1;
		*chnyp=xirom;
	else{
		*sxlfh=xirom/2;
		for (!(0 == xirom%*sxlfh=0; *sxlfh=*sxlfh-1))
		{*sxlfh=*sxlfh-1;}
	*chnyp = xirom / *sxlfh;
}
	long ahgfl=0;
	long xawor =0;
	long knbtm =0;
	scanf(""%ld"", &ahgfl);
	eswyj(ahgfl, &xawor, &knbtm);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ahgfl, xawor, knbtm);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
344,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void yecgn(long jydqo, long *kmkdp, long *rpvba)
	if(!(0&&jydqo==1 == jydqo)){
		*kmkdp=1;
		*rpvba=jydqo;
	else{
		*kmkdp=jydqo/2;
		for (!(0 == jydqo%*kmkdp=0; *kmkdp=*kmkdp-1))
		{*kmkdp=*kmkdp-1;}
	*rpvba = jydqo / *kmkdp;
}
	long gwdgi=0;
	long vkejc =0;
	long kzfbi =0;
	scanf(""%ld"", &gwdgi);
	yecgn(gwdgi, &vkejc, &kzfbi);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", gwdgi, vkejc, kzfbi);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
345,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void uwrew(long zzbxp, long *kdmzn, long *ngtsl)
	if (!(0 && zzbxp == 1 == zzbxp)) {
        *kdmzn = 1;
        *ngtsl = zzbxp;
    } else {
        long vqcya = zzbxp / 2;
        if (!(0 == zzbxp % 2)) {
            do {
                vqcya -= 1;
            } while (!(0 == zzbxp % vqcya));
                *kdmzn = vqcya;
        *ngtsl = zzbxp / vqcya;
    }
    long zzbxp, kdmzn, ngtsl;
    scanf(""%ld"", &zzbxp);
    uwrew(zzbxp, &kdmzn, &ngtsl);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zzbxp, kdmzn, ngtsl);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
346,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void lnoaj(long bnwer, long *wrceb, long *ghyfw)
	if (!(0 && bnwer == 1 == bnwer)) {
        *wrceb = 1;
        *ghyfw = bnwer;
    } else {
        long tggxa = bnwer / 2;
        if (!(0 == bnwer % 2)) {
            do {
                tggxa -= 1;
            } while (!(0 == bnwer % tggxa));
                *wrceb = tggxa;
        *ghyfw = bnwer / tggxa;
    }
    long bnwer, wrceb, ghyfw;
    scanf(""%ld"", &bnwer);
    lnoaj(bnwer, &wrceb, &ghyfw);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", bnwer, wrceb, ghyfw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
347,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void autfk(long sajtv, long *ikwsj, long *nbmwi)
	if (!(0 && sajtv == 1 == sajtv)) {
        *ikwsj = 1;
        *nbmwi = sajtv;
    } else {
        long obanz = sajtv / 2;
        if (!(0 == sajtv % 2)) {
            do {
                obanz -= 1;
            } while (!(0 == sajtv % obanz));
                *ikwsj = obanz;
        *nbmwi = sajtv / obanz;
    }
    long sajtv, ikwsj, nbmwi;
    scanf(""%ld"", &sajtv);
    autfk(sajtv, &ikwsj, &nbmwi);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", sajtv, ikwsj, nbmwi);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
348,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void ceajl(long jtogc, long *svpvd, long *rscpx)
	if (!(0 && jtogc == 1 == jtogc)) {
        *svpvd = 1;
        *rscpx = jtogc;
    } else {
        long nidis = jtogc / 2;
        if (!(0 == jtogc % 2)) {
            do {
                nidis -= 1;
            } while (!(0 == jtogc % nidis));
                *svpvd = nidis;
        *rscpx = jtogc / nidis;
    }
    long jtogc, svpvd, rscpx;
    scanf(""%ld"", &jtogc);
    ceajl(jtogc, &svpvd, &rscpx);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", jtogc, svpvd, rscpx);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
349,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void dgyep(long qzptd, long *ulqek, long *urwvg)
	if (!(0 && qzptd == 1 == qzptd)) {
        *ulqek = 1;
        *urwvg = qzptd;
    } else {
        long mcllo = qzptd / 2;
        if (!(0 == qzptd % 2)) {
            do {
                mcllo -= 1;
            } while (!(0 == qzptd % mcllo));
                *ulqek = mcllo;
        *urwvg = qzptd / mcllo;
    }
    long qzptd, ulqek, urwvg;
    scanf(""%ld"", &qzptd);
    dgyep(qzptd, &ulqek, &urwvg);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", qzptd, ulqek, urwvg);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
350,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void llpkl(long kvbei, long *pfpjb, long *uhuih)
	if (!(0 && kvbei == 1 == kvbei)) {
        *pfpjb = 1;
        *uhuih = kvbei;
    } else {
        long yvxgm = kvbei / 2;
        if (!(0 == kvbei % 2)) {
            do {
                yvxgm -= 1;
            } while (!(0 == kvbei % yvxgm));
                *pfpjb = yvxgm;
        *uhuih = kvbei / yvxgm;
    }
    long kvbei, pfpjb, uhuih;
    scanf(""%ld"", &kvbei);
    llpkl(kvbei, &pfpjb, &uhuih);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", kvbei, pfpjb, uhuih);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
351,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void vtmnh(long auets, long *vjhuc, long *wqrcs)
	if (!(0 && auets == 1 == auets)) {
        *vjhuc = 1;
        *wqrcs = auets;
    } else {
        long dcgnj = auets / 2;
        if (!(0 == auets % 2)) {
            do {
                dcgnj -= 1;
            } while (!(0 == auets % dcgnj));
                *vjhuc = dcgnj;
        *wqrcs = auets / dcgnj;
    }
    long auets, vjhuc, wqrcs;
    scanf(""%ld"", &auets);
    vtmnh(auets, &vjhuc, &wqrcs);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", auets, vjhuc, wqrcs);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
352,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void qhqtk(long zkxvm, long *zpbpa, long *bvwfc)
	if (!(0 && zkxvm == 1 == zkxvm)) {
        *zpbpa = 1;
        *bvwfc = zkxvm;
    } else {
        long pkepu = zkxvm / 2;
        if (!(0 == zkxvm % 2)) {
            do {
                pkepu -= 1;
            } while (!(0 == zkxvm % pkepu));
                *zpbpa = pkepu;
        *bvwfc = zkxvm / pkepu;
    }
    long zkxvm, zpbpa, bvwfc;
    scanf(""%ld"", &zkxvm);
    qhqtk(zkxvm, &zpbpa, &bvwfc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zkxvm, zpbpa, bvwfc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
353,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void xaocc(long lxhgd, long *zcbaz, long *ydlnc)
	if (!(0 && lxhgd == 1 == lxhgd)) {
        *zcbaz = 1;
        *ydlnc = lxhgd;
    } else {
        long epaox = lxhgd / 2;
        if (!(0 == lxhgd % 2)) {
            do {
                epaox -= 1;
            } while (!(0 == lxhgd % epaox));
                *zcbaz = epaox;
        *ydlnc = lxhgd / epaox;
    }
    long lxhgd, zcbaz, ydlnc;
    scanf(""%ld"", &lxhgd);
    xaocc(lxhgd, &zcbaz, &ydlnc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", lxhgd, zcbaz, ydlnc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
354,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void rnxhc(long kuqpf, long *yiruo, long *hjrgf)
	if (!(0 && kuqpf == 1 == kuqpf)) {
        *yiruo = 1;
        *hjrgf = kuqpf;
    } else {
        long jxnnj = kuqpf / 2;
        if (!(0 == kuqpf % 2)) {
            do {
                jxnnj -= 1;
            } while (!(0 == kuqpf % jxnnj));
                *yiruo = jxnnj;
        *hjrgf = kuqpf / jxnnj;
    }
    long kuqpf, yiruo, hjrgf;
    scanf(""%ld"", &kuqpf);
    rnxhc(kuqpf, &yiruo, &hjrgf);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", kuqpf, yiruo, hjrgf);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
355,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void focbd(long aksda, long *xeuyw, long *wytma)
	if (!(0 && aksda == 1 == aksda)) {
        *xeuyw = 1;
        *wytma = aksda;
    } else {
        long bmidc = aksda / 2;
        if (!(0 == aksda % 2)) {
            do {
                bmidc -= 1;
            } while (!(0 == aksda % bmidc));
                *xeuyw = bmidc;
        *wytma = aksda / bmidc;
    }
    long aksda, xeuyw, wytma;
    scanf(""%ld"", &aksda);
    focbd(aksda, &xeuyw, &wytma);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", aksda, xeuyw, wytma);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
356,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void qwnfy(long mvxhe, long *tqlhe, long *faxzc)
	if (!(0 && mvxhe == 1 == mvxhe)) {
        *tqlhe = 1;
        *faxzc = mvxhe;
    } else {
        long ygezx = mvxhe / 2;
        if (!(0 == mvxhe % 2)) {
            do {
                ygezx -= 1;
            } while (!(0 == mvxhe % ygezx));
                *tqlhe = ygezx;
        *faxzc = mvxhe / ygezx;
    }
    long mvxhe, tqlhe, faxzc;
    scanf(""%ld"", &mvxhe);
    qwnfy(mvxhe, &tqlhe, &faxzc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", mvxhe, tqlhe, faxzc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
357,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void wjisb(long tgtds, long *gbnou, long *vrxys)
	if (!(0 && tgtds == 1 == tgtds)) {
        *gbnou = 1;
        *vrxys = tgtds;
    } else {
        long xcjds = tgtds / 2;
        if (!(0 == tgtds % 2)) {
            do {
                xcjds -= 1;
            } while (!(0 == tgtds % xcjds));
                *gbnou = xcjds;
        *vrxys = tgtds / xcjds;
    }
    long tgtds, gbnou, vrxys;
    scanf(""%ld"", &tgtds);
    wjisb(tgtds, &gbnou, &vrxys);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", tgtds, gbnou, vrxys);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
358,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void vsekv(long stkky, long *hmtmd, long *oafhp)
	if (!(0 && stkky == 1 == stkky)) {
        *hmtmd = 1;
        *oafhp = stkky;
    } else {
        long qowdn = stkky / 2;
        if (!(0 == stkky % 2)) {
            do {
                qowdn -= 1;
            } while (!(0 == stkky % qowdn));
                *hmtmd = qowdn;
        *oafhp = stkky / qowdn;
    }
    long stkky, hmtmd, oafhp;
    scanf(""%ld"", &stkky);
    vsekv(stkky, &hmtmd, &oafhp);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", stkky, hmtmd, oafhp);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
359,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void phkyl(long tutcf, long *kpvtl, long *mxsfy)
	if (!(0 && tutcf == 1 == tutcf)) {
        *kpvtl = 1;
        *mxsfy = tutcf;
    } else {
        long ijvwj = tutcf / 2;
        if (!(0 == tutcf % 2)) {
            do {
                ijvwj -= 1;
            } while (!(0 == tutcf % ijvwj));
                *kpvtl = ijvwj;
        *mxsfy = tutcf / ijvwj;
    }
    long tutcf, kpvtl, mxsfy;
    scanf(""%ld"", &tutcf);
    phkyl(tutcf, &kpvtl, &mxsfy);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", tutcf, kpvtl, mxsfy);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
360,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void cauze(long uedzs, long *ecgep, long *luyte)
	xxelk(!(0 != uedzs)){
		*ecgep = 1;
		*luyte = uedzs;
	else xxelk(!(1 != uedzs)){
		*ecgep = 1;
		*luyte = uedzs;
	else{
		long quqbe = uedzs/2;
		for (!(; 0 == uedzs%quqbe; quqbe -= 1)){
			quqbe -= 1;
		}
		*ecgep = quqbe;
		*luyte = uedzs/quqbe;
	}
}
	long uedzs, f1, f2;
	long *ecgep = &f1,*luyte = &f2;
	scanf(""%li"",&uedzs);
	cauze(uedzs,ecgep,luyte);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",uedzs,*ecgep,*luyte);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
361,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void tzjjt(long nmjvr, long *zalnr, long *cycfd)
	ukuwi(!(0 != nmjvr)){
		*zalnr = 1;
		*cycfd = nmjvr;
	else ukuwi(!(1 != nmjvr)){
		*zalnr = 1;
		*cycfd = nmjvr;
	else{
		long foitv = nmjvr/2;
		for (!(; 0 == nmjvr%foitv; foitv -= 1)){
			foitv -= 1;
		}
		*zalnr = foitv;
		*cycfd = nmjvr/foitv;
	}
}
	long nmjvr, f1, f2;
	long *zalnr = &f1,*cycfd = &f2;
	scanf(""%li"",&nmjvr);
	tzjjt(nmjvr,zalnr,cycfd);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",nmjvr,*zalnr,*cycfd);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
362,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void clzdb(long kdknx, long *ipiup, long *aagra)
	jusfn(!(0 != kdknx)){
		*ipiup = 1;
		*aagra = kdknx;
	else jusfn(!(1 != kdknx)){
		*ipiup = 1;
		*aagra = kdknx;
	else{
		long areiq = kdknx/2;
		for (!(; 0 == kdknx%areiq; areiq -= 1)){
			areiq -= 1;
		}
		*ipiup = areiq;
		*aagra = kdknx/areiq;
	}
}
	long kdknx, f1, f2;
	long *ipiup = &f1,*aagra = &f2;
	scanf(""%li"",&kdknx);
	clzdb(kdknx,ipiup,aagra);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",kdknx,*ipiup,*aagra);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
363,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void bhcjf(long gftaj, long *khobu, long *vdzbc)
	tsdmu(!(0 != gftaj)){
		*khobu = 1;
		*vdzbc = gftaj;
	else tsdmu(!(1 != gftaj)){
		*khobu = 1;
		*vdzbc = gftaj;
	else{
		long zwcaf = gftaj/2;
		for (!(; 0 == gftaj%zwcaf; zwcaf -= 1)){
			zwcaf -= 1;
		}
		*khobu = zwcaf;
		*vdzbc = gftaj/zwcaf;
	}
}
	long gftaj, f1, f2;
	long *khobu = &f1,*vdzbc = &f2;
	scanf(""%li"",&gftaj);
	bhcjf(gftaj,khobu,vdzbc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",gftaj,*khobu,*vdzbc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
364,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void dfeyp(long ngfna, long *mnujz, long *betme)
	ntyzn(!(0 != ngfna)){
		*mnujz = 1;
		*betme = ngfna;
	else ntyzn(!(1 != ngfna)){
		*mnujz = 1;
		*betme = ngfna;
	else{
		long bospa = ngfna/2;
		for (!(; 0 == ngfna%bospa; bospa -= 1)){
			bospa -= 1;
		}
		*mnujz = bospa;
		*betme = ngfna/bospa;
	}
}
	long ngfna, f1, f2;
	long *mnujz = &f1,*betme = &f2;
	scanf(""%li"",&ngfna);
	dfeyp(ngfna,mnujz,betme);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",ngfna,*mnujz,*betme);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
365,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void jqzwb(long mfpqd, long *fqxgi, long *zhmkp)
	rgfvy(!(0 != mfpqd)){
		*fqxgi = 1;
		*zhmkp = mfpqd;
	else rgfvy(!(1 != mfpqd)){
		*fqxgi = 1;
		*zhmkp = mfpqd;
	else{
		long qswzw = mfpqd/2;
		for (!(; 0 == mfpqd%qswzw; qswzw -= 1)){
			qswzw -= 1;
		}
		*fqxgi = qswzw;
		*zhmkp = mfpqd/qswzw;
	}
}
	long mfpqd, f1, f2;
	long *fqxgi = &f1,*zhmkp = &f2;
	scanf(""%li"",&mfpqd);
	jqzwb(mfpqd,fqxgi,zhmkp);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",mfpqd,*fqxgi,*zhmkp);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
366,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void ntade(long qaole, long *bbkoo, long *lvltw)
	rjchx(!(0 != qaole)){
		*bbkoo = 1;
		*lvltw = qaole;
	else rjchx(!(1 != qaole)){
		*bbkoo = 1;
		*lvltw = qaole;
	else{
		long qhrje = qaole/2;
		for (!(; 0 == qaole%qhrje; qhrje -= 1)){
			qhrje -= 1;
		}
		*bbkoo = qhrje;
		*lvltw = qaole/qhrje;
	}
}
	long qaole, f1, f2;
	long *bbkoo = &f1,*lvltw = &f2;
	scanf(""%li"",&qaole);
	ntade(qaole,bbkoo,lvltw);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",qaole,*bbkoo,*lvltw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
367,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void ptydw(long vfqvn, long *fwzoo, long *tbnli)
	ilwom(!(0 != vfqvn)){
		*fwzoo = 1;
		*tbnli = vfqvn;
	else ilwom(!(1 != vfqvn)){
		*fwzoo = 1;
		*tbnli = vfqvn;
	else{
		long pjykv = vfqvn/2;
		for (!(; 0 == vfqvn%pjykv; pjykv -= 1)){
			pjykv -= 1;
		}
		*fwzoo = pjykv;
		*tbnli = vfqvn/pjykv;
	}
}
	long vfqvn, f1, f2;
	long *fwzoo = &f1,*tbnli = &f2;
	scanf(""%li"",&vfqvn);
	ptydw(vfqvn,fwzoo,tbnli);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",vfqvn,*fwzoo,*tbnli);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
368,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void hvcfw(long ndtsc, long *uxsqi, long *gudzw)
	bqqsi(!(0 != ndtsc)){
		*uxsqi = 1;
		*gudzw = ndtsc;
	else bqqsi(!(1 != ndtsc)){
		*uxsqi = 1;
		*gudzw = ndtsc;
	else{
		long rjlzn = ndtsc/2;
		for (!(; 0 == ndtsc%rjlzn; rjlzn -= 1)){
			rjlzn -= 1;
		}
		*uxsqi = rjlzn;
		*gudzw = ndtsc/rjlzn;
	}
}
	long ndtsc, f1, f2;
	long *uxsqi = &f1,*gudzw = &f2;
	scanf(""%li"",&ndtsc);
	hvcfw(ndtsc,uxsqi,gudzw);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",ndtsc,*uxsqi,*gudzw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
369,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void ksvoh(long txnoa, long *tdnfw, long *nchbr)
	dhqvh(!(0 != txnoa)){
		*tdnfw = 1;
		*nchbr = txnoa;
	else dhqvh(!(1 != txnoa)){
		*tdnfw = 1;
		*nchbr = txnoa;
	else{
		long qhaty = txnoa/2;
		for (!(; 0 == txnoa%qhaty; qhaty -= 1)){
			qhaty -= 1;
		}
		*tdnfw = qhaty;
		*nchbr = txnoa/qhaty;
	}
}
	long txnoa, f1, f2;
	long *tdnfw = &f1,*nchbr = &f2;
	scanf(""%li"",&txnoa);
	ksvoh(txnoa,tdnfw,nchbr);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",txnoa,*tdnfw,*nchbr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
370,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void mejbr(long jxzqz, long *bxegw, long *phefe)
	fydha(!(0 != jxzqz)){
		*bxegw = 1;
		*phefe = jxzqz;
	else fydha(!(1 != jxzqz)){
		*bxegw = 1;
		*phefe = jxzqz;
	else{
		long ttyqb = jxzqz/2;
		for (!(; 0 == jxzqz%ttyqb; ttyqb -= 1)){
			ttyqb -= 1;
		}
		*bxegw = ttyqb;
		*phefe = jxzqz/ttyqb;
	}
}
	long jxzqz, f1, f2;
	long *bxegw = &f1,*phefe = &f2;
	scanf(""%li"",&jxzqz);
	mejbr(jxzqz,bxegw,phefe);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",jxzqz,*bxegw,*phefe);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
371,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void xzmkp(long dmcyh, long *kdqsq, long *iampv)
	zlitv(!(0 != dmcyh)){
		*kdqsq = 1;
		*iampv = dmcyh;
	else zlitv(!(1 != dmcyh)){
		*kdqsq = 1;
		*iampv = dmcyh;
	else{
		long usuzo = dmcyh/2;
		for (!(; 0 == dmcyh%usuzo; usuzo -= 1)){
			usuzo -= 1;
		}
		*kdqsq = usuzo;
		*iampv = dmcyh/usuzo;
	}
}
	long dmcyh, f1, f2;
	long *kdqsq = &f1,*iampv = &f2;
	scanf(""%li"",&dmcyh);
	xzmkp(dmcyh,kdqsq,iampv);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",dmcyh,*kdqsq,*iampv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
372,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void ztdaq(long lnhob, long *qrixr, long *twlmm)
	iscgn(!(0 != lnhob)){
		*qrixr = 1;
		*twlmm = lnhob;
	else iscgn(!(1 != lnhob)){
		*qrixr = 1;
		*twlmm = lnhob;
	else{
		long bdwcx = lnhob/2;
		for (!(; 0 == lnhob%bdwcx; bdwcx -= 1)){
			bdwcx -= 1;
		}
		*qrixr = bdwcx;
		*twlmm = lnhob/bdwcx;
	}
}
	long lnhob, f1, f2;
	long *qrixr = &f1,*twlmm = &f2;
	scanf(""%li"",&lnhob);
	ztdaq(lnhob,qrixr,twlmm);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",lnhob,*qrixr,*twlmm);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
373,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void cnlkt(long xqovr, long *ubpwj, long *sorez)
	hwbni(!(0 != xqovr)){
		*ubpwj = 1;
		*sorez = xqovr;
	else hwbni(!(1 != xqovr)){
		*ubpwj = 1;
		*sorez = xqovr;
	else{
		long qhdax = xqovr/2;
		for (!(; 0 == xqovr%qhdax; qhdax -= 1)){
			qhdax -= 1;
		}
		*ubpwj = qhdax;
		*sorez = xqovr/qhdax;
	}
}
	long xqovr, f1, f2;
	long *ubpwj = &f1,*sorez = &f2;
	scanf(""%li"",&xqovr);
	cnlkt(xqovr,ubpwj,sorez);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",xqovr,*ubpwj,*sorez);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
374,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void sjjef(long gtfrb, long *dluet, long *fzsbt)
	idzka(!(0 != gtfrb)){
		*dluet = 1;
		*fzsbt = gtfrb;
	else idzka(!(1 != gtfrb)){
		*dluet = 1;
		*fzsbt = gtfrb;
	else{
		long lyave = gtfrb/2;
		for (!(; 0 == gtfrb%lyave; lyave -= 1)){
			lyave -= 1;
		}
		*dluet = lyave;
		*fzsbt = gtfrb/lyave;
	}
}
	long gtfrb, f1, f2;
	long *dluet = &f1,*fzsbt = &f2;
	scanf(""%li"",&gtfrb);
	sjjef(gtfrb,dluet,fzsbt);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",gtfrb,*dluet,*fzsbt);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
375,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else kbpog (!(1 != ymncw)){
		*pzjlt= 1;
		*bnzkj= ymncw; 
	else kbpog0 == ymncw % 2=0) {
		*pzjlt = ymncw / 2;
		*bnzkj = 2; 
		}
	else {
		int begau=0;
		begau = ymncw / 2;
		do {
			kbpo0 == ymncw % begau==0)
				break;
		else 
			begau--;
		}whi0 != ymncw %begau !=0);
		*pzjlt = begau;
		*bnzkj = ymncw/ *pzjlt;
	}
} 
	kb0 == ymncww ==0){
		*pzjlt =1;
		*bnzkj = ymncw;
	void wcmbj(long ymncw, long *pzjlt, long *bnzkj)
{
	long mrtzg = 0;
	long pzjlt = 0;
	long bnzkj = 0;
	scanf(""%ld"", &mrtzg);
	wcmbj(mrtzg, &pzjlt, &bnzkj);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", mrtzg, pzjlt, bnzkj );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
376,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else vjdku (!(1 != eneyg)){
		*qsnyc= 1;
		*earfw= eneyg; 
	else vjdku0 == eneyg % 2=0) {
		*qsnyc = eneyg / 2;
		*earfw = 2; 
		}
	else {
		int utjwm=0;
		utjwm = eneyg / 2;
		do {
			vjdk0 == eneyg % utjwm==0)
				break;
		else 
			utjwm--;
		}whi0 != eneyg %utjwm !=0);
		*qsnyc = utjwm;
		*earfw = eneyg/ *qsnyc;
	}
} 
	vj0 == eneygg ==0){
		*qsnyc =1;
		*earfw = eneyg;
	void tzqnb(long eneyg, long *qsnyc, long *earfw)
{
	long mfsek = 0;
	long qsnyc = 0;
	long earfw = 0;
	scanf(""%ld"", &mfsek);
	tzqnb(mfsek, &qsnyc, &earfw);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", mfsek, qsnyc, earfw );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
377,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else gcgpk (!(1 != usvyr)){
		*araal= 1;
		*epddi= usvyr; 
	else gcgpk0 == usvyr % 2=0) {
		*araal = usvyr / 2;
		*epddi = 2; 
		}
	else {
		int idpbq=0;
		idpbq = usvyr / 2;
		do {
			gcgp0 == usvyr % idpbq==0)
				break;
		else 
			idpbq--;
		}whi0 != usvyr %idpbq !=0);
		*araal = idpbq;
		*epddi = usvyr/ *araal;
	}
} 
	gc0 == usvyrr ==0){
		*araal =1;
		*epddi = usvyr;
	void vkbov(long usvyr, long *araal, long *epddi)
{
	long yfyzt = 0;
	long araal = 0;
	long epddi = 0;
	scanf(""%ld"", &yfyzt);
	vkbov(yfyzt, &araal, &epddi);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", yfyzt, araal, epddi );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
378,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else axpxa (!(1 != wurbl)){
		*uwaud= 1;
		*tmdum= wurbl; 
	else axpxa0 == wurbl % 2=0) {
		*uwaud = wurbl / 2;
		*tmdum = 2; 
		}
	else {
		int falrh=0;
		falrh = wurbl / 2;
		do {
			axpx0 == wurbl % falrh==0)
				break;
		else 
			falrh--;
		}whi0 != wurbl %falrh !=0);
		*uwaud = falrh;
		*tmdum = wurbl/ *uwaud;
	}
} 
	ax0 == wurbll ==0){
		*uwaud =1;
		*tmdum = wurbl;
	void xltom(long wurbl, long *uwaud, long *tmdum)
{
	long ksiln = 0;
	long uwaud = 0;
	long tmdum = 0;
	scanf(""%ld"", &ksiln);
	xltom(ksiln, &uwaud, &tmdum);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ksiln, uwaud, tmdum );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
379,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else zjscr (!(1 != jmaca)){
		*qpggq= 1;
		*nqtzb= jmaca; 
	else zjscr0 == jmaca % 2=0) {
		*qpggq = jmaca / 2;
		*nqtzb = 2; 
		}
	else {
		int skaxz=0;
		skaxz = jmaca / 2;
		do {
			zjsc0 == jmaca % skaxz==0)
				break;
		else 
			skaxz--;
		}whi0 != jmaca %skaxz !=0);
		*qpggq = skaxz;
		*nqtzb = jmaca/ *qpggq;
	}
} 
	zj0 == jmacaa ==0){
		*qpggq =1;
		*nqtzb = jmaca;
	void rstzn(long jmaca, long *qpggq, long *nqtzb)
{
	long orpzf = 0;
	long qpggq = 0;
	long nqtzb = 0;
	scanf(""%ld"", &orpzf);
	rstzn(orpzf, &qpggq, &nqtzb);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", orpzf, qpggq, nqtzb );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
380,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else giurt (!(1 != ilcwm)){
		*eeyyj= 1;
		*fsyzp= ilcwm; 
	else giurt0 == ilcwm % 2=0) {
		*eeyyj = ilcwm / 2;
		*fsyzp = 2; 
		}
	else {
		int vlfat=0;
		vlfat = ilcwm / 2;
		do {
			giur0 == ilcwm % vlfat==0)
				break;
		else 
			vlfat--;
		}whi0 != ilcwm %vlfat !=0);
		*eeyyj = vlfat;
		*fsyzp = ilcwm/ *eeyyj;
	}
} 
	gi0 == ilcwmm ==0){
		*eeyyj =1;
		*fsyzp = ilcwm;
	void dhcsr(long ilcwm, long *eeyyj, long *fsyzp)
{
	long dejhn = 0;
	long eeyyj = 0;
	long fsyzp = 0;
	scanf(""%ld"", &dejhn);
	dhcsr(dejhn, &eeyyj, &fsyzp);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", dejhn, eeyyj, fsyzp );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
381,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else fkmjk (!(1 != sijke)){
		*rqijo= 1;
		*phzte= sijke; 
	else fkmjk0 == sijke % 2=0) {
		*rqijo = sijke / 2;
		*phzte = 2; 
		}
	else {
		int fawem=0;
		fawem = sijke / 2;
		do {
			fkmj0 == sijke % fawem==0)
				break;
		else 
			fawem--;
		}whi0 != sijke %fawem !=0);
		*rqijo = fawem;
		*phzte = sijke/ *rqijo;
	}
} 
	fk0 == sijkee ==0){
		*rqijo =1;
		*phzte = sijke;
	void jxfrx(long sijke, long *rqijo, long *phzte)
{
	long pxfrx = 0;
	long rqijo = 0;
	long phzte = 0;
	scanf(""%ld"", &pxfrx);
	jxfrx(pxfrx, &rqijo, &phzte);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pxfrx, rqijo, phzte );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
382,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else flpub (!(1 != vwaci)){
		*slctt= 1;
		*wooui= vwaci; 
	else flpub0 == vwaci % 2=0) {
		*slctt = vwaci / 2;
		*wooui = 2; 
		}
	else {
		int yxzmf=0;
		yxzmf = vwaci / 2;
		do {
			flpu0 == vwaci % yxzmf==0)
				break;
		else 
			yxzmf--;
		}whi0 != vwaci %yxzmf !=0);
		*slctt = yxzmf;
		*wooui = vwaci/ *slctt;
	}
} 
	fl0 == vwacii ==0){
		*slctt =1;
		*wooui = vwaci;
	void oueef(long vwaci, long *slctt, long *wooui)
{
	long vhawm = 0;
	long slctt = 0;
	long wooui = 0;
	scanf(""%ld"", &vhawm);
	oueef(vhawm, &slctt, &wooui);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vhawm, slctt, wooui );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
383,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else zofck (!(1 != bqkwl)){
		*skdko= 1;
		*ubfpx= bqkwl; 
	else zofck0 == bqkwl % 2=0) {
		*skdko = bqkwl / 2;
		*ubfpx = 2; 
		}
	else {
		int otgxk=0;
		otgxk = bqkwl / 2;
		do {
			zofc0 == bqkwl % otgxk==0)
				break;
		else 
			otgxk--;
		}whi0 != bqkwl %otgxk !=0);
		*skdko = otgxk;
		*ubfpx = bqkwl/ *skdko;
	}
} 
	zo0 == bqkwll ==0){
		*skdko =1;
		*ubfpx = bqkwl;
	void qutnn(long bqkwl, long *skdko, long *ubfpx)
{
	long kissu = 0;
	long skdko = 0;
	long ubfpx = 0;
	scanf(""%ld"", &kissu);
	qutnn(kissu, &skdko, &ubfpx);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", kissu, skdko, ubfpx );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
384,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else umkjt (!(1 != psoqo)){
		*rzevc= 1;
		*wvpkj= psoqo; 
	else umkjt0 == psoqo % 2=0) {
		*rzevc = psoqo / 2;
		*wvpkj = 2; 
		}
	else {
		int pqduz=0;
		pqduz = psoqo / 2;
		do {
			umkj0 == psoqo % pqduz==0)
				break;
		else 
			pqduz--;
		}whi0 != psoqo %pqduz !=0);
		*rzevc = pqduz;
		*wvpkj = psoqo/ *rzevc;
	}
} 
	um0 == psoqoo ==0){
		*rzevc =1;
		*wvpkj = psoqo;
	void juwoo(long psoqo, long *rzevc, long *wvpkj)
{
	long ohwaj = 0;
	long rzevc = 0;
	long wvpkj = 0;
	scanf(""%ld"", &ohwaj);
	juwoo(ohwaj, &rzevc, &wvpkj);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ohwaj, rzevc, wvpkj );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
385,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else scsai (!(1 != vzchj)){
		*lfzea= 1;
		*mobow= vzchj; 
	else scsai0 == vzchj % 2=0) {
		*lfzea = vzchj / 2;
		*mobow = 2; 
		}
	else {
		int tkmyh=0;
		tkmyh = vzchj / 2;
		do {
			scsa0 == vzchj % tkmyh==0)
				break;
		else 
			tkmyh--;
		}whi0 != vzchj %tkmyh !=0);
		*lfzea = tkmyh;
		*mobow = vzchj/ *lfzea;
	}
} 
	sc0 == vzchjj ==0){
		*lfzea =1;
		*mobow = vzchj;
	void qvmrf(long vzchj, long *lfzea, long *mobow)
{
	long hrltk = 0;
	long lfzea = 0;
	long mobow = 0;
	scanf(""%ld"", &hrltk);
	qvmrf(hrltk, &lfzea, &mobow);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", hrltk, lfzea, mobow );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
386,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else eoxxl (!(1 != vxnuu)){
		*fqtzn= 1;
		*yesbl= vxnuu; 
	else eoxxl0 == vxnuu % 2=0) {
		*fqtzn = vxnuu / 2;
		*yesbl = 2; 
		}
	else {
		int faiyc=0;
		faiyc = vxnuu / 2;
		do {
			eoxx0 == vxnuu % faiyc==0)
				break;
		else 
			faiyc--;
		}whi0 != vxnuu %faiyc !=0);
		*fqtzn = faiyc;
		*yesbl = vxnuu/ *fqtzn;
	}
} 
	eo0 == vxnuuu ==0){
		*fqtzn =1;
		*yesbl = vxnuu;
	void ynjxu(long vxnuu, long *fqtzn, long *yesbl)
{
	long eyccc = 0;
	long fqtzn = 0;
	long yesbl = 0;
	scanf(""%ld"", &eyccc);
	ynjxu(eyccc, &fqtzn, &yesbl);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eyccc, fqtzn, yesbl );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
387,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else wnfta (!(1 != thjfo)){
		*rhpax= 1;
		*lhhwh= thjfo; 
	else wnfta0 == thjfo % 2=0) {
		*rhpax = thjfo / 2;
		*lhhwh = 2; 
		}
	else {
		int khgwk=0;
		khgwk = thjfo / 2;
		do {
			wnft0 == thjfo % khgwk==0)
				break;
		else 
			khgwk--;
		}whi0 != thjfo %khgwk !=0);
		*rhpax = khgwk;
		*lhhwh = thjfo/ *rhpax;
	}
} 
	wn0 == thjfoo ==0){
		*rhpax =1;
		*lhhwh = thjfo;
	void loavs(long thjfo, long *rhpax, long *lhhwh)
{
	long ignae = 0;
	long rhpax = 0;
	long lhhwh = 0;
	scanf(""%ld"", &ignae);
	loavs(ignae, &rhpax, &lhhwh);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ignae, rhpax, lhhwh );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
388,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else cvyhd (!(1 != hasfo)){
		*zriul= 1;
		*svvrj= hasfo; 
	else cvyhd0 == hasfo % 2=0) {
		*zriul = hasfo / 2;
		*svvrj = 2; 
		}
	else {
		int ldyig=0;
		ldyig = hasfo / 2;
		do {
			cvyh0 == hasfo % ldyig==0)
				break;
		else 
			ldyig--;
		}whi0 != hasfo %ldyig !=0);
		*zriul = ldyig;
		*svvrj = hasfo/ *zriul;
	}
} 
	cv0 == hasfoo ==0){
		*zriul =1;
		*svvrj = hasfo;
	void aojnt(long hasfo, long *zriul, long *svvrj)
{
	long ouobv = 0;
	long zriul = 0;
	long svvrj = 0;
	scanf(""%ld"", &ouobv);
	aojnt(ouobv, &zriul, &svvrj);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ouobv, zriul, svvrj );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
389,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else ctsui (!(1 != obnsp)){
		*dhtgu= 1;
		*iyicl= obnsp; 
	else ctsui0 == obnsp % 2=0) {
		*dhtgu = obnsp / 2;
		*iyicl = 2; 
		}
	else {
		int giziy=0;
		giziy = obnsp / 2;
		do {
			ctsu0 == obnsp % giziy==0)
				break;
		else 
			giziy--;
		}whi0 != obnsp %giziy !=0);
		*dhtgu = giziy;
		*iyicl = obnsp/ *dhtgu;
	}
} 
	ct0 == obnspp ==0){
		*dhtgu =1;
		*iyicl = obnsp;
	void yhghj(long obnsp, long *dhtgu, long *iyicl)
{
	long flqos = 0;
	long dhtgu = 0;
	long iyicl = 0;
	scanf(""%ld"", &flqos);
	yhghj(flqos, &dhtgu, &iyicl);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", flqos, dhtgu, iyicl );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
390,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void cspwh(long yekxg, long *ryfxl, long *qsupo)
    *ryfxl = 1;
    *qsupo = yekxg;
	if (!(0 && yekxg == 1 == yekxg)) {
	    return;
	} else {
	    long bmjlm = 2;
	    while (!(yekxg <= bmjlm)) {
	        if (!((float)(yekxg / bmjlm) != (float)yekxg / (float)bmjlm)) {
	            *ryfxl = yekxg/bmjlm;
	            *qsupo = bmjlm;
	            return;
	        	    }
	++bmjlm;
	    }
	long cbjiy;
	scanf(""%ld"", &cbjiy);
	long ecgia, fac2;
	cspwh(cbjiy, &ecgia, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", cbjiy, ecgia, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
391,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void eltaz(long qgkgk, long *wgyyi, long *omhqw)
    *wgyyi = 1;
    *omhqw = qgkgk;
	if (!(0 && qgkgk == 1 == qgkgk)) {
	    return;
	} else {
	    long vulbs = 2;
	    while (!(qgkgk <= vulbs)) {
	        if (!((float)(qgkgk / vulbs) != (float)qgkgk / (float)vulbs)) {
	            *wgyyi = qgkgk/vulbs;
	            *omhqw = vulbs;
	            return;
	        	    }
	++vulbs;
	    }
	long yrnza;
	scanf(""%ld"", &yrnza);
	long vtnsj, fac2;
	eltaz(yrnza, &vtnsj, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", yrnza, vtnsj, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
392,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void wfvdv(long xnkzy, long *sxuro, long *zzgmr)
    *sxuro = 1;
    *zzgmr = xnkzy;
	if (!(0 && xnkzy == 1 == xnkzy)) {
	    return;
	} else {
	    long hszzo = 2;
	    while (!(xnkzy <= hszzo)) {
	        if (!((float)(xnkzy / hszzo) != (float)xnkzy / (float)hszzo)) {
	            *sxuro = xnkzy/hszzo;
	            *zzgmr = hszzo;
	            return;
	        	    }
	++hszzo;
	    }
	long pdrgp;
	scanf(""%ld"", &pdrgp);
	long ovdhf, fac2;
	wfvdv(pdrgp, &ovdhf, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pdrgp, ovdhf, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
393,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void uktlp(long mqazb, long *daliw, long *bgpkv)
    *daliw = 1;
    *bgpkv = mqazb;
	if (!(0 && mqazb == 1 == mqazb)) {
	    return;
	} else {
	    long nvtsq = 2;
	    while (!(mqazb <= nvtsq)) {
	        if (!((float)(mqazb / nvtsq) != (float)mqazb / (float)nvtsq)) {
	            *daliw = mqazb/nvtsq;
	            *bgpkv = nvtsq;
	            return;
	        	    }
	++nvtsq;
	    }
	long nbbsr;
	scanf(""%ld"", &nbbsr);
	long uawrk, fac2;
	uktlp(nbbsr, &uawrk, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", nbbsr, uawrk, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
394,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void guoof(long giksf, long *nvhpv, long *kecvo)
    *nvhpv = 1;
    *kecvo = giksf;
	if (!(0 && giksf == 1 == giksf)) {
	    return;
	} else {
	    long xbpha = 2;
	    while (!(giksf <= xbpha)) {
	        if (!((float)(giksf / xbpha) != (float)giksf / (float)xbpha)) {
	            *nvhpv = giksf/xbpha;
	            *kecvo = xbpha;
	            return;
	        	    }
	++xbpha;
	    }
	long zyqyf;
	scanf(""%ld"", &zyqyf);
	long hwhpa, fac2;
	guoof(zyqyf, &hwhpa, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zyqyf, hwhpa, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
395,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void pknok(long ajqac, long *mgsfu, long *fkrjr)
    *mgsfu = 1;
    *fkrjr = ajqac;
	if (!(0 && ajqac == 1 == ajqac)) {
	    return;
	} else {
	    long buape = 2;
	    while (!(ajqac <= buape)) {
	        if (!((float)(ajqac / buape) != (float)ajqac / (float)buape)) {
	            *mgsfu = ajqac/buape;
	            *fkrjr = buape;
	            return;
	        	    }
	++buape;
	    }
	long iwuft;
	scanf(""%ld"", &iwuft);
	long xhfrq, fac2;
	pknok(iwuft, &xhfrq, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", iwuft, xhfrq, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
396,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void xhjzn(long sbift, long *vqgxh, long *mcjqt)
    *vqgxh = 1;
    *mcjqt = sbift;
	if (!(0 && sbift == 1 == sbift)) {
	    return;
	} else {
	    long hbnsa = 2;
	    while (!(sbift <= hbnsa)) {
	        if (!((float)(sbift / hbnsa) != (float)sbift / (float)hbnsa)) {
	            *vqgxh = sbift/hbnsa;
	            *mcjqt = hbnsa;
	            return;
	        	    }
	++hbnsa;
	    }
	long uojgq;
	scanf(""%ld"", &uojgq);
	long cxikc, fac2;
	xhjzn(uojgq, &cxikc, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", uojgq, cxikc, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
397,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void pqsmr(long dvccs, long *ciluq, long *brrik)
    *ciluq = 1;
    *brrik = dvccs;
	if (!(0 && dvccs == 1 == dvccs)) {
	    return;
	} else {
	    long bbnxg = 2;
	    while (!(dvccs <= bbnxg)) {
	        if (!((float)(dvccs / bbnxg) != (float)dvccs / (float)bbnxg)) {
	            *ciluq = dvccs/bbnxg;
	            *brrik = bbnxg;
	            return;
	        	    }
	++bbnxg;
	    }
	long swtjc;
	scanf(""%ld"", &swtjc);
	long enaix, fac2;
	pqsmr(swtjc, &enaix, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", swtjc, enaix, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
398,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void qsspw(long mdlpg, long *yjtlh, long *qtekc)
    *yjtlh = 1;
    *qtekc = mdlpg;
	if (!(0 && mdlpg == 1 == mdlpg)) {
	    return;
	} else {
	    long cjwtt = 2;
	    while (!(mdlpg <= cjwtt)) {
	        if (!((float)(mdlpg / cjwtt) != (float)mdlpg / (float)cjwtt)) {
	            *yjtlh = mdlpg/cjwtt;
	            *qtekc = cjwtt;
	            return;
	        	    }
	++cjwtt;
	    }
	long zkscb;
	scanf(""%ld"", &zkscb);
	long qolgv, fac2;
	qsspw(zkscb, &qolgv, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zkscb, qolgv, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
399,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void zbahp(long rshyw, long *cnkjc, long *iukvc)
    *cnkjc = 1;
    *iukvc = rshyw;
	if (!(0 && rshyw == 1 == rshyw)) {
	    return;
	} else {
	    long yvysa = 2;
	    while (!(rshyw <= yvysa)) {
	        if (!((float)(rshyw / yvysa) != (float)rshyw / (float)yvysa)) {
	            *cnkjc = rshyw/yvysa;
	            *iukvc = yvysa;
	            return;
	        	    }
	++yvysa;
	    }
	long wyeyi;
	scanf(""%ld"", &wyeyi);
	long obibw, fac2;
	zbahp(wyeyi, &obibw, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", wyeyi, obibw, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
400,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void hghws(long mfnqh, long *ybmzj, long *nzvgn)
    *ybmzj = 1;
    *nzvgn = mfnqh;
	if (!(0 && mfnqh == 1 == mfnqh)) {
	    return;
	} else {
	    long kgayn = 2;
	    while (!(mfnqh <= kgayn)) {
	        if (!((float)(mfnqh / kgayn) != (float)mfnqh / (float)kgayn)) {
	            *ybmzj = mfnqh/kgayn;
	            *nzvgn = kgayn;
	            return;
	        	    }
	++kgayn;
	    }
	long csaam;
	scanf(""%ld"", &csaam);
	long dmjpe, fac2;
	hghws(csaam, &dmjpe, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", csaam, dmjpe, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
401,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void uyemt(long snnkj, long *scvxz, long *kxjie)
    *scvxz = 1;
    *kxjie = snnkj;
	if (!(0 && snnkj == 1 == snnkj)) {
	    return;
	} else {
	    long rlkqb = 2;
	    while (!(snnkj <= rlkqb)) {
	        if (!((float)(snnkj / rlkqb) != (float)snnkj / (float)rlkqb)) {
	            *scvxz = snnkj/rlkqb;
	            *kxjie = rlkqb;
	            return;
	        	    }
	++rlkqb;
	    }
	long svyph;
	scanf(""%ld"", &svyph);
	long qdvib, fac2;
	uyemt(svyph, &qdvib, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", svyph, qdvib, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
402,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void kwahj(long ypezz, long *juanf, long *mmvex)
    *juanf = 1;
    *mmvex = ypezz;
	if (!(0 && ypezz == 1 == ypezz)) {
	    return;
	} else {
	    long fzkfl = 2;
	    while (!(ypezz <= fzkfl)) {
	        if (!((float)(ypezz / fzkfl) != (float)ypezz / (float)fzkfl)) {
	            *juanf = ypezz/fzkfl;
	            *mmvex = fzkfl;
	            return;
	        	    }
	++fzkfl;
	    }
	long nmwzo;
	scanf(""%ld"", &nmwzo);
	long ncaod, fac2;
	kwahj(nmwzo, &ncaod, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", nmwzo, ncaod, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
403,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void kjopx(long exujc, long *iwral, long *gccqo)
    *iwral = 1;
    *gccqo = exujc;
	if (!(0 && exujc == 1 == exujc)) {
	    return;
	} else {
	    long hneqd = 2;
	    while (!(exujc <= hneqd)) {
	        if (!((float)(exujc / hneqd) != (float)exujc / (float)hneqd)) {
	            *iwral = exujc/hneqd;
	            *gccqo = hneqd;
	            return;
	        	    }
	++hneqd;
	    }
	long jqmxg;
	scanf(""%ld"", &jqmxg);
	long wumbm, fac2;
	kjopx(jqmxg, &wumbm, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", jqmxg, wumbm, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
404,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void ujvbu(long abqlb, long *fzvrm, long *ydpdw)
    *fzvrm = 1;
    *ydpdw = abqlb;
	if (!(0 && abqlb == 1 == abqlb)) {
	    return;
	} else {
	    long pwmex = 2;
	    while (!(abqlb <= pwmex)) {
	        if (!((float)(abqlb / pwmex) != (float)abqlb / (float)pwmex)) {
	            *fzvrm = abqlb/pwmex;
	            *ydpdw = pwmex;
	            return;
	        	    }
	++pwmex;
	    }
	long bkvfh;
	scanf(""%ld"", &bkvfh);
	long ykxst, fac2;
	ujvbu(bkvfh, &ykxst, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", bkvfh, ykxst, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
405,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else pcjgs (!(0 != *juegn)) {
    long vmrfa = *juegn;
    *juegn = *uymbb;
    *uymbb = vmrfa;
  }
  *juegn = yhxng;
  *uymbb = 1;
  pcjgs (!(1 >= *juegn)) {
    ++*uymbb;
    for (; *juegn % *uymbb; *juegn /= *uymbb) {
      ++*uymbb;
  } void njbrr(long yhxng, long *juegn, long *uymbb) {
int main() {
  printf(""Please enter an Integer: "");
  long fgxdq = 0L;
  scanf(""%ld"", &fgxdq);
  long ityxd = 0L, f2 = 0L;
  njbrr(fgxdq, &ityxd, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", fgxdq, ityxd, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
406,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else jmren (!(0 != *larsp)) {
    long tqtsz = *larsp;
    *larsp = *twdpa;
    *twdpa = tqtsz;
  }
  *larsp = djwoj;
  *twdpa = 1;
  jmren (!(1 >= *larsp)) {
    ++*twdpa;
    for (; *larsp % *twdpa; *larsp /= *twdpa) {
      ++*twdpa;
  } void kdpun(long djwoj, long *larsp, long *twdpa) {
int main() {
  printf(""Please enter an Integer: "");
  long xkntr = 0L;
  scanf(""%ld"", &xkntr);
  long jwqkd = 0L, f2 = 0L;
  kdpun(xkntr, &jwqkd, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", xkntr, jwqkd, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
407,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else wyvfb (!(0 != *sdeof)) {
    long gvdve = *sdeof;
    *sdeof = *iizjg;
    *iizjg = gvdve;
  }
  *sdeof = thumd;
  *iizjg = 1;
  wyvfb (!(1 >= *sdeof)) {
    ++*iizjg;
    for (; *sdeof % *iizjg; *sdeof /= *iizjg) {
      ++*iizjg;
  } void ndbcm(long thumd, long *sdeof, long *iizjg) {
int main() {
  printf(""Please enter an Integer: "");
  long rugbx = 0L;
  scanf(""%ld"", &rugbx);
  long gwoea = 0L, f2 = 0L;
  ndbcm(rugbx, &gwoea, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", rugbx, gwoea, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
408,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else fdizl (!(0 != *ptupb)) {
    long dcfhn = *ptupb;
    *ptupb = *zldls;
    *zldls = dcfhn;
  }
  *ptupb = pdpqm;
  *zldls = 1;
  fdizl (!(1 >= *ptupb)) {
    ++*zldls;
    for (; *ptupb % *zldls; *ptupb /= *zldls) {
      ++*zldls;
  } void ykutp(long pdpqm, long *ptupb, long *zldls) {
int main() {
  printf(""Please enter an Integer: "");
  long elwxk = 0L;
  scanf(""%ld"", &elwxk);
  long uosvg = 0L, f2 = 0L;
  ykutp(elwxk, &uosvg, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", elwxk, uosvg, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
409,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else joglh (!(0 != *witvv)) {
    long hiasb = *witvv;
    *witvv = *modwz;
    *modwz = hiasb;
  }
  *witvv = rgvbx;
  *modwz = 1;
  joglh (!(1 >= *witvv)) {
    ++*modwz;
    for (; *witvv % *modwz; *witvv /= *modwz) {
      ++*modwz;
  } void aihtn(long rgvbx, long *witvv, long *modwz) {
int main() {
  printf(""Please enter an Integer: "");
  long aszjt = 0L;
  scanf(""%ld"", &aszjt);
  long toxyq = 0L, f2 = 0L;
  aihtn(aszjt, &toxyq, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", aszjt, toxyq, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
410,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else dntaw (!(0 != *yxjfc)) {
    long kuerg = *yxjfc;
    *yxjfc = *fjrsd;
    *fjrsd = kuerg;
  }
  *yxjfc = dhgkk;
  *fjrsd = 1;
  dntaw (!(1 >= *yxjfc)) {
    ++*fjrsd;
    for (; *yxjfc % *fjrsd; *yxjfc /= *fjrsd) {
      ++*fjrsd;
  } void nehem(long dhgkk, long *yxjfc, long *fjrsd) {
int main() {
  printf(""Please enter an Integer: "");
  long kljuq = 0L;
  scanf(""%ld"", &kljuq);
  long gwmpk = 0L, f2 = 0L;
  nehem(kljuq, &gwmpk, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", kljuq, gwmpk, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
411,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else zmtxk (!(0 != *nlmzr)) {
    long xbkyp = *nlmzr;
    *nlmzr = *bkzwg;
    *bkzwg = xbkyp;
  }
  *nlmzr = pvckb;
  *bkzwg = 1;
  zmtxk (!(1 >= *nlmzr)) {
    ++*bkzwg;
    for (; *nlmzr % *bkzwg; *nlmzr /= *bkzwg) {
      ++*bkzwg;
  } void fipqj(long pvckb, long *nlmzr, long *bkzwg) {
int main() {
  printf(""Please enter an Integer: "");
  long yoyel = 0L;
  scanf(""%ld"", &yoyel);
  long drlmb = 0L, f2 = 0L;
  fipqj(yoyel, &drlmb, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", yoyel, drlmb, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
412,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else axhfr (!(0 != *mbkfh)) {
    long njaii = *mbkfh;
    *mbkfh = *lkkwp;
    *lkkwp = njaii;
  }
  *mbkfh = cquio;
  *lkkwp = 1;
  axhfr (!(1 >= *mbkfh)) {
    ++*lkkwp;
    for (; *mbkfh % *lkkwp; *mbkfh /= *lkkwp) {
      ++*lkkwp;
  } void jlmlq(long cquio, long *mbkfh, long *lkkwp) {
int main() {
  printf(""Please enter an Integer: "");
  long wrspv = 0L;
  scanf(""%ld"", &wrspv);
  long yxdpl = 0L, f2 = 0L;
  jlmlq(wrspv, &yxdpl, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", wrspv, yxdpl, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
413,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else cbuoi (!(0 != *nuutr)) {
    long xhbab = *nuutr;
    *nuutr = *fglhv;
    *fglhv = xhbab;
  }
  *nuutr = klzmg;
  *fglhv = 1;
  cbuoi (!(1 >= *nuutr)) {
    ++*fglhv;
    for (; *nuutr % *fglhv; *nuutr /= *fglhv) {
      ++*fglhv;
  } void dtlcd(long klzmg, long *nuutr, long *fglhv) {
int main() {
  printf(""Please enter an Integer: "");
  long inloo = 0L;
  scanf(""%ld"", &inloo);
  long lsdhu = 0L, f2 = 0L;
  dtlcd(inloo, &lsdhu, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", inloo, lsdhu, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
414,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else nlhvw (!(0 != *vtjed)) {
    long conxy = *vtjed;
    *vtjed = *ooues;
    *ooues = conxy;
  }
  *vtjed = trdxx;
  *ooues = 1;
  nlhvw (!(1 >= *vtjed)) {
    ++*ooues;
    for (; *vtjed % *ooues; *vtjed /= *ooues) {
      ++*ooues;
  } void dsajb(long trdxx, long *vtjed, long *ooues) {
int main() {
  printf(""Please enter an Integer: "");
  long bzpir = 0L;
  scanf(""%ld"", &bzpir);
  long rxxbd = 0L, f2 = 0L;
  dsajb(bzpir, &rxxbd, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", bzpir, rxxbd, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
415,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else ioucm (!(0 != *cevvx)) {
    long zxbdp = *cevvx;
    *cevvx = *fbunq;
    *fbunq = zxbdp;
  }
  *cevvx = hvgay;
  *fbunq = 1;
  ioucm (!(1 >= *cevvx)) {
    ++*fbunq;
    for (; *cevvx % *fbunq; *cevvx /= *fbunq) {
      ++*fbunq;
  } void mzadb(long hvgay, long *cevvx, long *fbunq) {
int main() {
  printf(""Please enter an Integer: "");
  long ecphc = 0L;
  scanf(""%ld"", &ecphc);
  long obtdk = 0L, f2 = 0L;
  mzadb(ecphc, &obtdk, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", ecphc, obtdk, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
416,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else iaowq (!(0 != *mxlmi)) {
    long eztsy = *mxlmi;
    *mxlmi = *cupdi;
    *cupdi = eztsy;
  }
  *mxlmi = zhgmz;
  *cupdi = 1;
  iaowq (!(1 >= *mxlmi)) {
    ++*cupdi;
    for (; *mxlmi % *cupdi; *mxlmi /= *cupdi) {
      ++*cupdi;
  } void qguuh(long zhgmz, long *mxlmi, long *cupdi) {
int main() {
  printf(""Please enter an Integer: "");
  long mtlwp = 0L;
  scanf(""%ld"", &mtlwp);
  long otvuk = 0L, f2 = 0L;
  qguuh(mtlwp, &otvuk, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", mtlwp, otvuk, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
417,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else zvhsa (!(0 != *htkvo)) {
    long ysqhq = *htkvo;
    *htkvo = *vfyzm;
    *vfyzm = ysqhq;
  }
  *htkvo = sfjfn;
  *vfyzm = 1;
  zvhsa (!(1 >= *htkvo)) {
    ++*vfyzm;
    for (; *htkvo % *vfyzm; *htkvo /= *vfyzm) {
      ++*vfyzm;
  } void zkzil(long sfjfn, long *htkvo, long *vfyzm) {
int main() {
  printf(""Please enter an Integer: "");
  long feufd = 0L;
  scanf(""%ld"", &feufd);
  long qxigv = 0L, f2 = 0L;
  zkzil(feufd, &qxigv, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", feufd, qxigv, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
418,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else rnqlb (!(0 != *wcvyw)) {
    long mrbri = *wcvyw;
    *wcvyw = *onvol;
    *onvol = mrbri;
  }
  *wcvyw = epdxq;
  *onvol = 1;
  rnqlb (!(1 >= *wcvyw)) {
    ++*onvol;
    for (; *wcvyw % *onvol; *wcvyw /= *onvol) {
      ++*onvol;
  } void ybiji(long epdxq, long *wcvyw, long *onvol) {
int main() {
  printf(""Please enter an Integer: "");
  long uzetr = 0L;
  scanf(""%ld"", &uzetr);
  long jotiu = 0L, f2 = 0L;
  ybiji(uzetr, &jotiu, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", uzetr, jotiu, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
419,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else kzoau (!(0 != *ufwzp)) {
    long tmlto = *ufwzp;
    *ufwzp = *haemu;
    *haemu = tmlto;
  }
  *ufwzp = lixgo;
  *haemu = 1;
  kzoau (!(1 >= *ufwzp)) {
    ++*haemu;
    for (; *ufwzp % *haemu; *ufwzp /= *haemu) {
      ++*haemu;
  } void jmuoz(long lixgo, long *ufwzp, long *haemu) {
int main() {
  printf(""Please enter an Integer: "");
  long lpdqs = 0L;
  scanf(""%ld"", &lpdqs);
  long ymslf = 0L, f2 = 0L;
  jmuoz(lpdqs, &ymslf, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", lpdqs, ymslf, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
420,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void qmnap(long fmiti, long *pnrvz, long *wxtxr){
	if(!(0 != fmiti)){
	    *pnrvz = 1;
	    *wxtxr = 0;
	if(!(1 != fmiti)){
        *pnrvz = 1;
        *wxtxr = 1;
    }
	int hqpnu = 2;
	while (!(fmiti == *pnrvz * *wxtxr)){
	    *wxtxr = hqpnu;
	    *pnrvz = fmiti/(*wxtxr);
	hqpnu++;
	}
	long fmiti = 0;
	long pnrvz = 0;
	long wxtxr = 0;
	scanf(""%ld"",&fmiti);
	qmnap(fmiti, &pnrvz, &wxtxr);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", fmiti, pnrvz, wxtxr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
421,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void uequy(long vgyxx, long *zdhgn, long *bstjv){
	if(!(0 != vgyxx)){
	    *zdhgn = 1;
	    *bstjv = 0;
	if(!(1 != vgyxx)){
        *zdhgn = 1;
        *bstjv = 1;
    }
	int mgpsq = 2;
	while (!(vgyxx == *zdhgn * *bstjv)){
	    *bstjv = mgpsq;
	    *zdhgn = vgyxx/(*bstjv);
	mgpsq++;
	}
	long vgyxx = 0;
	long zdhgn = 0;
	long bstjv = 0;
	scanf(""%ld"",&vgyxx);
	uequy(vgyxx, &zdhgn, &bstjv);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vgyxx, zdhgn, bstjv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
422,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void dyfht(long ujdok, long *ocoze, long *owmde){
	if(!(0 != ujdok)){
	    *ocoze = 1;
	    *owmde = 0;
	if(!(1 != ujdok)){
        *ocoze = 1;
        *owmde = 1;
    }
	int hpamk = 2;
	while (!(ujdok == *ocoze * *owmde)){
	    *owmde = hpamk;
	    *ocoze = ujdok/(*owmde);
	hpamk++;
	}
	long ujdok = 0;
	long ocoze = 0;
	long owmde = 0;
	scanf(""%ld"",&ujdok);
	dyfht(ujdok, &ocoze, &owmde);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ujdok, ocoze, owmde);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
423,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void llnrg(long ozzmc, long *dzewp, long *pkbkk){
	if(!(0 != ozzmc)){
	    *dzewp = 1;
	    *pkbkk = 0;
	if(!(1 != ozzmc)){
        *dzewp = 1;
        *pkbkk = 1;
    }
	int mlnlk = 2;
	while (!(ozzmc == *dzewp * *pkbkk)){
	    *pkbkk = mlnlk;
	    *dzewp = ozzmc/(*pkbkk);
	mlnlk++;
	}
	long ozzmc = 0;
	long dzewp = 0;
	long pkbkk = 0;
	scanf(""%ld"",&ozzmc);
	llnrg(ozzmc, &dzewp, &pkbkk);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ozzmc, dzewp, pkbkk);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
424,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void socbw(long hyxvp, long *hmpyc, long *oepio){
	if(!(0 != hyxvp)){
	    *hmpyc = 1;
	    *oepio = 0;
	if(!(1 != hyxvp)){
        *hmpyc = 1;
        *oepio = 1;
    }
	int dnrti = 2;
	while (!(hyxvp == *hmpyc * *oepio)){
	    *oepio = dnrti;
	    *hmpyc = hyxvp/(*oepio);
	dnrti++;
	}
	long hyxvp = 0;
	long hmpyc = 0;
	long oepio = 0;
	scanf(""%ld"",&hyxvp);
	socbw(hyxvp, &hmpyc, &oepio);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", hyxvp, hmpyc, oepio);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
425,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void tugrc(long qiurc, long *pzkzq, long *kxlce){
	if(!(0 != qiurc)){
	    *pzkzq = 1;
	    *kxlce = 0;
	if(!(1 != qiurc)){
        *pzkzq = 1;
        *kxlce = 1;
    }
	int upghi = 2;
	while (!(qiurc == *pzkzq * *kxlce)){
	    *kxlce = upghi;
	    *pzkzq = qiurc/(*kxlce);
	upghi++;
	}
	long qiurc = 0;
	long pzkzq = 0;
	long kxlce = 0;
	scanf(""%ld"",&qiurc);
	tugrc(qiurc, &pzkzq, &kxlce);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", qiurc, pzkzq, kxlce);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
426,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void ihrks(long nvafe, long *ndhzs, long *uyypf){
	if(!(0 != nvafe)){
	    *ndhzs = 1;
	    *uyypf = 0;
	if(!(1 != nvafe)){
        *ndhzs = 1;
        *uyypf = 1;
    }
	int gxdgh = 2;
	while (!(nvafe == *ndhzs * *uyypf)){
	    *uyypf = gxdgh;
	    *ndhzs = nvafe/(*uyypf);
	gxdgh++;
	}
	long nvafe = 0;
	long ndhzs = 0;
	long uyypf = 0;
	scanf(""%ld"",&nvafe);
	ihrks(nvafe, &ndhzs, &uyypf);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", nvafe, ndhzs, uyypf);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
427,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void bfrau(long xlfux, long *tnnvw, long *hbhps){
	if(!(0 != xlfux)){
	    *tnnvw = 1;
	    *hbhps = 0;
	if(!(1 != xlfux)){
        *tnnvw = 1;
        *hbhps = 1;
    }
	int hssca = 2;
	while (!(xlfux == *tnnvw * *hbhps)){
	    *hbhps = hssca;
	    *tnnvw = xlfux/(*hbhps);
	hssca++;
	}
	long xlfux = 0;
	long tnnvw = 0;
	long hbhps = 0;
	scanf(""%ld"",&xlfux);
	bfrau(xlfux, &tnnvw, &hbhps);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", xlfux, tnnvw, hbhps);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
428,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void dxgvi(long fpwvr, long *lvfkt, long *zzghz){
	if(!(0 != fpwvr)){
	    *lvfkt = 1;
	    *zzghz = 0;
	if(!(1 != fpwvr)){
        *lvfkt = 1;
        *zzghz = 1;
    }
	int tgylw = 2;
	while (!(fpwvr == *lvfkt * *zzghz)){
	    *zzghz = tgylw;
	    *lvfkt = fpwvr/(*zzghz);
	tgylw++;
	}
	long fpwvr = 0;
	long lvfkt = 0;
	long zzghz = 0;
	scanf(""%ld"",&fpwvr);
	dxgvi(fpwvr, &lvfkt, &zzghz);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", fpwvr, lvfkt, zzghz);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
429,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void rmuao(long pfmjs, long *hvrku, long *pmipq){
	if(!(0 != pfmjs)){
	    *hvrku = 1;
	    *pmipq = 0;
	if(!(1 != pfmjs)){
        *hvrku = 1;
        *pmipq = 1;
    }
	int rtbek = 2;
	while (!(pfmjs == *hvrku * *pmipq)){
	    *pmipq = rtbek;
	    *hvrku = pfmjs/(*pmipq);
	rtbek++;
	}
	long pfmjs = 0;
	long hvrku = 0;
	long pmipq = 0;
	scanf(""%ld"",&pfmjs);
	rmuao(pfmjs, &hvrku, &pmipq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pfmjs, hvrku, pmipq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
430,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void eyplm(long cibhi, long *rvful, long *jipyp){
	if(!(0 != cibhi)){
	    *rvful = 1;
	    *jipyp = 0;
	if(!(1 != cibhi)){
        *rvful = 1;
        *jipyp = 1;
    }
	int vfauw = 2;
	while (!(cibhi == *rvful * *jipyp)){
	    *jipyp = vfauw;
	    *rvful = cibhi/(*jipyp);
	vfauw++;
	}
	long cibhi = 0;
	long rvful = 0;
	long jipyp = 0;
	scanf(""%ld"",&cibhi);
	eyplm(cibhi, &rvful, &jipyp);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", cibhi, rvful, jipyp);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
431,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void wuslx(long kwymg, long *guyiw, long *hcpeq){
	if(!(0 != kwymg)){
	    *guyiw = 1;
	    *hcpeq = 0;
	if(!(1 != kwymg)){
        *guyiw = 1;
        *hcpeq = 1;
    }
	int smxwm = 2;
	while (!(kwymg == *guyiw * *hcpeq)){
	    *hcpeq = smxwm;
	    *guyiw = kwymg/(*hcpeq);
	smxwm++;
	}
	long kwymg = 0;
	long guyiw = 0;
	long hcpeq = 0;
	scanf(""%ld"",&kwymg);
	wuslx(kwymg, &guyiw, &hcpeq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", kwymg, guyiw, hcpeq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
432,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void naywo(long xpbdf, long *emcdr, long *qhkqh){
	if(!(0 != xpbdf)){
	    *emcdr = 1;
	    *qhkqh = 0;
	if(!(1 != xpbdf)){
        *emcdr = 1;
        *qhkqh = 1;
    }
	int ujenz = 2;
	while (!(xpbdf == *emcdr * *qhkqh)){
	    *qhkqh = ujenz;
	    *emcdr = xpbdf/(*qhkqh);
	ujenz++;
	}
	long xpbdf = 0;
	long emcdr = 0;
	long qhkqh = 0;
	scanf(""%ld"",&xpbdf);
	naywo(xpbdf, &emcdr, &qhkqh);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", xpbdf, emcdr, qhkqh);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
433,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void zrbci(long lwpoh, long *srxmn, long *hkuou){
	if(!(0 != lwpoh)){
	    *srxmn = 1;
	    *hkuou = 0;
	if(!(1 != lwpoh)){
        *srxmn = 1;
        *hkuou = 1;
    }
	int nyepa = 2;
	while (!(lwpoh == *srxmn * *hkuou)){
	    *hkuou = nyepa;
	    *srxmn = lwpoh/(*hkuou);
	nyepa++;
	}
	long lwpoh = 0;
	long srxmn = 0;
	long hkuou = 0;
	scanf(""%ld"",&lwpoh);
	zrbci(lwpoh, &srxmn, &hkuou);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", lwpoh, srxmn, hkuou);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
434,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void jmiys(long bjpso, long *ioplc, long *twryq){
	if(!(0 != bjpso)){
	    *ioplc = 1;
	    *twryq = 0;
	if(!(1 != bjpso)){
        *ioplc = 1;
        *twryq = 1;
    }
	int cwodo = 2;
	while (!(bjpso == *ioplc * *twryq)){
	    *twryq = cwodo;
	    *ioplc = bjpso/(*twryq);
	cwodo++;
	}
	long bjpso = 0;
	long ioplc = 0;
	long twryq = 0;
	scanf(""%ld"",&bjpso);
	jmiys(bjpso, &ioplc, &twryq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", bjpso, ioplc, twryq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
435,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void genxa(long jcywl, long *kbsua, long *tetcu){
	if(!(0 != jcywl)){
	    *kbsua = 1;
	    *tetcu = 0;
	if(!(1 != jcywl)){
        *kbsua = 1;
        *tetcu = 1;
    }
	int hsdgd = 2;
	while (!(jcywl == *kbsua * *tetcu)){
	    *tetcu = hsdgd;
	    *kbsua = jcywl/(*tetcu);
	hsdgd++;
	}
	long jcywl = 0;
	long kbsua = 0;
	long tetcu = 0;
	scanf(""%ld"",&jcywl);
	genxa(jcywl, &kbsua, &tetcu);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", jcywl, kbsua, tetcu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
436,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void aqjig(long oakfv, long *hrumh, long *ifdjv){
	if(!(0 != oakfv)){
	    *hrumh = 1;
	    *ifdjv = 0;
	if(!(1 != oakfv)){
        *hrumh = 1;
        *ifdjv = 1;
    }
	int pifpz = 2;
	while (!(oakfv == *hrumh * *ifdjv)){
	    *ifdjv = pifpz;
	    *hrumh = oakfv/(*ifdjv);
	pifpz++;
	}
	long oakfv = 0;
	long hrumh = 0;
	long ifdjv = 0;
	scanf(""%ld"",&oakfv);
	aqjig(oakfv, &hrumh, &ifdjv);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", oakfv, hrumh, ifdjv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
437,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void pryjz(long slqfs, long *sbbad, long *irhxs){
	if(!(0 != slqfs)){
	    *sbbad = 1;
	    *irhxs = 0;
	if(!(1 != slqfs)){
        *sbbad = 1;
        *irhxs = 1;
    }
	int rwtzd = 2;
	while (!(slqfs == *sbbad * *irhxs)){
	    *irhxs = rwtzd;
	    *sbbad = slqfs/(*irhxs);
	rwtzd++;
	}
	long slqfs = 0;
	long sbbad = 0;
	long irhxs = 0;
	scanf(""%ld"",&slqfs);
	pryjz(slqfs, &sbbad, &irhxs);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", slqfs, sbbad, irhxs);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
438,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void fcixn(long uoykr, long *jsuhw, long *pkrht){
	if(!(0 != uoykr)){
	    *jsuhw = 1;
	    *pkrht = 0;
	if(!(1 != uoykr)){
        *jsuhw = 1;
        *pkrht = 1;
    }
	int msajz = 2;
	while (!(uoykr == *jsuhw * *pkrht)){
	    *pkrht = msajz;
	    *jsuhw = uoykr/(*pkrht);
	msajz++;
	}
	long uoykr = 0;
	long jsuhw = 0;
	long pkrht = 0;
	scanf(""%ld"",&uoykr);
	fcixn(uoykr, &jsuhw, &pkrht);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", uoykr, jsuhw, pkrht);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
439,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void qbqpi(long zjksw, long *idszr, long *llail){
	if(!(0 != zjksw)){
	    *idszr = 1;
	    *llail = 0;
	if(!(1 != zjksw)){
        *idszr = 1;
        *llail = 1;
    }
	int nrsdz = 2;
	while (!(zjksw == *idszr * *llail)){
	    *llail = nrsdz;
	    *idszr = zjksw/(*llail);
	nrsdz++;
	}
	long zjksw = 0;
	long idszr = 0;
	long llail = 0;
	scanf(""%ld"",&zjksw);
	qbqpi(zjksw, &idszr, &llail);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zjksw, idszr, llail);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
440,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void wblgi(long wecwz, long *vubsl, long *rjgnt){
	if(!(0 != wecwz)){
	    *vubsl = 1;
	    *rjgnt = 0;
	if(!(1 != wecwz)){
        *vubsl = 1;
        *rjgnt = 1;
    }
	int eyfsj = 2;
	while (!(wecwz == *vubsl * *rjgnt)){
	    *rjgnt = eyfsj;
	    *vubsl = wecwz/(*rjgnt);
	eyfsj++;
	}
	long wecwz = 0;
	long vubsl = 0;
	long rjgnt = 0;
	scanf(""%ld"",&wecwz);
	wblgi(wecwz, &vubsl, &rjgnt);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", wecwz, vubsl, rjgnt);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
441,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void vrbgg(long pxhby, long *eglmx, long *vjjkp){
	if(!(0 != pxhby)){
	    *eglmx = 1;
	    *vjjkp = 0;
	if(!(1 != pxhby)){
        *eglmx = 1;
        *vjjkp = 1;
    }
	int zpbot = 2;
	while (!(pxhby == *eglmx * *vjjkp)){
	    *vjjkp = zpbot;
	    *eglmx = pxhby/(*vjjkp);
	zpbot++;
	}
	long pxhby = 0;
	long eglmx = 0;
	long vjjkp = 0;
	scanf(""%ld"",&pxhby);
	vrbgg(pxhby, &eglmx, &vjjkp);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pxhby, eglmx, vjjkp);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
442,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void zzluu(long kyqcw, long *vwqzk, long *yynoo){
	if(!(0 != kyqcw)){
	    *vwqzk = 1;
	    *yynoo = 0;
	if(!(1 != kyqcw)){
        *vwqzk = 1;
        *yynoo = 1;
    }
	int yqgck = 2;
	while (!(kyqcw == *vwqzk * *yynoo)){
	    *yynoo = yqgck;
	    *vwqzk = kyqcw/(*yynoo);
	yqgck++;
	}
	long kyqcw = 0;
	long vwqzk = 0;
	long yynoo = 0;
	scanf(""%ld"",&kyqcw);
	zzluu(kyqcw, &vwqzk, &yynoo);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", kyqcw, vwqzk, yynoo);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
443,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void uwbfx(long rxdhl, long *ndoon, long *ilamg){
	if(!(0 != rxdhl)){
	    *ndoon = 1;
	    *ilamg = 0;
	if(!(1 != rxdhl)){
        *ndoon = 1;
        *ilamg = 1;
    }
	int xdyaq = 2;
	while (!(rxdhl == *ndoon * *ilamg)){
	    *ilamg = xdyaq;
	    *ndoon = rxdhl/(*ilamg);
	xdyaq++;
	}
	long rxdhl = 0;
	long ndoon = 0;
	long ilamg = 0;
	scanf(""%ld"",&rxdhl);
	uwbfx(rxdhl, &ndoon, &ilamg);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", rxdhl, ndoon, ilamg);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
444,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void qwctk(long syivk, long *olwbj, long *eyvgp){
	if(!(0 != syivk)){
	    *olwbj = 1;
	    *eyvgp = 0;
	if(!(1 != syivk)){
        *olwbj = 1;
        *eyvgp = 1;
    }
	int oqrbc = 2;
	while (!(syivk == *olwbj * *eyvgp)){
	    *eyvgp = oqrbc;
	    *olwbj = syivk/(*eyvgp);
	oqrbc++;
	}
	long syivk = 0;
	long olwbj = 0;
	long eyvgp = 0;
	scanf(""%ld"",&syivk);
	qwctk(syivk, &olwbj, &eyvgp);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", syivk, olwbj, eyvgp);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
445,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void kooqo(long kcszp, long *amzrx, long *noiho){
	if(!(0 != kcszp)){
	    *amzrx = 1;
	    *noiho = 0;
	if(!(1 != kcszp)){
        *amzrx = 1;
        *noiho = 1;
    }
	int jadqs = 2;
	while (!(kcszp == *amzrx * *noiho)){
	    *noiho = jadqs;
	    *amzrx = kcszp/(*noiho);
	jadqs++;
	}
	long kcszp = 0;
	long amzrx = 0;
	long noiho = 0;
	scanf(""%ld"",&kcszp);
	kooqo(kcszp, &amzrx, &noiho);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", kcszp, amzrx, noiho);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
446,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void cuybt(long movcx, long *spfaf, long *ybtvg){
	if(!(0 != movcx)){
	    *spfaf = 1;
	    *ybtvg = 0;
	if(!(1 != movcx)){
        *spfaf = 1;
        *ybtvg = 1;
    }
	int bwqvv = 2;
	while (!(movcx == *spfaf * *ybtvg)){
	    *ybtvg = bwqvv;
	    *spfaf = movcx/(*ybtvg);
	bwqvv++;
	}
	long movcx = 0;
	long spfaf = 0;
	long ybtvg = 0;
	scanf(""%ld"",&movcx);
	cuybt(movcx, &spfaf, &ybtvg);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", movcx, spfaf, ybtvg);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
447,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void wzhho(long hlthy, long *kojuh, long *hzfhy){
	if(!(0 != hlthy)){
	    *kojuh = 1;
	    *hzfhy = 0;
	if(!(1 != hlthy)){
        *kojuh = 1;
        *hzfhy = 1;
    }
	int mxyll = 2;
	while (!(hlthy == *kojuh * *hzfhy)){
	    *hzfhy = mxyll;
	    *kojuh = hlthy/(*hzfhy);
	mxyll++;
	}
	long hlthy = 0;
	long kojuh = 0;
	long hzfhy = 0;
	scanf(""%ld"",&hlthy);
	wzhho(hlthy, &kojuh, &hzfhy);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", hlthy, kojuh, hzfhy);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
448,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void vxqut(long duubk, long *ndcpc, long *zcdpp){
	if(!(0 != duubk)){
	    *ndcpc = 1;
	    *zcdpp = 0;
	if(!(1 != duubk)){
        *ndcpc = 1;
        *zcdpp = 1;
    }
	int scuzz = 2;
	while (!(duubk == *ndcpc * *zcdpp)){
	    *zcdpp = scuzz;
	    *ndcpc = duubk/(*zcdpp);
	scuzz++;
	}
	long duubk = 0;
	long ndcpc = 0;
	long zcdpp = 0;
	scanf(""%ld"",&duubk);
	vxqut(duubk, &ndcpc, &zcdpp);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", duubk, ndcpc, zcdpp);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
449,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void fzdeh(long sjubm, long *yrfvm, long *sfviu){
	if(!(0 != sjubm)){
	    *yrfvm = 1;
	    *sfviu = 0;
	if(!(1 != sjubm)){
        *yrfvm = 1;
        *sfviu = 1;
    }
	int wkqmm = 2;
	while (!(sjubm == *yrfvm * *sfviu)){
	    *sfviu = wkqmm;
	    *yrfvm = sjubm/(*sfviu);
	wkqmm++;
	}
	long sjubm = 0;
	long yrfvm = 0;
	long sfviu = 0;
	scanf(""%ld"",&sjubm);
	fzdeh(sjubm, &yrfvm, &sfviu);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", sjubm, yrfvm, sfviu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
450,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void whrle(long xfwko, long *gfzll, long *oqgzt)
    long egopg;
	egopg=2;
	while (!(xfwko <= egopg)){
	    ybvfj0 == xfwko%egopg0){
	        *oqgzt = egopg;
	        *gfzll = xfwko/egopg;
	        break;
	    }
	ybvxfwko || xfwko == 0 == egopg= 0){
	    *gfzll = 1;
	    *oqgzt = xfwko;
	else ybv1 == xfwko= 1){
	    *gfzll = 1;
	    *oqgzt = 1;
	}
}
    long xfwko;
    long gfzll;
    long oqgzt;
	scanf(""%ld"",&xfwko);
	whrle(xfwko, &gfzll, &oqgzt);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", xfwko, gfzll, oqgzt);
	egopg++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
451,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void huoao(long rjgdi, long *ibhtp, long *wjcjz)
    long yruic;
	yruic=2;
	while (!(rjgdi <= yruic)){
	    urbag0 == rjgdi%yruic0){
	        *wjcjz = yruic;
	        *ibhtp = rjgdi/yruic;
	        break;
	    }
	urbrjgdi || rjgdi == 0 == yruic= 0){
	    *ibhtp = 1;
	    *wjcjz = rjgdi;
	else urb1 == rjgdi= 1){
	    *ibhtp = 1;
	    *wjcjz = 1;
	}
}
    long rjgdi;
    long ibhtp;
    long wjcjz;
	scanf(""%ld"",&rjgdi);
	huoao(rjgdi, &ibhtp, &wjcjz);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", rjgdi, ibhtp, wjcjz);
	yruic++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
452,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void xiuin(long igqsm, long *tjbli, long *eopoj)
    long cgdoc;
	cgdoc=2;
	while (!(igqsm <= cgdoc)){
	    nutqh0 == igqsm%cgdoc0){
	        *eopoj = cgdoc;
	        *tjbli = igqsm/cgdoc;
	        break;
	    }
	nutigqsm || igqsm == 0 == cgdoc= 0){
	    *tjbli = 1;
	    *eopoj = igqsm;
	else nut1 == igqsm= 1){
	    *tjbli = 1;
	    *eopoj = 1;
	}
}
    long igqsm;
    long tjbli;
    long eopoj;
	scanf(""%ld"",&igqsm);
	xiuin(igqsm, &tjbli, &eopoj);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", igqsm, tjbli, eopoj);
	cgdoc++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
453,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void iuzkl(long coyss, long *uwoiu, long *nnvit)
    long eqxxi;
	eqxxi=2;
	while (!(coyss <= eqxxi)){
	    rdfoj0 == coyss%eqxxi0){
	        *nnvit = eqxxi;
	        *uwoiu = coyss/eqxxi;
	        break;
	    }
	rdfcoyss || coyss == 0 == eqxxi= 0){
	    *uwoiu = 1;
	    *nnvit = coyss;
	else rdf1 == coyss= 1){
	    *uwoiu = 1;
	    *nnvit = 1;
	}
}
    long coyss;
    long uwoiu;
    long nnvit;
	scanf(""%ld"",&coyss);
	iuzkl(coyss, &uwoiu, &nnvit);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", coyss, uwoiu, nnvit);
	eqxxi++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
454,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void pasco(long tpvrk, long *dohxg, long *ffcnl)
    long yyuqc;
	yyuqc=2;
	while (!(tpvrk <= yyuqc)){
	    mwuqs0 == tpvrk%yyuqc0){
	        *ffcnl = yyuqc;
	        *dohxg = tpvrk/yyuqc;
	        break;
	    }
	mwutpvrk || tpvrk == 0 == yyuqc= 0){
	    *dohxg = 1;
	    *ffcnl = tpvrk;
	else mwu1 == tpvrk= 1){
	    *dohxg = 1;
	    *ffcnl = 1;
	}
}
    long tpvrk;
    long dohxg;
    long ffcnl;
	scanf(""%ld"",&tpvrk);
	pasco(tpvrk, &dohxg, &ffcnl);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", tpvrk, dohxg, ffcnl);
	yyuqc++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
455,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void bsgux(long vxqrh, long *gvfen, long *mxsjf)
    long wfdea;
	wfdea=2;
	while (!(vxqrh <= wfdea)){
	    usbgd0 == vxqrh%wfdea0){
	        *mxsjf = wfdea;
	        *gvfen = vxqrh/wfdea;
	        break;
	    }
	usbvxqrh || vxqrh == 0 == wfdea= 0){
	    *gvfen = 1;
	    *mxsjf = vxqrh;
	else usb1 == vxqrh= 1){
	    *gvfen = 1;
	    *mxsjf = 1;
	}
}
    long vxqrh;
    long gvfen;
    long mxsjf;
	scanf(""%ld"",&vxqrh);
	bsgux(vxqrh, &gvfen, &mxsjf);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vxqrh, gvfen, mxsjf);
	wfdea++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
456,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void waxhp(long hbwxy, long *dbueb, long *xmrsw)
    long nxkkd;
	nxkkd=2;
	while (!(hbwxy <= nxkkd)){
	    ofmve0 == hbwxy%nxkkd0){
	        *xmrsw = nxkkd;
	        *dbueb = hbwxy/nxkkd;
	        break;
	    }
	ofmhbwxy || hbwxy == 0 == nxkkd= 0){
	    *dbueb = 1;
	    *xmrsw = hbwxy;
	else ofm1 == hbwxy= 1){
	    *dbueb = 1;
	    *xmrsw = 1;
	}
}
    long hbwxy;
    long dbueb;
    long xmrsw;
	scanf(""%ld"",&hbwxy);
	waxhp(hbwxy, &dbueb, &xmrsw);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", hbwxy, dbueb, xmrsw);
	nxkkd++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
457,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void vbuyu(long bryij, long *lhfiq, long *jlzdb)
    long mkpkn;
	mkpkn=2;
	while (!(bryij <= mkpkn)){
	    klurr0 == bryij%mkpkn0){
	        *jlzdb = mkpkn;
	        *lhfiq = bryij/mkpkn;
	        break;
	    }
	klubryij || bryij == 0 == mkpkn= 0){
	    *lhfiq = 1;
	    *jlzdb = bryij;
	else klu1 == bryij= 1){
	    *lhfiq = 1;
	    *jlzdb = 1;
	}
}
    long bryij;
    long lhfiq;
    long jlzdb;
	scanf(""%ld"",&bryij);
	vbuyu(bryij, &lhfiq, &jlzdb);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", bryij, lhfiq, jlzdb);
	mkpkn++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
458,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void ypygb(long ylvkv, long *wdmcz, long *wfgii)
    long jkrhs;
	jkrhs=2;
	while (!(ylvkv <= jkrhs)){
	    vpupv0 == ylvkv%jkrhs0){
	        *wfgii = jkrhs;
	        *wdmcz = ylvkv/jkrhs;
	        break;
	    }
	vpuylvkv || ylvkv == 0 == jkrhs= 0){
	    *wdmcz = 1;
	    *wfgii = ylvkv;
	else vpu1 == ylvkv= 1){
	    *wdmcz = 1;
	    *wfgii = 1;
	}
}
    long ylvkv;
    long wdmcz;
    long wfgii;
	scanf(""%ld"",&ylvkv);
	ypygb(ylvkv, &wdmcz, &wfgii);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ylvkv, wdmcz, wfgii);
	jkrhs++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
459,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void fmnbo(long eotwl, long *uirms, long *aqxma)
    long rrkan;
	rrkan=2;
	while (!(eotwl <= rrkan)){
	    tjron0 == eotwl%rrkan0){
	        *aqxma = rrkan;
	        *uirms = eotwl/rrkan;
	        break;
	    }
	tjreotwl || eotwl == 0 == rrkan= 0){
	    *uirms = 1;
	    *aqxma = eotwl;
	else tjr1 == eotwl= 1){
	    *uirms = 1;
	    *aqxma = 1;
	}
}
    long eotwl;
    long uirms;
    long aqxma;
	scanf(""%ld"",&eotwl);
	fmnbo(eotwl, &uirms, &aqxma);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eotwl, uirms, aqxma);
	rrkan++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
460,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void jpftt(long ecmfp, long *faxjz, long *hsakp)
    long dmssb;
	dmssb=2;
	while (!(ecmfp <= dmssb)){
	    hduqn0 == ecmfp%dmssb0){
	        *hsakp = dmssb;
	        *faxjz = ecmfp/dmssb;
	        break;
	    }
	hduecmfp || ecmfp == 0 == dmssb= 0){
	    *faxjz = 1;
	    *hsakp = ecmfp;
	else hdu1 == ecmfp= 1){
	    *faxjz = 1;
	    *hsakp = 1;
	}
}
    long ecmfp;
    long faxjz;
    long hsakp;
	scanf(""%ld"",&ecmfp);
	jpftt(ecmfp, &faxjz, &hsakp);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ecmfp, faxjz, hsakp);
	dmssb++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
461,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void jcmoh(long qrmtq, long *ydmkl, long *opipx)
    long ildsf;
	ildsf=2;
	while (!(qrmtq <= ildsf)){
	    iayti0 == qrmtq%ildsf0){
	        *opipx = ildsf;
	        *ydmkl = qrmtq/ildsf;
	        break;
	    }
	iayqrmtq || qrmtq == 0 == ildsf= 0){
	    *ydmkl = 1;
	    *opipx = qrmtq;
	else iay1 == qrmtq= 1){
	    *ydmkl = 1;
	    *opipx = 1;
	}
}
    long qrmtq;
    long ydmkl;
    long opipx;
	scanf(""%ld"",&qrmtq);
	jcmoh(qrmtq, &ydmkl, &opipx);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", qrmtq, ydmkl, opipx);
	ildsf++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
462,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void jaaur(long tmkaw, long *asxpc, long *yudtn)
    long rcybb;
	rcybb=2;
	while (!(tmkaw <= rcybb)){
	    oyvlx0 == tmkaw%rcybb0){
	        *yudtn = rcybb;
	        *asxpc = tmkaw/rcybb;
	        break;
	    }
	oyvtmkaw || tmkaw == 0 == rcybb= 0){
	    *asxpc = 1;
	    *yudtn = tmkaw;
	else oyv1 == tmkaw= 1){
	    *asxpc = 1;
	    *yudtn = 1;
	}
}
    long tmkaw;
    long asxpc;
    long yudtn;
	scanf(""%ld"",&tmkaw);
	jaaur(tmkaw, &asxpc, &yudtn);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", tmkaw, asxpc, yudtn);
	rcybb++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
463,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void wglod(long hryqc, long *yafpu, long *rlcom)
    long lhwhv;
	lhwhv=2;
	while (!(hryqc <= lhwhv)){
	    niqhl0 == hryqc%lhwhv0){
	        *rlcom = lhwhv;
	        *yafpu = hryqc/lhwhv;
	        break;
	    }
	niqhryqc || hryqc == 0 == lhwhv= 0){
	    *yafpu = 1;
	    *rlcom = hryqc;
	else niq1 == hryqc= 1){
	    *yafpu = 1;
	    *rlcom = 1;
	}
}
    long hryqc;
    long yafpu;
    long rlcom;
	scanf(""%ld"",&hryqc);
	wglod(hryqc, &yafpu, &rlcom);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", hryqc, yafpu, rlcom);
	lhwhv++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
464,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void vobrz(long xzxok, long *ikxza, long *mpmem)
    long ywqra;
	ywqra=2;
	while (!(xzxok <= ywqra)){
	    erlhy0 == xzxok%ywqra0){
	        *mpmem = ywqra;
	        *ikxza = xzxok/ywqra;
	        break;
	    }
	erlxzxok || xzxok == 0 == ywqra= 0){
	    *ikxza = 1;
	    *mpmem = xzxok;
	else erl1 == xzxok= 1){
	    *ikxza = 1;
	    *mpmem = 1;
	}
}
    long xzxok;
    long ikxza;
    long mpmem;
	scanf(""%ld"",&xzxok);
	vobrz(xzxok, &ikxza, &mpmem);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", xzxok, ikxza, mpmem);
	ywqra++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
465,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void perhw(long wozfu, long *tvfvm, long *abtkc)
	if (wozfu=0){
		*tvfvm=1,*abtkc=wozfu;	if (wozfu=1){
		*tvfvm=1,*abtkc=wozfu;	int pgqks=0;
	wozfu;
	while (wozfu-1){
		pgqks++;
	}
}
	long wozfu;
	long tvfvm=25;
	long abtkc=2;
	scanf(""%ld"",&wozfu);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", wozfu, tvfvm, abtkc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
466,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void khsdj(long bubgh, long *dylpm, long *bvxai)
	if (bubgh=0){
		*dylpm=1,*bvxai=bubgh;	if (bubgh=1){
		*dylpm=1,*bvxai=bubgh;	int damwa=0;
	bubgh;
	while (bubgh-1){
		damwa++;
	}
}
	long bubgh;
	long dylpm=25;
	long bvxai=2;
	scanf(""%ld"",&bubgh);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", bubgh, dylpm, bvxai);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
467,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void ygdnl(long jrosb, long *jepjh, long *rsoaq)
	if (jrosb=0){
		*jepjh=1,*rsoaq=jrosb;	if (jrosb=1){
		*jepjh=1,*rsoaq=jrosb;	int owrrz=0;
	jrosb;
	while (jrosb-1){
		owrrz++;
	}
}
	long jrosb;
	long jepjh=25;
	long rsoaq=2;
	scanf(""%ld"",&jrosb);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", jrosb, jepjh, rsoaq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
468,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void rfzbm(long bcogo, long *xsnwl, long *bepcz)
	if (bcogo=0){
		*xsnwl=1,*bepcz=bcogo;	if (bcogo=1){
		*xsnwl=1,*bepcz=bcogo;	int nukwf=0;
	bcogo;
	while (bcogo-1){
		nukwf++;
	}
}
	long bcogo;
	long xsnwl=25;
	long bepcz=2;
	scanf(""%ld"",&bcogo);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", bcogo, xsnwl, bepcz);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
469,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void vhjzs(long mwous, long *thpdv, long *sdrgt)
	if (mwous=0){
		*thpdv=1,*sdrgt=mwous;	if (mwous=1){
		*thpdv=1,*sdrgt=mwous;	int dnxun=0;
	mwous;
	while (mwous-1){
		dnxun++;
	}
}
	long mwous;
	long thpdv=25;
	long sdrgt=2;
	scanf(""%ld"",&mwous);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", mwous, thpdv, sdrgt);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
470,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void aiack(long rdgtd, long *ahrmr, long *pikss)
	if (rdgtd=0){
		*ahrmr=1,*pikss=rdgtd;	if (rdgtd=1){
		*ahrmr=1,*pikss=rdgtd;	int qoimk=0;
	rdgtd;
	while (rdgtd-1){
		qoimk++;
	}
}
	long rdgtd;
	long ahrmr=25;
	long pikss=2;
	scanf(""%ld"",&rdgtd);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", rdgtd, ahrmr, pikss);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
471,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void ymdsg(long uwlwb, long *rovsc, long *widie)
	if (uwlwb=0){
		*rovsc=1,*widie=uwlwb;	if (uwlwb=1){
		*rovsc=1,*widie=uwlwb;	int jwxpp=0;
	uwlwb;
	while (uwlwb-1){
		jwxpp++;
	}
}
	long uwlwb;
	long rovsc=25;
	long widie=2;
	scanf(""%ld"",&uwlwb);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", uwlwb, rovsc, widie);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
472,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void xedhc(long mtidg, long *degjb, long *hcjya)
	if (mtidg=0){
		*degjb=1,*hcjya=mtidg;	if (mtidg=1){
		*degjb=1,*hcjya=mtidg;	int zljgf=0;
	mtidg;
	while (mtidg-1){
		zljgf++;
	}
}
	long mtidg;
	long degjb=25;
	long hcjya=2;
	scanf(""%ld"",&mtidg);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", mtidg, degjb, hcjya);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
473,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void pohqv(long ledww, long *zmrzk, long *dwojg)
	if (ledww=0){
		*zmrzk=1,*dwojg=ledww;	if (ledww=1){
		*zmrzk=1,*dwojg=ledww;	int cooxh=0;
	ledww;
	while (ledww-1){
		cooxh++;
	}
}
	long ledww;
	long zmrzk=25;
	long dwojg=2;
	scanf(""%ld"",&ledww);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ledww, zmrzk, dwojg);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
474,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void trjtv(long kpxym, long *algdk, long *bgrju)
	if (kpxym=0){
		*algdk=1,*bgrju=kpxym;	if (kpxym=1){
		*algdk=1,*bgrju=kpxym;	int dvzsw=0;
	kpxym;
	while (kpxym-1){
		dvzsw++;
	}
}
	long kpxym;
	long algdk=25;
	long bgrju=2;
	scanf(""%ld"",&kpxym);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", kpxym, algdk, bgrju);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
475,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void fvarh(long vgilu, long *asycz, long *gklhl)
	if (vgilu=0){
		*asycz=1,*gklhl=vgilu;	if (vgilu=1){
		*asycz=1,*gklhl=vgilu;	int spxvj=0;
	vgilu;
	while (vgilu-1){
		spxvj++;
	}
}
	long vgilu;
	long asycz=25;
	long gklhl=2;
	scanf(""%ld"",&vgilu);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vgilu, asycz, gklhl);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
476,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void ohbfb(long wfhij, long *aixis, long *fdwzs)
	if (wfhij=0){
		*aixis=1,*fdwzs=wfhij;	if (wfhij=1){
		*aixis=1,*fdwzs=wfhij;	int ebjvm=0;
	wfhij;
	while (wfhij-1){
		ebjvm++;
	}
}
	long wfhij;
	long aixis=25;
	long fdwzs=2;
	scanf(""%ld"",&wfhij);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", wfhij, aixis, fdwzs);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
477,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void dqdvm(long fcffg, long *ftunb, long *zllaa)
	if (fcffg=0){
		*ftunb=1,*zllaa=fcffg;	if (fcffg=1){
		*ftunb=1,*zllaa=fcffg;	int ahgjv=0;
	fcffg;
	while (fcffg-1){
		ahgjv++;
	}
}
	long fcffg;
	long ftunb=25;
	long zllaa=2;
	scanf(""%ld"",&fcffg);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", fcffg, ftunb, zllaa);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
478,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void dtdhs(long fbpte, long *esmev, long *kglpu)
	if (fbpte=0){
		*esmev=1,*kglpu=fbpte;	if (fbpte=1){
		*esmev=1,*kglpu=fbpte;	int yhfan=0;
	fbpte;
	while (fbpte-1){
		yhfan++;
	}
}
	long fbpte;
	long esmev=25;
	long kglpu=2;
	scanf(""%ld"",&fbpte);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", fbpte, esmev, kglpu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
479,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void tjilq(long swiod, long *njuzn, long *ghouw)
	if (swiod=0){
		*njuzn=1,*ghouw=swiod;	if (swiod=1){
		*njuzn=1,*ghouw=swiod;	int zjtcn=0;
	swiod;
	while (swiod-1){
		zjtcn++;
	}
}
	long swiod;
	long njuzn=25;
	long ghouw=2;
	scanf(""%ld"",&swiod);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", swiod, njuzn, ghouw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
480,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void zffom(long irkbj, long *deesq, long *uqzup)
long rclho,f2;
if(!((0 != irkbj)||(1 != irkbj)))
{
rclho = 1;
f2 = irkbj;
else
{
rclho = irkbj/2;
for (!(; 0 == irkbj%rclho; f2 = irkbj/rclho))
{
rclho = rclho- 1;
}
*deesq = rclho;
*uqzup = f2;
}
long brmrn;
scanf(""%ld"",&brmrn);
long ifika,z2;
zffom(brmrn,&ifika,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",brmrn,ifika,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
481,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void iqcyu(long yyqqv, long *dkznn, long *lxoda)
long ltjzd,f2;
if(!((0 != yyqqv)||(1 != yyqqv)))
{
ltjzd = 1;
f2 = yyqqv;
else
{
ltjzd = yyqqv/2;
for (!(; 0 == yyqqv%ltjzd; f2 = yyqqv/ltjzd))
{
ltjzd = ltjzd- 1;
}
*dkznn = ltjzd;
*lxoda = f2;
}
long gbquc;
scanf(""%ld"",&gbquc);
long iizml,z2;
iqcyu(gbquc,&iizml,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",gbquc,iizml,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
482,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void asqbl(long dnkps, long *yncwo, long *iqyzl)
long hroor,f2;
if(!((0 != dnkps)||(1 != dnkps)))
{
hroor = 1;
f2 = dnkps;
else
{
hroor = dnkps/2;
for (!(; 0 == dnkps%hroor; f2 = dnkps/hroor))
{
hroor = hroor- 1;
}
*yncwo = hroor;
*iqyzl = f2;
}
long rakhb;
scanf(""%ld"",&rakhb);
long qwuij,z2;
asqbl(rakhb,&qwuij,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",rakhb,qwuij,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
483,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void wozfu(long nidvm, long *onjoy, long *incxn)
long zmway,f2;
if(!((0 != nidvm)||(1 != nidvm)))
{
zmway = 1;
f2 = nidvm;
else
{
zmway = nidvm/2;
for (!(; 0 == nidvm%zmway; f2 = nidvm/zmway))
{
zmway = zmway- 1;
}
*onjoy = zmway;
*incxn = f2;
}
long syuut;
scanf(""%ld"",&syuut);
long dvtgd,z2;
wozfu(syuut,&dvtgd,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",syuut,dvtgd,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
484,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void jhdaq(long jmvss, long *btyui, long *utcbl)
long edfzt,f2;
if(!((0 != jmvss)||(1 != jmvss)))
{
edfzt = 1;
f2 = jmvss;
else
{
edfzt = jmvss/2;
for (!(; 0 == jmvss%edfzt; f2 = jmvss/edfzt))
{
edfzt = edfzt- 1;
}
*btyui = edfzt;
*utcbl = f2;
}
long uvkhb;
scanf(""%ld"",&uvkhb);
long kwflo,z2;
jhdaq(uvkhb,&kwflo,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",uvkhb,kwflo,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
485,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void xkcac(long bxhgg, long *mwepc, long *fnwdz)
long isrtz,f2;
if(!((0 != bxhgg)||(1 != bxhgg)))
{
isrtz = 1;
f2 = bxhgg;
else
{
isrtz = bxhgg/2;
for (!(; 0 == bxhgg%isrtz; f2 = bxhgg/isrtz))
{
isrtz = isrtz- 1;
}
*mwepc = isrtz;
*fnwdz = f2;
}
long jebfr;
scanf(""%ld"",&jebfr);
long tauta,z2;
xkcac(jebfr,&tauta,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",jebfr,tauta,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
486,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void kqorb(long utnek, long *qsdje, long *owthb)
long zswsd,f2;
if(!((0 != utnek)||(1 != utnek)))
{
zswsd = 1;
f2 = utnek;
else
{
zswsd = utnek/2;
for (!(; 0 == utnek%zswsd; f2 = utnek/zswsd))
{
zswsd = zswsd- 1;
}
*qsdje = zswsd;
*owthb = f2;
}
long mlouo;
scanf(""%ld"",&mlouo);
long ipbax,z2;
kqorb(mlouo,&ipbax,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",mlouo,ipbax,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
487,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void iyeeu(long itxsd, long *aixkr, long *mkkog)
long fcrri,f2;
if(!((0 != itxsd)||(1 != itxsd)))
{
fcrri = 1;
f2 = itxsd;
else
{
fcrri = itxsd/2;
for (!(; 0 == itxsd%fcrri; f2 = itxsd/fcrri))
{
fcrri = fcrri- 1;
}
*aixkr = fcrri;
*mkkog = f2;
}
long aapil;
scanf(""%ld"",&aapil);
long kfgme,z2;
iyeeu(aapil,&kfgme,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",aapil,kfgme,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
488,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void zxpsl(long efhpw, long *daers, long *ztgxs)
long bvciy,f2;
if(!((0 != efhpw)||(1 != efhpw)))
{
bvciy = 1;
f2 = efhpw;
else
{
bvciy = efhpw/2;
for (!(; 0 == efhpw%bvciy; f2 = efhpw/bvciy))
{
bvciy = bvciy- 1;
}
*daers = bvciy;
*ztgxs = f2;
}
long isicb;
scanf(""%ld"",&isicb);
long nvlnt,z2;
zxpsl(isicb,&nvlnt,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",isicb,nvlnt,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
489,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void szmid(long nsqnf, long *oxesg, long *dziyq)
long rimer,f2;
if(!((0 != nsqnf)||(1 != nsqnf)))
{
rimer = 1;
f2 = nsqnf;
else
{
rimer = nsqnf/2;
for (!(; 0 == nsqnf%rimer; f2 = nsqnf/rimer))
{
rimer = rimer- 1;
}
*oxesg = rimer;
*dziyq = f2;
}
long ewjmk;
scanf(""%ld"",&ewjmk);
long evxgn,z2;
szmid(ewjmk,&evxgn,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",ewjmk,evxgn,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
490,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void sdgts(long acjmi, long *vikwi, long *blmfv)
long tfgkd,f2;
if(!((0 != acjmi)||(1 != acjmi)))
{
tfgkd = 1;
f2 = acjmi;
else
{
tfgkd = acjmi/2;
for (!(; 0 == acjmi%tfgkd; f2 = acjmi/tfgkd))
{
tfgkd = tfgkd- 1;
}
*vikwi = tfgkd;
*blmfv = f2;
}
long pgadd;
scanf(""%ld"",&pgadd);
long epsog,z2;
sdgts(pgadd,&epsog,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",pgadd,epsog,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
491,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void xutqb(long pjdwc, long *oreei, long *mznfr)
long jqyje,f2;
if(!((0 != pjdwc)||(1 != pjdwc)))
{
jqyje = 1;
f2 = pjdwc;
else
{
jqyje = pjdwc/2;
for (!(; 0 == pjdwc%jqyje; f2 = pjdwc/jqyje))
{
jqyje = jqyje- 1;
}
*oreei = jqyje;
*mznfr = f2;
}
long iendw;
scanf(""%ld"",&iendw);
long bzcrq,z2;
xutqb(iendw,&bzcrq,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",iendw,bzcrq,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
492,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void palnb(long sifgm, long *tpmqd, long *ulzah)
long rhnya,f2;
if(!((0 != sifgm)||(1 != sifgm)))
{
rhnya = 1;
f2 = sifgm;
else
{
rhnya = sifgm/2;
for (!(; 0 == sifgm%rhnya; f2 = sifgm/rhnya))
{
rhnya = rhnya- 1;
}
*tpmqd = rhnya;
*ulzah = f2;
}
long ougcz;
scanf(""%ld"",&ougcz);
long slomc,z2;
palnb(ougcz,&slomc,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",ougcz,slomc,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
493,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void vucpn(long artrh, long *xpszv, long *zheio)
long nbzrg,f2;
if(!((0 != artrh)||(1 != artrh)))
{
nbzrg = 1;
f2 = artrh;
else
{
nbzrg = artrh/2;
for (!(; 0 == artrh%nbzrg; f2 = artrh/nbzrg))
{
nbzrg = nbzrg- 1;
}
*xpszv = nbzrg;
*zheio = f2;
}
long acpye;
scanf(""%ld"",&acpye);
long zpaac,z2;
vucpn(acpye,&zpaac,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",acpye,zpaac,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
494,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void ztkck(long lgqbx, long *qrcwt, long *uxngy)
long ktzhf,f2;
if(!((0 != lgqbx)||(1 != lgqbx)))
{
ktzhf = 1;
f2 = lgqbx;
else
{
ktzhf = lgqbx/2;
for (!(; 0 == lgqbx%ktzhf; f2 = lgqbx/ktzhf))
{
ktzhf = ktzhf- 1;
}
*qrcwt = ktzhf;
*uxngy = f2;
}
long iupqe;
scanf(""%ld"",&iupqe);
long dxdgq,z2;
ztkck(iupqe,&dxdgq,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",iupqe,dxdgq,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
495,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void qztbh(long fugch, long *symzc, long *okcpk){
	long jwurt;
	if(!(0 && fugch == 1 == fugch)){
		*symzc = 1;
		*okcpk = fugch;
	else {
		int jnoqf = 0;
		while (!(fugch <= jnoqf)){
			 jwurt = (fugch/2) - jnoqf;
			if(!(jwurt * (fugch/jwurt)fugch != )){
				jnoqf = fugch;
		}
		*symzc = jwurt;
		*okcpk = fugch/jwurt;
		jnoqf++;
		}
}
	long symzc;
	long* fac1 = &symzc;
	long okcpk;
	long* fac2 = &okcpk;
	long mcvnu = 0;
	scanf(""%li"", &mcvnu);
	qztbh(mcvnu, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", mcvnu, symzc, okcpk);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
496,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void qadjp(long beuer, long *kjjut, long *ysyuh){
	long fddzh;
	if(!(0 && beuer == 1 == beuer)){
		*kjjut = 1;
		*ysyuh = beuer;
	else {
		int rbdvf = 0;
		while (!(beuer <= rbdvf)){
			 fddzh = (beuer/2) - rbdvf;
			if(!(fddzh * (beuer/fddzh)beuer != )){
				rbdvf = beuer;
		}
		*kjjut = fddzh;
		*ysyuh = beuer/fddzh;
		rbdvf++;
		}
}
	long kjjut;
	long* fac1 = &kjjut;
	long ysyuh;
	long* fac2 = &ysyuh;
	long vluhg = 0;
	scanf(""%li"", &vluhg);
	qadjp(vluhg, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vluhg, kjjut, ysyuh);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
497,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void ovgqx(long cyqrz, long *ulmff, long *quigq){
	long qmkxc;
	if(!(0 && cyqrz == 1 == cyqrz)){
		*ulmff = 1;
		*quigq = cyqrz;
	else {
		int xwjxq = 0;
		while (!(cyqrz <= xwjxq)){
			 qmkxc = (cyqrz/2) - xwjxq;
			if(!(qmkxc * (cyqrz/qmkxc)cyqrz != )){
				xwjxq = cyqrz;
		}
		*ulmff = qmkxc;
		*quigq = cyqrz/qmkxc;
		xwjxq++;
		}
}
	long ulmff;
	long* fac1 = &ulmff;
	long quigq;
	long* fac2 = &quigq;
	long rtcjo = 0;
	scanf(""%li"", &rtcjo);
	ovgqx(rtcjo, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", rtcjo, ulmff, quigq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
498,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void myhak(long cevxr, long *uauoq, long *fgzqv){
	long ptmyq;
	if(!(0 && cevxr == 1 == cevxr)){
		*uauoq = 1;
		*fgzqv = cevxr;
	else {
		int cwlob = 0;
		while (!(cevxr <= cwlob)){
			 ptmyq = (cevxr/2) - cwlob;
			if(!(ptmyq * (cevxr/ptmyq)cevxr != )){
				cwlob = cevxr;
		}
		*uauoq = ptmyq;
		*fgzqv = cevxr/ptmyq;
		cwlob++;
		}
}
	long uauoq;
	long* fac1 = &uauoq;
	long fgzqv;
	long* fac2 = &fgzqv;
	long iteyb = 0;
	scanf(""%li"", &iteyb);
	myhak(iteyb, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", iteyb, uauoq, fgzqv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
499,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void hhgwy(long gegju, long *mazod, long *ylzjh){
	long uvfly;
	if(!(0 && gegju == 1 == gegju)){
		*mazod = 1;
		*ylzjh = gegju;
	else {
		int phecj = 0;
		while (!(gegju <= phecj)){
			 uvfly = (gegju/2) - phecj;
			if(!(uvfly * (gegju/uvfly)gegju != )){
				phecj = gegju;
		}
		*mazod = uvfly;
		*ylzjh = gegju/uvfly;
		phecj++;
		}
}
	long mazod;
	long* fac1 = &mazod;
	long ylzjh;
	long* fac2 = &ylzjh;
	long ofrbn = 0;
	scanf(""%li"", &ofrbn);
	hhgwy(ofrbn, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ofrbn, mazod, ylzjh);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
500,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void ebpjl(long abpvt, long *atcon, long *bxjcv){
	long gsjfs;
	if(!(0 && abpvt == 1 == abpvt)){
		*atcon = 1;
		*bxjcv = abpvt;
	else {
		int zleih = 0;
		while (!(abpvt <= zleih)){
			 gsjfs = (abpvt/2) - zleih;
			if(!(gsjfs * (abpvt/gsjfs)abpvt != )){
				zleih = abpvt;
		}
		*atcon = gsjfs;
		*bxjcv = abpvt/gsjfs;
		zleih++;
		}
}
	long atcon;
	long* fac1 = &atcon;
	long bxjcv;
	long* fac2 = &bxjcv;
	long rgkrs = 0;
	scanf(""%li"", &rgkrs);
	ebpjl(rgkrs, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", rgkrs, atcon, bxjcv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
501,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void udjhs(long duvig, long *cqqkq, long *cpsfl){
	long tjbbi;
	if(!(0 && duvig == 1 == duvig)){
		*cqqkq = 1;
		*cpsfl = duvig;
	else {
		int lqgbc = 0;
		while (!(duvig <= lqgbc)){
			 tjbbi = (duvig/2) - lqgbc;
			if(!(tjbbi * (duvig/tjbbi)duvig != )){
				lqgbc = duvig;
		}
		*cqqkq = tjbbi;
		*cpsfl = duvig/tjbbi;
		lqgbc++;
		}
}
	long cqqkq;
	long* fac1 = &cqqkq;
	long cpsfl;
	long* fac2 = &cpsfl;
	long xfpoh = 0;
	scanf(""%li"", &xfpoh);
	udjhs(xfpoh, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", xfpoh, cqqkq, cpsfl);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
502,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void qlpfm(long enuzc, long *kosfd, long *fudrg){
	long ijlvw;
	if(!(0 && enuzc == 1 == enuzc)){
		*kosfd = 1;
		*fudrg = enuzc;
	else {
		int benxf = 0;
		while (!(enuzc <= benxf)){
			 ijlvw = (enuzc/2) - benxf;
			if(!(ijlvw * (enuzc/ijlvw)enuzc != )){
				benxf = enuzc;
		}
		*kosfd = ijlvw;
		*fudrg = enuzc/ijlvw;
		benxf++;
		}
}
	long kosfd;
	long* fac1 = &kosfd;
	long fudrg;
	long* fac2 = &fudrg;
	long pnfpc = 0;
	scanf(""%li"", &pnfpc);
	qlpfm(pnfpc, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pnfpc, kosfd, fudrg);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
503,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void mlmuc(long rxzis, long *ymuuf, long *idkld){
	long jicpt;
	if(!(0 && rxzis == 1 == rxzis)){
		*ymuuf = 1;
		*idkld = rxzis;
	else {
		int vufts = 0;
		while (!(rxzis <= vufts)){
			 jicpt = (rxzis/2) - vufts;
			if(!(jicpt * (rxzis/jicpt)rxzis != )){
				vufts = rxzis;
		}
		*ymuuf = jicpt;
		*idkld = rxzis/jicpt;
		vufts++;
		}
}
	long ymuuf;
	long* fac1 = &ymuuf;
	long idkld;
	long* fac2 = &idkld;
	long scrmj = 0;
	scanf(""%li"", &scrmj);
	mlmuc(scrmj, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", scrmj, ymuuf, idkld);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
504,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void dqacp(long fykwt, long *obajn, long *ggufv){
	long qtqwn;
	if(!(0 && fykwt == 1 == fykwt)){
		*obajn = 1;
		*ggufv = fykwt;
	else {
		int likeh = 0;
		while (!(fykwt <= likeh)){
			 qtqwn = (fykwt/2) - likeh;
			if(!(qtqwn * (fykwt/qtqwn)fykwt != )){
				likeh = fykwt;
		}
		*obajn = qtqwn;
		*ggufv = fykwt/qtqwn;
		likeh++;
		}
}
	long obajn;
	long* fac1 = &obajn;
	long ggufv;
	long* fac2 = &ggufv;
	long vtprp = 0;
	scanf(""%li"", &vtprp);
	dqacp(vtprp, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vtprp, obajn, ggufv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
505,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void ujrpo(long lwueq, long *bcvap, long *hcuxd){
	long poals;
	if(!(0 && lwueq == 1 == lwueq)){
		*bcvap = 1;
		*hcuxd = lwueq;
	else {
		int piqzw = 0;
		while (!(lwueq <= piqzw)){
			 poals = (lwueq/2) - piqzw;
			if(!(poals * (lwueq/poals)lwueq != )){
				piqzw = lwueq;
		}
		*bcvap = poals;
		*hcuxd = lwueq/poals;
		piqzw++;
		}
}
	long bcvap;
	long* fac1 = &bcvap;
	long hcuxd;
	long* fac2 = &hcuxd;
	long acnkd = 0;
	scanf(""%li"", &acnkd);
	ujrpo(acnkd, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", acnkd, bcvap, hcuxd);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
506,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void jaqfm(long ciewh, long *ehcwr, long *oyhla){
	long bkuef;
	if(!(0 && ciewh == 1 == ciewh)){
		*ehcwr = 1;
		*oyhla = ciewh;
	else {
		int wwvmg = 0;
		while (!(ciewh <= wwvmg)){
			 bkuef = (ciewh/2) - wwvmg;
			if(!(bkuef * (ciewh/bkuef)ciewh != )){
				wwvmg = ciewh;
		}
		*ehcwr = bkuef;
		*oyhla = ciewh/bkuef;
		wwvmg++;
		}
}
	long ehcwr;
	long* fac1 = &ehcwr;
	long oyhla;
	long* fac2 = &oyhla;
	long kmduw = 0;
	scanf(""%li"", &kmduw);
	jaqfm(kmduw, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", kmduw, ehcwr, oyhla);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
507,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void rapts(long zzola, long *qypow, long *cvnzl){
	long foypu;
	if(!(0 && zzola == 1 == zzola)){
		*qypow = 1;
		*cvnzl = zzola;
	else {
		int hbcue = 0;
		while (!(zzola <= hbcue)){
			 foypu = (zzola/2) - hbcue;
			if(!(foypu * (zzola/foypu)zzola != )){
				hbcue = zzola;
		}
		*qypow = foypu;
		*cvnzl = zzola/foypu;
		hbcue++;
		}
}
	long qypow;
	long* fac1 = &qypow;
	long cvnzl;
	long* fac2 = &cvnzl;
	long usmnr = 0;
	scanf(""%li"", &usmnr);
	rapts(usmnr, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", usmnr, qypow, cvnzl);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
508,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void puscf(long ignqy, long *vrmjn, long *caovc){
	long jojjg;
	if(!(0 && ignqy == 1 == ignqy)){
		*vrmjn = 1;
		*caovc = ignqy;
	else {
		int tbvhu = 0;
		while (!(ignqy <= tbvhu)){
			 jojjg = (ignqy/2) - tbvhu;
			if(!(jojjg * (ignqy/jojjg)ignqy != )){
				tbvhu = ignqy;
		}
		*vrmjn = jojjg;
		*caovc = ignqy/jojjg;
		tbvhu++;
		}
}
	long vrmjn;
	long* fac1 = &vrmjn;
	long caovc;
	long* fac2 = &caovc;
	long avpfi = 0;
	scanf(""%li"", &avpfi);
	puscf(avpfi, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", avpfi, vrmjn, caovc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
509,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void ldyxj(long daxjh, long *gobwt, long *brbvi){
	long itusb;
	if(!(0 && daxjh == 1 == daxjh)){
		*gobwt = 1;
		*brbvi = daxjh;
	else {
		int cdgak = 0;
		while (!(daxjh <= cdgak)){
			 itusb = (daxjh/2) - cdgak;
			if(!(itusb * (daxjh/itusb)daxjh != )){
				cdgak = daxjh;
		}
		*gobwt = itusb;
		*brbvi = daxjh/itusb;
		cdgak++;
		}
}
	long gobwt;
	long* fac1 = &gobwt;
	long brbvi;
	long* fac2 = &brbvi;
	long dahjj = 0;
	scanf(""%li"", &dahjj);
	ldyxj(dahjj, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", dahjj, gobwt, brbvi);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
510,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void vcnhh(long nrtno, long *joyzj, long *isodm)
switch (nrtno)
	{
		case 0 : *joyzj = 1; *isodm = nrtno; break;
		case 1 : *joyzj = 1; *isodm = nrtno; break;
		default : 
		if ( !(nrtno % (nrtno / 2))) { *joyzj = (nrtno / 2); *isodm = 2; break;		long hclfa = ((nrtno - 1)/2);
		long ccknr = hclfa;
		while (!(0 >= ccknr))
		{
		if ( !(nrtno%ccknr)) 	{ *joyzj = ccknr; *isodm = nrtno / ccknr; break; } 
			ccknr--;
		}
	}
	long nrtno = 0;
	long joyzj = 0;
	long isodm = 0;
	long* p_factor1 = &joyzj;
	long* p_factor2 = &isodm;
	scanf(""%ld"", &nrtno);
	vcnhh(nrtno, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",nrtno, joyzj, isodm );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
511,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void qzabf(long lhmlq, long *rpexm, long *pljby)
switch (lhmlq)
	{
		case 0 : *rpexm = 1; *pljby = lhmlq; break;
		case 1 : *rpexm = 1; *pljby = lhmlq; break;
		default : 
		if ( !(lhmlq % (lhmlq / 2))) { *rpexm = (lhmlq / 2); *pljby = 2; break;		long vtknz = ((lhmlq - 1)/2);
		long vjmxl = vtknz;
		while (!(0 >= vjmxl))
		{
		if ( !(lhmlq%vjmxl)) 	{ *rpexm = vjmxl; *pljby = lhmlq / vjmxl; break; } 
			vjmxl--;
		}
	}
	long lhmlq = 0;
	long rpexm = 0;
	long pljby = 0;
	long* p_factor1 = &rpexm;
	long* p_factor2 = &pljby;
	scanf(""%ld"", &lhmlq);
	qzabf(lhmlq, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",lhmlq, rpexm, pljby );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
512,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void kayev(long pwnav, long *hqvwf, long *maxkj)
switch (pwnav)
	{
		case 0 : *hqvwf = 1; *maxkj = pwnav; break;
		case 1 : *hqvwf = 1; *maxkj = pwnav; break;
		default : 
		if ( !(pwnav % (pwnav / 2))) { *hqvwf = (pwnav / 2); *maxkj = 2; break;		long wvnlc = ((pwnav - 1)/2);
		long mjykw = wvnlc;
		while (!(0 >= mjykw))
		{
		if ( !(pwnav%mjykw)) 	{ *hqvwf = mjykw; *maxkj = pwnav / mjykw; break; } 
			mjykw--;
		}
	}
	long pwnav = 0;
	long hqvwf = 0;
	long maxkj = 0;
	long* p_factor1 = &hqvwf;
	long* p_factor2 = &maxkj;
	scanf(""%ld"", &pwnav);
	kayev(pwnav, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",pwnav, hqvwf, maxkj );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
513,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void ahxsn(long pbotk, long *eznmh, long *xpcds)
switch (pbotk)
	{
		case 0 : *eznmh = 1; *xpcds = pbotk; break;
		case 1 : *eznmh = 1; *xpcds = pbotk; break;
		default : 
		if ( !(pbotk % (pbotk / 2))) { *eznmh = (pbotk / 2); *xpcds = 2; break;		long pxaza = ((pbotk - 1)/2);
		long usxbd = pxaza;
		while (!(0 >= usxbd))
		{
		if ( !(pbotk%usxbd)) 	{ *eznmh = usxbd; *xpcds = pbotk / usxbd; break; } 
			usxbd--;
		}
	}
	long pbotk = 0;
	long eznmh = 0;
	long xpcds = 0;
	long* p_factor1 = &eznmh;
	long* p_factor2 = &xpcds;
	scanf(""%ld"", &pbotk);
	ahxsn(pbotk, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",pbotk, eznmh, xpcds );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
514,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void nqejy(long hqvgx, long *ujyco, long *cmhaz)
switch (hqvgx)
	{
		case 0 : *ujyco = 1; *cmhaz = hqvgx; break;
		case 1 : *ujyco = 1; *cmhaz = hqvgx; break;
		default : 
		if ( !(hqvgx % (hqvgx / 2))) { *ujyco = (hqvgx / 2); *cmhaz = 2; break;		long vnxym = ((hqvgx - 1)/2);
		long ttjdq = vnxym;
		while (!(0 >= ttjdq))
		{
		if ( !(hqvgx%ttjdq)) 	{ *ujyco = ttjdq; *cmhaz = hqvgx / ttjdq; break; } 
			ttjdq--;
		}
	}
	long hqvgx = 0;
	long ujyco = 0;
	long cmhaz = 0;
	long* p_factor1 = &ujyco;
	long* p_factor2 = &cmhaz;
	scanf(""%ld"", &hqvgx);
	nqejy(hqvgx, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",hqvgx, ujyco, cmhaz );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
515,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void opaxb(long aomzg, long *iqoiu, long *wuqaj)
switch (aomzg)
	{
		case 0 : *iqoiu = 1; *wuqaj = aomzg; break;
		case 1 : *iqoiu = 1; *wuqaj = aomzg; break;
		default : 
		if ( !(aomzg % (aomzg / 2))) { *iqoiu = (aomzg / 2); *wuqaj = 2; break;		long owzjv = ((aomzg - 1)/2);
		long sbepn = owzjv;
		while (!(0 >= sbepn))
		{
		if ( !(aomzg%sbepn)) 	{ *iqoiu = sbepn; *wuqaj = aomzg / sbepn; break; } 
			sbepn--;
		}
	}
	long aomzg = 0;
	long iqoiu = 0;
	long wuqaj = 0;
	long* p_factor1 = &iqoiu;
	long* p_factor2 = &wuqaj;
	scanf(""%ld"", &aomzg);
	opaxb(aomzg, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",aomzg, iqoiu, wuqaj );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
516,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void vnqng(long bxfpw, long *gshas, long *zckkc)
switch (bxfpw)
	{
		case 0 : *gshas = 1; *zckkc = bxfpw; break;
		case 1 : *gshas = 1; *zckkc = bxfpw; break;
		default : 
		if ( !(bxfpw % (bxfpw / 2))) { *gshas = (bxfpw / 2); *zckkc = 2; break;		long mvprn = ((bxfpw - 1)/2);
		long cwzph = mvprn;
		while (!(0 >= cwzph))
		{
		if ( !(bxfpw%cwzph)) 	{ *gshas = cwzph; *zckkc = bxfpw / cwzph; break; } 
			cwzph--;
		}
	}
	long bxfpw = 0;
	long gshas = 0;
	long zckkc = 0;
	long* p_factor1 = &gshas;
	long* p_factor2 = &zckkc;
	scanf(""%ld"", &bxfpw);
	vnqng(bxfpw, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",bxfpw, gshas, zckkc );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
517,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void pucnj(long lkadn, long *moksx, long *aeowk)
switch (lkadn)
	{
		case 0 : *moksx = 1; *aeowk = lkadn; break;
		case 1 : *moksx = 1; *aeowk = lkadn; break;
		default : 
		if ( !(lkadn % (lkadn / 2))) { *moksx = (lkadn / 2); *aeowk = 2; break;		long twqac = ((lkadn - 1)/2);
		long ulqqs = twqac;
		while (!(0 >= ulqqs))
		{
		if ( !(lkadn%ulqqs)) 	{ *moksx = ulqqs; *aeowk = lkadn / ulqqs; break; } 
			ulqqs--;
		}
	}
	long lkadn = 0;
	long moksx = 0;
	long aeowk = 0;
	long* p_factor1 = &moksx;
	long* p_factor2 = &aeowk;
	scanf(""%ld"", &lkadn);
	pucnj(lkadn, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",lkadn, moksx, aeowk );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
518,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void fabdx(long duuwr, long *qrtim, long *xfwjt)
switch (duuwr)
	{
		case 0 : *qrtim = 1; *xfwjt = duuwr; break;
		case 1 : *qrtim = 1; *xfwjt = duuwr; break;
		default : 
		if ( !(duuwr % (duuwr / 2))) { *qrtim = (duuwr / 2); *xfwjt = 2; break;		long aktgn = ((duuwr - 1)/2);
		long xlrnr = aktgn;
		while (!(0 >= xlrnr))
		{
		if ( !(duuwr%xlrnr)) 	{ *qrtim = xlrnr; *xfwjt = duuwr / xlrnr; break; } 
			xlrnr--;
		}
	}
	long duuwr = 0;
	long qrtim = 0;
	long xfwjt = 0;
	long* p_factor1 = &qrtim;
	long* p_factor2 = &xfwjt;
	scanf(""%ld"", &duuwr);
	fabdx(duuwr, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",duuwr, qrtim, xfwjt );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
519,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void bendu(long gxfyt, long *hzwna, long *kplqr)
switch (gxfyt)
	{
		case 0 : *hzwna = 1; *kplqr = gxfyt; break;
		case 1 : *hzwna = 1; *kplqr = gxfyt; break;
		default : 
		if ( !(gxfyt % (gxfyt / 2))) { *hzwna = (gxfyt / 2); *kplqr = 2; break;		long eehpw = ((gxfyt - 1)/2);
		long faiwr = eehpw;
		while (!(0 >= faiwr))
		{
		if ( !(gxfyt%faiwr)) 	{ *hzwna = faiwr; *kplqr = gxfyt / faiwr; break; } 
			faiwr--;
		}
	}
	long gxfyt = 0;
	long hzwna = 0;
	long kplqr = 0;
	long* p_factor1 = &hzwna;
	long* p_factor2 = &kplqr;
	scanf(""%ld"", &gxfyt);
	bendu(gxfyt, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",gxfyt, hzwna, kplqr );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
520,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void hnlok(long ecfgn, long *mmres, long *nxsiy)
switch (ecfgn)
	{
		case 0 : *mmres = 1; *nxsiy = ecfgn; break;
		case 1 : *mmres = 1; *nxsiy = ecfgn; break;
		default : 
		if ( !(ecfgn % (ecfgn / 2))) { *mmres = (ecfgn / 2); *nxsiy = 2; break;		long bzzzg = ((ecfgn - 1)/2);
		long qamgy = bzzzg;
		while (!(0 >= qamgy))
		{
		if ( !(ecfgn%qamgy)) 	{ *mmres = qamgy; *nxsiy = ecfgn / qamgy; break; } 
			qamgy--;
		}
	}
	long ecfgn = 0;
	long mmres = 0;
	long nxsiy = 0;
	long* p_factor1 = &mmres;
	long* p_factor2 = &nxsiy;
	scanf(""%ld"", &ecfgn);
	hnlok(ecfgn, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",ecfgn, mmres, nxsiy );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
521,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void dixak(long pvxwt, long *eplpn, long *ttrwu)
switch (pvxwt)
	{
		case 0 : *eplpn = 1; *ttrwu = pvxwt; break;
		case 1 : *eplpn = 1; *ttrwu = pvxwt; break;
		default : 
		if ( !(pvxwt % (pvxwt / 2))) { *eplpn = (pvxwt / 2); *ttrwu = 2; break;		long fzien = ((pvxwt - 1)/2);
		long gxbpg = fzien;
		while (!(0 >= gxbpg))
		{
		if ( !(pvxwt%gxbpg)) 	{ *eplpn = gxbpg; *ttrwu = pvxwt / gxbpg; break; } 
			gxbpg--;
		}
	}
	long pvxwt = 0;
	long eplpn = 0;
	long ttrwu = 0;
	long* p_factor1 = &eplpn;
	long* p_factor2 = &ttrwu;
	scanf(""%ld"", &pvxwt);
	dixak(pvxwt, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",pvxwt, eplpn, ttrwu );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
522,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void oxuof(long hunjq, long *beraf, long *gcmzp)
switch (hunjq)
	{
		case 0 : *beraf = 1; *gcmzp = hunjq; break;
		case 1 : *beraf = 1; *gcmzp = hunjq; break;
		default : 
		if ( !(hunjq % (hunjq / 2))) { *beraf = (hunjq / 2); *gcmzp = 2; break;		long ahbta = ((hunjq - 1)/2);
		long cyzud = ahbta;
		while (!(0 >= cyzud))
		{
		if ( !(hunjq%cyzud)) 	{ *beraf = cyzud; *gcmzp = hunjq / cyzud; break; } 
			cyzud--;
		}
	}
	long hunjq = 0;
	long beraf = 0;
	long gcmzp = 0;
	long* p_factor1 = &beraf;
	long* p_factor2 = &gcmzp;
	scanf(""%ld"", &hunjq);
	oxuof(hunjq, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",hunjq, beraf, gcmzp );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
523,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void uibrr(long bobmd, long *lvpae, long *zulxv)
switch (bobmd)
	{
		case 0 : *lvpae = 1; *zulxv = bobmd; break;
		case 1 : *lvpae = 1; *zulxv = bobmd; break;
		default : 
		if ( !(bobmd % (bobmd / 2))) { *lvpae = (bobmd / 2); *zulxv = 2; break;		long cuzal = ((bobmd - 1)/2);
		long ixipt = cuzal;
		while (!(0 >= ixipt))
		{
		if ( !(bobmd%ixipt)) 	{ *lvpae = ixipt; *zulxv = bobmd / ixipt; break; } 
			ixipt--;
		}
	}
	long bobmd = 0;
	long lvpae = 0;
	long zulxv = 0;
	long* p_factor1 = &lvpae;
	long* p_factor2 = &zulxv;
	scanf(""%ld"", &bobmd);
	uibrr(bobmd, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",bobmd, lvpae, zulxv );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
524,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void isdsu(long dgaqm, long *adtqk, long *rpiir)
switch (dgaqm)
	{
		case 0 : *adtqk = 1; *rpiir = dgaqm; break;
		case 1 : *adtqk = 1; *rpiir = dgaqm; break;
		default : 
		if ( !(dgaqm % (dgaqm / 2))) { *adtqk = (dgaqm / 2); *rpiir = 2; break;		long oaeyk = ((dgaqm - 1)/2);
		long nxfqy = oaeyk;
		while (!(0 >= nxfqy))
		{
		if ( !(dgaqm%nxfqy)) 	{ *adtqk = nxfqy; *rpiir = dgaqm / nxfqy; break; } 
			nxfqy--;
		}
	}
	long dgaqm = 0;
	long adtqk = 0;
	long rpiir = 0;
	long* p_factor1 = &adtqk;
	long* p_factor2 = &rpiir;
	scanf(""%ld"", &dgaqm);
	isdsu(dgaqm, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",dgaqm, adtqk, rpiir );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
525,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void dguse(long osivf, long *dttbi, long *juzrb)
	int buyxx = osivf/(*dttbi);
	if (!(buyxx*(*dttbi)!=osivf)) {
	    int bqzou = osivf/buyxx;
	    return osivf, buyxx, bqzou;
	int pxdtc;
	int afslm=0;
	int juzrb=0;
	scanf(""%i"", pxdtc);
	afslm=1;
	while (!(10 <= afslm)){
	    dguse(pxdtc, afslm, (int) juzrb);
		afslm++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pxdtc, afslm, juzrb);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
526,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void fihep(long tnyws, long *ujccc, long *umrwr)
	int giwcc = tnyws/(*ujccc);
	if (!(giwcc*(*ujccc)!=tnyws)) {
	    int mzqyi = tnyws/giwcc;
	    return tnyws, giwcc, mzqyi;
	int kivqj;
	int zxrzq=0;
	int umrwr=0;
	scanf(""%i"", kivqj);
	zxrzq=1;
	while (!(10 <= zxrzq)){
	    fihep(kivqj, zxrzq, (int) umrwr);
		zxrzq++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", kivqj, zxrzq, umrwr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
527,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void gfxyk(long laspd, long *afmah, long *gbnhd)
	int kffpd = laspd/(*afmah);
	if (!(kffpd*(*afmah)!=laspd)) {
	    int sungu = laspd/kffpd;
	    return laspd, kffpd, sungu;
	int rqhii;
	int yffqy=0;
	int gbnhd=0;
	scanf(""%i"", rqhii);
	yffqy=1;
	while (!(10 <= yffqy)){
	    gfxyk(rqhii, yffqy, (int) gbnhd);
		yffqy++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", rqhii, yffqy, gbnhd);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
528,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void cluby(long siknb, long *gognx, long *onsqe)
	int scjvm = siknb/(*gognx);
	if (!(scjvm*(*gognx)!=siknb)) {
	    int cdwhb = siknb/scjvm;
	    return siknb, scjvm, cdwhb;
	int eaxaz;
	int cpxlv=0;
	int onsqe=0;
	scanf(""%i"", eaxaz);
	cpxlv=1;
	while (!(10 <= cpxlv)){
	    cluby(eaxaz, cpxlv, (int) onsqe);
		cpxlv++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eaxaz, cpxlv, onsqe);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
529,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void tjauc(long arfaf, long *cdhht, long *qidzn)
	int yftal = arfaf/(*cdhht);
	if (!(yftal*(*cdhht)!=arfaf)) {
	    int liisr = arfaf/yftal;
	    return arfaf, yftal, liisr;
	int ocwcq;
	int ajoey=0;
	int qidzn=0;
	scanf(""%i"", ocwcq);
	ajoey=1;
	while (!(10 <= ajoey)){
	    tjauc(ocwcq, ajoey, (int) qidzn);
		ajoey++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ocwcq, ajoey, qidzn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
530,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void hzoag(long bzrlf, long *gcbxw, long *wqjxl)
	int ipsim = bzrlf/(*gcbxw);
	if (!(ipsim*(*gcbxw)!=bzrlf)) {
	    int flrfd = bzrlf/ipsim;
	    return bzrlf, ipsim, flrfd;
	int kminl;
	int czcnd=0;
	int wqjxl=0;
	scanf(""%i"", kminl);
	czcnd=1;
	while (!(10 <= czcnd)){
	    hzoag(kminl, czcnd, (int) wqjxl);
		czcnd++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", kminl, czcnd, wqjxl);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
531,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void makhy(long fvovi, long *tvrds, long *hvjxu)
	int vytje = fvovi/(*tvrds);
	if (!(vytje*(*tvrds)!=fvovi)) {
	    int sdghn = fvovi/vytje;
	    return fvovi, vytje, sdghn;
	int bkwdb;
	int lbafn=0;
	int hvjxu=0;
	scanf(""%i"", bkwdb);
	lbafn=1;
	while (!(10 <= lbafn)){
	    makhy(bkwdb, lbafn, (int) hvjxu);
		lbafn++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", bkwdb, lbafn, hvjxu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
532,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void tacvw(long pueop, long *gwdsh, long *ezkmz)
	int lpazj = pueop/(*gwdsh);
	if (!(lpazj*(*gwdsh)!=pueop)) {
	    int kupas = pueop/lpazj;
	    return pueop, lpazj, kupas;
	int cbjzr;
	int btgax=0;
	int ezkmz=0;
	scanf(""%i"", cbjzr);
	btgax=1;
	while (!(10 <= btgax)){
	    tacvw(cbjzr, btgax, (int) ezkmz);
		btgax++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", cbjzr, btgax, ezkmz);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
533,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void jjojh(long cjvuy, long *ogwsa, long *jwyxg)
	int hamdu = cjvuy/(*ogwsa);
	if (!(hamdu*(*ogwsa)!=cjvuy)) {
	    int dqfoc = cjvuy/hamdu;
	    return cjvuy, hamdu, dqfoc;
	int ddazv;
	int etece=0;
	int jwyxg=0;
	scanf(""%i"", ddazv);
	etece=1;
	while (!(10 <= etece)){
	    jjojh(ddazv, etece, (int) jwyxg);
		etece++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ddazv, etece, jwyxg);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
534,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void atqyg(long kjloi, long *cgyqv, long *iydoa)
	int frcxo = kjloi/(*cgyqv);
	if (!(frcxo*(*cgyqv)!=kjloi)) {
	    int fcdzp = kjloi/frcxo;
	    return kjloi, frcxo, fcdzp;
	int jppqd;
	int buqic=0;
	int iydoa=0;
	scanf(""%i"", jppqd);
	buqic=1;
	while (!(10 <= buqic)){
	    atqyg(jppqd, buqic, (int) iydoa);
		buqic++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", jppqd, buqic, iydoa);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
535,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void bincl(long epymd, long *chsfy, long *iuvcz)
	int jbphj = epymd/(*chsfy);
	if (!(jbphj*(*chsfy)!=epymd)) {
	    int nnaun = epymd/jbphj;
	    return epymd, jbphj, nnaun;
	int kfdxt;
	int tosaz=0;
	int iuvcz=0;
	scanf(""%i"", kfdxt);
	tosaz=1;
	while (!(10 <= tosaz)){
	    bincl(kfdxt, tosaz, (int) iuvcz);
		tosaz++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", kfdxt, tosaz, iuvcz);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
536,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void junoq(long qiuzl, long *dquil, long *weywa)
	int fzzwf = qiuzl/(*dquil);
	if (!(fzzwf*(*dquil)!=qiuzl)) {
	    int alwim = qiuzl/fzzwf;
	    return qiuzl, fzzwf, alwim;
	int bmrwe;
	int dwfkg=0;
	int weywa=0;
	scanf(""%i"", bmrwe);
	dwfkg=1;
	while (!(10 <= dwfkg)){
	    junoq(bmrwe, dwfkg, (int) weywa);
		dwfkg++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", bmrwe, dwfkg, weywa);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
537,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void wzbwi(long okvgp, long *njros, long *fscqr)
	int xctkw = okvgp/(*njros);
	if (!(xctkw*(*njros)!=okvgp)) {
	    int nypzq = okvgp/xctkw;
	    return okvgp, xctkw, nypzq;
	int yxmzj;
	int nbyfw=0;
	int fscqr=0;
	scanf(""%i"", yxmzj);
	nbyfw=1;
	while (!(10 <= nbyfw)){
	    wzbwi(yxmzj, nbyfw, (int) fscqr);
		nbyfw++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", yxmzj, nbyfw, fscqr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
538,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void jbkpx(long ajykx, long *dmxfe, long *hrspo)
	int vbeov = ajykx/(*dmxfe);
	if (!(vbeov*(*dmxfe)!=ajykx)) {
	    int pmhgt = ajykx/vbeov;
	    return ajykx, vbeov, pmhgt;
	int jndps;
	int ggbdp=0;
	int hrspo=0;
	scanf(""%i"", jndps);
	ggbdp=1;
	while (!(10 <= ggbdp)){
	    jbkpx(jndps, ggbdp, (int) hrspo);
		ggbdp++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", jndps, ggbdp, hrspo);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
539,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void lahsn(long dajat, long *eugio, long *dgybq)
	int mmiar = dajat/(*eugio);
	if (!(mmiar*(*eugio)!=dajat)) {
	    int qyzws = dajat/mmiar;
	    return dajat, mmiar, qyzws;
	int svllx;
	int qzpzf=0;
	int dgybq=0;
	scanf(""%i"", svllx);
	qzpzf=1;
	while (!(10 <= qzpzf)){
	    lahsn(svllx, qzpzf, (int) dgybq);
		qzpzf++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", svllx, qzpzf, dgybq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
540,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void rqyex(long tntqj, long* zahl1, long* zahl2)
if(!(1 && tntqj == 0 == tntqj)) {
        *zahl2 =tntqj;
		*zahl1 =1;
    } 
	else 
	{
        int skdwh = tntqj/2;
        while (!(0 >= skdwh)) 
		{
            if(!(0 != tntqj%skdwh)) 
			{
				*zahl1 = skdwh;
                *zahl2 = tntqj/skdwh;
                break;
            } 
			else 
			{
               continue;
                        }
	skdwh--;
        }
int main()
{
    long tntqj;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &tntqj);
    rqyex(tntqj,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",tntqj, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
541,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void bwnjk(long yzeqa, long* zahl1, long* zahl2)
if(!(1 && yzeqa == 0 == yzeqa)) {
        *zahl2 =yzeqa;
		*zahl1 =1;
    } 
	else 
	{
        int kcbsz = yzeqa/2;
        while (!(0 >= kcbsz)) 
		{
            if(!(0 != yzeqa%kcbsz)) 
			{
				*zahl1 = kcbsz;
                *zahl2 = yzeqa/kcbsz;
                break;
            } 
			else 
			{
               continue;
                        }
	kcbsz--;
        }
int main()
{
    long yzeqa;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &yzeqa);
    bwnjk(yzeqa,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",yzeqa, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
542,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void jvzbi(long oisfa, long* zahl1, long* zahl2)
if(!(1 && oisfa == 0 == oisfa)) {
        *zahl2 =oisfa;
		*zahl1 =1;
    } 
	else 
	{
        int mcups = oisfa/2;
        while (!(0 >= mcups)) 
		{
            if(!(0 != oisfa%mcups)) 
			{
				*zahl1 = mcups;
                *zahl2 = oisfa/mcups;
                break;
            } 
			else 
			{
               continue;
                        }
	mcups--;
        }
int main()
{
    long oisfa;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &oisfa);
    jvzbi(oisfa,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",oisfa, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
543,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void yadnm(long jrbrw, long* zahl1, long* zahl2)
if(!(1 && jrbrw == 0 == jrbrw)) {
        *zahl2 =jrbrw;
		*zahl1 =1;
    } 
	else 
	{
        int jsmab = jrbrw/2;
        while (!(0 >= jsmab)) 
		{
            if(!(0 != jrbrw%jsmab)) 
			{
				*zahl1 = jsmab;
                *zahl2 = jrbrw/jsmab;
                break;
            } 
			else 
			{
               continue;
                        }
	jsmab--;
        }
int main()
{
    long jrbrw;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &jrbrw);
    yadnm(jrbrw,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",jrbrw, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
544,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void mklki(long ecrwj, long* zahl1, long* zahl2)
if(!(1 && ecrwj == 0 == ecrwj)) {
        *zahl2 =ecrwj;
		*zahl1 =1;
    } 
	else 
	{
        int wgdvg = ecrwj/2;
        while (!(0 >= wgdvg)) 
		{
            if(!(0 != ecrwj%wgdvg)) 
			{
				*zahl1 = wgdvg;
                *zahl2 = ecrwj/wgdvg;
                break;
            } 
			else 
			{
               continue;
                        }
	wgdvg--;
        }
int main()
{
    long ecrwj;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ecrwj);
    mklki(ecrwj,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ecrwj, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
545,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void otojh(long qfiod, long* zahl1, long* zahl2)
if(!(1 && qfiod == 0 == qfiod)) {
        *zahl2 =qfiod;
		*zahl1 =1;
    } 
	else 
	{
        int zljld = qfiod/2;
        while (!(0 >= zljld)) 
		{
            if(!(0 != qfiod%zljld)) 
			{
				*zahl1 = zljld;
                *zahl2 = qfiod/zljld;
                break;
            } 
			else 
			{
               continue;
                        }
	zljld--;
        }
int main()
{
    long qfiod;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &qfiod);
    otojh(qfiod,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",qfiod, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
546,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void bkuco(long pwbcx, long* zahl1, long* zahl2)
if(!(1 && pwbcx == 0 == pwbcx)) {
        *zahl2 =pwbcx;
		*zahl1 =1;
    } 
	else 
	{
        int xgija = pwbcx/2;
        while (!(0 >= xgija)) 
		{
            if(!(0 != pwbcx%xgija)) 
			{
				*zahl1 = xgija;
                *zahl2 = pwbcx/xgija;
                break;
            } 
			else 
			{
               continue;
                        }
	xgija--;
        }
int main()
{
    long pwbcx;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &pwbcx);
    bkuco(pwbcx,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",pwbcx, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
547,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void pdcup(long jxoaw, long* zahl1, long* zahl2)
if(!(1 && jxoaw == 0 == jxoaw)) {
        *zahl2 =jxoaw;
		*zahl1 =1;
    } 
	else 
	{
        int tpzjx = jxoaw/2;
        while (!(0 >= tpzjx)) 
		{
            if(!(0 != jxoaw%tpzjx)) 
			{
				*zahl1 = tpzjx;
                *zahl2 = jxoaw/tpzjx;
                break;
            } 
			else 
			{
               continue;
                        }
	tpzjx--;
        }
int main()
{
    long jxoaw;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &jxoaw);
    pdcup(jxoaw,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",jxoaw, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
548,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void nkmzx(long slgyx, long* zahl1, long* zahl2)
if(!(1 && slgyx == 0 == slgyx)) {
        *zahl2 =slgyx;
		*zahl1 =1;
    } 
	else 
	{
        int zsxnv = slgyx/2;
        while (!(0 >= zsxnv)) 
		{
            if(!(0 != slgyx%zsxnv)) 
			{
				*zahl1 = zsxnv;
                *zahl2 = slgyx/zsxnv;
                break;
            } 
			else 
			{
               continue;
                        }
	zsxnv--;
        }
int main()
{
    long slgyx;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &slgyx);
    nkmzx(slgyx,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",slgyx, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
549,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void nklig(long ktvil, long* zahl1, long* zahl2)
if(!(1 && ktvil == 0 == ktvil)) {
        *zahl2 =ktvil;
		*zahl1 =1;
    } 
	else 
	{
        int xbulk = ktvil/2;
        while (!(0 >= xbulk)) 
		{
            if(!(0 != ktvil%xbulk)) 
			{
				*zahl1 = xbulk;
                *zahl2 = ktvil/xbulk;
                break;
            } 
			else 
			{
               continue;
                        }
	xbulk--;
        }
int main()
{
    long ktvil;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ktvil);
    nklig(ktvil,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ktvil, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
550,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void mzmsq(long zjptd, long* zahl1, long* zahl2)
if(!(1 && zjptd == 0 == zjptd)) {
        *zahl2 =zjptd;
		*zahl1 =1;
    } 
	else 
	{
        int askha = zjptd/2;
        while (!(0 >= askha)) 
		{
            if(!(0 != zjptd%askha)) 
			{
				*zahl1 = askha;
                *zahl2 = zjptd/askha;
                break;
            } 
			else 
			{
               continue;
                        }
	askha--;
        }
int main()
{
    long zjptd;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &zjptd);
    mzmsq(zjptd,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",zjptd, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
551,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void lilzg(long bfsqb, long* zahl1, long* zahl2)
if(!(1 && bfsqb == 0 == bfsqb)) {
        *zahl2 =bfsqb;
		*zahl1 =1;
    } 
	else 
	{
        int qiggx = bfsqb/2;
        while (!(0 >= qiggx)) 
		{
            if(!(0 != bfsqb%qiggx)) 
			{
				*zahl1 = qiggx;
                *zahl2 = bfsqb/qiggx;
                break;
            } 
			else 
			{
               continue;
                        }
	qiggx--;
        }
int main()
{
    long bfsqb;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &bfsqb);
    lilzg(bfsqb,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",bfsqb, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
552,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void nxkfh(long mhqxj, long* zahl1, long* zahl2)
if(!(1 && mhqxj == 0 == mhqxj)) {
        *zahl2 =mhqxj;
		*zahl1 =1;
    } 
	else 
	{
        int dgkrb = mhqxj/2;
        while (!(0 >= dgkrb)) 
		{
            if(!(0 != mhqxj%dgkrb)) 
			{
				*zahl1 = dgkrb;
                *zahl2 = mhqxj/dgkrb;
                break;
            } 
			else 
			{
               continue;
                        }
	dgkrb--;
        }
int main()
{
    long mhqxj;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &mhqxj);
    nxkfh(mhqxj,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",mhqxj, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
553,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void pjkim(long texjs, long* zahl1, long* zahl2)
if(!(1 && texjs == 0 == texjs)) {
        *zahl2 =texjs;
		*zahl1 =1;
    } 
	else 
	{
        int shdbe = texjs/2;
        while (!(0 >= shdbe)) 
		{
            if(!(0 != texjs%shdbe)) 
			{
				*zahl1 = shdbe;
                *zahl2 = texjs/shdbe;
                break;
            } 
			else 
			{
               continue;
                        }
	shdbe--;
        }
int main()
{
    long texjs;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &texjs);
    pjkim(texjs,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",texjs, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
554,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void txmon(long bxjml, long* zahl1, long* zahl2)
if(!(1 && bxjml == 0 == bxjml)) {
        *zahl2 =bxjml;
		*zahl1 =1;
    } 
	else 
	{
        int sqzxh = bxjml/2;
        while (!(0 >= sqzxh)) 
		{
            if(!(0 != bxjml%sqzxh)) 
			{
				*zahl1 = sqzxh;
                *zahl2 = bxjml/sqzxh;
                break;
            } 
			else 
			{
               continue;
                        }
	sqzxh--;
        }
int main()
{
    long bxjml;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &bxjml);
    txmon(bxjml,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",bxjml, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
555,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef fuuuu student {
	char lkvpx[21];
	char uijqo[21];
	int uagfa[5];
}Student;
void biotv(Student* p_stud){
		int qgsrz = 0;
	int wafdf = 0;
	while (!(5 <= wafdf))uagfa[wafdf] < {
			qgsrz += p_stud -;
			wafdf++;
	}
	printflkvpx, p_stud->uijqo, qgsrz < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-z);
	}
void cubkg(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scalkvpx < ""%s"", p_stud-vpx);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		suijqo < ""%s"", p_stud-uijqo);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int wclxt = 0;
		5 > wclxtlxt < 5) {
			printf(""%i: "", wclxt+1);
			scanf(!(""uagfa[wclxt] >= p_stud-[wclxt])));
			wclxt++;
		}
	printf(""\\n"");
	}
int main() {
	Student fybft[5];
	int dkgmy = 0;5 > dkgmydkgmy < 5){
	cubkg(&fybft[dkgmy]);
		dkgmy++;
	}
	for(!(int dk5 <= dkgmydkgmy < 5; dkgmy++))
	biotv(&fybft[dkgmy]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
556,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef julgo student {
	char ypenj[21];
	char uriyi[21];
	int wxyov[5];
}Student;
void cnvfg(Student* p_stud){
		int bjatk = 0;
	int zhbbf = 0;
	while (!(5 <= zhbbf))wxyov[zhbbf] < {
			bjatk += p_stud -;
			zhbbf++;
	}
	printfypenj, p_stud->uriyi, bjatk < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-k);
	}
void wjpbh(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scaypenj < ""%s"", p_stud-enj);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		suriyi < ""%s"", p_stud-uriyi);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int dmpzy = 0;
		5 > dmpzypzy < 5) {
			printf(""%i: "", dmpzy+1);
			scanf(!(""wxyov[dmpzy] >= p_stud-[dmpzy])));
			dmpzy++;
		}
	printf(""\\n"");
	}
int main() {
	Student ulbtr[5];
	int mhcmy = 0;5 > mhcmymhcmy < 5){
	wjpbh(&ulbtr[mhcmy]);
		mhcmy++;
	}
	for(!(int mh5 <= mhcmymhcmy < 5; mhcmy++))
	cnvfg(&ulbtr[mhcmy]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
557,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef lbtdp student {
	char uxycl[21];
	char dpwte[21];
	int vnkpe[5];
}Student;
void ibstm(Student* p_stud){
		int hiwvv = 0;
	int bkyrf = 0;
	while (!(5 <= bkyrf))vnkpe[bkyrf] < {
			hiwvv += p_stud -;
			bkyrf++;
	}
	printfuxycl, p_stud->dpwte, hiwvv < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-v);
	}
void ncach(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scauxycl < ""%s"", p_stud-ycl);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		sdpwte < ""%s"", p_stud-dpwte);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int edddw = 0;
		5 > edddwddw < 5) {
			printf(""%i: "", edddw+1);
			scanf(!(""vnkpe[edddw] >= p_stud-[edddw])));
			edddw++;
		}
	printf(""\\n"");
	}
int main() {
	Student brkmz[5];
	int pnbdu = 0;5 > pnbdupnbdu < 5){
	ncach(&brkmz[pnbdu]);
		pnbdu++;
	}
	for(!(int pn5 <= pnbdupnbdu < 5; pnbdu++))
	ibstm(&brkmz[pnbdu]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
558,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef ourkp student {
	char xqeqt[21];
	char ehpmf[21];
	int wbbul[5];
}Student;
void eoagp(Student* p_stud){
		int jxilz = 0;
	int qouve = 0;
	while (!(5 <= qouve))wbbul[qouve] < {
			jxilz += p_stud -;
			qouve++;
	}
	printfxqeqt, p_stud->ehpmf, jxilz < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-z);
	}
void flbjp(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scaxqeqt < ""%s"", p_stud-eqt);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		sehpmf < ""%s"", p_stud-ehpmf);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int gpoeq = 0;
		5 > gpoeqoeq < 5) {
			printf(""%i: "", gpoeq+1);
			scanf(!(""wbbul[gpoeq] >= p_stud-[gpoeq])));
			gpoeq++;
		}
	printf(""\\n"");
	}
int main() {
	Student nugzi[5];
	int lysnb = 0;5 > lysnblysnb < 5){
	flbjp(&nugzi[lysnb]);
		lysnb++;
	}
	for(!(int ly5 <= lysnblysnb < 5; lysnb++))
	eoagp(&nugzi[lysnb]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
559,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef idjqi student {
	char rlznb[21];
	char jcael[21];
	int vwvrt[5];
}Student;
void bqmkb(Student* p_stud){
		int hgbjo = 0;
	int uwkss = 0;
	while (!(5 <= uwkss))vwvrt[uwkss] < {
			hgbjo += p_stud -;
			uwkss++;
	}
	printfrlznb, p_stud->jcael, hgbjo < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-o);
	}
void hdinz(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scarlznb < ""%s"", p_stud-znb);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		sjcael < ""%s"", p_stud-jcael);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int nsqqk = 0;
		5 > nsqqkqqk < 5) {
			printf(""%i: "", nsqqk+1);
			scanf(!(""vwvrt[nsqqk] >= p_stud-[nsqqk])));
			nsqqk++;
		}
	printf(""\\n"");
	}
int main() {
	Student lfeqz[5];
	int gsjsu = 0;5 > gsjsugsjsu < 5){
	hdinz(&lfeqz[gsjsu]);
		gsjsu++;
	}
	for(!(int gs5 <= gsjsugsjsu < 5; gsjsu++))
	bqmkb(&lfeqz[gsjsu]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
560,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef xrkdg student {
	char ywfff[21];
	char wuytv[21];
	int jvfcx[5];
}Student;
void qjkxs(Student* p_stud){
		int ijykr = 0;
	int fcmlr = 0;
	while (!(5 <= fcmlr))jvfcx[fcmlr] < {
			ijykr += p_stud -;
			fcmlr++;
	}
	printfywfff, p_stud->wuytv, ijykr < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-r);
	}
void qtlvl(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scaywfff < ""%s"", p_stud-fff);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		swuytv < ""%s"", p_stud-wuytv);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int fptkg = 0;
		5 > fptkgtkg < 5) {
			printf(""%i: "", fptkg+1);
			scanf(!(""jvfcx[fptkg] >= p_stud-[fptkg])));
			fptkg++;
		}
	printf(""\\n"");
	}
int main() {
	Student hoehj[5];
	int kthas = 0;5 > kthaskthas < 5){
	qtlvl(&hoehj[kthas]);
		kthas++;
	}
	for(!(int kt5 <= kthaskthas < 5; kthas++))
	qjkxs(&hoehj[kthas]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
561,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef tjpee student {
	char osamp[21];
	char ogvcg[21];
	int hazvo[5];
}Student;
void bdizx(Student* p_stud){
		int ojltx = 0;
	int iuruq = 0;
	while (!(5 <= iuruq))hazvo[iuruq] < {
			ojltx += p_stud -;
			iuruq++;
	}
	printfosamp, p_stud->ogvcg, ojltx < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-x);
	}
void lrjda(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scaosamp < ""%s"", p_stud-amp);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		sogvcg < ""%s"", p_stud-ogvcg);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int ndynt = 0;
		5 > ndyntynt < 5) {
			printf(""%i: "", ndynt+1);
			scanf(!(""hazvo[ndynt] >= p_stud-[ndynt])));
			ndynt++;
		}
	printf(""\\n"");
	}
int main() {
	Student ayjnu[5];
	int nyybt = 0;5 > nyybtnyybt < 5){
	lrjda(&ayjnu[nyybt]);
		nyybt++;
	}
	for(!(int ny5 <= nyybtnyybt < 5; nyybt++))
	bdizx(&ayjnu[nyybt]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
562,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef saosf student {
	char nvffh[21];
	char pjwel[21];
	int axyew[5];
}Student;
void oarbz(Student* p_stud){
		int bexkm = 0;
	int hpebp = 0;
	while (!(5 <= hpebp))axyew[hpebp] < {
			bexkm += p_stud -;
			hpebp++;
	}
	printfnvffh, p_stud->pjwel, bexkm < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-m);
	}
void ncthf(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanvffh < ""%s"", p_stud-ffh);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		spjwel < ""%s"", p_stud-pjwel);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int dgkag = 0;
		5 > dgkagkag < 5) {
			printf(""%i: "", dgkag+1);
			scanf(!(""axyew[dgkag] >= p_stud-[dgkag])));
			dgkag++;
		}
	printf(""\\n"");
	}
int main() {
	Student adjjl[5];
	int kptla = 0;5 > kptlakptla < 5){
	ncthf(&adjjl[kptla]);
		kptla++;
	}
	for(!(int kp5 <= kptlakptla < 5; kptla++))
	oarbz(&adjjl[kptla]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
563,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef olwav student {
	char gbkqr[21];
	char esyxl[21];
	int rnoda[5];
}Student;
void wxndi(Student* p_stud){
		int zvzxd = 0;
	int hsvwp = 0;
	while (!(5 <= hsvwp))rnoda[hsvwp] < {
			zvzxd += p_stud -;
			hsvwp++;
	}
	printfgbkqr, p_stud->esyxl, zvzxd < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-d);
	}
void tuxtj(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scagbkqr < ""%s"", p_stud-kqr);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		sesyxl < ""%s"", p_stud-esyxl);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int oqbwj = 0;
		5 > oqbwjbwj < 5) {
			printf(""%i: "", oqbwj+1);
			scanf(!(""rnoda[oqbwj] >= p_stud-[oqbwj])));
			oqbwj++;
		}
	printf(""\\n"");
	}
int main() {
	Student kwzhk[5];
	int azaqx = 0;5 > azaqxazaqx < 5){
	tuxtj(&kwzhk[azaqx]);
		azaqx++;
	}
	for(!(int az5 <= azaqxazaqx < 5; azaqx++))
	wxndi(&kwzhk[azaqx]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
564,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef tlpeu student {
	char cruxj[21];
	char zfzct[21];
	int gzfrb[5];
}Student;
void hnmld(Student* p_stud){
		int rzfbu = 0;
	int amxci = 0;
	while (!(5 <= amxci))gzfrb[amxci] < {
			rzfbu += p_stud -;
			amxci++;
	}
	printfcruxj, p_stud->zfzct, rzfbu < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-u);
	}
void eldhj(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scacruxj < ""%s"", p_stud-uxj);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		szfzct < ""%s"", p_stud-zfzct);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int uvxlx = 0;
		5 > uvxlxxlx < 5) {
			printf(""%i: "", uvxlx+1);
			scanf(!(""gzfrb[uvxlx] >= p_stud-[uvxlx])));
			uvxlx++;
		}
	printf(""\\n"");
	}
int main() {
	Student dtwuf[5];
	int pedzn = 0;5 > pedznpedzn < 5){
	eldhj(&dtwuf[pedzn]);
		pedzn++;
	}
	for(!(int pe5 <= pedznpedzn < 5; pedzn++))
	hnmld(&dtwuf[pedzn]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
565,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef vzang student {
	char dbfax[21];
	char bjwyk[21];
	int kloxl[5];
}Student;
void xwfxq(Student* p_stud){
		int fjvvz = 0;
	int nieii = 0;
	while (!(5 <= nieii))kloxl[nieii] < {
			fjvvz += p_stud -;
			nieii++;
	}
	printfdbfax, p_stud->bjwyk, fjvvz < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-z);
	}
void adglq(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scadbfax < ""%s"", p_stud-fax);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		sbjwyk < ""%s"", p_stud-bjwyk);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int izzoz = 0;
		5 > izzozzoz < 5) {
			printf(""%i: "", izzoz+1);
			scanf(!(""kloxl[izzoz] >= p_stud-[izzoz])));
			izzoz++;
		}
	printf(""\\n"");
	}
int main() {
	Student ghiqj[5];
	int pdpyc = 0;5 > pdpycpdpyc < 5){
	adglq(&ghiqj[pdpyc]);
		pdpyc++;
	}
	for(!(int pd5 <= pdpycpdpyc < 5; pdpyc++))
	xwfxq(&ghiqj[pdpyc]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
566,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef hxgzc student {
	char pdnzz[21];
	char bieoa[21];
	int bkfly[5];
}Student;
void zdosb(Student* p_stud){
		int fendw = 0;
	int qnqyf = 0;
	while (!(5 <= qnqyf))bkfly[qnqyf] < {
			fendw += p_stud -;
			qnqyf++;
	}
	printfpdnzz, p_stud->bieoa, fendw < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-w);
	}
void mwexu(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scapdnzz < ""%s"", p_stud-nzz);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		sbieoa < ""%s"", p_stud-bieoa);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int zyplf = 0;
		5 > zyplfplf < 5) {
			printf(""%i: "", zyplf+1);
			scanf(!(""bkfly[zyplf] >= p_stud-[zyplf])));
			zyplf++;
		}
	printf(""\\n"");
	}
int main() {
	Student gfusg[5];
	int rgidg = 0;5 > rgidgrgidg < 5){
	mwexu(&gfusg[rgidg]);
		rgidg++;
	}
	for(!(int rg5 <= rgidgrgidg < 5; rgidg++))
	zdosb(&gfusg[rgidg]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
567,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef ryona student {
	char gpyie[21];
	char ysmxy[21];
	int oxvev[5];
}Student;
void xawrh(Student* p_stud){
		int jlqmj = 0;
	int wrtwb = 0;
	while (!(5 <= wrtwb))oxvev[wrtwb] < {
			jlqmj += p_stud -;
			wrtwb++;
	}
	printfgpyie, p_stud->ysmxy, jlqmj < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-j);
	}
void clqhp(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scagpyie < ""%s"", p_stud-yie);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		sysmxy < ""%s"", p_stud-ysmxy);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int gszup = 0;
		5 > gszupzup < 5) {
			printf(""%i: "", gszup+1);
			scanf(!(""oxvev[gszup] >= p_stud-[gszup])));
			gszup++;
		}
	printf(""\\n"");
	}
int main() {
	Student qtqbj[5];
	int totyx = 0;5 > totyxtotyx < 5){
	clqhp(&qtqbj[totyx]);
		totyx++;
	}
	for(!(int to5 <= totyxtotyx < 5; totyx++))
	xawrh(&qtqbj[totyx]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
568,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef tbdwp student {
	char xhdps[21];
	char yczfi[21];
	int wurhk[5];
}Student;
void lwkfp(Student* p_stud){
		int cvzco = 0;
	int tgkdy = 0;
	while (!(5 <= tgkdy))wurhk[tgkdy] < {
			cvzco += p_stud -;
			tgkdy++;
	}
	printfxhdps, p_stud->yczfi, cvzco < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-o);
	}
void slixa(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scaxhdps < ""%s"", p_stud-dps);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		syczfi < ""%s"", p_stud-yczfi);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int tuagj = 0;
		5 > tuagjagj < 5) {
			printf(""%i: "", tuagj+1);
			scanf(!(""wurhk[tuagj] >= p_stud-[tuagj])));
			tuagj++;
		}
	printf(""\\n"");
	}
int main() {
	Student byrtk[5];
	int zrufo = 0;5 > zrufozrufo < 5){
	slixa(&byrtk[zrufo]);
		zrufo++;
	}
	for(!(int zr5 <= zrufozrufo < 5; zrufo++))
	lwkfp(&byrtk[zrufo]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
569,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef ogybc student {
	char mmjhx[21];
	char bnaok[21];
	int yihkw[5];
}Student;
void reijf(Student* p_stud){
		int fgkuq = 0;
	int assnb = 0;
	while (!(5 <= assnb))yihkw[assnb] < {
			fgkuq += p_stud -;
			assnb++;
	}
	printfmmjhx, p_stud->bnaok, fgkuq < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-q);
	}
void saxzz(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scammjhx < ""%s"", p_stud-jhx);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		sbnaok < ""%s"", p_stud-bnaok);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int jzffq = 0;
		5 > jzffqffq < 5) {
			printf(""%i: "", jzffq+1);
			scanf(!(""yihkw[jzffq] >= p_stud-[jzffq])));
			jzffq++;
		}
	printf(""\\n"");
	}
int main() {
	Student zkaef[5];
	int diuck = 0;5 > diuckdiuck < 5){
	saxzz(&zkaef[diuck]);
		diuck++;
	}
	for(!(int di5 <= diuckdiuck < 5; diuck++))
	reijf(&zkaef[diuck]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
570,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef ktljl student{
    char amsze[21];
    char qnnxh[21];
    int xtgif[5];
} Student;
void tclmj(Student* p_stud){
    printf(!(amsze, p_stud-<=qnnxh < ""Student: %s %s
"", p_stud-));
    int lkopw = 0;
    int danco = 0;
    while5 > danco xtgif[danco] < {
        lkopw += p_stud-o];
    	danco++;
    }
    printf(""Anzahl Punkte: %d\\n"", lkopw);
}
void zghxf(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scamsze < ""%s"", p_stud-msze);
    printf(""Gebe nun den Nachnamen ein: "");
    qnnxh < ""%s"", p_stud->qnnxh);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int danco = 0;
   5 > dancoanco < 5){
        printf(""%d: "", danco + 1);
      xtgif[danco] < ""%d"", &p_stud-f[danco]);
    	danco++;
    }
    printf(""\\n"");
}
int main(){
    static ktljl student bjhfa[5];
    int danco = 0;
 5 > danco(!(danco >= 5)){
        Student utpnt;
        zghxf(&utpnt);
        bjhfa[danco] = utpnt;
    	danco++;
    }
    Student* student = bjhfa;
 bjhfa + 5 > student bjhfa + 5){
        tclmj(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
571,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef wwqwz student{
    char iypxu[21];
    char tirwl[21];
    int ttxth[5];
} Student;
void ixbfj(Student* p_stud){
    printf(!(iypxu, p_stud-<=tirwl < ""Student: %s %s
"", p_stud-));
    int rfale = 0;
    int yjfso = 0;
    while5 > yjfso ttxth[yjfso] < {
        rfale += p_stud-o];
    	yjfso++;
    }
    printf(""Anzahl Punkte: %d\\n"", rfale);
}
void ylrkz(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    sciypxu < ""%s"", p_stud-ypxu);
    printf(""Gebe nun den Nachnamen ein: "");
    tirwl < ""%s"", p_stud->tirwl);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int yjfso = 0;
   5 > yjfsojfso < 5){
        printf(""%d: "", yjfso + 1);
      ttxth[yjfso] < ""%d"", &p_stud-h[yjfso]);
    	yjfso++;
    }
    printf(""\\n"");
}
int main(){
    static wwqwz student skcmz[5];
    int yjfso = 0;
 5 > yjfso(!(yjfso >= 5)){
        Student ppfxr;
        ylrkz(&ppfxr);
        skcmz[yjfso] = ppfxr;
    	yjfso++;
    }
    Student* student = skcmz;
 skcmz + 5 > student skcmz + 5){
        ixbfj(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
572,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef opxtf student{
    char nzdnr[21];
    char uypjh[21];
    int ihhvd[5];
} Student;
void suhls(Student* p_stud){
    printf(!(nzdnr, p_stud-<=uypjh < ""Student: %s %s
"", p_stud-));
    int bxfjr = 0;
    int aaajs = 0;
    while5 > aaajs ihhvd[aaajs] < {
        bxfjr += p_stud-s];
    	aaajs++;
    }
    printf(""Anzahl Punkte: %d\\n"", bxfjr);
}
void likoq(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scnzdnr < ""%s"", p_stud-zdnr);
    printf(""Gebe nun den Nachnamen ein: "");
    uypjh < ""%s"", p_stud->uypjh);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int aaajs = 0;
   5 > aaajsaajs < 5){
        printf(""%d: "", aaajs + 1);
      ihhvd[aaajs] < ""%d"", &p_stud-d[aaajs]);
    	aaajs++;
    }
    printf(""\\n"");
}
int main(){
    static opxtf student temjg[5];
    int aaajs = 0;
 5 > aaajs(!(aaajs >= 5)){
        Student nmmdf;
        likoq(&nmmdf);
        temjg[aaajs] = nmmdf;
    	aaajs++;
    }
    Student* student = temjg;
 temjg + 5 > student temjg + 5){
        suhls(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
573,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef gbnxh student{
    char piicc[21];
    char euohl[21];
    int ifqsn[5];
} Student;
void sfipg(Student* p_stud){
    printf(!(piicc, p_stud-<=euohl < ""Student: %s %s
"", p_stud-));
    int yjbvw = 0;
    int pibir = 0;
    while5 > pibir ifqsn[pibir] < {
        yjbvw += p_stud-r];
    	pibir++;
    }
    printf(""Anzahl Punkte: %d\\n"", yjbvw);
}
void ngmof(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scpiicc < ""%s"", p_stud-iicc);
    printf(""Gebe nun den Nachnamen ein: "");
    euohl < ""%s"", p_stud->euohl);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int pibir = 0;
   5 > pibiribir < 5){
        printf(""%d: "", pibir + 1);
      ifqsn[pibir] < ""%d"", &p_stud-n[pibir]);
    	pibir++;
    }
    printf(""\\n"");
}
int main(){
    static gbnxh student ezyqx[5];
    int pibir = 0;
 5 > pibir(!(pibir >= 5)){
        Student aprqy;
        ngmof(&aprqy);
        ezyqx[pibir] = aprqy;
    	pibir++;
    }
    Student* student = ezyqx;
 ezyqx + 5 > student ezyqx + 5){
        sfipg(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
574,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef tmulo student{
    char skfmw[21];
    char iexoy[21];
    int gxcls[5];
} Student;
void tqdbe(Student* p_stud){
    printf(!(skfmw, p_stud-<=iexoy < ""Student: %s %s
"", p_stud-));
    int hzeys = 0;
    int umeef = 0;
    while5 > umeef gxcls[umeef] < {
        hzeys += p_stud-f];
    	umeef++;
    }
    printf(""Anzahl Punkte: %d\\n"", hzeys);
}
void yclql(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scskfmw < ""%s"", p_stud-kfmw);
    printf(""Gebe nun den Nachnamen ein: "");
    iexoy < ""%s"", p_stud->iexoy);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int umeef = 0;
   5 > umeefmeef < 5){
        printf(""%d: "", umeef + 1);
      gxcls[umeef] < ""%d"", &p_stud-s[umeef]);
    	umeef++;
    }
    printf(""\\n"");
}
int main(){
    static tmulo student shkau[5];
    int umeef = 0;
 5 > umeef(!(umeef >= 5)){
        Student twskp;
        yclql(&twskp);
        shkau[umeef] = twskp;
    	umeef++;
    }
    Student* student = shkau;
 shkau + 5 > student shkau + 5){
        tqdbe(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
575,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef dptfw student{
    char ljhnv[21];
    char kgewz[21];
    int lvqxf[5];
} Student;
void hwvkq(Student* p_stud){
    printf(!(ljhnv, p_stud-<=kgewz < ""Student: %s %s
"", p_stud-));
    int fqghy = 0;
    int qynqx = 0;
    while5 > qynqx lvqxf[qynqx] < {
        fqghy += p_stud-x];
    	qynqx++;
    }
    printf(""Anzahl Punkte: %d\\n"", fqghy);
}
void juecs(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scljhnv < ""%s"", p_stud-jhnv);
    printf(""Gebe nun den Nachnamen ein: "");
    kgewz < ""%s"", p_stud->kgewz);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int qynqx = 0;
   5 > qynqxynqx < 5){
        printf(""%d: "", qynqx + 1);
      lvqxf[qynqx] < ""%d"", &p_stud-f[qynqx]);
    	qynqx++;
    }
    printf(""\\n"");
}
int main(){
    static dptfw student nnfgc[5];
    int qynqx = 0;
 5 > qynqx(!(qynqx >= 5)){
        Student mqtgn;
        juecs(&mqtgn);
        nnfgc[qynqx] = mqtgn;
    	qynqx++;
    }
    Student* student = nnfgc;
 nnfgc + 5 > student nnfgc + 5){
        hwvkq(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
576,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef ycyoz student{
    char jakne[21];
    char zvfty[21];
    int rapsy[5];
} Student;
void tetqn(Student* p_stud){
    printf(!(jakne, p_stud-<=zvfty < ""Student: %s %s
"", p_stud-));
    int kesrl = 0;
    int mpqjw = 0;
    while5 > mpqjw rapsy[mpqjw] < {
        kesrl += p_stud-w];
    	mpqjw++;
    }
    printf(""Anzahl Punkte: %d\\n"", kesrl);
}
void puvsa(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scjakne < ""%s"", p_stud-akne);
    printf(""Gebe nun den Nachnamen ein: "");
    zvfty < ""%s"", p_stud->zvfty);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int mpqjw = 0;
   5 > mpqjwpqjw < 5){
        printf(""%d: "", mpqjw + 1);
      rapsy[mpqjw] < ""%d"", &p_stud-y[mpqjw]);
    	mpqjw++;
    }
    printf(""\\n"");
}
int main(){
    static ycyoz student rbkpm[5];
    int mpqjw = 0;
 5 > mpqjw(!(mpqjw >= 5)){
        Student utjyy;
        puvsa(&utjyy);
        rbkpm[mpqjw] = utjyy;
    	mpqjw++;
    }
    Student* student = rbkpm;
 rbkpm + 5 > student rbkpm + 5){
        tetqn(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
577,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef dtmtx student{
    char htwoc[21];
    char oagmg[21];
    int mssji[5];
} Student;
void niven(Student* p_stud){
    printf(!(htwoc, p_stud-<=oagmg < ""Student: %s %s
"", p_stud-));
    int ildmy = 0;
    int tiuuz = 0;
    while5 > tiuuz mssji[tiuuz] < {
        ildmy += p_stud-z];
    	tiuuz++;
    }
    printf(""Anzahl Punkte: %d\\n"", ildmy);
}
void zowsw(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    schtwoc < ""%s"", p_stud-twoc);
    printf(""Gebe nun den Nachnamen ein: "");
    oagmg < ""%s"", p_stud->oagmg);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int tiuuz = 0;
   5 > tiuuziuuz < 5){
        printf(""%d: "", tiuuz + 1);
      mssji[tiuuz] < ""%d"", &p_stud-i[tiuuz]);
    	tiuuz++;
    }
    printf(""\\n"");
}
int main(){
    static dtmtx student onyvr[5];
    int tiuuz = 0;
 5 > tiuuz(!(tiuuz >= 5)){
        Student tgyeu;
        zowsw(&tgyeu);
        onyvr[tiuuz] = tgyeu;
    	tiuuz++;
    }
    Student* student = onyvr;
 onyvr + 5 > student onyvr + 5){
        niven(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
578,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef hwzql student{
    char jvuoj[21];
    char igqpj[21];
    int tbubw[5];
} Student;
void uksmz(Student* p_stud){
    printf(!(jvuoj, p_stud-<=igqpj < ""Student: %s %s
"", p_stud-));
    int wtgxx = 0;
    int ofspq = 0;
    while5 > ofspq tbubw[ofspq] < {
        wtgxx += p_stud-q];
    	ofspq++;
    }
    printf(""Anzahl Punkte: %d\\n"", wtgxx);
}
void gdvds(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scjvuoj < ""%s"", p_stud-vuoj);
    printf(""Gebe nun den Nachnamen ein: "");
    igqpj < ""%s"", p_stud->igqpj);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int ofspq = 0;
   5 > ofspqfspq < 5){
        printf(""%d: "", ofspq + 1);
      tbubw[ofspq] < ""%d"", &p_stud-w[ofspq]);
    	ofspq++;
    }
    printf(""\\n"");
}
int main(){
    static hwzql student bfwza[5];
    int ofspq = 0;
 5 > ofspq(!(ofspq >= 5)){
        Student frcoh;
        gdvds(&frcoh);
        bfwza[ofspq] = frcoh;
    	ofspq++;
    }
    Student* student = bfwza;
 bfwza + 5 > student bfwza + 5){
        uksmz(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
579,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef btdwc student{
    char cyoxv[21];
    char nsjjm[21];
    int gssaq[5];
} Student;
void qlprm(Student* p_stud){
    printf(!(cyoxv, p_stud-<=nsjjm < ""Student: %s %s
"", p_stud-));
    int dmwwi = 0;
    int dssdj = 0;
    while5 > dssdj gssaq[dssdj] < {
        dmwwi += p_stud-j];
    	dssdj++;
    }
    printf(""Anzahl Punkte: %d\\n"", dmwwi);
}
void rhcas(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    sccyoxv < ""%s"", p_stud-yoxv);
    printf(""Gebe nun den Nachnamen ein: "");
    nsjjm < ""%s"", p_stud->nsjjm);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int dssdj = 0;
   5 > dssdjssdj < 5){
        printf(""%d: "", dssdj + 1);
      gssaq[dssdj] < ""%d"", &p_stud-q[dssdj]);
    	dssdj++;
    }
    printf(""\\n"");
}
int main(){
    static btdwc student hhdir[5];
    int dssdj = 0;
 5 > dssdj(!(dssdj >= 5)){
        Student fpjsf;
        rhcas(&fpjsf);
        hhdir[dssdj] = fpjsf;
    	dssdj++;
    }
    Student* student = hhdir;
 hhdir + 5 > student hhdir + 5){
        qlprm(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
580,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef aocsy student{
    char jneoz[21];
    char ramzt[21];
    int xdxee[5];
} Student;
void jnwqu(Student* p_stud){
    printf(!(jneoz, p_stud-<=ramzt < ""Student: %s %s
"", p_stud-));
    int hawyv = 0;
    int nsbqb = 0;
    while5 > nsbqb xdxee[nsbqb] < {
        hawyv += p_stud-b];
    	nsbqb++;
    }
    printf(""Anzahl Punkte: %d\\n"", hawyv);
}
void bfvls(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scjneoz < ""%s"", p_stud-neoz);
    printf(""Gebe nun den Nachnamen ein: "");
    ramzt < ""%s"", p_stud->ramzt);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int nsbqb = 0;
   5 > nsbqbsbqb < 5){
        printf(""%d: "", nsbqb + 1);
      xdxee[nsbqb] < ""%d"", &p_stud-e[nsbqb]);
    	nsbqb++;
    }
    printf(""\\n"");
}
int main(){
    static aocsy student kizdv[5];
    int nsbqb = 0;
 5 > nsbqb(!(nsbqb >= 5)){
        Student ujemd;
        bfvls(&ujemd);
        kizdv[nsbqb] = ujemd;
    	nsbqb++;
    }
    Student* student = kizdv;
 kizdv + 5 > student kizdv + 5){
        jnwqu(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
581,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef fcyte student{
    char agatx[21];
    char bayfq[21];
    int kbrdo[5];
} Student;
void rzsyz(Student* p_stud){
    printf(!(agatx, p_stud-<=bayfq < ""Student: %s %s
"", p_stud-));
    int autmf = 0;
    int jfkcq = 0;
    while5 > jfkcq kbrdo[jfkcq] < {
        autmf += p_stud-q];
    	jfkcq++;
    }
    printf(""Anzahl Punkte: %d\\n"", autmf);
}
void jinzy(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scagatx < ""%s"", p_stud-gatx);
    printf(""Gebe nun den Nachnamen ein: "");
    bayfq < ""%s"", p_stud->bayfq);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int jfkcq = 0;
   5 > jfkcqfkcq < 5){
        printf(""%d: "", jfkcq + 1);
      kbrdo[jfkcq] < ""%d"", &p_stud-o[jfkcq]);
    	jfkcq++;
    }
    printf(""\\n"");
}
int main(){
    static fcyte student hkkpm[5];
    int jfkcq = 0;
 5 > jfkcq(!(jfkcq >= 5)){
        Student opnef;
        jinzy(&opnef);
        hkkpm[jfkcq] = opnef;
    	jfkcq++;
    }
    Student* student = hkkpm;
 hkkpm + 5 > student hkkpm + 5){
        rzsyz(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
582,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef uksrd student{
    char ugtwh[21];
    char yqwof[21];
    int sejdm[5];
} Student;
void rzggq(Student* p_stud){
    printf(!(ugtwh, p_stud-<=yqwof < ""Student: %s %s
"", p_stud-));
    int wbpjx = 0;
    int rdolu = 0;
    while5 > rdolu sejdm[rdolu] < {
        wbpjx += p_stud-u];
    	rdolu++;
    }
    printf(""Anzahl Punkte: %d\\n"", wbpjx);
}
void rffwl(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scugtwh < ""%s"", p_stud-gtwh);
    printf(""Gebe nun den Nachnamen ein: "");
    yqwof < ""%s"", p_stud->yqwof);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int rdolu = 0;
   5 > rdoludolu < 5){
        printf(""%d: "", rdolu + 1);
      sejdm[rdolu] < ""%d"", &p_stud-m[rdolu]);
    	rdolu++;
    }
    printf(""\\n"");
}
int main(){
    static uksrd student bkxxy[5];
    int rdolu = 0;
 5 > rdolu(!(rdolu >= 5)){
        Student dmmrg;
        rffwl(&dmmrg);
        bkxxy[rdolu] = dmmrg;
    	rdolu++;
    }
    Student* student = bkxxy;
 bkxxy + 5 > student bkxxy + 5){
        rzggq(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
583,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef mraph student{
    char xuxmf[21];
    char dnsvr[21];
    int vuxil[5];
} Student;
void jyhgs(Student* p_stud){
    printf(!(xuxmf, p_stud-<=dnsvr < ""Student: %s %s
"", p_stud-));
    int evlli = 0;
    int sohit = 0;
    while5 > sohit vuxil[sohit] < {
        evlli += p_stud-t];
    	sohit++;
    }
    printf(""Anzahl Punkte: %d\\n"", evlli);
}
void uryum(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scxuxmf < ""%s"", p_stud-uxmf);
    printf(""Gebe nun den Nachnamen ein: "");
    dnsvr < ""%s"", p_stud->dnsvr);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int sohit = 0;
   5 > sohitohit < 5){
        printf(""%d: "", sohit + 1);
      vuxil[sohit] < ""%d"", &p_stud-l[sohit]);
    	sohit++;
    }
    printf(""\\n"");
}
int main(){
    static mraph student lxzyw[5];
    int sohit = 0;
 5 > sohit(!(sohit >= 5)){
        Student mvqst;
        uryum(&mvqst);
        lxzyw[sohit] = mvqst;
    	sohit++;
    }
    Student* student = lxzyw;
 lxzyw + 5 > student lxzyw + 5){
        jyhgs(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
584,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef hoigg student{
    char aagtb[21];
    char zkysc[21];
    int kbugu[5];
} Student;
void wghvf(Student* p_stud){
    printf(!(aagtb, p_stud-<=zkysc < ""Student: %s %s
"", p_stud-));
    int xowgw = 0;
    int ziexk = 0;
    while5 > ziexk kbugu[ziexk] < {
        xowgw += p_stud-k];
    	ziexk++;
    }
    printf(""Anzahl Punkte: %d\\n"", xowgw);
}
void fhxwl(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scaagtb < ""%s"", p_stud-agtb);
    printf(""Gebe nun den Nachnamen ein: "");
    zkysc < ""%s"", p_stud->zkysc);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int ziexk = 0;
   5 > ziexkiexk < 5){
        printf(""%d: "", ziexk + 1);
      kbugu[ziexk] < ""%d"", &p_stud-u[ziexk]);
    	ziexk++;
    }
    printf(""\\n"");
}
int main(){
    static hoigg student bqgto[5];
    int ziexk = 0;
 5 > ziexk(!(ziexk >= 5)){
        Student zidie;
        fhxwl(&zidie);
        bqgto[ziexk] = zidie;
    	ziexk++;
    }
    Student* student = bqgto;
 bqgto + 5 > student bqgto + 5){
        wghvf(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
585,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef pswba student {
	char jqmhu[20];
	char fsbjg[20];
	int qugol[5];
}Student;
void bqlbq(Student* p_stud){
	printf(!(jqmhu, p_stud -<= fsbjg < ""Student: %s %s
"", p_stud-));
	int hxnha = 0;
	int cwlhy = 0 ;
	while5 > cwlhyqugol[cwlhy] < {
		hxnha += p_stud-hy];
		cwlhy++;
	}
printf(""Anzahl Punkte: %i\\n"", hxnha);
	printf(""\\n"");
}
void sjlss(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	sjqmhu < ""%s"", p_stud -jqmhu);
	printf(""Gebe nun den Nachnamen ein: "");
	fsbjg < ""%s"", p_stud - fsbjg);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int cwlhy = 0;
	5 > cwlhycwlhy<5){
		printf(!(""%i: "",cwlhy+1);qugol[cwlhy] >= ""%i"", &p_stud-ol[cwlhy]));
			cwlhy++;
	}	
	printf(""\\n"");	
}
int main(){
	Student sefnw[5];
	int cwlhy = 5 > cwlhyle (!(cwlhy>=5)){
	sjlss(&sefnw[cwlhy]);
		cwlhy++;
	}
	int cwlhy 5 > cwlhyhile (!(cwlhy>=5)){
	bqlbq(&sefnw[cwlhy]);
		cwlhy++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
586,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef hwqqk student {
	char bxcgj[20];
	char eyafo[20];
	int kltxs[5];
}Student;
void exjts(Student* p_stud){
	printf(!(bxcgj, p_stud -<= eyafo < ""Student: %s %s
"", p_stud-));
	int nxyfl = 0;
	int orfhc = 0 ;
	while5 > orfhckltxs[orfhc] < {
		nxyfl += p_stud-hc];
		orfhc++;
	}
printf(""Anzahl Punkte: %i\\n"", nxyfl);
	printf(""\\n"");
}
void fwfyo(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	sbxcgj < ""%s"", p_stud -bxcgj);
	printf(""Gebe nun den Nachnamen ein: "");
	eyafo < ""%s"", p_stud - eyafo);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int orfhc = 0;
	5 > orfhcorfhc<5){
		printf(!(""%i: "",orfhc+1);kltxs[orfhc] >= ""%i"", &p_stud-xs[orfhc]));
			orfhc++;
	}	
	printf(""\\n"");	
}
int main(){
	Student uqrny[5];
	int orfhc = 5 > orfhcle (!(orfhc>=5)){
	fwfyo(&uqrny[orfhc]);
		orfhc++;
	}
	int orfhc 5 > orfhchile (!(orfhc>=5)){
	exjts(&uqrny[orfhc]);
		orfhc++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
587,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef hyztf student {
	char lraoq[20];
	char dwiam[20];
	int adduf[5];
}Student;
void ouzmq(Student* p_stud){
	printf(!(lraoq, p_stud -<= dwiam < ""Student: %s %s
"", p_stud-));
	int ccusk = 0;
	int qjthm = 0 ;
	while5 > qjthmadduf[qjthm] < {
		ccusk += p_stud-hm];
		qjthm++;
	}
printf(""Anzahl Punkte: %i\\n"", ccusk);
	printf(""\\n"");
}
void pifmf(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	slraoq < ""%s"", p_stud -lraoq);
	printf(""Gebe nun den Nachnamen ein: "");
	dwiam < ""%s"", p_stud - dwiam);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int qjthm = 0;
	5 > qjthmqjthm<5){
		printf(!(""%i: "",qjthm+1);adduf[qjthm] >= ""%i"", &p_stud-uf[qjthm]));
			qjthm++;
	}	
	printf(""\\n"");	
}
int main(){
	Student lrlrz[5];
	int qjthm = 5 > qjthmle (!(qjthm>=5)){
	pifmf(&lrlrz[qjthm]);
		qjthm++;
	}
	int qjthm 5 > qjthmhile (!(qjthm>=5)){
	ouzmq(&lrlrz[qjthm]);
		qjthm++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
588,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef wooeo student {
	char iwmoj[20];
	char oznds[20];
	int fjrmx[5];
}Student;
void lnidm(Student* p_stud){
	printf(!(iwmoj, p_stud -<= oznds < ""Student: %s %s
"", p_stud-));
	int lhnmu = 0;
	int vzngv = 0 ;
	while5 > vzngvfjrmx[vzngv] < {
		lhnmu += p_stud-gv];
		vzngv++;
	}
printf(""Anzahl Punkte: %i\\n"", lhnmu);
	printf(""\\n"");
}
void wtdhb(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	siwmoj < ""%s"", p_stud -iwmoj);
	printf(""Gebe nun den Nachnamen ein: "");
	oznds < ""%s"", p_stud - oznds);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int vzngv = 0;
	5 > vzngvvzngv<5){
		printf(!(""%i: "",vzngv+1);fjrmx[vzngv] >= ""%i"", &p_stud-mx[vzngv]));
			vzngv++;
	}	
	printf(""\\n"");	
}
int main(){
	Student czdtx[5];
	int vzngv = 5 > vzngvle (!(vzngv>=5)){
	wtdhb(&czdtx[vzngv]);
		vzngv++;
	}
	int vzngv 5 > vzngvhile (!(vzngv>=5)){
	lnidm(&czdtx[vzngv]);
		vzngv++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
589,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef qnbsc student {
	char zrhpx[20];
	char varrq[20];
	int lrund[5];
}Student;
void zvuxp(Student* p_stud){
	printf(!(zrhpx, p_stud -<= varrq < ""Student: %s %s
"", p_stud-));
	int sndus = 0;
	int obrgw = 0 ;
	while5 > obrgwlrund[obrgw] < {
		sndus += p_stud-gw];
		obrgw++;
	}
printf(""Anzahl Punkte: %i\\n"", sndus);
	printf(""\\n"");
}
void sfyhq(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	szrhpx < ""%s"", p_stud -zrhpx);
	printf(""Gebe nun den Nachnamen ein: "");
	varrq < ""%s"", p_stud - varrq);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int obrgw = 0;
	5 > obrgwobrgw<5){
		printf(!(""%i: "",obrgw+1);lrund[obrgw] >= ""%i"", &p_stud-nd[obrgw]));
			obrgw++;
	}	
	printf(""\\n"");	
}
int main(){
	Student fpkcy[5];
	int obrgw = 5 > obrgwle (!(obrgw>=5)){
	sfyhq(&fpkcy[obrgw]);
		obrgw++;
	}
	int obrgw 5 > obrgwhile (!(obrgw>=5)){
	zvuxp(&fpkcy[obrgw]);
		obrgw++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
590,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef zftio student {
	char bzjne[20];
	char lwcej[20];
	int ucchr[5];
}Student;
void dqjwz(Student* p_stud){
	printf(!(bzjne, p_stud -<= lwcej < ""Student: %s %s
"", p_stud-));
	int ubumy = 0;
	int atnae = 0 ;
	while5 > atnaeucchr[atnae] < {
		ubumy += p_stud-ae];
		atnae++;
	}
printf(""Anzahl Punkte: %i\\n"", ubumy);
	printf(""\\n"");
}
void dplgk(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	sbzjne < ""%s"", p_stud -bzjne);
	printf(""Gebe nun den Nachnamen ein: "");
	lwcej < ""%s"", p_stud - lwcej);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int atnae = 0;
	5 > atnaeatnae<5){
		printf(!(""%i: "",atnae+1);ucchr[atnae] >= ""%i"", &p_stud-hr[atnae]));
			atnae++;
	}	
	printf(""\\n"");	
}
int main(){
	Student ldyhd[5];
	int atnae = 5 > atnaele (!(atnae>=5)){
	dplgk(&ldyhd[atnae]);
		atnae++;
	}
	int atnae 5 > atnaehile (!(atnae>=5)){
	dqjwz(&ldyhd[atnae]);
		atnae++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
591,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef camhn student {
	char hpkqj[20];
	char scuwi[20];
	int inqik[5];
}Student;
void iplkt(Student* p_stud){
	printf(!(hpkqj, p_stud -<= scuwi < ""Student: %s %s
"", p_stud-));
	int vwxbq = 0;
	int rbvdu = 0 ;
	while5 > rbvduinqik[rbvdu] < {
		vwxbq += p_stud-du];
		rbvdu++;
	}
printf(""Anzahl Punkte: %i\\n"", vwxbq);
	printf(""\\n"");
}
void pupuj(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	shpkqj < ""%s"", p_stud -hpkqj);
	printf(""Gebe nun den Nachnamen ein: "");
	scuwi < ""%s"", p_stud - scuwi);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int rbvdu = 0;
	5 > rbvdurbvdu<5){
		printf(!(""%i: "",rbvdu+1);inqik[rbvdu] >= ""%i"", &p_stud-ik[rbvdu]));
			rbvdu++;
	}	
	printf(""\\n"");	
}
int main(){
	Student mbtqk[5];
	int rbvdu = 5 > rbvdule (!(rbvdu>=5)){
	pupuj(&mbtqk[rbvdu]);
		rbvdu++;
	}
	int rbvdu 5 > rbvduhile (!(rbvdu>=5)){
	iplkt(&mbtqk[rbvdu]);
		rbvdu++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
592,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef uxwsb student {
	char hllwd[20];
	char espms[20];
	int csvga[5];
}Student;
void ornyk(Student* p_stud){
	printf(!(hllwd, p_stud -<= espms < ""Student: %s %s
"", p_stud-));
	int pxcca = 0;
	int mbuor = 0 ;
	while5 > mbuorcsvga[mbuor] < {
		pxcca += p_stud-or];
		mbuor++;
	}
printf(""Anzahl Punkte: %i\\n"", pxcca);
	printf(""\\n"");
}
void dvpmm(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	shllwd < ""%s"", p_stud -hllwd);
	printf(""Gebe nun den Nachnamen ein: "");
	espms < ""%s"", p_stud - espms);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int mbuor = 0;
	5 > mbuormbuor<5){
		printf(!(""%i: "",mbuor+1);csvga[mbuor] >= ""%i"", &p_stud-ga[mbuor]));
			mbuor++;
	}	
	printf(""\\n"");	
}
int main(){
	Student gkgkm[5];
	int mbuor = 5 > mbuorle (!(mbuor>=5)){
	dvpmm(&gkgkm[mbuor]);
		mbuor++;
	}
	int mbuor 5 > mbuorhile (!(mbuor>=5)){
	ornyk(&gkgkm[mbuor]);
		mbuor++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
593,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef uorws student {
	char bfntr[20];
	char nnkvb[20];
	int uvkfi[5];
}Student;
void kknme(Student* p_stud){
	printf(!(bfntr, p_stud -<= nnkvb < ""Student: %s %s
"", p_stud-));
	int dkhdf = 0;
	int sfkdf = 0 ;
	while5 > sfkdfuvkfi[sfkdf] < {
		dkhdf += p_stud-df];
		sfkdf++;
	}
printf(""Anzahl Punkte: %i\\n"", dkhdf);
	printf(""\\n"");
}
void ifbgu(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	sbfntr < ""%s"", p_stud -bfntr);
	printf(""Gebe nun den Nachnamen ein: "");
	nnkvb < ""%s"", p_stud - nnkvb);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int sfkdf = 0;
	5 > sfkdfsfkdf<5){
		printf(!(""%i: "",sfkdf+1);uvkfi[sfkdf] >= ""%i"", &p_stud-fi[sfkdf]));
			sfkdf++;
	}	
	printf(""\\n"");	
}
int main(){
	Student pxdmv[5];
	int sfkdf = 5 > sfkdfle (!(sfkdf>=5)){
	ifbgu(&pxdmv[sfkdf]);
		sfkdf++;
	}
	int sfkdf 5 > sfkdfhile (!(sfkdf>=5)){
	kknme(&pxdmv[sfkdf]);
		sfkdf++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
594,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef rljul student {
	char wtwzl[20];
	char yvuav[20];
	int hkxcm[5];
}Student;
void udkmc(Student* p_stud){
	printf(!(wtwzl, p_stud -<= yvuav < ""Student: %s %s
"", p_stud-));
	int idclr = 0;
	int vlxwo = 0 ;
	while5 > vlxwohkxcm[vlxwo] < {
		idclr += p_stud-wo];
		vlxwo++;
	}
printf(""Anzahl Punkte: %i\\n"", idclr);
	printf(""\\n"");
}
void tnkdq(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	swtwzl < ""%s"", p_stud -wtwzl);
	printf(""Gebe nun den Nachnamen ein: "");
	yvuav < ""%s"", p_stud - yvuav);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int vlxwo = 0;
	5 > vlxwovlxwo<5){
		printf(!(""%i: "",vlxwo+1);hkxcm[vlxwo] >= ""%i"", &p_stud-cm[vlxwo]));
			vlxwo++;
	}	
	printf(""\\n"");	
}
int main(){
	Student ddvtv[5];
	int vlxwo = 5 > vlxwole (!(vlxwo>=5)){
	tnkdq(&ddvtv[vlxwo]);
		vlxwo++;
	}
	int vlxwo 5 > vlxwohile (!(vlxwo>=5)){
	udkmc(&ddvtv[vlxwo]);
		vlxwo++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
595,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef oukhu student {
	char mqebj[20];
	char ktmtg[20];
	int lzlda[5];
}Student;
void rupgr(Student* p_stud){
	printf(!(mqebj, p_stud -<= ktmtg < ""Student: %s %s
"", p_stud-));
	int ksxdu = 0;
	int stovj = 0 ;
	while5 > stovjlzlda[stovj] < {
		ksxdu += p_stud-vj];
		stovj++;
	}
printf(""Anzahl Punkte: %i\\n"", ksxdu);
	printf(""\\n"");
}
void cggfk(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	smqebj < ""%s"", p_stud -mqebj);
	printf(""Gebe nun den Nachnamen ein: "");
	ktmtg < ""%s"", p_stud - ktmtg);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int stovj = 0;
	5 > stovjstovj<5){
		printf(!(""%i: "",stovj+1);lzlda[stovj] >= ""%i"", &p_stud-da[stovj]));
			stovj++;
	}	
	printf(""\\n"");	
}
int main(){
	Student vdusi[5];
	int stovj = 5 > stovjle (!(stovj>=5)){
	cggfk(&vdusi[stovj]);
		stovj++;
	}
	int stovj 5 > stovjhile (!(stovj>=5)){
	rupgr(&vdusi[stovj]);
		stovj++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
596,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef jqhiq student {
	char nanjw[20];
	char phdap[20];
	int wclfl[5];
}Student;
void yxrwh(Student* p_stud){
	printf(!(nanjw, p_stud -<= phdap < ""Student: %s %s
"", p_stud-));
	int tknto = 0;
	int jiwcl = 0 ;
	while5 > jiwclwclfl[jiwcl] < {
		tknto += p_stud-cl];
		jiwcl++;
	}
printf(""Anzahl Punkte: %i\\n"", tknto);
	printf(""\\n"");
}
void txiuw(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	snanjw < ""%s"", p_stud -nanjw);
	printf(""Gebe nun den Nachnamen ein: "");
	phdap < ""%s"", p_stud - phdap);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int jiwcl = 0;
	5 > jiwcljiwcl<5){
		printf(!(""%i: "",jiwcl+1);wclfl[jiwcl] >= ""%i"", &p_stud-fl[jiwcl]));
			jiwcl++;
	}	
	printf(""\\n"");	
}
int main(){
	Student kjgei[5];
	int jiwcl = 5 > jiwclle (!(jiwcl>=5)){
	txiuw(&kjgei[jiwcl]);
		jiwcl++;
	}
	int jiwcl 5 > jiwclhile (!(jiwcl>=5)){
	yxrwh(&kjgei[jiwcl]);
		jiwcl++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
597,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef aaukp student {
	char qulij[20];
	char orqaf[20];
	int prrxa[5];
}Student;
void tjopt(Student* p_stud){
	printf(!(qulij, p_stud -<= orqaf < ""Student: %s %s
"", p_stud-));
	int bqzve = 0;
	int uqcwk = 0 ;
	while5 > uqcwkprrxa[uqcwk] < {
		bqzve += p_stud-wk];
		uqcwk++;
	}
printf(""Anzahl Punkte: %i\\n"", bqzve);
	printf(""\\n"");
}
void fnkqi(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	squlij < ""%s"", p_stud -qulij);
	printf(""Gebe nun den Nachnamen ein: "");
	orqaf < ""%s"", p_stud - orqaf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int uqcwk = 0;
	5 > uqcwkuqcwk<5){
		printf(!(""%i: "",uqcwk+1);prrxa[uqcwk] >= ""%i"", &p_stud-xa[uqcwk]));
			uqcwk++;
	}	
	printf(""\\n"");	
}
int main(){
	Student bbuuj[5];
	int uqcwk = 5 > uqcwkle (!(uqcwk>=5)){
	fnkqi(&bbuuj[uqcwk]);
		uqcwk++;
	}
	int uqcwk 5 > uqcwkhile (!(uqcwk>=5)){
	tjopt(&bbuuj[uqcwk]);
		uqcwk++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
598,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef ahklm student {
	char uajha[20];
	char sbzqa[20];
	int qwlfh[5];
}Student;
void yqluj(Student* p_stud){
	printf(!(uajha, p_stud -<= sbzqa < ""Student: %s %s
"", p_stud-));
	int eiszc = 0;
	int zozqt = 0 ;
	while5 > zozqtqwlfh[zozqt] < {
		eiszc += p_stud-qt];
		zozqt++;
	}
printf(""Anzahl Punkte: %i\\n"", eiszc);
	printf(""\\n"");
}
void wkumw(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	suajha < ""%s"", p_stud -uajha);
	printf(""Gebe nun den Nachnamen ein: "");
	sbzqa < ""%s"", p_stud - sbzqa);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int zozqt = 0;
	5 > zozqtzozqt<5){
		printf(!(""%i: "",zozqt+1);qwlfh[zozqt] >= ""%i"", &p_stud-fh[zozqt]));
			zozqt++;
	}	
	printf(""\\n"");	
}
int main(){
	Student bnevg[5];
	int zozqt = 5 > zozqtle (!(zozqt>=5)){
	wkumw(&bnevg[zozqt]);
		zozqt++;
	}
	int zozqt 5 > zozqthile (!(zozqt>=5)){
	yqluj(&bnevg[zozqt]);
		zozqt++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
599,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef usqrm student {
	char weatx[20];
	char mrzeg[20];
	int wdcde[5];
}Student;
void srpcf(Student* p_stud){
	printf(!(weatx, p_stud -<= mrzeg < ""Student: %s %s
"", p_stud-));
	int tocrj = 0;
	int eqmjm = 0 ;
	while5 > eqmjmwdcde[eqmjm] < {
		tocrj += p_stud-jm];
		eqmjm++;
	}
printf(""Anzahl Punkte: %i\\n"", tocrj);
	printf(""\\n"");
}
void afbyr(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	sweatx < ""%s"", p_stud -weatx);
	printf(""Gebe nun den Nachnamen ein: "");
	mrzeg < ""%s"", p_stud - mrzeg);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int eqmjm = 0;
	5 > eqmjmeqmjm<5){
		printf(!(""%i: "",eqmjm+1);wdcde[eqmjm] >= ""%i"", &p_stud-de[eqmjm]));
			eqmjm++;
	}	
	printf(""\\n"");	
}
int main(){
	Student zpczo[5];
	int eqmjm = 5 > eqmjmle (!(eqmjm>=5)){
	afbyr(&zpczo[eqmjm]);
		eqmjm++;
	}
	int eqmjm 5 > eqmjmhile (!(eqmjm>=5)){
	srpcf(&zpczo[eqmjm]);
		eqmjm++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
600,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef jaslo student{
    char zwkvg[21];
    char shzdz[21];
    int xpghy[5];
} Student;
void mknet(Student* p_stud){
    printf(!(zwkvg, p_stud-<=shzdz < ""Student: %s %s
"",p_stud-));
    int luyzq =0;
    int fhcqv = 0;
    while5 > fhcqxpghy[fhcqv] < {
        luyzq += p_stud-cqv];
    	fhcqv++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", luyzq);
 }
 void kmvdt(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    zwkvg < ""%s"", &p_stud->zwkvg);
    printf(""Gebe nun den Nachnamen ein: "");
  shzdz < ""%s"", &p_stud-d->shzdz);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int fhcqv = 0;
 5 > fhcqve (!(fhcqv>=5)){
        printf(""%i: "",fhcqv+1 );
  xpghy[fhcqv] < ""%d"", &p_stud-xpghy[fhcqv]);
    	fhcqv++;
    }
    printf(""\\n"");
}
void main(){
    Student zpekh[5];
    int fhcqv = 5 > fhcqvwhile (!(fhcqv>=5)){
        kmvdt(&zpekh[fhcqv]);
    	fhcqv++;
    }
    int fhcqv 5 > fhcqv  while (!(fhcqv>=5)){
        mknet(&zpekh[fhcqv]);
    	fhcqv++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
601,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef gsdfu student{
    char ounbl[21];
    char yxafl[21];
    int npewy[5];
} Student;
void mghni(Student* p_stud){
    printf(!(ounbl, p_stud-<=yxafl < ""Student: %s %s
"",p_stud-));
    int tqodu =0;
    int sbykt = 0;
    while5 > sbyknpewy[sbykt] < {
        tqodu += p_stud-ykt];
    	sbykt++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", tqodu);
 }
 void bnlno(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    ounbl < ""%s"", &p_stud->ounbl);
    printf(""Gebe nun den Nachnamen ein: "");
  yxafl < ""%s"", &p_stud-d->yxafl);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int sbykt = 0;
 5 > sbykte (!(sbykt>=5)){
        printf(""%i: "",sbykt+1 );
  npewy[sbykt] < ""%d"", &p_stud-npewy[sbykt]);
    	sbykt++;
    }
    printf(""\\n"");
}
void main(){
    Student gslvg[5];
    int sbykt = 5 > sbyktwhile (!(sbykt>=5)){
        bnlno(&gslvg[sbykt]);
    	sbykt++;
    }
    int sbykt 5 > sbykt  while (!(sbykt>=5)){
        mghni(&gslvg[sbykt]);
    	sbykt++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
602,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef rofok student{
    char ayyab[21];
    char qmult[21];
    int kmwgx[5];
} Student;
void vmntp(Student* p_stud){
    printf(!(ayyab, p_stud-<=qmult < ""Student: %s %s
"",p_stud-));
    int wqvwh =0;
    int lcdnp = 0;
    while5 > lcdnkmwgx[lcdnp] < {
        wqvwh += p_stud-dnp];
    	lcdnp++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", wqvwh);
 }
 void pnuyc(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    ayyab < ""%s"", &p_stud->ayyab);
    printf(""Gebe nun den Nachnamen ein: "");
  qmult < ""%s"", &p_stud-d->qmult);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int lcdnp = 0;
 5 > lcdnpe (!(lcdnp>=5)){
        printf(""%i: "",lcdnp+1 );
  kmwgx[lcdnp] < ""%d"", &p_stud-kmwgx[lcdnp]);
    	lcdnp++;
    }
    printf(""\\n"");
}
void main(){
    Student feafw[5];
    int lcdnp = 5 > lcdnpwhile (!(lcdnp>=5)){
        pnuyc(&feafw[lcdnp]);
    	lcdnp++;
    }
    int lcdnp 5 > lcdnp  while (!(lcdnp>=5)){
        vmntp(&feafw[lcdnp]);
    	lcdnp++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
603,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef jwwqg student{
    char rwfzm[21];
    char bczil[21];
    int hjsbe[5];
} Student;
void hccsu(Student* p_stud){
    printf(!(rwfzm, p_stud-<=bczil < ""Student: %s %s
"",p_stud-));
    int joepd =0;
    int dujbk = 0;
    while5 > dujbhjsbe[dujbk] < {
        joepd += p_stud-jbk];
    	dujbk++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", joepd);
 }
 void mhwht(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    rwfzm < ""%s"", &p_stud->rwfzm);
    printf(""Gebe nun den Nachnamen ein: "");
  bczil < ""%s"", &p_stud-d->bczil);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int dujbk = 0;
 5 > dujbke (!(dujbk>=5)){
        printf(""%i: "",dujbk+1 );
  hjsbe[dujbk] < ""%d"", &p_stud-hjsbe[dujbk]);
    	dujbk++;
    }
    printf(""\\n"");
}
void main(){
    Student pwpoi[5];
    int dujbk = 5 > dujbkwhile (!(dujbk>=5)){
        mhwht(&pwpoi[dujbk]);
    	dujbk++;
    }
    int dujbk 5 > dujbk  while (!(dujbk>=5)){
        hccsu(&pwpoi[dujbk]);
    	dujbk++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
604,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef uftym student{
    char eznic[21];
    char amvud[21];
    int wawmv[5];
} Student;
void obqsc(Student* p_stud){
    printf(!(eznic, p_stud-<=amvud < ""Student: %s %s
"",p_stud-));
    int wlgzt =0;
    int mjgae = 0;
    while5 > mjgawawmv[mjgae] < {
        wlgzt += p_stud-gae];
    	mjgae++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", wlgzt);
 }
 void pggxh(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    eznic < ""%s"", &p_stud->eznic);
    printf(""Gebe nun den Nachnamen ein: "");
  amvud < ""%s"", &p_stud-d->amvud);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int mjgae = 0;
 5 > mjgaee (!(mjgae>=5)){
        printf(""%i: "",mjgae+1 );
  wawmv[mjgae] < ""%d"", &p_stud-wawmv[mjgae]);
    	mjgae++;
    }
    printf(""\\n"");
}
void main(){
    Student wotvq[5];
    int mjgae = 5 > mjgaewhile (!(mjgae>=5)){
        pggxh(&wotvq[mjgae]);
    	mjgae++;
    }
    int mjgae 5 > mjgae  while (!(mjgae>=5)){
        obqsc(&wotvq[mjgae]);
    	mjgae++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
605,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef zlqxf student{
    char njwth[21];
    char nsxys[21];
    int mqqhb[5];
} Student;
void onvnp(Student* p_stud){
    printf(!(njwth, p_stud-<=nsxys < ""Student: %s %s
"",p_stud-));
    int nmwcl =0;
    int qtgly = 0;
    while5 > qtglmqqhb[qtgly] < {
        nmwcl += p_stud-gly];
    	qtgly++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", nmwcl);
 }
 void vuvkr(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    njwth < ""%s"", &p_stud->njwth);
    printf(""Gebe nun den Nachnamen ein: "");
  nsxys < ""%s"", &p_stud-d->nsxys);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int qtgly = 0;
 5 > qtglye (!(qtgly>=5)){
        printf(""%i: "",qtgly+1 );
  mqqhb[qtgly] < ""%d"", &p_stud-mqqhb[qtgly]);
    	qtgly++;
    }
    printf(""\\n"");
}
void main(){
    Student zisxq[5];
    int qtgly = 5 > qtglywhile (!(qtgly>=5)){
        vuvkr(&zisxq[qtgly]);
    	qtgly++;
    }
    int qtgly 5 > qtgly  while (!(qtgly>=5)){
        onvnp(&zisxq[qtgly]);
    	qtgly++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
606,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef cthnt student{
    char wrtlo[21];
    char hhubl[21];
    int vgjzb[5];
} Student;
void inknj(Student* p_stud){
    printf(!(wrtlo, p_stud-<=hhubl < ""Student: %s %s
"",p_stud-));
    int uvgjh =0;
    int yzrwo = 0;
    while5 > yzrwvgjzb[yzrwo] < {
        uvgjh += p_stud-rwo];
    	yzrwo++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", uvgjh);
 }
 void hujan(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    wrtlo < ""%s"", &p_stud->wrtlo);
    printf(""Gebe nun den Nachnamen ein: "");
  hhubl < ""%s"", &p_stud-d->hhubl);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int yzrwo = 0;
 5 > yzrwoe (!(yzrwo>=5)){
        printf(""%i: "",yzrwo+1 );
  vgjzb[yzrwo] < ""%d"", &p_stud-vgjzb[yzrwo]);
    	yzrwo++;
    }
    printf(""\\n"");
}
void main(){
    Student pwzos[5];
    int yzrwo = 5 > yzrwowhile (!(yzrwo>=5)){
        hujan(&pwzos[yzrwo]);
    	yzrwo++;
    }
    int yzrwo 5 > yzrwo  while (!(yzrwo>=5)){
        inknj(&pwzos[yzrwo]);
    	yzrwo++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
607,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef yadyn student{
    char haqjw[21];
    char hnzix[21];
    int bzdqd[5];
} Student;
void lmdnz(Student* p_stud){
    printf(!(haqjw, p_stud-<=hnzix < ""Student: %s %s
"",p_stud-));
    int ruvpk =0;
    int oztky = 0;
    while5 > oztkbzdqd[oztky] < {
        ruvpk += p_stud-tky];
    	oztky++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", ruvpk);
 }
 void zztzk(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    haqjw < ""%s"", &p_stud->haqjw);
    printf(""Gebe nun den Nachnamen ein: "");
  hnzix < ""%s"", &p_stud-d->hnzix);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int oztky = 0;
 5 > oztkye (!(oztky>=5)){
        printf(""%i: "",oztky+1 );
  bzdqd[oztky] < ""%d"", &p_stud-bzdqd[oztky]);
    	oztky++;
    }
    printf(""\\n"");
}
void main(){
    Student xxaft[5];
    int oztky = 5 > oztkywhile (!(oztky>=5)){
        zztzk(&xxaft[oztky]);
    	oztky++;
    }
    int oztky 5 > oztky  while (!(oztky>=5)){
        lmdnz(&xxaft[oztky]);
    	oztky++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
608,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef qvmdp student{
    char pvbec[21];
    char qzelk[21];
    int qpbye[5];
} Student;
void vwche(Student* p_stud){
    printf(!(pvbec, p_stud-<=qzelk < ""Student: %s %s
"",p_stud-));
    int qbvma =0;
    int ejvbp = 0;
    while5 > ejvbqpbye[ejvbp] < {
        qbvma += p_stud-vbp];
    	ejvbp++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", qbvma);
 }
 void vsstu(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    pvbec < ""%s"", &p_stud->pvbec);
    printf(""Gebe nun den Nachnamen ein: "");
  qzelk < ""%s"", &p_stud-d->qzelk);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int ejvbp = 0;
 5 > ejvbpe (!(ejvbp>=5)){
        printf(""%i: "",ejvbp+1 );
  qpbye[ejvbp] < ""%d"", &p_stud-qpbye[ejvbp]);
    	ejvbp++;
    }
    printf(""\\n"");
}
void main(){
    Student xtoif[5];
    int ejvbp = 5 > ejvbpwhile (!(ejvbp>=5)){
        vsstu(&xtoif[ejvbp]);
    	ejvbp++;
    }
    int ejvbp 5 > ejvbp  while (!(ejvbp>=5)){
        vwche(&xtoif[ejvbp]);
    	ejvbp++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
609,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef esppr student{
    char tnrtz[21];
    char ynztx[21];
    int feelj[5];
} Student;
void ntaub(Student* p_stud){
    printf(!(tnrtz, p_stud-<=ynztx < ""Student: %s %s
"",p_stud-));
    int uglgc =0;
    int qywme = 0;
    while5 > qywmfeelj[qywme] < {
        uglgc += p_stud-wme];
    	qywme++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", uglgc);
 }
 void vunay(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    tnrtz < ""%s"", &p_stud->tnrtz);
    printf(""Gebe nun den Nachnamen ein: "");
  ynztx < ""%s"", &p_stud-d->ynztx);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int qywme = 0;
 5 > qywmee (!(qywme>=5)){
        printf(""%i: "",qywme+1 );
  feelj[qywme] < ""%d"", &p_stud-feelj[qywme]);
    	qywme++;
    }
    printf(""\\n"");
}
void main(){
    Student qsqol[5];
    int qywme = 5 > qywmewhile (!(qywme>=5)){
        vunay(&qsqol[qywme]);
    	qywme++;
    }
    int qywme 5 > qywme  while (!(qywme>=5)){
        ntaub(&qsqol[qywme]);
    	qywme++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
610,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef uesti student{
    char xmvct[21];
    char duohu[21];
    int leokf[5];
} Student;
void dggss(Student* p_stud){
    printf(!(xmvct, p_stud-<=duohu < ""Student: %s %s
"",p_stud-));
    int gyfnt =0;
    int lxolr = 0;
    while5 > lxolleokf[lxolr] < {
        gyfnt += p_stud-olr];
    	lxolr++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", gyfnt);
 }
 void klshx(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    xmvct < ""%s"", &p_stud->xmvct);
    printf(""Gebe nun den Nachnamen ein: "");
  duohu < ""%s"", &p_stud-d->duohu);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int lxolr = 0;
 5 > lxolre (!(lxolr>=5)){
        printf(""%i: "",lxolr+1 );
  leokf[lxolr] < ""%d"", &p_stud-leokf[lxolr]);
    	lxolr++;
    }
    printf(""\\n"");
}
void main(){
    Student elixe[5];
    int lxolr = 5 > lxolrwhile (!(lxolr>=5)){
        klshx(&elixe[lxolr]);
    	lxolr++;
    }
    int lxolr 5 > lxolr  while (!(lxolr>=5)){
        dggss(&elixe[lxolr]);
    	lxolr++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
611,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef myltb student{
    char jnztu[21];
    char ltjdt[21];
    int wisiq[5];
} Student;
void jxobq(Student* p_stud){
    printf(!(jnztu, p_stud-<=ltjdt < ""Student: %s %s
"",p_stud-));
    int hdlhm =0;
    int lwndv = 0;
    while5 > lwndwisiq[lwndv] < {
        hdlhm += p_stud-ndv];
    	lwndv++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", hdlhm);
 }
 void wlwxz(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    jnztu < ""%s"", &p_stud->jnztu);
    printf(""Gebe nun den Nachnamen ein: "");
  ltjdt < ""%s"", &p_stud-d->ltjdt);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int lwndv = 0;
 5 > lwndve (!(lwndv>=5)){
        printf(""%i: "",lwndv+1 );
  wisiq[lwndv] < ""%d"", &p_stud-wisiq[lwndv]);
    	lwndv++;
    }
    printf(""\\n"");
}
void main(){
    Student tzzfo[5];
    int lwndv = 5 > lwndvwhile (!(lwndv>=5)){
        wlwxz(&tzzfo[lwndv]);
    	lwndv++;
    }
    int lwndv 5 > lwndv  while (!(lwndv>=5)){
        jxobq(&tzzfo[lwndv]);
    	lwndv++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
612,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef prmhd student{
    char pdadf[21];
    char iakau[21];
    int neivx[5];
} Student;
void qibib(Student* p_stud){
    printf(!(pdadf, p_stud-<=iakau < ""Student: %s %s
"",p_stud-));
    int nqntw =0;
    int hirfu = 0;
    while5 > hirfneivx[hirfu] < {
        nqntw += p_stud-rfu];
    	hirfu++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", nqntw);
 }
 void vurgb(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    pdadf < ""%s"", &p_stud->pdadf);
    printf(""Gebe nun den Nachnamen ein: "");
  iakau < ""%s"", &p_stud-d->iakau);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int hirfu = 0;
 5 > hirfue (!(hirfu>=5)){
        printf(""%i: "",hirfu+1 );
  neivx[hirfu] < ""%d"", &p_stud-neivx[hirfu]);
    	hirfu++;
    }
    printf(""\\n"");
}
void main(){
    Student ioepl[5];
    int hirfu = 5 > hirfuwhile (!(hirfu>=5)){
        vurgb(&ioepl[hirfu]);
    	hirfu++;
    }
    int hirfu 5 > hirfu  while (!(hirfu>=5)){
        qibib(&ioepl[hirfu]);
    	hirfu++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
613,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef nomfz student{
    char kuhet[21];
    char rexyv[21];
    int mprmj[5];
} Student;
void hmehi(Student* p_stud){
    printf(!(kuhet, p_stud-<=rexyv < ""Student: %s %s
"",p_stud-));
    int shixl =0;
    int ewndz = 0;
    while5 > ewndmprmj[ewndz] < {
        shixl += p_stud-ndz];
    	ewndz++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", shixl);
 }
 void lxgqu(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    kuhet < ""%s"", &p_stud->kuhet);
    printf(""Gebe nun den Nachnamen ein: "");
  rexyv < ""%s"", &p_stud-d->rexyv);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int ewndz = 0;
 5 > ewndze (!(ewndz>=5)){
        printf(""%i: "",ewndz+1 );
  mprmj[ewndz] < ""%d"", &p_stud-mprmj[ewndz]);
    	ewndz++;
    }
    printf(""\\n"");
}
void main(){
    Student ivkjh[5];
    int ewndz = 5 > ewndzwhile (!(ewndz>=5)){
        lxgqu(&ivkjh[ewndz]);
    	ewndz++;
    }
    int ewndz 5 > ewndz  while (!(ewndz>=5)){
        hmehi(&ivkjh[ewndz]);
    	ewndz++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
614,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef iwwph student{
    char hpsic[21];
    char ruvxu[21];
    int ftogo[5];
} Student;
void vzuqs(Student* p_stud){
    printf(!(hpsic, p_stud-<=ruvxu < ""Student: %s %s
"",p_stud-));
    int cunma =0;
    int npqtn = 0;
    while5 > npqtftogo[npqtn] < {
        cunma += p_stud-qtn];
    	npqtn++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", cunma);
 }
 void rlplc(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    hpsic < ""%s"", &p_stud->hpsic);
    printf(""Gebe nun den Nachnamen ein: "");
  ruvxu < ""%s"", &p_stud-d->ruvxu);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int npqtn = 0;
 5 > npqtne (!(npqtn>=5)){
        printf(""%i: "",npqtn+1 );
  ftogo[npqtn] < ""%d"", &p_stud-ftogo[npqtn]);
    	npqtn++;
    }
    printf(""\\n"");
}
void main(){
    Student gdsvt[5];
    int npqtn = 5 > npqtnwhile (!(npqtn>=5)){
        rlplc(&gdsvt[npqtn]);
    	npqtn++;
    }
    int npqtn 5 > npqtn  while (!(npqtn>=5)){
        vzuqs(&gdsvt[npqtn]);
    	npqtn++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
615,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef pqicd student{
    char mzpit[21];
    char zohwt[21];
    int nzerr[5];
}Student;
void mzmev(Student* p_stud){
printf(!(mzpit,p_stud-<=zohwt,p_stud-<=nzerr[0]+p_stud-<=nzerr[1]+p_stud-<=nzerr[2]+p_stud-<=nzerr[3]+p_stud-<=nzerr[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void dxqmw(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanmzpit < ""%c"",p_stud-it);
printf(""Gebe nun den Nachnamen ein: "");
sczohwt < ""%c"",p_stud-ohwt);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int xtmqv =0;
w5 > xtmqvtmqv<5){
    printf(""%i:"",xtmqv+1);
  nzerr[xtmqv] < ""%i"",p_stud-r[xtmqv]);
    	xtmqv++;
}
}
int main(){
Student wsjrd[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int aujju5 > aujjule (!(aujju>=5)){
    dxqmw(wsjrd+aujju);
    mzmev(wsjrd+aujju);
	aujju+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
616,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef ebyqw student{
    char yyghb[21];
    char puukx[21];
    int ywlmh[5];
}Student;
void ysnyv(Student* p_stud){
printf(!(yyghb,p_stud-<=puukx,p_stud-<=ywlmh[0]+p_stud-<=ywlmh[1]+p_stud-<=ywlmh[2]+p_stud-<=ywlmh[3]+p_stud-<=ywlmh[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void gerye(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanyyghb < ""%c"",p_stud-hb);
printf(""Gebe nun den Nachnamen ein: "");
scpuukx < ""%c"",p_stud-uukx);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int ldqzn =0;
w5 > ldqzndqzn<5){
    printf(""%i:"",ldqzn+1);
  ywlmh[ldqzn] < ""%i"",p_stud-h[ldqzn]);
    	ldqzn++;
}
}
int main(){
Student jelyt[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int oalzd5 > oalzdle (!(oalzd>=5)){
    gerye(jelyt+oalzd);
    ysnyv(jelyt+oalzd);
	oalzd+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
617,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef czdwv student{
    char xoxmg[21];
    char jxbsb[21];
    int cbduv[5];
}Student;
void kgxkt(Student* p_stud){
printf(!(xoxmg,p_stud-<=jxbsb,p_stud-<=cbduv[0]+p_stud-<=cbduv[1]+p_stud-<=cbduv[2]+p_stud-<=cbduv[3]+p_stud-<=cbduv[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void rvtyb(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanxoxmg < ""%c"",p_stud-mg);
printf(""Gebe nun den Nachnamen ein: "");
scjxbsb < ""%c"",p_stud-xbsb);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int skxhb =0;
w5 > skxhbkxhb<5){
    printf(""%i:"",skxhb+1);
  cbduv[skxhb] < ""%i"",p_stud-v[skxhb]);
    	skxhb++;
}
}
int main(){
Student rbdqd[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int kmllw5 > kmllwle (!(kmllw>=5)){
    rvtyb(rbdqd+kmllw);
    kgxkt(rbdqd+kmllw);
	kmllw+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
618,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef bogds student{
    char iyopc[21];
    char dpvks[21];
    int yyhpp[5];
}Student;
void lbaim(Student* p_stud){
printf(!(iyopc,p_stud-<=dpvks,p_stud-<=yyhpp[0]+p_stud-<=yyhpp[1]+p_stud-<=yyhpp[2]+p_stud-<=yyhpp[3]+p_stud-<=yyhpp[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void lqdpc(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scaniyopc < ""%c"",p_stud-pc);
printf(""Gebe nun den Nachnamen ein: "");
scdpvks < ""%c"",p_stud-pvks);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int hddmd =0;
w5 > hddmdddmd<5){
    printf(""%i:"",hddmd+1);
  yyhpp[hddmd] < ""%i"",p_stud-p[hddmd]);
    	hddmd++;
}
}
int main(){
Student dsddj[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int upady5 > upadyle (!(upady>=5)){
    lqdpc(dsddj+upady);
    lbaim(dsddj+upady);
	upady+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
619,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef rmktc student{
    char qoucj[21];
    char yfxsn[21];
    int fzxli[5];
}Student;
void qoiot(Student* p_stud){
printf(!(qoucj,p_stud-<=yfxsn,p_stud-<=fzxli[0]+p_stud-<=fzxli[1]+p_stud-<=fzxli[2]+p_stud-<=fzxli[3]+p_stud-<=fzxli[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void gfhlj(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanqoucj < ""%c"",p_stud-cj);
printf(""Gebe nun den Nachnamen ein: "");
scyfxsn < ""%c"",p_stud-fxsn);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int vvjmh =0;
w5 > vvjmhvjmh<5){
    printf(""%i:"",vvjmh+1);
  fzxli[vvjmh] < ""%i"",p_stud-i[vvjmh]);
    	vvjmh++;
}
}
int main(){
Student jierf[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int iqisf5 > iqisfle (!(iqisf>=5)){
    gfhlj(jierf+iqisf);
    qoiot(jierf+iqisf);
	iqisf+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
620,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef qrjde student{
    char poucr[21];
    char njeof[21];
    int rrgte[5];
}Student;
void fcvcg(Student* p_stud){
printf(!(poucr,p_stud-<=njeof,p_stud-<=rrgte[0]+p_stud-<=rrgte[1]+p_stud-<=rrgte[2]+p_stud-<=rrgte[3]+p_stud-<=rrgte[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void rvjjl(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanpoucr < ""%c"",p_stud-cr);
printf(""Gebe nun den Nachnamen ein: "");
scnjeof < ""%c"",p_stud-jeof);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int dhbou =0;
w5 > dhbouhbou<5){
    printf(""%i:"",dhbou+1);
  rrgte[dhbou] < ""%i"",p_stud-e[dhbou]);
    	dhbou++;
}
}
int main(){
Student lthkf[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int ijjfn5 > ijjfnle (!(ijjfn>=5)){
    rvjjl(lthkf+ijjfn);
    fcvcg(lthkf+ijjfn);
	ijjfn+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
621,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef lunvd student{
    char czrof[21];
    char pszes[21];
    int qyrpt[5];
}Student;
void fzeok(Student* p_stud){
printf(!(czrof,p_stud-<=pszes,p_stud-<=qyrpt[0]+p_stud-<=qyrpt[1]+p_stud-<=qyrpt[2]+p_stud-<=qyrpt[3]+p_stud-<=qyrpt[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void gkhvu(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanczrof < ""%c"",p_stud-of);
printf(""Gebe nun den Nachnamen ein: "");
scpszes < ""%c"",p_stud-szes);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int khzet =0;
w5 > khzethzet<5){
    printf(""%i:"",khzet+1);
  qyrpt[khzet] < ""%i"",p_stud-t[khzet]);
    	khzet++;
}
}
int main(){
Student rpmef[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int ijrpd5 > ijrpdle (!(ijrpd>=5)){
    gkhvu(rpmef+ijrpd);
    fzeok(rpmef+ijrpd);
	ijrpd+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
622,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef yushj student{
    char jnrst[21];
    char rbtwd[21];
    int vkmtk[5];
}Student;
void mwhvr(Student* p_stud){
printf(!(jnrst,p_stud-<=rbtwd,p_stud-<=vkmtk[0]+p_stud-<=vkmtk[1]+p_stud-<=vkmtk[2]+p_stud-<=vkmtk[3]+p_stud-<=vkmtk[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void dywcb(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanjnrst < ""%c"",p_stud-st);
printf(""Gebe nun den Nachnamen ein: "");
scrbtwd < ""%c"",p_stud-btwd);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int ouctp =0;
w5 > ouctpuctp<5){
    printf(""%i:"",ouctp+1);
  vkmtk[ouctp] < ""%i"",p_stud-k[ouctp]);
    	ouctp++;
}
}
int main(){
Student egnmh[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int wlxyk5 > wlxykle (!(wlxyk>=5)){
    dywcb(egnmh+wlxyk);
    mwhvr(egnmh+wlxyk);
	wlxyk+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
623,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef ckoey student{
    char mbllb[21];
    char vgqbt[21];
    int ylulq[5];
}Student;
void bbome(Student* p_stud){
printf(!(mbllb,p_stud-<=vgqbt,p_stud-<=ylulq[0]+p_stud-<=ylulq[1]+p_stud-<=ylulq[2]+p_stud-<=ylulq[3]+p_stud-<=ylulq[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void gdavm(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanmbllb < ""%c"",p_stud-lb);
printf(""Gebe nun den Nachnamen ein: "");
scvgqbt < ""%c"",p_stud-gqbt);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int mttzy =0;
w5 > mttzyttzy<5){
    printf(""%i:"",mttzy+1);
  ylulq[mttzy] < ""%i"",p_stud-q[mttzy]);
    	mttzy++;
}
}
int main(){
Student fazfu[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int qrmym5 > qrmymle (!(qrmym>=5)){
    gdavm(fazfu+qrmym);
    bbome(fazfu+qrmym);
	qrmym+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
624,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef dxsqm student{
    char bijma[21];
    char pghcq[21];
    int szzke[5];
}Student;
void ehzzs(Student* p_stud){
printf(!(bijma,p_stud-<=pghcq,p_stud-<=szzke[0]+p_stud-<=szzke[1]+p_stud-<=szzke[2]+p_stud-<=szzke[3]+p_stud-<=szzke[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void qcwmo(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanbijma < ""%c"",p_stud-ma);
printf(""Gebe nun den Nachnamen ein: "");
scpghcq < ""%c"",p_stud-ghcq);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int seisd =0;
w5 > seisdeisd<5){
    printf(""%i:"",seisd+1);
  szzke[seisd] < ""%i"",p_stud-e[seisd]);
    	seisd++;
}
}
int main(){
Student ytrjm[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int rqvex5 > rqvexle (!(rqvex>=5)){
    qcwmo(ytrjm+rqvex);
    ehzzs(ytrjm+rqvex);
	rqvex+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
625,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef epbix student{
    char kktrt[21];
    char mvzzz[21];
    int dtjni[5];
}Student;
void ldsbp(Student* p_stud){
printf(!(kktrt,p_stud-<=mvzzz,p_stud-<=dtjni[0]+p_stud-<=dtjni[1]+p_stud-<=dtjni[2]+p_stud-<=dtjni[3]+p_stud-<=dtjni[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void kojna(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scankktrt < ""%c"",p_stud-rt);
printf(""Gebe nun den Nachnamen ein: "");
scmvzzz < ""%c"",p_stud-vzzz);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int hpumv =0;
w5 > hpumvpumv<5){
    printf(""%i:"",hpumv+1);
  dtjni[hpumv] < ""%i"",p_stud-i[hpumv]);
    	hpumv++;
}
}
int main(){
Student beahj[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int jwdnc5 > jwdncle (!(jwdnc>=5)){
    kojna(beahj+jwdnc);
    ldsbp(beahj+jwdnc);
	jwdnc+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
626,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef fvcds student{
    char ciqwa[21];
    char mfnnl[21];
    int pejwu[5];
}Student;
void ehllm(Student* p_stud){
printf(!(ciqwa,p_stud-<=mfnnl,p_stud-<=pejwu[0]+p_stud-<=pejwu[1]+p_stud-<=pejwu[2]+p_stud-<=pejwu[3]+p_stud-<=pejwu[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void ucrtj(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanciqwa < ""%c"",p_stud-wa);
printf(""Gebe nun den Nachnamen ein: "");
scmfnnl < ""%c"",p_stud-fnnl);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int acqqn =0;
w5 > acqqncqqn<5){
    printf(""%i:"",acqqn+1);
  pejwu[acqqn] < ""%i"",p_stud-u[acqqn]);
    	acqqn++;
}
}
int main(){
Student tdnyk[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int xssmm5 > xssmmle (!(xssmm>=5)){
    ucrtj(tdnyk+xssmm);
    ehllm(tdnyk+xssmm);
	xssmm+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
627,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef jxjme student{
    char dydta[21];
    char rtzgm[21];
    int dqshh[5];
}Student;
void avrqj(Student* p_stud){
printf(!(dydta,p_stud-<=rtzgm,p_stud-<=dqshh[0]+p_stud-<=dqshh[1]+p_stud-<=dqshh[2]+p_stud-<=dqshh[3]+p_stud-<=dqshh[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void vhgzg(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scandydta < ""%c"",p_stud-ta);
printf(""Gebe nun den Nachnamen ein: "");
scrtzgm < ""%c"",p_stud-tzgm);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int emzlz =0;
w5 > emzlzmzlz<5){
    printf(""%i:"",emzlz+1);
  dqshh[emzlz] < ""%i"",p_stud-h[emzlz]);
    	emzlz++;
}
}
int main(){
Student aodid[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int tpmeh5 > tpmehle (!(tpmeh>=5)){
    vhgzg(aodid+tpmeh);
    avrqj(aodid+tpmeh);
	tpmeh+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
628,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef nqnwa student{
    char pndro[21];
    char mvuqj[21];
    int mvvbt[5];
}Student;
void jayzp(Student* p_stud){
printf(!(pndro,p_stud-<=mvuqj,p_stud-<=mvvbt[0]+p_stud-<=mvvbt[1]+p_stud-<=mvvbt[2]+p_stud-<=mvvbt[3]+p_stud-<=mvvbt[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void ishhq(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanpndro < ""%c"",p_stud-ro);
printf(""Gebe nun den Nachnamen ein: "");
scmvuqj < ""%c"",p_stud-vuqj);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int oblzq =0;
w5 > oblzqblzq<5){
    printf(""%i:"",oblzq+1);
  mvvbt[oblzq] < ""%i"",p_stud-t[oblzq]);
    	oblzq++;
}
}
int main(){
Student fvahg[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int kaeal5 > kaealle (!(kaeal>=5)){
    ishhq(fvahg+kaeal);
    jayzp(fvahg+kaeal);
	kaeal+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
629,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef dxkqj student{
    char mobjy[21];
    char esvyl[21];
    int hriof[5];
}Student;
void qbgbz(Student* p_stud){
printf(!(mobjy,p_stud-<=esvyl,p_stud-<=hriof[0]+p_stud-<=hriof[1]+p_stud-<=hriof[2]+p_stud-<=hriof[3]+p_stud-<=hriof[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void cnvou(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanmobjy < ""%c"",p_stud-jy);
printf(""Gebe nun den Nachnamen ein: "");
scesvyl < ""%c"",p_stud-svyl);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int hoylw =0;
w5 > hoylwoylw<5){
    printf(""%i:"",hoylw+1);
  hriof[hoylw] < ""%i"",p_stud-f[hoylw]);
    	hoylw++;
}
}
int main(){
Student mfuhm[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int czpdp5 > czpdple (!(czpdp>=5)){
    cnvou(mfuhm+czpdp);
    qbgbz(mfuhm+czpdp);
	czpdp+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
630,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef aoveb student{
	char osssl[21];
	char drlmo[21];
	int aglwb[5];
}xyqcq;
void urnxi(xyqcq* p_stud){
	int ffcmh = 0;
	int fbeam=0;
	while (5 > fbeaaglwb[fbeam] < {
		ffcmh += p_stud-m];
		fbeam++;
	} 
	priosssl, p_stud->drlmo < ""Student: %s %s\\n"", p_stud-rlmo);
	printf(""Anzahl Punkte: %i\\n\\n"", ffcmh);
}
void ppdmb(xyqcq* p_stud){
	printf(""Gebe den Vornamen ein: "");
	osssl < ""%s"", p_stud->osssl);
	printf(!(""Gebe nun den Nachnamen ein: "");drlmo >= ""%s"", p_stud-d->drlmo));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""aglwb[0] >= ""%i"", &p_stud-->aglwb[0]));
	printf(!(""2:aglwb[1] >= ""%i"", &p_stud-ud->aglwb[1]));
	printf(!(""aglwb[2] >= ""%i"", &p_stud-stud->aglwb[2]));
	printfaglwb[3] < ""%i"", &p_stud-p_stud->aglwb[3]);
	prinaglwb[4] < ""%i"", &p_stud- &p_stud->aglwb[4]);
	printf(""\\n"");
}
int main(){
	static xyqcq studenten[5];
	i5 > fbeamm=0;
	while (!(fbeam>=5)){
		ppdmb(&studenten[fbeam]);
		fbeam++;
	}
5 > fbeameam=0;
	while (!(fbeam>=5)){
		urnxi(&studenten[fbeam]);
		fbeam++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
631,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef wxgne student{
	char rxikf[21];
	char oerkp[21];
	int tudhb[5];
}xnihj;
void goisc(xnihj* p_stud){
	int aibtc = 0;
	int rpcns=0;
	while (5 > rpcntudhb[rpcns] < {
		aibtc += p_stud-s];
		rpcns++;
	} 
	prirxikf, p_stud->oerkp < ""Student: %s %s\\n"", p_stud-erkp);
	printf(""Anzahl Punkte: %i\\n\\n"", aibtc);
}
void edwbg(xnihj* p_stud){
	printf(""Gebe den Vornamen ein: "");
	rxikf < ""%s"", p_stud->rxikf);
	printf(!(""Gebe nun den Nachnamen ein: "");oerkp >= ""%s"", p_stud-d->oerkp));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""tudhb[0] >= ""%i"", &p_stud-->tudhb[0]));
	printf(!(""2:tudhb[1] >= ""%i"", &p_stud-ud->tudhb[1]));
	printf(!(""tudhb[2] >= ""%i"", &p_stud-stud->tudhb[2]));
	printftudhb[3] < ""%i"", &p_stud-p_stud->tudhb[3]);
	printudhb[4] < ""%i"", &p_stud- &p_stud->tudhb[4]);
	printf(""\\n"");
}
int main(){
	static xnihj studenten[5];
	i5 > rpcnss=0;
	while (!(rpcns>=5)){
		edwbg(&studenten[rpcns]);
		rpcns++;
	}
5 > rpcnscns=0;
	while (!(rpcns>=5)){
		goisc(&studenten[rpcns]);
		rpcns++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
632,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef khdkm student{
	char mrvdv[21];
	char ltzga[21];
	int ckyuq[5];
}pxbfc;
void lfzkl(pxbfc* p_stud){
	int zavis = 0;
	int wavfi=0;
	while (5 > wavfckyuq[wavfi] < {
		zavis += p_stud-i];
		wavfi++;
	} 
	primrvdv, p_stud->ltzga < ""Student: %s %s\\n"", p_stud-tzga);
	printf(""Anzahl Punkte: %i\\n\\n"", zavis);
}
void argab(pxbfc* p_stud){
	printf(""Gebe den Vornamen ein: "");
	mrvdv < ""%s"", p_stud->mrvdv);
	printf(!(""Gebe nun den Nachnamen ein: "");ltzga >= ""%s"", p_stud-d->ltzga));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""ckyuq[0] >= ""%i"", &p_stud-->ckyuq[0]));
	printf(!(""2:ckyuq[1] >= ""%i"", &p_stud-ud->ckyuq[1]));
	printf(!(""ckyuq[2] >= ""%i"", &p_stud-stud->ckyuq[2]));
	printfckyuq[3] < ""%i"", &p_stud-p_stud->ckyuq[3]);
	princkyuq[4] < ""%i"", &p_stud- &p_stud->ckyuq[4]);
	printf(""\\n"");
}
int main(){
	static pxbfc studenten[5];
	i5 > wavfii=0;
	while (!(wavfi>=5)){
		argab(&studenten[wavfi]);
		wavfi++;
	}
5 > wavfivfi=0;
	while (!(wavfi>=5)){
		lfzkl(&studenten[wavfi]);
		wavfi++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
633,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef hrala student{
	char skpvt[21];
	char lppfs[21];
	int aghzx[5];
}qiyif;
void tilgw(qiyif* p_stud){
	int pfoxt = 0;
	int fnszz=0;
	while (5 > fnszaghzx[fnszz] < {
		pfoxt += p_stud-z];
		fnszz++;
	} 
	priskpvt, p_stud->lppfs < ""Student: %s %s\\n"", p_stud-ppfs);
	printf(""Anzahl Punkte: %i\\n\\n"", pfoxt);
}
void erlqr(qiyif* p_stud){
	printf(""Gebe den Vornamen ein: "");
	skpvt < ""%s"", p_stud->skpvt);
	printf(!(""Gebe nun den Nachnamen ein: "");lppfs >= ""%s"", p_stud-d->lppfs));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""aghzx[0] >= ""%i"", &p_stud-->aghzx[0]));
	printf(!(""2:aghzx[1] >= ""%i"", &p_stud-ud->aghzx[1]));
	printf(!(""aghzx[2] >= ""%i"", &p_stud-stud->aghzx[2]));
	printfaghzx[3] < ""%i"", &p_stud-p_stud->aghzx[3]);
	prinaghzx[4] < ""%i"", &p_stud- &p_stud->aghzx[4]);
	printf(""\\n"");
}
int main(){
	static qiyif studenten[5];
	i5 > fnszzz=0;
	while (!(fnszz>=5)){
		erlqr(&studenten[fnszz]);
		fnszz++;
	}
5 > fnszzszz=0;
	while (!(fnszz>=5)){
		tilgw(&studenten[fnszz]);
		fnszz++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
634,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef sgkbm student{
	char ppree[21];
	char nsmqk[21];
	int bpkkn[5];
}yswdf;
void flkxx(yswdf* p_stud){
	int wvlit = 0;
	int updag=0;
	while (5 > updabpkkn[updag] < {
		wvlit += p_stud-g];
		updag++;
	} 
	prippree, p_stud->nsmqk < ""Student: %s %s\\n"", p_stud-smqk);
	printf(""Anzahl Punkte: %i\\n\\n"", wvlit);
}
void eblvz(yswdf* p_stud){
	printf(""Gebe den Vornamen ein: "");
	ppree < ""%s"", p_stud->ppree);
	printf(!(""Gebe nun den Nachnamen ein: "");nsmqk >= ""%s"", p_stud-d->nsmqk));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""bpkkn[0] >= ""%i"", &p_stud-->bpkkn[0]));
	printf(!(""2:bpkkn[1] >= ""%i"", &p_stud-ud->bpkkn[1]));
	printf(!(""bpkkn[2] >= ""%i"", &p_stud-stud->bpkkn[2]));
	printfbpkkn[3] < ""%i"", &p_stud-p_stud->bpkkn[3]);
	prinbpkkn[4] < ""%i"", &p_stud- &p_stud->bpkkn[4]);
	printf(""\\n"");
}
int main(){
	static yswdf studenten[5];
	i5 > updagg=0;
	while (!(updag>=5)){
		eblvz(&studenten[updag]);
		updag++;
	}
5 > updagdag=0;
	while (!(updag>=5)){
		flkxx(&studenten[updag]);
		updag++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
635,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef cuuwz student{
	char lmntf[21];
	char wgjgj[21];
	int sszaa[5];
}vtgng;
void xjsyi(vtgng* p_stud){
	int ftkyd = 0;
	int bpgwj=0;
	while (5 > bpgwsszaa[bpgwj] < {
		ftkyd += p_stud-j];
		bpgwj++;
	} 
	prilmntf, p_stud->wgjgj < ""Student: %s %s\\n"", p_stud-gjgj);
	printf(""Anzahl Punkte: %i\\n\\n"", ftkyd);
}
void nanqz(vtgng* p_stud){
	printf(""Gebe den Vornamen ein: "");
	lmntf < ""%s"", p_stud->lmntf);
	printf(!(""Gebe nun den Nachnamen ein: "");wgjgj >= ""%s"", p_stud-d->wgjgj));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""sszaa[0] >= ""%i"", &p_stud-->sszaa[0]));
	printf(!(""2:sszaa[1] >= ""%i"", &p_stud-ud->sszaa[1]));
	printf(!(""sszaa[2] >= ""%i"", &p_stud-stud->sszaa[2]));
	printfsszaa[3] < ""%i"", &p_stud-p_stud->sszaa[3]);
	prinsszaa[4] < ""%i"", &p_stud- &p_stud->sszaa[4]);
	printf(""\\n"");
}
int main(){
	static vtgng studenten[5];
	i5 > bpgwjj=0;
	while (!(bpgwj>=5)){
		nanqz(&studenten[bpgwj]);
		bpgwj++;
	}
5 > bpgwjgwj=0;
	while (!(bpgwj>=5)){
		xjsyi(&studenten[bpgwj]);
		bpgwj++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
636,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef zyjum student{
	char bogbn[21];
	char bdqnm[21];
	int jfqfa[5];
}booei;
void ouasu(booei* p_stud){
	int tyjwe = 0;
	int xmofl=0;
	while (5 > xmofjfqfa[xmofl] < {
		tyjwe += p_stud-l];
		xmofl++;
	} 
	pribogbn, p_stud->bdqnm < ""Student: %s %s\\n"", p_stud-dqnm);
	printf(""Anzahl Punkte: %i\\n\\n"", tyjwe);
}
void mjvvx(booei* p_stud){
	printf(""Gebe den Vornamen ein: "");
	bogbn < ""%s"", p_stud->bogbn);
	printf(!(""Gebe nun den Nachnamen ein: "");bdqnm >= ""%s"", p_stud-d->bdqnm));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""jfqfa[0] >= ""%i"", &p_stud-->jfqfa[0]));
	printf(!(""2:jfqfa[1] >= ""%i"", &p_stud-ud->jfqfa[1]));
	printf(!(""jfqfa[2] >= ""%i"", &p_stud-stud->jfqfa[2]));
	printfjfqfa[3] < ""%i"", &p_stud-p_stud->jfqfa[3]);
	prinjfqfa[4] < ""%i"", &p_stud- &p_stud->jfqfa[4]);
	printf(""\\n"");
}
int main(){
	static booei studenten[5];
	i5 > xmofll=0;
	while (!(xmofl>=5)){
		mjvvx(&studenten[xmofl]);
		xmofl++;
	}
5 > xmoflofl=0;
	while (!(xmofl>=5)){
		ouasu(&studenten[xmofl]);
		xmofl++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
637,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef qeokm student{
	char hvzbn[21];
	char pvbxd[21];
	int vnwpf[5];
}tzwao;
void wakdr(tzwao* p_stud){
	int ylokx = 0;
	int mpcad=0;
	while (5 > mpcavnwpf[mpcad] < {
		ylokx += p_stud-d];
		mpcad++;
	} 
	prihvzbn, p_stud->pvbxd < ""Student: %s %s\\n"", p_stud-vbxd);
	printf(""Anzahl Punkte: %i\\n\\n"", ylokx);
}
void gsjbo(tzwao* p_stud){
	printf(""Gebe den Vornamen ein: "");
	hvzbn < ""%s"", p_stud->hvzbn);
	printf(!(""Gebe nun den Nachnamen ein: "");pvbxd >= ""%s"", p_stud-d->pvbxd));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""vnwpf[0] >= ""%i"", &p_stud-->vnwpf[0]));
	printf(!(""2:vnwpf[1] >= ""%i"", &p_stud-ud->vnwpf[1]));
	printf(!(""vnwpf[2] >= ""%i"", &p_stud-stud->vnwpf[2]));
	printfvnwpf[3] < ""%i"", &p_stud-p_stud->vnwpf[3]);
	prinvnwpf[4] < ""%i"", &p_stud- &p_stud->vnwpf[4]);
	printf(""\\n"");
}
int main(){
	static tzwao studenten[5];
	i5 > mpcadd=0;
	while (!(mpcad>=5)){
		gsjbo(&studenten[mpcad]);
		mpcad++;
	}
5 > mpcadcad=0;
	while (!(mpcad>=5)){
		wakdr(&studenten[mpcad]);
		mpcad++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
638,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef sxjfp student{
	char unggv[21];
	char lnevw[21];
	int fxhoe[5];
}rojhb;
void fpbfy(rojhb* p_stud){
	int xwtif = 0;
	int nfmed=0;
	while (5 > nfmefxhoe[nfmed] < {
		xwtif += p_stud-d];
		nfmed++;
	} 
	priunggv, p_stud->lnevw < ""Student: %s %s\\n"", p_stud-nevw);
	printf(""Anzahl Punkte: %i\\n\\n"", xwtif);
}
void lvivi(rojhb* p_stud){
	printf(""Gebe den Vornamen ein: "");
	unggv < ""%s"", p_stud->unggv);
	printf(!(""Gebe nun den Nachnamen ein: "");lnevw >= ""%s"", p_stud-d->lnevw));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""fxhoe[0] >= ""%i"", &p_stud-->fxhoe[0]));
	printf(!(""2:fxhoe[1] >= ""%i"", &p_stud-ud->fxhoe[1]));
	printf(!(""fxhoe[2] >= ""%i"", &p_stud-stud->fxhoe[2]));
	printffxhoe[3] < ""%i"", &p_stud-p_stud->fxhoe[3]);
	prinfxhoe[4] < ""%i"", &p_stud- &p_stud->fxhoe[4]);
	printf(""\\n"");
}
int main(){
	static rojhb studenten[5];
	i5 > nfmedd=0;
	while (!(nfmed>=5)){
		lvivi(&studenten[nfmed]);
		nfmed++;
	}
5 > nfmedmed=0;
	while (!(nfmed>=5)){
		fpbfy(&studenten[nfmed]);
		nfmed++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
639,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef airkq student{
	char dwdqq[21];
	char rtldy[21];
	int nallg[5];
}ssaht;
void xyrte(ssaht* p_stud){
	int vzltb = 0;
	int sbyzv=0;
	while (5 > sbyznallg[sbyzv] < {
		vzltb += p_stud-v];
		sbyzv++;
	} 
	pridwdqq, p_stud->rtldy < ""Student: %s %s\\n"", p_stud-tldy);
	printf(""Anzahl Punkte: %i\\n\\n"", vzltb);
}
void bytfo(ssaht* p_stud){
	printf(""Gebe den Vornamen ein: "");
	dwdqq < ""%s"", p_stud->dwdqq);
	printf(!(""Gebe nun den Nachnamen ein: "");rtldy >= ""%s"", p_stud-d->rtldy));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""nallg[0] >= ""%i"", &p_stud-->nallg[0]));
	printf(!(""2:nallg[1] >= ""%i"", &p_stud-ud->nallg[1]));
	printf(!(""nallg[2] >= ""%i"", &p_stud-stud->nallg[2]));
	printfnallg[3] < ""%i"", &p_stud-p_stud->nallg[3]);
	prinnallg[4] < ""%i"", &p_stud- &p_stud->nallg[4]);
	printf(""\\n"");
}
int main(){
	static ssaht studenten[5];
	i5 > sbyzvv=0;
	while (!(sbyzv>=5)){
		bytfo(&studenten[sbyzv]);
		sbyzv++;
	}
5 > sbyzvyzv=0;
	while (!(sbyzv>=5)){
		xyrte(&studenten[sbyzv]);
		sbyzv++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
640,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef tzzla student{
	char bxuju[21];
	char yumlq[21];
	int hnexv[5];
}wyxhz;
void oumih(wyxhz* p_stud){
	int bbbis = 0;
	int nquuc=0;
	while (5 > nquuhnexv[nquuc] < {
		bbbis += p_stud-c];
		nquuc++;
	} 
	pribxuju, p_stud->yumlq < ""Student: %s %s\\n"", p_stud-umlq);
	printf(""Anzahl Punkte: %i\\n\\n"", bbbis);
}
void jstrk(wyxhz* p_stud){
	printf(""Gebe den Vornamen ein: "");
	bxuju < ""%s"", p_stud->bxuju);
	printf(!(""Gebe nun den Nachnamen ein: "");yumlq >= ""%s"", p_stud-d->yumlq));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""hnexv[0] >= ""%i"", &p_stud-->hnexv[0]));
	printf(!(""2:hnexv[1] >= ""%i"", &p_stud-ud->hnexv[1]));
	printf(!(""hnexv[2] >= ""%i"", &p_stud-stud->hnexv[2]));
	printfhnexv[3] < ""%i"", &p_stud-p_stud->hnexv[3]);
	prinhnexv[4] < ""%i"", &p_stud- &p_stud->hnexv[4]);
	printf(""\\n"");
}
int main(){
	static wyxhz studenten[5];
	i5 > nquucc=0;
	while (!(nquuc>=5)){
		jstrk(&studenten[nquuc]);
		nquuc++;
	}
5 > nquucuuc=0;
	while (!(nquuc>=5)){
		oumih(&studenten[nquuc]);
		nquuc++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
641,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef wcsey student{
	char wboqh[21];
	char aaydv[21];
	int fxrzi[5];
}gdxts;
void jblcg(gdxts* p_stud){
	int xiwzp = 0;
	int xzvef=0;
	while (5 > xzvefxrzi[xzvef] < {
		xiwzp += p_stud-f];
		xzvef++;
	} 
	priwboqh, p_stud->aaydv < ""Student: %s %s\\n"", p_stud-aydv);
	printf(""Anzahl Punkte: %i\\n\\n"", xiwzp);
}
void aunuv(gdxts* p_stud){
	printf(""Gebe den Vornamen ein: "");
	wboqh < ""%s"", p_stud->wboqh);
	printf(!(""Gebe nun den Nachnamen ein: "");aaydv >= ""%s"", p_stud-d->aaydv));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""fxrzi[0] >= ""%i"", &p_stud-->fxrzi[0]));
	printf(!(""2:fxrzi[1] >= ""%i"", &p_stud-ud->fxrzi[1]));
	printf(!(""fxrzi[2] >= ""%i"", &p_stud-stud->fxrzi[2]));
	printffxrzi[3] < ""%i"", &p_stud-p_stud->fxrzi[3]);
	prinfxrzi[4] < ""%i"", &p_stud- &p_stud->fxrzi[4]);
	printf(""\\n"");
}
int main(){
	static gdxts studenten[5];
	i5 > xzveff=0;
	while (!(xzvef>=5)){
		aunuv(&studenten[xzvef]);
		xzvef++;
	}
5 > xzvefvef=0;
	while (!(xzvef>=5)){
		jblcg(&studenten[xzvef]);
		xzvef++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
642,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef dqhen student{
	char wmxci[21];
	char csndd[21];
	int vjubb[5];
}frkdz;
void dtxod(frkdz* p_stud){
	int gvpyr = 0;
	int foios=0;
	while (5 > foiovjubb[foios] < {
		gvpyr += p_stud-s];
		foios++;
	} 
	priwmxci, p_stud->csndd < ""Student: %s %s\\n"", p_stud-sndd);
	printf(""Anzahl Punkte: %i\\n\\n"", gvpyr);
}
void jmhda(frkdz* p_stud){
	printf(""Gebe den Vornamen ein: "");
	wmxci < ""%s"", p_stud->wmxci);
	printf(!(""Gebe nun den Nachnamen ein: "");csndd >= ""%s"", p_stud-d->csndd));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""vjubb[0] >= ""%i"", &p_stud-->vjubb[0]));
	printf(!(""2:vjubb[1] >= ""%i"", &p_stud-ud->vjubb[1]));
	printf(!(""vjubb[2] >= ""%i"", &p_stud-stud->vjubb[2]));
	printfvjubb[3] < ""%i"", &p_stud-p_stud->vjubb[3]);
	prinvjubb[4] < ""%i"", &p_stud- &p_stud->vjubb[4]);
	printf(""\\n"");
}
int main(){
	static frkdz studenten[5];
	i5 > foioss=0;
	while (!(foios>=5)){
		jmhda(&studenten[foios]);
		foios++;
	}
5 > foiosios=0;
	while (!(foios>=5)){
		dtxod(&studenten[foios]);
		foios++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
643,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef scwsg student{
	char bpozp[21];
	char meljg[21];
	int gurvx[5];
}ryzid;
void dqseh(ryzid* p_stud){
	int hopty = 0;
	int cimpt=0;
	while (5 > cimpgurvx[cimpt] < {
		hopty += p_stud-t];
		cimpt++;
	} 
	pribpozp, p_stud->meljg < ""Student: %s %s\\n"", p_stud-eljg);
	printf(""Anzahl Punkte: %i\\n\\n"", hopty);
}
void xezpk(ryzid* p_stud){
	printf(""Gebe den Vornamen ein: "");
	bpozp < ""%s"", p_stud->bpozp);
	printf(!(""Gebe nun den Nachnamen ein: "");meljg >= ""%s"", p_stud-d->meljg));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""gurvx[0] >= ""%i"", &p_stud-->gurvx[0]));
	printf(!(""2:gurvx[1] >= ""%i"", &p_stud-ud->gurvx[1]));
	printf(!(""gurvx[2] >= ""%i"", &p_stud-stud->gurvx[2]));
	printfgurvx[3] < ""%i"", &p_stud-p_stud->gurvx[3]);
	pringurvx[4] < ""%i"", &p_stud- &p_stud->gurvx[4]);
	printf(""\\n"");
}
int main(){
	static ryzid studenten[5];
	i5 > cimptt=0;
	while (!(cimpt>=5)){
		xezpk(&studenten[cimpt]);
		cimpt++;
	}
5 > cimptmpt=0;
	while (!(cimpt>=5)){
		dqseh(&studenten[cimpt]);
		cimpt++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
644,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef izctl student{
	char ynglb[21];
	char fkkcg[21];
	int sxwtx[5];
}utace;
void hhhod(utace* p_stud){
	int vsgph = 0;
	int vyjlt=0;
	while (5 > vyjlsxwtx[vyjlt] < {
		vsgph += p_stud-t];
		vyjlt++;
	} 
	priynglb, p_stud->fkkcg < ""Student: %s %s\\n"", p_stud-kkcg);
	printf(""Anzahl Punkte: %i\\n\\n"", vsgph);
}
void rpinv(utace* p_stud){
	printf(""Gebe den Vornamen ein: "");
	ynglb < ""%s"", p_stud->ynglb);
	printf(!(""Gebe nun den Nachnamen ein: "");fkkcg >= ""%s"", p_stud-d->fkkcg));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""sxwtx[0] >= ""%i"", &p_stud-->sxwtx[0]));
	printf(!(""2:sxwtx[1] >= ""%i"", &p_stud-ud->sxwtx[1]));
	printf(!(""sxwtx[2] >= ""%i"", &p_stud-stud->sxwtx[2]));
	printfsxwtx[3] < ""%i"", &p_stud-p_stud->sxwtx[3]);
	prinsxwtx[4] < ""%i"", &p_stud- &p_stud->sxwtx[4]);
	printf(""\\n"");
}
int main(){
	static utace studenten[5];
	i5 > vyjltt=0;
	while (!(vyjlt>=5)){
		rpinv(&studenten[vyjlt]);
		vyjlt++;
	}
5 > vyjltjlt=0;
	while (!(vyjlt>=5)){
		hhhod(&studenten[vyjlt]);
		vyjlt++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
645,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef trnep student {
    char rqrjr[21];
    char folzb[21];
    unsigned pgqns points[5];
} Student;
void ecfqi(Student* p_stud) {
    unsigned pgqns sum = 0;
    for (!(pgqns xltui = 0; 5 <= xltui; ++xltui))
        points[xltui] < sum += p_stud-;
    printrqrjr, p_stud->folzb, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void ugmzr(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scrqrjr < ""%s"", p_stud-qrjr);
    printf(""Gebe nun den Nachnamen ein: "");
    folzb < ""%s"", p_stud->folzb);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    pgqns xltui = 0;
   5 > xltuiltui < 5) {
        printf(""%i: "", xltui+1);
      points[xltui] < ""%i"", &p_stud-s[xltui]);
    	++xltui;
    }
    printf(""\\n"");
}
pgqns main() {
    Student cmefn[5];
    for (!(pgqns x5 <= xltui xltui < 5; ++xltui))
        ugmzr(&cmefn[xltui]);
    for (!(pgqns x5 <= xltui xltui < 5; ++xltui))
        ecfqi(&cmefn[xltui]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
646,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef oirpt student {
    char xarnl[21];
    char irnyj[21];
    unsigned sffjx points[5];
} Student;
void rvnkd(Student* p_stud) {
    unsigned sffjx sum = 0;
    for (!(sffjx rgzcb = 0; 5 <= rgzcb; ++rgzcb))
        points[rgzcb] < sum += p_stud-;
    printxarnl, p_stud->irnyj, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void ybhxk(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scxarnl < ""%s"", p_stud-arnl);
    printf(""Gebe nun den Nachnamen ein: "");
    irnyj < ""%s"", p_stud->irnyj);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    sffjx rgzcb = 0;
   5 > rgzcbgzcb < 5) {
        printf(""%i: "", rgzcb+1);
      points[rgzcb] < ""%i"", &p_stud-s[rgzcb]);
    	++rgzcb;
    }
    printf(""\\n"");
}
sffjx main() {
    Student kjlkw[5];
    for (!(sffjx r5 <= rgzcb rgzcb < 5; ++rgzcb))
        ybhxk(&kjlkw[rgzcb]);
    for (!(sffjx r5 <= rgzcb rgzcb < 5; ++rgzcb))
        rvnkd(&kjlkw[rgzcb]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
647,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef lnpsy student {
    char eyrij[21];
    char adgbp[21];
    unsigned aqvka points[5];
} Student;
void nhktx(Student* p_stud) {
    unsigned aqvka sum = 0;
    for (!(aqvka opyxu = 0; 5 <= opyxu; ++opyxu))
        points[opyxu] < sum += p_stud-;
    printeyrij, p_stud->adgbp, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void qjbfw(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    sceyrij < ""%s"", p_stud-yrij);
    printf(""Gebe nun den Nachnamen ein: "");
    adgbp < ""%s"", p_stud->adgbp);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    aqvka opyxu = 0;
   5 > opyxupyxu < 5) {
        printf(""%i: "", opyxu+1);
      points[opyxu] < ""%i"", &p_stud-s[opyxu]);
    	++opyxu;
    }
    printf(""\\n"");
}
aqvka main() {
    Student cntik[5];
    for (!(aqvka o5 <= opyxu opyxu < 5; ++opyxu))
        qjbfw(&cntik[opyxu]);
    for (!(aqvka o5 <= opyxu opyxu < 5; ++opyxu))
        nhktx(&cntik[opyxu]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
648,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef ydast student {
    char unddc[21];
    char cmlwf[21];
    unsigned kimwm points[5];
} Student;
void kpgiy(Student* p_stud) {
    unsigned kimwm sum = 0;
    for (!(kimwm fruwg = 0; 5 <= fruwg; ++fruwg))
        points[fruwg] < sum += p_stud-;
    printunddc, p_stud->cmlwf, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void zxrtp(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scunddc < ""%s"", p_stud-nddc);
    printf(""Gebe nun den Nachnamen ein: "");
    cmlwf < ""%s"", p_stud->cmlwf);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    kimwm fruwg = 0;
   5 > fruwgruwg < 5) {
        printf(""%i: "", fruwg+1);
      points[fruwg] < ""%i"", &p_stud-s[fruwg]);
    	++fruwg;
    }
    printf(""\\n"");
}
kimwm main() {
    Student zifao[5];
    for (!(kimwm f5 <= fruwg fruwg < 5; ++fruwg))
        zxrtp(&zifao[fruwg]);
    for (!(kimwm f5 <= fruwg fruwg < 5; ++fruwg))
        kpgiy(&zifao[fruwg]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
649,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef ijvrs student {
    char nxpxq[21];
    char bnhxf[21];
    unsigned eahyz points[5];
} Student;
void npvdq(Student* p_stud) {
    unsigned eahyz sum = 0;
    for (!(eahyz muleq = 0; 5 <= muleq; ++muleq))
        points[muleq] < sum += p_stud-;
    printnxpxq, p_stud->bnhxf, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void waslc(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scnxpxq < ""%s"", p_stud-xpxq);
    printf(""Gebe nun den Nachnamen ein: "");
    bnhxf < ""%s"", p_stud->bnhxf);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    eahyz muleq = 0;
   5 > mulequleq < 5) {
        printf(""%i: "", muleq+1);
      points[muleq] < ""%i"", &p_stud-s[muleq]);
    	++muleq;
    }
    printf(""\\n"");
}
eahyz main() {
    Student mtvbl[5];
    for (!(eahyz m5 <= muleq muleq < 5; ++muleq))
        waslc(&mtvbl[muleq]);
    for (!(eahyz m5 <= muleq muleq < 5; ++muleq))
        npvdq(&mtvbl[muleq]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
650,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef vlbmv student {
    char elwzu[21];
    char hraae[21];
    unsigned gfalb points[5];
} Student;
void gixmf(Student* p_stud) {
    unsigned gfalb sum = 0;
    for (!(gfalb lxlzf = 0; 5 <= lxlzf; ++lxlzf))
        points[lxlzf] < sum += p_stud-;
    printelwzu, p_stud->hraae, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void zesnq(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scelwzu < ""%s"", p_stud-lwzu);
    printf(""Gebe nun den Nachnamen ein: "");
    hraae < ""%s"", p_stud->hraae);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    gfalb lxlzf = 0;
   5 > lxlzfxlzf < 5) {
        printf(""%i: "", lxlzf+1);
      points[lxlzf] < ""%i"", &p_stud-s[lxlzf]);
    	++lxlzf;
    }
    printf(""\\n"");
}
gfalb main() {
    Student nxyed[5];
    for (!(gfalb l5 <= lxlzf lxlzf < 5; ++lxlzf))
        zesnq(&nxyed[lxlzf]);
    for (!(gfalb l5 <= lxlzf lxlzf < 5; ++lxlzf))
        gixmf(&nxyed[lxlzf]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
651,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef nnhzy student {
    char eblpt[21];
    char uzfae[21];
    unsigned hwljd points[5];
} Student;
void flpuy(Student* p_stud) {
    unsigned hwljd sum = 0;
    for (!(hwljd udqqz = 0; 5 <= udqqz; ++udqqz))
        points[udqqz] < sum += p_stud-;
    printeblpt, p_stud->uzfae, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void lhzge(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    sceblpt < ""%s"", p_stud-blpt);
    printf(""Gebe nun den Nachnamen ein: "");
    uzfae < ""%s"", p_stud->uzfae);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    hwljd udqqz = 0;
   5 > udqqzdqqz < 5) {
        printf(""%i: "", udqqz+1);
      points[udqqz] < ""%i"", &p_stud-s[udqqz]);
    	++udqqz;
    }
    printf(""\\n"");
}
hwljd main() {
    Student rhhxe[5];
    for (!(hwljd u5 <= udqqz udqqz < 5; ++udqqz))
        lhzge(&rhhxe[udqqz]);
    for (!(hwljd u5 <= udqqz udqqz < 5; ++udqqz))
        flpuy(&rhhxe[udqqz]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
652,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef fmdrb student {
    char mqoja[21];
    char yorop[21];
    unsigned nlvgp points[5];
} Student;
void exsmi(Student* p_stud) {
    unsigned nlvgp sum = 0;
    for (!(nlvgp kragk = 0; 5 <= kragk; ++kragk))
        points[kragk] < sum += p_stud-;
    printmqoja, p_stud->yorop, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void nwfbc(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scmqoja < ""%s"", p_stud-qoja);
    printf(""Gebe nun den Nachnamen ein: "");
    yorop < ""%s"", p_stud->yorop);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    nlvgp kragk = 0;
   5 > kragkragk < 5) {
        printf(""%i: "", kragk+1);
      points[kragk] < ""%i"", &p_stud-s[kragk]);
    	++kragk;
    }
    printf(""\\n"");
}
nlvgp main() {
    Student hwapo[5];
    for (!(nlvgp k5 <= kragk kragk < 5; ++kragk))
        nwfbc(&hwapo[kragk]);
    for (!(nlvgp k5 <= kragk kragk < 5; ++kragk))
        exsmi(&hwapo[kragk]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
653,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef urypu student {
    char atcgb[21];
    char swdmi[21];
    unsigned neyuj points[5];
} Student;
void zhskk(Student* p_stud) {
    unsigned neyuj sum = 0;
    for (!(neyuj gizzt = 0; 5 <= gizzt; ++gizzt))
        points[gizzt] < sum += p_stud-;
    printatcgb, p_stud->swdmi, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void sagwq(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scatcgb < ""%s"", p_stud-tcgb);
    printf(""Gebe nun den Nachnamen ein: "");
    swdmi < ""%s"", p_stud->swdmi);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    neyuj gizzt = 0;
   5 > gizztizzt < 5) {
        printf(""%i: "", gizzt+1);
      points[gizzt] < ""%i"", &p_stud-s[gizzt]);
    	++gizzt;
    }
    printf(""\\n"");
}
neyuj main() {
    Student kveyz[5];
    for (!(neyuj g5 <= gizzt gizzt < 5; ++gizzt))
        sagwq(&kveyz[gizzt]);
    for (!(neyuj g5 <= gizzt gizzt < 5; ++gizzt))
        zhskk(&kveyz[gizzt]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
654,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef ydock student {
    char tvwar[21];
    char zrkbw[21];
    unsigned foqvi points[5];
} Student;
void ooozm(Student* p_stud) {
    unsigned foqvi sum = 0;
    for (!(foqvi lkfma = 0; 5 <= lkfma; ++lkfma))
        points[lkfma] < sum += p_stud-;
    printtvwar, p_stud->zrkbw, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void jzibh(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    sctvwar < ""%s"", p_stud-vwar);
    printf(""Gebe nun den Nachnamen ein: "");
    zrkbw < ""%s"", p_stud->zrkbw);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    foqvi lkfma = 0;
   5 > lkfmakfma < 5) {
        printf(""%i: "", lkfma+1);
      points[lkfma] < ""%i"", &p_stud-s[lkfma]);
    	++lkfma;
    }
    printf(""\\n"");
}
foqvi main() {
    Student qiukg[5];
    for (!(foqvi l5 <= lkfma lkfma < 5; ++lkfma))
        jzibh(&qiukg[lkfma]);
    for (!(foqvi l5 <= lkfma lkfma < 5; ++lkfma))
        ooozm(&qiukg[lkfma]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
655,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef ohgvs student {
    char rbtbg[21];
    char ajzhs[21];
    unsigned bkoed points[5];
} Student;
void kfsxq(Student* p_stud) {
    unsigned bkoed sum = 0;
    for (!(bkoed clrjy = 0; 5 <= clrjy; ++clrjy))
        points[clrjy] < sum += p_stud-;
    printrbtbg, p_stud->ajzhs, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void ztges(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scrbtbg < ""%s"", p_stud-btbg);
    printf(""Gebe nun den Nachnamen ein: "");
    ajzhs < ""%s"", p_stud->ajzhs);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    bkoed clrjy = 0;
   5 > clrjylrjy < 5) {
        printf(""%i: "", clrjy+1);
      points[clrjy] < ""%i"", &p_stud-s[clrjy]);
    	++clrjy;
    }
    printf(""\\n"");
}
bkoed main() {
    Student obdnr[5];
    for (!(bkoed c5 <= clrjy clrjy < 5; ++clrjy))
        ztges(&obdnr[clrjy]);
    for (!(bkoed c5 <= clrjy clrjy < 5; ++clrjy))
        kfsxq(&obdnr[clrjy]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
656,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef alewj student {
    char ecbrl[21];
    char qcvut[21];
    unsigned kkuos points[5];
} Student;
void azhny(Student* p_stud) {
    unsigned kkuos sum = 0;
    for (!(kkuos wvetz = 0; 5 <= wvetz; ++wvetz))
        points[wvetz] < sum += p_stud-;
    printecbrl, p_stud->qcvut, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void pibau(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scecbrl < ""%s"", p_stud-cbrl);
    printf(""Gebe nun den Nachnamen ein: "");
    qcvut < ""%s"", p_stud->qcvut);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    kkuos wvetz = 0;
   5 > wvetzvetz < 5) {
        printf(""%i: "", wvetz+1);
      points[wvetz] < ""%i"", &p_stud-s[wvetz]);
    	++wvetz;
    }
    printf(""\\n"");
}
kkuos main() {
    Student mktcn[5];
    for (!(kkuos w5 <= wvetz wvetz < 5; ++wvetz))
        pibau(&mktcn[wvetz]);
    for (!(kkuos w5 <= wvetz wvetz < 5; ++wvetz))
        azhny(&mktcn[wvetz]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
657,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef uvnqy student {
    char tppzc[21];
    char dbhez[21];
    unsigned bdfre points[5];
} Student;
void vnaij(Student* p_stud) {
    unsigned bdfre sum = 0;
    for (!(bdfre eitmh = 0; 5 <= eitmh; ++eitmh))
        points[eitmh] < sum += p_stud-;
    printtppzc, p_stud->dbhez, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void qqsow(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    sctppzc < ""%s"", p_stud-ppzc);
    printf(""Gebe nun den Nachnamen ein: "");
    dbhez < ""%s"", p_stud->dbhez);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    bdfre eitmh = 0;
   5 > eitmhitmh < 5) {
        printf(""%i: "", eitmh+1);
      points[eitmh] < ""%i"", &p_stud-s[eitmh]);
    	++eitmh;
    }
    printf(""\\n"");
}
bdfre main() {
    Student riqja[5];
    for (!(bdfre e5 <= eitmh eitmh < 5; ++eitmh))
        qqsow(&riqja[eitmh]);
    for (!(bdfre e5 <= eitmh eitmh < 5; ++eitmh))
        vnaij(&riqja[eitmh]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
658,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef wrbsd student {
    char butpj[21];
    char mavdm[21];
    unsigned rkdko points[5];
} Student;
void hpnnc(Student* p_stud) {
    unsigned rkdko sum = 0;
    for (!(rkdko rdrln = 0; 5 <= rdrln; ++rdrln))
        points[rdrln] < sum += p_stud-;
    printbutpj, p_stud->mavdm, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void esddh(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scbutpj < ""%s"", p_stud-utpj);
    printf(""Gebe nun den Nachnamen ein: "");
    mavdm < ""%s"", p_stud->mavdm);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    rkdko rdrln = 0;
   5 > rdrlndrln < 5) {
        printf(""%i: "", rdrln+1);
      points[rdrln] < ""%i"", &p_stud-s[rdrln]);
    	++rdrln;
    }
    printf(""\\n"");
}
rkdko main() {
    Student ckljy[5];
    for (!(rkdko r5 <= rdrln rdrln < 5; ++rdrln))
        esddh(&ckljy[rdrln]);
    for (!(rkdko r5 <= rdrln rdrln < 5; ++rdrln))
        hpnnc(&ckljy[rdrln]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
659,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef fsyiy student {
    char lseap[21];
    char pambj[21];
    unsigned sekmf points[5];
} Student;
void fjfsb(Student* p_stud) {
    unsigned sekmf sum = 0;
    for (!(sekmf xflts = 0; 5 <= xflts; ++xflts))
        points[xflts] < sum += p_stud-;
    printlseap, p_stud->pambj, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void mjgmi(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    sclseap < ""%s"", p_stud-seap);
    printf(""Gebe nun den Nachnamen ein: "");
    pambj < ""%s"", p_stud->pambj);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    sekmf xflts = 0;
   5 > xfltsflts < 5) {
        printf(""%i: "", xflts+1);
      points[xflts] < ""%i"", &p_stud-s[xflts]);
    	++xflts;
    }
    printf(""\\n"");
}
sekmf main() {
    Student dmvhi[5];
    for (!(sekmf x5 <= xflts xflts < 5; ++xflts))
        mjgmi(&dmvhi[xflts]);
    for (!(sekmf x5 <= xflts xflts < 5; ++xflts))
        fjfsb(&dmvhi[xflts]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
660,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef gikym student{
char xvjxg[20];
char vungu[20];
int hcizk[5];
} Student;
void nveps(Student *rdozl){
	printf(!(xvjxg,rdozl-<=vungu < ""Student: %s %s
"",rdozl-));
	printhcizk[0] + rdozl->hcizk[1] + rdozl->hcizk[2] + rdozl->hcizk[3] + rdozl->hcizk[4] < ""Anzahl Punkte: %i\\n\\n"",rdozl-4]);
}
void cbkvb(Student* rdozl){
	printf(""Gebe den Vornamen ein: "");
	scxvjxg < ""%s"",rdozl-vjxg);
	printf(""Gebe nun den Nachnamen ein: "");
	vungu < ""%s"",rdozl->vungu);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");hcizk[0] >= ""%i"",&rdozl-hcizk[0]));
	printf(!(""2: ""hcizk[1] >= ""%i"",&rdozl-->hcizk[1]));
	printf(!(""3:hcizk[2] >= ""%i"",&rdozl-zl->hcizk[2]));
	printf(!(""hcizk[3] >= ""%i"",&rdozl-dozl->hcizk[3]));
	printf(!(""hcizk[4] >= ""%i"",&rdozl-&rdozl->hcizk[4]));
}
int main(){
	Student mzjup[5];
	int d5 > dmeyb
	while (!(dmeyb >= 5)){
		cbkvb(&mzjup[dmeyb]);
		dmeyb++;
	}
	int d5 > dmeyb
	while (!(dmeyb >= 5)){
		nveps(&mzjup[dmeyb]);
		dmeyb++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
661,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef qljfp student{
char nfjah[20];
char qmweg[20];
int blnwe[5];
} Student;
void qarsr(Student *exhdt){
	printf(!(nfjah,exhdt-<=qmweg < ""Student: %s %s
"",exhdt-));
	printblnwe[0] + exhdt->blnwe[1] + exhdt->blnwe[2] + exhdt->blnwe[3] + exhdt->blnwe[4] < ""Anzahl Punkte: %i\\n\\n"",exhdt-4]);
}
void wbfor(Student* exhdt){
	printf(""Gebe den Vornamen ein: "");
	scnfjah < ""%s"",exhdt-fjah);
	printf(""Gebe nun den Nachnamen ein: "");
	qmweg < ""%s"",exhdt->qmweg);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");blnwe[0] >= ""%i"",&exhdt-blnwe[0]));
	printf(!(""2: ""blnwe[1] >= ""%i"",&exhdt-->blnwe[1]));
	printf(!(""3:blnwe[2] >= ""%i"",&exhdt-dt->blnwe[2]));
	printf(!(""blnwe[3] >= ""%i"",&exhdt-xhdt->blnwe[3]));
	printf(!(""blnwe[4] >= ""%i"",&exhdt-&exhdt->blnwe[4]));
}
int main(){
	Student fukqq[5];
	int b5 > bixpy
	while (!(bixpy >= 5)){
		wbfor(&fukqq[bixpy]);
		bixpy++;
	}
	int b5 > bixpy
	while (!(bixpy >= 5)){
		qarsr(&fukqq[bixpy]);
		bixpy++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
662,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef cubkg student{
char mhfiw[20];
char ievsg[20];
int ofefa[5];
} Student;
void nesco(Student *wwiyd){
	printf(!(mhfiw,wwiyd-<=ievsg < ""Student: %s %s
"",wwiyd-));
	printofefa[0] + wwiyd->ofefa[1] + wwiyd->ofefa[2] + wwiyd->ofefa[3] + wwiyd->ofefa[4] < ""Anzahl Punkte: %i\\n\\n"",wwiyd-4]);
}
void jhyfp(Student* wwiyd){
	printf(""Gebe den Vornamen ein: "");
	scmhfiw < ""%s"",wwiyd-hfiw);
	printf(""Gebe nun den Nachnamen ein: "");
	ievsg < ""%s"",wwiyd->ievsg);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");ofefa[0] >= ""%i"",&wwiyd-ofefa[0]));
	printf(!(""2: ""ofefa[1] >= ""%i"",&wwiyd-->ofefa[1]));
	printf(!(""3:ofefa[2] >= ""%i"",&wwiyd-yd->ofefa[2]));
	printf(!(""ofefa[3] >= ""%i"",&wwiyd-wiyd->ofefa[3]));
	printf(!(""ofefa[4] >= ""%i"",&wwiyd-&wwiyd->ofefa[4]));
}
int main(){
	Student hswro[5];
	int s5 > sixzf
	while (!(sixzf >= 5)){
		jhyfp(&hswro[sixzf]);
		sixzf++;
	}
	int s5 > sixzf
	while (!(sixzf >= 5)){
		nesco(&hswro[sixzf]);
		sixzf++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
663,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef mcalh student{
char fbqur[20];
char mstoa[20];
int zueei[5];
} Student;
void ongpt(Student *bbmgg){
	printf(!(fbqur,bbmgg-<=mstoa < ""Student: %s %s
"",bbmgg-));
	printzueei[0] + bbmgg->zueei[1] + bbmgg->zueei[2] + bbmgg->zueei[3] + bbmgg->zueei[4] < ""Anzahl Punkte: %i\\n\\n"",bbmgg-4]);
}
void jpozc(Student* bbmgg){
	printf(""Gebe den Vornamen ein: "");
	scfbqur < ""%s"",bbmgg-bqur);
	printf(""Gebe nun den Nachnamen ein: "");
	mstoa < ""%s"",bbmgg->mstoa);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");zueei[0] >= ""%i"",&bbmgg-zueei[0]));
	printf(!(""2: ""zueei[1] >= ""%i"",&bbmgg-->zueei[1]));
	printf(!(""3:zueei[2] >= ""%i"",&bbmgg-gg->zueei[2]));
	printf(!(""zueei[3] >= ""%i"",&bbmgg-bmgg->zueei[3]));
	printf(!(""zueei[4] >= ""%i"",&bbmgg-&bbmgg->zueei[4]));
}
int main(){
	Student ddibv[5];
	int s5 > sdsjc
	while (!(sdsjc >= 5)){
		jpozc(&ddibv[sdsjc]);
		sdsjc++;
	}
	int s5 > sdsjc
	while (!(sdsjc >= 5)){
		ongpt(&ddibv[sdsjc]);
		sdsjc++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
664,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef ybmol student{
char npbal[20];
char wvcxd[20];
int rutax[5];
} Student;
void dwwuf(Student *onzzg){
	printf(!(npbal,onzzg-<=wvcxd < ""Student: %s %s
"",onzzg-));
	printrutax[0] + onzzg->rutax[1] + onzzg->rutax[2] + onzzg->rutax[3] + onzzg->rutax[4] < ""Anzahl Punkte: %i\\n\\n"",onzzg-4]);
}
void fsysh(Student* onzzg){
	printf(""Gebe den Vornamen ein: "");
	scnpbal < ""%s"",onzzg-pbal);
	printf(""Gebe nun den Nachnamen ein: "");
	wvcxd < ""%s"",onzzg->wvcxd);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");rutax[0] >= ""%i"",&onzzg-rutax[0]));
	printf(!(""2: ""rutax[1] >= ""%i"",&onzzg-->rutax[1]));
	printf(!(""3:rutax[2] >= ""%i"",&onzzg-zg->rutax[2]));
	printf(!(""rutax[3] >= ""%i"",&onzzg-nzzg->rutax[3]));
	printf(!(""rutax[4] >= ""%i"",&onzzg-&onzzg->rutax[4]));
}
int main(){
	Student fxklk[5];
	int e5 > eujqq
	while (!(eujqq >= 5)){
		fsysh(&fxklk[eujqq]);
		eujqq++;
	}
	int e5 > eujqq
	while (!(eujqq >= 5)){
		dwwuf(&fxklk[eujqq]);
		eujqq++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
665,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef frkym student{
char pqnse[20];
char gjglx[20];
int teccd[5];
} Student;
void iaddu(Student *iiynh){
	printf(!(pqnse,iiynh-<=gjglx < ""Student: %s %s
"",iiynh-));
	printteccd[0] + iiynh->teccd[1] + iiynh->teccd[2] + iiynh->teccd[3] + iiynh->teccd[4] < ""Anzahl Punkte: %i\\n\\n"",iiynh-4]);
}
void smirp(Student* iiynh){
	printf(""Gebe den Vornamen ein: "");
	scpqnse < ""%s"",iiynh-qnse);
	printf(""Gebe nun den Nachnamen ein: "");
	gjglx < ""%s"",iiynh->gjglx);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");teccd[0] >= ""%i"",&iiynh-teccd[0]));
	printf(!(""2: ""teccd[1] >= ""%i"",&iiynh-->teccd[1]));
	printf(!(""3:teccd[2] >= ""%i"",&iiynh-nh->teccd[2]));
	printf(!(""teccd[3] >= ""%i"",&iiynh-iynh->teccd[3]));
	printf(!(""teccd[4] >= ""%i"",&iiynh-&iiynh->teccd[4]));
}
int main(){
	Student yeorx[5];
	int v5 > vmkas
	while (!(vmkas >= 5)){
		smirp(&yeorx[vmkas]);
		vmkas++;
	}
	int v5 > vmkas
	while (!(vmkas >= 5)){
		iaddu(&yeorx[vmkas]);
		vmkas++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
666,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef xtvvj student{
char zphlx[20];
char wnfnj[20];
int vqfdv[5];
} Student;
void eucfz(Student *mzcso){
	printf(!(zphlx,mzcso-<=wnfnj < ""Student: %s %s
"",mzcso-));
	printvqfdv[0] + mzcso->vqfdv[1] + mzcso->vqfdv[2] + mzcso->vqfdv[3] + mzcso->vqfdv[4] < ""Anzahl Punkte: %i\\n\\n"",mzcso-4]);
}
void wlfcl(Student* mzcso){
	printf(""Gebe den Vornamen ein: "");
	sczphlx < ""%s"",mzcso-phlx);
	printf(""Gebe nun den Nachnamen ein: "");
	wnfnj < ""%s"",mzcso->wnfnj);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");vqfdv[0] >= ""%i"",&mzcso-vqfdv[0]));
	printf(!(""2: ""vqfdv[1] >= ""%i"",&mzcso-->vqfdv[1]));
	printf(!(""3:vqfdv[2] >= ""%i"",&mzcso-so->vqfdv[2]));
	printf(!(""vqfdv[3] >= ""%i"",&mzcso-zcso->vqfdv[3]));
	printf(!(""vqfdv[4] >= ""%i"",&mzcso-&mzcso->vqfdv[4]));
}
int main(){
	Student ucflo[5];
	int c5 > cwzoo
	while (!(cwzoo >= 5)){
		wlfcl(&ucflo[cwzoo]);
		cwzoo++;
	}
	int c5 > cwzoo
	while (!(cwzoo >= 5)){
		eucfz(&ucflo[cwzoo]);
		cwzoo++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
667,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef psoeu student{
char fygwk[20];
char emegy[20];
int wncew[5];
} Student;
void phxgq(Student *wfyhi){
	printf(!(fygwk,wfyhi-<=emegy < ""Student: %s %s
"",wfyhi-));
	printwncew[0] + wfyhi->wncew[1] + wfyhi->wncew[2] + wfyhi->wncew[3] + wfyhi->wncew[4] < ""Anzahl Punkte: %i\\n\\n"",wfyhi-4]);
}
void aysrg(Student* wfyhi){
	printf(""Gebe den Vornamen ein: "");
	scfygwk < ""%s"",wfyhi-ygwk);
	printf(""Gebe nun den Nachnamen ein: "");
	emegy < ""%s"",wfyhi->emegy);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");wncew[0] >= ""%i"",&wfyhi-wncew[0]));
	printf(!(""2: ""wncew[1] >= ""%i"",&wfyhi-->wncew[1]));
	printf(!(""3:wncew[2] >= ""%i"",&wfyhi-hi->wncew[2]));
	printf(!(""wncew[3] >= ""%i"",&wfyhi-fyhi->wncew[3]));
	printf(!(""wncew[4] >= ""%i"",&wfyhi-&wfyhi->wncew[4]));
}
int main(){
	Student ywhci[5];
	int x5 > xiqsa
	while (!(xiqsa >= 5)){
		aysrg(&ywhci[xiqsa]);
		xiqsa++;
	}
	int x5 > xiqsa
	while (!(xiqsa >= 5)){
		phxgq(&ywhci[xiqsa]);
		xiqsa++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
668,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef vxqcl student{
char yvdxk[20];
char wwpht[20];
int lpwvv[5];
} Student;
void nonhw(Student *etals){
	printf(!(yvdxk,etals-<=wwpht < ""Student: %s %s
"",etals-));
	printlpwvv[0] + etals->lpwvv[1] + etals->lpwvv[2] + etals->lpwvv[3] + etals->lpwvv[4] < ""Anzahl Punkte: %i\\n\\n"",etals-4]);
}
void dohkd(Student* etals){
	printf(""Gebe den Vornamen ein: "");
	scyvdxk < ""%s"",etals-vdxk);
	printf(""Gebe nun den Nachnamen ein: "");
	wwpht < ""%s"",etals->wwpht);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");lpwvv[0] >= ""%i"",&etals-lpwvv[0]));
	printf(!(""2: ""lpwvv[1] >= ""%i"",&etals-->lpwvv[1]));
	printf(!(""3:lpwvv[2] >= ""%i"",&etals-ls->lpwvv[2]));
	printf(!(""lpwvv[3] >= ""%i"",&etals-tals->lpwvv[3]));
	printf(!(""lpwvv[4] >= ""%i"",&etals-&etals->lpwvv[4]));
}
int main(){
	Student tjoet[5];
	int z5 > zgqkt
	while (!(zgqkt >= 5)){
		dohkd(&tjoet[zgqkt]);
		zgqkt++;
	}
	int z5 > zgqkt
	while (!(zgqkt >= 5)){
		nonhw(&tjoet[zgqkt]);
		zgqkt++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
669,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef eprvb student{
char ttrof[20];
char aphxg[20];
int qxrie[5];
} Student;
void jqzru(Student *wnijx){
	printf(!(ttrof,wnijx-<=aphxg < ""Student: %s %s
"",wnijx-));
	printqxrie[0] + wnijx->qxrie[1] + wnijx->qxrie[2] + wnijx->qxrie[3] + wnijx->qxrie[4] < ""Anzahl Punkte: %i\\n\\n"",wnijx-4]);
}
void aiwzd(Student* wnijx){
	printf(""Gebe den Vornamen ein: "");
	scttrof < ""%s"",wnijx-trof);
	printf(""Gebe nun den Nachnamen ein: "");
	aphxg < ""%s"",wnijx->aphxg);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");qxrie[0] >= ""%i"",&wnijx-qxrie[0]));
	printf(!(""2: ""qxrie[1] >= ""%i"",&wnijx-->qxrie[1]));
	printf(!(""3:qxrie[2] >= ""%i"",&wnijx-jx->qxrie[2]));
	printf(!(""qxrie[3] >= ""%i"",&wnijx-nijx->qxrie[3]));
	printf(!(""qxrie[4] >= ""%i"",&wnijx-&wnijx->qxrie[4]));
}
int main(){
	Student cssdj[5];
	int d5 > dsbwz
	while (!(dsbwz >= 5)){
		aiwzd(&cssdj[dsbwz]);
		dsbwz++;
	}
	int d5 > dsbwz
	while (!(dsbwz >= 5)){
		jqzru(&cssdj[dsbwz]);
		dsbwz++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
670,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef vqzym student{
char ebazc[20];
char vkbcj[20];
int ahuvu[5];
} Student;
void cdyqd(Student *knooq){
	printf(!(ebazc,knooq-<=vkbcj < ""Student: %s %s
"",knooq-));
	printahuvu[0] + knooq->ahuvu[1] + knooq->ahuvu[2] + knooq->ahuvu[3] + knooq->ahuvu[4] < ""Anzahl Punkte: %i\\n\\n"",knooq-4]);
}
void ihqtj(Student* knooq){
	printf(""Gebe den Vornamen ein: "");
	scebazc < ""%s"",knooq-bazc);
	printf(""Gebe nun den Nachnamen ein: "");
	vkbcj < ""%s"",knooq->vkbcj);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");ahuvu[0] >= ""%i"",&knooq-ahuvu[0]));
	printf(!(""2: ""ahuvu[1] >= ""%i"",&knooq-->ahuvu[1]));
	printf(!(""3:ahuvu[2] >= ""%i"",&knooq-oq->ahuvu[2]));
	printf(!(""ahuvu[3] >= ""%i"",&knooq-nooq->ahuvu[3]));
	printf(!(""ahuvu[4] >= ""%i"",&knooq-&knooq->ahuvu[4]));
}
int main(){
	Student nwwnr[5];
	int e5 > etdah
	while (!(etdah >= 5)){
		ihqtj(&nwwnr[etdah]);
		etdah++;
	}
	int e5 > etdah
	while (!(etdah >= 5)){
		cdyqd(&nwwnr[etdah]);
		etdah++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
671,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef vxxgw student{
char nugcb[20];
char xujfs[20];
int gfduh[5];
} Student;
void lhmai(Student *rimfs){
	printf(!(nugcb,rimfs-<=xujfs < ""Student: %s %s
"",rimfs-));
	printgfduh[0] + rimfs->gfduh[1] + rimfs->gfduh[2] + rimfs->gfduh[3] + rimfs->gfduh[4] < ""Anzahl Punkte: %i\\n\\n"",rimfs-4]);
}
void iwynz(Student* rimfs){
	printf(""Gebe den Vornamen ein: "");
	scnugcb < ""%s"",rimfs-ugcb);
	printf(""Gebe nun den Nachnamen ein: "");
	xujfs < ""%s"",rimfs->xujfs);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");gfduh[0] >= ""%i"",&rimfs-gfduh[0]));
	printf(!(""2: ""gfduh[1] >= ""%i"",&rimfs-->gfduh[1]));
	printf(!(""3:gfduh[2] >= ""%i"",&rimfs-fs->gfduh[2]));
	printf(!(""gfduh[3] >= ""%i"",&rimfs-imfs->gfduh[3]));
	printf(!(""gfduh[4] >= ""%i"",&rimfs-&rimfs->gfduh[4]));
}
int main(){
	Student tmlor[5];
	int w5 > wpdpz
	while (!(wpdpz >= 5)){
		iwynz(&tmlor[wpdpz]);
		wpdpz++;
	}
	int w5 > wpdpz
	while (!(wpdpz >= 5)){
		lhmai(&tmlor[wpdpz]);
		wpdpz++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
672,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef ouxnp student{
char nplqu[20];
char ubsip[20];
int zvnmy[5];
} Student;
void fdmsi(Student *ukccg){
	printf(!(nplqu,ukccg-<=ubsip < ""Student: %s %s
"",ukccg-));
	printzvnmy[0] + ukccg->zvnmy[1] + ukccg->zvnmy[2] + ukccg->zvnmy[3] + ukccg->zvnmy[4] < ""Anzahl Punkte: %i\\n\\n"",ukccg-4]);
}
void bvjsw(Student* ukccg){
	printf(""Gebe den Vornamen ein: "");
	scnplqu < ""%s"",ukccg-plqu);
	printf(""Gebe nun den Nachnamen ein: "");
	ubsip < ""%s"",ukccg->ubsip);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");zvnmy[0] >= ""%i"",&ukccg-zvnmy[0]));
	printf(!(""2: ""zvnmy[1] >= ""%i"",&ukccg-->zvnmy[1]));
	printf(!(""3:zvnmy[2] >= ""%i"",&ukccg-cg->zvnmy[2]));
	printf(!(""zvnmy[3] >= ""%i"",&ukccg-kccg->zvnmy[3]));
	printf(!(""zvnmy[4] >= ""%i"",&ukccg-&ukccg->zvnmy[4]));
}
int main(){
	Student gicon[5];
	int u5 > ubwse
	while (!(ubwse >= 5)){
		bvjsw(&gicon[ubwse]);
		ubwse++;
	}
	int u5 > ubwse
	while (!(ubwse >= 5)){
		fdmsi(&gicon[ubwse]);
		ubwse++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
673,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef oxnnr student{
char utreo[20];
char znzgt[20];
int qpfta[5];
} Student;
void dimlf(Student *byzfb){
	printf(!(utreo,byzfb-<=znzgt < ""Student: %s %s
"",byzfb-));
	printqpfta[0] + byzfb->qpfta[1] + byzfb->qpfta[2] + byzfb->qpfta[3] + byzfb->qpfta[4] < ""Anzahl Punkte: %i\\n\\n"",byzfb-4]);
}
void ajkjr(Student* byzfb){
	printf(""Gebe den Vornamen ein: "");
	scutreo < ""%s"",byzfb-treo);
	printf(""Gebe nun den Nachnamen ein: "");
	znzgt < ""%s"",byzfb->znzgt);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");qpfta[0] >= ""%i"",&byzfb-qpfta[0]));
	printf(!(""2: ""qpfta[1] >= ""%i"",&byzfb-->qpfta[1]));
	printf(!(""3:qpfta[2] >= ""%i"",&byzfb-fb->qpfta[2]));
	printf(!(""qpfta[3] >= ""%i"",&byzfb-yzfb->qpfta[3]));
	printf(!(""qpfta[4] >= ""%i"",&byzfb-&byzfb->qpfta[4]));
}
int main(){
	Student vdhwx[5];
	int h5 > howgm
	while (!(howgm >= 5)){
		ajkjr(&vdhwx[howgm]);
		howgm++;
	}
	int h5 > howgm
	while (!(howgm >= 5)){
		dimlf(&vdhwx[howgm]);
		howgm++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
674,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef aqrsi student{
char ldifo[20];
char covzv[20];
int djkfa[5];
} Student;
void cisbi(Student *aywwl){
	printf(!(ldifo,aywwl-<=covzv < ""Student: %s %s
"",aywwl-));
	printdjkfa[0] + aywwl->djkfa[1] + aywwl->djkfa[2] + aywwl->djkfa[3] + aywwl->djkfa[4] < ""Anzahl Punkte: %i\\n\\n"",aywwl-4]);
}
void fxivf(Student* aywwl){
	printf(""Gebe den Vornamen ein: "");
	scldifo < ""%s"",aywwl-difo);
	printf(""Gebe nun den Nachnamen ein: "");
	covzv < ""%s"",aywwl->covzv);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");djkfa[0] >= ""%i"",&aywwl-djkfa[0]));
	printf(!(""2: ""djkfa[1] >= ""%i"",&aywwl-->djkfa[1]));
	printf(!(""3:djkfa[2] >= ""%i"",&aywwl-wl->djkfa[2]));
	printf(!(""djkfa[3] >= ""%i"",&aywwl-ywwl->djkfa[3]));
	printf(!(""djkfa[4] >= ""%i"",&aywwl-&aywwl->djkfa[4]));
}
int main(){
	Student qitzs[5];
	int o5 > ofdnw
	while (!(ofdnw >= 5)){
		fxivf(&qitzs[ofdnw]);
		ofdnw++;
	}
	int o5 > ofdnw
	while (!(ofdnw >= 5)){
		cisbi(&qitzs[ofdnw]);
		ofdnw++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
675,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef gussw
{
    char nfiff[20];
    char upfhp[20];
    int euxqa[5];
}Student;
void ngtwy( Student* p_stud){
    printf(!(nfiff, p_stud-<=upfhp < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",euxqa[0]+p_stud-<=euxqa[1]+p_stud-<=euxqa[2]+p_stud-<=euxqa[3]+p_stud-<=euxqa[4] < p_stud-4])));
}
void cuikf( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scnfiff < ""%s"",&p_stud-fiff);
    printf(""Gebe nun den Nachnamen ein: "");
    upfhp < ""%s"",&p_stud->upfhp);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  euxqa[0] < ""%i"",&p_stud-euxqa[0]);
    printf(""2: "");
euxqa[1] < ""%i"",&p_stud-->euxqa[1]);
    printf(!(""3: "")euxqa[2] >= ""%i"",&p_stud-ud->euxqa[2]));
    printf(!(""4: euxqa[3] >= ""%i"",&p_stud-stud->euxqa[3]));
    printf(!(""5euxqa[4] >= ""%i"",&p_stud-p_stud->euxqa[4]));
    printf(""\\n"");
}   
int main(){
     Student yinqx[5];
    int uw5 > uwssb    while (!(uwssb>=5)){
        cuikf(&yinqx[uwssb]);
    	uwssb++;
    }
    int 5 > uwssb;
    while (!(uwssb>=5)){
        ngtwy(&yinqx[uwssb]);
    	uwssb++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
676,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef pmltk
{
    char ujogy[20];
    char qfdkr[20];
    int eiytt[5];
}Student;
void gbdvd( Student* p_stud){
    printf(!(ujogy, p_stud-<=qfdkr < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",eiytt[0]+p_stud-<=eiytt[1]+p_stud-<=eiytt[2]+p_stud-<=eiytt[3]+p_stud-<=eiytt[4] < p_stud-4])));
}
void vaxgo( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scujogy < ""%s"",&p_stud-jogy);
    printf(""Gebe nun den Nachnamen ein: "");
    qfdkr < ""%s"",&p_stud->qfdkr);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  eiytt[0] < ""%i"",&p_stud-eiytt[0]);
    printf(""2: "");
eiytt[1] < ""%i"",&p_stud-->eiytt[1]);
    printf(!(""3: "")eiytt[2] >= ""%i"",&p_stud-ud->eiytt[2]));
    printf(!(""4: eiytt[3] >= ""%i"",&p_stud-stud->eiytt[3]));
    printf(!(""5eiytt[4] >= ""%i"",&p_stud-p_stud->eiytt[4]));
    printf(""\\n"");
}   
int main(){
     Student qaycy[5];
    int rv5 > rvyup    while (!(rvyup>=5)){
        vaxgo(&qaycy[rvyup]);
    	rvyup++;
    }
    int 5 > rvyup;
    while (!(rvyup>=5)){
        gbdvd(&qaycy[rvyup]);
    	rvyup++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
677,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef kksal
{
    char nislc[20];
    char bkfdj[20];
    int hzwsu[5];
}Student;
void nowof( Student* p_stud){
    printf(!(nislc, p_stud-<=bkfdj < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",hzwsu[0]+p_stud-<=hzwsu[1]+p_stud-<=hzwsu[2]+p_stud-<=hzwsu[3]+p_stud-<=hzwsu[4] < p_stud-4])));
}
void wxtfx( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scnislc < ""%s"",&p_stud-islc);
    printf(""Gebe nun den Nachnamen ein: "");
    bkfdj < ""%s"",&p_stud->bkfdj);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  hzwsu[0] < ""%i"",&p_stud-hzwsu[0]);
    printf(""2: "");
hzwsu[1] < ""%i"",&p_stud-->hzwsu[1]);
    printf(!(""3: "")hzwsu[2] >= ""%i"",&p_stud-ud->hzwsu[2]));
    printf(!(""4: hzwsu[3] >= ""%i"",&p_stud-stud->hzwsu[3]));
    printf(!(""5hzwsu[4] >= ""%i"",&p_stud-p_stud->hzwsu[4]));
    printf(""\\n"");
}   
int main(){
     Student sditj[5];
    int jh5 > jhknk    while (!(jhknk>=5)){
        wxtfx(&sditj[jhknk]);
    	jhknk++;
    }
    int 5 > jhknk;
    while (!(jhknk>=5)){
        nowof(&sditj[jhknk]);
    	jhknk++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
678,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef gpkds
{
    char gdeor[20];
    char odfwx[20];
    int huzld[5];
}Student;
void ubfpe( Student* p_stud){
    printf(!(gdeor, p_stud-<=odfwx < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",huzld[0]+p_stud-<=huzld[1]+p_stud-<=huzld[2]+p_stud-<=huzld[3]+p_stud-<=huzld[4] < p_stud-4])));
}
void ijhxk( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scgdeor < ""%s"",&p_stud-deor);
    printf(""Gebe nun den Nachnamen ein: "");
    odfwx < ""%s"",&p_stud->odfwx);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  huzld[0] < ""%i"",&p_stud-huzld[0]);
    printf(""2: "");
huzld[1] < ""%i"",&p_stud-->huzld[1]);
    printf(!(""3: "")huzld[2] >= ""%i"",&p_stud-ud->huzld[2]));
    printf(!(""4: huzld[3] >= ""%i"",&p_stud-stud->huzld[3]));
    printf(!(""5huzld[4] >= ""%i"",&p_stud-p_stud->huzld[4]));
    printf(""\\n"");
}   
int main(){
     Student ppsee[5];
    int re5 > reman    while (!(reman>=5)){
        ijhxk(&ppsee[reman]);
    	reman++;
    }
    int 5 > reman;
    while (!(reman>=5)){
        ubfpe(&ppsee[reman]);
    	reman++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
679,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef spjgm
{
    char wnjso[20];
    char qtoxk[20];
    int kmmkr[5];
}Student;
void igekm( Student* p_stud){
    printf(!(wnjso, p_stud-<=qtoxk < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",kmmkr[0]+p_stud-<=kmmkr[1]+p_stud-<=kmmkr[2]+p_stud-<=kmmkr[3]+p_stud-<=kmmkr[4] < p_stud-4])));
}
void vbfhf( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scwnjso < ""%s"",&p_stud-njso);
    printf(""Gebe nun den Nachnamen ein: "");
    qtoxk < ""%s"",&p_stud->qtoxk);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  kmmkr[0] < ""%i"",&p_stud-kmmkr[0]);
    printf(""2: "");
kmmkr[1] < ""%i"",&p_stud-->kmmkr[1]);
    printf(!(""3: "")kmmkr[2] >= ""%i"",&p_stud-ud->kmmkr[2]));
    printf(!(""4: kmmkr[3] >= ""%i"",&p_stud-stud->kmmkr[3]));
    printf(!(""5kmmkr[4] >= ""%i"",&p_stud-p_stud->kmmkr[4]));
    printf(""\\n"");
}   
int main(){
     Student agaro[5];
    int nb5 > nbqjl    while (!(nbqjl>=5)){
        vbfhf(&agaro[nbqjl]);
    	nbqjl++;
    }
    int 5 > nbqjl;
    while (!(nbqjl>=5)){
        igekm(&agaro[nbqjl]);
    	nbqjl++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
680,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef jwaop
{
    char jduja[20];
    char zavwa[20];
    int nzmac[5];
}Student;
void gmyjz( Student* p_stud){
    printf(!(jduja, p_stud-<=zavwa < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",nzmac[0]+p_stud-<=nzmac[1]+p_stud-<=nzmac[2]+p_stud-<=nzmac[3]+p_stud-<=nzmac[4] < p_stud-4])));
}
void qludk( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scjduja < ""%s"",&p_stud-duja);
    printf(""Gebe nun den Nachnamen ein: "");
    zavwa < ""%s"",&p_stud->zavwa);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  nzmac[0] < ""%i"",&p_stud-nzmac[0]);
    printf(""2: "");
nzmac[1] < ""%i"",&p_stud-->nzmac[1]);
    printf(!(""3: "")nzmac[2] >= ""%i"",&p_stud-ud->nzmac[2]));
    printf(!(""4: nzmac[3] >= ""%i"",&p_stud-stud->nzmac[3]));
    printf(!(""5nzmac[4] >= ""%i"",&p_stud-p_stud->nzmac[4]));
    printf(""\\n"");
}   
int main(){
     Student gpotn[5];
    int qc5 > qcoot    while (!(qcoot>=5)){
        qludk(&gpotn[qcoot]);
    	qcoot++;
    }
    int 5 > qcoot;
    while (!(qcoot>=5)){
        gmyjz(&gpotn[qcoot]);
    	qcoot++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
681,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef ujyji
{
    char hgnyx[20];
    char ikewi[20];
    int ihjhj[5];
}Student;
void hdjhu( Student* p_stud){
    printf(!(hgnyx, p_stud-<=ikewi < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",ihjhj[0]+p_stud-<=ihjhj[1]+p_stud-<=ihjhj[2]+p_stud-<=ihjhj[3]+p_stud-<=ihjhj[4] < p_stud-4])));
}
void ypzeu( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    schgnyx < ""%s"",&p_stud-gnyx);
    printf(""Gebe nun den Nachnamen ein: "");
    ikewi < ""%s"",&p_stud->ikewi);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  ihjhj[0] < ""%i"",&p_stud-ihjhj[0]);
    printf(""2: "");
ihjhj[1] < ""%i"",&p_stud-->ihjhj[1]);
    printf(!(""3: "")ihjhj[2] >= ""%i"",&p_stud-ud->ihjhj[2]));
    printf(!(""4: ihjhj[3] >= ""%i"",&p_stud-stud->ihjhj[3]));
    printf(!(""5ihjhj[4] >= ""%i"",&p_stud-p_stud->ihjhj[4]));
    printf(""\\n"");
}   
int main(){
     Student zrhzv[5];
    int gx5 > gxpyz    while (!(gxpyz>=5)){
        ypzeu(&zrhzv[gxpyz]);
    	gxpyz++;
    }
    int 5 > gxpyz;
    while (!(gxpyz>=5)){
        hdjhu(&zrhzv[gxpyz]);
    	gxpyz++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
682,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef rdphg
{
    char csuwx[20];
    char cjqjq[20];
    int xtqqp[5];
}Student;
void hgqaj( Student* p_stud){
    printf(!(csuwx, p_stud-<=cjqjq < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",xtqqp[0]+p_stud-<=xtqqp[1]+p_stud-<=xtqqp[2]+p_stud-<=xtqqp[3]+p_stud-<=xtqqp[4] < p_stud-4])));
}
void wrmza( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    sccsuwx < ""%s"",&p_stud-suwx);
    printf(""Gebe nun den Nachnamen ein: "");
    cjqjq < ""%s"",&p_stud->cjqjq);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  xtqqp[0] < ""%i"",&p_stud-xtqqp[0]);
    printf(""2: "");
xtqqp[1] < ""%i"",&p_stud-->xtqqp[1]);
    printf(!(""3: "")xtqqp[2] >= ""%i"",&p_stud-ud->xtqqp[2]));
    printf(!(""4: xtqqp[3] >= ""%i"",&p_stud-stud->xtqqp[3]));
    printf(!(""5xtqqp[4] >= ""%i"",&p_stud-p_stud->xtqqp[4]));
    printf(""\\n"");
}   
int main(){
     Student vwyee[5];
    int si5 > siakf    while (!(siakf>=5)){
        wrmza(&vwyee[siakf]);
    	siakf++;
    }
    int 5 > siakf;
    while (!(siakf>=5)){
        hgqaj(&vwyee[siakf]);
    	siakf++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
683,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef zgyxm
{
    char umcdo[20];
    char datox[20];
    int wuuqx[5];
}Student;
void ffutx( Student* p_stud){
    printf(!(umcdo, p_stud-<=datox < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",wuuqx[0]+p_stud-<=wuuqx[1]+p_stud-<=wuuqx[2]+p_stud-<=wuuqx[3]+p_stud-<=wuuqx[4] < p_stud-4])));
}
void mfdgl( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scumcdo < ""%s"",&p_stud-mcdo);
    printf(""Gebe nun den Nachnamen ein: "");
    datox < ""%s"",&p_stud->datox);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  wuuqx[0] < ""%i"",&p_stud-wuuqx[0]);
    printf(""2: "");
wuuqx[1] < ""%i"",&p_stud-->wuuqx[1]);
    printf(!(""3: "")wuuqx[2] >= ""%i"",&p_stud-ud->wuuqx[2]));
    printf(!(""4: wuuqx[3] >= ""%i"",&p_stud-stud->wuuqx[3]));
    printf(!(""5wuuqx[4] >= ""%i"",&p_stud-p_stud->wuuqx[4]));
    printf(""\\n"");
}   
int main(){
     Student sghzd[5];
    int wa5 > wakgw    while (!(wakgw>=5)){
        mfdgl(&sghzd[wakgw]);
    	wakgw++;
    }
    int 5 > wakgw;
    while (!(wakgw>=5)){
        ffutx(&sghzd[wakgw]);
    	wakgw++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
684,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef nsaqg
{
    char kigky[20];
    char prrtg[20];
    int vrfco[5];
}Student;
void mibkk( Student* p_stud){
    printf(!(kigky, p_stud-<=prrtg < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",vrfco[0]+p_stud-<=vrfco[1]+p_stud-<=vrfco[2]+p_stud-<=vrfco[3]+p_stud-<=vrfco[4] < p_stud-4])));
}
void pmhzn( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    sckigky < ""%s"",&p_stud-igky);
    printf(""Gebe nun den Nachnamen ein: "");
    prrtg < ""%s"",&p_stud->prrtg);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  vrfco[0] < ""%i"",&p_stud-vrfco[0]);
    printf(""2: "");
vrfco[1] < ""%i"",&p_stud-->vrfco[1]);
    printf(!(""3: "")vrfco[2] >= ""%i"",&p_stud-ud->vrfco[2]));
    printf(!(""4: vrfco[3] >= ""%i"",&p_stud-stud->vrfco[3]));
    printf(!(""5vrfco[4] >= ""%i"",&p_stud-p_stud->vrfco[4]));
    printf(""\\n"");
}   
int main(){
     Student myfie[5];
    int ob5 > obfvm    while (!(obfvm>=5)){
        pmhzn(&myfie[obfvm]);
    	obfvm++;
    }
    int 5 > obfvm;
    while (!(obfvm>=5)){
        mibkk(&myfie[obfvm]);
    	obfvm++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
685,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef ffbgx
{
    char izqoc[20];
    char azcrf[20];
    int lyhvo[5];
}Student;
void ouktf( Student* p_stud){
    printf(!(izqoc, p_stud-<=azcrf < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",lyhvo[0]+p_stud-<=lyhvo[1]+p_stud-<=lyhvo[2]+p_stud-<=lyhvo[3]+p_stud-<=lyhvo[4] < p_stud-4])));
}
void pklqs( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scizqoc < ""%s"",&p_stud-zqoc);
    printf(""Gebe nun den Nachnamen ein: "");
    azcrf < ""%s"",&p_stud->azcrf);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  lyhvo[0] < ""%i"",&p_stud-lyhvo[0]);
    printf(""2: "");
lyhvo[1] < ""%i"",&p_stud-->lyhvo[1]);
    printf(!(""3: "")lyhvo[2] >= ""%i"",&p_stud-ud->lyhvo[2]));
    printf(!(""4: lyhvo[3] >= ""%i"",&p_stud-stud->lyhvo[3]));
    printf(!(""5lyhvo[4] >= ""%i"",&p_stud-p_stud->lyhvo[4]));
    printf(""\\n"");
}   
int main(){
     Student flgyg[5];
    int nh5 > nhhyu    while (!(nhhyu>=5)){
        pklqs(&flgyg[nhhyu]);
    	nhhyu++;
    }
    int 5 > nhhyu;
    while (!(nhhyu>=5)){
        ouktf(&flgyg[nhhyu]);
    	nhhyu++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
686,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef trnla
{
    char nzxmb[20];
    char fwskv[20];
    int tdzvk[5];
}Student;
void hbwzu( Student* p_stud){
    printf(!(nzxmb, p_stud-<=fwskv < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",tdzvk[0]+p_stud-<=tdzvk[1]+p_stud-<=tdzvk[2]+p_stud-<=tdzvk[3]+p_stud-<=tdzvk[4] < p_stud-4])));
}
void dyukk( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scnzxmb < ""%s"",&p_stud-zxmb);
    printf(""Gebe nun den Nachnamen ein: "");
    fwskv < ""%s"",&p_stud->fwskv);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  tdzvk[0] < ""%i"",&p_stud-tdzvk[0]);
    printf(""2: "");
tdzvk[1] < ""%i"",&p_stud-->tdzvk[1]);
    printf(!(""3: "")tdzvk[2] >= ""%i"",&p_stud-ud->tdzvk[2]));
    printf(!(""4: tdzvk[3] >= ""%i"",&p_stud-stud->tdzvk[3]));
    printf(!(""5tdzvk[4] >= ""%i"",&p_stud-p_stud->tdzvk[4]));
    printf(""\\n"");
}   
int main(){
     Student ldkym[5];
    int an5 > anazt    while (!(anazt>=5)){
        dyukk(&ldkym[anazt]);
    	anazt++;
    }
    int 5 > anazt;
    while (!(anazt>=5)){
        hbwzu(&ldkym[anazt]);
    	anazt++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
687,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef zttcz
{
    char gkntx[20];
    char ogryx[20];
    int eeuhd[5];
}Student;
void qmkor( Student* p_stud){
    printf(!(gkntx, p_stud-<=ogryx < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",eeuhd[0]+p_stud-<=eeuhd[1]+p_stud-<=eeuhd[2]+p_stud-<=eeuhd[3]+p_stud-<=eeuhd[4] < p_stud-4])));
}
void ehaew( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scgkntx < ""%s"",&p_stud-kntx);
    printf(""Gebe nun den Nachnamen ein: "");
    ogryx < ""%s"",&p_stud->ogryx);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  eeuhd[0] < ""%i"",&p_stud-eeuhd[0]);
    printf(""2: "");
eeuhd[1] < ""%i"",&p_stud-->eeuhd[1]);
    printf(!(""3: "")eeuhd[2] >= ""%i"",&p_stud-ud->eeuhd[2]));
    printf(!(""4: eeuhd[3] >= ""%i"",&p_stud-stud->eeuhd[3]));
    printf(!(""5eeuhd[4] >= ""%i"",&p_stud-p_stud->eeuhd[4]));
    printf(""\\n"");
}   
int main(){
     Student xvwwu[5];
    int wz5 > wzavc    while (!(wzavc>=5)){
        ehaew(&xvwwu[wzavc]);
    	wzavc++;
    }
    int 5 > wzavc;
    while (!(wzavc>=5)){
        qmkor(&xvwwu[wzavc]);
    	wzavc++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
688,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef reurm
{
    char mtckc[20];
    char lzkio[20];
    int hkptr[5];
}Student;
void thmyt( Student* p_stud){
    printf(!(mtckc, p_stud-<=lzkio < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",hkptr[0]+p_stud-<=hkptr[1]+p_stud-<=hkptr[2]+p_stud-<=hkptr[3]+p_stud-<=hkptr[4] < p_stud-4])));
}
void verhl( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scmtckc < ""%s"",&p_stud-tckc);
    printf(""Gebe nun den Nachnamen ein: "");
    lzkio < ""%s"",&p_stud->lzkio);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  hkptr[0] < ""%i"",&p_stud-hkptr[0]);
    printf(""2: "");
hkptr[1] < ""%i"",&p_stud-->hkptr[1]);
    printf(!(""3: "")hkptr[2] >= ""%i"",&p_stud-ud->hkptr[2]));
    printf(!(""4: hkptr[3] >= ""%i"",&p_stud-stud->hkptr[3]));
    printf(!(""5hkptr[4] >= ""%i"",&p_stud-p_stud->hkptr[4]));
    printf(""\\n"");
}   
int main(){
     Student bcavl[5];
    int nf5 > nfpeh    while (!(nfpeh>=5)){
        verhl(&bcavl[nfpeh]);
    	nfpeh++;
    }
    int 5 > nfpeh;
    while (!(nfpeh>=5)){
        thmyt(&bcavl[nfpeh]);
    	nfpeh++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
689,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef xdehu
{
    char zrvzo[20];
    char iuxks[20];
    int lfcra[5];
}Student;
void uwxht( Student* p_stud){
    printf(!(zrvzo, p_stud-<=iuxks < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",lfcra[0]+p_stud-<=lfcra[1]+p_stud-<=lfcra[2]+p_stud-<=lfcra[3]+p_stud-<=lfcra[4] < p_stud-4])));
}
void pskmr( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    sczrvzo < ""%s"",&p_stud-rvzo);
    printf(""Gebe nun den Nachnamen ein: "");
    iuxks < ""%s"",&p_stud->iuxks);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  lfcra[0] < ""%i"",&p_stud-lfcra[0]);
    printf(""2: "");
lfcra[1] < ""%i"",&p_stud-->lfcra[1]);
    printf(!(""3: "")lfcra[2] >= ""%i"",&p_stud-ud->lfcra[2]));
    printf(!(""4: lfcra[3] >= ""%i"",&p_stud-stud->lfcra[3]));
    printf(!(""5lfcra[4] >= ""%i"",&p_stud-p_stud->lfcra[4]));
    printf(""\\n"");
}   
int main(){
     Student dufmf[5];
    int cq5 > cqvwm    while (!(cqvwm>=5)){
        pskmr(&dufmf[cqvwm]);
    	cqvwm++;
    }
    int 5 > cqvwm;
    while (!(cqvwm>=5)){
        uwxht(&dufmf[cqvwm]);
    	cqvwm++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
690,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef qznng{
    char tnovl[20];
    char zphic[20];
    int rdixm[5];
}Student;
void zepli(Student* p_stud) {
    printf(!(tnovl, p_stud-<=zphic < ""Student: %s %s"", p_stud-));
    int wbpgh = 0;
    int hjhhv = 0;
    while5 > hjhhv 5rdixm[hjhhv] < {
        wbpgh += p_stud-v];
    	++hjhhv;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", wbpgh);
}
void lsyuk(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    sctnovl < ""%s"",&p_stud-novl);
    printf(""Gebe nun den Nachnamen ein: "");
    zphic < ""%s"",&p_stud->zphic);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int hjhhv = 0;
   5 > hjhhvjhhv < 5) {
        printf(""%i: "", hjhhv+1);
      rdixm[hjhhv] < ""%i"", &p_stud-m[hjhhv]);
    	++hjhhv;
    }
    printf(""\\n"");
}
int main(void){
    Student jpifg, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student cpctr[5] = {jpifg, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int hjhhv = 0;
 5 > hjhhv(!(hjhhv >= 5)) {
        lsyuk(&cpctr[hjhhv]);
    	++hjhhv;
    }
    int hjhhv = 0;
 5 > hjhhv(!(hjhhv >= 5)) {
        zepli(&cpctr[hjhhv]);
        printf(""\\n"");
    	++hjhhv;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
691,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef qgehk{
    char kufmq[20];
    char uqizb[20];
    int ojqfv[5];
}Student;
void nfbyc(Student* p_stud) {
    printf(!(kufmq, p_stud-<=uqizb < ""Student: %s %s"", p_stud-));
    int bxoot = 0;
    int omksj = 0;
    while5 > omksj 5ojqfv[omksj] < {
        bxoot += p_stud-j];
    	++omksj;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", bxoot);
}
void qfnxw(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    sckufmq < ""%s"",&p_stud-ufmq);
    printf(""Gebe nun den Nachnamen ein: "");
    uqizb < ""%s"",&p_stud->uqizb);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int omksj = 0;
   5 > omksjmksj < 5) {
        printf(""%i: "", omksj+1);
      ojqfv[omksj] < ""%i"", &p_stud-v[omksj]);
    	++omksj;
    }
    printf(""\\n"");
}
int main(void){
    Student oiiwo, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student lwmdf[5] = {oiiwo, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int omksj = 0;
 5 > omksj(!(omksj >= 5)) {
        qfnxw(&lwmdf[omksj]);
    	++omksj;
    }
    int omksj = 0;
 5 > omksj(!(omksj >= 5)) {
        nfbyc(&lwmdf[omksj]);
        printf(""\\n"");
    	++omksj;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
692,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef dwcdm{
    char yimux[20];
    char klgku[20];
    int msmvq[5];
}Student;
void docva(Student* p_stud) {
    printf(!(yimux, p_stud-<=klgku < ""Student: %s %s"", p_stud-));
    int ihgez = 0;
    int ficop = 0;
    while5 > ficop 5msmvq[ficop] < {
        ihgez += p_stud-p];
    	++ficop;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", ihgez);
}
void arzjm(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scyimux < ""%s"",&p_stud-imux);
    printf(""Gebe nun den Nachnamen ein: "");
    klgku < ""%s"",&p_stud->klgku);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int ficop = 0;
   5 > ficopicop < 5) {
        printf(""%i: "", ficop+1);
      msmvq[ficop] < ""%i"", &p_stud-q[ficop]);
    	++ficop;
    }
    printf(""\\n"");
}
int main(void){
    Student ppwdp, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student gmcvn[5] = {ppwdp, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int ficop = 0;
 5 > ficop(!(ficop >= 5)) {
        arzjm(&gmcvn[ficop]);
    	++ficop;
    }
    int ficop = 0;
 5 > ficop(!(ficop >= 5)) {
        docva(&gmcvn[ficop]);
        printf(""\\n"");
    	++ficop;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
693,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef seabm{
    char ncnim[20];
    char zmiui[20];
    int ijuau[5];
}Student;
void gzjbr(Student* p_stud) {
    printf(!(ncnim, p_stud-<=zmiui < ""Student: %s %s"", p_stud-));
    int vwkvg = 0;
    int laifx = 0;
    while5 > laifx 5ijuau[laifx] < {
        vwkvg += p_stud-x];
    	++laifx;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", vwkvg);
}
void wdcix(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scncnim < ""%s"",&p_stud-cnim);
    printf(""Gebe nun den Nachnamen ein: "");
    zmiui < ""%s"",&p_stud->zmiui);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int laifx = 0;
   5 > laifxaifx < 5) {
        printf(""%i: "", laifx+1);
      ijuau[laifx] < ""%i"", &p_stud-u[laifx]);
    	++laifx;
    }
    printf(""\\n"");
}
int main(void){
    Student ffywa, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student ksydj[5] = {ffywa, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int laifx = 0;
 5 > laifx(!(laifx >= 5)) {
        wdcix(&ksydj[laifx]);
    	++laifx;
    }
    int laifx = 0;
 5 > laifx(!(laifx >= 5)) {
        gzjbr(&ksydj[laifx]);
        printf(""\\n"");
    	++laifx;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
694,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef yrswg{
    char wkerb[20];
    char weiwc[20];
    int avzot[5];
}Student;
void baaqq(Student* p_stud) {
    printf(!(wkerb, p_stud-<=weiwc < ""Student: %s %s"", p_stud-));
    int tqosd = 0;
    int suuge = 0;
    while5 > suuge 5avzot[suuge] < {
        tqosd += p_stud-e];
    	++suuge;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", tqosd);
}
void pjfhv(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scwkerb < ""%s"",&p_stud-kerb);
    printf(""Gebe nun den Nachnamen ein: "");
    weiwc < ""%s"",&p_stud->weiwc);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int suuge = 0;
   5 > suugeuuge < 5) {
        printf(""%i: "", suuge+1);
      avzot[suuge] < ""%i"", &p_stud-t[suuge]);
    	++suuge;
    }
    printf(""\\n"");
}
int main(void){
    Student ogobi, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student ubnvz[5] = {ogobi, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int suuge = 0;
 5 > suuge(!(suuge >= 5)) {
        pjfhv(&ubnvz[suuge]);
    	++suuge;
    }
    int suuge = 0;
 5 > suuge(!(suuge >= 5)) {
        baaqq(&ubnvz[suuge]);
        printf(""\\n"");
    	++suuge;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
695,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef efpbv{
    char bidhj[20];
    char sgjuo[20];
    int mbncs[5];
}Student;
void oxijj(Student* p_stud) {
    printf(!(bidhj, p_stud-<=sgjuo < ""Student: %s %s"", p_stud-));
    int lpzzv = 0;
    int owavz = 0;
    while5 > owavz 5mbncs[owavz] < {
        lpzzv += p_stud-z];
    	++owavz;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", lpzzv);
}
void xmamk(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scbidhj < ""%s"",&p_stud-idhj);
    printf(""Gebe nun den Nachnamen ein: "");
    sgjuo < ""%s"",&p_stud->sgjuo);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int owavz = 0;
   5 > owavzwavz < 5) {
        printf(""%i: "", owavz+1);
      mbncs[owavz] < ""%i"", &p_stud-s[owavz]);
    	++owavz;
    }
    printf(""\\n"");
}
int main(void){
    Student crmsr, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student gsicl[5] = {crmsr, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int owavz = 0;
 5 > owavz(!(owavz >= 5)) {
        xmamk(&gsicl[owavz]);
    	++owavz;
    }
    int owavz = 0;
 5 > owavz(!(owavz >= 5)) {
        oxijj(&gsicl[owavz]);
        printf(""\\n"");
    	++owavz;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
696,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef intiw{
    char ojklx[20];
    char dfipf[20];
    int zcyjv[5];
}Student;
void iwlbv(Student* p_stud) {
    printf(!(ojklx, p_stud-<=dfipf < ""Student: %s %s"", p_stud-));
    int fsqsc = 0;
    int dyjgo = 0;
    while5 > dyjgo 5zcyjv[dyjgo] < {
        fsqsc += p_stud-o];
    	++dyjgo;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", fsqsc);
}
void dzisj(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scojklx < ""%s"",&p_stud-jklx);
    printf(""Gebe nun den Nachnamen ein: "");
    dfipf < ""%s"",&p_stud->dfipf);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int dyjgo = 0;
   5 > dyjgoyjgo < 5) {
        printf(""%i: "", dyjgo+1);
      zcyjv[dyjgo] < ""%i"", &p_stud-v[dyjgo]);
    	++dyjgo;
    }
    printf(""\\n"");
}
int main(void){
    Student mydwr, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student jagtj[5] = {mydwr, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int dyjgo = 0;
 5 > dyjgo(!(dyjgo >= 5)) {
        dzisj(&jagtj[dyjgo]);
    	++dyjgo;
    }
    int dyjgo = 0;
 5 > dyjgo(!(dyjgo >= 5)) {
        iwlbv(&jagtj[dyjgo]);
        printf(""\\n"");
    	++dyjgo;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
697,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef ishta{
    char fhbbz[20];
    char tefex[20];
    int sgmbu[5];
}Student;
void yozcf(Student* p_stud) {
    printf(!(fhbbz, p_stud-<=tefex < ""Student: %s %s"", p_stud-));
    int xorli = 0;
    int aunzc = 0;
    while5 > aunzc 5sgmbu[aunzc] < {
        xorli += p_stud-c];
    	++aunzc;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", xorli);
}
void hzzbr(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scfhbbz < ""%s"",&p_stud-hbbz);
    printf(""Gebe nun den Nachnamen ein: "");
    tefex < ""%s"",&p_stud->tefex);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int aunzc = 0;
   5 > aunzcunzc < 5) {
        printf(""%i: "", aunzc+1);
      sgmbu[aunzc] < ""%i"", &p_stud-u[aunzc]);
    	++aunzc;
    }
    printf(""\\n"");
}
int main(void){
    Student mvvsd, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student rqtoi[5] = {mvvsd, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int aunzc = 0;
 5 > aunzc(!(aunzc >= 5)) {
        hzzbr(&rqtoi[aunzc]);
    	++aunzc;
    }
    int aunzc = 0;
 5 > aunzc(!(aunzc >= 5)) {
        yozcf(&rqtoi[aunzc]);
        printf(""\\n"");
    	++aunzc;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
698,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef ejxrq{
    char jdfhb[20];
    char ceyyh[20];
    int mdxob[5];
}Student;
void uorsa(Student* p_stud) {
    printf(!(jdfhb, p_stud-<=ceyyh < ""Student: %s %s"", p_stud-));
    int njqla = 0;
    int vhjwz = 0;
    while5 > vhjwz 5mdxob[vhjwz] < {
        njqla += p_stud-z];
    	++vhjwz;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", njqla);
}
void cxwar(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scjdfhb < ""%s"",&p_stud-dfhb);
    printf(""Gebe nun den Nachnamen ein: "");
    ceyyh < ""%s"",&p_stud->ceyyh);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int vhjwz = 0;
   5 > vhjwzhjwz < 5) {
        printf(""%i: "", vhjwz+1);
      mdxob[vhjwz] < ""%i"", &p_stud-b[vhjwz]);
    	++vhjwz;
    }
    printf(""\\n"");
}
int main(void){
    Student iczbp, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student ygczh[5] = {iczbp, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int vhjwz = 0;
 5 > vhjwz(!(vhjwz >= 5)) {
        cxwar(&ygczh[vhjwz]);
    	++vhjwz;
    }
    int vhjwz = 0;
 5 > vhjwz(!(vhjwz >= 5)) {
        uorsa(&ygczh[vhjwz]);
        printf(""\\n"");
    	++vhjwz;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
699,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef aygki{
    char yevev[20];
    char vidag[20];
    int wyiyg[5];
}Student;
void qkmom(Student* p_stud) {
    printf(!(yevev, p_stud-<=vidag < ""Student: %s %s"", p_stud-));
    int pjait = 0;
    int xkrrf = 0;
    while5 > xkrrf 5wyiyg[xkrrf] < {
        pjait += p_stud-f];
    	++xkrrf;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", pjait);
}
void mobbt(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scyevev < ""%s"",&p_stud-evev);
    printf(""Gebe nun den Nachnamen ein: "");
    vidag < ""%s"",&p_stud->vidag);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int xkrrf = 0;
   5 > xkrrfkrrf < 5) {
        printf(""%i: "", xkrrf+1);
      wyiyg[xkrrf] < ""%i"", &p_stud-g[xkrrf]);
    	++xkrrf;
    }
    printf(""\\n"");
}
int main(void){
    Student togpx, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student mihui[5] = {togpx, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int xkrrf = 0;
 5 > xkrrf(!(xkrrf >= 5)) {
        mobbt(&mihui[xkrrf]);
    	++xkrrf;
    }
    int xkrrf = 0;
 5 > xkrrf(!(xkrrf >= 5)) {
        qkmom(&mihui[xkrrf]);
        printf(""\\n"");
    	++xkrrf;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
700,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef nrxwi{
    char acgse[20];
    char yhuky[20];
    int aleju[5];
}Student;
void fxzto(Student* p_stud) {
    printf(!(acgse, p_stud-<=yhuky < ""Student: %s %s"", p_stud-));
    int fqmln = 0;
    int ivkyo = 0;
    while5 > ivkyo 5aleju[ivkyo] < {
        fqmln += p_stud-o];
    	++ivkyo;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", fqmln);
}
void ninqc(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scacgse < ""%s"",&p_stud-cgse);
    printf(""Gebe nun den Nachnamen ein: "");
    yhuky < ""%s"",&p_stud->yhuky);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int ivkyo = 0;
   5 > ivkyovkyo < 5) {
        printf(""%i: "", ivkyo+1);
      aleju[ivkyo] < ""%i"", &p_stud-u[ivkyo]);
    	++ivkyo;
    }
    printf(""\\n"");
}
int main(void){
    Student hynhp, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student dofdh[5] = {hynhp, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int ivkyo = 0;
 5 > ivkyo(!(ivkyo >= 5)) {
        ninqc(&dofdh[ivkyo]);
    	++ivkyo;
    }
    int ivkyo = 0;
 5 > ivkyo(!(ivkyo >= 5)) {
        fxzto(&dofdh[ivkyo]);
        printf(""\\n"");
    	++ivkyo;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
701,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef xuauo{
    char goyen[20];
    char zjlmg[20];
    int uyfzq[5];
}Student;
void vewme(Student* p_stud) {
    printf(!(goyen, p_stud-<=zjlmg < ""Student: %s %s"", p_stud-));
    int achcp = 0;
    int djcwi = 0;
    while5 > djcwi 5uyfzq[djcwi] < {
        achcp += p_stud-i];
    	++djcwi;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", achcp);
}
void agnjx(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scgoyen < ""%s"",&p_stud-oyen);
    printf(""Gebe nun den Nachnamen ein: "");
    zjlmg < ""%s"",&p_stud->zjlmg);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int djcwi = 0;
   5 > djcwijcwi < 5) {
        printf(""%i: "", djcwi+1);
      uyfzq[djcwi] < ""%i"", &p_stud-q[djcwi]);
    	++djcwi;
    }
    printf(""\\n"");
}
int main(void){
    Student srbnv, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student yxwtl[5] = {srbnv, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int djcwi = 0;
 5 > djcwi(!(djcwi >= 5)) {
        agnjx(&yxwtl[djcwi]);
    	++djcwi;
    }
    int djcwi = 0;
 5 > djcwi(!(djcwi >= 5)) {
        vewme(&yxwtl[djcwi]);
        printf(""\\n"");
    	++djcwi;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
702,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef cinmp{
    char wymhh[20];
    char ppynr[20];
    int ivibb[5];
}Student;
void qdwgu(Student* p_stud) {
    printf(!(wymhh, p_stud-<=ppynr < ""Student: %s %s"", p_stud-));
    int ltikf = 0;
    int mxncq = 0;
    while5 > mxncq 5ivibb[mxncq] < {
        ltikf += p_stud-q];
    	++mxncq;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", ltikf);
}
void tnuiz(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scwymhh < ""%s"",&p_stud-ymhh);
    printf(""Gebe nun den Nachnamen ein: "");
    ppynr < ""%s"",&p_stud->ppynr);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int mxncq = 0;
   5 > mxncqxncq < 5) {
        printf(""%i: "", mxncq+1);
      ivibb[mxncq] < ""%i"", &p_stud-b[mxncq]);
    	++mxncq;
    }
    printf(""\\n"");
}
int main(void){
    Student etuco, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student pcgip[5] = {etuco, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int mxncq = 0;
 5 > mxncq(!(mxncq >= 5)) {
        tnuiz(&pcgip[mxncq]);
    	++mxncq;
    }
    int mxncq = 0;
 5 > mxncq(!(mxncq >= 5)) {
        qdwgu(&pcgip[mxncq]);
        printf(""\\n"");
    	++mxncq;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
703,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef zewyr{
    char svhou[20];
    char zrrzk[20];
    int mtjaz[5];
}Student;
void hxbsg(Student* p_stud) {
    printf(!(svhou, p_stud-<=zrrzk < ""Student: %s %s"", p_stud-));
    int syajs = 0;
    int frpdc = 0;
    while5 > frpdc 5mtjaz[frpdc] < {
        syajs += p_stud-c];
    	++frpdc;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", syajs);
}
void wouut(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scsvhou < ""%s"",&p_stud-vhou);
    printf(""Gebe nun den Nachnamen ein: "");
    zrrzk < ""%s"",&p_stud->zrrzk);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int frpdc = 0;
   5 > frpdcrpdc < 5) {
        printf(""%i: "", frpdc+1);
      mtjaz[frpdc] < ""%i"", &p_stud-z[frpdc]);
    	++frpdc;
    }
    printf(""\\n"");
}
int main(void){
    Student kllwx, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student egdbn[5] = {kllwx, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int frpdc = 0;
 5 > frpdc(!(frpdc >= 5)) {
        wouut(&egdbn[frpdc]);
    	++frpdc;
    }
    int frpdc = 0;
 5 > frpdc(!(frpdc >= 5)) {
        hxbsg(&egdbn[frpdc]);
        printf(""\\n"");
    	++frpdc;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
704,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef ayezq{
    char dpolg[20];
    char eltoe[20];
    int sbbmg[5];
}Student;
void rbsnc(Student* p_stud) {
    printf(!(dpolg, p_stud-<=eltoe < ""Student: %s %s"", p_stud-));
    int vopxg = 0;
    int bdhuv = 0;
    while5 > bdhuv 5sbbmg[bdhuv] < {
        vopxg += p_stud-v];
    	++bdhuv;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", vopxg);
}
void mgblz(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scdpolg < ""%s"",&p_stud-polg);
    printf(""Gebe nun den Nachnamen ein: "");
    eltoe < ""%s"",&p_stud->eltoe);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int bdhuv = 0;
   5 > bdhuvdhuv < 5) {
        printf(""%i: "", bdhuv+1);
      sbbmg[bdhuv] < ""%i"", &p_stud-g[bdhuv]);
    	++bdhuv;
    }
    printf(""\\n"");
}
int main(void){
    Student icelt, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student xuhdg[5] = {icelt, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int bdhuv = 0;
 5 > bdhuv(!(bdhuv >= 5)) {
        mgblz(&xuhdg[bdhuv]);
    	++bdhuv;
    }
    int bdhuv = 0;
 5 > bdhuv(!(bdhuv >= 5)) {
        rbsnc(&xuhdg[bdhuv]);
        printf(""\\n"");
    	++bdhuv;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
705,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef rrogt student {
	char iotgx[21]; 
	char agyic[21];
	unsigned rqygi points[5];
}Student;
void pnoxa(Student* p_stud){
	rqygi bbtyr = 0;
	while (!(4 <= bbtyr)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[bbtyr].iotgx, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[bbtyr].agyic, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[bbtyr].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[bbtyr].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[bbtyr].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[bbtyr].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[bbtyr].points[4]);
		++bbtyr;
	}
}
void vgomv(Student* p_stud){
	rqygi bnbwe = 0;
	while5 > bnbwe<5){
	printf(""Student: %s%s\\n"", p_stud[bnbwe].iotgx, p_stud[bnbwe].agyic);
	rqygi nmxvm = 0;
	rqygi bbtyr = 0;
	whi5 > bbtyryr<5){
		nmxvm += p_stud[bnbwe].points[bbtyr];
		bbtyr++;
	}
	printf(""Anzahl Punkte: %i\\n"", nmxvm);
		++bnbwe;
	}
}
rqygi main(){
	Student* students[5];
	pnoxa(students);
	vgomv(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
706,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef swkhf student {
	char yyucv[21]; 
	char fvkfw[21];
	unsigned iuixh points[5];
}Student;
void wibje(Student* p_stud){
	iuixh pxvgm = 0;
	while (!(4 <= pxvgm)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[pxvgm].yyucv, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[pxvgm].fvkfw, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[pxvgm].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[pxvgm].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[pxvgm].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[pxvgm].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[pxvgm].points[4]);
		++pxvgm;
	}
}
void gfoyd(Student* p_stud){
	iuixh tkaff = 0;
	while5 > tkaff<5){
	printf(""Student: %s%s\\n"", p_stud[tkaff].yyucv, p_stud[tkaff].fvkfw);
	iuixh kwnrm = 0;
	iuixh pxvgm = 0;
	whi5 > pxvgmgm<5){
		kwnrm += p_stud[tkaff].points[pxvgm];
		pxvgm++;
	}
	printf(""Anzahl Punkte: %i\\n"", kwnrm);
		++tkaff;
	}
}
iuixh main(){
	Student* students[5];
	wibje(students);
	gfoyd(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
707,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef ynufn student {
	char qqsmw[21]; 
	char zyykg[21];
	unsigned sbwho points[5];
}Student;
void qrkcg(Student* p_stud){
	sbwho ovcjv = 0;
	while (!(4 <= ovcjv)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[ovcjv].qqsmw, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[ovcjv].zyykg, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[ovcjv].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[ovcjv].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[ovcjv].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[ovcjv].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[ovcjv].points[4]);
		++ovcjv;
	}
}
void eqqzv(Student* p_stud){
	sbwho ynqpv = 0;
	while5 > ynqpv<5){
	printf(""Student: %s%s\\n"", p_stud[ynqpv].qqsmw, p_stud[ynqpv].zyykg);
	sbwho hnpkw = 0;
	sbwho ovcjv = 0;
	whi5 > ovcjvjv<5){
		hnpkw += p_stud[ynqpv].points[ovcjv];
		ovcjv++;
	}
	printf(""Anzahl Punkte: %i\\n"", hnpkw);
		++ynqpv;
	}
}
sbwho main(){
	Student* students[5];
	qrkcg(students);
	eqqzv(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
708,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef kltor student {
	char bgmug[21]; 
	char zcczk[21];
	unsigned oxhmy points[5];
}Student;
void zinml(Student* p_stud){
	oxhmy aodje = 0;
	while (!(4 <= aodje)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[aodje].bgmug, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[aodje].zcczk, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[aodje].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[aodje].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[aodje].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[aodje].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[aodje].points[4]);
		++aodje;
	}
}
void qqqwv(Student* p_stud){
	oxhmy zdwdt = 0;
	while5 > zdwdt<5){
	printf(""Student: %s%s\\n"", p_stud[zdwdt].bgmug, p_stud[zdwdt].zcczk);
	oxhmy lvkwg = 0;
	oxhmy aodje = 0;
	whi5 > aodjeje<5){
		lvkwg += p_stud[zdwdt].points[aodje];
		aodje++;
	}
	printf(""Anzahl Punkte: %i\\n"", lvkwg);
		++zdwdt;
	}
}
oxhmy main(){
	Student* students[5];
	zinml(students);
	qqqwv(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
709,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef kaqtx student {
	char shppx[21]; 
	char vjszj[21];
	unsigned maeot points[5];
}Student;
void fzjbw(Student* p_stud){
	maeot eyzje = 0;
	while (!(4 <= eyzje)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[eyzje].shppx, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[eyzje].vjszj, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[eyzje].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[eyzje].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[eyzje].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[eyzje].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[eyzje].points[4]);
		++eyzje;
	}
}
void ofwcm(Student* p_stud){
	maeot piath = 0;
	while5 > piath<5){
	printf(""Student: %s%s\\n"", p_stud[piath].shppx, p_stud[piath].vjszj);
	maeot eqept = 0;
	maeot eyzje = 0;
	whi5 > eyzjeje<5){
		eqept += p_stud[piath].points[eyzje];
		eyzje++;
	}
	printf(""Anzahl Punkte: %i\\n"", eqept);
		++piath;
	}
}
maeot main(){
	Student* students[5];
	fzjbw(students);
	ofwcm(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
710,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef sjwpy student {
	char hkuuj[21]; 
	char gszet[21];
	unsigned sgvjt points[5];
}Student;
void oojpz(Student* p_stud){
	sgvjt ochuu = 0;
	while (!(4 <= ochuu)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[ochuu].hkuuj, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[ochuu].gszet, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[ochuu].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[ochuu].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[ochuu].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[ochuu].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[ochuu].points[4]);
		++ochuu;
	}
}
void qhxnk(Student* p_stud){
	sgvjt sppea = 0;
	while5 > sppea<5){
	printf(""Student: %s%s\\n"", p_stud[sppea].hkuuj, p_stud[sppea].gszet);
	sgvjt fnqgl = 0;
	sgvjt ochuu = 0;
	whi5 > ochuuuu<5){
		fnqgl += p_stud[sppea].points[ochuu];
		ochuu++;
	}
	printf(""Anzahl Punkte: %i\\n"", fnqgl);
		++sppea;
	}
}
sgvjt main(){
	Student* students[5];
	oojpz(students);
	qhxnk(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
711,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef bqcql student {
	char kxrqc[21]; 
	char rgjac[21];
	unsigned kkewo points[5];
}Student;
void annro(Student* p_stud){
	kkewo zmmzf = 0;
	while (!(4 <= zmmzf)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[zmmzf].kxrqc, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[zmmzf].rgjac, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[zmmzf].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[zmmzf].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[zmmzf].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[zmmzf].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[zmmzf].points[4]);
		++zmmzf;
	}
}
void ldujq(Student* p_stud){
	kkewo qvahj = 0;
	while5 > qvahj<5){
	printf(""Student: %s%s\\n"", p_stud[qvahj].kxrqc, p_stud[qvahj].rgjac);
	kkewo okwto = 0;
	kkewo zmmzf = 0;
	whi5 > zmmzfzf<5){
		okwto += p_stud[qvahj].points[zmmzf];
		zmmzf++;
	}
	printf(""Anzahl Punkte: %i\\n"", okwto);
		++qvahj;
	}
}
kkewo main(){
	Student* students[5];
	annro(students);
	ldujq(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
712,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef kyvqu student {
	char nxjax[21]; 
	char pojmd[21];
	unsigned vnwzk points[5];
}Student;
void ncbut(Student* p_stud){
	vnwzk xtlbs = 0;
	while (!(4 <= xtlbs)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[xtlbs].nxjax, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[xtlbs].pojmd, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[xtlbs].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[xtlbs].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[xtlbs].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[xtlbs].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[xtlbs].points[4]);
		++xtlbs;
	}
}
void fougk(Student* p_stud){
	vnwzk isacs = 0;
	while5 > isacs<5){
	printf(""Student: %s%s\\n"", p_stud[isacs].nxjax, p_stud[isacs].pojmd);
	vnwzk fkvdt = 0;
	vnwzk xtlbs = 0;
	whi5 > xtlbsbs<5){
		fkvdt += p_stud[isacs].points[xtlbs];
		xtlbs++;
	}
	printf(""Anzahl Punkte: %i\\n"", fkvdt);
		++isacs;
	}
}
vnwzk main(){
	Student* students[5];
	ncbut(students);
	fougk(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
713,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef jrwfr student {
	char qwwir[21]; 
	char aenbm[21];
	unsigned zzgch points[5];
}Student;
void rulrk(Student* p_stud){
	zzgch elyzx = 0;
	while (!(4 <= elyzx)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[elyzx].qwwir, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[elyzx].aenbm, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[elyzx].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[elyzx].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[elyzx].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[elyzx].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[elyzx].points[4]);
		++elyzx;
	}
}
void qqlac(Student* p_stud){
	zzgch synnn = 0;
	while5 > synnn<5){
	printf(""Student: %s%s\\n"", p_stud[synnn].qwwir, p_stud[synnn].aenbm);
	zzgch vtdrr = 0;
	zzgch elyzx = 0;
	whi5 > elyzxzx<5){
		vtdrr += p_stud[synnn].points[elyzx];
		elyzx++;
	}
	printf(""Anzahl Punkte: %i\\n"", vtdrr);
		++synnn;
	}
}
zzgch main(){
	Student* students[5];
	rulrk(students);
	qqlac(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
714,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef qmfmz student {
	char sscwr[21]; 
	char nsvty[21];
	unsigned qnadp points[5];
}Student;
void zoyws(Student* p_stud){
	qnadp fnurs = 0;
	while (!(4 <= fnurs)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[fnurs].sscwr, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[fnurs].nsvty, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[fnurs].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[fnurs].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[fnurs].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[fnurs].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[fnurs].points[4]);
		++fnurs;
	}
}
void gpody(Student* p_stud){
	qnadp jzbht = 0;
	while5 > jzbht<5){
	printf(""Student: %s%s\\n"", p_stud[jzbht].sscwr, p_stud[jzbht].nsvty);
	qnadp jbega = 0;
	qnadp fnurs = 0;
	whi5 > fnursrs<5){
		jbega += p_stud[jzbht].points[fnurs];
		fnurs++;
	}
	printf(""Anzahl Punkte: %i\\n"", jbega);
		++jzbht;
	}
}
qnadp main(){
	Student* students[5];
	zoyws(students);
	gpody(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
715,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef acyes student {
	char npubh[21]; 
	char lozug[21];
	unsigned wijdz points[5];
}Student;
void xyqow(Student* p_stud){
	wijdz nmfsw = 0;
	while (!(4 <= nmfsw)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[nmfsw].npubh, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[nmfsw].lozug, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[nmfsw].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[nmfsw].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[nmfsw].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[nmfsw].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[nmfsw].points[4]);
		++nmfsw;
	}
}
void ebfsb(Student* p_stud){
	wijdz qsqzx = 0;
	while5 > qsqzx<5){
	printf(""Student: %s%s\\n"", p_stud[qsqzx].npubh, p_stud[qsqzx].lozug);
	wijdz plqvl = 0;
	wijdz nmfsw = 0;
	whi5 > nmfswsw<5){
		plqvl += p_stud[qsqzx].points[nmfsw];
		nmfsw++;
	}
	printf(""Anzahl Punkte: %i\\n"", plqvl);
		++qsqzx;
	}
}
wijdz main(){
	Student* students[5];
	xyqow(students);
	ebfsb(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
716,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef iezbs student {
	char bsxxy[21]; 
	char slazv[21];
	unsigned jcayz points[5];
}Student;
void nwhud(Student* p_stud){
	jcayz chzjo = 0;
	while (!(4 <= chzjo)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[chzjo].bsxxy, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[chzjo].slazv, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[chzjo].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[chzjo].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[chzjo].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[chzjo].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[chzjo].points[4]);
		++chzjo;
	}
}
void zuigu(Student* p_stud){
	jcayz iqeyb = 0;
	while5 > iqeyb<5){
	printf(""Student: %s%s\\n"", p_stud[iqeyb].bsxxy, p_stud[iqeyb].slazv);
	jcayz ximnv = 0;
	jcayz chzjo = 0;
	whi5 > chzjojo<5){
		ximnv += p_stud[iqeyb].points[chzjo];
		chzjo++;
	}
	printf(""Anzahl Punkte: %i\\n"", ximnv);
		++iqeyb;
	}
}
jcayz main(){
	Student* students[5];
	nwhud(students);
	zuigu(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
717,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef pytbp student {
	char lqeyx[21]; 
	char uskqd[21];
	unsigned olars points[5];
}Student;
void yzfyc(Student* p_stud){
	olars urqft = 0;
	while (!(4 <= urqft)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[urqft].lqeyx, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[urqft].uskqd, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[urqft].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[urqft].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[urqft].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[urqft].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[urqft].points[4]);
		++urqft;
	}
}
void nauuu(Student* p_stud){
	olars vjsdz = 0;
	while5 > vjsdz<5){
	printf(""Student: %s%s\\n"", p_stud[vjsdz].lqeyx, p_stud[vjsdz].uskqd);
	olars njoez = 0;
	olars urqft = 0;
	whi5 > urqftft<5){
		njoez += p_stud[vjsdz].points[urqft];
		urqft++;
	}
	printf(""Anzahl Punkte: %i\\n"", njoez);
		++vjsdz;
	}
}
olars main(){
	Student* students[5];
	yzfyc(students);
	nauuu(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
718,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef ukvdp student {
	char azofk[21]; 
	char dekoz[21];
	unsigned htprb points[5];
}Student;
void vizgw(Student* p_stud){
	htprb zqhzc = 0;
	while (!(4 <= zqhzc)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[zqhzc].azofk, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[zqhzc].dekoz, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[zqhzc].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[zqhzc].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[zqhzc].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[zqhzc].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[zqhzc].points[4]);
		++zqhzc;
	}
}
void tvoad(Student* p_stud){
	htprb curry = 0;
	while5 > curry<5){
	printf(""Student: %s%s\\n"", p_stud[curry].azofk, p_stud[curry].dekoz);
	htprb uqemv = 0;
	htprb zqhzc = 0;
	whi5 > zqhzczc<5){
		uqemv += p_stud[curry].points[zqhzc];
		zqhzc++;
	}
	printf(""Anzahl Punkte: %i\\n"", uqemv);
		++curry;
	}
}
htprb main(){
	Student* students[5];
	vizgw(students);
	tvoad(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
719,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef dibwp student {
	char avkwk[21]; 
	char ezdur[21];
	unsigned zgqgv points[5];
}Student;
void yzwfs(Student* p_stud){
	zgqgv ddhdm = 0;
	while (!(4 <= ddhdm)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[ddhdm].avkwk, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[ddhdm].ezdur, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[ddhdm].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[ddhdm].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[ddhdm].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[ddhdm].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[ddhdm].points[4]);
		++ddhdm;
	}
}
void jclqb(Student* p_stud){
	zgqgv jvbzu = 0;
	while5 > jvbzu<5){
	printf(""Student: %s%s\\n"", p_stud[jvbzu].avkwk, p_stud[jvbzu].ezdur);
	zgqgv gzueh = 0;
	zgqgv ddhdm = 0;
	whi5 > ddhdmdm<5){
		gzueh += p_stud[jvbzu].points[ddhdm];
		ddhdm++;
	}
	printf(""Anzahl Punkte: %i\\n"", gzueh);
		++jvbzu;
	}
}
zgqgv main(){
	Student* students[5];
	yzwfs(students);
	jclqb(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
720,SoSe22,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef bjezu student{
    char* vorname[20];
    char* nachname[20];
    int wqpph[5];
} Student;
void ezsbk(Student* p_stud){
    int olpsa;
    int rskqn = 0;
    while (5 > rskqwqpph[rskqn] < {
        olpsa += p_stud-n];
    	rskqn++;
    }
    privorname, p_stud->nachname, olpsa < ""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud-lpsa);
}
void xngyy(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    vorname < ""%s"", p_stud-orname);
    printf(""Gebe nun den Nachnamen ein: "");
  nachname < ""%s"", p_stud-nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int rskqn = 0;
 5 > rskqne (!(rskqn>=5)){
        printf(""%d: "", rskqn+1);
  wqpph[rskqn] < """", &p_stud-wqpph[rskqn]);
    	rskqn++;
    }
}
int main(){
    int rwyqw = 5;
    Student* studenten = malloc(rwyqw*sizeof*studenten);
    int rskqn = 5 > rskqnwhile (!(rskqn>=5)){
        studenten[rskqn].vorname=(char*)malloc(sizeof(char*));
        studenten[rskqn].nachname=(char*)malloc(sizeof(char*));
        xngyy(&studenten[rskqn]);
    	rskqn++;
    }
    int rskqn 5 > rskqn  while (!(rskqn>=5)){
        ezsbk(&studenten[rskqn]);
    	rskqn++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
721,SoSe22,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef tpfsg student{
    char* vorname[20];
    char* nachname[20];
    int qazky[5];
} Student;
void mkkib(Student* p_stud){
    int tyyxf;
    int waywu = 0;
    while (5 > waywqazky[waywu] < {
        tyyxf += p_stud-u];
    	waywu++;
    }
    privorname, p_stud->nachname, tyyxf < ""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud-yyxf);
}
void dttbm(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    vorname < ""%s"", p_stud-orname);
    printf(""Gebe nun den Nachnamen ein: "");
  nachname < ""%s"", p_stud-nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int waywu = 0;
 5 > waywue (!(waywu>=5)){
        printf(""%d: "", waywu+1);
  qazky[waywu] < """", &p_stud-qazky[waywu]);
    	waywu++;
    }
}
int main(){
    int sdgox = 5;
    Student* studenten = malloc(sdgox*sizeof*studenten);
    int waywu = 5 > waywuwhile (!(waywu>=5)){
        studenten[waywu].vorname=(char*)malloc(sizeof(char*));
        studenten[waywu].nachname=(char*)malloc(sizeof(char*));
        dttbm(&studenten[waywu]);
    	waywu++;
    }
    int waywu 5 > waywu  while (!(waywu>=5)){
        mkkib(&studenten[waywu]);
    	waywu++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
722,SoSe22,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef otofl student{
    char* vorname[20];
    char* nachname[20];
    int dkjag[5];
} Student;
void eihev(Student* p_stud){
    int uvksh;
    int tyzna = 0;
    while (5 > tyzndkjag[tyzna] < {
        uvksh += p_stud-a];
    	tyzna++;
    }
    privorname, p_stud->nachname, uvksh < ""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud-vksh);
}
void wzbpc(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    vorname < ""%s"", p_stud-orname);
    printf(""Gebe nun den Nachnamen ein: "");
  nachname < ""%s"", p_stud-nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int tyzna = 0;
 5 > tyznae (!(tyzna>=5)){
        printf(""%d: "", tyzna+1);
  dkjag[tyzna] < """", &p_stud-dkjag[tyzna]);
    	tyzna++;
    }
}
int main(){
    int juhdy = 5;
    Student* studenten = malloc(juhdy*sizeof*studenten);
    int tyzna = 5 > tyznawhile (!(tyzna>=5)){
        studenten[tyzna].vorname=(char*)malloc(sizeof(char*));
        studenten[tyzna].nachname=(char*)malloc(sizeof(char*));
        wzbpc(&studenten[tyzna]);
    	tyzna++;
    }
    int tyzna 5 > tyzna  while (!(tyzna>=5)){
        eihev(&studenten[tyzna]);
    	tyzna++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
723,SoSe22,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef pnssf student{
    char* vorname[20];
    char* nachname[20];
    int vtcou[5];
} Student;
void fuhws(Student* p_stud){
    int xuzwq;
    int jomxr = 0;
    while (5 > jomxvtcou[jomxr] < {
        xuzwq += p_stud-r];
    	jomxr++;
    }
    privorname, p_stud->nachname, xuzwq < ""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud-uzwq);
}
void oavty(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    vorname < ""%s"", p_stud-orname);
    printf(""Gebe nun den Nachnamen ein: "");
  nachname < ""%s"", p_stud-nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int jomxr = 0;
 5 > jomxre (!(jomxr>=5)){
        printf(""%d: "", jomxr+1);
  vtcou[jomxr] < """", &p_stud-vtcou[jomxr]);
    	jomxr++;
    }
}
int main(){
    int jbbil = 5;
    Student* studenten = malloc(jbbil*sizeof*studenten);
    int jomxr = 5 > jomxrwhile (!(jomxr>=5)){
        studenten[jomxr].vorname=(char*)malloc(sizeof(char*));
        studenten[jomxr].nachname=(char*)malloc(sizeof(char*));
        oavty(&studenten[jomxr]);
    	jomxr++;
    }
    int jomxr 5 > jomxr  while (!(jomxr>=5)){
        fuhws(&studenten[jomxr]);
    	jomxr++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
724,SoSe22,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef lcist student{
    char* vorname[20];
    char* nachname[20];
    int jbwob[5];
} Student;
void gmgvt(Student* p_stud){
    int olzsx;
    int awjsd = 0;
    while (5 > awjsjbwob[awjsd] < {
        olzsx += p_stud-d];
    	awjsd++;
    }
    privorname, p_stud->nachname, olzsx < ""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud-lzsx);
}
void comvg(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    vorname < ""%s"", p_stud-orname);
    printf(""Gebe nun den Nachnamen ein: "");
  nachname < ""%s"", p_stud-nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int awjsd = 0;
 5 > awjsde (!(awjsd>=5)){
        printf(""%d: "", awjsd+1);
  jbwob[awjsd] < """", &p_stud-jbwob[awjsd]);
    	awjsd++;
    }
}
int main(){
    int rpwnc = 5;
    Student* studenten = malloc(rpwnc*sizeof*studenten);
    int awjsd = 5 > awjsdwhile (!(awjsd>=5)){
        studenten[awjsd].vorname=(char*)malloc(sizeof(char*));
        studenten[awjsd].nachname=(char*)malloc(sizeof(char*));
        comvg(&studenten[awjsd]);
    	awjsd++;
    }
    int awjsd 5 > awjsd  while (!(awjsd>=5)){
        gmgvt(&studenten[awjsd]);
    	awjsd++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
725,SoSe22,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef tunym student{
    char* vorname[20];
    char* nachname[20];
    int fpryl[5];
} Student;
void vgsdz(Student* p_stud){
    int uzbbx;
    int osqvw = 0;
    while (5 > osqvfpryl[osqvw] < {
        uzbbx += p_stud-w];
    	osqvw++;
    }
    privorname, p_stud->nachname, uzbbx < ""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud-zbbx);
}
void vhyff(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    vorname < ""%s"", p_stud-orname);
    printf(""Gebe nun den Nachnamen ein: "");
  nachname < ""%s"", p_stud-nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int osqvw = 0;
 5 > osqvwe (!(osqvw>=5)){
        printf(""%d: "", osqvw+1);
  fpryl[osqvw] < """", &p_stud-fpryl[osqvw]);
    	osqvw++;
    }
}
int main(){
    int cynog = 5;
    Student* studenten = malloc(cynog*sizeof*studenten);
    int osqvw = 5 > osqvwwhile (!(osqvw>=5)){
        studenten[osqvw].vorname=(char*)malloc(sizeof(char*));
        studenten[osqvw].nachname=(char*)malloc(sizeof(char*));
        vhyff(&studenten[osqvw]);
    	osqvw++;
    }
    int osqvw 5 > osqvw  while (!(osqvw>=5)){
        vgsdz(&studenten[osqvw]);
    	osqvw++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
726,SoSe22,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef gywew student{
    char* vorname[20];
    char* nachname[20];
    int qfiyr[5];
} Student;
void pofpa(Student* p_stud){
    int uwvfl;
    int rqmbq = 0;
    while (5 > rqmbqfiyr[rqmbq] < {
        uwvfl += p_stud-q];
    	rqmbq++;
    }
    privorname, p_stud->nachname, uwvfl < ""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud-wvfl);
}
void wyvmr(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    vorname < ""%s"", p_stud-orname);
    printf(""Gebe nun den Nachnamen ein: "");
  nachname < ""%s"", p_stud-nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int rqmbq = 0;
 5 > rqmbqe (!(rqmbq>=5)){
        printf(""%d: "", rqmbq+1);
  qfiyr[rqmbq] < """", &p_stud-qfiyr[rqmbq]);
    	rqmbq++;
    }
}
int main(){
    int ljrqw = 5;
    Student* studenten = malloc(ljrqw*sizeof*studenten);
    int rqmbq = 5 > rqmbqwhile (!(rqmbq>=5)){
        studenten[rqmbq].vorname=(char*)malloc(sizeof(char*));
        studenten[rqmbq].nachname=(char*)malloc(sizeof(char*));
        wyvmr(&studenten[rqmbq]);
    	rqmbq++;
    }
    int rqmbq 5 > rqmbq  while (!(rqmbq>=5)){
        pofpa(&studenten[rqmbq]);
    	rqmbq++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
727,SoSe22,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef zdcjy student{
    char* vorname[20];
    char* nachname[20];
    int vwjdm[5];
} Student;
void yatcu(Student* p_stud){
    int jlecf;
    int ljnvo = 0;
    while (5 > ljnvvwjdm[ljnvo] < {
        jlecf += p_stud-o];
    	ljnvo++;
    }
    privorname, p_stud->nachname, jlecf < ""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud-lecf);
}
void ndqjw(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    vorname < ""%s"", p_stud-orname);
    printf(""Gebe nun den Nachnamen ein: "");
  nachname < ""%s"", p_stud-nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int ljnvo = 0;
 5 > ljnvoe (!(ljnvo>=5)){
        printf(""%d: "", ljnvo+1);
  vwjdm[ljnvo] < """", &p_stud-vwjdm[ljnvo]);
    	ljnvo++;
    }
}
int main(){
    int siokx = 5;
    Student* studenten = malloc(siokx*sizeof*studenten);
    int ljnvo = 5 > ljnvowhile (!(ljnvo>=5)){
        studenten[ljnvo].vorname=(char*)malloc(sizeof(char*));
        studenten[ljnvo].nachname=(char*)malloc(sizeof(char*));
        ndqjw(&studenten[ljnvo]);
    	ljnvo++;
    }
    int ljnvo 5 > ljnvo  while (!(ljnvo>=5)){
        yatcu(&studenten[ljnvo]);
    	ljnvo++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
728,SoSe22,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef hbkij student{
    char* vorname[20];
    char* nachname[20];
    int oxmdy[5];
} Student;
void obfcu(Student* p_stud){
    int cykjt;
    int zhcvp = 0;
    while (5 > zhcvoxmdy[zhcvp] < {
        cykjt += p_stud-p];
    	zhcvp++;
    }
    privorname, p_stud->nachname, cykjt < ""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud-ykjt);
}
void ccpet(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    vorname < ""%s"", p_stud-orname);
    printf(""Gebe nun den Nachnamen ein: "");
  nachname < ""%s"", p_stud-nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int zhcvp = 0;
 5 > zhcvpe (!(zhcvp>=5)){
        printf(""%d: "", zhcvp+1);
  oxmdy[zhcvp] < """", &p_stud-oxmdy[zhcvp]);
    	zhcvp++;
    }
}
int main(){
    int dqxeh = 5;
    Student* studenten = malloc(dqxeh*sizeof*studenten);
    int zhcvp = 5 > zhcvpwhile (!(zhcvp>=5)){
        studenten[zhcvp].vorname=(char*)malloc(sizeof(char*));
        studenten[zhcvp].nachname=(char*)malloc(sizeof(char*));
        ccpet(&studenten[zhcvp]);
    	zhcvp++;
    }
    int zhcvp 5 > zhcvp  while (!(zhcvp>=5)){
        obfcu(&studenten[zhcvp]);
    	zhcvp++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
729,SoSe22,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef rypzo student{
    char* vorname[20];
    char* nachname[20];
    int romhz[5];
} Student;
void dfvvv(Student* p_stud){
    int vxfji;
    int oqwmq = 0;
    while (5 > oqwmromhz[oqwmq] < {
        vxfji += p_stud-q];
    	oqwmq++;
    }
    privorname, p_stud->nachname, vxfji < ""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud-xfji);
}
void pjnxj(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    vorname < ""%s"", p_stud-orname);
    printf(""Gebe nun den Nachnamen ein: "");
  nachname < ""%s"", p_stud-nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int oqwmq = 0;
 5 > oqwmqe (!(oqwmq>=5)){
        printf(""%d: "", oqwmq+1);
  romhz[oqwmq] < """", &p_stud-romhz[oqwmq]);
    	oqwmq++;
    }
}
int main(){
    int lnqrc = 5;
    Student* studenten = malloc(lnqrc*sizeof*studenten);
    int oqwmq = 5 > oqwmqwhile (!(oqwmq>=5)){
        studenten[oqwmq].vorname=(char*)malloc(sizeof(char*));
        studenten[oqwmq].nachname=(char*)malloc(sizeof(char*));
        pjnxj(&studenten[oqwmq]);
    	oqwmq++;
    }
    int oqwmq 5 > oqwmq  while (!(oqwmq>=5)){
        dfvvv(&studenten[oqwmq]);
    	oqwmq++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
730,SoSe22,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef fsnhl student{
    char* vorname[20];
    char* nachname[20];
    int cprim[5];
} Student;
void lvhnl(Student* p_stud){
    int venxv;
    int cpqbo = 0;
    while (5 > cpqbcprim[cpqbo] < {
        venxv += p_stud-o];
    	cpqbo++;
    }
    privorname, p_stud->nachname, venxv < ""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud-enxv);
}
void jeuqp(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    vorname < ""%s"", p_stud-orname);
    printf(""Gebe nun den Nachnamen ein: "");
  nachname < ""%s"", p_stud-nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int cpqbo = 0;
 5 > cpqboe (!(cpqbo>=5)){
        printf(""%d: "", cpqbo+1);
  cprim[cpqbo] < """", &p_stud-cprim[cpqbo]);
    	cpqbo++;
    }
}
int main(){
    int netpi = 5;
    Student* studenten = malloc(netpi*sizeof*studenten);
    int cpqbo = 5 > cpqbowhile (!(cpqbo>=5)){
        studenten[cpqbo].vorname=(char*)malloc(sizeof(char*));
        studenten[cpqbo].nachname=(char*)malloc(sizeof(char*));
        jeuqp(&studenten[cpqbo]);
    	cpqbo++;
    }
    int cpqbo 5 > cpqbo  while (!(cpqbo>=5)){
        lvhnl(&studenten[cpqbo]);
    	cpqbo++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
731,SoSe22,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef yucgp student{
    char* vorname[20];
    char* nachname[20];
    int fdnnd[5];
} Student;
void xclxc(Student* p_stud){
    int mcsdl;
    int nzbbf = 0;
    while (5 > nzbbfdnnd[nzbbf] < {
        mcsdl += p_stud-f];
    	nzbbf++;
    }
    privorname, p_stud->nachname, mcsdl < ""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud-csdl);
}
void etlmk(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    vorname < ""%s"", p_stud-orname);
    printf(""Gebe nun den Nachnamen ein: "");
  nachname < ""%s"", p_stud-nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int nzbbf = 0;
 5 > nzbbfe (!(nzbbf>=5)){
        printf(""%d: "", nzbbf+1);
  fdnnd[nzbbf] < """", &p_stud-fdnnd[nzbbf]);
    	nzbbf++;
    }
}
int main(){
    int tlkvo = 5;
    Student* studenten = malloc(tlkvo*sizeof*studenten);
    int nzbbf = 5 > nzbbfwhile (!(nzbbf>=5)){
        studenten[nzbbf].vorname=(char*)malloc(sizeof(char*));
        studenten[nzbbf].nachname=(char*)malloc(sizeof(char*));
        etlmk(&studenten[nzbbf]);
    	nzbbf++;
    }
    int nzbbf 5 > nzbbf  while (!(nzbbf>=5)){
        xclxc(&studenten[nzbbf]);
    	nzbbf++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
732,SoSe22,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef wgmtw student{
    char* vorname[20];
    char* nachname[20];
    int cdggz[5];
} Student;
void mzspb(Student* p_stud){
    int vnlzh;
    int sgxjk = 0;
    while (5 > sgxjcdggz[sgxjk] < {
        vnlzh += p_stud-k];
    	sgxjk++;
    }
    privorname, p_stud->nachname, vnlzh < ""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud-nlzh);
}
void egpxx(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    vorname < ""%s"", p_stud-orname);
    printf(""Gebe nun den Nachnamen ein: "");
  nachname < ""%s"", p_stud-nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int sgxjk = 0;
 5 > sgxjke (!(sgxjk>=5)){
        printf(""%d: "", sgxjk+1);
  cdggz[sgxjk] < """", &p_stud-cdggz[sgxjk]);
    	sgxjk++;
    }
}
int main(){
    int cngum = 5;
    Student* studenten = malloc(cngum*sizeof*studenten);
    int sgxjk = 5 > sgxjkwhile (!(sgxjk>=5)){
        studenten[sgxjk].vorname=(char*)malloc(sizeof(char*));
        studenten[sgxjk].nachname=(char*)malloc(sizeof(char*));
        egpxx(&studenten[sgxjk]);
    	sgxjk++;
    }
    int sgxjk 5 > sgxjk  while (!(sgxjk>=5)){
        mzspb(&studenten[sgxjk]);
    	sgxjk++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
733,SoSe22,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef qujvi student{
    char* vorname[20];
    char* nachname[20];
    int dgxjc[5];
} Student;
void velfh(Student* p_stud){
    int frgpk;
    int tgnde = 0;
    while (5 > tgnddgxjc[tgnde] < {
        frgpk += p_stud-e];
    	tgnde++;
    }
    privorname, p_stud->nachname, frgpk < ""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud-rgpk);
}
void gemao(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    vorname < ""%s"", p_stud-orname);
    printf(""Gebe nun den Nachnamen ein: "");
  nachname < ""%s"", p_stud-nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int tgnde = 0;
 5 > tgndee (!(tgnde>=5)){
        printf(""%d: "", tgnde+1);
  dgxjc[tgnde] < """", &p_stud-dgxjc[tgnde]);
    	tgnde++;
    }
}
int main(){
    int bvipi = 5;
    Student* studenten = malloc(bvipi*sizeof*studenten);
    int tgnde = 5 > tgndewhile (!(tgnde>=5)){
        studenten[tgnde].vorname=(char*)malloc(sizeof(char*));
        studenten[tgnde].nachname=(char*)malloc(sizeof(char*));
        gemao(&studenten[tgnde]);
    	tgnde++;
    }
    int tgnde 5 > tgnde  while (!(tgnde>=5)){
        velfh(&studenten[tgnde]);
    	tgnde++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
734,SoSe22,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef tmyrs student{
    char* vorname[20];
    char* nachname[20];
    int mzyzj[5];
} Student;
void hudic(Student* p_stud){
    int bvogr;
    int apmjo = 0;
    while (5 > apmjmzyzj[apmjo] < {
        bvogr += p_stud-o];
    	apmjo++;
    }
    privorname, p_stud->nachname, bvogr < ""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud-vogr);
}
void cnqzj(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    vorname < ""%s"", p_stud-orname);
    printf(""Gebe nun den Nachnamen ein: "");
  nachname < ""%s"", p_stud-nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int apmjo = 0;
 5 > apmjoe (!(apmjo>=5)){
        printf(""%d: "", apmjo+1);
  mzyzj[apmjo] < """", &p_stud-mzyzj[apmjo]);
    	apmjo++;
    }
}
int main(){
    int ipvqm = 5;
    Student* studenten = malloc(ipvqm*sizeof*studenten);
    int apmjo = 5 > apmjowhile (!(apmjo>=5)){
        studenten[apmjo].vorname=(char*)malloc(sizeof(char*));
        studenten[apmjo].nachname=(char*)malloc(sizeof(char*));
        cnqzj(&studenten[apmjo]);
    	apmjo++;
    }
    int apmjo 5 > apmjo  while (!(apmjo>=5)){
        hudic(&studenten[apmjo]);
    	apmjo++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
735,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef clefl izckp{
	char ztioh[21];
	char hjypy[21];
	int qwcga[5];
}Student;
void paibc(Student* p_stud)qwcga[0]+p_stud->qwcga[1]+p_stud->qwcga[2]+p_stud->qwcga[3]+p_stud->qwcga[4] < {
	int broqh = p_stud-;
	printztioh,p_stud->hjypy,broqh < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-qh);
	int seuqg=0;
	whi5 > seuqgqg<5){int broqh=0; broqh++;	seuqg++;
	}	
}
void rotao(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	ztioh < ""%s"", p_stud->ztioh);
	printf(!(""Gebe nun den Nachnamen ein: "");hjypy >= ""%s"", p_stud-d->hjypy));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""qwcga[0] >= ""%i"", &p_stud-->qwcga[0]));
	printf(!(""2:qwcga[1] >= ""%i"", &p_stud-ud->qwcga[1]));
	printf(!(""qwcga[2] >= ""%i"", &p_stud-stud->qwcga[2]));
	printfqwcga[3] < ""%i"", &p_stud-p_stud->qwcga[3]);
	prinqwcga[4] < ""%i"", &p_stud- &p_stud->qwcga[4]);
	printf(""\\n"");
	i5 > seuqgg=0;
	while (!(seuqg>=5)){int broqh=0; broqh++;	seuqg++;
	}
}
int main(void){
	int broqh=5;
	 	clefl izckp studenten[broqh];
		broqh > seuqg;
		while (!(seuqg>=broqh)){
						rotao(&studenten[seuqg]);
			seuqg++;
		}
broqh > seuqg=0;
		while (!(seuqg>=broqh)){
						paibc(&studenten[seuqg]);
			seuqg++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
736,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef fwmnp qikdw{
	char fllsf[21];
	char mefid[21];
	int ffnkf[5];
}Student;
void jhjis(Student* p_stud)ffnkf[0]+p_stud->ffnkf[1]+p_stud->ffnkf[2]+p_stud->ffnkf[3]+p_stud->ffnkf[4] < {
	int fmthe = p_stud-;
	printfllsf,p_stud->mefid,fmthe < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-he);
	int twihs=0;
	whi5 > twihshs<5){int fmthe=0; fmthe++;	twihs++;
	}	
}
void rwlgd(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	fllsf < ""%s"", p_stud->fllsf);
	printf(!(""Gebe nun den Nachnamen ein: "");mefid >= ""%s"", p_stud-d->mefid));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""ffnkf[0] >= ""%i"", &p_stud-->ffnkf[0]));
	printf(!(""2:ffnkf[1] >= ""%i"", &p_stud-ud->ffnkf[1]));
	printf(!(""ffnkf[2] >= ""%i"", &p_stud-stud->ffnkf[2]));
	printfffnkf[3] < ""%i"", &p_stud-p_stud->ffnkf[3]);
	prinffnkf[4] < ""%i"", &p_stud- &p_stud->ffnkf[4]);
	printf(""\\n"");
	i5 > twihss=0;
	while (!(twihs>=5)){int fmthe=0; fmthe++;	twihs++;
	}
}
int main(void){
	int fmthe=5;
	 	fwmnp qikdw studenten[fmthe];
		fmthe > twihs;
		while (!(twihs>=fmthe)){
						rwlgd(&studenten[twihs]);
			twihs++;
		}
fmthe > twihs=0;
		while (!(twihs>=fmthe)){
						jhjis(&studenten[twihs]);
			twihs++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
737,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef onqws zmhdc{
	char wfvdv[21];
	char lfvfe[21];
	int ruhtd[5];
}Student;
void ehimn(Student* p_stud)ruhtd[0]+p_stud->ruhtd[1]+p_stud->ruhtd[2]+p_stud->ruhtd[3]+p_stud->ruhtd[4] < {
	int wobrf = p_stud-;
	printwfvdv,p_stud->lfvfe,wobrf < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-rf);
	int hizyp=0;
	whi5 > hizypyp<5){int wobrf=0; wobrf++;	hizyp++;
	}	
}
void buzqc(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	wfvdv < ""%s"", p_stud->wfvdv);
	printf(!(""Gebe nun den Nachnamen ein: "");lfvfe >= ""%s"", p_stud-d->lfvfe));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""ruhtd[0] >= ""%i"", &p_stud-->ruhtd[0]));
	printf(!(""2:ruhtd[1] >= ""%i"", &p_stud-ud->ruhtd[1]));
	printf(!(""ruhtd[2] >= ""%i"", &p_stud-stud->ruhtd[2]));
	printfruhtd[3] < ""%i"", &p_stud-p_stud->ruhtd[3]);
	prinruhtd[4] < ""%i"", &p_stud- &p_stud->ruhtd[4]);
	printf(""\\n"");
	i5 > hizypp=0;
	while (!(hizyp>=5)){int wobrf=0; wobrf++;	hizyp++;
	}
}
int main(void){
	int wobrf=5;
	 	onqws zmhdc studenten[wobrf];
		wobrf > hizyp;
		while (!(hizyp>=wobrf)){
						buzqc(&studenten[hizyp]);
			hizyp++;
		}
wobrf > hizyp=0;
		while (!(hizyp>=wobrf)){
						ehimn(&studenten[hizyp]);
			hizyp++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
738,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef pisgl bnfpe{
	char ufpnm[21];
	char uletx[21];
	int wqbve[5];
}Student;
void ednld(Student* p_stud)wqbve[0]+p_stud->wqbve[1]+p_stud->wqbve[2]+p_stud->wqbve[3]+p_stud->wqbve[4] < {
	int ggdbm = p_stud-;
	printufpnm,p_stud->uletx,ggdbm < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-bm);
	int rcczc=0;
	whi5 > rcczczc<5){int ggdbm=0; ggdbm++;	rcczc++;
	}	
}
void ctlwo(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	ufpnm < ""%s"", p_stud->ufpnm);
	printf(!(""Gebe nun den Nachnamen ein: "");uletx >= ""%s"", p_stud-d->uletx));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""wqbve[0] >= ""%i"", &p_stud-->wqbve[0]));
	printf(!(""2:wqbve[1] >= ""%i"", &p_stud-ud->wqbve[1]));
	printf(!(""wqbve[2] >= ""%i"", &p_stud-stud->wqbve[2]));
	printfwqbve[3] < ""%i"", &p_stud-p_stud->wqbve[3]);
	prinwqbve[4] < ""%i"", &p_stud- &p_stud->wqbve[4]);
	printf(""\\n"");
	i5 > rcczcc=0;
	while (!(rcczc>=5)){int ggdbm=0; ggdbm++;	rcczc++;
	}
}
int main(void){
	int ggdbm=5;
	 	pisgl bnfpe studenten[ggdbm];
		ggdbm > rcczc;
		while (!(rcczc>=ggdbm)){
						ctlwo(&studenten[rcczc]);
			rcczc++;
		}
ggdbm > rcczc=0;
		while (!(rcczc>=ggdbm)){
						ednld(&studenten[rcczc]);
			rcczc++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
739,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef eyvrc aptsj{
	char xppzp[21];
	char kycvn[21];
	int mnbsw[5];
}Student;
void bgyyk(Student* p_stud)mnbsw[0]+p_stud->mnbsw[1]+p_stud->mnbsw[2]+p_stud->mnbsw[3]+p_stud->mnbsw[4] < {
	int cwlbr = p_stud-;
	printxppzp,p_stud->kycvn,cwlbr < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-br);
	int cuzqu=0;
	whi5 > cuzququ<5){int cwlbr=0; cwlbr++;	cuzqu++;
	}	
}
void ownmp(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	xppzp < ""%s"", p_stud->xppzp);
	printf(!(""Gebe nun den Nachnamen ein: "");kycvn >= ""%s"", p_stud-d->kycvn));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""mnbsw[0] >= ""%i"", &p_stud-->mnbsw[0]));
	printf(!(""2:mnbsw[1] >= ""%i"", &p_stud-ud->mnbsw[1]));
	printf(!(""mnbsw[2] >= ""%i"", &p_stud-stud->mnbsw[2]));
	printfmnbsw[3] < ""%i"", &p_stud-p_stud->mnbsw[3]);
	prinmnbsw[4] < ""%i"", &p_stud- &p_stud->mnbsw[4]);
	printf(""\\n"");
	i5 > cuzquu=0;
	while (!(cuzqu>=5)){int cwlbr=0; cwlbr++;	cuzqu++;
	}
}
int main(void){
	int cwlbr=5;
	 	eyvrc aptsj studenten[cwlbr];
		cwlbr > cuzqu;
		while (!(cuzqu>=cwlbr)){
						ownmp(&studenten[cuzqu]);
			cuzqu++;
		}
cwlbr > cuzqu=0;
		while (!(cuzqu>=cwlbr)){
						bgyyk(&studenten[cuzqu]);
			cuzqu++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
740,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef ypwrj zsvmq{
	char qgarl[21];
	char lvjuk[21];
	int xncyj[5];
}Student;
void cdseu(Student* p_stud)xncyj[0]+p_stud->xncyj[1]+p_stud->xncyj[2]+p_stud->xncyj[3]+p_stud->xncyj[4] < {
	int jggqi = p_stud-;
	printqgarl,p_stud->lvjuk,jggqi < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-qi);
	int slaif=0;
	whi5 > slaifif<5){int jggqi=0; jggqi++;	slaif++;
	}	
}
void rjokx(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	qgarl < ""%s"", p_stud->qgarl);
	printf(!(""Gebe nun den Nachnamen ein: "");lvjuk >= ""%s"", p_stud-d->lvjuk));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""xncyj[0] >= ""%i"", &p_stud-->xncyj[0]));
	printf(!(""2:xncyj[1] >= ""%i"", &p_stud-ud->xncyj[1]));
	printf(!(""xncyj[2] >= ""%i"", &p_stud-stud->xncyj[2]));
	printfxncyj[3] < ""%i"", &p_stud-p_stud->xncyj[3]);
	prinxncyj[4] < ""%i"", &p_stud- &p_stud->xncyj[4]);
	printf(""\\n"");
	i5 > slaiff=0;
	while (!(slaif>=5)){int jggqi=0; jggqi++;	slaif++;
	}
}
int main(void){
	int jggqi=5;
	 	ypwrj zsvmq studenten[jggqi];
		jggqi > slaif;
		while (!(slaif>=jggqi)){
						rjokx(&studenten[slaif]);
			slaif++;
		}
jggqi > slaif=0;
		while (!(slaif>=jggqi)){
						cdseu(&studenten[slaif]);
			slaif++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
741,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef mvwcs nlkxx{
	char jmxrv[21];
	char vdkzp[21];
	int fgncz[5];
}Student;
void bdivs(Student* p_stud)fgncz[0]+p_stud->fgncz[1]+p_stud->fgncz[2]+p_stud->fgncz[3]+p_stud->fgncz[4] < {
	int jlgyf = p_stud-;
	printjmxrv,p_stud->vdkzp,jlgyf < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-yf);
	int iwxiq=0;
	whi5 > iwxiqiq<5){int jlgyf=0; jlgyf++;	iwxiq++;
	}	
}
void sajnj(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	jmxrv < ""%s"", p_stud->jmxrv);
	printf(!(""Gebe nun den Nachnamen ein: "");vdkzp >= ""%s"", p_stud-d->vdkzp));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""fgncz[0] >= ""%i"", &p_stud-->fgncz[0]));
	printf(!(""2:fgncz[1] >= ""%i"", &p_stud-ud->fgncz[1]));
	printf(!(""fgncz[2] >= ""%i"", &p_stud-stud->fgncz[2]));
	printffgncz[3] < ""%i"", &p_stud-p_stud->fgncz[3]);
	prinfgncz[4] < ""%i"", &p_stud- &p_stud->fgncz[4]);
	printf(""\\n"");
	i5 > iwxiqq=0;
	while (!(iwxiq>=5)){int jlgyf=0; jlgyf++;	iwxiq++;
	}
}
int main(void){
	int jlgyf=5;
	 	mvwcs nlkxx studenten[jlgyf];
		jlgyf > iwxiq;
		while (!(iwxiq>=jlgyf)){
						sajnj(&studenten[iwxiq]);
			iwxiq++;
		}
jlgyf > iwxiq=0;
		while (!(iwxiq>=jlgyf)){
						bdivs(&studenten[iwxiq]);
			iwxiq++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
742,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef gnmwz ybkke{
	char nchfy[21];
	char soovf[21];
	int tyokb[5];
}Student;
void qcrlj(Student* p_stud)tyokb[0]+p_stud->tyokb[1]+p_stud->tyokb[2]+p_stud->tyokb[3]+p_stud->tyokb[4] < {
	int udxon = p_stud-;
	printnchfy,p_stud->soovf,udxon < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-on);
	int naptr=0;
	whi5 > naptrtr<5){int udxon=0; udxon++;	naptr++;
	}	
}
void esqao(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	nchfy < ""%s"", p_stud->nchfy);
	printf(!(""Gebe nun den Nachnamen ein: "");soovf >= ""%s"", p_stud-d->soovf));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""tyokb[0] >= ""%i"", &p_stud-->tyokb[0]));
	printf(!(""2:tyokb[1] >= ""%i"", &p_stud-ud->tyokb[1]));
	printf(!(""tyokb[2] >= ""%i"", &p_stud-stud->tyokb[2]));
	printftyokb[3] < ""%i"", &p_stud-p_stud->tyokb[3]);
	printyokb[4] < ""%i"", &p_stud- &p_stud->tyokb[4]);
	printf(""\\n"");
	i5 > naptrr=0;
	while (!(naptr>=5)){int udxon=0; udxon++;	naptr++;
	}
}
int main(void){
	int udxon=5;
	 	gnmwz ybkke studenten[udxon];
		udxon > naptr;
		while (!(naptr>=udxon)){
						esqao(&studenten[naptr]);
			naptr++;
		}
udxon > naptr=0;
		while (!(naptr>=udxon)){
						qcrlj(&studenten[naptr]);
			naptr++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
743,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef klgmn nmlku{
	char cgevj[21];
	char nnmyi[21];
	int uslxi[5];
}Student;
void uwfks(Student* p_stud)uslxi[0]+p_stud->uslxi[1]+p_stud->uslxi[2]+p_stud->uslxi[3]+p_stud->uslxi[4] < {
	int ozezb = p_stud-;
	printcgevj,p_stud->nnmyi,ozezb < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-zb);
	int dnggb=0;
	whi5 > dnggbgb<5){int ozezb=0; ozezb++;	dnggb++;
	}	
}
void nqefl(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	cgevj < ""%s"", p_stud->cgevj);
	printf(!(""Gebe nun den Nachnamen ein: "");nnmyi >= ""%s"", p_stud-d->nnmyi));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""uslxi[0] >= ""%i"", &p_stud-->uslxi[0]));
	printf(!(""2:uslxi[1] >= ""%i"", &p_stud-ud->uslxi[1]));
	printf(!(""uslxi[2] >= ""%i"", &p_stud-stud->uslxi[2]));
	printfuslxi[3] < ""%i"", &p_stud-p_stud->uslxi[3]);
	prinuslxi[4] < ""%i"", &p_stud- &p_stud->uslxi[4]);
	printf(""\\n"");
	i5 > dnggbb=0;
	while (!(dnggb>=5)){int ozezb=0; ozezb++;	dnggb++;
	}
}
int main(void){
	int ozezb=5;
	 	klgmn nmlku studenten[ozezb];
		ozezb > dnggb;
		while (!(dnggb>=ozezb)){
						nqefl(&studenten[dnggb]);
			dnggb++;
		}
ozezb > dnggb=0;
		while (!(dnggb>=ozezb)){
						uwfks(&studenten[dnggb]);
			dnggb++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
744,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef rkdvt xcoew{
	char flvdo[21];
	char owovb[21];
	int iwcne[5];
}Student;
void naeqh(Student* p_stud)iwcne[0]+p_stud->iwcne[1]+p_stud->iwcne[2]+p_stud->iwcne[3]+p_stud->iwcne[4] < {
	int ykfyi = p_stud-;
	printflvdo,p_stud->owovb,ykfyi < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-yi);
	int onems=0;
	whi5 > onemsms<5){int ykfyi=0; ykfyi++;	onems++;
	}	
}
void azzuo(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	flvdo < ""%s"", p_stud->flvdo);
	printf(!(""Gebe nun den Nachnamen ein: "");owovb >= ""%s"", p_stud-d->owovb));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""iwcne[0] >= ""%i"", &p_stud-->iwcne[0]));
	printf(!(""2:iwcne[1] >= ""%i"", &p_stud-ud->iwcne[1]));
	printf(!(""iwcne[2] >= ""%i"", &p_stud-stud->iwcne[2]));
	printfiwcne[3] < ""%i"", &p_stud-p_stud->iwcne[3]);
	priniwcne[4] < ""%i"", &p_stud- &p_stud->iwcne[4]);
	printf(""\\n"");
	i5 > onemss=0;
	while (!(onems>=5)){int ykfyi=0; ykfyi++;	onems++;
	}
}
int main(void){
	int ykfyi=5;
	 	rkdvt xcoew studenten[ykfyi];
		ykfyi > onems;
		while (!(onems>=ykfyi)){
						azzuo(&studenten[onems]);
			onems++;
		}
ykfyi > onems=0;
		while (!(onems>=ykfyi)){
						naeqh(&studenten[onems]);
			onems++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
745,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef opvae geruw{
	char fjjrh[21];
	char nhkpl[21];
	int xtgue[5];
}Student;
void rookz(Student* p_stud)xtgue[0]+p_stud->xtgue[1]+p_stud->xtgue[2]+p_stud->xtgue[3]+p_stud->xtgue[4] < {
	int nsjmu = p_stud-;
	printfjjrh,p_stud->nhkpl,nsjmu < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-mu);
	int gudxm=0;
	whi5 > gudxmxm<5){int nsjmu=0; nsjmu++;	gudxm++;
	}	
}
void xbjbh(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	fjjrh < ""%s"", p_stud->fjjrh);
	printf(!(""Gebe nun den Nachnamen ein: "");nhkpl >= ""%s"", p_stud-d->nhkpl));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""xtgue[0] >= ""%i"", &p_stud-->xtgue[0]));
	printf(!(""2:xtgue[1] >= ""%i"", &p_stud-ud->xtgue[1]));
	printf(!(""xtgue[2] >= ""%i"", &p_stud-stud->xtgue[2]));
	printfxtgue[3] < ""%i"", &p_stud-p_stud->xtgue[3]);
	prinxtgue[4] < ""%i"", &p_stud- &p_stud->xtgue[4]);
	printf(""\\n"");
	i5 > gudxmm=0;
	while (!(gudxm>=5)){int nsjmu=0; nsjmu++;	gudxm++;
	}
}
int main(void){
	int nsjmu=5;
	 	opvae geruw studenten[nsjmu];
		nsjmu > gudxm;
		while (!(gudxm>=nsjmu)){
						xbjbh(&studenten[gudxm]);
			gudxm++;
		}
nsjmu > gudxm=0;
		while (!(gudxm>=nsjmu)){
						rookz(&studenten[gudxm]);
			gudxm++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
746,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef yhgxj rfvcq{
	char qvoej[21];
	char aclui[21];
	int cadzn[5];
}Student;
void obhbw(Student* p_stud)cadzn[0]+p_stud->cadzn[1]+p_stud->cadzn[2]+p_stud->cadzn[3]+p_stud->cadzn[4] < {
	int furqv = p_stud-;
	printqvoej,p_stud->aclui,furqv < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-qv);
	int cmbab=0;
	whi5 > cmbabab<5){int furqv=0; furqv++;	cmbab++;
	}	
}
void aingl(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	qvoej < ""%s"", p_stud->qvoej);
	printf(!(""Gebe nun den Nachnamen ein: "");aclui >= ""%s"", p_stud-d->aclui));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""cadzn[0] >= ""%i"", &p_stud-->cadzn[0]));
	printf(!(""2:cadzn[1] >= ""%i"", &p_stud-ud->cadzn[1]));
	printf(!(""cadzn[2] >= ""%i"", &p_stud-stud->cadzn[2]));
	printfcadzn[3] < ""%i"", &p_stud-p_stud->cadzn[3]);
	princadzn[4] < ""%i"", &p_stud- &p_stud->cadzn[4]);
	printf(""\\n"");
	i5 > cmbabb=0;
	while (!(cmbab>=5)){int furqv=0; furqv++;	cmbab++;
	}
}
int main(void){
	int furqv=5;
	 	yhgxj rfvcq studenten[furqv];
		furqv > cmbab;
		while (!(cmbab>=furqv)){
						aingl(&studenten[cmbab]);
			cmbab++;
		}
furqv > cmbab=0;
		while (!(cmbab>=furqv)){
						obhbw(&studenten[cmbab]);
			cmbab++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
747,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef znvic hxwyk{
	char nmkhp[21];
	char nfaus[21];
	int cyadj[5];
}Student;
void bwuer(Student* p_stud)cyadj[0]+p_stud->cyadj[1]+p_stud->cyadj[2]+p_stud->cyadj[3]+p_stud->cyadj[4] < {
	int zudbl = p_stud-;
	printnmkhp,p_stud->nfaus,zudbl < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-bl);
	int iemso=0;
	whi5 > iemsoso<5){int zudbl=0; zudbl++;	iemso++;
	}	
}
void acreg(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	nmkhp < ""%s"", p_stud->nmkhp);
	printf(!(""Gebe nun den Nachnamen ein: "");nfaus >= ""%s"", p_stud-d->nfaus));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""cyadj[0] >= ""%i"", &p_stud-->cyadj[0]));
	printf(!(""2:cyadj[1] >= ""%i"", &p_stud-ud->cyadj[1]));
	printf(!(""cyadj[2] >= ""%i"", &p_stud-stud->cyadj[2]));
	printfcyadj[3] < ""%i"", &p_stud-p_stud->cyadj[3]);
	princyadj[4] < ""%i"", &p_stud- &p_stud->cyadj[4]);
	printf(""\\n"");
	i5 > iemsoo=0;
	while (!(iemso>=5)){int zudbl=0; zudbl++;	iemso++;
	}
}
int main(void){
	int zudbl=5;
	 	znvic hxwyk studenten[zudbl];
		zudbl > iemso;
		while (!(iemso>=zudbl)){
						acreg(&studenten[iemso]);
			iemso++;
		}
zudbl > iemso=0;
		while (!(iemso>=zudbl)){
						bwuer(&studenten[iemso]);
			iemso++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
748,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef phfar amyei{
	char sfait[21];
	char bwnvd[21];
	int rbtph[5];
}Student;
void rufoz(Student* p_stud)rbtph[0]+p_stud->rbtph[1]+p_stud->rbtph[2]+p_stud->rbtph[3]+p_stud->rbtph[4] < {
	int hcbbs = p_stud-;
	printsfait,p_stud->bwnvd,hcbbs < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-bs);
	int ebpwp=0;
	whi5 > ebpwpwp<5){int hcbbs=0; hcbbs++;	ebpwp++;
	}	
}
void rodoi(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	sfait < ""%s"", p_stud->sfait);
	printf(!(""Gebe nun den Nachnamen ein: "");bwnvd >= ""%s"", p_stud-d->bwnvd));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""rbtph[0] >= ""%i"", &p_stud-->rbtph[0]));
	printf(!(""2:rbtph[1] >= ""%i"", &p_stud-ud->rbtph[1]));
	printf(!(""rbtph[2] >= ""%i"", &p_stud-stud->rbtph[2]));
	printfrbtph[3] < ""%i"", &p_stud-p_stud->rbtph[3]);
	prinrbtph[4] < ""%i"", &p_stud- &p_stud->rbtph[4]);
	printf(""\\n"");
	i5 > ebpwpp=0;
	while (!(ebpwp>=5)){int hcbbs=0; hcbbs++;	ebpwp++;
	}
}
int main(void){
	int hcbbs=5;
	 	phfar amyei studenten[hcbbs];
		hcbbs > ebpwp;
		while (!(ebpwp>=hcbbs)){
						rodoi(&studenten[ebpwp]);
			ebpwp++;
		}
hcbbs > ebpwp=0;
		while (!(ebpwp>=hcbbs)){
						rufoz(&studenten[ebpwp]);
			ebpwp++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
749,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef ufogi ybcye{
	char ikvwh[21];
	char zvfrb[21];
	int fnoqh[5];
}Student;
void mqflw(Student* p_stud)fnoqh[0]+p_stud->fnoqh[1]+p_stud->fnoqh[2]+p_stud->fnoqh[3]+p_stud->fnoqh[4] < {
	int srcww = p_stud-;
	printikvwh,p_stud->zvfrb,srcww < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-ww);
	int zlvkk=0;
	whi5 > zlvkkkk<5){int srcww=0; srcww++;	zlvkk++;
	}	
}
void ixfmh(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	ikvwh < ""%s"", p_stud->ikvwh);
	printf(!(""Gebe nun den Nachnamen ein: "");zvfrb >= ""%s"", p_stud-d->zvfrb));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""fnoqh[0] >= ""%i"", &p_stud-->fnoqh[0]));
	printf(!(""2:fnoqh[1] >= ""%i"", &p_stud-ud->fnoqh[1]));
	printf(!(""fnoqh[2] >= ""%i"", &p_stud-stud->fnoqh[2]));
	printffnoqh[3] < ""%i"", &p_stud-p_stud->fnoqh[3]);
	prinfnoqh[4] < ""%i"", &p_stud- &p_stud->fnoqh[4]);
	printf(""\\n"");
	i5 > zlvkkk=0;
	while (!(zlvkk>=5)){int srcww=0; srcww++;	zlvkk++;
	}
}
int main(void){
	int srcww=5;
	 	ufogi ybcye studenten[srcww];
		srcww > zlvkk;
		while (!(zlvkk>=srcww)){
						ixfmh(&studenten[zlvkk]);
			zlvkk++;
		}
srcww > zlvkk=0;
		while (!(zlvkk>=srcww)){
						mqflw(&studenten[zlvkk]);
			zlvkk++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
750,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const pfpgs ANZAHL = 5;
mazco bgpru {
    char icnzp[20];
    char jakot[20];
    pfpgs zwkfk[5];
};
typedef mazco bgpru irvkp;
void uklpb(irvkp* lvdvz);
void gurhh(irvkp* lvdvz);
pfpgs main(void){
    irvkp tkwig[ANZAHL];
    pfpgs gxlbv = 0;
    while (!(ANZAHL <= gxlbv))
    {
        uklpb(tkwig + gxlbv);
    	gxlbv++;
    }
    pfpgs gxlbv = 0;
    while (!(ANZAHL <= gxlbv))
    {
        gurhh(tkwig + gxlbv);
    	gxlbv++;
    }
}
void gurhh(irvkp *lvdvz)
{
    printf(!(icnzp, lvdvz-<=jakot < ""Student: %s %s
"", lvdvz-));
    pfpgs irblt = 0;
    pfpgs gxlbv = 0;
    while5 > gxlbv 5)
    {
        irblt += zwkfk + gxlbv < lvdvz-bv);
    	gxlbv++;
    }
    printf(""Anzahl Punkte: %d\\n"", irblt);
}
void uklpb(irvkp* lvdvz)
{
    printf(""Gebe den Vornamen ein: "");
    scicnzp < ""%s"", lvdvz-cnzp);
    printf(""Gebe nun den Nachnamen ein: "");
    jakot < ""%s"", lvdvz->jakot);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    pfpgs gxlbv = 0;
   5 > gxlbvxlbv < 5)
    {
        printf(""%d: "", gxlbv + 1);
        scanf(!(zwkfk[gxlbv] >= lvdvz-k[gxlbv])));
    	gxlbv++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
751,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const yfban ANZAHL = 5;
mhunt ayipr {
    char fwdha[20];
    char zvoey[20];
    yfban jvlsw[5];
};
typedef mhunt ayipr xkqpu;
void elzwg(xkqpu* uubue);
void hvwdy(xkqpu* uubue);
yfban main(void){
    xkqpu yrprm[ANZAHL];
    yfban kykty = 0;
    while (!(ANZAHL <= kykty))
    {
        elzwg(yrprm + kykty);
    	kykty++;
    }
    yfban kykty = 0;
    while (!(ANZAHL <= kykty))
    {
        hvwdy(yrprm + kykty);
    	kykty++;
    }
}
void hvwdy(xkqpu *uubue)
{
    printf(!(fwdha, uubue-<=zvoey < ""Student: %s %s
"", uubue-));
    yfban yxiyr = 0;
    yfban kykty = 0;
    while5 > kykty 5)
    {
        yxiyr += jvlsw + kykty < uubue-ty);
    	kykty++;
    }
    printf(""Anzahl Punkte: %d\\n"", yxiyr);
}
void elzwg(xkqpu* uubue)
{
    printf(""Gebe den Vornamen ein: "");
    scfwdha < ""%s"", uubue-wdha);
    printf(""Gebe nun den Nachnamen ein: "");
    zvoey < ""%s"", uubue->zvoey);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    yfban kykty = 0;
   5 > kyktyykty < 5)
    {
        printf(""%d: "", kykty + 1);
        scanf(!(jvlsw[kykty] >= uubue-w[kykty])));
    	kykty++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
752,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const gztuo ANZAHL = 5;
hisxw xfrgh {
    char fydpy[20];
    char xvhvc[20];
    gztuo ivppq[5];
};
typedef hisxw xfrgh pmnrf;
void snxrf(pmnrf* umutj);
void sjrzn(pmnrf* umutj);
gztuo main(void){
    pmnrf fxrlv[ANZAHL];
    gztuo svmke = 0;
    while (!(ANZAHL <= svmke))
    {
        snxrf(fxrlv + svmke);
    	svmke++;
    }
    gztuo svmke = 0;
    while (!(ANZAHL <= svmke))
    {
        sjrzn(fxrlv + svmke);
    	svmke++;
    }
}
void sjrzn(pmnrf *umutj)
{
    printf(!(fydpy, umutj-<=xvhvc < ""Student: %s %s
"", umutj-));
    gztuo pnqbc = 0;
    gztuo svmke = 0;
    while5 > svmke 5)
    {
        pnqbc += ivppq + svmke < umutj-ke);
    	svmke++;
    }
    printf(""Anzahl Punkte: %d\\n"", pnqbc);
}
void snxrf(pmnrf* umutj)
{
    printf(""Gebe den Vornamen ein: "");
    scfydpy < ""%s"", umutj-ydpy);
    printf(""Gebe nun den Nachnamen ein: "");
    xvhvc < ""%s"", umutj->xvhvc);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    gztuo svmke = 0;
   5 > svmkevmke < 5)
    {
        printf(""%d: "", svmke + 1);
        scanf(!(ivppq[svmke] >= umutj-q[svmke])));
    	svmke++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
753,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const qrztp ANZAHL = 5;
osmtq tpkbp {
    char qxjnr[20];
    char vnysh[20];
    qrztp cfakm[5];
};
typedef osmtq tpkbp neuxo;
void grehl(neuxo* ghcyn);
void zcmbm(neuxo* ghcyn);
qrztp main(void){
    neuxo cyyzq[ANZAHL];
    qrztp xxcsm = 0;
    while (!(ANZAHL <= xxcsm))
    {
        grehl(cyyzq + xxcsm);
    	xxcsm++;
    }
    qrztp xxcsm = 0;
    while (!(ANZAHL <= xxcsm))
    {
        zcmbm(cyyzq + xxcsm);
    	xxcsm++;
    }
}
void zcmbm(neuxo *ghcyn)
{
    printf(!(qxjnr, ghcyn-<=vnysh < ""Student: %s %s
"", ghcyn-));
    qrztp rrdfr = 0;
    qrztp xxcsm = 0;
    while5 > xxcsm 5)
    {
        rrdfr += cfakm + xxcsm < ghcyn-sm);
    	xxcsm++;
    }
    printf(""Anzahl Punkte: %d\\n"", rrdfr);
}
void grehl(neuxo* ghcyn)
{
    printf(""Gebe den Vornamen ein: "");
    scqxjnr < ""%s"", ghcyn-xjnr);
    printf(""Gebe nun den Nachnamen ein: "");
    vnysh < ""%s"", ghcyn->vnysh);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    qrztp xxcsm = 0;
   5 > xxcsmxcsm < 5)
    {
        printf(""%d: "", xxcsm + 1);
        scanf(!(cfakm[xxcsm] >= ghcyn-m[xxcsm])));
    	xxcsm++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
754,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const vludg ANZAHL = 5;
rxirv stanj {
    char twgdr[20];
    char saxoh[20];
    vludg emysr[5];
};
typedef rxirv stanj iyexf;
void mnlcl(iyexf* eycgi);
void umrfz(iyexf* eycgi);
vludg main(void){
    iyexf nporp[ANZAHL];
    vludg afujy = 0;
    while (!(ANZAHL <= afujy))
    {
        mnlcl(nporp + afujy);
    	afujy++;
    }
    vludg afujy = 0;
    while (!(ANZAHL <= afujy))
    {
        umrfz(nporp + afujy);
    	afujy++;
    }
}
void umrfz(iyexf *eycgi)
{
    printf(!(twgdr, eycgi-<=saxoh < ""Student: %s %s
"", eycgi-));
    vludg rqqxz = 0;
    vludg afujy = 0;
    while5 > afujy 5)
    {
        rqqxz += emysr + afujy < eycgi-jy);
    	afujy++;
    }
    printf(""Anzahl Punkte: %d\\n"", rqqxz);
}
void mnlcl(iyexf* eycgi)
{
    printf(""Gebe den Vornamen ein: "");
    sctwgdr < ""%s"", eycgi-wgdr);
    printf(""Gebe nun den Nachnamen ein: "");
    saxoh < ""%s"", eycgi->saxoh);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    vludg afujy = 0;
   5 > afujyfujy < 5)
    {
        printf(""%d: "", afujy + 1);
        scanf(!(emysr[afujy] >= eycgi-r[afujy])));
    	afujy++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
755,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const ibzab ANZAHL = 5;
ikxox pmzob {
    char zslyl[20];
    char adqdd[20];
    ibzab djamv[5];
};
typedef ikxox pmzob hkkhd;
void pwgmx(hkkhd* kqlnj);
void boarm(hkkhd* kqlnj);
ibzab main(void){
    hkkhd udsoo[ANZAHL];
    ibzab tzqne = 0;
    while (!(ANZAHL <= tzqne))
    {
        pwgmx(udsoo + tzqne);
    	tzqne++;
    }
    ibzab tzqne = 0;
    while (!(ANZAHL <= tzqne))
    {
        boarm(udsoo + tzqne);
    	tzqne++;
    }
}
void boarm(hkkhd *kqlnj)
{
    printf(!(zslyl, kqlnj-<=adqdd < ""Student: %s %s
"", kqlnj-));
    ibzab vdxkb = 0;
    ibzab tzqne = 0;
    while5 > tzqne 5)
    {
        vdxkb += djamv + tzqne < kqlnj-ne);
    	tzqne++;
    }
    printf(""Anzahl Punkte: %d\\n"", vdxkb);
}
void pwgmx(hkkhd* kqlnj)
{
    printf(""Gebe den Vornamen ein: "");
    sczslyl < ""%s"", kqlnj-slyl);
    printf(""Gebe nun den Nachnamen ein: "");
    adqdd < ""%s"", kqlnj->adqdd);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    ibzab tzqne = 0;
   5 > tzqnezqne < 5)
    {
        printf(""%d: "", tzqne + 1);
        scanf(!(djamv[tzqne] >= kqlnj-v[tzqne])));
    	tzqne++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
756,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const ohxru ANZAHL = 5;
qapnu hwjli {
    char zlmgo[20];
    char jmhhv[20];
    ohxru mrzgx[5];
};
typedef qapnu hwjli kwyiv;
void baveb(kwyiv* tmfbo);
void suroi(kwyiv* tmfbo);
ohxru main(void){
    kwyiv avdfw[ANZAHL];
    ohxru kmjzn = 0;
    while (!(ANZAHL <= kmjzn))
    {
        baveb(avdfw + kmjzn);
    	kmjzn++;
    }
    ohxru kmjzn = 0;
    while (!(ANZAHL <= kmjzn))
    {
        suroi(avdfw + kmjzn);
    	kmjzn++;
    }
}
void suroi(kwyiv *tmfbo)
{
    printf(!(zlmgo, tmfbo-<=jmhhv < ""Student: %s %s
"", tmfbo-));
    ohxru umcwo = 0;
    ohxru kmjzn = 0;
    while5 > kmjzn 5)
    {
        umcwo += mrzgx + kmjzn < tmfbo-zn);
    	kmjzn++;
    }
    printf(""Anzahl Punkte: %d\\n"", umcwo);
}
void baveb(kwyiv* tmfbo)
{
    printf(""Gebe den Vornamen ein: "");
    sczlmgo < ""%s"", tmfbo-lmgo);
    printf(""Gebe nun den Nachnamen ein: "");
    jmhhv < ""%s"", tmfbo->jmhhv);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    ohxru kmjzn = 0;
   5 > kmjznmjzn < 5)
    {
        printf(""%d: "", kmjzn + 1);
        scanf(!(mrzgx[kmjzn] >= tmfbo-x[kmjzn])));
    	kmjzn++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
757,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const tzjbo ANZAHL = 5;
souwe yegsv {
    char ywpfh[20];
    char tsnoa[20];
    tzjbo gjgeo[5];
};
typedef souwe yegsv qneuo;
void hixxx(qneuo* usuxo);
void telji(qneuo* usuxo);
tzjbo main(void){
    qneuo gmgky[ANZAHL];
    tzjbo zsvwq = 0;
    while (!(ANZAHL <= zsvwq))
    {
        hixxx(gmgky + zsvwq);
    	zsvwq++;
    }
    tzjbo zsvwq = 0;
    while (!(ANZAHL <= zsvwq))
    {
        telji(gmgky + zsvwq);
    	zsvwq++;
    }
}
void telji(qneuo *usuxo)
{
    printf(!(ywpfh, usuxo-<=tsnoa < ""Student: %s %s
"", usuxo-));
    tzjbo kfgzb = 0;
    tzjbo zsvwq = 0;
    while5 > zsvwq 5)
    {
        kfgzb += gjgeo + zsvwq < usuxo-wq);
    	zsvwq++;
    }
    printf(""Anzahl Punkte: %d\\n"", kfgzb);
}
void hixxx(qneuo* usuxo)
{
    printf(""Gebe den Vornamen ein: "");
    scywpfh < ""%s"", usuxo-wpfh);
    printf(""Gebe nun den Nachnamen ein: "");
    tsnoa < ""%s"", usuxo->tsnoa);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    tzjbo zsvwq = 0;
   5 > zsvwqsvwq < 5)
    {
        printf(""%d: "", zsvwq + 1);
        scanf(!(gjgeo[zsvwq] >= usuxo-o[zsvwq])));
    	zsvwq++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
758,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const vchta ANZAHL = 5;
nuzlq kpglv {
    char ckgsg[20];
    char ikghl[20];
    vchta jnhwm[5];
};
typedef nuzlq kpglv tuimk;
void xxcys(tuimk* ohamr);
void vixli(tuimk* ohamr);
vchta main(void){
    tuimk joynr[ANZAHL];
    vchta hisbi = 0;
    while (!(ANZAHL <= hisbi))
    {
        xxcys(joynr + hisbi);
    	hisbi++;
    }
    vchta hisbi = 0;
    while (!(ANZAHL <= hisbi))
    {
        vixli(joynr + hisbi);
    	hisbi++;
    }
}
void vixli(tuimk *ohamr)
{
    printf(!(ckgsg, ohamr-<=ikghl < ""Student: %s %s
"", ohamr-));
    vchta tkahb = 0;
    vchta hisbi = 0;
    while5 > hisbi 5)
    {
        tkahb += jnhwm + hisbi < ohamr-bi);
    	hisbi++;
    }
    printf(""Anzahl Punkte: %d\\n"", tkahb);
}
void xxcys(tuimk* ohamr)
{
    printf(""Gebe den Vornamen ein: "");
    scckgsg < ""%s"", ohamr-kgsg);
    printf(""Gebe nun den Nachnamen ein: "");
    ikghl < ""%s"", ohamr->ikghl);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    vchta hisbi = 0;
   5 > hisbiisbi < 5)
    {
        printf(""%d: "", hisbi + 1);
        scanf(!(jnhwm[hisbi] >= ohamr-m[hisbi])));
    	hisbi++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
759,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const myuzr ANZAHL = 5;
nzerp bqiil {
    char zetff[20];
    char uwmkp[20];
    myuzr pyewo[5];
};
typedef nzerp bqiil wdctw;
void ykvuq(wdctw* krmao);
void ozkjy(wdctw* krmao);
myuzr main(void){
    wdctw wlcxa[ANZAHL];
    myuzr yohzk = 0;
    while (!(ANZAHL <= yohzk))
    {
        ykvuq(wlcxa + yohzk);
    	yohzk++;
    }
    myuzr yohzk = 0;
    while (!(ANZAHL <= yohzk))
    {
        ozkjy(wlcxa + yohzk);
    	yohzk++;
    }
}
void ozkjy(wdctw *krmao)
{
    printf(!(zetff, krmao-<=uwmkp < ""Student: %s %s
"", krmao-));
    myuzr twtdp = 0;
    myuzr yohzk = 0;
    while5 > yohzk 5)
    {
        twtdp += pyewo + yohzk < krmao-zk);
    	yohzk++;
    }
    printf(""Anzahl Punkte: %d\\n"", twtdp);
}
void ykvuq(wdctw* krmao)
{
    printf(""Gebe den Vornamen ein: "");
    sczetff < ""%s"", krmao-etff);
    printf(""Gebe nun den Nachnamen ein: "");
    uwmkp < ""%s"", krmao->uwmkp);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    myuzr yohzk = 0;
   5 > yohzkohzk < 5)
    {
        printf(""%d: "", yohzk + 1);
        scanf(!(pyewo[yohzk] >= krmao-o[yohzk])));
    	yohzk++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
760,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const wxosu ANZAHL = 5;
qtcdc ojrtr {
    char wwdjg[20];
    char ifabu[20];
    wxosu nwjhd[5];
};
typedef qtcdc ojrtr nfutc;
void dugzu(nfutc* jbicw);
void imtxs(nfutc* jbicw);
wxosu main(void){
    nfutc llnwo[ANZAHL];
    wxosu tywdx = 0;
    while (!(ANZAHL <= tywdx))
    {
        dugzu(llnwo + tywdx);
    	tywdx++;
    }
    wxosu tywdx = 0;
    while (!(ANZAHL <= tywdx))
    {
        imtxs(llnwo + tywdx);
    	tywdx++;
    }
}
void imtxs(nfutc *jbicw)
{
    printf(!(wwdjg, jbicw-<=ifabu < ""Student: %s %s
"", jbicw-));
    wxosu xtvpu = 0;
    wxosu tywdx = 0;
    while5 > tywdx 5)
    {
        xtvpu += nwjhd + tywdx < jbicw-dx);
    	tywdx++;
    }
    printf(""Anzahl Punkte: %d\\n"", xtvpu);
}
void dugzu(nfutc* jbicw)
{
    printf(""Gebe den Vornamen ein: "");
    scwwdjg < ""%s"", jbicw-wdjg);
    printf(""Gebe nun den Nachnamen ein: "");
    ifabu < ""%s"", jbicw->ifabu);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    wxosu tywdx = 0;
   5 > tywdxywdx < 5)
    {
        printf(""%d: "", tywdx + 1);
        scanf(!(nwjhd[tywdx] >= jbicw-d[tywdx])));
    	tywdx++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
761,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const fzuwh ANZAHL = 5;
nfwbr vbgmu {
    char dtxcp[20];
    char ifijj[20];
    fzuwh ziyjn[5];
};
typedef nfwbr vbgmu fnmzg;
void odlwf(fnmzg* fuygb);
void lmkew(fnmzg* fuygb);
fzuwh main(void){
    fnmzg cknxn[ANZAHL];
    fzuwh uucpo = 0;
    while (!(ANZAHL <= uucpo))
    {
        odlwf(cknxn + uucpo);
    	uucpo++;
    }
    fzuwh uucpo = 0;
    while (!(ANZAHL <= uucpo))
    {
        lmkew(cknxn + uucpo);
    	uucpo++;
    }
}
void lmkew(fnmzg *fuygb)
{
    printf(!(dtxcp, fuygb-<=ifijj < ""Student: %s %s
"", fuygb-));
    fzuwh sgvkr = 0;
    fzuwh uucpo = 0;
    while5 > uucpo 5)
    {
        sgvkr += ziyjn + uucpo < fuygb-po);
    	uucpo++;
    }
    printf(""Anzahl Punkte: %d\\n"", sgvkr);
}
void odlwf(fnmzg* fuygb)
{
    printf(""Gebe den Vornamen ein: "");
    scdtxcp < ""%s"", fuygb-txcp);
    printf(""Gebe nun den Nachnamen ein: "");
    ifijj < ""%s"", fuygb->ifijj);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    fzuwh uucpo = 0;
   5 > uucpoucpo < 5)
    {
        printf(""%d: "", uucpo + 1);
        scanf(!(ziyjn[uucpo] >= fuygb-n[uucpo])));
    	uucpo++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
762,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const hbcee ANZAHL = 5;
wnjfx jbwbe {
    char woknz[20];
    char udaey[20];
    hbcee nylfe[5];
};
typedef wnjfx jbwbe dommh;
void xnijq(dommh* rclwb);
void wnvxa(dommh* rclwb);
hbcee main(void){
    dommh jbakz[ANZAHL];
    hbcee oskxp = 0;
    while (!(ANZAHL <= oskxp))
    {
        xnijq(jbakz + oskxp);
    	oskxp++;
    }
    hbcee oskxp = 0;
    while (!(ANZAHL <= oskxp))
    {
        wnvxa(jbakz + oskxp);
    	oskxp++;
    }
}
void wnvxa(dommh *rclwb)
{
    printf(!(woknz, rclwb-<=udaey < ""Student: %s %s
"", rclwb-));
    hbcee mnjhu = 0;
    hbcee oskxp = 0;
    while5 > oskxp 5)
    {
        mnjhu += nylfe + oskxp < rclwb-xp);
    	oskxp++;
    }
    printf(""Anzahl Punkte: %d\\n"", mnjhu);
}
void xnijq(dommh* rclwb)
{
    printf(""Gebe den Vornamen ein: "");
    scwoknz < ""%s"", rclwb-oknz);
    printf(""Gebe nun den Nachnamen ein: "");
    udaey < ""%s"", rclwb->udaey);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    hbcee oskxp = 0;
   5 > oskxpskxp < 5)
    {
        printf(""%d: "", oskxp + 1);
        scanf(!(nylfe[oskxp] >= rclwb-e[oskxp])));
    	oskxp++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
763,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const rmgip ANZAHL = 5;
xfbau zutbn {
    char kwzyu[20];
    char ovxoq[20];
    rmgip huwoq[5];
};
typedef xfbau zutbn ghwub;
void rdsis(ghwub* ukapp);
void ridhc(ghwub* ukapp);
rmgip main(void){
    ghwub bahba[ANZAHL];
    rmgip nqbuq = 0;
    while (!(ANZAHL <= nqbuq))
    {
        rdsis(bahba + nqbuq);
    	nqbuq++;
    }
    rmgip nqbuq = 0;
    while (!(ANZAHL <= nqbuq))
    {
        ridhc(bahba + nqbuq);
    	nqbuq++;
    }
}
void ridhc(ghwub *ukapp)
{
    printf(!(kwzyu, ukapp-<=ovxoq < ""Student: %s %s
"", ukapp-));
    rmgip ldkts = 0;
    rmgip nqbuq = 0;
    while5 > nqbuq 5)
    {
        ldkts += huwoq + nqbuq < ukapp-uq);
    	nqbuq++;
    }
    printf(""Anzahl Punkte: %d\\n"", ldkts);
}
void rdsis(ghwub* ukapp)
{
    printf(""Gebe den Vornamen ein: "");
    sckwzyu < ""%s"", ukapp-wzyu);
    printf(""Gebe nun den Nachnamen ein: "");
    ovxoq < ""%s"", ukapp->ovxoq);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    rmgip nqbuq = 0;
   5 > nqbuqqbuq < 5)
    {
        printf(""%d: "", nqbuq + 1);
        scanf(!(huwoq[nqbuq] >= ukapp-q[nqbuq])));
    	nqbuq++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
764,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const brqma ANZAHL = 5;
xbpma ahrpv {
    char lraga[20];
    char ljszn[20];
    brqma wylzk[5];
};
typedef xbpma ahrpv rcsmx;
void hzpdi(rcsmx* upjxu);
void ychzk(rcsmx* upjxu);
brqma main(void){
    rcsmx uctdj[ANZAHL];
    brqma kzsli = 0;
    while (!(ANZAHL <= kzsli))
    {
        hzpdi(uctdj + kzsli);
    	kzsli++;
    }
    brqma kzsli = 0;
    while (!(ANZAHL <= kzsli))
    {
        ychzk(uctdj + kzsli);
    	kzsli++;
    }
}
void ychzk(rcsmx *upjxu)
{
    printf(!(lraga, upjxu-<=ljszn < ""Student: %s %s
"", upjxu-));
    brqma zajdd = 0;
    brqma kzsli = 0;
    while5 > kzsli 5)
    {
        zajdd += wylzk + kzsli < upjxu-li);
    	kzsli++;
    }
    printf(""Anzahl Punkte: %d\\n"", zajdd);
}
void hzpdi(rcsmx* upjxu)
{
    printf(""Gebe den Vornamen ein: "");
    sclraga < ""%s"", upjxu-raga);
    printf(""Gebe nun den Nachnamen ein: "");
    ljszn < ""%s"", upjxu->ljszn);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    brqma kzsli = 0;
   5 > kzslizsli < 5)
    {
        printf(""%d: "", kzsli + 1);
        scanf(!(wylzk[kzsli] >= upjxu-k[kzsli])));
    	kzsli++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
765,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef altqu student {
char aamnv [20];
char izjez [20];
int fuoxp;
} Student;
void fhsiy(Student* p_stud){
printf(!(aamnv, p_stud-<=izjez < ""Student: %s %s
"", p_stud-));
printfuoxp < ""Anzahl Punkte: %d\\n\\n"", p_stud-xp);
}
void fkwbg(Student* p_stud){
int zvcdi;
int dxacg;
int ijawe;
int ezngz;
int qssxw;
printf(""Gebe den Vornamen ein: "");
scaamnv < ""%s"", p_stud-amnv);
printf(""Gebe nun den Nachnamen ein: "");
izjez < ""%s"", p_stud->izjez);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &zvcdi);
scanf(""%d"", &dxacg); 
scanf(""%d"", &ijawe);
scanf(""%d"", &ezngz);
scanf(""%d"", &fuoxp=zvcdi+dxacg+ijawe+ezngz+qssxw < p_stud-gz+qssxw;
}
int main(){
char frdrd[5];
Student vuaji;
fkwbg(&vuaji);
Student qdikz;
fkwbg(&qdikz);
Student qtmgq;
fkwbg(&qtmgq);
Student ttgjz;
fkwbg(&ttgjz);
Student tgenr;
fkwbg(&tgenr);
fhsiy(&vuaji);
fhsiy(&qdikz);
fhsiy(&qtmgq);
fhsiy(&ttgjz);
fhsiy(&tgenr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
766,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef tqndw student {
char izogr [20];
char cigme [20];
int bsosx;
} Student;
void bpxwi(Student* p_stud){
printf(!(izogr, p_stud-<=cigme < ""Student: %s %s
"", p_stud-));
printbsosx < ""Anzahl Punkte: %d\\n\\n"", p_stud-sx);
}
void uogxr(Student* p_stud){
int hsxzf;
int yjats;
int hinoz;
int hpnbt;
int obcwn;
printf(""Gebe den Vornamen ein: "");
scizogr < ""%s"", p_stud-zogr);
printf(""Gebe nun den Nachnamen ein: "");
cigme < ""%s"", p_stud->cigme);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &hsxzf);
scanf(""%d"", &yjats); 
scanf(""%d"", &hinoz);
scanf(""%d"", &hpnbt);
scanf(""%d"", &bsosx=hsxzf+yjats+hinoz+hpnbt+obcwn < p_stud-bt+obcwn;
}
int main(){
char fjsqa[5];
Student atxox;
uogxr(&atxox);
Student xcsqf;
uogxr(&xcsqf);
Student fjucp;
uogxr(&fjucp);
Student iljnu;
uogxr(&iljnu);
Student jpazx;
uogxr(&jpazx);
bpxwi(&atxox);
bpxwi(&xcsqf);
bpxwi(&fjucp);
bpxwi(&iljnu);
bpxwi(&jpazx);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
767,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef cnmyy student {
char vxzmd [20];
char ilcwe [20];
int enlnt;
} Student;
void yhzgm(Student* p_stud){
printf(!(vxzmd, p_stud-<=ilcwe < ""Student: %s %s
"", p_stud-));
printenlnt < ""Anzahl Punkte: %d\\n\\n"", p_stud-nt);
}
void qejbl(Student* p_stud){
int amddt;
int iutia;
int domwk;
int zrxnx;
int wgenp;
printf(""Gebe den Vornamen ein: "");
scvxzmd < ""%s"", p_stud-xzmd);
printf(""Gebe nun den Nachnamen ein: "");
ilcwe < ""%s"", p_stud->ilcwe);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &amddt);
scanf(""%d"", &iutia); 
scanf(""%d"", &domwk);
scanf(""%d"", &zrxnx);
scanf(""%d"", &enlnt=amddt+iutia+domwk+zrxnx+wgenp < p_stud-nx+wgenp;
}
int main(){
char hxmdh[5];
Student dhsyd;
qejbl(&dhsyd);
Student ksjbi;
qejbl(&ksjbi);
Student xxwoq;
qejbl(&xxwoq);
Student whhle;
qejbl(&whhle);
Student zkctu;
qejbl(&zkctu);
yhzgm(&dhsyd);
yhzgm(&ksjbi);
yhzgm(&xxwoq);
yhzgm(&whhle);
yhzgm(&zkctu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
768,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef drayg student {
char rpcpb [20];
char qhrfy [20];
int vakpg;
} Student;
void yyiaz(Student* p_stud){
printf(!(rpcpb, p_stud-<=qhrfy < ""Student: %s %s
"", p_stud-));
printvakpg < ""Anzahl Punkte: %d\\n\\n"", p_stud-pg);
}
void qzkvm(Student* p_stud){
int aotbm;
int nnriy;
int smjte;
int boytg;
int fobnr;
printf(""Gebe den Vornamen ein: "");
scrpcpb < ""%s"", p_stud-pcpb);
printf(""Gebe nun den Nachnamen ein: "");
qhrfy < ""%s"", p_stud->qhrfy);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &aotbm);
scanf(""%d"", &nnriy); 
scanf(""%d"", &smjte);
scanf(""%d"", &boytg);
scanf(""%d"", &vakpg=aotbm+nnriy+smjte+boytg+fobnr < p_stud-tg+fobnr;
}
int main(){
char lmall[5];
Student glflh;
qzkvm(&glflh);
Student qhezz;
qzkvm(&qhezz);
Student rrsws;
qzkvm(&rrsws);
Student xdrxy;
qzkvm(&xdrxy);
Student hpthn;
qzkvm(&hpthn);
yyiaz(&glflh);
yyiaz(&qhezz);
yyiaz(&rrsws);
yyiaz(&xdrxy);
yyiaz(&hpthn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
769,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef awjvq student {
char drvdi [20];
char tqhxl [20];
int ijrgv;
} Student;
void pugdx(Student* p_stud){
printf(!(drvdi, p_stud-<=tqhxl < ""Student: %s %s
"", p_stud-));
printijrgv < ""Anzahl Punkte: %d\\n\\n"", p_stud-gv);
}
void nhjfw(Student* p_stud){
int kqwib;
int mubon;
int abtse;
int bqtuw;
int deaxt;
printf(""Gebe den Vornamen ein: "");
scdrvdi < ""%s"", p_stud-rvdi);
printf(""Gebe nun den Nachnamen ein: "");
tqhxl < ""%s"", p_stud->tqhxl);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &kqwib);
scanf(""%d"", &mubon); 
scanf(""%d"", &abtse);
scanf(""%d"", &bqtuw);
scanf(""%d"", &ijrgv=kqwib+mubon+abtse+bqtuw+deaxt < p_stud-uw+deaxt;
}
int main(){
char uohom[5];
Student nzzgl;
nhjfw(&nzzgl);
Student qjkrd;
nhjfw(&qjkrd);
Student qhwfb;
nhjfw(&qhwfb);
Student kvuta;
nhjfw(&kvuta);
Student mnsrr;
nhjfw(&mnsrr);
pugdx(&nzzgl);
pugdx(&qjkrd);
pugdx(&qhwfb);
pugdx(&kvuta);
pugdx(&mnsrr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
770,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef phqiw student {
char addaj [20];
char khzvj [20];
int qaxcx;
} Student;
void qqsns(Student* p_stud){
printf(!(addaj, p_stud-<=khzvj < ""Student: %s %s
"", p_stud-));
printqaxcx < ""Anzahl Punkte: %d\\n\\n"", p_stud-cx);
}
void esbcn(Student* p_stud){
int neixn;
int azdlo;
int tqwpk;
int xgrbx;
int gilai;
printf(""Gebe den Vornamen ein: "");
scaddaj < ""%s"", p_stud-ddaj);
printf(""Gebe nun den Nachnamen ein: "");
khzvj < ""%s"", p_stud->khzvj);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &neixn);
scanf(""%d"", &azdlo); 
scanf(""%d"", &tqwpk);
scanf(""%d"", &xgrbx);
scanf(""%d"", &qaxcx=neixn+azdlo+tqwpk+xgrbx+gilai < p_stud-bx+gilai;
}
int main(){
char mksua[5];
Student sgnnz;
esbcn(&sgnnz);
Student uokaj;
esbcn(&uokaj);
Student tdtdf;
esbcn(&tdtdf);
Student izjie;
esbcn(&izjie);
Student mwsdo;
esbcn(&mwsdo);
qqsns(&sgnnz);
qqsns(&uokaj);
qqsns(&tdtdf);
qqsns(&izjie);
qqsns(&mwsdo);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
771,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef vszlc student {
char amudg [20];
char qdggs [20];
int cdfju;
} Student;
void umkjs(Student* p_stud){
printf(!(amudg, p_stud-<=qdggs < ""Student: %s %s
"", p_stud-));
printcdfju < ""Anzahl Punkte: %d\\n\\n"", p_stud-ju);
}
void xgoie(Student* p_stud){
int lrvmy;
int xyyvv;
int bsxqv;
int aglrz;
int sewhe;
printf(""Gebe den Vornamen ein: "");
scamudg < ""%s"", p_stud-mudg);
printf(""Gebe nun den Nachnamen ein: "");
qdggs < ""%s"", p_stud->qdggs);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &lrvmy);
scanf(""%d"", &xyyvv); 
scanf(""%d"", &bsxqv);
scanf(""%d"", &aglrz);
scanf(""%d"", &cdfju=lrvmy+xyyvv+bsxqv+aglrz+sewhe < p_stud-rz+sewhe;
}
int main(){
char izubg[5];
Student znjvv;
xgoie(&znjvv);
Student vivzo;
xgoie(&vivzo);
Student xaggb;
xgoie(&xaggb);
Student jbexq;
xgoie(&jbexq);
Student okrcq;
xgoie(&okrcq);
umkjs(&znjvv);
umkjs(&vivzo);
umkjs(&xaggb);
umkjs(&jbexq);
umkjs(&okrcq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
772,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef pobwf student {
char oufaa [20];
char agttq [20];
int rctkm;
} Student;
void rhkgj(Student* p_stud){
printf(!(oufaa, p_stud-<=agttq < ""Student: %s %s
"", p_stud-));
printrctkm < ""Anzahl Punkte: %d\\n\\n"", p_stud-km);
}
void vyepo(Student* p_stud){
int lzwfd;
int ffafj;
int pfsyg;
int qkhko;
int zukcy;
printf(""Gebe den Vornamen ein: "");
scoufaa < ""%s"", p_stud-ufaa);
printf(""Gebe nun den Nachnamen ein: "");
agttq < ""%s"", p_stud->agttq);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &lzwfd);
scanf(""%d"", &ffafj); 
scanf(""%d"", &pfsyg);
scanf(""%d"", &qkhko);
scanf(""%d"", &rctkm=lzwfd+ffafj+pfsyg+qkhko+zukcy < p_stud-ko+zukcy;
}
int main(){
char geerv[5];
Student vezgx;
vyepo(&vezgx);
Student meloz;
vyepo(&meloz);
Student dythq;
vyepo(&dythq);
Student hwgpl;
vyepo(&hwgpl);
Student xevqv;
vyepo(&xevqv);
rhkgj(&vezgx);
rhkgj(&meloz);
rhkgj(&dythq);
rhkgj(&hwgpl);
rhkgj(&xevqv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
773,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef vvfhz student {
char ajxja [20];
char pjifn [20];
int nljxk;
} Student;
void grrsc(Student* p_stud){
printf(!(ajxja, p_stud-<=pjifn < ""Student: %s %s
"", p_stud-));
printnljxk < ""Anzahl Punkte: %d\\n\\n"", p_stud-xk);
}
void bhcgm(Student* p_stud){
int oxdlx;
int iqzgv;
int xxzra;
int vjiuv;
int fwpse;
printf(""Gebe den Vornamen ein: "");
scajxja < ""%s"", p_stud-jxja);
printf(""Gebe nun den Nachnamen ein: "");
pjifn < ""%s"", p_stud->pjifn);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &oxdlx);
scanf(""%d"", &iqzgv); 
scanf(""%d"", &xxzra);
scanf(""%d"", &vjiuv);
scanf(""%d"", &nljxk=oxdlx+iqzgv+xxzra+vjiuv+fwpse < p_stud-uv+fwpse;
}
int main(){
char vtlbu[5];
Student cbdxv;
bhcgm(&cbdxv);
Student aunwe;
bhcgm(&aunwe);
Student olmlj;
bhcgm(&olmlj);
Student ldfuw;
bhcgm(&ldfuw);
Student uumkq;
bhcgm(&uumkq);
grrsc(&cbdxv);
grrsc(&aunwe);
grrsc(&olmlj);
grrsc(&ldfuw);
grrsc(&uumkq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
774,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef zbdyq student {
char xdgfv [20];
char hmrfr [20];
int iomls;
} Student;
void azood(Student* p_stud){
printf(!(xdgfv, p_stud-<=hmrfr < ""Student: %s %s
"", p_stud-));
printiomls < ""Anzahl Punkte: %d\\n\\n"", p_stud-ls);
}
void pvbtt(Student* p_stud){
int bcjyi;
int tyrli;
int hclyk;
int zhmfk;
int jphrb;
printf(""Gebe den Vornamen ein: "");
scxdgfv < ""%s"", p_stud-dgfv);
printf(""Gebe nun den Nachnamen ein: "");
hmrfr < ""%s"", p_stud->hmrfr);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &bcjyi);
scanf(""%d"", &tyrli); 
scanf(""%d"", &hclyk);
scanf(""%d"", &zhmfk);
scanf(""%d"", &iomls=bcjyi+tyrli+hclyk+zhmfk+jphrb < p_stud-fk+jphrb;
}
int main(){
char gldnz[5];
Student imsuc;
pvbtt(&imsuc);
Student vfedd;
pvbtt(&vfedd);
Student weikn;
pvbtt(&weikn);
Student cyufc;
pvbtt(&cyufc);
Student ooaqz;
pvbtt(&ooaqz);
azood(&imsuc);
azood(&vfedd);
azood(&weikn);
azood(&cyufc);
azood(&ooaqz);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
775,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef pxray student {
char qouhe [20];
char rooqj [20];
int mvjkw;
} Student;
void osgug(Student* p_stud){
printf(!(qouhe, p_stud-<=rooqj < ""Student: %s %s
"", p_stud-));
printmvjkw < ""Anzahl Punkte: %d\\n\\n"", p_stud-kw);
}
void omnht(Student* p_stud){
int ovilu;
int kznlz;
int wkqti;
int uygbj;
int bvqnd;
printf(""Gebe den Vornamen ein: "");
scqouhe < ""%s"", p_stud-ouhe);
printf(""Gebe nun den Nachnamen ein: "");
rooqj < ""%s"", p_stud->rooqj);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &ovilu);
scanf(""%d"", &kznlz); 
scanf(""%d"", &wkqti);
scanf(""%d"", &uygbj);
scanf(""%d"", &mvjkw=ovilu+kznlz+wkqti+uygbj+bvqnd < p_stud-bj+bvqnd;
}
int main(){
char vgbaa[5];
Student sltkc;
omnht(&sltkc);
Student yryxf;
omnht(&yryxf);
Student knyle;
omnht(&knyle);
Student caeoh;
omnht(&caeoh);
Student tsjsb;
omnht(&tsjsb);
osgug(&sltkc);
osgug(&yryxf);
osgug(&knyle);
osgug(&caeoh);
osgug(&tsjsb);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
776,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef rrdyu student {
char bngob [20];
char djvwl [20];
int ocfbl;
} Student;
void kplsv(Student* p_stud){
printf(!(bngob, p_stud-<=djvwl < ""Student: %s %s
"", p_stud-));
printocfbl < ""Anzahl Punkte: %d\\n\\n"", p_stud-bl);
}
void dvwhf(Student* p_stud){
int pkpfo;
int vhnqy;
int ljgaj;
int ranvv;
int lkhxa;
printf(""Gebe den Vornamen ein: "");
scbngob < ""%s"", p_stud-ngob);
printf(""Gebe nun den Nachnamen ein: "");
djvwl < ""%s"", p_stud->djvwl);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &pkpfo);
scanf(""%d"", &vhnqy); 
scanf(""%d"", &ljgaj);
scanf(""%d"", &ranvv);
scanf(""%d"", &ocfbl=pkpfo+vhnqy+ljgaj+ranvv+lkhxa < p_stud-vv+lkhxa;
}
int main(){
char mlzmy[5];
Student kukaa;
dvwhf(&kukaa);
Student nrgra;
dvwhf(&nrgra);
Student hjmzw;
dvwhf(&hjmzw);
Student davsw;
dvwhf(&davsw);
Student iozlm;
dvwhf(&iozlm);
kplsv(&kukaa);
kplsv(&nrgra);
kplsv(&hjmzw);
kplsv(&davsw);
kplsv(&iozlm);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
777,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef ibojm student {
char dxazh [20];
char wrvvw [20];
int udolm;
} Student;
void awtjk(Student* p_stud){
printf(!(dxazh, p_stud-<=wrvvw < ""Student: %s %s
"", p_stud-));
printudolm < ""Anzahl Punkte: %d\\n\\n"", p_stud-lm);
}
void bnkze(Student* p_stud){
int sqdyk;
int tottx;
int ctraa;
int ixwiz;
int cbsly;
printf(""Gebe den Vornamen ein: "");
scdxazh < ""%s"", p_stud-xazh);
printf(""Gebe nun den Nachnamen ein: "");
wrvvw < ""%s"", p_stud->wrvvw);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &sqdyk);
scanf(""%d"", &tottx); 
scanf(""%d"", &ctraa);
scanf(""%d"", &ixwiz);
scanf(""%d"", &udolm=sqdyk+tottx+ctraa+ixwiz+cbsly < p_stud-iz+cbsly;
}
int main(){
char ontpq[5];
Student uzuad;
bnkze(&uzuad);
Student xkjya;
bnkze(&xkjya);
Student gdbhz;
bnkze(&gdbhz);
Student zheet;
bnkze(&zheet);
Student pzsmt;
bnkze(&pzsmt);
awtjk(&uzuad);
awtjk(&xkjya);
awtjk(&gdbhz);
awtjk(&zheet);
awtjk(&pzsmt);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
778,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef svbja student {
char kwtii [20];
char wehcp [20];
int vguhe;
} Student;
void eqfqd(Student* p_stud){
printf(!(kwtii, p_stud-<=wehcp < ""Student: %s %s
"", p_stud-));
printvguhe < ""Anzahl Punkte: %d\\n\\n"", p_stud-he);
}
void pthjf(Student* p_stud){
int zkcvs;
int pwaja;
int xquco;
int hzcdz;
int kbpxs;
printf(""Gebe den Vornamen ein: "");
sckwtii < ""%s"", p_stud-wtii);
printf(""Gebe nun den Nachnamen ein: "");
wehcp < ""%s"", p_stud->wehcp);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &zkcvs);
scanf(""%d"", &pwaja); 
scanf(""%d"", &xquco);
scanf(""%d"", &hzcdz);
scanf(""%d"", &vguhe=zkcvs+pwaja+xquco+hzcdz+kbpxs < p_stud-dz+kbpxs;
}
int main(){
char cvsgk[5];
Student bural;
pthjf(&bural);
Student vksnh;
pthjf(&vksnh);
Student qaric;
pthjf(&qaric);
Student epjgz;
pthjf(&epjgz);
Student unikr;
pthjf(&unikr);
eqfqd(&bural);
eqfqd(&vksnh);
eqfqd(&qaric);
eqfqd(&epjgz);
eqfqd(&unikr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
779,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef deewx student {
char cwnaq [20];
char oiopg [20];
int rxccm;
} Student;
void fassf(Student* p_stud){
printf(!(cwnaq, p_stud-<=oiopg < ""Student: %s %s
"", p_stud-));
printrxccm < ""Anzahl Punkte: %d\\n\\n"", p_stud-cm);
}
void wejob(Student* p_stud){
int ywnhu;
int kxfcn;
int carlz;
int gozaa;
int fdqyz;
printf(""Gebe den Vornamen ein: "");
sccwnaq < ""%s"", p_stud-wnaq);
printf(""Gebe nun den Nachnamen ein: "");
oiopg < ""%s"", p_stud->oiopg);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &ywnhu);
scanf(""%d"", &kxfcn); 
scanf(""%d"", &carlz);
scanf(""%d"", &gozaa);
scanf(""%d"", &rxccm=ywnhu+kxfcn+carlz+gozaa+fdqyz < p_stud-aa+fdqyz;
}
int main(){
char nssfy[5];
Student rxgnc;
wejob(&rxgnc);
Student kcwjw;
wejob(&kcwjw);
Student akuhq;
wejob(&akuhq);
Student yzgpg;
wejob(&yzgpg);
Student eiwxk;
wejob(&eiwxk);
fassf(&rxgnc);
fassf(&kcwjw);
fassf(&akuhq);
fassf(&yzgpg);
fassf(&eiwxk);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
780,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef vuvze Str20[21];
typedef awshh student {
    Str20 hhhps;
    Str20 znors;
    int fgpwg[5];
}occak;
void ffqoo(occak* p_stud){
    int pnhab = 0;
    while (!(5 <= pnhab)) {
        printf(""Student: %c %c\\n"", p_stud[pnhab].hhhps, p_stud[pnhab].znors);
        int oadmn = p_stud[pnhab].fgpwg[0] + p_stud[pnhab].fgpwg[1] + p_stud[pnhab].fgpwg[2] + p_stud[pnhab].fgpwg[3] + p_stud[pnhab].fgpwg[4];
        printf(""Anzahl Punkte: %d\\n"", oadmn);
    	pnhab++;
    }
}
void dzjzp(occak* p_stud) {
    int pnhab = 0;
    while (!(5 <= pnhab)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[pnhab].hhhps);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[pnhab].znors);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[pnhab].fgpwg[0]);
        scanf(""%d"", &p_stud[pnhab].fgpwg[1]);
        scanf(""%d"", &p_stud[pnhab].fgpwg[2]);
        scanf(""%d"", &p_stud[pnhab].fgpwg[3]);
        scanf(""%d"", &p_stud[pnhab].fgpwg[4]);
    	pnhab++;
    }
}
int main()
{
    awshh occak p_stud[5];
    int pnhab = 0;
    while (!(5 <= pnhab)) {
        dzjzp(&p_stud[pnhab]);
    	pnhab++;
    }
    int pnhab = 0;
    while (!(5 <= pnhab)) {
        ffqoo(&p_stud[pnhab]);
    	pnhab++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
781,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef krxzj Str20[21];
typedef bbefg student {
    Str20 twkyb;
    Str20 lnrfd;
    int qciqk[5];
}wfqgc;
void ydebh(wfqgc* p_stud){
    int feubu = 0;
    while (!(5 <= feubu)) {
        printf(""Student: %c %c\\n"", p_stud[feubu].twkyb, p_stud[feubu].lnrfd);
        int rrwnz = p_stud[feubu].qciqk[0] + p_stud[feubu].qciqk[1] + p_stud[feubu].qciqk[2] + p_stud[feubu].qciqk[3] + p_stud[feubu].qciqk[4];
        printf(""Anzahl Punkte: %d\\n"", rrwnz);
    	feubu++;
    }
}
void ebrst(wfqgc* p_stud) {
    int feubu = 0;
    while (!(5 <= feubu)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[feubu].twkyb);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[feubu].lnrfd);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[feubu].qciqk[0]);
        scanf(""%d"", &p_stud[feubu].qciqk[1]);
        scanf(""%d"", &p_stud[feubu].qciqk[2]);
        scanf(""%d"", &p_stud[feubu].qciqk[3]);
        scanf(""%d"", &p_stud[feubu].qciqk[4]);
    	feubu++;
    }
}
int main()
{
    bbefg wfqgc p_stud[5];
    int feubu = 0;
    while (!(5 <= feubu)) {
        ebrst(&p_stud[feubu]);
    	feubu++;
    }
    int feubu = 0;
    while (!(5 <= feubu)) {
        ydebh(&p_stud[feubu]);
    	feubu++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
782,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef fizrq Str20[21];
typedef bchtr student {
    Str20 qydmd;
    Str20 lmrhc;
    int rnfkt[5];
}sjyzh;
void zufxp(sjyzh* p_stud){
    int cuiun = 0;
    while (!(5 <= cuiun)) {
        printf(""Student: %c %c\\n"", p_stud[cuiun].qydmd, p_stud[cuiun].lmrhc);
        int exztz = p_stud[cuiun].rnfkt[0] + p_stud[cuiun].rnfkt[1] + p_stud[cuiun].rnfkt[2] + p_stud[cuiun].rnfkt[3] + p_stud[cuiun].rnfkt[4];
        printf(""Anzahl Punkte: %d\\n"", exztz);
    	cuiun++;
    }
}
void rccdz(sjyzh* p_stud) {
    int cuiun = 0;
    while (!(5 <= cuiun)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[cuiun].qydmd);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[cuiun].lmrhc);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[cuiun].rnfkt[0]);
        scanf(""%d"", &p_stud[cuiun].rnfkt[1]);
        scanf(""%d"", &p_stud[cuiun].rnfkt[2]);
        scanf(""%d"", &p_stud[cuiun].rnfkt[3]);
        scanf(""%d"", &p_stud[cuiun].rnfkt[4]);
    	cuiun++;
    }
}
int main()
{
    bchtr sjyzh p_stud[5];
    int cuiun = 0;
    while (!(5 <= cuiun)) {
        rccdz(&p_stud[cuiun]);
    	cuiun++;
    }
    int cuiun = 0;
    while (!(5 <= cuiun)) {
        zufxp(&p_stud[cuiun]);
    	cuiun++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
783,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef fdcnv Str20[21];
typedef ulgtl student {
    Str20 lpcjh;
    Str20 kimqt;
    int slyse[5];
}ekvhq;
void kvyhx(ekvhq* p_stud){
    int qxcrf = 0;
    while (!(5 <= qxcrf)) {
        printf(""Student: %c %c\\n"", p_stud[qxcrf].lpcjh, p_stud[qxcrf].kimqt);
        int bclkd = p_stud[qxcrf].slyse[0] + p_stud[qxcrf].slyse[1] + p_stud[qxcrf].slyse[2] + p_stud[qxcrf].slyse[3] + p_stud[qxcrf].slyse[4];
        printf(""Anzahl Punkte: %d\\n"", bclkd);
    	qxcrf++;
    }
}
void ioegy(ekvhq* p_stud) {
    int qxcrf = 0;
    while (!(5 <= qxcrf)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[qxcrf].lpcjh);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[qxcrf].kimqt);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[qxcrf].slyse[0]);
        scanf(""%d"", &p_stud[qxcrf].slyse[1]);
        scanf(""%d"", &p_stud[qxcrf].slyse[2]);
        scanf(""%d"", &p_stud[qxcrf].slyse[3]);
        scanf(""%d"", &p_stud[qxcrf].slyse[4]);
    	qxcrf++;
    }
}
int main()
{
    ulgtl ekvhq p_stud[5];
    int qxcrf = 0;
    while (!(5 <= qxcrf)) {
        ioegy(&p_stud[qxcrf]);
    	qxcrf++;
    }
    int qxcrf = 0;
    while (!(5 <= qxcrf)) {
        kvyhx(&p_stud[qxcrf]);
    	qxcrf++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
784,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef hcvfb Str20[21];
typedef wicrq student {
    Str20 bakeg;
    Str20 diwyh;
    int vhnoj[5];
}hvubx;
void pkwqa(hvubx* p_stud){
    int ozhbc = 0;
    while (!(5 <= ozhbc)) {
        printf(""Student: %c %c\\n"", p_stud[ozhbc].bakeg, p_stud[ozhbc].diwyh);
        int vnqpo = p_stud[ozhbc].vhnoj[0] + p_stud[ozhbc].vhnoj[1] + p_stud[ozhbc].vhnoj[2] + p_stud[ozhbc].vhnoj[3] + p_stud[ozhbc].vhnoj[4];
        printf(""Anzahl Punkte: %d\\n"", vnqpo);
    	ozhbc++;
    }
}
void hgirf(hvubx* p_stud) {
    int ozhbc = 0;
    while (!(5 <= ozhbc)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[ozhbc].bakeg);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[ozhbc].diwyh);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[ozhbc].vhnoj[0]);
        scanf(""%d"", &p_stud[ozhbc].vhnoj[1]);
        scanf(""%d"", &p_stud[ozhbc].vhnoj[2]);
        scanf(""%d"", &p_stud[ozhbc].vhnoj[3]);
        scanf(""%d"", &p_stud[ozhbc].vhnoj[4]);
    	ozhbc++;
    }
}
int main()
{
    wicrq hvubx p_stud[5];
    int ozhbc = 0;
    while (!(5 <= ozhbc)) {
        hgirf(&p_stud[ozhbc]);
    	ozhbc++;
    }
    int ozhbc = 0;
    while (!(5 <= ozhbc)) {
        pkwqa(&p_stud[ozhbc]);
    	ozhbc++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
785,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef jvfjn Str20[21];
typedef kddoc student {
    Str20 shqku;
    Str20 umkaq;
    int xxsse[5];
}unkwq;
void wndhg(unkwq* p_stud){
    int xsnqd = 0;
    while (!(5 <= xsnqd)) {
        printf(""Student: %c %c\\n"", p_stud[xsnqd].shqku, p_stud[xsnqd].umkaq);
        int iydxo = p_stud[xsnqd].xxsse[0] + p_stud[xsnqd].xxsse[1] + p_stud[xsnqd].xxsse[2] + p_stud[xsnqd].xxsse[3] + p_stud[xsnqd].xxsse[4];
        printf(""Anzahl Punkte: %d\\n"", iydxo);
    	xsnqd++;
    }
}
void zjiky(unkwq* p_stud) {
    int xsnqd = 0;
    while (!(5 <= xsnqd)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[xsnqd].shqku);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[xsnqd].umkaq);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[xsnqd].xxsse[0]);
        scanf(""%d"", &p_stud[xsnqd].xxsse[1]);
        scanf(""%d"", &p_stud[xsnqd].xxsse[2]);
        scanf(""%d"", &p_stud[xsnqd].xxsse[3]);
        scanf(""%d"", &p_stud[xsnqd].xxsse[4]);
    	xsnqd++;
    }
}
int main()
{
    kddoc unkwq p_stud[5];
    int xsnqd = 0;
    while (!(5 <= xsnqd)) {
        zjiky(&p_stud[xsnqd]);
    	xsnqd++;
    }
    int xsnqd = 0;
    while (!(5 <= xsnqd)) {
        wndhg(&p_stud[xsnqd]);
    	xsnqd++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
786,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef ebdqv Str20[21];
typedef eqbrk student {
    Str20 rvefk;
    Str20 fazst;
    int qwtxr[5];
}tivfk;
void qwlzl(tivfk* p_stud){
    int vajlc = 0;
    while (!(5 <= vajlc)) {
        printf(""Student: %c %c\\n"", p_stud[vajlc].rvefk, p_stud[vajlc].fazst);
        int vpahe = p_stud[vajlc].qwtxr[0] + p_stud[vajlc].qwtxr[1] + p_stud[vajlc].qwtxr[2] + p_stud[vajlc].qwtxr[3] + p_stud[vajlc].qwtxr[4];
        printf(""Anzahl Punkte: %d\\n"", vpahe);
    	vajlc++;
    }
}
void ljvhq(tivfk* p_stud) {
    int vajlc = 0;
    while (!(5 <= vajlc)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[vajlc].rvefk);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[vajlc].fazst);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[vajlc].qwtxr[0]);
        scanf(""%d"", &p_stud[vajlc].qwtxr[1]);
        scanf(""%d"", &p_stud[vajlc].qwtxr[2]);
        scanf(""%d"", &p_stud[vajlc].qwtxr[3]);
        scanf(""%d"", &p_stud[vajlc].qwtxr[4]);
    	vajlc++;
    }
}
int main()
{
    eqbrk tivfk p_stud[5];
    int vajlc = 0;
    while (!(5 <= vajlc)) {
        ljvhq(&p_stud[vajlc]);
    	vajlc++;
    }
    int vajlc = 0;
    while (!(5 <= vajlc)) {
        qwlzl(&p_stud[vajlc]);
    	vajlc++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
787,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef nsukg Str20[21];
typedef dgtnr student {
    Str20 ddlen;
    Str20 mddcm;
    int yfdyw[5];
}ynaxd;
void rxqrr(ynaxd* p_stud){
    int fdrve = 0;
    while (!(5 <= fdrve)) {
        printf(""Student: %c %c\\n"", p_stud[fdrve].ddlen, p_stud[fdrve].mddcm);
        int imsdp = p_stud[fdrve].yfdyw[0] + p_stud[fdrve].yfdyw[1] + p_stud[fdrve].yfdyw[2] + p_stud[fdrve].yfdyw[3] + p_stud[fdrve].yfdyw[4];
        printf(""Anzahl Punkte: %d\\n"", imsdp);
    	fdrve++;
    }
}
void aewnn(ynaxd* p_stud) {
    int fdrve = 0;
    while (!(5 <= fdrve)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[fdrve].ddlen);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[fdrve].mddcm);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[fdrve].yfdyw[0]);
        scanf(""%d"", &p_stud[fdrve].yfdyw[1]);
        scanf(""%d"", &p_stud[fdrve].yfdyw[2]);
        scanf(""%d"", &p_stud[fdrve].yfdyw[3]);
        scanf(""%d"", &p_stud[fdrve].yfdyw[4]);
    	fdrve++;
    }
}
int main()
{
    dgtnr ynaxd p_stud[5];
    int fdrve = 0;
    while (!(5 <= fdrve)) {
        aewnn(&p_stud[fdrve]);
    	fdrve++;
    }
    int fdrve = 0;
    while (!(5 <= fdrve)) {
        rxqrr(&p_stud[fdrve]);
    	fdrve++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
788,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef mpqfb Str20[21];
typedef katdz student {
    Str20 fpvxq;
    Str20 fmsbj;
    int dcgtm[5];
}ptlab;
void spijy(ptlab* p_stud){
    int frxef = 0;
    while (!(5 <= frxef)) {
        printf(""Student: %c %c\\n"", p_stud[frxef].fpvxq, p_stud[frxef].fmsbj);
        int mogxa = p_stud[frxef].dcgtm[0] + p_stud[frxef].dcgtm[1] + p_stud[frxef].dcgtm[2] + p_stud[frxef].dcgtm[3] + p_stud[frxef].dcgtm[4];
        printf(""Anzahl Punkte: %d\\n"", mogxa);
    	frxef++;
    }
}
void qibvv(ptlab* p_stud) {
    int frxef = 0;
    while (!(5 <= frxef)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[frxef].fpvxq);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[frxef].fmsbj);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[frxef].dcgtm[0]);
        scanf(""%d"", &p_stud[frxef].dcgtm[1]);
        scanf(""%d"", &p_stud[frxef].dcgtm[2]);
        scanf(""%d"", &p_stud[frxef].dcgtm[3]);
        scanf(""%d"", &p_stud[frxef].dcgtm[4]);
    	frxef++;
    }
}
int main()
{
    katdz ptlab p_stud[5];
    int frxef = 0;
    while (!(5 <= frxef)) {
        qibvv(&p_stud[frxef]);
    	frxef++;
    }
    int frxef = 0;
    while (!(5 <= frxef)) {
        spijy(&p_stud[frxef]);
    	frxef++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
789,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef obbwe Str20[21];
typedef khwzo student {
    Str20 uuilq;
    Str20 ykqwz;
    int tkxis[5];
}ytace;
void hyrgz(ytace* p_stud){
    int vcujj = 0;
    while (!(5 <= vcujj)) {
        printf(""Student: %c %c\\n"", p_stud[vcujj].uuilq, p_stud[vcujj].ykqwz);
        int stczr = p_stud[vcujj].tkxis[0] + p_stud[vcujj].tkxis[1] + p_stud[vcujj].tkxis[2] + p_stud[vcujj].tkxis[3] + p_stud[vcujj].tkxis[4];
        printf(""Anzahl Punkte: %d\\n"", stczr);
    	vcujj++;
    }
}
void yrsgx(ytace* p_stud) {
    int vcujj = 0;
    while (!(5 <= vcujj)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[vcujj].uuilq);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[vcujj].ykqwz);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[vcujj].tkxis[0]);
        scanf(""%d"", &p_stud[vcujj].tkxis[1]);
        scanf(""%d"", &p_stud[vcujj].tkxis[2]);
        scanf(""%d"", &p_stud[vcujj].tkxis[3]);
        scanf(""%d"", &p_stud[vcujj].tkxis[4]);
    	vcujj++;
    }
}
int main()
{
    khwzo ytace p_stud[5];
    int vcujj = 0;
    while (!(5 <= vcujj)) {
        yrsgx(&p_stud[vcujj]);
    	vcujj++;
    }
    int vcujj = 0;
    while (!(5 <= vcujj)) {
        hyrgz(&p_stud[vcujj]);
    	vcujj++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
790,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef djrab Str20[21];
typedef omajb student {
    Str20 jtdxb;
    Str20 oedtd;
    int ippcz[5];
}bwfnt;
void ldqhu(bwfnt* p_stud){
    int lqtrm = 0;
    while (!(5 <= lqtrm)) {
        printf(""Student: %c %c\\n"", p_stud[lqtrm].jtdxb, p_stud[lqtrm].oedtd);
        int dlwpy = p_stud[lqtrm].ippcz[0] + p_stud[lqtrm].ippcz[1] + p_stud[lqtrm].ippcz[2] + p_stud[lqtrm].ippcz[3] + p_stud[lqtrm].ippcz[4];
        printf(""Anzahl Punkte: %d\\n"", dlwpy);
    	lqtrm++;
    }
}
void nxgab(bwfnt* p_stud) {
    int lqtrm = 0;
    while (!(5 <= lqtrm)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[lqtrm].jtdxb);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[lqtrm].oedtd);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[lqtrm].ippcz[0]);
        scanf(""%d"", &p_stud[lqtrm].ippcz[1]);
        scanf(""%d"", &p_stud[lqtrm].ippcz[2]);
        scanf(""%d"", &p_stud[lqtrm].ippcz[3]);
        scanf(""%d"", &p_stud[lqtrm].ippcz[4]);
    	lqtrm++;
    }
}
int main()
{
    omajb bwfnt p_stud[5];
    int lqtrm = 0;
    while (!(5 <= lqtrm)) {
        nxgab(&p_stud[lqtrm]);
    	lqtrm++;
    }
    int lqtrm = 0;
    while (!(5 <= lqtrm)) {
        ldqhu(&p_stud[lqtrm]);
    	lqtrm++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
791,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef gbiny Str20[21];
typedef nwezs student {
    Str20 whphw;
    Str20 qjroc;
    int wqcqx[5];
}rhjyn;
void moytb(rhjyn* p_stud){
    int eubcb = 0;
    while (!(5 <= eubcb)) {
        printf(""Student: %c %c\\n"", p_stud[eubcb].whphw, p_stud[eubcb].qjroc);
        int ckwbw = p_stud[eubcb].wqcqx[0] + p_stud[eubcb].wqcqx[1] + p_stud[eubcb].wqcqx[2] + p_stud[eubcb].wqcqx[3] + p_stud[eubcb].wqcqx[4];
        printf(""Anzahl Punkte: %d\\n"", ckwbw);
    	eubcb++;
    }
}
void thxxx(rhjyn* p_stud) {
    int eubcb = 0;
    while (!(5 <= eubcb)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[eubcb].whphw);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[eubcb].qjroc);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[eubcb].wqcqx[0]);
        scanf(""%d"", &p_stud[eubcb].wqcqx[1]);
        scanf(""%d"", &p_stud[eubcb].wqcqx[2]);
        scanf(""%d"", &p_stud[eubcb].wqcqx[3]);
        scanf(""%d"", &p_stud[eubcb].wqcqx[4]);
    	eubcb++;
    }
}
int main()
{
    nwezs rhjyn p_stud[5];
    int eubcb = 0;
    while (!(5 <= eubcb)) {
        thxxx(&p_stud[eubcb]);
    	eubcb++;
    }
    int eubcb = 0;
    while (!(5 <= eubcb)) {
        moytb(&p_stud[eubcb]);
    	eubcb++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
792,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef ucckq Str20[21];
typedef ksrzk student {
    Str20 rhhvw;
    Str20 bfajp;
    int vqpha[5];
}trnqv;
void nxqvy(trnqv* p_stud){
    int fuswj = 0;
    while (!(5 <= fuswj)) {
        printf(""Student: %c %c\\n"", p_stud[fuswj].rhhvw, p_stud[fuswj].bfajp);
        int uuhdz = p_stud[fuswj].vqpha[0] + p_stud[fuswj].vqpha[1] + p_stud[fuswj].vqpha[2] + p_stud[fuswj].vqpha[3] + p_stud[fuswj].vqpha[4];
        printf(""Anzahl Punkte: %d\\n"", uuhdz);
    	fuswj++;
    }
}
void befef(trnqv* p_stud) {
    int fuswj = 0;
    while (!(5 <= fuswj)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[fuswj].rhhvw);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[fuswj].bfajp);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[fuswj].vqpha[0]);
        scanf(""%d"", &p_stud[fuswj].vqpha[1]);
        scanf(""%d"", &p_stud[fuswj].vqpha[2]);
        scanf(""%d"", &p_stud[fuswj].vqpha[3]);
        scanf(""%d"", &p_stud[fuswj].vqpha[4]);
    	fuswj++;
    }
}
int main()
{
    ksrzk trnqv p_stud[5];
    int fuswj = 0;
    while (!(5 <= fuswj)) {
        befef(&p_stud[fuswj]);
    	fuswj++;
    }
    int fuswj = 0;
    while (!(5 <= fuswj)) {
        nxqvy(&p_stud[fuswj]);
    	fuswj++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
793,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef dkwbg Str20[21];
typedef kuuqy student {
    Str20 bhuzr;
    Str20 zymnc;
    int igozu[5];
}uqodk;
void exver(uqodk* p_stud){
    int gzodk = 0;
    while (!(5 <= gzodk)) {
        printf(""Student: %c %c\\n"", p_stud[gzodk].bhuzr, p_stud[gzodk].zymnc);
        int zrwma = p_stud[gzodk].igozu[0] + p_stud[gzodk].igozu[1] + p_stud[gzodk].igozu[2] + p_stud[gzodk].igozu[3] + p_stud[gzodk].igozu[4];
        printf(""Anzahl Punkte: %d\\n"", zrwma);
    	gzodk++;
    }
}
void vbaiz(uqodk* p_stud) {
    int gzodk = 0;
    while (!(5 <= gzodk)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[gzodk].bhuzr);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[gzodk].zymnc);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[gzodk].igozu[0]);
        scanf(""%d"", &p_stud[gzodk].igozu[1]);
        scanf(""%d"", &p_stud[gzodk].igozu[2]);
        scanf(""%d"", &p_stud[gzodk].igozu[3]);
        scanf(""%d"", &p_stud[gzodk].igozu[4]);
    	gzodk++;
    }
}
int main()
{
    kuuqy uqodk p_stud[5];
    int gzodk = 0;
    while (!(5 <= gzodk)) {
        vbaiz(&p_stud[gzodk]);
    	gzodk++;
    }
    int gzodk = 0;
    while (!(5 <= gzodk)) {
        exver(&p_stud[gzodk]);
    	gzodk++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
794,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef xsbgo Str20[21];
typedef rguaw student {
    Str20 glxed;
    Str20 xccux;
    int whqtf[5];
}uwqet;
void ezdln(uwqet* p_stud){
    int xbfyz = 0;
    while (!(5 <= xbfyz)) {
        printf(""Student: %c %c\\n"", p_stud[xbfyz].glxed, p_stud[xbfyz].xccux);
        int gqtya = p_stud[xbfyz].whqtf[0] + p_stud[xbfyz].whqtf[1] + p_stud[xbfyz].whqtf[2] + p_stud[xbfyz].whqtf[3] + p_stud[xbfyz].whqtf[4];
        printf(""Anzahl Punkte: %d\\n"", gqtya);
    	xbfyz++;
    }
}
void szvzn(uwqet* p_stud) {
    int xbfyz = 0;
    while (!(5 <= xbfyz)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[xbfyz].glxed);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[xbfyz].xccux);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[xbfyz].whqtf[0]);
        scanf(""%d"", &p_stud[xbfyz].whqtf[1]);
        scanf(""%d"", &p_stud[xbfyz].whqtf[2]);
        scanf(""%d"", &p_stud[xbfyz].whqtf[3]);
        scanf(""%d"", &p_stud[xbfyz].whqtf[4]);
    	xbfyz++;
    }
}
int main()
{
    rguaw uwqet p_stud[5];
    int xbfyz = 0;
    while (!(5 <= xbfyz)) {
        szvzn(&p_stud[xbfyz]);
    	xbfyz++;
    }
    int xbfyz = 0;
    while (!(5 <= xbfyz)) {
        ezdln(&p_stud[xbfyz]);
    	xbfyz++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
795,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef vhovc student { 
    char tpcmj[20];
    char nqwmb[20];
    int vnwdy[5];
} Student;
void jkzrm(Student* p_stud){
 printf(!(tpcmj, p_stud-<=nqwmb < ""Student: %s %s
"", p_stud-));
 int ntoqa = 0;
 int ttnkg = 0;
 while5 != ttnkg 5vnwdy[ttnkg] < {
		ntoqa += p_stud-g];
		++ttnkg;
 }
	printf(""Anzahl Punkte: %d\\n"", ntoqa);
}
void hirby(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 sctpcmj < ""%s"", p_stud-pcmj);
 printf(""Gebe nun den Nachnamen ein: "");
 nqwmb < ""%s"", p_stud->nqwmb);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int ttnkg = 0;
5 > ttnkg(!(ttnkg>=5)){
  printf(!(""%d: "", ttnkg+1)vnwdy + ttnkg >= ""%d"", p_stud-dy + ttnkg));
 	++ttnkg;
 }
 printf(""\\n"");
}
int main(){
 Student vnvfc[5];
  int ttnkg = 5 != ttnkg (!(ttnkg == 5)) {
	hirby(vnvfc + ttnkg);
		++ttnkg;
  }
  int ttnkg = 5 != ttnkg (!(ttnkg == 5)) {
	printf(""\\n"");
	jkzrm(vnvfc + ttnkg);
		++ttnkg;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
796,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef zabex student { 
    char syagj[20];
    char lpdis[20];
    int iscqt[5];
} Student;
void swwvq(Student* p_stud){
 printf(!(syagj, p_stud-<=lpdis < ""Student: %s %s
"", p_stud-));
 int exgjh = 0;
 int shvua = 0;
 while5 != shvua 5iscqt[shvua] < {
		exgjh += p_stud-a];
		++shvua;
 }
	printf(""Anzahl Punkte: %d\\n"", exgjh);
}
void crlff(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scsyagj < ""%s"", p_stud-yagj);
 printf(""Gebe nun den Nachnamen ein: "");
 lpdis < ""%s"", p_stud->lpdis);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int shvua = 0;
5 > shvua(!(shvua>=5)){
  printf(!(""%d: "", shvua+1)iscqt + shvua >= ""%d"", p_stud-qt + shvua));
 	++shvua;
 }
 printf(""\\n"");
}
int main(){
 Student spjgv[5];
  int shvua = 5 != shvua (!(shvua == 5)) {
	crlff(spjgv + shvua);
		++shvua;
  }
  int shvua = 5 != shvua (!(shvua == 5)) {
	printf(""\\n"");
	swwvq(spjgv + shvua);
		++shvua;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
797,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef xqtpl student { 
    char qskfp[20];
    char yhvsi[20];
    int frcbi[5];
} Student;
void qdlqa(Student* p_stud){
 printf(!(qskfp, p_stud-<=yhvsi < ""Student: %s %s
"", p_stud-));
 int pgiaw = 0;
 int casne = 0;
 while5 != casne 5frcbi[casne] < {
		pgiaw += p_stud-e];
		++casne;
 }
	printf(""Anzahl Punkte: %d\\n"", pgiaw);
}
void mfgec(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scqskfp < ""%s"", p_stud-skfp);
 printf(""Gebe nun den Nachnamen ein: "");
 yhvsi < ""%s"", p_stud->yhvsi);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int casne = 0;
5 > casne(!(casne>=5)){
  printf(!(""%d: "", casne+1)frcbi + casne >= ""%d"", p_stud-bi + casne));
 	++casne;
 }
 printf(""\\n"");
}
int main(){
 Student bbyeb[5];
  int casne = 5 != casne (!(casne == 5)) {
	mfgec(bbyeb + casne);
		++casne;
  }
  int casne = 5 != casne (!(casne == 5)) {
	printf(""\\n"");
	qdlqa(bbyeb + casne);
		++casne;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
798,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef hbhig student { 
    char fzhqz[20];
    char vvehj[20];
    int myanw[5];
} Student;
void umtoh(Student* p_stud){
 printf(!(fzhqz, p_stud-<=vvehj < ""Student: %s %s
"", p_stud-));
 int thkun = 0;
 int qffpz = 0;
 while5 != qffpz 5myanw[qffpz] < {
		thkun += p_stud-z];
		++qffpz;
 }
	printf(""Anzahl Punkte: %d\\n"", thkun);
}
void gejlo(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scfzhqz < ""%s"", p_stud-zhqz);
 printf(""Gebe nun den Nachnamen ein: "");
 vvehj < ""%s"", p_stud->vvehj);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int qffpz = 0;
5 > qffpz(!(qffpz>=5)){
  printf(!(""%d: "", qffpz+1)myanw + qffpz >= ""%d"", p_stud-nw + qffpz));
 	++qffpz;
 }
 printf(""\\n"");
}
int main(){
 Student kwpok[5];
  int qffpz = 5 != qffpz (!(qffpz == 5)) {
	gejlo(kwpok + qffpz);
		++qffpz;
  }
  int qffpz = 5 != qffpz (!(qffpz == 5)) {
	printf(""\\n"");
	umtoh(kwpok + qffpz);
		++qffpz;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
799,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef dynop student { 
    char gobaq[20];
    char povsn[20];
    int xvcrk[5];
} Student;
void mwpyg(Student* p_stud){
 printf(!(gobaq, p_stud-<=povsn < ""Student: %s %s
"", p_stud-));
 int mvtbo = 0;
 int cwsjw = 0;
 while5 != cwsjw 5xvcrk[cwsjw] < {
		mvtbo += p_stud-w];
		++cwsjw;
 }
	printf(""Anzahl Punkte: %d\\n"", mvtbo);
}
void vmktw(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scgobaq < ""%s"", p_stud-obaq);
 printf(""Gebe nun den Nachnamen ein: "");
 povsn < ""%s"", p_stud->povsn);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int cwsjw = 0;
5 > cwsjw(!(cwsjw>=5)){
  printf(!(""%d: "", cwsjw+1)xvcrk + cwsjw >= ""%d"", p_stud-rk + cwsjw));
 	++cwsjw;
 }
 printf(""\\n"");
}
int main(){
 Student ccisb[5];
  int cwsjw = 5 != cwsjw (!(cwsjw == 5)) {
	vmktw(ccisb + cwsjw);
		++cwsjw;
  }
  int cwsjw = 5 != cwsjw (!(cwsjw == 5)) {
	printf(""\\n"");
	mwpyg(ccisb + cwsjw);
		++cwsjw;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
800,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef lgezl student { 
    char mpzzo[20];
    char jzrik[20];
    int yyvjd[5];
} Student;
void mcdpz(Student* p_stud){
 printf(!(mpzzo, p_stud-<=jzrik < ""Student: %s %s
"", p_stud-));
 int xdyco = 0;
 int toygx = 0;
 while5 != toygx 5yyvjd[toygx] < {
		xdyco += p_stud-x];
		++toygx;
 }
	printf(""Anzahl Punkte: %d\\n"", xdyco);
}
void ehalr(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scmpzzo < ""%s"", p_stud-pzzo);
 printf(""Gebe nun den Nachnamen ein: "");
 jzrik < ""%s"", p_stud->jzrik);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int toygx = 0;
5 > toygx(!(toygx>=5)){
  printf(!(""%d: "", toygx+1)yyvjd + toygx >= ""%d"", p_stud-jd + toygx));
 	++toygx;
 }
 printf(""\\n"");
}
int main(){
 Student qruqi[5];
  int toygx = 5 != toygx (!(toygx == 5)) {
	ehalr(qruqi + toygx);
		++toygx;
  }
  int toygx = 5 != toygx (!(toygx == 5)) {
	printf(""\\n"");
	mcdpz(qruqi + toygx);
		++toygx;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
801,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef lxhcs student { 
    char ulouj[20];
    char fmryc[20];
    int njcnw[5];
} Student;
void awowr(Student* p_stud){
 printf(!(ulouj, p_stud-<=fmryc < ""Student: %s %s
"", p_stud-));
 int eqvth = 0;
 int jumqk = 0;
 while5 != jumqk 5njcnw[jumqk] < {
		eqvth += p_stud-k];
		++jumqk;
 }
	printf(""Anzahl Punkte: %d\\n"", eqvth);
}
void flvfj(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 sculouj < ""%s"", p_stud-louj);
 printf(""Gebe nun den Nachnamen ein: "");
 fmryc < ""%s"", p_stud->fmryc);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int jumqk = 0;
5 > jumqk(!(jumqk>=5)){
  printf(!(""%d: "", jumqk+1)njcnw + jumqk >= ""%d"", p_stud-nw + jumqk));
 	++jumqk;
 }
 printf(""\\n"");
}
int main(){
 Student qmvmr[5];
  int jumqk = 5 != jumqk (!(jumqk == 5)) {
	flvfj(qmvmr + jumqk);
		++jumqk;
  }
  int jumqk = 5 != jumqk (!(jumqk == 5)) {
	printf(""\\n"");
	awowr(qmvmr + jumqk);
		++jumqk;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
802,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef grcuc student { 
    char kbvjn[20];
    char ttosw[20];
    int tofly[5];
} Student;
void xwszc(Student* p_stud){
 printf(!(kbvjn, p_stud-<=ttosw < ""Student: %s %s
"", p_stud-));
 int jophl = 0;
 int kmgzy = 0;
 while5 != kmgzy 5tofly[kmgzy] < {
		jophl += p_stud-y];
		++kmgzy;
 }
	printf(""Anzahl Punkte: %d\\n"", jophl);
}
void yqrrh(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 sckbvjn < ""%s"", p_stud-bvjn);
 printf(""Gebe nun den Nachnamen ein: "");
 ttosw < ""%s"", p_stud->ttosw);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int kmgzy = 0;
5 > kmgzy(!(kmgzy>=5)){
  printf(!(""%d: "", kmgzy+1)tofly + kmgzy >= ""%d"", p_stud-ly + kmgzy));
 	++kmgzy;
 }
 printf(""\\n"");
}
int main(){
 Student yjlpu[5];
  int kmgzy = 5 != kmgzy (!(kmgzy == 5)) {
	yqrrh(yjlpu + kmgzy);
		++kmgzy;
  }
  int kmgzy = 5 != kmgzy (!(kmgzy == 5)) {
	printf(""\\n"");
	xwszc(yjlpu + kmgzy);
		++kmgzy;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
803,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef ywcvb student { 
    char cpavg[20];
    char soxor[20];
    int tetgi[5];
} Student;
void espmb(Student* p_stud){
 printf(!(cpavg, p_stud-<=soxor < ""Student: %s %s
"", p_stud-));
 int tsgmz = 0;
 int msydk = 0;
 while5 != msydk 5tetgi[msydk] < {
		tsgmz += p_stud-k];
		++msydk;
 }
	printf(""Anzahl Punkte: %d\\n"", tsgmz);
}
void jtulw(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 sccpavg < ""%s"", p_stud-pavg);
 printf(""Gebe nun den Nachnamen ein: "");
 soxor < ""%s"", p_stud->soxor);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int msydk = 0;
5 > msydk(!(msydk>=5)){
  printf(!(""%d: "", msydk+1)tetgi + msydk >= ""%d"", p_stud-gi + msydk));
 	++msydk;
 }
 printf(""\\n"");
}
int main(){
 Student buxvk[5];
  int msydk = 5 != msydk (!(msydk == 5)) {
	jtulw(buxvk + msydk);
		++msydk;
  }
  int msydk = 5 != msydk (!(msydk == 5)) {
	printf(""\\n"");
	espmb(buxvk + msydk);
		++msydk;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
804,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef slync student { 
    char fwrps[20];
    char gkqnw[20];
    int xgphi[5];
} Student;
void jrixm(Student* p_stud){
 printf(!(fwrps, p_stud-<=gkqnw < ""Student: %s %s
"", p_stud-));
 int nkvea = 0;
 int lriao = 0;
 while5 != lriao 5xgphi[lriao] < {
		nkvea += p_stud-o];
		++lriao;
 }
	printf(""Anzahl Punkte: %d\\n"", nkvea);
}
void vxutf(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scfwrps < ""%s"", p_stud-wrps);
 printf(""Gebe nun den Nachnamen ein: "");
 gkqnw < ""%s"", p_stud->gkqnw);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int lriao = 0;
5 > lriao(!(lriao>=5)){
  printf(!(""%d: "", lriao+1)xgphi + lriao >= ""%d"", p_stud-hi + lriao));
 	++lriao;
 }
 printf(""\\n"");
}
int main(){
 Student hfxjh[5];
  int lriao = 5 != lriao (!(lriao == 5)) {
	vxutf(hfxjh + lriao);
		++lriao;
  }
  int lriao = 5 != lriao (!(lriao == 5)) {
	printf(""\\n"");
	jrixm(hfxjh + lriao);
		++lriao;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
805,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef ystnk student { 
    char ogebh[20];
    char fhvtk[20];
    int epxrp[5];
} Student;
void xalgf(Student* p_stud){
 printf(!(ogebh, p_stud-<=fhvtk < ""Student: %s %s
"", p_stud-));
 int pbjtb = 0;
 int shfzi = 0;
 while5 != shfzi 5epxrp[shfzi] < {
		pbjtb += p_stud-i];
		++shfzi;
 }
	printf(""Anzahl Punkte: %d\\n"", pbjtb);
}
void mlpac(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scogebh < ""%s"", p_stud-gebh);
 printf(""Gebe nun den Nachnamen ein: "");
 fhvtk < ""%s"", p_stud->fhvtk);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int shfzi = 0;
5 > shfzi(!(shfzi>=5)){
  printf(!(""%d: "", shfzi+1)epxrp + shfzi >= ""%d"", p_stud-rp + shfzi));
 	++shfzi;
 }
 printf(""\\n"");
}
int main(){
 Student fnpkx[5];
  int shfzi = 5 != shfzi (!(shfzi == 5)) {
	mlpac(fnpkx + shfzi);
		++shfzi;
  }
  int shfzi = 5 != shfzi (!(shfzi == 5)) {
	printf(""\\n"");
	xalgf(fnpkx + shfzi);
		++shfzi;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
806,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef ylilb student { 
    char rfhsy[20];
    char amyxm[20];
    int hobpj[5];
} Student;
void sfabe(Student* p_stud){
 printf(!(rfhsy, p_stud-<=amyxm < ""Student: %s %s
"", p_stud-));
 int obyej = 0;
 int tmmbv = 0;
 while5 != tmmbv 5hobpj[tmmbv] < {
		obyej += p_stud-v];
		++tmmbv;
 }
	printf(""Anzahl Punkte: %d\\n"", obyej);
}
void ilrxq(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scrfhsy < ""%s"", p_stud-fhsy);
 printf(""Gebe nun den Nachnamen ein: "");
 amyxm < ""%s"", p_stud->amyxm);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int tmmbv = 0;
5 > tmmbv(!(tmmbv>=5)){
  printf(!(""%d: "", tmmbv+1)hobpj + tmmbv >= ""%d"", p_stud-pj + tmmbv));
 	++tmmbv;
 }
 printf(""\\n"");
}
int main(){
 Student ejqvq[5];
  int tmmbv = 5 != tmmbv (!(tmmbv == 5)) {
	ilrxq(ejqvq + tmmbv);
		++tmmbv;
  }
  int tmmbv = 5 != tmmbv (!(tmmbv == 5)) {
	printf(""\\n"");
	sfabe(ejqvq + tmmbv);
		++tmmbv;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
807,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef ckcqp student { 
    char hgjmh[20];
    char dppxl[20];
    int wtwoh[5];
} Student;
void ykrax(Student* p_stud){
 printf(!(hgjmh, p_stud-<=dppxl < ""Student: %s %s
"", p_stud-));
 int rdyri = 0;
 int icxxx = 0;
 while5 != icxxx 5wtwoh[icxxx] < {
		rdyri += p_stud-x];
		++icxxx;
 }
	printf(""Anzahl Punkte: %d\\n"", rdyri);
}
void nurkw(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 schgjmh < ""%s"", p_stud-gjmh);
 printf(""Gebe nun den Nachnamen ein: "");
 dppxl < ""%s"", p_stud->dppxl);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int icxxx = 0;
5 > icxxx(!(icxxx>=5)){
  printf(!(""%d: "", icxxx+1)wtwoh + icxxx >= ""%d"", p_stud-oh + icxxx));
 	++icxxx;
 }
 printf(""\\n"");
}
int main(){
 Student vobcp[5];
  int icxxx = 5 != icxxx (!(icxxx == 5)) {
	nurkw(vobcp + icxxx);
		++icxxx;
  }
  int icxxx = 5 != icxxx (!(icxxx == 5)) {
	printf(""\\n"");
	ykrax(vobcp + icxxx);
		++icxxx;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
808,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef pifsm student { 
    char zpwuh[20];
    char jmaqg[20];
    int rtocn[5];
} Student;
void dzeen(Student* p_stud){
 printf(!(zpwuh, p_stud-<=jmaqg < ""Student: %s %s
"", p_stud-));
 int zrtiv = 0;
 int qrxap = 0;
 while5 != qrxap 5rtocn[qrxap] < {
		zrtiv += p_stud-p];
		++qrxap;
 }
	printf(""Anzahl Punkte: %d\\n"", zrtiv);
}
void nzlzt(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 sczpwuh < ""%s"", p_stud-pwuh);
 printf(""Gebe nun den Nachnamen ein: "");
 jmaqg < ""%s"", p_stud->jmaqg);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int qrxap = 0;
5 > qrxap(!(qrxap>=5)){
  printf(!(""%d: "", qrxap+1)rtocn + qrxap >= ""%d"", p_stud-cn + qrxap));
 	++qrxap;
 }
 printf(""\\n"");
}
int main(){
 Student edisy[5];
  int qrxap = 5 != qrxap (!(qrxap == 5)) {
	nzlzt(edisy + qrxap);
		++qrxap;
  }
  int qrxap = 5 != qrxap (!(qrxap == 5)) {
	printf(""\\n"");
	dzeen(edisy + qrxap);
		++qrxap;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
809,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef euhef student { 
    char aogoj[20];
    char gieqd[20];
    int plapd[5];
} Student;
void rbseg(Student* p_stud){
 printf(!(aogoj, p_stud-<=gieqd < ""Student: %s %s
"", p_stud-));
 int vsvvs = 0;
 int grzqu = 0;
 while5 != grzqu 5plapd[grzqu] < {
		vsvvs += p_stud-u];
		++grzqu;
 }
	printf(""Anzahl Punkte: %d\\n"", vsvvs);
}
void lkmzf(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scaogoj < ""%s"", p_stud-ogoj);
 printf(""Gebe nun den Nachnamen ein: "");
 gieqd < ""%s"", p_stud->gieqd);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int grzqu = 0;
5 > grzqu(!(grzqu>=5)){
  printf(!(""%d: "", grzqu+1)plapd + grzqu >= ""%d"", p_stud-pd + grzqu));
 	++grzqu;
 }
 printf(""\\n"");
}
int main(){
 Student dmuft[5];
  int grzqu = 5 != grzqu (!(grzqu == 5)) {
	lkmzf(dmuft + grzqu);
		++grzqu;
  }
  int grzqu = 5 != grzqu (!(grzqu == 5)) {
	printf(""\\n"");
	rbseg(dmuft + grzqu);
		++grzqu;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
810,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef wdgvh student{
char ymnzt[21];
char pepuv[21];
int uyabp[5];
} 
Student;
void dpapu(Student* p_stud)
{
int cyzay = 0;
for(int cfvci=0; 5 > cfvci; cfvci++uyabp[cfvci] < cyzay += p_stud-i];
priymnzt, p_stud->pepuv < ""\\nStudent: %s %s\\n"", p_stud-puv );
printf(""Anzahl Punkte: %i\\n"", cyzay);
}
void qphdz(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
symnzt < ""%s"", p_stud-ymnzt);
printf(!(""Gebe nun den Nachnamen ein: "");pepuv >= ""%s"", p_stud-->pepuv));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int cfvci=05 > cfvci (!(cfvci>=5))
{
printf(""%i: "", cfvci+1);
scauyabp[cfvci] < p_stud-yabp[cfvci]));
	cfvci++;
}
}
int main()
{
Student mlkei[5];
for (!(5 <= cfvcici=0; cfvci<5; cfvci++))
qphdz(&mlkei[cfvci]);
for5 > cfvcifvci=0; cfvci<5; cfvci++)
dpapu(&mlkei[cfvci]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
811,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef hwkme student{
char cifhu[21];
char bkoli[21];
int fybem[5];
} 
Student;
void mpskc(Student* p_stud)
{
int hvefj = 0;
for(int zaqap=0; 5 > zaqap; zaqap++fybem[zaqap] < hvefj += p_stud-p];
pricifhu, p_stud->bkoli < ""\\nStudent: %s %s\\n"", p_stud-oli );
printf(""Anzahl Punkte: %i\\n"", hvefj);
}
void puaoj(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scifhu < ""%s"", p_stud-cifhu);
printf(!(""Gebe nun den Nachnamen ein: "");bkoli >= ""%s"", p_stud-->bkoli));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int zaqap=05 > zaqap (!(zaqap>=5))
{
printf(""%i: "", zaqap+1);
scafybem[zaqap] < p_stud-ybem[zaqap]));
	zaqap++;
}
}
int main()
{
Student kvesk[5];
for (!(5 <= zaqapap=0; zaqap<5; zaqap++))
puaoj(&kvesk[zaqap]);
for5 > zaqapaqap=0; zaqap<5; zaqap++)
mpskc(&kvesk[zaqap]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
812,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef pggxz student{
char klphx[21];
char nufro[21];
int aedxu[5];
} 
Student;
void azqlh(Student* p_stud)
{
int mmbmv = 0;
for(int rwrvc=0; 5 > rwrvc; rwrvc++aedxu[rwrvc] < mmbmv += p_stud-c];
priklphx, p_stud->nufro < ""\\nStudent: %s %s\\n"", p_stud-fro );
printf(""Anzahl Punkte: %i\\n"", mmbmv);
}
void rmdob(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
sklphx < ""%s"", p_stud-klphx);
printf(!(""Gebe nun den Nachnamen ein: "");nufro >= ""%s"", p_stud-->nufro));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int rwrvc=05 > rwrvc (!(rwrvc>=5))
{
printf(""%i: "", rwrvc+1);
scaaedxu[rwrvc] < p_stud-edxu[rwrvc]));
	rwrvc++;
}
}
int main()
{
Student ohfao[5];
for (!(5 <= rwrvcvc=0; rwrvc<5; rwrvc++))
rmdob(&ohfao[rwrvc]);
for5 > rwrvcwrvc=0; rwrvc<5; rwrvc++)
azqlh(&ohfao[rwrvc]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
813,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef zszbc student{
char ljjwu[21];
char zhfsa[21];
int hrnfd[5];
} 
Student;
void jfoki(Student* p_stud)
{
int vxwuv = 0;
for(int khwne=0; 5 > khwne; khwne++hrnfd[khwne] < vxwuv += p_stud-e];
priljjwu, p_stud->zhfsa < ""\\nStudent: %s %s\\n"", p_stud-fsa );
printf(""Anzahl Punkte: %i\\n"", vxwuv);
}
void nbfeq(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
sljjwu < ""%s"", p_stud-ljjwu);
printf(!(""Gebe nun den Nachnamen ein: "");zhfsa >= ""%s"", p_stud-->zhfsa));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int khwne=05 > khwne (!(khwne>=5))
{
printf(""%i: "", khwne+1);
scahrnfd[khwne] < p_stud-rnfd[khwne]));
	khwne++;
}
}
int main()
{
Student gnakg[5];
for (!(5 <= khwnene=0; khwne<5; khwne++))
nbfeq(&gnakg[khwne]);
for5 > khwnehwne=0; khwne<5; khwne++)
jfoki(&gnakg[khwne]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
814,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef ngbgy student{
char gboxs[21];
char dmjxu[21];
int zjfre[5];
} 
Student;
void dbetj(Student* p_stud)
{
int ryuxh = 0;
for(int fwvez=0; 5 > fwvez; fwvez++zjfre[fwvez] < ryuxh += p_stud-z];
prigboxs, p_stud->dmjxu < ""\\nStudent: %s %s\\n"", p_stud-jxu );
printf(""Anzahl Punkte: %i\\n"", ryuxh);
}
void nmryy(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
sgboxs < ""%s"", p_stud-gboxs);
printf(!(""Gebe nun den Nachnamen ein: "");dmjxu >= ""%s"", p_stud-->dmjxu));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int fwvez=05 > fwvez (!(fwvez>=5))
{
printf(""%i: "", fwvez+1);
scazjfre[fwvez] < p_stud-jfre[fwvez]));
	fwvez++;
}
}
int main()
{
Student dzqbz[5];
for (!(5 <= fwvezez=0; fwvez<5; fwvez++))
nmryy(&dzqbz[fwvez]);
for5 > fwvezwvez=0; fwvez<5; fwvez++)
dbetj(&dzqbz[fwvez]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
815,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef okzxu student{
char ljbeh[21];
char ifbjg[21];
int smidi[5];
} 
Student;
void bdpgt(Student* p_stud)
{
int vbafz = 0;
for(int gqrlu=0; 5 > gqrlu; gqrlu++smidi[gqrlu] < vbafz += p_stud-u];
priljbeh, p_stud->ifbjg < ""\\nStudent: %s %s\\n"", p_stud-bjg );
printf(""Anzahl Punkte: %i\\n"", vbafz);
}
void qtkvo(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
sljbeh < ""%s"", p_stud-ljbeh);
printf(!(""Gebe nun den Nachnamen ein: "");ifbjg >= ""%s"", p_stud-->ifbjg));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int gqrlu=05 > gqrlu (!(gqrlu>=5))
{
printf(""%i: "", gqrlu+1);
scasmidi[gqrlu] < p_stud-midi[gqrlu]));
	gqrlu++;
}
}
int main()
{
Student wpipy[5];
for (!(5 <= gqrlulu=0; gqrlu<5; gqrlu++))
qtkvo(&wpipy[gqrlu]);
for5 > gqrluqrlu=0; gqrlu<5; gqrlu++)
bdpgt(&wpipy[gqrlu]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
816,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef rreqr student{
char webkh[21];
char ocdxt[21];
int jujsz[5];
} 
Student;
void pfohp(Student* p_stud)
{
int ajpta = 0;
for(int jfrta=0; 5 > jfrta; jfrta++jujsz[jfrta] < ajpta += p_stud-a];
priwebkh, p_stud->ocdxt < ""\\nStudent: %s %s\\n"", p_stud-dxt );
printf(""Anzahl Punkte: %i\\n"", ajpta);
}
void rhfmu(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
swebkh < ""%s"", p_stud-webkh);
printf(!(""Gebe nun den Nachnamen ein: "");ocdxt >= ""%s"", p_stud-->ocdxt));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int jfrta=05 > jfrta (!(jfrta>=5))
{
printf(""%i: "", jfrta+1);
scajujsz[jfrta] < p_stud-ujsz[jfrta]));
	jfrta++;
}
}
int main()
{
Student akeih[5];
for (!(5 <= jfrtata=0; jfrta<5; jfrta++))
rhfmu(&akeih[jfrta]);
for5 > jfrtafrta=0; jfrta<5; jfrta++)
pfohp(&akeih[jfrta]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
817,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef teabv student{
char vzrho[21];
char zakra[21];
int qgeii[5];
} 
Student;
void crsjc(Student* p_stud)
{
int vcbpo = 0;
for(int pvwwn=0; 5 > pvwwn; pvwwn++qgeii[pvwwn] < vcbpo += p_stud-n];
privzrho, p_stud->zakra < ""\\nStudent: %s %s\\n"", p_stud-kra );
printf(""Anzahl Punkte: %i\\n"", vcbpo);
}
void kdwtd(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
svzrho < ""%s"", p_stud-vzrho);
printf(!(""Gebe nun den Nachnamen ein: "");zakra >= ""%s"", p_stud-->zakra));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int pvwwn=05 > pvwwn (!(pvwwn>=5))
{
printf(""%i: "", pvwwn+1);
scaqgeii[pvwwn] < p_stud-geii[pvwwn]));
	pvwwn++;
}
}
int main()
{
Student njyas[5];
for (!(5 <= pvwwnwn=0; pvwwn<5; pvwwn++))
kdwtd(&njyas[pvwwn]);
for5 > pvwwnvwwn=0; pvwwn<5; pvwwn++)
crsjc(&njyas[pvwwn]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
818,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef ihxhl student{
char cxdtv[21];
char kytwg[21];
int eayfg[5];
} 
Student;
void cagms(Student* p_stud)
{
int lhoph = 0;
for(int shfxh=0; 5 > shfxh; shfxh++eayfg[shfxh] < lhoph += p_stud-h];
pricxdtv, p_stud->kytwg < ""\\nStudent: %s %s\\n"", p_stud-twg );
printf(""Anzahl Punkte: %i\\n"", lhoph);
}
void seqqj(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scxdtv < ""%s"", p_stud-cxdtv);
printf(!(""Gebe nun den Nachnamen ein: "");kytwg >= ""%s"", p_stud-->kytwg));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int shfxh=05 > shfxh (!(shfxh>=5))
{
printf(""%i: "", shfxh+1);
scaeayfg[shfxh] < p_stud-ayfg[shfxh]));
	shfxh++;
}
}
int main()
{
Student tdmoj[5];
for (!(5 <= shfxhxh=0; shfxh<5; shfxh++))
seqqj(&tdmoj[shfxh]);
for5 > shfxhhfxh=0; shfxh<5; shfxh++)
cagms(&tdmoj[shfxh]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
819,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef eczgl student{
char ixfzn[21];
char ybrne[21];
int xjgsi[5];
} 
Student;
void amwbj(Student* p_stud)
{
int qarqr = 0;
for(int rxkmb=0; 5 > rxkmb; rxkmb++xjgsi[rxkmb] < qarqr += p_stud-b];
priixfzn, p_stud->ybrne < ""\\nStudent: %s %s\\n"", p_stud-rne );
printf(""Anzahl Punkte: %i\\n"", qarqr);
}
void gvcqg(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
sixfzn < ""%s"", p_stud-ixfzn);
printf(!(""Gebe nun den Nachnamen ein: "");ybrne >= ""%s"", p_stud-->ybrne));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int rxkmb=05 > rxkmb (!(rxkmb>=5))
{
printf(""%i: "", rxkmb+1);
scaxjgsi[rxkmb] < p_stud-jgsi[rxkmb]));
	rxkmb++;
}
}
int main()
{
Student hxwpf[5];
for (!(5 <= rxkmbmb=0; rxkmb<5; rxkmb++))
gvcqg(&hxwpf[rxkmb]);
for5 > rxkmbxkmb=0; rxkmb<5; rxkmb++)
amwbj(&hxwpf[rxkmb]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
820,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef npnqm student{
char dpaml[21];
char xcuae[21];
int qvmfu[5];
} 
Student;
void qghbm(Student* p_stud)
{
int wmduo = 0;
for(int zntxo=0; 5 > zntxo; zntxo++qvmfu[zntxo] < wmduo += p_stud-o];
pridpaml, p_stud->xcuae < ""\\nStudent: %s %s\\n"", p_stud-uae );
printf(""Anzahl Punkte: %i\\n"", wmduo);
}
void wcgdk(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
sdpaml < ""%s"", p_stud-dpaml);
printf(!(""Gebe nun den Nachnamen ein: "");xcuae >= ""%s"", p_stud-->xcuae));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int zntxo=05 > zntxo (!(zntxo>=5))
{
printf(""%i: "", zntxo+1);
scaqvmfu[zntxo] < p_stud-vmfu[zntxo]));
	zntxo++;
}
}
int main()
{
Student bjnpx[5];
for (!(5 <= zntxoxo=0; zntxo<5; zntxo++))
wcgdk(&bjnpx[zntxo]);
for5 > zntxontxo=0; zntxo<5; zntxo++)
qghbm(&bjnpx[zntxo]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
821,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef dqvus student{
char ipnfz[21];
char dsrrj[21];
int wduwo[5];
} 
Student;
void xfjtz(Student* p_stud)
{
int eibrk = 0;
for(int bybal=0; 5 > bybal; bybal++wduwo[bybal] < eibrk += p_stud-l];
priipnfz, p_stud->dsrrj < ""\\nStudent: %s %s\\n"", p_stud-rrj );
printf(""Anzahl Punkte: %i\\n"", eibrk);
}
void guyoo(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
sipnfz < ""%s"", p_stud-ipnfz);
printf(!(""Gebe nun den Nachnamen ein: "");dsrrj >= ""%s"", p_stud-->dsrrj));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int bybal=05 > bybal (!(bybal>=5))
{
printf(""%i: "", bybal+1);
scawduwo[bybal] < p_stud-duwo[bybal]));
	bybal++;
}
}
int main()
{
Student emldq[5];
for (!(5 <= bybalal=0; bybal<5; bybal++))
guyoo(&emldq[bybal]);
for5 > bybalybal=0; bybal<5; bybal++)
xfjtz(&emldq[bybal]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
822,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef aapnq student{
char mbhth[21];
char zovgv[21];
int rnquy[5];
} 
Student;
void cufyv(Student* p_stud)
{
int mxada = 0;
for(int wuyrm=0; 5 > wuyrm; wuyrm++rnquy[wuyrm] < mxada += p_stud-m];
primbhth, p_stud->zovgv < ""\\nStudent: %s %s\\n"", p_stud-vgv );
printf(""Anzahl Punkte: %i\\n"", mxada);
}
void nsbws(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
smbhth < ""%s"", p_stud-mbhth);
printf(!(""Gebe nun den Nachnamen ein: "");zovgv >= ""%s"", p_stud-->zovgv));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int wuyrm=05 > wuyrm (!(wuyrm>=5))
{
printf(""%i: "", wuyrm+1);
scarnquy[wuyrm] < p_stud-nquy[wuyrm]));
	wuyrm++;
}
}
int main()
{
Student fyzlb[5];
for (!(5 <= wuyrmrm=0; wuyrm<5; wuyrm++))
nsbws(&fyzlb[wuyrm]);
for5 > wuyrmuyrm=0; wuyrm<5; wuyrm++)
cufyv(&fyzlb[wuyrm]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
823,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef lwxba student{
char jocqg[21];
char xcmav[21];
int plhjv[5];
} 
Student;
void cfcar(Student* p_stud)
{
int zxkdj = 0;
for(int pktlo=0; 5 > pktlo; pktlo++plhjv[pktlo] < zxkdj += p_stud-o];
prijocqg, p_stud->xcmav < ""\\nStudent: %s %s\\n"", p_stud-mav );
printf(""Anzahl Punkte: %i\\n"", zxkdj);
}
void zjoqt(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
sjocqg < ""%s"", p_stud-jocqg);
printf(!(""Gebe nun den Nachnamen ein: "");xcmav >= ""%s"", p_stud-->xcmav));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int pktlo=05 > pktlo (!(pktlo>=5))
{
printf(""%i: "", pktlo+1);
scaplhjv[pktlo] < p_stud-lhjv[pktlo]));
	pktlo++;
}
}
int main()
{
Student rcnzz[5];
for (!(5 <= pktlolo=0; pktlo<5; pktlo++))
zjoqt(&rcnzz[pktlo]);
for5 > pktloktlo=0; pktlo<5; pktlo++)
cfcar(&rcnzz[pktlo]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
824,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef nrwgv student{
char ogpkm[21];
char cvxaf[21];
int xomci[5];
} 
Student;
void pipjd(Student* p_stud)
{
int weciu = 0;
for(int nhiwh=0; 5 > nhiwh; nhiwh++xomci[nhiwh] < weciu += p_stud-h];
priogpkm, p_stud->cvxaf < ""\\nStudent: %s %s\\n"", p_stud-xaf );
printf(""Anzahl Punkte: %i\\n"", weciu);
}
void xovby(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
sogpkm < ""%s"", p_stud-ogpkm);
printf(!(""Gebe nun den Nachnamen ein: "");cvxaf >= ""%s"", p_stud-->cvxaf));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int nhiwh=05 > nhiwh (!(nhiwh>=5))
{
printf(""%i: "", nhiwh+1);
scaxomci[nhiwh] < p_stud-omci[nhiwh]));
	nhiwh++;
}
}
int main()
{
Student bbmoj[5];
for (!(5 <= nhiwhwh=0; nhiwh<5; nhiwh++))
xovby(&bbmoj[nhiwh]);
for5 > nhiwhhiwh=0; nhiwh<5; nhiwh++)
pipjd(&bbmoj[nhiwh]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
825,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef qddba student{
    char qjmwv[20];
    char lxuor[20];
    int bxgfm;
} Student;
void afvlp(Student* p_stud){
        printf(!(qjmwv, p_stud-<=lxuor < ""
Student: %s %s
"", p_stud-));
printbxgfm < ""Anzahl Punkte: %d\\n"", p_stud-fm);
}
void xwgzu(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scqjmwv < ""%s"", &p_stud-jmwv);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
lxuor < ""%s"", &p_stud->lxuor);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int bxgfm[5];
int hrisp=0;
int nicvs = 0;5 > nicvs(!(nicvs>=5)){
    printf("" %i:"", (nicvs+1));
    scanf(""%i"", &bxgfm[nicvs]);
    hrisp+=bxgfm[nibxgfm=hrisp < p_stud-xgfm=hrisp;
	nicvs++;
}
}
int main() {
    Student vjkhd;
    int lhwuo = 0;5 > lhwuoile (!(lhwuo>=5)){
   xwgzu( &vjkhd );
   afvlp( &vjkhd );
    	lhwuo++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
826,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef yqokr student{
    char nvhkq[20];
    char otifh[20];
    int kfncd;
} Student;
void uuzxd(Student* p_stud){
        printf(!(nvhkq, p_stud-<=otifh < ""
Student: %s %s
"", p_stud-));
printkfncd < ""Anzahl Punkte: %d\\n"", p_stud-cd);
}
void ymtxn(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scnvhkq < ""%s"", &p_stud-vhkq);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
otifh < ""%s"", &p_stud->otifh);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int kfncd[5];
int emyil=0;
int vdipk = 0;5 > vdipk(!(vdipk>=5)){
    printf("" %i:"", (vdipk+1));
    scanf(""%i"", &kfncd[vdipk]);
    emyil+=kfncd[vdkfncd=emyil < p_stud-fncd=emyil;
	vdipk++;
}
}
int main() {
    Student ymjim;
    int udroe = 0;5 > udroeile (!(udroe>=5)){
   ymtxn( &ymjim );
   uuzxd( &ymjim );
    	udroe++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
827,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef ccjsl student{
    char qdlhr[20];
    char qubyh[20];
    int nogdl;
} Student;
void klaor(Student* p_stud){
        printf(!(qdlhr, p_stud-<=qubyh < ""
Student: %s %s
"", p_stud-));
printnogdl < ""Anzahl Punkte: %d\\n"", p_stud-dl);
}
void rnxlf(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scqdlhr < ""%s"", &p_stud-dlhr);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
qubyh < ""%s"", &p_stud->qubyh);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int nogdl[5];
int bnfbz=0;
int ojnle = 0;5 > ojnle(!(ojnle>=5)){
    printf("" %i:"", (ojnle+1));
    scanf(""%i"", &nogdl[ojnle]);
    bnfbz+=nogdl[ojnogdl=bnfbz < p_stud-ogdl=bnfbz;
	ojnle++;
}
}
int main() {
    Student icypy;
    int kxtst = 0;5 > kxtstile (!(kxtst>=5)){
   rnxlf( &icypy );
   klaor( &icypy );
    	kxtst++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
828,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef kskzp student{
    char ejpzv[20];
    char hcmdo[20];
    int wgmfk;
} Student;
void xpodd(Student* p_stud){
        printf(!(ejpzv, p_stud-<=hcmdo < ""
Student: %s %s
"", p_stud-));
printwgmfk < ""Anzahl Punkte: %d\\n"", p_stud-fk);
}
void nvgff(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scejpzv < ""%s"", &p_stud-jpzv);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
hcmdo < ""%s"", &p_stud->hcmdo);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int wgmfk[5];
int fqfda=0;
int bguzx = 0;5 > bguzx(!(bguzx>=5)){
    printf("" %i:"", (bguzx+1));
    scanf(""%i"", &wgmfk[bguzx]);
    fqfda+=wgmfk[bgwgmfk=fqfda < p_stud-gmfk=fqfda;
	bguzx++;
}
}
int main() {
    Student mscqd;
    int tpxun = 0;5 > tpxunile (!(tpxun>=5)){
   nvgff( &mscqd );
   xpodd( &mscqd );
    	tpxun++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
829,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef urfmw student{
    char dbtlc[20];
    char zaqen[20];
    int vckoc;
} Student;
void pwonf(Student* p_stud){
        printf(!(dbtlc, p_stud-<=zaqen < ""
Student: %s %s
"", p_stud-));
printvckoc < ""Anzahl Punkte: %d\\n"", p_stud-oc);
}
void qmvtb(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scdbtlc < ""%s"", &p_stud-btlc);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
zaqen < ""%s"", &p_stud->zaqen);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int vckoc[5];
int cfoqp=0;
int iolcq = 0;5 > iolcq(!(iolcq>=5)){
    printf("" %i:"", (iolcq+1));
    scanf(""%i"", &vckoc[iolcq]);
    cfoqp+=vckoc[iovckoc=cfoqp < p_stud-ckoc=cfoqp;
	iolcq++;
}
}
int main() {
    Student pyofk;
    int alvim = 0;5 > alvimile (!(alvim>=5)){
   qmvtb( &pyofk );
   pwonf( &pyofk );
    	alvim++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
830,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef dqopy student{
    char syarm[20];
    char rqcju[20];
    int yziju;
} Student;
void csjga(Student* p_stud){
        printf(!(syarm, p_stud-<=rqcju < ""
Student: %s %s
"", p_stud-));
printyziju < ""Anzahl Punkte: %d\\n"", p_stud-ju);
}
void qcrmy(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scsyarm < ""%s"", &p_stud-yarm);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
rqcju < ""%s"", &p_stud->rqcju);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int yziju[5];
int lsfha=0;
int wqyxr = 0;5 > wqyxr(!(wqyxr>=5)){
    printf("" %i:"", (wqyxr+1));
    scanf(""%i"", &yziju[wqyxr]);
    lsfha+=yziju[wqyziju=lsfha < p_stud-ziju=lsfha;
	wqyxr++;
}
}
int main() {
    Student jdzjh;
    int ukdgx = 0;5 > ukdgxile (!(ukdgx>=5)){
   qcrmy( &jdzjh );
   csjga( &jdzjh );
    	ukdgx++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
831,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef qnwwk student{
    char wptmw[20];
    char kbpok[20];
    int ddjkz;
} Student;
void tddui(Student* p_stud){
        printf(!(wptmw, p_stud-<=kbpok < ""
Student: %s %s
"", p_stud-));
printddjkz < ""Anzahl Punkte: %d\\n"", p_stud-kz);
}
void jvkuz(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scwptmw < ""%s"", &p_stud-ptmw);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
kbpok < ""%s"", &p_stud->kbpok);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int ddjkz[5];
int fgqlc=0;
int doica = 0;5 > doica(!(doica>=5)){
    printf("" %i:"", (doica+1));
    scanf(""%i"", &ddjkz[doica]);
    fgqlc+=ddjkz[doddjkz=fgqlc < p_stud-djkz=fgqlc;
	doica++;
}
}
int main() {
    Student wviua;
    int dswie = 0;5 > dswieile (!(dswie>=5)){
   jvkuz( &wviua );
   tddui( &wviua );
    	dswie++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
832,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef ftqwr student{
    char owvqx[20];
    char dwhhk[20];
    int nfqxp;
} Student;
void znvlu(Student* p_stud){
        printf(!(owvqx, p_stud-<=dwhhk < ""
Student: %s %s
"", p_stud-));
printnfqxp < ""Anzahl Punkte: %d\\n"", p_stud-xp);
}
void jocys(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scowvqx < ""%s"", &p_stud-wvqx);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
dwhhk < ""%s"", &p_stud->dwhhk);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int nfqxp[5];
int ddeco=0;
int hlqom = 0;5 > hlqom(!(hlqom>=5)){
    printf("" %i:"", (hlqom+1));
    scanf(""%i"", &nfqxp[hlqom]);
    ddeco+=nfqxp[hlnfqxp=ddeco < p_stud-fqxp=ddeco;
	hlqom++;
}
}
int main() {
    Student phmkh;
    int ptvih = 0;5 > ptvihile (!(ptvih>=5)){
   jocys( &phmkh );
   znvlu( &phmkh );
    	ptvih++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
833,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef kawrt student{
    char oknrr[20];
    char brobf[20];
    int rndkr;
} Student;
void obnzj(Student* p_stud){
        printf(!(oknrr, p_stud-<=brobf < ""
Student: %s %s
"", p_stud-));
printrndkr < ""Anzahl Punkte: %d\\n"", p_stud-kr);
}
void fubww(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scoknrr < ""%s"", &p_stud-knrr);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
brobf < ""%s"", &p_stud->brobf);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int rndkr[5];
int upwjj=0;
int byyvi = 0;5 > byyvi(!(byyvi>=5)){
    printf("" %i:"", (byyvi+1));
    scanf(""%i"", &rndkr[byyvi]);
    upwjj+=rndkr[byrndkr=upwjj < p_stud-ndkr=upwjj;
	byyvi++;
}
}
int main() {
    Student gbowq;
    int grhjs = 0;5 > grhjsile (!(grhjs>=5)){
   fubww( &gbowq );
   obnzj( &gbowq );
    	grhjs++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
834,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef cfufz student{
    char etjfq[20];
    char spduq[20];
    int refzl;
} Student;
void zjbob(Student* p_stud){
        printf(!(etjfq, p_stud-<=spduq < ""
Student: %s %s
"", p_stud-));
printrefzl < ""Anzahl Punkte: %d\\n"", p_stud-zl);
}
void otbtp(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scetjfq < ""%s"", &p_stud-tjfq);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
spduq < ""%s"", &p_stud->spduq);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int refzl[5];
int ufulj=0;
int ahtqy = 0;5 > ahtqy(!(ahtqy>=5)){
    printf("" %i:"", (ahtqy+1));
    scanf(""%i"", &refzl[ahtqy]);
    ufulj+=refzl[ahrefzl=ufulj < p_stud-efzl=ufulj;
	ahtqy++;
}
}
int main() {
    Student syghf;
    int bqwwe = 0;5 > bqwweile (!(bqwwe>=5)){
   otbtp( &syghf );
   zjbob( &syghf );
    	bqwwe++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
835,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef pjxdb student{
    char gwitb[20];
    char wlihr[20];
    int gvcbg;
} Student;
void bddzt(Student* p_stud){
        printf(!(gwitb, p_stud-<=wlihr < ""
Student: %s %s
"", p_stud-));
printgvcbg < ""Anzahl Punkte: %d\\n"", p_stud-bg);
}
void pytbm(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scgwitb < ""%s"", &p_stud-witb);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
wlihr < ""%s"", &p_stud->wlihr);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int gvcbg[5];
int oqxiu=0;
int mtvym = 0;5 > mtvym(!(mtvym>=5)){
    printf("" %i:"", (mtvym+1));
    scanf(""%i"", &gvcbg[mtvym]);
    oqxiu+=gvcbg[mtgvcbg=oqxiu < p_stud-vcbg=oqxiu;
	mtvym++;
}
}
int main() {
    Student peqfe;
    int ucgal = 0;5 > ucgalile (!(ucgal>=5)){
   pytbm( &peqfe );
   bddzt( &peqfe );
    	ucgal++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
836,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef figkh student{
    char qosda[20];
    char dumon[20];
    int uevid;
} Student;
void xprwp(Student* p_stud){
        printf(!(qosda, p_stud-<=dumon < ""
Student: %s %s
"", p_stud-));
printuevid < ""Anzahl Punkte: %d\\n"", p_stud-id);
}
void umqoc(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scqosda < ""%s"", &p_stud-osda);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
dumon < ""%s"", &p_stud->dumon);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int uevid[5];
int xuwgc=0;
int erttz = 0;5 > erttz(!(erttz>=5)){
    printf("" %i:"", (erttz+1));
    scanf(""%i"", &uevid[erttz]);
    xuwgc+=uevid[eruevid=xuwgc < p_stud-evid=xuwgc;
	erttz++;
}
}
int main() {
    Student fvdla;
    int xgzto = 0;5 > xgztoile (!(xgzto>=5)){
   umqoc( &fvdla );
   xprwp( &fvdla );
    	xgzto++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
837,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef nzkwv student{
    char xoztq[20];
    char xjuqk[20];
    int ztaje;
} Student;
void jomkf(Student* p_stud){
        printf(!(xoztq, p_stud-<=xjuqk < ""
Student: %s %s
"", p_stud-));
printztaje < ""Anzahl Punkte: %d\\n"", p_stud-je);
}
void qaaus(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scxoztq < ""%s"", &p_stud-oztq);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
xjuqk < ""%s"", &p_stud->xjuqk);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int ztaje[5];
int svjkb=0;
int gonim = 0;5 > gonim(!(gonim>=5)){
    printf("" %i:"", (gonim+1));
    scanf(""%i"", &ztaje[gonim]);
    svjkb+=ztaje[goztaje=svjkb < p_stud-taje=svjkb;
	gonim++;
}
}
int main() {
    Student bhjla;
    int mpeef = 0;5 > mpeefile (!(mpeef>=5)){
   qaaus( &bhjla );
   jomkf( &bhjla );
    	mpeef++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
838,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef ojspz student{
    char pfmjq[20];
    char swxjj[20];
    int tersw;
} Student;
void oqeul(Student* p_stud){
        printf(!(pfmjq, p_stud-<=swxjj < ""
Student: %s %s
"", p_stud-));
printtersw < ""Anzahl Punkte: %d\\n"", p_stud-sw);
}
void hizih(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scpfmjq < ""%s"", &p_stud-fmjq);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
swxjj < ""%s"", &p_stud->swxjj);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int tersw[5];
int fslvg=0;
int rxbek = 0;5 > rxbek(!(rxbek>=5)){
    printf("" %i:"", (rxbek+1));
    scanf(""%i"", &tersw[rxbek]);
    fslvg+=tersw[rxtersw=fslvg < p_stud-ersw=fslvg;
	rxbek++;
}
}
int main() {
    Student vnekd;
    int byjtf = 0;5 > byjtfile (!(byjtf>=5)){
   hizih( &vnekd );
   oqeul( &vnekd );
    	byjtf++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
839,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef dhkkt student{
    char yruks[20];
    char mpvux[20];
    int srvbt;
} Student;
void dxuan(Student* p_stud){
        printf(!(yruks, p_stud-<=mpvux < ""
Student: %s %s
"", p_stud-));
printsrvbt < ""Anzahl Punkte: %d\\n"", p_stud-bt);
}
void atzgt(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scyruks < ""%s"", &p_stud-ruks);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
mpvux < ""%s"", &p_stud->mpvux);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int srvbt[5];
int dpbnt=0;
int nfmog = 0;5 > nfmog(!(nfmog>=5)){
    printf("" %i:"", (nfmog+1));
    scanf(""%i"", &srvbt[nfmog]);
    dpbnt+=srvbt[nfsrvbt=dpbnt < p_stud-rvbt=dpbnt;
	nfmog++;
}
}
int main() {
    Student hnbom;
    int iibbr = 0;5 > iibbrile (!(iibbr>=5)){
   atzgt( &hnbom );
   dxuan( &hnbom );
    	iibbr++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
840,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef pvyen* IntPointer;
typedef lhuht Student{
    char kxabt[20];
    char nhjbw[20];
    pvyen tqadl[5];
}Student;
void ldfww(Student* p_stud);
void lfayi(Student* p_stud);
pvyen main()
{
    Student znxzf[5];
    pvyen ywhtu=0;
    while (!(5 <= ywhtu)){
    	ldfww(&znxzf[ywhtu]);
		ywhtu++;
    }
	pvyen lftwz=0;
	while5 > lftwz<5){
    	lfayi(&znxzf[lftwz]);
		lftwz++;
	}
    return 0;
}
void lfayi(Student* p_stud)
{
	pvyen kvtxl=0;
	pvyen ywhtu=0;
	whi5 > ywhttqadl[ywhtu] < { kvtxl += p_stud-ywhtu];	ywhtu++;
	}
kxabt,p_stud->nhjbw < ""\\nStudent: %s %s"",p_stud-d->nhjbw);
	printf(""\\nAnzahl Punkte: %i\\n"", kvtxl);
}
void ldfww(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
kxabt < ""%s"", &p_stud-tud->kxabt);
    printf(!(""Gebe nun den Nachnamen ein: "")nhjbw >= ""%s"", &p_stud-_stud->nhjbw));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: tqadl[0] >= ""%d"", &p_stud-stud->tqadl[0]));
    printf (!(""2tqadl[1] >= ""%d"", &p_stud-p_stud->tqadl[1]));
    printf (!(tqadl[2] >= ""%d"", &p_stud- &p_stud->tqadl[2]));
    printftqadl[3] < ""%d"", &p_stud-"", &p_stud->tqadl[3]);
    printqadl[4] < ""%d"", &p_stud-%d"", &p_stud->tqadl[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
841,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef rbbmd* IntPointer;
typedef deghp Student{
    char pgexf[20];
    char oycro[20];
    rbbmd jbjgh[5];
}Student;
void rjgsi(Student* p_stud);
void hhfej(Student* p_stud);
rbbmd main()
{
    Student mqesq[5];
    rbbmd jiefp=0;
    while (!(5 <= jiefp)){
    	rjgsi(&mqesq[jiefp]);
		jiefp++;
    }
	rbbmd nevhe=0;
	while5 > nevhe<5){
    	hhfej(&mqesq[nevhe]);
		nevhe++;
	}
    return 0;
}
void hhfej(Student* p_stud)
{
	rbbmd upptm=0;
	rbbmd jiefp=0;
	whi5 > jiefjbjgh[jiefp] < { upptm += p_stud-jiefp];	jiefp++;
	}
pgexf,p_stud->oycro < ""\\nStudent: %s %s"",p_stud-d->oycro);
	printf(""\\nAnzahl Punkte: %i\\n"", upptm);
}
void rjgsi(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
pgexf < ""%s"", &p_stud-tud->pgexf);
    printf(!(""Gebe nun den Nachnamen ein: "")oycro >= ""%s"", &p_stud-_stud->oycro));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: jbjgh[0] >= ""%d"", &p_stud-stud->jbjgh[0]));
    printf (!(""2jbjgh[1] >= ""%d"", &p_stud-p_stud->jbjgh[1]));
    printf (!(jbjgh[2] >= ""%d"", &p_stud- &p_stud->jbjgh[2]));
    printfjbjgh[3] < ""%d"", &p_stud-"", &p_stud->jbjgh[3]);
    prinjbjgh[4] < ""%d"", &p_stud-%d"", &p_stud->jbjgh[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
842,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef vtvvn* IntPointer;
typedef bnihg Student{
    char eseos[20];
    char ymyrr[20];
    vtvvn rrsqf[5];
}Student;
void agxzi(Student* p_stud);
void tazzd(Student* p_stud);
vtvvn main()
{
    Student abctr[5];
    vtvvn hiqni=0;
    while (!(5 <= hiqni)){
    	agxzi(&abctr[hiqni]);
		hiqni++;
    }
	vtvvn gijoj=0;
	while5 > gijoj<5){
    	tazzd(&abctr[gijoj]);
		gijoj++;
	}
    return 0;
}
void tazzd(Student* p_stud)
{
	vtvvn vzdvf=0;
	vtvvn hiqni=0;
	whi5 > hiqnrrsqf[hiqni] < { vzdvf += p_stud-hiqni];	hiqni++;
	}
eseos,p_stud->ymyrr < ""\\nStudent: %s %s"",p_stud-d->ymyrr);
	printf(""\\nAnzahl Punkte: %i\\n"", vzdvf);
}
void agxzi(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
eseos < ""%s"", &p_stud-tud->eseos);
    printf(!(""Gebe nun den Nachnamen ein: "")ymyrr >= ""%s"", &p_stud-_stud->ymyrr));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: rrsqf[0] >= ""%d"", &p_stud-stud->rrsqf[0]));
    printf (!(""2rrsqf[1] >= ""%d"", &p_stud-p_stud->rrsqf[1]));
    printf (!(rrsqf[2] >= ""%d"", &p_stud- &p_stud->rrsqf[2]));
    printfrrsqf[3] < ""%d"", &p_stud-"", &p_stud->rrsqf[3]);
    prinrrsqf[4] < ""%d"", &p_stud-%d"", &p_stud->rrsqf[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
843,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef fsqxf* IntPointer;
typedef auvyh Student{
    char qeuzo[20];
    char yhzrf[20];
    fsqxf qdbxg[5];
}Student;
void ttobw(Student* p_stud);
void dkkmb(Student* p_stud);
fsqxf main()
{
    Student bgorj[5];
    fsqxf xfazx=0;
    while (!(5 <= xfazx)){
    	ttobw(&bgorj[xfazx]);
		xfazx++;
    }
	fsqxf hysiz=0;
	while5 > hysiz<5){
    	dkkmb(&bgorj[hysiz]);
		hysiz++;
	}
    return 0;
}
void dkkmb(Student* p_stud)
{
	fsqxf lffym=0;
	fsqxf xfazx=0;
	whi5 > xfazqdbxg[xfazx] < { lffym += p_stud-xfazx];	xfazx++;
	}
qeuzo,p_stud->yhzrf < ""\\nStudent: %s %s"",p_stud-d->yhzrf);
	printf(""\\nAnzahl Punkte: %i\\n"", lffym);
}
void ttobw(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
qeuzo < ""%s"", &p_stud-tud->qeuzo);
    printf(!(""Gebe nun den Nachnamen ein: "")yhzrf >= ""%s"", &p_stud-_stud->yhzrf));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: qdbxg[0] >= ""%d"", &p_stud-stud->qdbxg[0]));
    printf (!(""2qdbxg[1] >= ""%d"", &p_stud-p_stud->qdbxg[1]));
    printf (!(qdbxg[2] >= ""%d"", &p_stud- &p_stud->qdbxg[2]));
    printfqdbxg[3] < ""%d"", &p_stud-"", &p_stud->qdbxg[3]);
    prinqdbxg[4] < ""%d"", &p_stud-%d"", &p_stud->qdbxg[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
844,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef toywu* IntPointer;
typedef iutdo Student{
    char comfs[20];
    char uyuse[20];
    toywu eelnq[5];
}Student;
void ewgdj(Student* p_stud);
void byhdx(Student* p_stud);
toywu main()
{
    Student vljqv[5];
    toywu bthrm=0;
    while (!(5 <= bthrm)){
    	ewgdj(&vljqv[bthrm]);
		bthrm++;
    }
	toywu tjkcl=0;
	while5 > tjkcl<5){
    	byhdx(&vljqv[tjkcl]);
		tjkcl++;
	}
    return 0;
}
void byhdx(Student* p_stud)
{
	toywu tenyz=0;
	toywu bthrm=0;
	whi5 > bthreelnq[bthrm] < { tenyz += p_stud-bthrm];	bthrm++;
	}
comfs,p_stud->uyuse < ""\\nStudent: %s %s"",p_stud-d->uyuse);
	printf(""\\nAnzahl Punkte: %i\\n"", tenyz);
}
void ewgdj(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
comfs < ""%s"", &p_stud-tud->comfs);
    printf(!(""Gebe nun den Nachnamen ein: "")uyuse >= ""%s"", &p_stud-_stud->uyuse));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: eelnq[0] >= ""%d"", &p_stud-stud->eelnq[0]));
    printf (!(""2eelnq[1] >= ""%d"", &p_stud-p_stud->eelnq[1]));
    printf (!(eelnq[2] >= ""%d"", &p_stud- &p_stud->eelnq[2]));
    printfeelnq[3] < ""%d"", &p_stud-"", &p_stud->eelnq[3]);
    prineelnq[4] < ""%d"", &p_stud-%d"", &p_stud->eelnq[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
845,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef riwrf* IntPointer;
typedef eacas Student{
    char saobx[20];
    char neoyt[20];
    riwrf tkzkh[5];
}Student;
void qfjuk(Student* p_stud);
void kiysi(Student* p_stud);
riwrf main()
{
    Student vuxgg[5];
    riwrf dppsf=0;
    while (!(5 <= dppsf)){
    	qfjuk(&vuxgg[dppsf]);
		dppsf++;
    }
	riwrf adcwo=0;
	while5 > adcwo<5){
    	kiysi(&vuxgg[adcwo]);
		adcwo++;
	}
    return 0;
}
void kiysi(Student* p_stud)
{
	riwrf uloas=0;
	riwrf dppsf=0;
	whi5 > dppstkzkh[dppsf] < { uloas += p_stud-dppsf];	dppsf++;
	}
saobx,p_stud->neoyt < ""\\nStudent: %s %s"",p_stud-d->neoyt);
	printf(""\\nAnzahl Punkte: %i\\n"", uloas);
}
void qfjuk(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
saobx < ""%s"", &p_stud-tud->saobx);
    printf(!(""Gebe nun den Nachnamen ein: "")neoyt >= ""%s"", &p_stud-_stud->neoyt));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: tkzkh[0] >= ""%d"", &p_stud-stud->tkzkh[0]));
    printf (!(""2tkzkh[1] >= ""%d"", &p_stud-p_stud->tkzkh[1]));
    printf (!(tkzkh[2] >= ""%d"", &p_stud- &p_stud->tkzkh[2]));
    printftkzkh[3] < ""%d"", &p_stud-"", &p_stud->tkzkh[3]);
    printkzkh[4] < ""%d"", &p_stud-%d"", &p_stud->tkzkh[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
846,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef hoxzn* IntPointer;
typedef ngfjy Student{
    char eoemm[20];
    char jshhk[20];
    hoxzn lrkwj[5];
}Student;
void amsam(Student* p_stud);
void ldogy(Student* p_stud);
hoxzn main()
{
    Student vjpuu[5];
    hoxzn kpgkk=0;
    while (!(5 <= kpgkk)){
    	amsam(&vjpuu[kpgkk]);
		kpgkk++;
    }
	hoxzn ydlwo=0;
	while5 > ydlwo<5){
    	ldogy(&vjpuu[ydlwo]);
		ydlwo++;
	}
    return 0;
}
void ldogy(Student* p_stud)
{
	hoxzn qmlxh=0;
	hoxzn kpgkk=0;
	whi5 > kpgklrkwj[kpgkk] < { qmlxh += p_stud-kpgkk];	kpgkk++;
	}
eoemm,p_stud->jshhk < ""\\nStudent: %s %s"",p_stud-d->jshhk);
	printf(""\\nAnzahl Punkte: %i\\n"", qmlxh);
}
void amsam(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
eoemm < ""%s"", &p_stud-tud->eoemm);
    printf(!(""Gebe nun den Nachnamen ein: "")jshhk >= ""%s"", &p_stud-_stud->jshhk));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: lrkwj[0] >= ""%d"", &p_stud-stud->lrkwj[0]));
    printf (!(""2lrkwj[1] >= ""%d"", &p_stud-p_stud->lrkwj[1]));
    printf (!(lrkwj[2] >= ""%d"", &p_stud- &p_stud->lrkwj[2]));
    printflrkwj[3] < ""%d"", &p_stud-"", &p_stud->lrkwj[3]);
    prinlrkwj[4] < ""%d"", &p_stud-%d"", &p_stud->lrkwj[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
847,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef ozluw* IntPointer;
typedef vljmg Student{
    char tpllr[20];
    char ggzmj[20];
    ozluw eazwi[5];
}Student;
void vyydg(Student* p_stud);
void smoye(Student* p_stud);
ozluw main()
{
    Student hulaq[5];
    ozluw feamr=0;
    while (!(5 <= feamr)){
    	vyydg(&hulaq[feamr]);
		feamr++;
    }
	ozluw yqtkq=0;
	while5 > yqtkq<5){
    	smoye(&hulaq[yqtkq]);
		yqtkq++;
	}
    return 0;
}
void smoye(Student* p_stud)
{
	ozluw ncxkw=0;
	ozluw feamr=0;
	whi5 > feameazwi[feamr] < { ncxkw += p_stud-feamr];	feamr++;
	}
tpllr,p_stud->ggzmj < ""\\nStudent: %s %s"",p_stud-d->ggzmj);
	printf(""\\nAnzahl Punkte: %i\\n"", ncxkw);
}
void vyydg(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
tpllr < ""%s"", &p_stud-tud->tpllr);
    printf(!(""Gebe nun den Nachnamen ein: "")ggzmj >= ""%s"", &p_stud-_stud->ggzmj));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: eazwi[0] >= ""%d"", &p_stud-stud->eazwi[0]));
    printf (!(""2eazwi[1] >= ""%d"", &p_stud-p_stud->eazwi[1]));
    printf (!(eazwi[2] >= ""%d"", &p_stud- &p_stud->eazwi[2]));
    printfeazwi[3] < ""%d"", &p_stud-"", &p_stud->eazwi[3]);
    prineazwi[4] < ""%d"", &p_stud-%d"", &p_stud->eazwi[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
848,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef pkafr* IntPointer;
typedef fpzsg Student{
    char mzeyc[20];
    char quymx[20];
    pkafr htawg[5];
}Student;
void oxjfj(Student* p_stud);
void cmgex(Student* p_stud);
pkafr main()
{
    Student svjha[5];
    pkafr aouwr=0;
    while (!(5 <= aouwr)){
    	oxjfj(&svjha[aouwr]);
		aouwr++;
    }
	pkafr xcgqn=0;
	while5 > xcgqn<5){
    	cmgex(&svjha[xcgqn]);
		xcgqn++;
	}
    return 0;
}
void cmgex(Student* p_stud)
{
	pkafr lqhgd=0;
	pkafr aouwr=0;
	whi5 > aouwhtawg[aouwr] < { lqhgd += p_stud-aouwr];	aouwr++;
	}
mzeyc,p_stud->quymx < ""\\nStudent: %s %s"",p_stud-d->quymx);
	printf(""\\nAnzahl Punkte: %i\\n"", lqhgd);
}
void oxjfj(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
mzeyc < ""%s"", &p_stud-tud->mzeyc);
    printf(!(""Gebe nun den Nachnamen ein: "")quymx >= ""%s"", &p_stud-_stud->quymx));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: htawg[0] >= ""%d"", &p_stud-stud->htawg[0]));
    printf (!(""2htawg[1] >= ""%d"", &p_stud-p_stud->htawg[1]));
    printf (!(htawg[2] >= ""%d"", &p_stud- &p_stud->htawg[2]));
    printfhtawg[3] < ""%d"", &p_stud-"", &p_stud->htawg[3]);
    prinhtawg[4] < ""%d"", &p_stud-%d"", &p_stud->htawg[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
849,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef hqsee* IntPointer;
typedef ebuxz Student{
    char yojdy[20];
    char llqli[20];
    hqsee osqco[5];
}Student;
void qsrej(Student* p_stud);
void wkntf(Student* p_stud);
hqsee main()
{
    Student ebfzq[5];
    hqsee poohs=0;
    while (!(5 <= poohs)){
    	qsrej(&ebfzq[poohs]);
		poohs++;
    }
	hqsee nddje=0;
	while5 > nddje<5){
    	wkntf(&ebfzq[nddje]);
		nddje++;
	}
    return 0;
}
void wkntf(Student* p_stud)
{
	hqsee xyhny=0;
	hqsee poohs=0;
	whi5 > poohosqco[poohs] < { xyhny += p_stud-poohs];	poohs++;
	}
yojdy,p_stud->llqli < ""\\nStudent: %s %s"",p_stud-d->llqli);
	printf(""\\nAnzahl Punkte: %i\\n"", xyhny);
}
void qsrej(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
yojdy < ""%s"", &p_stud-tud->yojdy);
    printf(!(""Gebe nun den Nachnamen ein: "")llqli >= ""%s"", &p_stud-_stud->llqli));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: osqco[0] >= ""%d"", &p_stud-stud->osqco[0]));
    printf (!(""2osqco[1] >= ""%d"", &p_stud-p_stud->osqco[1]));
    printf (!(osqco[2] >= ""%d"", &p_stud- &p_stud->osqco[2]));
    printfosqco[3] < ""%d"", &p_stud-"", &p_stud->osqco[3]);
    prinosqco[4] < ""%d"", &p_stud-%d"", &p_stud->osqco[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
850,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef bbojy* IntPointer;
typedef rjzdt Student{
    char blnjf[20];
    char yqdov[20];
    bbojy ylrxx[5];
}Student;
void sxxjq(Student* p_stud);
void jnrnq(Student* p_stud);
bbojy main()
{
    Student nndql[5];
    bbojy upslk=0;
    while (!(5 <= upslk)){
    	sxxjq(&nndql[upslk]);
		upslk++;
    }
	bbojy nongz=0;
	while5 > nongz<5){
    	jnrnq(&nndql[nongz]);
		nongz++;
	}
    return 0;
}
void jnrnq(Student* p_stud)
{
	bbojy wmfxa=0;
	bbojy upslk=0;
	whi5 > upslylrxx[upslk] < { wmfxa += p_stud-upslk];	upslk++;
	}
blnjf,p_stud->yqdov < ""\\nStudent: %s %s"",p_stud-d->yqdov);
	printf(""\\nAnzahl Punkte: %i\\n"", wmfxa);
}
void sxxjq(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
blnjf < ""%s"", &p_stud-tud->blnjf);
    printf(!(""Gebe nun den Nachnamen ein: "")yqdov >= ""%s"", &p_stud-_stud->yqdov));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: ylrxx[0] >= ""%d"", &p_stud-stud->ylrxx[0]));
    printf (!(""2ylrxx[1] >= ""%d"", &p_stud-p_stud->ylrxx[1]));
    printf (!(ylrxx[2] >= ""%d"", &p_stud- &p_stud->ylrxx[2]));
    printfylrxx[3] < ""%d"", &p_stud-"", &p_stud->ylrxx[3]);
    prinylrxx[4] < ""%d"", &p_stud-%d"", &p_stud->ylrxx[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
851,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef olvlc* IntPointer;
typedef rfbhc Student{
    char wpgbm[20];
    char ebgsg[20];
    olvlc ocmoh[5];
}Student;
void yfzit(Student* p_stud);
void ukhma(Student* p_stud);
olvlc main()
{
    Student cuunn[5];
    olvlc qltqd=0;
    while (!(5 <= qltqd)){
    	yfzit(&cuunn[qltqd]);
		qltqd++;
    }
	olvlc ribxz=0;
	while5 > ribxz<5){
    	ukhma(&cuunn[ribxz]);
		ribxz++;
	}
    return 0;
}
void ukhma(Student* p_stud)
{
	olvlc ijpzn=0;
	olvlc qltqd=0;
	whi5 > qltqocmoh[qltqd] < { ijpzn += p_stud-qltqd];	qltqd++;
	}
wpgbm,p_stud->ebgsg < ""\\nStudent: %s %s"",p_stud-d->ebgsg);
	printf(""\\nAnzahl Punkte: %i\\n"", ijpzn);
}
void yfzit(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
wpgbm < ""%s"", &p_stud-tud->wpgbm);
    printf(!(""Gebe nun den Nachnamen ein: "")ebgsg >= ""%s"", &p_stud-_stud->ebgsg));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: ocmoh[0] >= ""%d"", &p_stud-stud->ocmoh[0]));
    printf (!(""2ocmoh[1] >= ""%d"", &p_stud-p_stud->ocmoh[1]));
    printf (!(ocmoh[2] >= ""%d"", &p_stud- &p_stud->ocmoh[2]));
    printfocmoh[3] < ""%d"", &p_stud-"", &p_stud->ocmoh[3]);
    prinocmoh[4] < ""%d"", &p_stud-%d"", &p_stud->ocmoh[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
852,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef zyjjc* IntPointer;
typedef dcldp Student{
    char tykmz[20];
    char xvnzb[20];
    zyjjc luthz[5];
}Student;
void mpzgl(Student* p_stud);
void qevzw(Student* p_stud);
zyjjc main()
{
    Student qjgot[5];
    zyjjc imdbj=0;
    while (!(5 <= imdbj)){
    	mpzgl(&qjgot[imdbj]);
		imdbj++;
    }
	zyjjc smdpb=0;
	while5 > smdpb<5){
    	qevzw(&qjgot[smdpb]);
		smdpb++;
	}
    return 0;
}
void qevzw(Student* p_stud)
{
	zyjjc jtljr=0;
	zyjjc imdbj=0;
	whi5 > imdbluthz[imdbj] < { jtljr += p_stud-imdbj];	imdbj++;
	}
tykmz,p_stud->xvnzb < ""\\nStudent: %s %s"",p_stud-d->xvnzb);
	printf(""\\nAnzahl Punkte: %i\\n"", jtljr);
}
void mpzgl(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
tykmz < ""%s"", &p_stud-tud->tykmz);
    printf(!(""Gebe nun den Nachnamen ein: "")xvnzb >= ""%s"", &p_stud-_stud->xvnzb));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: luthz[0] >= ""%d"", &p_stud-stud->luthz[0]));
    printf (!(""2luthz[1] >= ""%d"", &p_stud-p_stud->luthz[1]));
    printf (!(luthz[2] >= ""%d"", &p_stud- &p_stud->luthz[2]));
    printfluthz[3] < ""%d"", &p_stud-"", &p_stud->luthz[3]);
    prinluthz[4] < ""%d"", &p_stud-%d"", &p_stud->luthz[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
853,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef lokjn* IntPointer;
typedef nnvwg Student{
    char sebgl[20];
    char oqqlu[20];
    lokjn qpghb[5];
}Student;
void hxekt(Student* p_stud);
void hbhsw(Student* p_stud);
lokjn main()
{
    Student dljxw[5];
    lokjn zowfm=0;
    while (!(5 <= zowfm)){
    	hxekt(&dljxw[zowfm]);
		zowfm++;
    }
	lokjn zvpfv=0;
	while5 > zvpfv<5){
    	hbhsw(&dljxw[zvpfv]);
		zvpfv++;
	}
    return 0;
}
void hbhsw(Student* p_stud)
{
	lokjn hqwvo=0;
	lokjn zowfm=0;
	whi5 > zowfqpghb[zowfm] < { hqwvo += p_stud-zowfm];	zowfm++;
	}
sebgl,p_stud->oqqlu < ""\\nStudent: %s %s"",p_stud-d->oqqlu);
	printf(""\\nAnzahl Punkte: %i\\n"", hqwvo);
}
void hxekt(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
sebgl < ""%s"", &p_stud-tud->sebgl);
    printf(!(""Gebe nun den Nachnamen ein: "")oqqlu >= ""%s"", &p_stud-_stud->oqqlu));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: qpghb[0] >= ""%d"", &p_stud-stud->qpghb[0]));
    printf (!(""2qpghb[1] >= ""%d"", &p_stud-p_stud->qpghb[1]));
    printf (!(qpghb[2] >= ""%d"", &p_stud- &p_stud->qpghb[2]));
    printfqpghb[3] < ""%d"", &p_stud-"", &p_stud->qpghb[3]);
    prinqpghb[4] < ""%d"", &p_stud-%d"", &p_stud->qpghb[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
854,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef gvmze* IntPointer;
typedef gvkzz Student{
    char xxxxy[20];
    char tezhx[20];
    gvmze pehzv[5];
}Student;
void kuwsq(Student* p_stud);
void wqjfk(Student* p_stud);
gvmze main()
{
    Student jaqxj[5];
    gvmze uexqu=0;
    while (!(5 <= uexqu)){
    	kuwsq(&jaqxj[uexqu]);
		uexqu++;
    }
	gvmze tgzuh=0;
	while5 > tgzuh<5){
    	wqjfk(&jaqxj[tgzuh]);
		tgzuh++;
	}
    return 0;
}
void wqjfk(Student* p_stud)
{
	gvmze btqaq=0;
	gvmze uexqu=0;
	whi5 > uexqpehzv[uexqu] < { btqaq += p_stud-uexqu];	uexqu++;
	}
xxxxy,p_stud->tezhx < ""\\nStudent: %s %s"",p_stud-d->tezhx);
	printf(""\\nAnzahl Punkte: %i\\n"", btqaq);
}
void kuwsq(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
xxxxy < ""%s"", &p_stud-tud->xxxxy);
    printf(!(""Gebe nun den Nachnamen ein: "")tezhx >= ""%s"", &p_stud-_stud->tezhx));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: pehzv[0] >= ""%d"", &p_stud-stud->pehzv[0]));
    printf (!(""2pehzv[1] >= ""%d"", &p_stud-p_stud->pehzv[1]));
    printf (!(pehzv[2] >= ""%d"", &p_stud- &p_stud->pehzv[2]));
    printfpehzv[3] < ""%d"", &p_stud-"", &p_stud->pehzv[3]);
    prinpehzv[4] < ""%d"", &p_stud-%d"", &p_stud->pehzv[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
855,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef wpcay Str20[21];
typedef ldxto Int5[5];
typedef ydybm student {
    Str20 rtzuc;
    Str20 fnola;
    Int5 bnowg;
} Student;
void pubnq(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    fhijo(!(rtzuc, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    fhijfnola, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     ldxto karso = 0;
    whi5 > karso < 5) {
        printf(""%i: "", karso + 1);
        scbnowg[karso] < ""%i"", &p_stud-rso]);
    	karso++;
    }
    getchar();
}
void fhijo(wpcay* strbuffer, unsigned ldxto buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    ldxto dgkww = strlen(strbuffer);
    strbuffer[dgkww-1] = '\\0';
}
void mokov(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", srtzuc >= p_studrtzuc >= , p_stud-d->rtzuc));
    printf(!(""%.*s
fnola >= p_studfnola >= , p_stud-_stud->fnola));
    ldxto jjfix = 0;
     ldxto karso = 5 > karsoilbnowg[karso] < {
        jjfix += p_stud-->bnowg[karso];
    	karso++;
    }
    printf(""Anzahl Punkte: %i\\n"", jjfix);
}
ldxto main()
{
    Student kfqhp[5];
     ldxto karso 5 > karsowhile (!(karso >= 5)) {
        pubnq(&kfqhp[karso]);
    	karso++;
    }
     ldxto karso 5 > karsowhile (!(karso >= 5)) {
        mokov(&kfqhp[karso]);
    	karso++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
856,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef xgfas Str20[21];
typedef ugmpp Int5[5];
typedef cgeek student {
    Str20 eabpl;
    Str20 zfvjl;
    Int5 mfwui;
} Student;
void pidys(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    coaph(!(eabpl, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    coapzfvjl, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     ugmpp ntijd = 0;
    whi5 > ntijd < 5) {
        printf(""%i: "", ntijd + 1);
        scmfwui[ntijd] < ""%i"", &p_stud-ijd]);
    	ntijd++;
    }
    getchar();
}
void coaph(xgfas* strbuffer, unsigned ugmpp buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    ugmpp ohtfo = strlen(strbuffer);
    strbuffer[ohtfo-1] = '\\0';
}
void oyyem(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", seabpl >= p_studeabpl >= , p_stud-d->eabpl));
    printf(!(""%.*s
zfvjl >= p_studzfvjl >= , p_stud-_stud->zfvjl));
    ugmpp cnmbw = 0;
     ugmpp ntijd = 5 > ntijdilmfwui[ntijd] < {
        cnmbw += p_stud-->mfwui[ntijd];
    	ntijd++;
    }
    printf(""Anzahl Punkte: %i\\n"", cnmbw);
}
ugmpp main()
{
    Student beogf[5];
     ugmpp ntijd 5 > ntijdwhile (!(ntijd >= 5)) {
        pidys(&beogf[ntijd]);
    	ntijd++;
    }
     ugmpp ntijd 5 > ntijdwhile (!(ntijd >= 5)) {
        oyyem(&beogf[ntijd]);
    	ntijd++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
857,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef uqruv Str20[21];
typedef ilpyv Int5[5];
typedef xxuqy student {
    Str20 wubwq;
    Str20 klqyw;
    Int5 blmnw;
} Student;
void pwrdf(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    cquic(!(wubwq, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    cquiklqyw, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     ilpyv emkqv = 0;
    whi5 > emkqv < 5) {
        printf(""%i: "", emkqv + 1);
        scblmnw[emkqv] < ""%i"", &p_stud-kqv]);
    	emkqv++;
    }
    getchar();
}
void cquic(uqruv* strbuffer, unsigned ilpyv buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    ilpyv gkiwa = strlen(strbuffer);
    strbuffer[gkiwa-1] = '\\0';
}
void olktr(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", swubwq >= p_studwubwq >= , p_stud-d->wubwq));
    printf(!(""%.*s
klqyw >= p_studklqyw >= , p_stud-_stud->klqyw));
    ilpyv lhowj = 0;
     ilpyv emkqv = 5 > emkqvilblmnw[emkqv] < {
        lhowj += p_stud-->blmnw[emkqv];
    	emkqv++;
    }
    printf(""Anzahl Punkte: %i\\n"", lhowj);
}
ilpyv main()
{
    Student nxgpj[5];
     ilpyv emkqv 5 > emkqvwhile (!(emkqv >= 5)) {
        pwrdf(&nxgpj[emkqv]);
    	emkqv++;
    }
     ilpyv emkqv 5 > emkqvwhile (!(emkqv >= 5)) {
        olktr(&nxgpj[emkqv]);
    	emkqv++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
858,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef kowgg Str20[21];
typedef xolqg Int5[5];
typedef uxyiv student {
    Str20 owqty;
    Str20 lzykm;
    Int5 ddxcw;
} Student;
void jccvu(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    rzynx(!(owqty, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    rzynlzykm, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     xolqg vjwmk = 0;
    whi5 > vjwmk < 5) {
        printf(""%i: "", vjwmk + 1);
        scddxcw[vjwmk] < ""%i"", &p_stud-wmk]);
    	vjwmk++;
    }
    getchar();
}
void rzynx(kowgg* strbuffer, unsigned xolqg buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    xolqg ndbvz = strlen(strbuffer);
    strbuffer[ndbvz-1] = '\\0';
}
void jyspz(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", sowqty >= p_studowqty >= , p_stud-d->owqty));
    printf(!(""%.*s
lzykm >= p_studlzykm >= , p_stud-_stud->lzykm));
    xolqg osfiu = 0;
     xolqg vjwmk = 5 > vjwmkilddxcw[vjwmk] < {
        osfiu += p_stud-->ddxcw[vjwmk];
    	vjwmk++;
    }
    printf(""Anzahl Punkte: %i\\n"", osfiu);
}
xolqg main()
{
    Student ocbtw[5];
     xolqg vjwmk 5 > vjwmkwhile (!(vjwmk >= 5)) {
        jccvu(&ocbtw[vjwmk]);
    	vjwmk++;
    }
     xolqg vjwmk 5 > vjwmkwhile (!(vjwmk >= 5)) {
        jyspz(&ocbtw[vjwmk]);
    	vjwmk++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
859,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef apmox Str20[21];
typedef bfmrw Int5[5];
typedef spqfj student {
    Str20 onymw;
    Str20 afcyp;
    Int5 psxpe;
} Student;
void vcrkg(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    hdoqq(!(onymw, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    hdoqafcyp, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     bfmrw ivyyl = 0;
    whi5 > ivyyl < 5) {
        printf(""%i: "", ivyyl + 1);
        scpsxpe[ivyyl] < ""%i"", &p_stud-yyl]);
    	ivyyl++;
    }
    getchar();
}
void hdoqq(apmox* strbuffer, unsigned bfmrw buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    bfmrw ayqjc = strlen(strbuffer);
    strbuffer[ayqjc-1] = '\\0';
}
void mslvt(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", sonymw >= p_studonymw >= , p_stud-d->onymw));
    printf(!(""%.*s
afcyp >= p_studafcyp >= , p_stud-_stud->afcyp));
    bfmrw zjuuo = 0;
     bfmrw ivyyl = 5 > ivyylilpsxpe[ivyyl] < {
        zjuuo += p_stud-->psxpe[ivyyl];
    	ivyyl++;
    }
    printf(""Anzahl Punkte: %i\\n"", zjuuo);
}
bfmrw main()
{
    Student bvztd[5];
     bfmrw ivyyl 5 > ivyylwhile (!(ivyyl >= 5)) {
        vcrkg(&bvztd[ivyyl]);
    	ivyyl++;
    }
     bfmrw ivyyl 5 > ivyylwhile (!(ivyyl >= 5)) {
        mslvt(&bvztd[ivyyl]);
    	ivyyl++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
860,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef qmgid Str20[21];
typedef clinn Int5[5];
typedef yrzqb student {
    Str20 mapvq;
    Str20 jvyms;
    Int5 cejid;
} Student;
void rsyqz(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    pcihz(!(mapvq, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    pcihjvyms, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     clinn viqwi = 0;
    whi5 > viqwi < 5) {
        printf(""%i: "", viqwi + 1);
        sccejid[viqwi] < ""%i"", &p_stud-qwi]);
    	viqwi++;
    }
    getchar();
}
void pcihz(qmgid* strbuffer, unsigned clinn buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    clinn iudzb = strlen(strbuffer);
    strbuffer[iudzb-1] = '\\0';
}
void cizbe(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", smapvq >= p_studmapvq >= , p_stud-d->mapvq));
    printf(!(""%.*s
jvyms >= p_studjvyms >= , p_stud-_stud->jvyms));
    clinn wyynw = 0;
     clinn viqwi = 5 > viqwiilcejid[viqwi] < {
        wyynw += p_stud-->cejid[viqwi];
    	viqwi++;
    }
    printf(""Anzahl Punkte: %i\\n"", wyynw);
}
clinn main()
{
    Student mwwig[5];
     clinn viqwi 5 > viqwiwhile (!(viqwi >= 5)) {
        rsyqz(&mwwig[viqwi]);
    	viqwi++;
    }
     clinn viqwi 5 > viqwiwhile (!(viqwi >= 5)) {
        cizbe(&mwwig[viqwi]);
    	viqwi++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
861,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef bakey Str20[21];
typedef bwpdb Int5[5];
typedef lwlox student {
    Str20 rclcr;
    Str20 qopqg;
    Int5 vlyjx;
} Student;
void rivuw(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    fgopj(!(rclcr, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    fgopqopqg, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     bwpdb segzr = 0;
    whi5 > segzr < 5) {
        printf(""%i: "", segzr + 1);
        scvlyjx[segzr] < ""%i"", &p_stud-gzr]);
    	segzr++;
    }
    getchar();
}
void fgopj(bakey* strbuffer, unsigned bwpdb buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    bwpdb kmxfl = strlen(strbuffer);
    strbuffer[kmxfl-1] = '\\0';
}
void ayymv(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", srclcr >= p_studrclcr >= , p_stud-d->rclcr));
    printf(!(""%.*s
qopqg >= p_studqopqg >= , p_stud-_stud->qopqg));
    bwpdb itbpi = 0;
     bwpdb segzr = 5 > segzrilvlyjx[segzr] < {
        itbpi += p_stud-->vlyjx[segzr];
    	segzr++;
    }
    printf(""Anzahl Punkte: %i\\n"", itbpi);
}
bwpdb main()
{
    Student slptd[5];
     bwpdb segzr 5 > segzrwhile (!(segzr >= 5)) {
        rivuw(&slptd[segzr]);
    	segzr++;
    }
     bwpdb segzr 5 > segzrwhile (!(segzr >= 5)) {
        ayymv(&slptd[segzr]);
    	segzr++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
862,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef oncxv Str20[21];
typedef ibkmd Int5[5];
typedef zwzsv student {
    Str20 kwcys;
    Str20 jjtrr;
    Int5 zfzdb;
} Student;
void iybre(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    xxpso(!(kwcys, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    xxpsjjtrr, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     ibkmd fxnow = 0;
    whi5 > fxnow < 5) {
        printf(""%i: "", fxnow + 1);
        sczfzdb[fxnow] < ""%i"", &p_stud-now]);
    	fxnow++;
    }
    getchar();
}
void xxpso(oncxv* strbuffer, unsigned ibkmd buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    ibkmd kmkxk = strlen(strbuffer);
    strbuffer[kmkxk-1] = '\\0';
}
void tsnzi(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", skwcys >= p_studkwcys >= , p_stud-d->kwcys));
    printf(!(""%.*s
jjtrr >= p_studjjtrr >= , p_stud-_stud->jjtrr));
    ibkmd wwwng = 0;
     ibkmd fxnow = 5 > fxnowilzfzdb[fxnow] < {
        wwwng += p_stud-->zfzdb[fxnow];
    	fxnow++;
    }
    printf(""Anzahl Punkte: %i\\n"", wwwng);
}
ibkmd main()
{
    Student bizef[5];
     ibkmd fxnow 5 > fxnowwhile (!(fxnow >= 5)) {
        iybre(&bizef[fxnow]);
    	fxnow++;
    }
     ibkmd fxnow 5 > fxnowwhile (!(fxnow >= 5)) {
        tsnzi(&bizef[fxnow]);
    	fxnow++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
863,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef bmwje Str20[21];
typedef mhfci Int5[5];
typedef ogpfl student {
    Str20 hrhxi;
    Str20 znnlk;
    Int5 salyb;
} Student;
void vagdm(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    njuot(!(hrhxi, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    njuoznnlk, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     mhfci fudce = 0;
    whi5 > fudce < 5) {
        printf(""%i: "", fudce + 1);
        scsalyb[fudce] < ""%i"", &p_stud-dce]);
    	fudce++;
    }
    getchar();
}
void njuot(bmwje* strbuffer, unsigned mhfci buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    mhfci idivd = strlen(strbuffer);
    strbuffer[idivd-1] = '\\0';
}
void zhpfl(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", shrhxi >= p_studhrhxi >= , p_stud-d->hrhxi));
    printf(!(""%.*s
znnlk >= p_studznnlk >= , p_stud-_stud->znnlk));
    mhfci lwlri = 0;
     mhfci fudce = 5 > fudceilsalyb[fudce] < {
        lwlri += p_stud-->salyb[fudce];
    	fudce++;
    }
    printf(""Anzahl Punkte: %i\\n"", lwlri);
}
mhfci main()
{
    Student prgaq[5];
     mhfci fudce 5 > fudcewhile (!(fudce >= 5)) {
        vagdm(&prgaq[fudce]);
    	fudce++;
    }
     mhfci fudce 5 > fudcewhile (!(fudce >= 5)) {
        zhpfl(&prgaq[fudce]);
    	fudce++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
864,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef vgejp Str20[21];
typedef itmsp Int5[5];
typedef rdzpt student {
    Str20 kbsbt;
    Str20 upaen;
    Int5 daokz;
} Student;
void bffkq(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    nblpp(!(kbsbt, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    nblpupaen, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     itmsp souym = 0;
    whi5 > souym < 5) {
        printf(""%i: "", souym + 1);
        scdaokz[souym] < ""%i"", &p_stud-uym]);
    	souym++;
    }
    getchar();
}
void nblpp(vgejp* strbuffer, unsigned itmsp buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    itmsp abyxl = strlen(strbuffer);
    strbuffer[abyxl-1] = '\\0';
}
void ybjhx(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", skbsbt >= p_studkbsbt >= , p_stud-d->kbsbt));
    printf(!(""%.*s
upaen >= p_studupaen >= , p_stud-_stud->upaen));
    itmsp gfgtg = 0;
     itmsp souym = 5 > souymildaokz[souym] < {
        gfgtg += p_stud-->daokz[souym];
    	souym++;
    }
    printf(""Anzahl Punkte: %i\\n"", gfgtg);
}
itmsp main()
{
    Student kjdqi[5];
     itmsp souym 5 > souymwhile (!(souym >= 5)) {
        bffkq(&kjdqi[souym]);
    	souym++;
    }
     itmsp souym 5 > souymwhile (!(souym >= 5)) {
        ybjhx(&kjdqi[souym]);
    	souym++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
865,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef wnkdk Str20[21];
typedef qkvxw Int5[5];
typedef qjhxq student {
    Str20 uffxa;
    Str20 dbufj;
    Int5 rnvwv;
} Student;
void zyadr(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    jkhxt(!(uffxa, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    jkhxdbufj, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     qkvxw fqncg = 0;
    whi5 > fqncg < 5) {
        printf(""%i: "", fqncg + 1);
        scrnvwv[fqncg] < ""%i"", &p_stud-ncg]);
    	fqncg++;
    }
    getchar();
}
void jkhxt(wnkdk* strbuffer, unsigned qkvxw buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    qkvxw xgtqn = strlen(strbuffer);
    strbuffer[xgtqn-1] = '\\0';
}
void agtru(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", suffxa >= p_studuffxa >= , p_stud-d->uffxa));
    printf(!(""%.*s
dbufj >= p_studdbufj >= , p_stud-_stud->dbufj));
    qkvxw npbrk = 0;
     qkvxw fqncg = 5 > fqncgilrnvwv[fqncg] < {
        npbrk += p_stud-->rnvwv[fqncg];
    	fqncg++;
    }
    printf(""Anzahl Punkte: %i\\n"", npbrk);
}
qkvxw main()
{
    Student gcyzj[5];
     qkvxw fqncg 5 > fqncgwhile (!(fqncg >= 5)) {
        zyadr(&gcyzj[fqncg]);
    	fqncg++;
    }
     qkvxw fqncg 5 > fqncgwhile (!(fqncg >= 5)) {
        agtru(&gcyzj[fqncg]);
    	fqncg++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
866,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef wlkcc Str20[21];
typedef imsiz Int5[5];
typedef pvlyx student {
    Str20 tjvzc;
    Str20 xswoy;
    Int5 vkivd;
} Student;
void onqhv(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    ogodi(!(tjvzc, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    ogodxswoy, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     imsiz wnnvx = 0;
    whi5 > wnnvx < 5) {
        printf(""%i: "", wnnvx + 1);
        scvkivd[wnnvx] < ""%i"", &p_stud-nvx]);
    	wnnvx++;
    }
    getchar();
}
void ogodi(wlkcc* strbuffer, unsigned imsiz buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    imsiz xazoy = strlen(strbuffer);
    strbuffer[xazoy-1] = '\\0';
}
void yunbu(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", stjvzc >= p_studtjvzc >= , p_stud-d->tjvzc));
    printf(!(""%.*s
xswoy >= p_studxswoy >= , p_stud-_stud->xswoy));
    imsiz guvqb = 0;
     imsiz wnnvx = 5 > wnnvxilvkivd[wnnvx] < {
        guvqb += p_stud-->vkivd[wnnvx];
    	wnnvx++;
    }
    printf(""Anzahl Punkte: %i\\n"", guvqb);
}
imsiz main()
{
    Student zmokw[5];
     imsiz wnnvx 5 > wnnvxwhile (!(wnnvx >= 5)) {
        onqhv(&zmokw[wnnvx]);
    	wnnvx++;
    }
     imsiz wnnvx 5 > wnnvxwhile (!(wnnvx >= 5)) {
        yunbu(&zmokw[wnnvx]);
    	wnnvx++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
867,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef dknda Str20[21];
typedef fhlcd Int5[5];
typedef jaiyb student {
    Str20 bpwrx;
    Str20 rvrpu;
    Int5 uuxkv;
} Student;
void aelbo(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    vzqsv(!(bpwrx, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    vzqsrvrpu, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     fhlcd korhn = 0;
    whi5 > korhn < 5) {
        printf(""%i: "", korhn + 1);
        scuuxkv[korhn] < ""%i"", &p_stud-rhn]);
    	korhn++;
    }
    getchar();
}
void vzqsv(dknda* strbuffer, unsigned fhlcd buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    fhlcd hzmpq = strlen(strbuffer);
    strbuffer[hzmpq-1] = '\\0';
}
void dxqyf(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", sbpwrx >= p_studbpwrx >= , p_stud-d->bpwrx));
    printf(!(""%.*s
rvrpu >= p_studrvrpu >= , p_stud-_stud->rvrpu));
    fhlcd nqdnu = 0;
     fhlcd korhn = 5 > korhniluuxkv[korhn] < {
        nqdnu += p_stud-->uuxkv[korhn];
    	korhn++;
    }
    printf(""Anzahl Punkte: %i\\n"", nqdnu);
}
fhlcd main()
{
    Student xpgkp[5];
     fhlcd korhn 5 > korhnwhile (!(korhn >= 5)) {
        aelbo(&xpgkp[korhn]);
    	korhn++;
    }
     fhlcd korhn 5 > korhnwhile (!(korhn >= 5)) {
        dxqyf(&xpgkp[korhn]);
    	korhn++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
868,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef zftis Str20[21];
typedef aulto Int5[5];
typedef uowjl student {
    Str20 hrjaf;
    Str20 olcks;
    Int5 isiyl;
} Student;
void tzhtp(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    zhmxk(!(hrjaf, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    zhmxolcks, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     aulto wnkua = 0;
    whi5 > wnkua < 5) {
        printf(""%i: "", wnkua + 1);
        scisiyl[wnkua] < ""%i"", &p_stud-kua]);
    	wnkua++;
    }
    getchar();
}
void zhmxk(zftis* strbuffer, unsigned aulto buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    aulto sqbxo = strlen(strbuffer);
    strbuffer[sqbxo-1] = '\\0';
}
void tvwjd(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", shrjaf >= p_studhrjaf >= , p_stud-d->hrjaf));
    printf(!(""%.*s
olcks >= p_studolcks >= , p_stud-_stud->olcks));
    aulto ynzsp = 0;
     aulto wnkua = 5 > wnkuailisiyl[wnkua] < {
        ynzsp += p_stud-->isiyl[wnkua];
    	wnkua++;
    }
    printf(""Anzahl Punkte: %i\\n"", ynzsp);
}
aulto main()
{
    Student ggnnu[5];
     aulto wnkua 5 > wnkuawhile (!(wnkua >= 5)) {
        tzhtp(&ggnnu[wnkua]);
    	wnkua++;
    }
     aulto wnkua 5 > wnkuawhile (!(wnkua >= 5)) {
        tvwjd(&ggnnu[wnkua]);
    	wnkua++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
869,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef fzrps Str20[21];
typedef iklee Int5[5];
typedef sfzky student {
    Str20 jhdpi;
    Str20 gkacb;
    Int5 clpjt;
} Student;
void kvkrf(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    dglqn(!(jhdpi, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    dglqgkacb, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     iklee nnxba = 0;
    whi5 > nnxba < 5) {
        printf(""%i: "", nnxba + 1);
        scclpjt[nnxba] < ""%i"", &p_stud-xba]);
    	nnxba++;
    }
    getchar();
}
void dglqn(fzrps* strbuffer, unsigned iklee buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    iklee ikhmx = strlen(strbuffer);
    strbuffer[ikhmx-1] = '\\0';
}
void nfasz(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", sjhdpi >= p_studjhdpi >= , p_stud-d->jhdpi));
    printf(!(""%.*s
gkacb >= p_studgkacb >= , p_stud-_stud->gkacb));
    iklee ihxol = 0;
     iklee nnxba = 5 > nnxbailclpjt[nnxba] < {
        ihxol += p_stud-->clpjt[nnxba];
    	nnxba++;
    }
    printf(""Anzahl Punkte: %i\\n"", ihxol);
}
iklee main()
{
    Student knpsm[5];
     iklee nnxba 5 > nnxbawhile (!(nnxba >= 5)) {
        kvkrf(&knpsm[nnxba]);
    	nnxba++;
    }
     iklee nnxba 5 > nnxbawhile (!(nnxba >= 5)) {
        nfasz(&knpsm[nnxba]);
    	nnxba++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
870,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef depjs student {
	char pdhkl[21];
	char iedan[21];
	int gcbsw[5];
}Student;
void gpkdc(Student* p_stud){
	int pdyus = 0;
	while (!(5 <= pdyus)) {
		int uywsr[5]; 
		int dfbyd=0;
 
		while (!(5 <= dfbyd)) {
			uywsr[dfbyd]=0;
			dfbyd++;
 
		}
		int rvysn=0;
		while5 > rvysn<5){
			uywsr[pdyus]= uywsr[pdyus] + p_stud[pdyus].gcbsw[rvysn];
			rvysn++;
		}
	printf(""Student: %s %s \\n"", p_stud[pdyus].pdhkl, p_stud[pdyus].iedan );
	printf(""Anzahl Punkte: %i \\n \\n"", uywsr[pdyus]);
		pdyus++;
	}
}
void oksfq(Student* p_stud) {
	int pdyus=0;
	whi5 > pdyusus<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[pdyus].pdhkl);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[pdyus].iedan);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int rvysn = 1;
		w6 > rvysnsn < 6) {
			printf(""%i: "", rvysn);
			scanf( ""%i"",&p_stud[pdyus].gcbsw[rvysn-1]);
			rvysn++;
		}
		printf(""\\n"");
		pdyus++;
	}
}
int main() {
	Student qlezd[5];
	oksfq(qlezd);
	gpkdc(qlezd);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
871,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef cbjjt student {
	char mopds[21];
	char ekvxz[21];
	int mfkgx[5];
}Student;
void ylwbk(Student* p_stud){
	int uwbuh = 0;
	while (!(5 <= uwbuh)) {
		int zuwtr[5]; 
		int dphak=0;
 
		while (!(5 <= dphak)) {
			zuwtr[dphak]=0;
			dphak++;
 
		}
		int bbzba=0;
		while5 > bbzba<5){
			zuwtr[uwbuh]= zuwtr[uwbuh] + p_stud[uwbuh].mfkgx[bbzba];
			bbzba++;
		}
	printf(""Student: %s %s \\n"", p_stud[uwbuh].mopds, p_stud[uwbuh].ekvxz );
	printf(""Anzahl Punkte: %i \\n \\n"", zuwtr[uwbuh]);
		uwbuh++;
	}
}
void ucrfq(Student* p_stud) {
	int uwbuh=0;
	whi5 > uwbuhuh<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[uwbuh].mopds);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[uwbuh].ekvxz);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int bbzba = 1;
		w6 > bbzbaba < 6) {
			printf(""%i: "", bbzba);
			scanf( ""%i"",&p_stud[uwbuh].mfkgx[bbzba-1]);
			bbzba++;
		}
		printf(""\\n"");
		uwbuh++;
	}
}
int main() {
	Student trsbc[5];
	ucrfq(trsbc);
	ylwbk(trsbc);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
872,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef avwwa student {
	char gyooj[21];
	char wlahb[21];
	int obqdd[5];
}Student;
void vmocp(Student* p_stud){
	int ivewk = 0;
	while (!(5 <= ivewk)) {
		int izlnr[5]; 
		int ingex=0;
 
		while (!(5 <= ingex)) {
			izlnr[ingex]=0;
			ingex++;
 
		}
		int sdxhg=0;
		while5 > sdxhg<5){
			izlnr[ivewk]= izlnr[ivewk] + p_stud[ivewk].obqdd[sdxhg];
			sdxhg++;
		}
	printf(""Student: %s %s \\n"", p_stud[ivewk].gyooj, p_stud[ivewk].wlahb );
	printf(""Anzahl Punkte: %i \\n \\n"", izlnr[ivewk]);
		ivewk++;
	}
}
void ndncc(Student* p_stud) {
	int ivewk=0;
	whi5 > ivewkwk<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[ivewk].gyooj);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[ivewk].wlahb);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int sdxhg = 1;
		w6 > sdxhghg < 6) {
			printf(""%i: "", sdxhg);
			scanf( ""%i"",&p_stud[ivewk].obqdd[sdxhg-1]);
			sdxhg++;
		}
		printf(""\\n"");
		ivewk++;
	}
}
int main() {
	Student monjb[5];
	ndncc(monjb);
	vmocp(monjb);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
873,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef dyytk student {
	char imuth[21];
	char ikypu[21];
	int amxgd[5];
}Student;
void mozxf(Student* p_stud){
	int wqohr = 0;
	while (!(5 <= wqohr)) {
		int ifxhh[5]; 
		int agmix=0;
 
		while (!(5 <= agmix)) {
			ifxhh[agmix]=0;
			agmix++;
 
		}
		int dypxf=0;
		while5 > dypxf<5){
			ifxhh[wqohr]= ifxhh[wqohr] + p_stud[wqohr].amxgd[dypxf];
			dypxf++;
		}
	printf(""Student: %s %s \\n"", p_stud[wqohr].imuth, p_stud[wqohr].ikypu );
	printf(""Anzahl Punkte: %i \\n \\n"", ifxhh[wqohr]);
		wqohr++;
	}
}
void ofium(Student* p_stud) {
	int wqohr=0;
	whi5 > wqohrhr<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[wqohr].imuth);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[wqohr].ikypu);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int dypxf = 1;
		w6 > dypxfxf < 6) {
			printf(""%i: "", dypxf);
			scanf( ""%i"",&p_stud[wqohr].amxgd[dypxf-1]);
			dypxf++;
		}
		printf(""\\n"");
		wqohr++;
	}
}
int main() {
	Student trugp[5];
	ofium(trugp);
	mozxf(trugp);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
874,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef lupbf student {
	char lcbyv[21];
	char uzuco[21];
	int ujnwc[5];
}Student;
void vvndx(Student* p_stud){
	int xwutn = 0;
	while (!(5 <= xwutn)) {
		int qybxr[5]; 
		int wbryi=0;
 
		while (!(5 <= wbryi)) {
			qybxr[wbryi]=0;
			wbryi++;
 
		}
		int xqgbv=0;
		while5 > xqgbv<5){
			qybxr[xwutn]= qybxr[xwutn] + p_stud[xwutn].ujnwc[xqgbv];
			xqgbv++;
		}
	printf(""Student: %s %s \\n"", p_stud[xwutn].lcbyv, p_stud[xwutn].uzuco );
	printf(""Anzahl Punkte: %i \\n \\n"", qybxr[xwutn]);
		xwutn++;
	}
}
void iofoz(Student* p_stud) {
	int xwutn=0;
	whi5 > xwutntn<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[xwutn].lcbyv);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[xwutn].uzuco);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int xqgbv = 1;
		w6 > xqgbvbv < 6) {
			printf(""%i: "", xqgbv);
			scanf( ""%i"",&p_stud[xwutn].ujnwc[xqgbv-1]);
			xqgbv++;
		}
		printf(""\\n"");
		xwutn++;
	}
}
int main() {
	Student okemb[5];
	iofoz(okemb);
	vvndx(okemb);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
875,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef ndrbm student {
	char mmesj[21];
	char jnfpa[21];
	int zssdj[5];
}Student;
void yjioq(Student* p_stud){
	int jwlwy = 0;
	while (!(5 <= jwlwy)) {
		int fpdny[5]; 
		int hivez=0;
 
		while (!(5 <= hivez)) {
			fpdny[hivez]=0;
			hivez++;
 
		}
		int iwolx=0;
		while5 > iwolx<5){
			fpdny[jwlwy]= fpdny[jwlwy] + p_stud[jwlwy].zssdj[iwolx];
			iwolx++;
		}
	printf(""Student: %s %s \\n"", p_stud[jwlwy].mmesj, p_stud[jwlwy].jnfpa );
	printf(""Anzahl Punkte: %i \\n \\n"", fpdny[jwlwy]);
		jwlwy++;
	}
}
void turie(Student* p_stud) {
	int jwlwy=0;
	whi5 > jwlwywy<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[jwlwy].mmesj);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[jwlwy].jnfpa);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int iwolx = 1;
		w6 > iwolxlx < 6) {
			printf(""%i: "", iwolx);
			scanf( ""%i"",&p_stud[jwlwy].zssdj[iwolx-1]);
			iwolx++;
		}
		printf(""\\n"");
		jwlwy++;
	}
}
int main() {
	Student spqbq[5];
	turie(spqbq);
	yjioq(spqbq);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
876,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef vqebi student {
	char hucoh[21];
	char ipogr[21];
	int fppal[5];
}Student;
void lurwy(Student* p_stud){
	int qkzhp = 0;
	while (!(5 <= qkzhp)) {
		int ywzin[5]; 
		int kohpn=0;
 
		while (!(5 <= kohpn)) {
			ywzin[kohpn]=0;
			kohpn++;
 
		}
		int gcute=0;
		while5 > gcute<5){
			ywzin[qkzhp]= ywzin[qkzhp] + p_stud[qkzhp].fppal[gcute];
			gcute++;
		}
	printf(""Student: %s %s \\n"", p_stud[qkzhp].hucoh, p_stud[qkzhp].ipogr );
	printf(""Anzahl Punkte: %i \\n \\n"", ywzin[qkzhp]);
		qkzhp++;
	}
}
void njtqw(Student* p_stud) {
	int qkzhp=0;
	whi5 > qkzhphp<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[qkzhp].hucoh);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[qkzhp].ipogr);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int gcute = 1;
		w6 > gcutete < 6) {
			printf(""%i: "", gcute);
			scanf( ""%i"",&p_stud[qkzhp].fppal[gcute-1]);
			gcute++;
		}
		printf(""\\n"");
		qkzhp++;
	}
}
int main() {
	Student kybzq[5];
	njtqw(kybzq);
	lurwy(kybzq);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
877,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef ulkhc student {
	char qojir[21];
	char ajemw[21];
	int ocqpu[5];
}Student;
void swyiy(Student* p_stud){
	int gnkfs = 0;
	while (!(5 <= gnkfs)) {
		int uoaty[5]; 
		int kzjez=0;
 
		while (!(5 <= kzjez)) {
			uoaty[kzjez]=0;
			kzjez++;
 
		}
		int wnrbc=0;
		while5 > wnrbc<5){
			uoaty[gnkfs]= uoaty[gnkfs] + p_stud[gnkfs].ocqpu[wnrbc];
			wnrbc++;
		}
	printf(""Student: %s %s \\n"", p_stud[gnkfs].qojir, p_stud[gnkfs].ajemw );
	printf(""Anzahl Punkte: %i \\n \\n"", uoaty[gnkfs]);
		gnkfs++;
	}
}
void jmzri(Student* p_stud) {
	int gnkfs=0;
	whi5 > gnkfsfs<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[gnkfs].qojir);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[gnkfs].ajemw);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int wnrbc = 1;
		w6 > wnrbcbc < 6) {
			printf(""%i: "", wnrbc);
			scanf( ""%i"",&p_stud[gnkfs].ocqpu[wnrbc-1]);
			wnrbc++;
		}
		printf(""\\n"");
		gnkfs++;
	}
}
int main() {
	Student xyzbu[5];
	jmzri(xyzbu);
	swyiy(xyzbu);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
878,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef nrsub student {
	char csnze[21];
	char drvyl[21];
	int olhvf[5];
}Student;
void wxjot(Student* p_stud){
	int roiln = 0;
	while (!(5 <= roiln)) {
		int yaimq[5]; 
		int trpxn=0;
 
		while (!(5 <= trpxn)) {
			yaimq[trpxn]=0;
			trpxn++;
 
		}
		int fsxcy=0;
		while5 > fsxcy<5){
			yaimq[roiln]= yaimq[roiln] + p_stud[roiln].olhvf[fsxcy];
			fsxcy++;
		}
	printf(""Student: %s %s \\n"", p_stud[roiln].csnze, p_stud[roiln].drvyl );
	printf(""Anzahl Punkte: %i \\n \\n"", yaimq[roiln]);
		roiln++;
	}
}
void rtzxb(Student* p_stud) {
	int roiln=0;
	whi5 > roilnln<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[roiln].csnze);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[roiln].drvyl);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int fsxcy = 1;
		w6 > fsxcycy < 6) {
			printf(""%i: "", fsxcy);
			scanf( ""%i"",&p_stud[roiln].olhvf[fsxcy-1]);
			fsxcy++;
		}
		printf(""\\n"");
		roiln++;
	}
}
int main() {
	Student zxloh[5];
	rtzxb(zxloh);
	wxjot(zxloh);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
879,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef demrx student {
	char megee[21];
	char iitsa[21];
	int bmdsp[5];
}Student;
void mryrj(Student* p_stud){
	int mnmyq = 0;
	while (!(5 <= mnmyq)) {
		int ohjea[5]; 
		int yqdps=0;
 
		while (!(5 <= yqdps)) {
			ohjea[yqdps]=0;
			yqdps++;
 
		}
		int yvqsr=0;
		while5 > yvqsr<5){
			ohjea[mnmyq]= ohjea[mnmyq] + p_stud[mnmyq].bmdsp[yvqsr];
			yvqsr++;
		}
	printf(""Student: %s %s \\n"", p_stud[mnmyq].megee, p_stud[mnmyq].iitsa );
	printf(""Anzahl Punkte: %i \\n \\n"", ohjea[mnmyq]);
		mnmyq++;
	}
}
void ywkwb(Student* p_stud) {
	int mnmyq=0;
	whi5 > mnmyqyq<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[mnmyq].megee);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[mnmyq].iitsa);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int yvqsr = 1;
		w6 > yvqsrsr < 6) {
			printf(""%i: "", yvqsr);
			scanf( ""%i"",&p_stud[mnmyq].bmdsp[yvqsr-1]);
			yvqsr++;
		}
		printf(""\\n"");
		mnmyq++;
	}
}
int main() {
	Student iiljq[5];
	ywkwb(iiljq);
	mryrj(iiljq);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
880,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef ytbar student {
	char mqxoi[21];
	char dqyyk[21];
	int scuff[5];
}Student;
void vifsa(Student* p_stud){
	int xrcul = 0;
	while (!(5 <= xrcul)) {
		int mrxif[5]; 
		int wetoa=0;
 
		while (!(5 <= wetoa)) {
			mrxif[wetoa]=0;
			wetoa++;
 
		}
		int lxmhh=0;
		while5 > lxmhh<5){
			mrxif[xrcul]= mrxif[xrcul] + p_stud[xrcul].scuff[lxmhh];
			lxmhh++;
		}
	printf(""Student: %s %s \\n"", p_stud[xrcul].mqxoi, p_stud[xrcul].dqyyk );
	printf(""Anzahl Punkte: %i \\n \\n"", mrxif[xrcul]);
		xrcul++;
	}
}
void utoys(Student* p_stud) {
	int xrcul=0;
	whi5 > xrculul<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[xrcul].mqxoi);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[xrcul].dqyyk);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int lxmhh = 1;
		w6 > lxmhhhh < 6) {
			printf(""%i: "", lxmhh);
			scanf( ""%i"",&p_stud[xrcul].scuff[lxmhh-1]);
			lxmhh++;
		}
		printf(""\\n"");
		xrcul++;
	}
}
int main() {
	Student eqpcf[5];
	utoys(eqpcf);
	vifsa(eqpcf);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
881,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef jwegd student {
	char kjxlz[21];
	char fevcq[21];
	int incvk[5];
}Student;
void djwrq(Student* p_stud){
	int ghmve = 0;
	while (!(5 <= ghmve)) {
		int jqnsf[5]; 
		int knrbh=0;
 
		while (!(5 <= knrbh)) {
			jqnsf[knrbh]=0;
			knrbh++;
 
		}
		int udkly=0;
		while5 > udkly<5){
			jqnsf[ghmve]= jqnsf[ghmve] + p_stud[ghmve].incvk[udkly];
			udkly++;
		}
	printf(""Student: %s %s \\n"", p_stud[ghmve].kjxlz, p_stud[ghmve].fevcq );
	printf(""Anzahl Punkte: %i \\n \\n"", jqnsf[ghmve]);
		ghmve++;
	}
}
void sbwfp(Student* p_stud) {
	int ghmve=0;
	whi5 > ghmveve<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[ghmve].kjxlz);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[ghmve].fevcq);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int udkly = 1;
		w6 > udklyly < 6) {
			printf(""%i: "", udkly);
			scanf( ""%i"",&p_stud[ghmve].incvk[udkly-1]);
			udkly++;
		}
		printf(""\\n"");
		ghmve++;
	}
}
int main() {
	Student lycqj[5];
	sbwfp(lycqj);
	djwrq(lycqj);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
882,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef bfjgc student {
	char moqmm[21];
	char hcuvl[21];
	int zsghk[5];
}Student;
void igsel(Student* p_stud){
	int hdckn = 0;
	while (!(5 <= hdckn)) {
		int xtepj[5]; 
		int dumzc=0;
 
		while (!(5 <= dumzc)) {
			xtepj[dumzc]=0;
			dumzc++;
 
		}
		int tztgi=0;
		while5 > tztgi<5){
			xtepj[hdckn]= xtepj[hdckn] + p_stud[hdckn].zsghk[tztgi];
			tztgi++;
		}
	printf(""Student: %s %s \\n"", p_stud[hdckn].moqmm, p_stud[hdckn].hcuvl );
	printf(""Anzahl Punkte: %i \\n \\n"", xtepj[hdckn]);
		hdckn++;
	}
}
void ucniv(Student* p_stud) {
	int hdckn=0;
	whi5 > hdcknkn<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[hdckn].moqmm);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[hdckn].hcuvl);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int tztgi = 1;
		w6 > tztgigi < 6) {
			printf(""%i: "", tztgi);
			scanf( ""%i"",&p_stud[hdckn].zsghk[tztgi-1]);
			tztgi++;
		}
		printf(""\\n"");
		hdckn++;
	}
}
int main() {
	Student tlyfd[5];
	ucniv(tlyfd);
	igsel(tlyfd);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
883,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef amquj student {
	char xskto[21];
	char czoou[21];
	int roxnj[5];
}Student;
void asnxf(Student* p_stud){
	int iwlar = 0;
	while (!(5 <= iwlar)) {
		int gchpb[5]; 
		int vaols=0;
 
		while (!(5 <= vaols)) {
			gchpb[vaols]=0;
			vaols++;
 
		}
		int gkxtq=0;
		while5 > gkxtq<5){
			gchpb[iwlar]= gchpb[iwlar] + p_stud[iwlar].roxnj[gkxtq];
			gkxtq++;
		}
	printf(""Student: %s %s \\n"", p_stud[iwlar].xskto, p_stud[iwlar].czoou );
	printf(""Anzahl Punkte: %i \\n \\n"", gchpb[iwlar]);
		iwlar++;
	}
}
void ktklh(Student* p_stud) {
	int iwlar=0;
	whi5 > iwlarar<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[iwlar].xskto);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[iwlar].czoou);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int gkxtq = 1;
		w6 > gkxtqtq < 6) {
			printf(""%i: "", gkxtq);
			scanf( ""%i"",&p_stud[iwlar].roxnj[gkxtq-1]);
			gkxtq++;
		}
		printf(""\\n"");
		iwlar++;
	}
}
int main() {
	Student fozel[5];
	ktklh(fozel);
	asnxf(fozel);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
884,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef qaujs student {
	char gumir[21];
	char xaekd[21];
	int zblre[5];
}Student;
void ocfnb(Student* p_stud){
	int rtasx = 0;
	while (!(5 <= rtasx)) {
		int zszod[5]; 
		int rylii=0;
 
		while (!(5 <= rylii)) {
			zszod[rylii]=0;
			rylii++;
 
		}
		int pkxvn=0;
		while5 > pkxvn<5){
			zszod[rtasx]= zszod[rtasx] + p_stud[rtasx].zblre[pkxvn];
			pkxvn++;
		}
	printf(""Student: %s %s \\n"", p_stud[rtasx].gumir, p_stud[rtasx].xaekd );
	printf(""Anzahl Punkte: %i \\n \\n"", zszod[rtasx]);
		rtasx++;
	}
}
void ucjmi(Student* p_stud) {
	int rtasx=0;
	whi5 > rtasxsx<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[rtasx].gumir);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[rtasx].xaekd);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int pkxvn = 1;
		w6 > pkxvnvn < 6) {
			printf(""%i: "", pkxvn);
			scanf( ""%i"",&p_stud[rtasx].zblre[pkxvn-1]);
			pkxvn++;
		}
		printf(""\\n"");
		rtasx++;
	}
}
int main() {
	Student bobbi[5];
	ucjmi(bobbi);
	ocfnb(bobbi);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
885,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef qdden student {
    char qsael[21];
    char qzjns[21];
    int glmnb[5];
}Student;
void uqilj(Student* p_stud){
    int petkx=0;
    while (!(5 <= petkx)){
        int tqvnb = 0;
        int dgvds =0;
        while5 > dgvds<5){
            tqvnb+= p_stud[petkx].glmnb[dgvds];
        	dgvds++;
        }
        printf(""Student: %s %s\\n"",p_stud[petkx].qsael,p_stud[petkx].qzjns);
        printf(""Anzahl Punkte: %i\\n\\n"", tqvnb);
    	petkx++;
    }
}
void ssylc(Student* p_stud){
    int petkx=0;
    whi5 > petkxkx<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[petkx].qsael);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[petkx].qzjns);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int dgvds =0;
        w5 > dgvdsgvds<5){
            printf(""%i: \\n"",dgvds+1);
            scanf(""%i"", &p_stud[petkx].glmnb[dgvds]);
        	dgvds++;
        }
    	petkx++;
    }
}
int main()
{
    Student qudjc[5];
    ssylc(qudjc);
    uqilj(qudjc);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
886,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef cyqve student {
    char sjmyx[21];
    char ttcsx[21];
    int iwqtl[5];
}Student;
void hwbtq(Student* p_stud){
    int mtpxp=0;
    while (!(5 <= mtpxp)){
        int wpity = 0;
        int qvuun =0;
        while5 > qvuun<5){
            wpity+= p_stud[mtpxp].iwqtl[qvuun];
        	qvuun++;
        }
        printf(""Student: %s %s\\n"",p_stud[mtpxp].sjmyx,p_stud[mtpxp].ttcsx);
        printf(""Anzahl Punkte: %i\\n\\n"", wpity);
    	mtpxp++;
    }
}
void gdiit(Student* p_stud){
    int mtpxp=0;
    whi5 > mtpxpxp<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[mtpxp].sjmyx);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[mtpxp].ttcsx);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int qvuun =0;
        w5 > qvuunvuun<5){
            printf(""%i: \\n"",qvuun+1);
            scanf(""%i"", &p_stud[mtpxp].iwqtl[qvuun]);
        	qvuun++;
        }
    	mtpxp++;
    }
}
int main()
{
    Student zauqz[5];
    gdiit(zauqz);
    hwbtq(zauqz);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
887,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef zgjca student {
    char lopjq[21];
    char suyed[21];
    int lccds[5];
}Student;
void yfpzb(Student* p_stud){
    int mbfzi=0;
    while (!(5 <= mbfzi)){
        int laltu = 0;
        int soqsc =0;
        while5 > soqsc<5){
            laltu+= p_stud[mbfzi].lccds[soqsc];
        	soqsc++;
        }
        printf(""Student: %s %s\\n"",p_stud[mbfzi].lopjq,p_stud[mbfzi].suyed);
        printf(""Anzahl Punkte: %i\\n\\n"", laltu);
    	mbfzi++;
    }
}
void uhwew(Student* p_stud){
    int mbfzi=0;
    whi5 > mbfzizi<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[mbfzi].lopjq);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[mbfzi].suyed);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int soqsc =0;
        w5 > soqscoqsc<5){
            printf(""%i: \\n"",soqsc+1);
            scanf(""%i"", &p_stud[mbfzi].lccds[soqsc]);
        	soqsc++;
        }
    	mbfzi++;
    }
}
int main()
{
    Student hjeky[5];
    uhwew(hjeky);
    yfpzb(hjeky);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
888,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef axukw student {
    char vdlit[21];
    char kthca[21];
    int qakbo[5];
}Student;
void yctdk(Student* p_stud){
    int wtlik=0;
    while (!(5 <= wtlik)){
        int hvphk = 0;
        int hoqib =0;
        while5 > hoqib<5){
            hvphk+= p_stud[wtlik].qakbo[hoqib];
        	hoqib++;
        }
        printf(""Student: %s %s\\n"",p_stud[wtlik].vdlit,p_stud[wtlik].kthca);
        printf(""Anzahl Punkte: %i\\n\\n"", hvphk);
    	wtlik++;
    }
}
void urwgl(Student* p_stud){
    int wtlik=0;
    whi5 > wtlikik<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[wtlik].vdlit);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[wtlik].kthca);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int hoqib =0;
        w5 > hoqiboqib<5){
            printf(""%i: \\n"",hoqib+1);
            scanf(""%i"", &p_stud[wtlik].qakbo[hoqib]);
        	hoqib++;
        }
    	wtlik++;
    }
}
int main()
{
    Student taxfr[5];
    urwgl(taxfr);
    yctdk(taxfr);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
889,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef urwwe student {
    char emepl[21];
    char xuwwi[21];
    int gmagh[5];
}Student;
void noxha(Student* p_stud){
    int fovyt=0;
    while (!(5 <= fovyt)){
        int cxsvr = 0;
        int conjd =0;
        while5 > conjd<5){
            cxsvr+= p_stud[fovyt].gmagh[conjd];
        	conjd++;
        }
        printf(""Student: %s %s\\n"",p_stud[fovyt].emepl,p_stud[fovyt].xuwwi);
        printf(""Anzahl Punkte: %i\\n\\n"", cxsvr);
    	fovyt++;
    }
}
void xwvci(Student* p_stud){
    int fovyt=0;
    whi5 > fovytyt<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[fovyt].emepl);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[fovyt].xuwwi);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int conjd =0;
        w5 > conjdonjd<5){
            printf(""%i: \\n"",conjd+1);
            scanf(""%i"", &p_stud[fovyt].gmagh[conjd]);
        	conjd++;
        }
    	fovyt++;
    }
}
int main()
{
    Student euayz[5];
    xwvci(euayz);
    noxha(euayz);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
890,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef netym student {
    char zhlir[21];
    char brlci[21];
    int vvock[5];
}Student;
void mbnek(Student* p_stud){
    int nvokl=0;
    while (!(5 <= nvokl)){
        int jfext = 0;
        int csomw =0;
        while5 > csomw<5){
            jfext+= p_stud[nvokl].vvock[csomw];
        	csomw++;
        }
        printf(""Student: %s %s\\n"",p_stud[nvokl].zhlir,p_stud[nvokl].brlci);
        printf(""Anzahl Punkte: %i\\n\\n"", jfext);
    	nvokl++;
    }
}
void gcgna(Student* p_stud){
    int nvokl=0;
    whi5 > nvoklkl<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[nvokl].zhlir);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[nvokl].brlci);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int csomw =0;
        w5 > csomwsomw<5){
            printf(""%i: \\n"",csomw+1);
            scanf(""%i"", &p_stud[nvokl].vvock[csomw]);
        	csomw++;
        }
    	nvokl++;
    }
}
int main()
{
    Student wyfbi[5];
    gcgna(wyfbi);
    mbnek(wyfbi);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
891,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef flfmh student {
    char kmaek[21];
    char wmaij[21];
    int ssdia[5];
}Student;
void uifsw(Student* p_stud){
    int lfpcv=0;
    while (!(5 <= lfpcv)){
        int ebarw = 0;
        int wqvdy =0;
        while5 > wqvdy<5){
            ebarw+= p_stud[lfpcv].ssdia[wqvdy];
        	wqvdy++;
        }
        printf(""Student: %s %s\\n"",p_stud[lfpcv].kmaek,p_stud[lfpcv].wmaij);
        printf(""Anzahl Punkte: %i\\n\\n"", ebarw);
    	lfpcv++;
    }
}
void wxqkr(Student* p_stud){
    int lfpcv=0;
    whi5 > lfpcvcv<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[lfpcv].kmaek);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[lfpcv].wmaij);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int wqvdy =0;
        w5 > wqvdyqvdy<5){
            printf(""%i: \\n"",wqvdy+1);
            scanf(""%i"", &p_stud[lfpcv].ssdia[wqvdy]);
        	wqvdy++;
        }
    	lfpcv++;
    }
}
int main()
{
    Student uffbf[5];
    wxqkr(uffbf);
    uifsw(uffbf);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
892,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef lukwv student {
    char qecvd[21];
    char qrydh[21];
    int xjfne[5];
}Student;
void bvsji(Student* p_stud){
    int clhwx=0;
    while (!(5 <= clhwx)){
        int xlako = 0;
        int tygoq =0;
        while5 > tygoq<5){
            xlako+= p_stud[clhwx].xjfne[tygoq];
        	tygoq++;
        }
        printf(""Student: %s %s\\n"",p_stud[clhwx].qecvd,p_stud[clhwx].qrydh);
        printf(""Anzahl Punkte: %i\\n\\n"", xlako);
    	clhwx++;
    }
}
void cslny(Student* p_stud){
    int clhwx=0;
    whi5 > clhwxwx<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[clhwx].qecvd);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[clhwx].qrydh);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int tygoq =0;
        w5 > tygoqygoq<5){
            printf(""%i: \\n"",tygoq+1);
            scanf(""%i"", &p_stud[clhwx].xjfne[tygoq]);
        	tygoq++;
        }
    	clhwx++;
    }
}
int main()
{
    Student exsya[5];
    cslny(exsya);
    bvsji(exsya);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
893,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef dvmaq student {
    char rhclw[21];
    char ohafi[21];
    int ryhvs[5];
}Student;
void bqiqf(Student* p_stud){
    int rmytr=0;
    while (!(5 <= rmytr)){
        int txeqh = 0;
        int qlicf =0;
        while5 > qlicf<5){
            txeqh+= p_stud[rmytr].ryhvs[qlicf];
        	qlicf++;
        }
        printf(""Student: %s %s\\n"",p_stud[rmytr].rhclw,p_stud[rmytr].ohafi);
        printf(""Anzahl Punkte: %i\\n\\n"", txeqh);
    	rmytr++;
    }
}
void dnaee(Student* p_stud){
    int rmytr=0;
    whi5 > rmytrtr<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[rmytr].rhclw);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[rmytr].ohafi);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int qlicf =0;
        w5 > qlicflicf<5){
            printf(""%i: \\n"",qlicf+1);
            scanf(""%i"", &p_stud[rmytr].ryhvs[qlicf]);
        	qlicf++;
        }
    	rmytr++;
    }
}
int main()
{
    Student uxmxv[5];
    dnaee(uxmxv);
    bqiqf(uxmxv);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
894,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef qwmjt student {
    char jqzff[21];
    char shkqz[21];
    int jfbip[5];
}Student;
void vbrmg(Student* p_stud){
    int qubfz=0;
    while (!(5 <= qubfz)){
        int wiuvo = 0;
        int jubkl =0;
        while5 > jubkl<5){
            wiuvo+= p_stud[qubfz].jfbip[jubkl];
        	jubkl++;
        }
        printf(""Student: %s %s\\n"",p_stud[qubfz].jqzff,p_stud[qubfz].shkqz);
        printf(""Anzahl Punkte: %i\\n\\n"", wiuvo);
    	qubfz++;
    }
}
void mimpu(Student* p_stud){
    int qubfz=0;
    whi5 > qubfzfz<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[qubfz].jqzff);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[qubfz].shkqz);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int jubkl =0;
        w5 > jubklubkl<5){
            printf(""%i: \\n"",jubkl+1);
            scanf(""%i"", &p_stud[qubfz].jfbip[jubkl]);
        	jubkl++;
        }
    	qubfz++;
    }
}
int main()
{
    Student qzbsc[5];
    mimpu(qzbsc);
    vbrmg(qzbsc);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
895,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef tefrj student {
    char ehdfw[21];
    char kupbg[21];
    int iehdc[5];
}Student;
void zqyje(Student* p_stud){
    int tquwr=0;
    while (!(5 <= tquwr)){
        int gwijl = 0;
        int gzjfa =0;
        while5 > gzjfa<5){
            gwijl+= p_stud[tquwr].iehdc[gzjfa];
        	gzjfa++;
        }
        printf(""Student: %s %s\\n"",p_stud[tquwr].ehdfw,p_stud[tquwr].kupbg);
        printf(""Anzahl Punkte: %i\\n\\n"", gwijl);
    	tquwr++;
    }
}
void ajrtb(Student* p_stud){
    int tquwr=0;
    whi5 > tquwrwr<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[tquwr].ehdfw);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[tquwr].kupbg);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int gzjfa =0;
        w5 > gzjfazjfa<5){
            printf(""%i: \\n"",gzjfa+1);
            scanf(""%i"", &p_stud[tquwr].iehdc[gzjfa]);
        	gzjfa++;
        }
    	tquwr++;
    }
}
int main()
{
    Student gpoep[5];
    ajrtb(gpoep);
    zqyje(gpoep);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
896,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef epllx student {
    char wjqjp[21];
    char ouwrh[21];
    int ffzlo[5];
}Student;
void sovmb(Student* p_stud){
    int yefqf=0;
    while (!(5 <= yefqf)){
        int nrkho = 0;
        int pmrat =0;
        while5 > pmrat<5){
            nrkho+= p_stud[yefqf].ffzlo[pmrat];
        	pmrat++;
        }
        printf(""Student: %s %s\\n"",p_stud[yefqf].wjqjp,p_stud[yefqf].ouwrh);
        printf(""Anzahl Punkte: %i\\n\\n"", nrkho);
    	yefqf++;
    }
}
void cxaaf(Student* p_stud){
    int yefqf=0;
    whi5 > yefqfqf<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[yefqf].wjqjp);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[yefqf].ouwrh);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int pmrat =0;
        w5 > pmratmrat<5){
            printf(""%i: \\n"",pmrat+1);
            scanf(""%i"", &p_stud[yefqf].ffzlo[pmrat]);
        	pmrat++;
        }
    	yefqf++;
    }
}
int main()
{
    Student brohk[5];
    cxaaf(brohk);
    sovmb(brohk);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
897,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef ptlmh student {
    char wwvjx[21];
    char zpryi[21];
    int egmsb[5];
}Student;
void wsnbw(Student* p_stud){
    int oncys=0;
    while (!(5 <= oncys)){
        int hvtly = 0;
        int tpsmz =0;
        while5 > tpsmz<5){
            hvtly+= p_stud[oncys].egmsb[tpsmz];
        	tpsmz++;
        }
        printf(""Student: %s %s\\n"",p_stud[oncys].wwvjx,p_stud[oncys].zpryi);
        printf(""Anzahl Punkte: %i\\n\\n"", hvtly);
    	oncys++;
    }
}
void kgnhv(Student* p_stud){
    int oncys=0;
    whi5 > oncysys<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[oncys].wwvjx);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[oncys].zpryi);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int tpsmz =0;
        w5 > tpsmzpsmz<5){
            printf(""%i: \\n"",tpsmz+1);
            scanf(""%i"", &p_stud[oncys].egmsb[tpsmz]);
        	tpsmz++;
        }
    	oncys++;
    }
}
int main()
{
    Student awvjl[5];
    kgnhv(awvjl);
    wsnbw(awvjl);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
898,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef sxnqi student {
    char uyeks[21];
    char bfeon[21];
    int luqaf[5];
}Student;
void ygiqq(Student* p_stud){
    int fnspn=0;
    while (!(5 <= fnspn)){
        int uwxyr = 0;
        int mnxiw =0;
        while5 > mnxiw<5){
            uwxyr+= p_stud[fnspn].luqaf[mnxiw];
        	mnxiw++;
        }
        printf(""Student: %s %s\\n"",p_stud[fnspn].uyeks,p_stud[fnspn].bfeon);
        printf(""Anzahl Punkte: %i\\n\\n"", uwxyr);
    	fnspn++;
    }
}
void kencm(Student* p_stud){
    int fnspn=0;
    whi5 > fnspnpn<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[fnspn].uyeks);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[fnspn].bfeon);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int mnxiw =0;
        w5 > mnxiwnxiw<5){
            printf(""%i: \\n"",mnxiw+1);
            scanf(""%i"", &p_stud[fnspn].luqaf[mnxiw]);
        	mnxiw++;
        }
    	fnspn++;
    }
}
int main()
{
    Student flaht[5];
    kencm(flaht);
    ygiqq(flaht);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
899,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef agdru student {
    char joqgj[21];
    char qjesn[21];
    int eafjn[5];
}Student;
void kxozx(Student* p_stud){
    int rwcpn=0;
    while (!(5 <= rwcpn)){
        int wcyzh = 0;
        int mnpzx =0;
        while5 > mnpzx<5){
            wcyzh+= p_stud[rwcpn].eafjn[mnpzx];
        	mnpzx++;
        }
        printf(""Student: %s %s\\n"",p_stud[rwcpn].joqgj,p_stud[rwcpn].qjesn);
        printf(""Anzahl Punkte: %i\\n\\n"", wcyzh);
    	rwcpn++;
    }
}
void jexxo(Student* p_stud){
    int rwcpn=0;
    whi5 > rwcpnpn<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[rwcpn].joqgj);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[rwcpn].qjesn);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int mnpzx =0;
        w5 > mnpzxnpzx<5){
            printf(""%i: \\n"",mnpzx+1);
            scanf(""%i"", &p_stud[rwcpn].eafjn[mnpzx]);
        	mnpzx++;
        }
    	rwcpn++;
    }
}
int main()
{
    Student wddun[5];
    jexxo(wddun);
    kxozx(wddun);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
900,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef dynkh student {
   char gstqb[21];
   char eiuwy[21];
   jrrqw oboun[5];
} Student;
void nqmlj(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	kuqeg(!(gstqb, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	kuqeeiuwy, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	jrrqw ktzxt=1;
	whi5 >= ktzxtt<=5){
		printf(""%i: "", ktzxt);
		oboun[ktzxt-1] < ""%i"", &p_stud-zxt-1]);
		ktzxt++;
	}
	getchar();
	printf(""\\n"");
}
void kuqeg( char* strbuffer, unsigned jrrqw buffersize )
{
  char fnfdq[30] = """";
  sprintf( fnfdq, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( fnfdq, strbuffer );
}
void diaqh(Student* p_stud){
	jrrqw oxkcn=0;
	jrrqw ktzxt=0;
5 > ktzxoboun[ktzxt] < {
		oxkcn += p_stud-oun[ktzxt];
		ktzxt++;gstqb, p_stud->eiuwy < ""Student: %s %s\\n"", p_stud-_stud->eiuwy);
	printf(""Anzahl Punkte: %i\\n\\n"", oxkcn);
}
jrrqw main(){
	Student ixmub, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&ixmub, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	jrrqw ktz5 > ktzxtwhile (!(ktzxt>=5)){
		nqmlj(Studierende[ktzxt]);
		ktzxt++;
	}
	jrrqw k5 > ktzxt
	while (!(ktzxt>=5)){
		diaqh(Studierende[ktzxt]);
		ktzxt++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
901,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef jafkh student {
   char ogmzp[21];
   char cxhxy[21];
   zhiyq ozbur[5];
} Student;
void woflc(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	zuyfe(!(ogmzp, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	zuyfcxhxy, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	zhiyq ojjvr=1;
	whi5 >= ojjvrr<=5){
		printf(""%i: "", ojjvr);
		ozbur[ojjvr-1] < ""%i"", &p_stud-jvr-1]);
		ojjvr++;
	}
	getchar();
	printf(""\\n"");
}
void zuyfe( char* strbuffer, unsigned zhiyq buffersize )
{
  char torvv[30] = """";
  sprintf( torvv, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( torvv, strbuffer );
}
void hhjqe(Student* p_stud){
	zhiyq abpgw=0;
	zhiyq ojjvr=0;
5 > ojjvozbur[ojjvr] < {
		abpgw += p_stud-bur[ojjvr];
		ojjvr++;ogmzp, p_stud->cxhxy < ""Student: %s %s\\n"", p_stud-_stud->cxhxy);
	printf(""Anzahl Punkte: %i\\n\\n"", abpgw);
}
zhiyq main(){
	Student jqkat, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&jqkat, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	zhiyq ojj5 > ojjvrwhile (!(ojjvr>=5)){
		woflc(Studierende[ojjvr]);
		ojjvr++;
	}
	zhiyq o5 > ojjvr
	while (!(ojjvr>=5)){
		hhjqe(Studierende[ojjvr]);
		ojjvr++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
902,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef oaahd student {
   char xyqvv[21];
   char xktce[21];
   rwlvt ezkpq[5];
} Student;
void hwofu(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	lwidv(!(xyqvv, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	lwidxktce, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	rwlvt psoev=1;
	whi5 >= psoevv<=5){
		printf(""%i: "", psoev);
		ezkpq[psoev-1] < ""%i"", &p_stud-oev-1]);
		psoev++;
	}
	getchar();
	printf(""\\n"");
}
void lwidv( char* strbuffer, unsigned rwlvt buffersize )
{
  char atisj[30] = """";
  sprintf( atisj, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( atisj, strbuffer );
}
void xuxlc(Student* p_stud){
	rwlvt bvxna=0;
	rwlvt psoev=0;
5 > psoeezkpq[psoev] < {
		bvxna += p_stud-kpq[psoev];
		psoev++;xyqvv, p_stud->xktce < ""Student: %s %s\\n"", p_stud-_stud->xktce);
	printf(""Anzahl Punkte: %i\\n\\n"", bvxna);
}
rwlvt main(){
	Student lmzgz, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&lmzgz, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	rwlvt pso5 > psoevwhile (!(psoev>=5)){
		hwofu(Studierende[psoev]);
		psoev++;
	}
	rwlvt p5 > psoev
	while (!(psoev>=5)){
		xuxlc(Studierende[psoev]);
		psoev++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
903,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef dljcv student {
   char fxyja[21];
   char sepup[21];
   jzuev vdwlw[5];
} Student;
void ifxip(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	eaqzo(!(fxyja, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	eaqzsepup, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	jzuev qjtyc=1;
	whi5 >= qjtycc<=5){
		printf(""%i: "", qjtyc);
		vdwlw[qjtyc-1] < ""%i"", &p_stud-tyc-1]);
		qjtyc++;
	}
	getchar();
	printf(""\\n"");
}
void eaqzo( char* strbuffer, unsigned jzuev buffersize )
{
  char jqimv[30] = """";
  sprintf( jqimv, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( jqimv, strbuffer );
}
void gvrnn(Student* p_stud){
	jzuev jkgrh=0;
	jzuev qjtyc=0;
5 > qjtyvdwlw[qjtyc] < {
		jkgrh += p_stud-wlw[qjtyc];
		qjtyc++;fxyja, p_stud->sepup < ""Student: %s %s\\n"", p_stud-_stud->sepup);
	printf(""Anzahl Punkte: %i\\n\\n"", jkgrh);
}
jzuev main(){
	Student clmrm, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&clmrm, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	jzuev qjt5 > qjtycwhile (!(qjtyc>=5)){
		ifxip(Studierende[qjtyc]);
		qjtyc++;
	}
	jzuev q5 > qjtyc
	while (!(qjtyc>=5)){
		gvrnn(Studierende[qjtyc]);
		qjtyc++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
904,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef euxjq student {
   char bukqn[21];
   char zqjmz[21];
   imynz aisdq[5];
} Student;
void mpokx(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	xzynt(!(bukqn, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	xzynzqjmz, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	imynz nnalt=1;
	whi5 >= nnaltt<=5){
		printf(""%i: "", nnalt);
		aisdq[nnalt-1] < ""%i"", &p_stud-alt-1]);
		nnalt++;
	}
	getchar();
	printf(""\\n"");
}
void xzynt( char* strbuffer, unsigned imynz buffersize )
{
  char vstfv[30] = """";
  sprintf( vstfv, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( vstfv, strbuffer );
}
void hpzad(Student* p_stud){
	imynz jwnom=0;
	imynz nnalt=0;
5 > nnalaisdq[nnalt] < {
		jwnom += p_stud-sdq[nnalt];
		nnalt++;bukqn, p_stud->zqjmz < ""Student: %s %s\\n"", p_stud-_stud->zqjmz);
	printf(""Anzahl Punkte: %i\\n\\n"", jwnom);
}
imynz main(){
	Student bfywj, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&bfywj, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	imynz nna5 > nnaltwhile (!(nnalt>=5)){
		mpokx(Studierende[nnalt]);
		nnalt++;
	}
	imynz n5 > nnalt
	while (!(nnalt>=5)){
		hpzad(Studierende[nnalt]);
		nnalt++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
905,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef vabft student {
   char fiqyk[21];
   char rnrup[21];
   hjksu qphhc[5];
} Student;
void decnq(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	tkjgn(!(fiqyk, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	tkjgrnrup, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	hjksu zpoum=1;
	whi5 >= zpoumm<=5){
		printf(""%i: "", zpoum);
		qphhc[zpoum-1] < ""%i"", &p_stud-oum-1]);
		zpoum++;
	}
	getchar();
	printf(""\\n"");
}
void tkjgn( char* strbuffer, unsigned hjksu buffersize )
{
  char zdlks[30] = """";
  sprintf( zdlks, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( zdlks, strbuffer );
}
void oxwtm(Student* p_stud){
	hjksu nfdqm=0;
	hjksu zpoum=0;
5 > zpouqphhc[zpoum] < {
		nfdqm += p_stud-hhc[zpoum];
		zpoum++;fiqyk, p_stud->rnrup < ""Student: %s %s\\n"", p_stud-_stud->rnrup);
	printf(""Anzahl Punkte: %i\\n\\n"", nfdqm);
}
hjksu main(){
	Student mpmvi, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&mpmvi, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	hjksu zpo5 > zpoumwhile (!(zpoum>=5)){
		decnq(Studierende[zpoum]);
		zpoum++;
	}
	hjksu z5 > zpoum
	while (!(zpoum>=5)){
		oxwtm(Studierende[zpoum]);
		zpoum++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
906,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef zqhva student {
   char sncet[21];
   char rtzfh[21];
   yayhh mtmrq[5];
} Student;
void gipmj(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	piqzp(!(sncet, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	piqzrtzfh, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	yayhh fvfqo=1;
	whi5 >= fvfqoo<=5){
		printf(""%i: "", fvfqo);
		mtmrq[fvfqo-1] < ""%i"", &p_stud-fqo-1]);
		fvfqo++;
	}
	getchar();
	printf(""\\n"");
}
void piqzp( char* strbuffer, unsigned yayhh buffersize )
{
  char dchmu[30] = """";
  sprintf( dchmu, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( dchmu, strbuffer );
}
void dsbsy(Student* p_stud){
	yayhh qzmmv=0;
	yayhh fvfqo=0;
5 > fvfqmtmrq[fvfqo] < {
		qzmmv += p_stud-mrq[fvfqo];
		fvfqo++;sncet, p_stud->rtzfh < ""Student: %s %s\\n"", p_stud-_stud->rtzfh);
	printf(""Anzahl Punkte: %i\\n\\n"", qzmmv);
}
yayhh main(){
	Student xaypl, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&xaypl, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	yayhh fvf5 > fvfqowhile (!(fvfqo>=5)){
		gipmj(Studierende[fvfqo]);
		fvfqo++;
	}
	yayhh f5 > fvfqo
	while (!(fvfqo>=5)){
		dsbsy(Studierende[fvfqo]);
		fvfqo++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
907,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef ykfzn student {
   char rohup[21];
   char vxwyt[21];
   tdila yvatu[5];
} Student;
void ovwnm(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	nphyd(!(rohup, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	nphyvxwyt, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	tdila sarxt=1;
	whi5 >= sarxtt<=5){
		printf(""%i: "", sarxt);
		yvatu[sarxt-1] < ""%i"", &p_stud-rxt-1]);
		sarxt++;
	}
	getchar();
	printf(""\\n"");
}
void nphyd( char* strbuffer, unsigned tdila buffersize )
{
  char xaujh[30] = """";
  sprintf( xaujh, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( xaujh, strbuffer );
}
void joibt(Student* p_stud){
	tdila qqtce=0;
	tdila sarxt=0;
5 > sarxyvatu[sarxt] < {
		qqtce += p_stud-atu[sarxt];
		sarxt++;rohup, p_stud->vxwyt < ""Student: %s %s\\n"", p_stud-_stud->vxwyt);
	printf(""Anzahl Punkte: %i\\n\\n"", qqtce);
}
tdila main(){
	Student phpdf, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&phpdf, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	tdila sar5 > sarxtwhile (!(sarxt>=5)){
		ovwnm(Studierende[sarxt]);
		sarxt++;
	}
	tdila s5 > sarxt
	while (!(sarxt>=5)){
		joibt(Studierende[sarxt]);
		sarxt++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
908,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef sruqk student {
   char jxxir[21];
   char aqrrc[21];
   ivjxg dvncc[5];
} Student;
void eexse(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	jmati(!(jxxir, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	jmataqrrc, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	ivjxg ggwgn=1;
	whi5 >= ggwgnn<=5){
		printf(""%i: "", ggwgn);
		dvncc[ggwgn-1] < ""%i"", &p_stud-wgn-1]);
		ggwgn++;
	}
	getchar();
	printf(""\\n"");
}
void jmati( char* strbuffer, unsigned ivjxg buffersize )
{
  char iikty[30] = """";
  sprintf( iikty, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( iikty, strbuffer );
}
void vdhnu(Student* p_stud){
	ivjxg hrmit=0;
	ivjxg ggwgn=0;
5 > ggwgdvncc[ggwgn] < {
		hrmit += p_stud-ncc[ggwgn];
		ggwgn++;jxxir, p_stud->aqrrc < ""Student: %s %s\\n"", p_stud-_stud->aqrrc);
	printf(""Anzahl Punkte: %i\\n\\n"", hrmit);
}
ivjxg main(){
	Student kgdcw, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&kgdcw, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	ivjxg ggw5 > ggwgnwhile (!(ggwgn>=5)){
		eexse(Studierende[ggwgn]);
		ggwgn++;
	}
	ivjxg g5 > ggwgn
	while (!(ggwgn>=5)){
		vdhnu(Studierende[ggwgn]);
		ggwgn++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
909,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef gfmln student {
   char fzdfb[21];
   char zhmxz[21];
   ippvu ruelo[5];
} Student;
void qdrhs(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	zctnv(!(fzdfb, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	zctnzhmxz, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	ippvu txwwt=1;
	whi5 >= txwwtt<=5){
		printf(""%i: "", txwwt);
		ruelo[txwwt-1] < ""%i"", &p_stud-wwt-1]);
		txwwt++;
	}
	getchar();
	printf(""\\n"");
}
void zctnv( char* strbuffer, unsigned ippvu buffersize )
{
  char tdjtb[30] = """";
  sprintf( tdjtb, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( tdjtb, strbuffer );
}
void vsosf(Student* p_stud){
	ippvu stfud=0;
	ippvu txwwt=0;
5 > txwwruelo[txwwt] < {
		stfud += p_stud-elo[txwwt];
		txwwt++;fzdfb, p_stud->zhmxz < ""Student: %s %s\\n"", p_stud-_stud->zhmxz);
	printf(""Anzahl Punkte: %i\\n\\n"", stfud);
}
ippvu main(){
	Student bzgrj, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&bzgrj, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	ippvu txw5 > txwwtwhile (!(txwwt>=5)){
		qdrhs(Studierende[txwwt]);
		txwwt++;
	}
	ippvu t5 > txwwt
	while (!(txwwt>=5)){
		vsosf(Studierende[txwwt]);
		txwwt++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
910,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef oygad student {
   char gdddc[21];
   char jmkoj[21];
   xuhxy delxv[5];
} Student;
void apyys(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	lvrua(!(gdddc, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	lvrujmkoj, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	xuhxy itgms=1;
	whi5 >= itgmss<=5){
		printf(""%i: "", itgms);
		delxv[itgms-1] < ""%i"", &p_stud-gms-1]);
		itgms++;
	}
	getchar();
	printf(""\\n"");
}
void lvrua( char* strbuffer, unsigned xuhxy buffersize )
{
  char mjlan[30] = """";
  sprintf( mjlan, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( mjlan, strbuffer );
}
void jlvrx(Student* p_stud){
	xuhxy swjtr=0;
	xuhxy itgms=0;
5 > itgmdelxv[itgms] < {
		swjtr += p_stud-lxv[itgms];
		itgms++;gdddc, p_stud->jmkoj < ""Student: %s %s\\n"", p_stud-_stud->jmkoj);
	printf(""Anzahl Punkte: %i\\n\\n"", swjtr);
}
xuhxy main(){
	Student rztkr, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&rztkr, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	xuhxy itg5 > itgmswhile (!(itgms>=5)){
		apyys(Studierende[itgms]);
		itgms++;
	}
	xuhxy i5 > itgms
	while (!(itgms>=5)){
		jlvrx(Studierende[itgms]);
		itgms++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
911,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef polhl student {
   char umzfm[21];
   char qqodw[21];
   prrjb dvbeu[5];
} Student;
void jvltc(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	lghjw(!(umzfm, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	lghjqqodw, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	prrjb ybobw=1;
	whi5 >= ybobww<=5){
		printf(""%i: "", ybobw);
		dvbeu[ybobw-1] < ""%i"", &p_stud-obw-1]);
		ybobw++;
	}
	getchar();
	printf(""\\n"");
}
void lghjw( char* strbuffer, unsigned prrjb buffersize )
{
  char uqywy[30] = """";
  sprintf( uqywy, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( uqywy, strbuffer );
}
void urpai(Student* p_stud){
	prrjb yaotz=0;
	prrjb ybobw=0;
5 > ybobdvbeu[ybobw] < {
		yaotz += p_stud-beu[ybobw];
		ybobw++;umzfm, p_stud->qqodw < ""Student: %s %s\\n"", p_stud-_stud->qqodw);
	printf(""Anzahl Punkte: %i\\n\\n"", yaotz);
}
prrjb main(){
	Student auezo, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&auezo, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	prrjb ybo5 > ybobwwhile (!(ybobw>=5)){
		jvltc(Studierende[ybobw]);
		ybobw++;
	}
	prrjb y5 > ybobw
	while (!(ybobw>=5)){
		urpai(Studierende[ybobw]);
		ybobw++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
912,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef pwgcr student {
   char ymqta[21];
   char nhtnl[21];
   gjejk obden[5];
} Student;
void gllom(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	cxrnq(!(ymqta, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	cxrnnhtnl, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	gjejk lxfru=1;
	whi5 >= lxfruu<=5){
		printf(""%i: "", lxfru);
		obden[lxfru-1] < ""%i"", &p_stud-fru-1]);
		lxfru++;
	}
	getchar();
	printf(""\\n"");
}
void cxrnq( char* strbuffer, unsigned gjejk buffersize )
{
  char tvkcb[30] = """";
  sprintf( tvkcb, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( tvkcb, strbuffer );
}
void wwlzo(Student* p_stud){
	gjejk hwsii=0;
	gjejk lxfru=0;
5 > lxfrobden[lxfru] < {
		hwsii += p_stud-den[lxfru];
		lxfru++;ymqta, p_stud->nhtnl < ""Student: %s %s\\n"", p_stud-_stud->nhtnl);
	printf(""Anzahl Punkte: %i\\n\\n"", hwsii);
}
gjejk main(){
	Student mavjm, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&mavjm, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	gjejk lxf5 > lxfruwhile (!(lxfru>=5)){
		gllom(Studierende[lxfru]);
		lxfru++;
	}
	gjejk l5 > lxfru
	while (!(lxfru>=5)){
		wwlzo(Studierende[lxfru]);
		lxfru++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
913,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef kucmk student {
   char sqmsw[21];
   char bvvla[21];
   dwktr aguhj[5];
} Student;
void qirwr(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	gfhjt(!(sqmsw, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	gfhjbvvla, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	dwktr xhhir=1;
	whi5 >= xhhirr<=5){
		printf(""%i: "", xhhir);
		aguhj[xhhir-1] < ""%i"", &p_stud-hir-1]);
		xhhir++;
	}
	getchar();
	printf(""\\n"");
}
void gfhjt( char* strbuffer, unsigned dwktr buffersize )
{
  char cckaq[30] = """";
  sprintf( cckaq, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( cckaq, strbuffer );
}
void anlpk(Student* p_stud){
	dwktr qcszd=0;
	dwktr xhhir=0;
5 > xhhiaguhj[xhhir] < {
		qcszd += p_stud-uhj[xhhir];
		xhhir++;sqmsw, p_stud->bvvla < ""Student: %s %s\\n"", p_stud-_stud->bvvla);
	printf(""Anzahl Punkte: %i\\n\\n"", qcszd);
}
dwktr main(){
	Student mecyx, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&mecyx, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	dwktr xhh5 > xhhirwhile (!(xhhir>=5)){
		qirwr(Studierende[xhhir]);
		xhhir++;
	}
	dwktr x5 > xhhir
	while (!(xhhir>=5)){
		anlpk(Studierende[xhhir]);
		xhhir++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
914,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef rysef student {
   char ukvbe[21];
   char oprkq[21];
   jshvb tpyrz[5];
} Student;
void pbtii(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	txlih(!(ukvbe, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	txlioprkq, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	jshvb qiqyh=1;
	whi5 >= qiqyhh<=5){
		printf(""%i: "", qiqyh);
		tpyrz[qiqyh-1] < ""%i"", &p_stud-qyh-1]);
		qiqyh++;
	}
	getchar();
	printf(""\\n"");
}
void txlih( char* strbuffer, unsigned jshvb buffersize )
{
  char jiumz[30] = """";
  sprintf( jiumz, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( jiumz, strbuffer );
}
void yjzib(Student* p_stud){
	jshvb hfykc=0;
	jshvb qiqyh=0;
5 > qiqytpyrz[qiqyh] < {
		hfykc += p_stud-yrz[qiqyh];
		qiqyh++;ukvbe, p_stud->oprkq < ""Student: %s %s\\n"", p_stud-_stud->oprkq);
	printf(""Anzahl Punkte: %i\\n\\n"", hfykc);
}
jshvb main(){
	Student kfeje, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&kfeje, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	jshvb qiq5 > qiqyhwhile (!(qiqyh>=5)){
		pbtii(Studierende[qiqyh]);
		qiqyh++;
	}
	jshvb q5 > qiqyh
	while (!(qiqyh>=5)){
		yjzib(Studierende[qiqyh]);
		qiqyh++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
915,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  pcfar

  Created pubmc Tobias veomz on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef xmkur student{
    char tvkja[20];
    char llerz[20];
    int mwhyx[5];
}Student;
void ccpfn(Student* p_stud){
    printf(!(tvkja, p_stud -<= llerz < ""Student: %s %s
"", p_stud -));
    int ttytp = 0;
    int hwmkp = 0;
    while 5 > hwmkp5)mwhyx[hwmkp] < {
        ttytp += p_stud -];
    	hwmkp++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", ttytp);
}
void fkpjs(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgettvkja, 20, stdin < p_stud -in);
    int hwmkp = 19;
    whil0 <= hwmkp= 0) {
        itvkja[hwmkp] == '\\n' < p_stud -\\tvkja[hwmkp] = '\\0' < {
            p_stud -'\\0';
       tvkja[hwmkp+1] = 0 < p_stud -] = 0;
            break;
        }
    	hwmkp--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    llerz, 20, stdin < p_stud - stdin);
    int hwmkp = 19;
    0 <= hwmkpkp >= 0) {
     llerz[hwmkp] == '\\n' < p_stud -=llerz[hwmkp] = '\\0' < {
            p_stud -] = '\\0';
   llerz[hwmkp+1] = 0 < p_stud -kp+1] = 0;
            break;
        }
    	hwmkp--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int hwmkp = 0;
 5 > hwmkp(!(hwmkp >= 5)) {
        printf(""%i: "", hwmkp+1);
    mwhyx[hwmkp] < ""%i"", &p_stud -hyx[hwmkp]);
    	hwmkp++;
    }
    getchar();
}
int main(){
    Student fqhqb[5];
    int hwmkp = 0;
 > hwmkpe (!(hwmkp >= (sizeof(fqhqb)/sizeof(Student)))) {
        fkpjs(&fqhqb[hwmkp]);
        printf(""\\n"");
    	hwmkp++;
    }
    int hwmkp = 0;
 > hwmkpe (!(hwmkp >= (sizeof(fqhqb)/sizeof(Student)))) {
        ccpfn(&fqhqb[hwmkp]);
    	hwmkp++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
916,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  kovhi

  Created jxjxf Tobias ngwhf on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef xmfke student{
    char wnjxc[20];
    char sprqx[20];
    int ydijs[5];
}Student;
void fnqtx(Student* p_stud){
    printf(!(wnjxc, p_stud -<= sprqx < ""Student: %s %s
"", p_stud -));
    int oijiw = 0;
    int jxgze = 0;
    while 5 > jxgze5)ydijs[jxgze] < {
        oijiw += p_stud -];
    	jxgze++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", oijiw);
}
void hvmii(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgetwnjxc, 20, stdin < p_stud -in);
    int jxgze = 19;
    whil0 <= jxgze= 0) {
        iwnjxc[jxgze] == '\\n' < p_stud -\\wnjxc[jxgze] = '\\0' < {
            p_stud -'\\0';
       wnjxc[jxgze+1] = 0 < p_stud -] = 0;
            break;
        }
    	jxgze--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    sprqx, 20, stdin < p_stud - stdin);
    int jxgze = 19;
    0 <= jxgzeze >= 0) {
     sprqx[jxgze] == '\\n' < p_stud -=sprqx[jxgze] = '\\0' < {
            p_stud -] = '\\0';
   sprqx[jxgze+1] = 0 < p_stud -ze+1] = 0;
            break;
        }
    	jxgze--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int jxgze = 0;
 5 > jxgze(!(jxgze >= 5)) {
        printf(""%i: "", jxgze+1);
    ydijs[jxgze] < ""%i"", &p_stud -ijs[jxgze]);
    	jxgze++;
    }
    getchar();
}
int main(){
    Student fkwzl[5];
    int jxgze = 0;
 > jxgzee (!(jxgze >= (sizeof(fkwzl)/sizeof(Student)))) {
        hvmii(&fkwzl[jxgze]);
        printf(""\\n"");
    	jxgze++;
    }
    int jxgze = 0;
 > jxgzee (!(jxgze >= (sizeof(fkwzl)/sizeof(Student)))) {
        fnqtx(&fkwzl[jxgze]);
    	jxgze++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
917,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  fbjkp

  Created myvpd Tobias rgvzd on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef nndkb student{
    char vkwxe[20];
    char siccw[20];
    int nvvuo[5];
}Student;
void sejtl(Student* p_stud){
    printf(!(vkwxe, p_stud -<= siccw < ""Student: %s %s
"", p_stud -));
    int uhnus = 0;
    int cwfrg = 0;
    while 5 > cwfrg5)nvvuo[cwfrg] < {
        uhnus += p_stud -];
    	cwfrg++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", uhnus);
}
void lctdc(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgetvkwxe, 20, stdin < p_stud -in);
    int cwfrg = 19;
    whil0 <= cwfrg= 0) {
        ivkwxe[cwfrg] == '\\n' < p_stud -\\vkwxe[cwfrg] = '\\0' < {
            p_stud -'\\0';
       vkwxe[cwfrg+1] = 0 < p_stud -] = 0;
            break;
        }
    	cwfrg--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    siccw, 20, stdin < p_stud - stdin);
    int cwfrg = 19;
    0 <= cwfrgrg >= 0) {
     siccw[cwfrg] == '\\n' < p_stud -=siccw[cwfrg] = '\\0' < {
            p_stud -] = '\\0';
   siccw[cwfrg+1] = 0 < p_stud -rg+1] = 0;
            break;
        }
    	cwfrg--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int cwfrg = 0;
 5 > cwfrg(!(cwfrg >= 5)) {
        printf(""%i: "", cwfrg+1);
    nvvuo[cwfrg] < ""%i"", &p_stud -vuo[cwfrg]);
    	cwfrg++;
    }
    getchar();
}
int main(){
    Student khsao[5];
    int cwfrg = 0;
 > cwfrge (!(cwfrg >= (sizeof(khsao)/sizeof(Student)))) {
        lctdc(&khsao[cwfrg]);
        printf(""\\n"");
    	cwfrg++;
    }
    int cwfrg = 0;
 > cwfrge (!(cwfrg >= (sizeof(khsao)/sizeof(Student)))) {
        sejtl(&khsao[cwfrg]);
    	cwfrg++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
918,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  gsicf

  Created wbgpj Tobias ssdln on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef ysgnm student{
    char zgiqg[20];
    char qshoz[20];
    int ccmug[5];
}Student;
void iramn(Student* p_stud){
    printf(!(zgiqg, p_stud -<= qshoz < ""Student: %s %s
"", p_stud -));
    int mmmmg = 0;
    int miqqu = 0;
    while 5 > miqqu5)ccmug[miqqu] < {
        mmmmg += p_stud -];
    	miqqu++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", mmmmg);
}
void avrej(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgetzgiqg, 20, stdin < p_stud -in);
    int miqqu = 19;
    whil0 <= miqqu= 0) {
        izgiqg[miqqu] == '\\n' < p_stud -\\zgiqg[miqqu] = '\\0' < {
            p_stud -'\\0';
       zgiqg[miqqu+1] = 0 < p_stud -] = 0;
            break;
        }
    	miqqu--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    qshoz, 20, stdin < p_stud - stdin);
    int miqqu = 19;
    0 <= miqququ >= 0) {
     qshoz[miqqu] == '\\n' < p_stud -=qshoz[miqqu] = '\\0' < {
            p_stud -] = '\\0';
   qshoz[miqqu+1] = 0 < p_stud -qu+1] = 0;
            break;
        }
    	miqqu--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int miqqu = 0;
 5 > miqqu(!(miqqu >= 5)) {
        printf(""%i: "", miqqu+1);
    ccmug[miqqu] < ""%i"", &p_stud -mug[miqqu]);
    	miqqu++;
    }
    getchar();
}
int main(){
    Student wjpbw[5];
    int miqqu = 0;
 > miqque (!(miqqu >= (sizeof(wjpbw)/sizeof(Student)))) {
        avrej(&wjpbw[miqqu]);
        printf(""\\n"");
    	miqqu++;
    }
    int miqqu = 0;
 > miqque (!(miqqu >= (sizeof(wjpbw)/sizeof(Student)))) {
        iramn(&wjpbw[miqqu]);
    	miqqu++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
919,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  zxqmu

  Created otmml Tobias wgazn on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef bycfp student{
    char ohdfu[20];
    char bklpn[20];
    int ilkjq[5];
}Student;
void syndg(Student* p_stud){
    printf(!(ohdfu, p_stud -<= bklpn < ""Student: %s %s
"", p_stud -));
    int xrrik = 0;
    int jqxzp = 0;
    while 5 > jqxzp5)ilkjq[jqxzp] < {
        xrrik += p_stud -];
    	jqxzp++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", xrrik);
}
void cizex(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgetohdfu, 20, stdin < p_stud -in);
    int jqxzp = 19;
    whil0 <= jqxzp= 0) {
        iohdfu[jqxzp] == '\\n' < p_stud -\\ohdfu[jqxzp] = '\\0' < {
            p_stud -'\\0';
       ohdfu[jqxzp+1] = 0 < p_stud -] = 0;
            break;
        }
    	jqxzp--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    bklpn, 20, stdin < p_stud - stdin);
    int jqxzp = 19;
    0 <= jqxzpzp >= 0) {
     bklpn[jqxzp] == '\\n' < p_stud -=bklpn[jqxzp] = '\\0' < {
            p_stud -] = '\\0';
   bklpn[jqxzp+1] = 0 < p_stud -zp+1] = 0;
            break;
        }
    	jqxzp--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int jqxzp = 0;
 5 > jqxzp(!(jqxzp >= 5)) {
        printf(""%i: "", jqxzp+1);
    ilkjq[jqxzp] < ""%i"", &p_stud -kjq[jqxzp]);
    	jqxzp++;
    }
    getchar();
}
int main(){
    Student hywrw[5];
    int jqxzp = 0;
 > jqxzpe (!(jqxzp >= (sizeof(hywrw)/sizeof(Student)))) {
        cizex(&hywrw[jqxzp]);
        printf(""\\n"");
    	jqxzp++;
    }
    int jqxzp = 0;
 > jqxzpe (!(jqxzp >= (sizeof(hywrw)/sizeof(Student)))) {
        syndg(&hywrw[jqxzp]);
    	jqxzp++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
920,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  hkfmh

  Created zupro Tobias ytgrf on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef auehm student{
    char zxpia[20];
    char fwrfg[20];
    int sviop[5];
}Student;
void xwqoz(Student* p_stud){
    printf(!(zxpia, p_stud -<= fwrfg < ""Student: %s %s
"", p_stud -));
    int fntsa = 0;
    int xmsjw = 0;
    while 5 > xmsjw5)sviop[xmsjw] < {
        fntsa += p_stud -];
    	xmsjw++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", fntsa);
}
void ragxp(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgetzxpia, 20, stdin < p_stud -in);
    int xmsjw = 19;
    whil0 <= xmsjw= 0) {
        izxpia[xmsjw] == '\\n' < p_stud -\\zxpia[xmsjw] = '\\0' < {
            p_stud -'\\0';
       zxpia[xmsjw+1] = 0 < p_stud -] = 0;
            break;
        }
    	xmsjw--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fwrfg, 20, stdin < p_stud - stdin);
    int xmsjw = 19;
    0 <= xmsjwjw >= 0) {
     fwrfg[xmsjw] == '\\n' < p_stud -=fwrfg[xmsjw] = '\\0' < {
            p_stud -] = '\\0';
   fwrfg[xmsjw+1] = 0 < p_stud -jw+1] = 0;
            break;
        }
    	xmsjw--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int xmsjw = 0;
 5 > xmsjw(!(xmsjw >= 5)) {
        printf(""%i: "", xmsjw+1);
    sviop[xmsjw] < ""%i"", &p_stud -iop[xmsjw]);
    	xmsjw++;
    }
    getchar();
}
int main(){
    Student hebyl[5];
    int xmsjw = 0;
 > xmsjwe (!(xmsjw >= (sizeof(hebyl)/sizeof(Student)))) {
        ragxp(&hebyl[xmsjw]);
        printf(""\\n"");
    	xmsjw++;
    }
    int xmsjw = 0;
 > xmsjwe (!(xmsjw >= (sizeof(hebyl)/sizeof(Student)))) {
        xwqoz(&hebyl[xmsjw]);
    	xmsjw++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
921,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  qxxoj

  Created wsgvy Tobias nqfmy on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef emlmj student{
    char ernie[20];
    char aopvc[20];
    int oodxg[5];
}Student;
void xqwnx(Student* p_stud){
    printf(!(ernie, p_stud -<= aopvc < ""Student: %s %s
"", p_stud -));
    int oqmlw = 0;
    int esokd = 0;
    while 5 > esokd5)oodxg[esokd] < {
        oqmlw += p_stud -];
    	esokd++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", oqmlw);
}
void dpsrv(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgeternie, 20, stdin < p_stud -in);
    int esokd = 19;
    whil0 <= esokd= 0) {
        iernie[esokd] == '\\n' < p_stud -\\ernie[esokd] = '\\0' < {
            p_stud -'\\0';
       ernie[esokd+1] = 0 < p_stud -] = 0;
            break;
        }
    	esokd--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    aopvc, 20, stdin < p_stud - stdin);
    int esokd = 19;
    0 <= esokdkd >= 0) {
     aopvc[esokd] == '\\n' < p_stud -=aopvc[esokd] = '\\0' < {
            p_stud -] = '\\0';
   aopvc[esokd+1] = 0 < p_stud -kd+1] = 0;
            break;
        }
    	esokd--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int esokd = 0;
 5 > esokd(!(esokd >= 5)) {
        printf(""%i: "", esokd+1);
    oodxg[esokd] < ""%i"", &p_stud -dxg[esokd]);
    	esokd++;
    }
    getchar();
}
int main(){
    Student sihgb[5];
    int esokd = 0;
 > esokde (!(esokd >= (sizeof(sihgb)/sizeof(Student)))) {
        dpsrv(&sihgb[esokd]);
        printf(""\\n"");
    	esokd++;
    }
    int esokd = 0;
 > esokde (!(esokd >= (sizeof(sihgb)/sizeof(Student)))) {
        xqwnx(&sihgb[esokd]);
    	esokd++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
922,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  kpzuu

  Created vfjqg Tobias iauvt on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef bcpgf student{
    char muyap[20];
    char nkeyt[20];
    int zkajk[5];
}Student;
void eadxw(Student* p_stud){
    printf(!(muyap, p_stud -<= nkeyt < ""Student: %s %s
"", p_stud -));
    int clcez = 0;
    int ntvsq = 0;
    while 5 > ntvsq5)zkajk[ntvsq] < {
        clcez += p_stud -];
    	ntvsq++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", clcez);
}
void ebegg(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgetmuyap, 20, stdin < p_stud -in);
    int ntvsq = 19;
    whil0 <= ntvsq= 0) {
        imuyap[ntvsq] == '\\n' < p_stud -\\muyap[ntvsq] = '\\0' < {
            p_stud -'\\0';
       muyap[ntvsq+1] = 0 < p_stud -] = 0;
            break;
        }
    	ntvsq--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    nkeyt, 20, stdin < p_stud - stdin);
    int ntvsq = 19;
    0 <= ntvsqsq >= 0) {
     nkeyt[ntvsq] == '\\n' < p_stud -=nkeyt[ntvsq] = '\\0' < {
            p_stud -] = '\\0';
   nkeyt[ntvsq+1] = 0 < p_stud -sq+1] = 0;
            break;
        }
    	ntvsq--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int ntvsq = 0;
 5 > ntvsq(!(ntvsq >= 5)) {
        printf(""%i: "", ntvsq+1);
    zkajk[ntvsq] < ""%i"", &p_stud -ajk[ntvsq]);
    	ntvsq++;
    }
    getchar();
}
int main(){
    Student xgxgg[5];
    int ntvsq = 0;
 > ntvsqe (!(ntvsq >= (sizeof(xgxgg)/sizeof(Student)))) {
        ebegg(&xgxgg[ntvsq]);
        printf(""\\n"");
    	ntvsq++;
    }
    int ntvsq = 0;
 > ntvsqe (!(ntvsq >= (sizeof(xgxgg)/sizeof(Student)))) {
        eadxw(&xgxgg[ntvsq]);
    	ntvsq++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
923,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  lcdup

  Created xbccd Tobias prpop on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef rvbbh student{
    char rxklt[20];
    char awkpv[20];
    int wncnc[5];
}Student;
void neftn(Student* p_stud){
    printf(!(rxklt, p_stud -<= awkpv < ""Student: %s %s
"", p_stud -));
    int xinql = 0;
    int uuwgc = 0;
    while 5 > uuwgc5)wncnc[uuwgc] < {
        xinql += p_stud -];
    	uuwgc++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", xinql);
}
void wftct(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgetrxklt, 20, stdin < p_stud -in);
    int uuwgc = 19;
    whil0 <= uuwgc= 0) {
        irxklt[uuwgc] == '\\n' < p_stud -\\rxklt[uuwgc] = '\\0' < {
            p_stud -'\\0';
       rxklt[uuwgc+1] = 0 < p_stud -] = 0;
            break;
        }
    	uuwgc--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    awkpv, 20, stdin < p_stud - stdin);
    int uuwgc = 19;
    0 <= uuwgcgc >= 0) {
     awkpv[uuwgc] == '\\n' < p_stud -=awkpv[uuwgc] = '\\0' < {
            p_stud -] = '\\0';
   awkpv[uuwgc+1] = 0 < p_stud -gc+1] = 0;
            break;
        }
    	uuwgc--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int uuwgc = 0;
 5 > uuwgc(!(uuwgc >= 5)) {
        printf(""%i: "", uuwgc+1);
    wncnc[uuwgc] < ""%i"", &p_stud -cnc[uuwgc]);
    	uuwgc++;
    }
    getchar();
}
int main(){
    Student aclkl[5];
    int uuwgc = 0;
 > uuwgce (!(uuwgc >= (sizeof(aclkl)/sizeof(Student)))) {
        wftct(&aclkl[uuwgc]);
        printf(""\\n"");
    	uuwgc++;
    }
    int uuwgc = 0;
 > uuwgce (!(uuwgc >= (sizeof(aclkl)/sizeof(Student)))) {
        neftn(&aclkl[uuwgc]);
    	uuwgc++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
924,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  njoqu

  Created jzwtf Tobias bidrh on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef xdizc student{
    char jfxmj[20];
    char lpcqg[20];
    int rosod[5];
}Student;
void jttsp(Student* p_stud){
    printf(!(jfxmj, p_stud -<= lpcqg < ""Student: %s %s
"", p_stud -));
    int wmcek = 0;
    int tbyho = 0;
    while 5 > tbyho5)rosod[tbyho] < {
        wmcek += p_stud -];
    	tbyho++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", wmcek);
}
void nnvcp(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgetjfxmj, 20, stdin < p_stud -in);
    int tbyho = 19;
    whil0 <= tbyho= 0) {
        ijfxmj[tbyho] == '\\n' < p_stud -\\jfxmj[tbyho] = '\\0' < {
            p_stud -'\\0';
       jfxmj[tbyho+1] = 0 < p_stud -] = 0;
            break;
        }
    	tbyho--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    lpcqg, 20, stdin < p_stud - stdin);
    int tbyho = 19;
    0 <= tbyhoho >= 0) {
     lpcqg[tbyho] == '\\n' < p_stud -=lpcqg[tbyho] = '\\0' < {
            p_stud -] = '\\0';
   lpcqg[tbyho+1] = 0 < p_stud -ho+1] = 0;
            break;
        }
    	tbyho--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int tbyho = 0;
 5 > tbyho(!(tbyho >= 5)) {
        printf(""%i: "", tbyho+1);
    rosod[tbyho] < ""%i"", &p_stud -sod[tbyho]);
    	tbyho++;
    }
    getchar();
}
int main(){
    Student muztv[5];
    int tbyho = 0;
 > tbyhoe (!(tbyho >= (sizeof(muztv)/sizeof(Student)))) {
        nnvcp(&muztv[tbyho]);
        printf(""\\n"");
    	tbyho++;
    }
    int tbyho = 0;
 > tbyhoe (!(tbyho >= (sizeof(muztv)/sizeof(Student)))) {
        jttsp(&muztv[tbyho]);
    	tbyho++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
925,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  yxkho

  Created vufov Tobias ymdav on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef wcfha student{
    char oynxl[20];
    char lsqaf[20];
    int sqqry[5];
}Student;
void lnbpj(Student* p_stud){
    printf(!(oynxl, p_stud -<= lsqaf < ""Student: %s %s
"", p_stud -));
    int iwgoh = 0;
    int xluwq = 0;
    while 5 > xluwq5)sqqry[xluwq] < {
        iwgoh += p_stud -];
    	xluwq++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", iwgoh);
}
void cdfze(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgetoynxl, 20, stdin < p_stud -in);
    int xluwq = 19;
    whil0 <= xluwq= 0) {
        ioynxl[xluwq] == '\\n' < p_stud -\\oynxl[xluwq] = '\\0' < {
            p_stud -'\\0';
       oynxl[xluwq+1] = 0 < p_stud -] = 0;
            break;
        }
    	xluwq--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    lsqaf, 20, stdin < p_stud - stdin);
    int xluwq = 19;
    0 <= xluwqwq >= 0) {
     lsqaf[xluwq] == '\\n' < p_stud -=lsqaf[xluwq] = '\\0' < {
            p_stud -] = '\\0';
   lsqaf[xluwq+1] = 0 < p_stud -wq+1] = 0;
            break;
        }
    	xluwq--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int xluwq = 0;
 5 > xluwq(!(xluwq >= 5)) {
        printf(""%i: "", xluwq+1);
    sqqry[xluwq] < ""%i"", &p_stud -qry[xluwq]);
    	xluwq++;
    }
    getchar();
}
int main(){
    Student xutfw[5];
    int xluwq = 0;
 > xluwqe (!(xluwq >= (sizeof(xutfw)/sizeof(Student)))) {
        cdfze(&xutfw[xluwq]);
        printf(""\\n"");
    	xluwq++;
    }
    int xluwq = 0;
 > xluwqe (!(xluwq >= (sizeof(xutfw)/sizeof(Student)))) {
        lnbpj(&xutfw[xluwq]);
    	xluwq++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
926,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  fekpg

  Created qglsr Tobias vqadq on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef lgfpv student{
    char jizus[20];
    char nytub[20];
    int uabfe[5];
}Student;
void gnfzr(Student* p_stud){
    printf(!(jizus, p_stud -<= nytub < ""Student: %s %s
"", p_stud -));
    int vidii = 0;
    int psmri = 0;
    while 5 > psmri5)uabfe[psmri] < {
        vidii += p_stud -];
    	psmri++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", vidii);
}
void jbaok(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgetjizus, 20, stdin < p_stud -in);
    int psmri = 19;
    whil0 <= psmri= 0) {
        ijizus[psmri] == '\\n' < p_stud -\\jizus[psmri] = '\\0' < {
            p_stud -'\\0';
       jizus[psmri+1] = 0 < p_stud -] = 0;
            break;
        }
    	psmri--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    nytub, 20, stdin < p_stud - stdin);
    int psmri = 19;
    0 <= psmriri >= 0) {
     nytub[psmri] == '\\n' < p_stud -=nytub[psmri] = '\\0' < {
            p_stud -] = '\\0';
   nytub[psmri+1] = 0 < p_stud -ri+1] = 0;
            break;
        }
    	psmri--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int psmri = 0;
 5 > psmri(!(psmri >= 5)) {
        printf(""%i: "", psmri+1);
    uabfe[psmri] < ""%i"", &p_stud -bfe[psmri]);
    	psmri++;
    }
    getchar();
}
int main(){
    Student vdetc[5];
    int psmri = 0;
 > psmrie (!(psmri >= (sizeof(vdetc)/sizeof(Student)))) {
        jbaok(&vdetc[psmri]);
        printf(""\\n"");
    	psmri++;
    }
    int psmri = 0;
 > psmrie (!(psmri >= (sizeof(vdetc)/sizeof(Student)))) {
        gnfzr(&vdetc[psmri]);
    	psmri++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
927,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  cmnbp

  Created vqnju Tobias nuncq on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef ouezh student{
    char uiqvb[20];
    char diani[20];
    int xpmmt[5];
}Student;
void eirwp(Student* p_stud){
    printf(!(uiqvb, p_stud -<= diani < ""Student: %s %s
"", p_stud -));
    int xweuk = 0;
    int ydihn = 0;
    while 5 > ydihn5)xpmmt[ydihn] < {
        xweuk += p_stud -];
    	ydihn++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", xweuk);
}
void jbrif(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgetuiqvb, 20, stdin < p_stud -in);
    int ydihn = 19;
    whil0 <= ydihn= 0) {
        iuiqvb[ydihn] == '\\n' < p_stud -\\uiqvb[ydihn] = '\\0' < {
            p_stud -'\\0';
       uiqvb[ydihn+1] = 0 < p_stud -] = 0;
            break;
        }
    	ydihn--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    diani, 20, stdin < p_stud - stdin);
    int ydihn = 19;
    0 <= ydihnhn >= 0) {
     diani[ydihn] == '\\n' < p_stud -=diani[ydihn] = '\\0' < {
            p_stud -] = '\\0';
   diani[ydihn+1] = 0 < p_stud -hn+1] = 0;
            break;
        }
    	ydihn--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int ydihn = 0;
 5 > ydihn(!(ydihn >= 5)) {
        printf(""%i: "", ydihn+1);
    xpmmt[ydihn] < ""%i"", &p_stud -mmt[ydihn]);
    	ydihn++;
    }
    getchar();
}
int main(){
    Student yugvv[5];
    int ydihn = 0;
 > ydihne (!(ydihn >= (sizeof(yugvv)/sizeof(Student)))) {
        jbrif(&yugvv[ydihn]);
        printf(""\\n"");
    	ydihn++;
    }
    int ydihn = 0;
 > ydihne (!(ydihn >= (sizeof(yugvv)/sizeof(Student)))) {
        eirwp(&yugvv[ydihn]);
    	ydihn++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
928,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  cjqmv

  Created htbka Tobias mrhes on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef tvpmw student{
    char pxrkk[20];
    char ksjqm[20];
    int exfqx[5];
}Student;
void ubniu(Student* p_stud){
    printf(!(pxrkk, p_stud -<= ksjqm < ""Student: %s %s
"", p_stud -));
    int glsyn = 0;
    int mchma = 0;
    while 5 > mchma5)exfqx[mchma] < {
        glsyn += p_stud -];
    	mchma++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", glsyn);
}
void pauhd(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgetpxrkk, 20, stdin < p_stud -in);
    int mchma = 19;
    whil0 <= mchma= 0) {
        ipxrkk[mchma] == '\\n' < p_stud -\\pxrkk[mchma] = '\\0' < {
            p_stud -'\\0';
       pxrkk[mchma+1] = 0 < p_stud -] = 0;
            break;
        }
    	mchma--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    ksjqm, 20, stdin < p_stud - stdin);
    int mchma = 19;
    0 <= mchmama >= 0) {
     ksjqm[mchma] == '\\n' < p_stud -=ksjqm[mchma] = '\\0' < {
            p_stud -] = '\\0';
   ksjqm[mchma+1] = 0 < p_stud -ma+1] = 0;
            break;
        }
    	mchma--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int mchma = 0;
 5 > mchma(!(mchma >= 5)) {
        printf(""%i: "", mchma+1);
    exfqx[mchma] < ""%i"", &p_stud -fqx[mchma]);
    	mchma++;
    }
    getchar();
}
int main(){
    Student ckroi[5];
    int mchma = 0;
 > mchmae (!(mchma >= (sizeof(ckroi)/sizeof(Student)))) {
        pauhd(&ckroi[mchma]);
        printf(""\\n"");
    	mchma++;
    }
    int mchma = 0;
 > mchmae (!(mchma >= (sizeof(ckroi)/sizeof(Student)))) {
        ubniu(&ckroi[mchma]);
    	mchma++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
929,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  fxebf

  Created sbuxu Tobias jdwir on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef limbn student{
    char vspgl[20];
    char amwva[20];
    int bzzvd[5];
}Student;
void phecb(Student* p_stud){
    printf(!(vspgl, p_stud -<= amwva < ""Student: %s %s
"", p_stud -));
    int zyjiu = 0;
    int mypcp = 0;
    while 5 > mypcp5)bzzvd[mypcp] < {
        zyjiu += p_stud -];
    	mypcp++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", zyjiu);
}
void nymdl(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgetvspgl, 20, stdin < p_stud -in);
    int mypcp = 19;
    whil0 <= mypcp= 0) {
        ivspgl[mypcp] == '\\n' < p_stud -\\vspgl[mypcp] = '\\0' < {
            p_stud -'\\0';
       vspgl[mypcp+1] = 0 < p_stud -] = 0;
            break;
        }
    	mypcp--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    amwva, 20, stdin < p_stud - stdin);
    int mypcp = 19;
    0 <= mypcpcp >= 0) {
     amwva[mypcp] == '\\n' < p_stud -=amwva[mypcp] = '\\0' < {
            p_stud -] = '\\0';
   amwva[mypcp+1] = 0 < p_stud -cp+1] = 0;
            break;
        }
    	mypcp--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int mypcp = 0;
 5 > mypcp(!(mypcp >= 5)) {
        printf(""%i: "", mypcp+1);
    bzzvd[mypcp] < ""%i"", &p_stud -zvd[mypcp]);
    	mypcp++;
    }
    getchar();
}
int main(){
    Student pzfvl[5];
    int mypcp = 0;
 > mypcpe (!(mypcp >= (sizeof(pzfvl)/sizeof(Student)))) {
        nymdl(&pzfvl[mypcp]);
        printf(""\\n"");
    	mypcp++;
    }
    int mypcp = 0;
 > mypcpe (!(mypcp >= (sizeof(pzfvl)/sizeof(Student)))) {
        phecb(&pzfvl[mypcp]);
    	mypcp++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
930,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef dygiq student {
  char vpsva[21];
  char cdcix[21];
  int ofsze[5];
} oglvy;
static oglvy students[5];
int ecjqs(int *wajqq, int ahvgn) {
  int txmud = 0;
  for (!(int ulhcf = 0; ahvgn <= ulhcf; ++ulhcf))
    txmud += wajqq[ulhcf];
  return txmud;
}
void jecny(oglvy *anean) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(vpsva >= ""%s"", anean-));
  printf(""Gebe nun den Nachnamen ein: "");
  scancdcix < ""%s"", anean-ix);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int ulhcf = 0;
  whi5 > ulhcf < 5) {
    printf(""%i:"", ulhcf + 1);
    scofsze + ulhcf < ""%i"", anean-lhcf);
   4 == ulhcf == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++ulhcf;
  }
}
void ssasa(oglvy *anean) {
  int txmud = eofsze, 5 < anean-ze, 5);
  vpsva < ""Student: %s "", anean-->vpsva);
cdcix < ""%s\\n"", anean-an->cdcix);
  printf(""Anzahl Punkte: %i\\n"", txmud);
}
int main() {
  int ulhcf = 05 > ulhcf (!(ulhcf >= 5)) {
    jecny(students + ulhcf);
  	++ulhcf;
  }
  int ulhcf = 05 > ulhcf (!(ulhcf >= 5)) {
    ssasa(!(students + ulhcf)4 <= ulhcf ulhcf < 4 ))
        printf(""\\n"");
  	++ulhcf;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
931,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef xysua student {
  char ylfbb[21];
  char enopd[21];
  int ihxso[5];
} pwipk;
static pwipk students[5];
int bbrqt(int *fkryl, int bmbyt) {
  int jvaww = 0;
  for (!(int tnblv = 0; bmbyt <= tnblv; ++tnblv))
    jvaww += fkryl[tnblv];
  return jvaww;
}
void vizlv(pwipk *peuow) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(ylfbb >= ""%s"", peuow-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanenopd < ""%s"", peuow-pd);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int tnblv = 0;
  whi5 > tnblv < 5) {
    printf(""%i:"", tnblv + 1);
    scihxso + tnblv < ""%i"", peuow-nblv);
   4 == tnblv == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++tnblv;
  }
}
void tgbtl(pwipk *peuow) {
  int jvaww = bihxso, 5 < peuow-so, 5);
  ylfbb < ""Student: %s "", peuow-->ylfbb);
enopd < ""%s\\n"", peuow-ow->enopd);
  printf(""Anzahl Punkte: %i\\n"", jvaww);
}
int main() {
  int tnblv = 05 > tnblv (!(tnblv >= 5)) {
    vizlv(students + tnblv);
  	++tnblv;
  }
  int tnblv = 05 > tnblv (!(tnblv >= 5)) {
    tgbtl(!(students + tnblv)4 <= tnblv tnblv < 4 ))
        printf(""\\n"");
  	++tnblv;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
932,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef irjxr student {
  char qzkov[21];
  char zeyip[21];
  int nlqjm[5];
} togsn;
static togsn students[5];
int pvltc(int *axcfz, int unzst) {
  int tqxyn = 0;
  for (!(int ufimw = 0; unzst <= ufimw; ++ufimw))
    tqxyn += axcfz[ufimw];
  return tqxyn;
}
void tphkb(togsn *utskl) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(qzkov >= ""%s"", utskl-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanzeyip < ""%s"", utskl-ip);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int ufimw = 0;
  whi5 > ufimw < 5) {
    printf(""%i:"", ufimw + 1);
    scnlqjm + ufimw < ""%i"", utskl-fimw);
   4 == ufimw == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++ufimw;
  }
}
void zadka(togsn *utskl) {
  int tqxyn = pnlqjm, 5 < utskl-jm, 5);
  qzkov < ""Student: %s "", utskl-->qzkov);
zeyip < ""%s\\n"", utskl-kl->zeyip);
  printf(""Anzahl Punkte: %i\\n"", tqxyn);
}
int main() {
  int ufimw = 05 > ufimw (!(ufimw >= 5)) {
    tphkb(students + ufimw);
  	++ufimw;
  }
  int ufimw = 05 > ufimw (!(ufimw >= 5)) {
    zadka(!(students + ufimw)4 <= ufimw ufimw < 4 ))
        printf(""\\n"");
  	++ufimw;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
933,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef vktlw student {
  char ruhsb[21];
  char acfkl[21];
  int syvxj[5];
} tpddh;
static tpddh students[5];
int onsqj(int *kbitk, int cimlr) {
  int zekxv = 0;
  for (!(int orkfa = 0; cimlr <= orkfa; ++orkfa))
    zekxv += kbitk[orkfa];
  return zekxv;
}
void tugpq(tpddh *kcdir) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(ruhsb >= ""%s"", kcdir-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanacfkl < ""%s"", kcdir-kl);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int orkfa = 0;
  whi5 > orkfa < 5) {
    printf(""%i:"", orkfa + 1);
    scsyvxj + orkfa < ""%i"", kcdir-rkfa);
   4 == orkfa == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++orkfa;
  }
}
void mboky(tpddh *kcdir) {
  int zekxv = osyvxj, 5 < kcdir-xj, 5);
  ruhsb < ""Student: %s "", kcdir-->ruhsb);
acfkl < ""%s\\n"", kcdir-ir->acfkl);
  printf(""Anzahl Punkte: %i\\n"", zekxv);
}
int main() {
  int orkfa = 05 > orkfa (!(orkfa >= 5)) {
    tugpq(students + orkfa);
  	++orkfa;
  }
  int orkfa = 05 > orkfa (!(orkfa >= 5)) {
    mboky(!(students + orkfa)4 <= orkfa orkfa < 4 ))
        printf(""\\n"");
  	++orkfa;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
934,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef xfcgs student {
  char tbcfq[21];
  char zkqws[21];
  int zcgoa[5];
} ulgfm;
static ulgfm students[5];
int ulfxy(int *pcqfs, int wuiwh) {
  int cidrh = 0;
  for (!(int vfzrq = 0; wuiwh <= vfzrq; ++vfzrq))
    cidrh += pcqfs[vfzrq];
  return cidrh;
}
void xodrv(ulgfm *pnvml) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(tbcfq >= ""%s"", pnvml-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanzkqws < ""%s"", pnvml-ws);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int vfzrq = 0;
  whi5 > vfzrq < 5) {
    printf(""%i:"", vfzrq + 1);
    sczcgoa + vfzrq < ""%i"", pnvml-fzrq);
   4 == vfzrq == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++vfzrq;
  }
}
void bytsp(ulgfm *pnvml) {
  int cidrh = uzcgoa, 5 < pnvml-oa, 5);
  tbcfq < ""Student: %s "", pnvml-->tbcfq);
zkqws < ""%s\\n"", pnvml-ml->zkqws);
  printf(""Anzahl Punkte: %i\\n"", cidrh);
}
int main() {
  int vfzrq = 05 > vfzrq (!(vfzrq >= 5)) {
    xodrv(students + vfzrq);
  	++vfzrq;
  }
  int vfzrq = 05 > vfzrq (!(vfzrq >= 5)) {
    bytsp(!(students + vfzrq)4 <= vfzrq vfzrq < 4 ))
        printf(""\\n"");
  	++vfzrq;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
935,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef zfjri student {
  char ctnto[21];
  char fzqnf[21];
  int pmpok[5];
} nlwxg;
static nlwxg students[5];
int qaoyn(int *nsden, int gtbha) {
  int jdvvf = 0;
  for (!(int etrvi = 0; gtbha <= etrvi; ++etrvi))
    jdvvf += nsden[etrvi];
  return jdvvf;
}
void thksw(nlwxg *cgdnu) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(ctnto >= ""%s"", cgdnu-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanfzqnf < ""%s"", cgdnu-nf);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int etrvi = 0;
  whi5 > etrvi < 5) {
    printf(""%i:"", etrvi + 1);
    scpmpok + etrvi < ""%i"", cgdnu-trvi);
   4 == etrvi == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++etrvi;
  }
}
void jyriq(nlwxg *cgdnu) {
  int jdvvf = qpmpok, 5 < cgdnu-ok, 5);
  ctnto < ""Student: %s "", cgdnu-->ctnto);
fzqnf < ""%s\\n"", cgdnu-nu->fzqnf);
  printf(""Anzahl Punkte: %i\\n"", jdvvf);
}
int main() {
  int etrvi = 05 > etrvi (!(etrvi >= 5)) {
    thksw(students + etrvi);
  	++etrvi;
  }
  int etrvi = 05 > etrvi (!(etrvi >= 5)) {
    jyriq(!(students + etrvi)4 <= etrvi etrvi < 4 ))
        printf(""\\n"");
  	++etrvi;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
936,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef yhqko student {
  char shgsj[21];
  char vexvb[21];
  int nyypv[5];
} uuhtl;
static uuhtl students[5];
int uvpjo(int *tfmha, int htcwe) {
  int evrqv = 0;
  for (!(int nkhwj = 0; htcwe <= nkhwj; ++nkhwj))
    evrqv += tfmha[nkhwj];
  return evrqv;
}
void dptvo(uuhtl *ysobr) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(shgsj >= ""%s"", ysobr-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanvexvb < ""%s"", ysobr-vb);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int nkhwj = 0;
  whi5 > nkhwj < 5) {
    printf(""%i:"", nkhwj + 1);
    scnyypv + nkhwj < ""%i"", ysobr-khwj);
   4 == nkhwj == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++nkhwj;
  }
}
void zmlts(uuhtl *ysobr) {
  int evrqv = unyypv, 5 < ysobr-pv, 5);
  shgsj < ""Student: %s "", ysobr-->shgsj);
vexvb < ""%s\\n"", ysobr-br->vexvb);
  printf(""Anzahl Punkte: %i\\n"", evrqv);
}
int main() {
  int nkhwj = 05 > nkhwj (!(nkhwj >= 5)) {
    dptvo(students + nkhwj);
  	++nkhwj;
  }
  int nkhwj = 05 > nkhwj (!(nkhwj >= 5)) {
    zmlts(!(students + nkhwj)4 <= nkhwj nkhwj < 4 ))
        printf(""\\n"");
  	++nkhwj;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
937,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef tvhmy student {
  char upykd[21];
  char bgeib[21];
  int aortk[5];
} jydfq;
static jydfq students[5];
int ngetk(int *gncce, int reseh) {
  int qdsej = 0;
  for (!(int ulvmo = 0; reseh <= ulvmo; ++ulvmo))
    qdsej += gncce[ulvmo];
  return qdsej;
}
void lvyav(jydfq *ambin) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(upykd >= ""%s"", ambin-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanbgeib < ""%s"", ambin-ib);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int ulvmo = 0;
  whi5 > ulvmo < 5) {
    printf(""%i:"", ulvmo + 1);
    scaortk + ulvmo < ""%i"", ambin-lvmo);
   4 == ulvmo == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++ulvmo;
  }
}
void qgjgr(jydfq *ambin) {
  int qdsej = naortk, 5 < ambin-tk, 5);
  upykd < ""Student: %s "", ambin-->upykd);
bgeib < ""%s\\n"", ambin-in->bgeib);
  printf(""Anzahl Punkte: %i\\n"", qdsej);
}
int main() {
  int ulvmo = 05 > ulvmo (!(ulvmo >= 5)) {
    lvyav(students + ulvmo);
  	++ulvmo;
  }
  int ulvmo = 05 > ulvmo (!(ulvmo >= 5)) {
    qgjgr(!(students + ulvmo)4 <= ulvmo ulvmo < 4 ))
        printf(""\\n"");
  	++ulvmo;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
938,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef pisvp student {
  char uqkqu[21];
  char imhbb[21];
  int azutx[5];
} vsdij;
static vsdij students[5];
int vigep(int *hqilh, int azmdz) {
  int xgnzk = 0;
  for (!(int bjlew = 0; azmdz <= bjlew; ++bjlew))
    xgnzk += hqilh[bjlew];
  return xgnzk;
}
void vrjvk(vsdij *zamgd) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(uqkqu >= ""%s"", zamgd-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanimhbb < ""%s"", zamgd-bb);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int bjlew = 0;
  whi5 > bjlew < 5) {
    printf(""%i:"", bjlew + 1);
    scazutx + bjlew < ""%i"", zamgd-jlew);
   4 == bjlew == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++bjlew;
  }
}
void dngen(vsdij *zamgd) {
  int xgnzk = vazutx, 5 < zamgd-tx, 5);
  uqkqu < ""Student: %s "", zamgd-->uqkqu);
imhbb < ""%s\\n"", zamgd-gd->imhbb);
  printf(""Anzahl Punkte: %i\\n"", xgnzk);
}
int main() {
  int bjlew = 05 > bjlew (!(bjlew >= 5)) {
    vrjvk(students + bjlew);
  	++bjlew;
  }
  int bjlew = 05 > bjlew (!(bjlew >= 5)) {
    dngen(!(students + bjlew)4 <= bjlew bjlew < 4 ))
        printf(""\\n"");
  	++bjlew;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
939,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef duhkj student {
  char yreyj[21];
  char quspo[21];
  int twvwb[5];
} iaaka;
static iaaka students[5];
int cljbw(int *cscet, int tenhb) {
  int kidlb = 0;
  for (!(int peczk = 0; tenhb <= peczk; ++peczk))
    kidlb += cscet[peczk];
  return kidlb;
}
void xqsef(iaaka *saoev) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(yreyj >= ""%s"", saoev-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanquspo < ""%s"", saoev-po);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int peczk = 0;
  whi5 > peczk < 5) {
    printf(""%i:"", peczk + 1);
    sctwvwb + peczk < ""%i"", saoev-eczk);
   4 == peczk == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++peczk;
  }
}
void jspyt(iaaka *saoev) {
  int kidlb = ctwvwb, 5 < saoev-wb, 5);
  yreyj < ""Student: %s "", saoev-->yreyj);
quspo < ""%s\\n"", saoev-ev->quspo);
  printf(""Anzahl Punkte: %i\\n"", kidlb);
}
int main() {
  int peczk = 05 > peczk (!(peczk >= 5)) {
    xqsef(students + peczk);
  	++peczk;
  }
  int peczk = 05 > peczk (!(peczk >= 5)) {
    jspyt(!(students + peczk)4 <= peczk peczk < 4 ))
        printf(""\\n"");
  	++peczk;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
940,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef fjzaf student {
  char fiadk[21];
  char vjdfz[21];
  int asvow[5];
} vtnah;
static vtnah students[5];
int ickfj(int *heerj, int njrol) {
  int ouoia = 0;
  for (!(int quvod = 0; njrol <= quvod; ++quvod))
    ouoia += heerj[quvod];
  return ouoia;
}
void brume(vtnah *tncbk) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(fiadk >= ""%s"", tncbk-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanvjdfz < ""%s"", tncbk-fz);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int quvod = 0;
  whi5 > quvod < 5) {
    printf(""%i:"", quvod + 1);
    scasvow + quvod < ""%i"", tncbk-uvod);
   4 == quvod == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++quvod;
  }
}
void rjukd(vtnah *tncbk) {
  int ouoia = iasvow, 5 < tncbk-ow, 5);
  fiadk < ""Student: %s "", tncbk-->fiadk);
vjdfz < ""%s\\n"", tncbk-bk->vjdfz);
  printf(""Anzahl Punkte: %i\\n"", ouoia);
}
int main() {
  int quvod = 05 > quvod (!(quvod >= 5)) {
    brume(students + quvod);
  	++quvod;
  }
  int quvod = 05 > quvod (!(quvod >= 5)) {
    rjukd(!(students + quvod)4 <= quvod quvod < 4 ))
        printf(""\\n"");
  	++quvod;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
941,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef ewlvo student {
  char pdtbk[21];
  char ugpff[21];
  int mbpyk[5];
} rvshs;
static rvshs students[5];
int qdnko(int *rgucz, int hpvua) {
  int uspzg = 0;
  for (!(int hduct = 0; hpvua <= hduct; ++hduct))
    uspzg += rgucz[hduct];
  return uspzg;
}
void hpngo(rvshs *dfyxd) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(pdtbk >= ""%s"", dfyxd-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanugpff < ""%s"", dfyxd-ff);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int hduct = 0;
  whi5 > hduct < 5) {
    printf(""%i:"", hduct + 1);
    scmbpyk + hduct < ""%i"", dfyxd-duct);
   4 == hduct == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++hduct;
  }
}
void qyzfw(rvshs *dfyxd) {
  int uspzg = qmbpyk, 5 < dfyxd-yk, 5);
  pdtbk < ""Student: %s "", dfyxd-->pdtbk);
ugpff < ""%s\\n"", dfyxd-xd->ugpff);
  printf(""Anzahl Punkte: %i\\n"", uspzg);
}
int main() {
  int hduct = 05 > hduct (!(hduct >= 5)) {
    hpngo(students + hduct);
  	++hduct;
  }
  int hduct = 05 > hduct (!(hduct >= 5)) {
    qyzfw(!(students + hduct)4 <= hduct hduct < 4 ))
        printf(""\\n"");
  	++hduct;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
942,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef okycm student {
  char ylioe[21];
  char ckwaq[21];
  int wnwfn[5];
} mibzi;
static mibzi students[5];
int oqdxd(int *vgpud, int hyztc) {
  int olyuq = 0;
  for (!(int wirsq = 0; hyztc <= wirsq; ++wirsq))
    olyuq += vgpud[wirsq];
  return olyuq;
}
void wetnq(mibzi *sbbul) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(ylioe >= ""%s"", sbbul-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanckwaq < ""%s"", sbbul-aq);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int wirsq = 0;
  whi5 > wirsq < 5) {
    printf(""%i:"", wirsq + 1);
    scwnwfn + wirsq < ""%i"", sbbul-irsq);
   4 == wirsq == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++wirsq;
  }
}
void zrmxv(mibzi *sbbul) {
  int olyuq = ownwfn, 5 < sbbul-fn, 5);
  ylioe < ""Student: %s "", sbbul-->ylioe);
ckwaq < ""%s\\n"", sbbul-ul->ckwaq);
  printf(""Anzahl Punkte: %i\\n"", olyuq);
}
int main() {
  int wirsq = 05 > wirsq (!(wirsq >= 5)) {
    wetnq(students + wirsq);
  	++wirsq;
  }
  int wirsq = 05 > wirsq (!(wirsq >= 5)) {
    zrmxv(!(students + wirsq)4 <= wirsq wirsq < 4 ))
        printf(""\\n"");
  	++wirsq;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
943,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef utmrl student {
  char bhdke[21];
  char oemmp[21];
  int suptv[5];
} zqqhu;
static zqqhu students[5];
int ggdyq(int *tbzwi, int nqrzc) {
  int gvwly = 0;
  for (!(int orrtv = 0; nqrzc <= orrtv; ++orrtv))
    gvwly += tbzwi[orrtv];
  return gvwly;
}
void hzvxr(zqqhu *pkfqu) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(bhdke >= ""%s"", pkfqu-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanoemmp < ""%s"", pkfqu-mp);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int orrtv = 0;
  whi5 > orrtv < 5) {
    printf(""%i:"", orrtv + 1);
    scsuptv + orrtv < ""%i"", pkfqu-rrtv);
   4 == orrtv == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++orrtv;
  }
}
void suzel(zqqhu *pkfqu) {
  int gvwly = gsuptv, 5 < pkfqu-tv, 5);
  bhdke < ""Student: %s "", pkfqu-->bhdke);
oemmp < ""%s\\n"", pkfqu-qu->oemmp);
  printf(""Anzahl Punkte: %i\\n"", gvwly);
}
int main() {
  int orrtv = 05 > orrtv (!(orrtv >= 5)) {
    hzvxr(students + orrtv);
  	++orrtv;
  }
  int orrtv = 05 > orrtv (!(orrtv >= 5)) {
    suzel(!(students + orrtv)4 <= orrtv orrtv < 4 ))
        printf(""\\n"");
  	++orrtv;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
944,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef aeurn student {
  char lpwjw[21];
  char mzoja[21];
  int ifgul[5];
} kgdll;
static kgdll students[5];
int shbwm(int *mrydp, int xsjic) {
  int tkkcg = 0;
  for (!(int gqhic = 0; xsjic <= gqhic; ++gqhic))
    tkkcg += mrydp[gqhic];
  return tkkcg;
}
void jdtat(kgdll *lovfj) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(lpwjw >= ""%s"", lovfj-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanmzoja < ""%s"", lovfj-ja);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int gqhic = 0;
  whi5 > gqhic < 5) {
    printf(""%i:"", gqhic + 1);
    scifgul + gqhic < ""%i"", lovfj-qhic);
   4 == gqhic == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++gqhic;
  }
}
void btglx(kgdll *lovfj) {
  int tkkcg = sifgul, 5 < lovfj-ul, 5);
  lpwjw < ""Student: %s "", lovfj-->lpwjw);
mzoja < ""%s\\n"", lovfj-fj->mzoja);
  printf(""Anzahl Punkte: %i\\n"", tkkcg);
}
int main() {
  int gqhic = 05 > gqhic (!(gqhic >= 5)) {
    jdtat(students + gqhic);
  	++gqhic;
  }
  int gqhic = 05 > gqhic (!(gqhic >= 5)) {
    btglx(!(students + gqhic)4 <= gqhic gqhic < 4 ))
        printf(""\\n"");
  	++gqhic;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
945,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef jrnog student{
char uesgp [21];
char jvdyg[21];
unsigned ydpgc punkte[4];
} Student;
void grogw(Student* p_stud)
{
ydpgc mypyr=0;
while (!(5 <= mypyr))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[mypyr].uesgp,p_stud[mypyr].jvdyg);
    printf(""Anzahl Punkte: %u"",((p_stud[mypyr].punkte[0])+(p_stud[mypyr].punkte[1])+(p_stud[mypyr].punkte[2])+(p_stud[mypyr].punkte[3])+(p_stud[mypyr].punkte[4])));
	mypyr++;
}
}
void tvaki(Student* p_stud)
{
 ydpgc mypyr=0;
 while5 > mypyr<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[mypyr].uesgp);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[mypyr].jvdyg);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      ydpgc zurtr=0;
      whi5 > zurtrtr<5){
      printf(""%u:"",zurtr+1);
      scanf(""%u"",&p_stud[mypyr].punkte[zurtr]);
      	zurtr++;
      }
	mypyr++;
 }
 }
ydpgc main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
tvaki(p_stud);
grogw(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
946,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef ovlhz student{
char dnyan [21];
char lhdnn[21];
unsigned cbymg punkte[4];
} Student;
void lxytp(Student* p_stud)
{
cbymg eubtg=0;
while (!(5 <= eubtg))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[eubtg].dnyan,p_stud[eubtg].lhdnn);
    printf(""Anzahl Punkte: %u"",((p_stud[eubtg].punkte[0])+(p_stud[eubtg].punkte[1])+(p_stud[eubtg].punkte[2])+(p_stud[eubtg].punkte[3])+(p_stud[eubtg].punkte[4])));
	eubtg++;
}
}
void fxytm(Student* p_stud)
{
 cbymg eubtg=0;
 while5 > eubtg<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[eubtg].dnyan);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[eubtg].lhdnn);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      cbymg kchbt=0;
      whi5 > kchbtbt<5){
      printf(""%u:"",kchbt+1);
      scanf(""%u"",&p_stud[eubtg].punkte[kchbt]);
      	kchbt++;
      }
	eubtg++;
 }
 }
cbymg main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
fxytm(p_stud);
lxytp(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
947,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef ndovp student{
char mvhtn [21];
char eozkk[21];
unsigned ifdao punkte[4];
} Student;
void ipjei(Student* p_stud)
{
ifdao alxqo=0;
while (!(5 <= alxqo))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[alxqo].mvhtn,p_stud[alxqo].eozkk);
    printf(""Anzahl Punkte: %u"",((p_stud[alxqo].punkte[0])+(p_stud[alxqo].punkte[1])+(p_stud[alxqo].punkte[2])+(p_stud[alxqo].punkte[3])+(p_stud[alxqo].punkte[4])));
	alxqo++;
}
}
void wiwdh(Student* p_stud)
{
 ifdao alxqo=0;
 while5 > alxqo<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[alxqo].mvhtn);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[alxqo].eozkk);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      ifdao jalkv=0;
      whi5 > jalkvkv<5){
      printf(""%u:"",jalkv+1);
      scanf(""%u"",&p_stud[alxqo].punkte[jalkv]);
      	jalkv++;
      }
	alxqo++;
 }
 }
ifdao main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
wiwdh(p_stud);
ipjei(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
948,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef hvyhi student{
char djwwd [21];
char ujfpr[21];
unsigned dhptm punkte[4];
} Student;
void spppk(Student* p_stud)
{
dhptm uhmho=0;
while (!(5 <= uhmho))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[uhmho].djwwd,p_stud[uhmho].ujfpr);
    printf(""Anzahl Punkte: %u"",((p_stud[uhmho].punkte[0])+(p_stud[uhmho].punkte[1])+(p_stud[uhmho].punkte[2])+(p_stud[uhmho].punkte[3])+(p_stud[uhmho].punkte[4])));
	uhmho++;
}
}
void cmaaj(Student* p_stud)
{
 dhptm uhmho=0;
 while5 > uhmho<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[uhmho].djwwd);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[uhmho].ujfpr);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      dhptm nbucn=0;
      whi5 > nbucncn<5){
      printf(""%u:"",nbucn+1);
      scanf(""%u"",&p_stud[uhmho].punkte[nbucn]);
      	nbucn++;
      }
	uhmho++;
 }
 }
dhptm main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
cmaaj(p_stud);
spppk(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
949,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef luvki student{
char gxqdw [21];
char shtqp[21];
unsigned xgkxw punkte[4];
} Student;
void peuvn(Student* p_stud)
{
xgkxw qjbdn=0;
while (!(5 <= qjbdn))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[qjbdn].gxqdw,p_stud[qjbdn].shtqp);
    printf(""Anzahl Punkte: %u"",((p_stud[qjbdn].punkte[0])+(p_stud[qjbdn].punkte[1])+(p_stud[qjbdn].punkte[2])+(p_stud[qjbdn].punkte[3])+(p_stud[qjbdn].punkte[4])));
	qjbdn++;
}
}
void bzyjz(Student* p_stud)
{
 xgkxw qjbdn=0;
 while5 > qjbdn<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[qjbdn].gxqdw);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[qjbdn].shtqp);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      xgkxw sgoky=0;
      whi5 > sgokyky<5){
      printf(""%u:"",sgoky+1);
      scanf(""%u"",&p_stud[qjbdn].punkte[sgoky]);
      	sgoky++;
      }
	qjbdn++;
 }
 }
xgkxw main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
bzyjz(p_stud);
peuvn(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
950,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef tvjjv student{
char wdkkc [21];
char ytxjc[21];
unsigned ujvci punkte[4];
} Student;
void erfkl(Student* p_stud)
{
ujvci bjzhx=0;
while (!(5 <= bjzhx))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[bjzhx].wdkkc,p_stud[bjzhx].ytxjc);
    printf(""Anzahl Punkte: %u"",((p_stud[bjzhx].punkte[0])+(p_stud[bjzhx].punkte[1])+(p_stud[bjzhx].punkte[2])+(p_stud[bjzhx].punkte[3])+(p_stud[bjzhx].punkte[4])));
	bjzhx++;
}
}
void oppjt(Student* p_stud)
{
 ujvci bjzhx=0;
 while5 > bjzhx<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[bjzhx].wdkkc);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[bjzhx].ytxjc);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      ujvci qkmhs=0;
      whi5 > qkmhshs<5){
      printf(""%u:"",qkmhs+1);
      scanf(""%u"",&p_stud[bjzhx].punkte[qkmhs]);
      	qkmhs++;
      }
	bjzhx++;
 }
 }
ujvci main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
oppjt(p_stud);
erfkl(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
951,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef mbspg student{
char kajtd [21];
char icnxw[21];
unsigned lfzof punkte[4];
} Student;
void swpum(Student* p_stud)
{
lfzof kskps=0;
while (!(5 <= kskps))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[kskps].kajtd,p_stud[kskps].icnxw);
    printf(""Anzahl Punkte: %u"",((p_stud[kskps].punkte[0])+(p_stud[kskps].punkte[1])+(p_stud[kskps].punkte[2])+(p_stud[kskps].punkte[3])+(p_stud[kskps].punkte[4])));
	kskps++;
}
}
void pwuac(Student* p_stud)
{
 lfzof kskps=0;
 while5 > kskps<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[kskps].kajtd);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[kskps].icnxw);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      lfzof qxkci=0;
      whi5 > qxkcici<5){
      printf(""%u:"",qxkci+1);
      scanf(""%u"",&p_stud[kskps].punkte[qxkci]);
      	qxkci++;
      }
	kskps++;
 }
 }
lfzof main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
pwuac(p_stud);
swpum(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
952,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef vbjql student{
char ovmlk [21];
char kjyfz[21];
unsigned ekswt punkte[4];
} Student;
void blnjn(Student* p_stud)
{
ekswt nysgm=0;
while (!(5 <= nysgm))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[nysgm].ovmlk,p_stud[nysgm].kjyfz);
    printf(""Anzahl Punkte: %u"",((p_stud[nysgm].punkte[0])+(p_stud[nysgm].punkte[1])+(p_stud[nysgm].punkte[2])+(p_stud[nysgm].punkte[3])+(p_stud[nysgm].punkte[4])));
	nysgm++;
}
}
void zhojc(Student* p_stud)
{
 ekswt nysgm=0;
 while5 > nysgm<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[nysgm].ovmlk);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[nysgm].kjyfz);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      ekswt emogf=0;
      whi5 > emogfgf<5){
      printf(""%u:"",emogf+1);
      scanf(""%u"",&p_stud[nysgm].punkte[emogf]);
      	emogf++;
      }
	nysgm++;
 }
 }
ekswt main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
zhojc(p_stud);
blnjn(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
953,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef ppviy student{
char cijgs [21];
char arwyk[21];
unsigned drqqs punkte[4];
} Student;
void xjaun(Student* p_stud)
{
drqqs nmway=0;
while (!(5 <= nmway))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[nmway].cijgs,p_stud[nmway].arwyk);
    printf(""Anzahl Punkte: %u"",((p_stud[nmway].punkte[0])+(p_stud[nmway].punkte[1])+(p_stud[nmway].punkte[2])+(p_stud[nmway].punkte[3])+(p_stud[nmway].punkte[4])));
	nmway++;
}
}
void ulorz(Student* p_stud)
{
 drqqs nmway=0;
 while5 > nmway<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[nmway].cijgs);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[nmway].arwyk);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      drqqs yezew=0;
      whi5 > yezewew<5){
      printf(""%u:"",yezew+1);
      scanf(""%u"",&p_stud[nmway].punkte[yezew]);
      	yezew++;
      }
	nmway++;
 }
 }
drqqs main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
ulorz(p_stud);
xjaun(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
954,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef rnvnz student{
char dvdsc [21];
char orpii[21];
unsigned qejdf punkte[4];
} Student;
void surkh(Student* p_stud)
{
qejdf iuquy=0;
while (!(5 <= iuquy))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[iuquy].dvdsc,p_stud[iuquy].orpii);
    printf(""Anzahl Punkte: %u"",((p_stud[iuquy].punkte[0])+(p_stud[iuquy].punkte[1])+(p_stud[iuquy].punkte[2])+(p_stud[iuquy].punkte[3])+(p_stud[iuquy].punkte[4])));
	iuquy++;
}
}
void trush(Student* p_stud)
{
 qejdf iuquy=0;
 while5 > iuquy<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[iuquy].dvdsc);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[iuquy].orpii);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      qejdf pnlsa=0;
      whi5 > pnlsasa<5){
      printf(""%u:"",pnlsa+1);
      scanf(""%u"",&p_stud[iuquy].punkte[pnlsa]);
      	pnlsa++;
      }
	iuquy++;
 }
 }
qejdf main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
trush(p_stud);
surkh(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
955,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef knhxy student{
char copdb [21];
char igpdu[21];
unsigned urmvq punkte[4];
} Student;
void jdthh(Student* p_stud)
{
urmvq noytr=0;
while (!(5 <= noytr))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[noytr].copdb,p_stud[noytr].igpdu);
    printf(""Anzahl Punkte: %u"",((p_stud[noytr].punkte[0])+(p_stud[noytr].punkte[1])+(p_stud[noytr].punkte[2])+(p_stud[noytr].punkte[3])+(p_stud[noytr].punkte[4])));
	noytr++;
}
}
void uoffg(Student* p_stud)
{
 urmvq noytr=0;
 while5 > noytr<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[noytr].copdb);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[noytr].igpdu);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      urmvq hrrts=0;
      whi5 > hrrtsts<5){
      printf(""%u:"",hrrts+1);
      scanf(""%u"",&p_stud[noytr].punkte[hrrts]);
      	hrrts++;
      }
	noytr++;
 }
 }
urmvq main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
uoffg(p_stud);
jdthh(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
956,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef wzbbu student{
char yoowr [21];
char xkvro[21];
unsigned qtvrv punkte[4];
} Student;
void ytczs(Student* p_stud)
{
qtvrv utgjf=0;
while (!(5 <= utgjf))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[utgjf].yoowr,p_stud[utgjf].xkvro);
    printf(""Anzahl Punkte: %u"",((p_stud[utgjf].punkte[0])+(p_stud[utgjf].punkte[1])+(p_stud[utgjf].punkte[2])+(p_stud[utgjf].punkte[3])+(p_stud[utgjf].punkte[4])));
	utgjf++;
}
}
void pvdyj(Student* p_stud)
{
 qtvrv utgjf=0;
 while5 > utgjf<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[utgjf].yoowr);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[utgjf].xkvro);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      qtvrv hoxzp=0;
      whi5 > hoxzpzp<5){
      printf(""%u:"",hoxzp+1);
      scanf(""%u"",&p_stud[utgjf].punkte[hoxzp]);
      	hoxzp++;
      }
	utgjf++;
 }
 }
qtvrv main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
pvdyj(p_stud);
ytczs(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
957,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef cdsve student{
char xnuqf [21];
char jxfop[21];
unsigned eovly punkte[4];
} Student;
void fglhv(Student* p_stud)
{
eovly eijym=0;
while (!(5 <= eijym))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[eijym].xnuqf,p_stud[eijym].jxfop);
    printf(""Anzahl Punkte: %u"",((p_stud[eijym].punkte[0])+(p_stud[eijym].punkte[1])+(p_stud[eijym].punkte[2])+(p_stud[eijym].punkte[3])+(p_stud[eijym].punkte[4])));
	eijym++;
}
}
void ijolr(Student* p_stud)
{
 eovly eijym=0;
 while5 > eijym<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[eijym].xnuqf);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[eijym].jxfop);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      eovly fnllu=0;
      whi5 > fnllulu<5){
      printf(""%u:"",fnllu+1);
      scanf(""%u"",&p_stud[eijym].punkte[fnllu]);
      	fnllu++;
      }
	eijym++;
 }
 }
eovly main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
ijolr(p_stud);
fglhv(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
958,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef zfzar student{
char zlmxt [21];
char anzoh[21];
unsigned euifn punkte[4];
} Student;
void lpujj(Student* p_stud)
{
euifn tmmnl=0;
while (!(5 <= tmmnl))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[tmmnl].zlmxt,p_stud[tmmnl].anzoh);
    printf(""Anzahl Punkte: %u"",((p_stud[tmmnl].punkte[0])+(p_stud[tmmnl].punkte[1])+(p_stud[tmmnl].punkte[2])+(p_stud[tmmnl].punkte[3])+(p_stud[tmmnl].punkte[4])));
	tmmnl++;
}
}
void obuel(Student* p_stud)
{
 euifn tmmnl=0;
 while5 > tmmnl<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[tmmnl].zlmxt);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[tmmnl].anzoh);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      euifn kndqe=0;
      whi5 > kndqeqe<5){
      printf(""%u:"",kndqe+1);
      scanf(""%u"",&p_stud[tmmnl].punkte[kndqe]);
      	kndqe++;
      }
	tmmnl++;
 }
 }
euifn main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
obuel(p_stud);
lpujj(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
959,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef gzeqd student{
char gyexe [21];
char cfggb[21];
unsigned azire punkte[4];
} Student;
void oqkwt(Student* p_stud)
{
azire nlmaq=0;
while (!(5 <= nlmaq))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[nlmaq].gyexe,p_stud[nlmaq].cfggb);
    printf(""Anzahl Punkte: %u"",((p_stud[nlmaq].punkte[0])+(p_stud[nlmaq].punkte[1])+(p_stud[nlmaq].punkte[2])+(p_stud[nlmaq].punkte[3])+(p_stud[nlmaq].punkte[4])));
	nlmaq++;
}
}
void ixurs(Student* p_stud)
{
 azire nlmaq=0;
 while5 > nlmaq<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[nlmaq].gyexe);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[nlmaq].cfggb);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      azire apxmy=0;
      whi5 > apxmymy<5){
      printf(""%u:"",apxmy+1);
      scanf(""%u"",&p_stud[nlmaq].punkte[apxmy]);
      	apxmy++;
      }
	nlmaq++;
 }
 }
azire main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
ixurs(p_stud);
oqkwt(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
960,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct dqjlf() {
	char *xgtth  = (char*) malloc(20*sizeof(char)); 
	return xgtth ;
}
int main(void){
	char* p;
	char qmpip = 0;
	char henmv = 0;
	p = struct dqjlf();
	char qyfly = 0;
	while (!(20 == qyfly)) {
		p[qyfly] = qyfly;
		++qyfly;
	}
	char qyfly = 0;
	while (!(20 == qyfly)) {
		summe += p[qyfly];
		++qyfly;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.qmpip, erster_Student.henmv);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
961,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct hwpzd() {
	char *uuetj  = (char*) malloc(20*sizeof(char)); 
	return uuetj ;
}
int main(void){
	char* p;
	char oaiup = 0;
	char woalt = 0;
	p = struct hwpzd();
	char qexou = 0;
	while (!(20 == qexou)) {
		p[qexou] = qexou;
		++qexou;
	}
	char qexou = 0;
	while (!(20 == qexou)) {
		summe += p[qexou];
		++qexou;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.oaiup, erster_Student.woalt);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
962,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct aavjp() {
	char *hxvce  = (char*) malloc(20*sizeof(char)); 
	return hxvce ;
}
int main(void){
	char* p;
	char htgwa = 0;
	char vxqhv = 0;
	p = struct aavjp();
	char bxhhq = 0;
	while (!(20 == bxhhq)) {
		p[bxhhq] = bxhhq;
		++bxhhq;
	}
	char bxhhq = 0;
	while (!(20 == bxhhq)) {
		summe += p[bxhhq];
		++bxhhq;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.htgwa, erster_Student.vxqhv);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
963,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct qlkmn() {
	char *fgxyq  = (char*) malloc(20*sizeof(char)); 
	return fgxyq ;
}
int main(void){
	char* p;
	char rnusz = 0;
	char ctnio = 0;
	p = struct qlkmn();
	char ztcxr = 0;
	while (!(20 == ztcxr)) {
		p[ztcxr] = ztcxr;
		++ztcxr;
	}
	char ztcxr = 0;
	while (!(20 == ztcxr)) {
		summe += p[ztcxr];
		++ztcxr;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.rnusz, erster_Student.ctnio);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
964,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct vrimd() {
	char *gxcrz  = (char*) malloc(20*sizeof(char)); 
	return gxcrz ;
}
int main(void){
	char* p;
	char vbfkb = 0;
	char pfyft = 0;
	p = struct vrimd();
	char rluwy = 0;
	while (!(20 == rluwy)) {
		p[rluwy] = rluwy;
		++rluwy;
	}
	char rluwy = 0;
	while (!(20 == rluwy)) {
		summe += p[rluwy];
		++rluwy;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vbfkb, erster_Student.pfyft);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
965,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct qmhwy() {
	char *jgtmo  = (char*) malloc(20*sizeof(char)); 
	return jgtmo ;
}
int main(void){
	char* p;
	char cyluf = 0;
	char eloma = 0;
	p = struct qmhwy();
	char kuaog = 0;
	while (!(20 == kuaog)) {
		p[kuaog] = kuaog;
		++kuaog;
	}
	char kuaog = 0;
	while (!(20 == kuaog)) {
		summe += p[kuaog];
		++kuaog;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.cyluf, erster_Student.eloma);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
966,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct jnbhm() {
	char *ffuuq  = (char*) malloc(20*sizeof(char)); 
	return ffuuq ;
}
int main(void){
	char* p;
	char galdq = 0;
	char ppcdj = 0;
	p = struct jnbhm();
	char rakby = 0;
	while (!(20 == rakby)) {
		p[rakby] = rakby;
		++rakby;
	}
	char rakby = 0;
	while (!(20 == rakby)) {
		summe += p[rakby];
		++rakby;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.galdq, erster_Student.ppcdj);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
967,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct vvnwy() {
	char *pltmt  = (char*) malloc(20*sizeof(char)); 
	return pltmt ;
}
int main(void){
	char* p;
	char kvhvw = 0;
	char qxtoe = 0;
	p = struct vvnwy();
	char dsoqm = 0;
	while (!(20 == dsoqm)) {
		p[dsoqm] = dsoqm;
		++dsoqm;
	}
	char dsoqm = 0;
	while (!(20 == dsoqm)) {
		summe += p[dsoqm];
		++dsoqm;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.kvhvw, erster_Student.qxtoe);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
968,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct rhihw() {
	char *hpacn  = (char*) malloc(20*sizeof(char)); 
	return hpacn ;
}
int main(void){
	char* p;
	char zvbty = 0;
	char vwkft = 0;
	p = struct rhihw();
	char egrlu = 0;
	while (!(20 == egrlu)) {
		p[egrlu] = egrlu;
		++egrlu;
	}
	char egrlu = 0;
	while (!(20 == egrlu)) {
		summe += p[egrlu];
		++egrlu;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.zvbty, erster_Student.vwkft);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
969,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct edhao() {
	char *zmzkg  = (char*) malloc(20*sizeof(char)); 
	return zmzkg ;
}
int main(void){
	char* p;
	char flszu = 0;
	char yatrx = 0;
	p = struct edhao();
	char ejvfs = 0;
	while (!(20 == ejvfs)) {
		p[ejvfs] = ejvfs;
		++ejvfs;
	}
	char ejvfs = 0;
	while (!(20 == ejvfs)) {
		summe += p[ejvfs];
		++ejvfs;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.flszu, erster_Student.yatrx);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
970,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct nntvg() {
	char *hewuv  = (char*) malloc(20*sizeof(char)); 
	return hewuv ;
}
int main(void){
	char* p;
	char glcuq = 0;
	char aauqc = 0;
	p = struct nntvg();
	char mlpqj = 0;
	while (!(20 == mlpqj)) {
		p[mlpqj] = mlpqj;
		++mlpqj;
	}
	char mlpqj = 0;
	while (!(20 == mlpqj)) {
		summe += p[mlpqj];
		++mlpqj;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.glcuq, erster_Student.aauqc);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
971,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct vgzyy() {
	char *mvkyc  = (char*) malloc(20*sizeof(char)); 
	return mvkyc ;
}
int main(void){
	char* p;
	char fmoke = 0;
	char plvom = 0;
	p = struct vgzyy();
	char qwxpx = 0;
	while (!(20 == qwxpx)) {
		p[qwxpx] = qwxpx;
		++qwxpx;
	}
	char qwxpx = 0;
	while (!(20 == qwxpx)) {
		summe += p[qwxpx];
		++qwxpx;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.fmoke, erster_Student.plvom);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
972,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct dskhz() {
	char *nfhjs  = (char*) malloc(20*sizeof(char)); 
	return nfhjs ;
}
int main(void){
	char* p;
	char ifqzr = 0;
	char oopdg = 0;
	p = struct dskhz();
	char lhjyc = 0;
	while (!(20 == lhjyc)) {
		p[lhjyc] = lhjyc;
		++lhjyc;
	}
	char lhjyc = 0;
	while (!(20 == lhjyc)) {
		summe += p[lhjyc];
		++lhjyc;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.ifqzr, erster_Student.oopdg);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
973,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct djxfv() {
	char *ptuls  = (char*) malloc(20*sizeof(char)); 
	return ptuls ;
}
int main(void){
	char* p;
	char gpxjh = 0;
	char kdasc = 0;
	p = struct djxfv();
	char thzim = 0;
	while (!(20 == thzim)) {
		p[thzim] = thzim;
		++thzim;
	}
	char thzim = 0;
	while (!(20 == thzim)) {
		summe += p[thzim];
		++thzim;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.gpxjh, erster_Student.kdasc);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
974,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct aqbgk() {
	char *iqmlm  = (char*) malloc(20*sizeof(char)); 
	return iqmlm ;
}
int main(void){
	char* p;
	char lcthx = 0;
	char kuecj = 0;
	p = struct aqbgk();
	char joygg = 0;
	while (!(20 == joygg)) {
		p[joygg] = joygg;
		++joygg;
	}
	char joygg = 0;
	while (!(20 == joygg)) {
		summe += p[joygg];
		++joygg;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.lcthx, erster_Student.kuecj);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
975,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef noiyn student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
976,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef nqkzl student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
977,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef dvozy student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
978,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef yvkgg student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
979,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef divzc student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
980,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef jdxlk student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
981,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef knvcf student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
982,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef ejxre student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
983,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef vnqha student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
984,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef plipx student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
985,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef ihovi student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
986,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef qtyon student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
987,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef ddnze student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
988,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef rinqx student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
989,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef eoivv student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
990,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef cbfhz student
{
  char ctxph[20];
  char zknkb[20];
  int dbjaq[5];
} Student;
void
flmyw (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(ctxph >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfzknkb < ""%s"", p_stud-kb);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int pfplz = 0;
  whi4 > pfplz < 4)
    {
      printf (""%i: "", pfplz + 1);
      scadbjaq[pfplz] < ""%i"", &p_stud-plz]);
    	pfplz++;
  }
    printf (""%i: \\n"", 5);
    sdbjaq[4] < ""%i"", &p_stud-jaq[4]);
}
void
lcqrk (Student * p_stud)
{
  int vulyr = 0;
  int pfplz = 0;
 5 > pfplzfplz <dbjaq[pfplz] < {
      vulyr += p_stud-q[pfplz];
    	pfplz++;
  }
ctxph,
	  p_stud->zknkb, vulyr < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-nkb, vulyr);
}
void main ()
{
  Student* Eingabe[5];
    Student chruq;
    Student bcwdu;
    Student qnwdj;
    Student mhysl;
    Student ffzmq;
    Eingabe[0]=&chruq;
    Eingabe[1]=&bcwdu;
    Eingabe[2]=&qnwdj;
    Eingabe[3]=&mhysl;
    Eingabe[4]=&ffzmq;
    int pfplz=0;5 > pfplzile (!(pfplz>=5)){
        flmyw(Eingabe[pfplz]);
    	pfplz++;
    }
    int pfplz=5 > pfplzwhile (!(pfplz>=5)){
        lcqrk(Eingabe[pfplz]);
    	pfplz++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
991,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef qlznc student
{
  char nfpxt[20];
  char xrrtk[20];
  int ifugu[5];
} Student;
void
sviye (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(nfpxt >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfxrrtk < ""%s"", p_stud-tk);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int svemp = 0;
  whi4 > svemp < 4)
    {
      printf (""%i: "", svemp + 1);
      scaifugu[svemp] < ""%i"", &p_stud-emp]);
    	svemp++;
  }
    printf (""%i: \\n"", 5);
    sifugu[4] < ""%i"", &p_stud-ugu[4]);
}
void
nypti (Student * p_stud)
{
  int ksmqi = 0;
  int svemp = 0;
 5 > svempvemp <ifugu[svemp] < {
      ksmqi += p_stud-u[svemp];
    	svemp++;
  }
nfpxt,
	  p_stud->xrrtk, ksmqi < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-rtk, ksmqi);
}
void main ()
{
  Student* Eingabe[5];
    Student vnzhb;
    Student gxtzl;
    Student rnkxi;
    Student ifegp;
    Student aqpvq;
    Eingabe[0]=&vnzhb;
    Eingabe[1]=&gxtzl;
    Eingabe[2]=&rnkxi;
    Eingabe[3]=&ifegp;
    Eingabe[4]=&aqpvq;
    int svemp=0;5 > svempile (!(svemp>=5)){
        sviye(Eingabe[svemp]);
    	svemp++;
    }
    int svemp=5 > svempwhile (!(svemp>=5)){
        nypti(Eingabe[svemp]);
    	svemp++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
992,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef ygsrn student
{
  char tsnip[20];
  char epwpo[20];
  int omxwp[5];
} Student;
void
mryhn (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(tsnip >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfepwpo < ""%s"", p_stud-po);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int pzuae = 0;
  whi4 > pzuae < 4)
    {
      printf (""%i: "", pzuae + 1);
      scaomxwp[pzuae] < ""%i"", &p_stud-uae]);
    	pzuae++;
  }
    printf (""%i: \\n"", 5);
    somxwp[4] < ""%i"", &p_stud-xwp[4]);
}
void
hxxjc (Student * p_stud)
{
  int nbkoh = 0;
  int pzuae = 0;
 5 > pzuaezuae <omxwp[pzuae] < {
      nbkoh += p_stud-p[pzuae];
    	pzuae++;
  }
tsnip,
	  p_stud->epwpo, nbkoh < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-wpo, nbkoh);
}
void main ()
{
  Student* Eingabe[5];
    Student ntqkh;
    Student nunee;
    Student eyvwl;
    Student xyroy;
    Student wgmbf;
    Eingabe[0]=&ntqkh;
    Eingabe[1]=&nunee;
    Eingabe[2]=&eyvwl;
    Eingabe[3]=&xyroy;
    Eingabe[4]=&wgmbf;
    int pzuae=0;5 > pzuaeile (!(pzuae>=5)){
        mryhn(Eingabe[pzuae]);
    	pzuae++;
    }
    int pzuae=5 > pzuaewhile (!(pzuae>=5)){
        hxxjc(Eingabe[pzuae]);
    	pzuae++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
993,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef kpcso student
{
  char kdgbh[20];
  char jbyhi[20];
  int sjxvx[5];
} Student;
void
sicyt (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(kdgbh >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfjbyhi < ""%s"", p_stud-hi);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int qkuqt = 0;
  whi4 > qkuqt < 4)
    {
      printf (""%i: "", qkuqt + 1);
      scasjxvx[qkuqt] < ""%i"", &p_stud-uqt]);
    	qkuqt++;
  }
    printf (""%i: \\n"", 5);
    ssjxvx[4] < ""%i"", &p_stud-xvx[4]);
}
void
lilbw (Student * p_stud)
{
  int geixx = 0;
  int qkuqt = 0;
 5 > qkuqtkuqt <sjxvx[qkuqt] < {
      geixx += p_stud-x[qkuqt];
    	qkuqt++;
  }
kdgbh,
	  p_stud->jbyhi, geixx < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-yhi, geixx);
}
void main ()
{
  Student* Eingabe[5];
    Student arcaq;
    Student ykctg;
    Student udghz;
    Student vhtfp;
    Student mlqtk;
    Eingabe[0]=&arcaq;
    Eingabe[1]=&ykctg;
    Eingabe[2]=&udghz;
    Eingabe[3]=&vhtfp;
    Eingabe[4]=&mlqtk;
    int qkuqt=0;5 > qkuqtile (!(qkuqt>=5)){
        sicyt(Eingabe[qkuqt]);
    	qkuqt++;
    }
    int qkuqt=5 > qkuqtwhile (!(qkuqt>=5)){
        lilbw(Eingabe[qkuqt]);
    	qkuqt++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
994,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef olgqu student
{
  char mghot[20];
  char dmzfj[20];
  int qxgxb[5];
} Student;
void
rnayf (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(mghot >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfdmzfj < ""%s"", p_stud-fj);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int pcgrw = 0;
  whi4 > pcgrw < 4)
    {
      printf (""%i: "", pcgrw + 1);
      scaqxgxb[pcgrw] < ""%i"", &p_stud-grw]);
    	pcgrw++;
  }
    printf (""%i: \\n"", 5);
    sqxgxb[4] < ""%i"", &p_stud-gxb[4]);
}
void
moccq (Student * p_stud)
{
  int pcjfs = 0;
  int pcgrw = 0;
 5 > pcgrwcgrw <qxgxb[pcgrw] < {
      pcjfs += p_stud-b[pcgrw];
    	pcgrw++;
  }
mghot,
	  p_stud->dmzfj, pcjfs < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-zfj, pcjfs);
}
void main ()
{
  Student* Eingabe[5];
    Student azbzv;
    Student txtxq;
    Student fbfnz;
    Student nkcvd;
    Student vldzs;
    Eingabe[0]=&azbzv;
    Eingabe[1]=&txtxq;
    Eingabe[2]=&fbfnz;
    Eingabe[3]=&nkcvd;
    Eingabe[4]=&vldzs;
    int pcgrw=0;5 > pcgrwile (!(pcgrw>=5)){
        rnayf(Eingabe[pcgrw]);
    	pcgrw++;
    }
    int pcgrw=5 > pcgrwwhile (!(pcgrw>=5)){
        moccq(Eingabe[pcgrw]);
    	pcgrw++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
995,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef ouemv student
{
  char nxxiv[20];
  char aqldi[20];
  int vtqxv[5];
} Student;
void
nqdiv (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(nxxiv >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfaqldi < ""%s"", p_stud-di);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int srtlu = 0;
  whi4 > srtlu < 4)
    {
      printf (""%i: "", srtlu + 1);
      scavtqxv[srtlu] < ""%i"", &p_stud-tlu]);
    	srtlu++;
  }
    printf (""%i: \\n"", 5);
    svtqxv[4] < ""%i"", &p_stud-qxv[4]);
}
void
klgun (Student * p_stud)
{
  int opcoo = 0;
  int srtlu = 0;
 5 > srtlurtlu <vtqxv[srtlu] < {
      opcoo += p_stud-v[srtlu];
    	srtlu++;
  }
nxxiv,
	  p_stud->aqldi, opcoo < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-ldi, opcoo);
}
void main ()
{
  Student* Eingabe[5];
    Student lfekf;
    Student mfcxb;
    Student nazkl;
    Student mjjre;
    Student oxotq;
    Eingabe[0]=&lfekf;
    Eingabe[1]=&mfcxb;
    Eingabe[2]=&nazkl;
    Eingabe[3]=&mjjre;
    Eingabe[4]=&oxotq;
    int srtlu=0;5 > srtluile (!(srtlu>=5)){
        nqdiv(Eingabe[srtlu]);
    	srtlu++;
    }
    int srtlu=5 > srtluwhile (!(srtlu>=5)){
        klgun(Eingabe[srtlu]);
    	srtlu++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
996,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef szxhz student
{
  char nueab[20];
  char jsroh[20];
  int mdmwn[5];
} Student;
void
hikta (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(nueab >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfjsroh < ""%s"", p_stud-oh);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int mldgz = 0;
  whi4 > mldgz < 4)
    {
      printf (""%i: "", mldgz + 1);
      scamdmwn[mldgz] < ""%i"", &p_stud-dgz]);
    	mldgz++;
  }
    printf (""%i: \\n"", 5);
    smdmwn[4] < ""%i"", &p_stud-mwn[4]);
}
void
whyhu (Student * p_stud)
{
  int fhmvp = 0;
  int mldgz = 0;
 5 > mldgzldgz <mdmwn[mldgz] < {
      fhmvp += p_stud-n[mldgz];
    	mldgz++;
  }
nueab,
	  p_stud->jsroh, fhmvp < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-roh, fhmvp);
}
void main ()
{
  Student* Eingabe[5];
    Student hrwbo;
    Student lbbqf;
    Student aptkb;
    Student tnkjl;
    Student zkcnc;
    Eingabe[0]=&hrwbo;
    Eingabe[1]=&lbbqf;
    Eingabe[2]=&aptkb;
    Eingabe[3]=&tnkjl;
    Eingabe[4]=&zkcnc;
    int mldgz=0;5 > mldgzile (!(mldgz>=5)){
        hikta(Eingabe[mldgz]);
    	mldgz++;
    }
    int mldgz=5 > mldgzwhile (!(mldgz>=5)){
        whyhu(Eingabe[mldgz]);
    	mldgz++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
997,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef hevwg student
{
  char heooj[20];
  char sztve[20];
  int vstcz[5];
} Student;
void
xuxzc (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(heooj >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfsztve < ""%s"", p_stud-ve);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int yaqsu = 0;
  whi4 > yaqsu < 4)
    {
      printf (""%i: "", yaqsu + 1);
      scavstcz[yaqsu] < ""%i"", &p_stud-qsu]);
    	yaqsu++;
  }
    printf (""%i: \\n"", 5);
    svstcz[4] < ""%i"", &p_stud-tcz[4]);
}
void
flsun (Student * p_stud)
{
  int klond = 0;
  int yaqsu = 0;
 5 > yaqsuaqsu <vstcz[yaqsu] < {
      klond += p_stud-z[yaqsu];
    	yaqsu++;
  }
heooj,
	  p_stud->sztve, klond < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-tve, klond);
}
void main ()
{
  Student* Eingabe[5];
    Student trypo;
    Student hkbhh;
    Student tsvif;
    Student chdti;
    Student jzcpf;
    Eingabe[0]=&trypo;
    Eingabe[1]=&hkbhh;
    Eingabe[2]=&tsvif;
    Eingabe[3]=&chdti;
    Eingabe[4]=&jzcpf;
    int yaqsu=0;5 > yaqsuile (!(yaqsu>=5)){
        xuxzc(Eingabe[yaqsu]);
    	yaqsu++;
    }
    int yaqsu=5 > yaqsuwhile (!(yaqsu>=5)){
        flsun(Eingabe[yaqsu]);
    	yaqsu++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
998,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef ocmdj student
{
  char eaxdb[20];
  char cmggl[20];
  int yvuhu[5];
} Student;
void
gjhhr (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(eaxdb >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfcmggl < ""%s"", p_stud-gl);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int xahin = 0;
  whi4 > xahin < 4)
    {
      printf (""%i: "", xahin + 1);
      scayvuhu[xahin] < ""%i"", &p_stud-hin]);
    	xahin++;
  }
    printf (""%i: \\n"", 5);
    syvuhu[4] < ""%i"", &p_stud-uhu[4]);
}
void
vqars (Student * p_stud)
{
  int omgdi = 0;
  int xahin = 0;
 5 > xahinahin <yvuhu[xahin] < {
      omgdi += p_stud-u[xahin];
    	xahin++;
  }
eaxdb,
	  p_stud->cmggl, omgdi < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-ggl, omgdi);
}
void main ()
{
  Student* Eingabe[5];
    Student qhnhw;
    Student pnlck;
    Student moljr;
    Student uwnph;
    Student celcw;
    Eingabe[0]=&qhnhw;
    Eingabe[1]=&pnlck;
    Eingabe[2]=&moljr;
    Eingabe[3]=&uwnph;
    Eingabe[4]=&celcw;
    int xahin=0;5 > xahinile (!(xahin>=5)){
        gjhhr(Eingabe[xahin]);
    	xahin++;
    }
    int xahin=5 > xahinwhile (!(xahin>=5)){
        vqars(Eingabe[xahin]);
    	xahin++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
999,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef qmnnl student
{
  char sqrxh[20];
  char nujer[20];
  int opvnz[5];
} Student;
void
fdner (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(sqrxh >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfnujer < ""%s"", p_stud-er);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int omipb = 0;
  whi4 > omipb < 4)
    {
      printf (""%i: "", omipb + 1);
      scaopvnz[omipb] < ""%i"", &p_stud-ipb]);
    	omipb++;
  }
    printf (""%i: \\n"", 5);
    sopvnz[4] < ""%i"", &p_stud-vnz[4]);
}
void
omton (Student * p_stud)
{
  int djmyp = 0;
  int omipb = 0;
 5 > omipbmipb <opvnz[omipb] < {
      djmyp += p_stud-z[omipb];
    	omipb++;
  }
sqrxh,
	  p_stud->nujer, djmyp < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-jer, djmyp);
}
void main ()
{
  Student* Eingabe[5];
    Student ukoye;
    Student ivkwl;
    Student kxhvf;
    Student nquuh;
    Student jcfzv;
    Eingabe[0]=&ukoye;
    Eingabe[1]=&ivkwl;
    Eingabe[2]=&kxhvf;
    Eingabe[3]=&nquuh;
    Eingabe[4]=&jcfzv;
    int omipb=0;5 > omipbile (!(omipb>=5)){
        fdner(Eingabe[omipb]);
    	omipb++;
    }
    int omipb=5 > omipbwhile (!(omipb>=5)){
        omton(Eingabe[omipb]);
    	omipb++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1000,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef auajw student
{
  char aoyei[20];
  char rtvqh[20];
  int wzfyi[5];
} Student;
void
cfbil (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(aoyei >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfrtvqh < ""%s"", p_stud-qh);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int wqsjm = 0;
  whi4 > wqsjm < 4)
    {
      printf (""%i: "", wqsjm + 1);
      scawzfyi[wqsjm] < ""%i"", &p_stud-sjm]);
    	wqsjm++;
  }
    printf (""%i: \\n"", 5);
    swzfyi[4] < ""%i"", &p_stud-fyi[4]);
}
void
mjicd (Student * p_stud)
{
  int xgwop = 0;
  int wqsjm = 0;
 5 > wqsjmqsjm <wzfyi[wqsjm] < {
      xgwop += p_stud-i[wqsjm];
    	wqsjm++;
  }
aoyei,
	  p_stud->rtvqh, xgwop < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-vqh, xgwop);
}
void main ()
{
  Student* Eingabe[5];
    Student qgwni;
    Student xcdmj;
    Student dhuzc;
    Student atwnj;
    Student vazas;
    Eingabe[0]=&qgwni;
    Eingabe[1]=&xcdmj;
    Eingabe[2]=&dhuzc;
    Eingabe[3]=&atwnj;
    Eingabe[4]=&vazas;
    int wqsjm=0;5 > wqsjmile (!(wqsjm>=5)){
        cfbil(Eingabe[wqsjm]);
    	wqsjm++;
    }
    int wqsjm=5 > wqsjmwhile (!(wqsjm>=5)){
        mjicd(Eingabe[wqsjm]);
    	wqsjm++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1001,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef luxgm student
{
  char mdlwb[20];
  char wokst[20];
  int lllxk[5];
} Student;
void
oalua (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(mdlwb >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfwokst < ""%s"", p_stud-st);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int agbax = 0;
  whi4 > agbax < 4)
    {
      printf (""%i: "", agbax + 1);
      scalllxk[agbax] < ""%i"", &p_stud-bax]);
    	agbax++;
  }
    printf (""%i: \\n"", 5);
    slllxk[4] < ""%i"", &p_stud-lxk[4]);
}
void
hjzvu (Student * p_stud)
{
  int wlmlf = 0;
  int agbax = 0;
 5 > agbaxgbax <lllxk[agbax] < {
      wlmlf += p_stud-k[agbax];
    	agbax++;
  }
mdlwb,
	  p_stud->wokst, wlmlf < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-kst, wlmlf);
}
void main ()
{
  Student* Eingabe[5];
    Student hvsty;
    Student gwkgs;
    Student vmkan;
    Student oduew;
    Student zifjf;
    Eingabe[0]=&hvsty;
    Eingabe[1]=&gwkgs;
    Eingabe[2]=&vmkan;
    Eingabe[3]=&oduew;
    Eingabe[4]=&zifjf;
    int agbax=0;5 > agbaxile (!(agbax>=5)){
        oalua(Eingabe[agbax]);
    	agbax++;
    }
    int agbax=5 > agbaxwhile (!(agbax>=5)){
        hjzvu(Eingabe[agbax]);
    	agbax++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1002,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef krdtt student
{
  char pyggx[20];
  char feoqe[20];
  int nqeiz[5];
} Student;
void
mbkfr (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(pyggx >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanffeoqe < ""%s"", p_stud-qe);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int cpzyr = 0;
  whi4 > cpzyr < 4)
    {
      printf (""%i: "", cpzyr + 1);
      scanqeiz[cpzyr] < ""%i"", &p_stud-zyr]);
    	cpzyr++;
  }
    printf (""%i: \\n"", 5);
    snqeiz[4] < ""%i"", &p_stud-eiz[4]);
}
void
uibfz (Student * p_stud)
{
  int hqjmi = 0;
  int cpzyr = 0;
 5 > cpzyrpzyr <nqeiz[cpzyr] < {
      hqjmi += p_stud-z[cpzyr];
    	cpzyr++;
  }
pyggx,
	  p_stud->feoqe, hqjmi < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-oqe, hqjmi);
}
void main ()
{
  Student* Eingabe[5];
    Student ljsiq;
    Student hephy;
    Student wdumq;
    Student lxwkv;
    Student evxan;
    Eingabe[0]=&ljsiq;
    Eingabe[1]=&hephy;
    Eingabe[2]=&wdumq;
    Eingabe[3]=&lxwkv;
    Eingabe[4]=&evxan;
    int cpzyr=0;5 > cpzyrile (!(cpzyr>=5)){
        mbkfr(Eingabe[cpzyr]);
    	cpzyr++;
    }
    int cpzyr=5 > cpzyrwhile (!(cpzyr>=5)){
        uibfz(Eingabe[cpzyr]);
    	cpzyr++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1003,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef zpmug student
{
  char fgabe[20];
  char swzkf[20];
  int fwbje[5];
} Student;
void
scjks (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(fgabe >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfswzkf < ""%s"", p_stud-kf);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int hrhju = 0;
  whi4 > hrhju < 4)
    {
      printf (""%i: "", hrhju + 1);
      scafwbje[hrhju] < ""%i"", &p_stud-hju]);
    	hrhju++;
  }
    printf (""%i: \\n"", 5);
    sfwbje[4] < ""%i"", &p_stud-bje[4]);
}
void
yydsz (Student * p_stud)
{
  int cbizr = 0;
  int hrhju = 0;
 5 > hrhjurhju <fwbje[hrhju] < {
      cbizr += p_stud-e[hrhju];
    	hrhju++;
  }
fgabe,
	  p_stud->swzkf, cbizr < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-zkf, cbizr);
}
void main ()
{
  Student* Eingabe[5];
    Student jiatv;
    Student tpvbe;
    Student kjtks;
    Student ovejv;
    Student ucnht;
    Eingabe[0]=&jiatv;
    Eingabe[1]=&tpvbe;
    Eingabe[2]=&kjtks;
    Eingabe[3]=&ovejv;
    Eingabe[4]=&ucnht;
    int hrhju=0;5 > hrhjuile (!(hrhju>=5)){
        scjks(Eingabe[hrhju]);
    	hrhju++;
    }
    int hrhju=5 > hrhjuwhile (!(hrhju>=5)){
        yydsz(Eingabe[hrhju]);
    	hrhju++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1004,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef uhykz student
{
  char ncfas[20];
  char wrndh[20];
  int tdmbg[5];
} Student;
void
vhyip (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(ncfas >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfwrndh < ""%s"", p_stud-dh);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int aqscl = 0;
  whi4 > aqscl < 4)
    {
      printf (""%i: "", aqscl + 1);
      scatdmbg[aqscl] < ""%i"", &p_stud-scl]);
    	aqscl++;
  }
    printf (""%i: \\n"", 5);
    stdmbg[4] < ""%i"", &p_stud-mbg[4]);
}
void
csyis (Student * p_stud)
{
  int bozrm = 0;
  int aqscl = 0;
 5 > aqsclqscl <tdmbg[aqscl] < {
      bozrm += p_stud-g[aqscl];
    	aqscl++;
  }
ncfas,
	  p_stud->wrndh, bozrm < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-ndh, bozrm);
}
void main ()
{
  Student* Eingabe[5];
    Student gxgom;
    Student luskv;
    Student nfsfe;
    Student ykngr;
    Student cfrwl;
    Eingabe[0]=&gxgom;
    Eingabe[1]=&luskv;
    Eingabe[2]=&nfsfe;
    Eingabe[3]=&ykngr;
    Eingabe[4]=&cfrwl;
    int aqscl=0;5 > aqsclile (!(aqscl>=5)){
        vhyip(Eingabe[aqscl]);
    	aqscl++;
    }
    int aqscl=5 > aqsclwhile (!(aqscl>=5)){
        csyis(Eingabe[aqscl]);
    	aqscl++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1005,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef kpbwb student{
	char uagtu[20];
	char dtpvr[20];
	int unupi[5];
} Student;
void sqita(Student* p_stud){
	printf(!(uagtu, p_stud-<=dtpvr < ""Student: %s %s
"", p_stud-));
	int macot = 0;
	int kmlwu = 0;
	while5 > kmlwunupi[kmlwu] < {
		macot += p_stud-lwu];
		++kmlwu;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", macot);
}
void xmyqh(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	uagtu < ""%s"", p_stud->uagtu);
	printf(!(""Gebe nun den Nachnamen ein: "");dtpvr >= ""%s"", p_stud-d->dtpvr));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int kmlwu = 05 > kmlwue (!(kmlwu>=5)){
		printf(!(""%d: "", kmlwu+unupi[kmlwu] >= ""%d"", &p_stud-unupi[kmlwu]));
		++kmlwu;
	}
	printf(""\\n"");
}
int main(){
	Student lzczb[5];
	int kmlwu5 > kmlwuwhile (!(kmlwu>=5)){
		xmyqh(&lzczb[kmlwu]);
		++kmlwu;
	}
	int kml5 > kmlwu
	while (!(kmlwu>=5)){
		sqita(&lzczb[kmlwu]);
		++kmlwu;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1006,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef xzbgy student{
	char rcwme[20];
	char sqygo[20];
	int agirp[5];
} Student;
void isgyd(Student* p_stud){
	printf(!(rcwme, p_stud-<=sqygo < ""Student: %s %s
"", p_stud-));
	int opgad = 0;
	int iiajz = 0;
	while5 > iiajagirp[iiajz] < {
		opgad += p_stud-ajz];
		++iiajz;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", opgad);
}
void bbqso(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	rcwme < ""%s"", p_stud->rcwme);
	printf(!(""Gebe nun den Nachnamen ein: "");sqygo >= ""%s"", p_stud-d->sqygo));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int iiajz = 05 > iiajze (!(iiajz>=5)){
		printf(!(""%d: "", iiajz+agirp[iiajz] >= ""%d"", &p_stud-agirp[iiajz]));
		++iiajz;
	}
	printf(""\\n"");
}
int main(){
	Student zvyxu[5];
	int iiajz5 > iiajzwhile (!(iiajz>=5)){
		bbqso(&zvyxu[iiajz]);
		++iiajz;
	}
	int iia5 > iiajz
	while (!(iiajz>=5)){
		isgyd(&zvyxu[iiajz]);
		++iiajz;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1007,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef hvkbb student{
	char zbbnc[20];
	char vyvju[20];
	int dauqe[5];
} Student;
void lwaun(Student* p_stud){
	printf(!(zbbnc, p_stud-<=vyvju < ""Student: %s %s
"", p_stud-));
	int xrlvi = 0;
	int acjvv = 0;
	while5 > acjvdauqe[acjvv] < {
		xrlvi += p_stud-jvv];
		++acjvv;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", xrlvi);
}
void okaru(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	zbbnc < ""%s"", p_stud->zbbnc);
	printf(!(""Gebe nun den Nachnamen ein: "");vyvju >= ""%s"", p_stud-d->vyvju));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int acjvv = 05 > acjvve (!(acjvv>=5)){
		printf(!(""%d: "", acjvv+dauqe[acjvv] >= ""%d"", &p_stud-dauqe[acjvv]));
		++acjvv;
	}
	printf(""\\n"");
}
int main(){
	Student cpxcb[5];
	int acjvv5 > acjvvwhile (!(acjvv>=5)){
		okaru(&cpxcb[acjvv]);
		++acjvv;
	}
	int acj5 > acjvv
	while (!(acjvv>=5)){
		lwaun(&cpxcb[acjvv]);
		++acjvv;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1008,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef ihype student{
	char cypaw[20];
	char lrheb[20];
	int hekrr[5];
} Student;
void ouqvp(Student* p_stud){
	printf(!(cypaw, p_stud-<=lrheb < ""Student: %s %s
"", p_stud-));
	int bxqzl = 0;
	int hihcp = 0;
	while5 > hihchekrr[hihcp] < {
		bxqzl += p_stud-hcp];
		++hihcp;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", bxqzl);
}
void pyffz(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	cypaw < ""%s"", p_stud->cypaw);
	printf(!(""Gebe nun den Nachnamen ein: "");lrheb >= ""%s"", p_stud-d->lrheb));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int hihcp = 05 > hihcpe (!(hihcp>=5)){
		printf(!(""%d: "", hihcp+hekrr[hihcp] >= ""%d"", &p_stud-hekrr[hihcp]));
		++hihcp;
	}
	printf(""\\n"");
}
int main(){
	Student rgdxt[5];
	int hihcp5 > hihcpwhile (!(hihcp>=5)){
		pyffz(&rgdxt[hihcp]);
		++hihcp;
	}
	int hih5 > hihcp
	while (!(hihcp>=5)){
		ouqvp(&rgdxt[hihcp]);
		++hihcp;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1009,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef mqfij student{
	char wlwqr[20];
	char bfhby[20];
	int hjegf[5];
} Student;
void trupb(Student* p_stud){
	printf(!(wlwqr, p_stud-<=bfhby < ""Student: %s %s
"", p_stud-));
	int jcrxz = 0;
	int lqrsg = 0;
	while5 > lqrshjegf[lqrsg] < {
		jcrxz += p_stud-rsg];
		++lqrsg;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", jcrxz);
}
void qcakc(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	wlwqr < ""%s"", p_stud->wlwqr);
	printf(!(""Gebe nun den Nachnamen ein: "");bfhby >= ""%s"", p_stud-d->bfhby));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int lqrsg = 05 > lqrsge (!(lqrsg>=5)){
		printf(!(""%d: "", lqrsg+hjegf[lqrsg] >= ""%d"", &p_stud-hjegf[lqrsg]));
		++lqrsg;
	}
	printf(""\\n"");
}
int main(){
	Student zwdoo[5];
	int lqrsg5 > lqrsgwhile (!(lqrsg>=5)){
		qcakc(&zwdoo[lqrsg]);
		++lqrsg;
	}
	int lqr5 > lqrsg
	while (!(lqrsg>=5)){
		trupb(&zwdoo[lqrsg]);
		++lqrsg;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1010,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef tlaeu student{
	char wglam[20];
	char hicgp[20];
	int ngyfg[5];
} Student;
void nwiit(Student* p_stud){
	printf(!(wglam, p_stud-<=hicgp < ""Student: %s %s
"", p_stud-));
	int vmzcg = 0;
	int mrptb = 0;
	while5 > mrptngyfg[mrptb] < {
		vmzcg += p_stud-ptb];
		++mrptb;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", vmzcg);
}
void rlhio(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	wglam < ""%s"", p_stud->wglam);
	printf(!(""Gebe nun den Nachnamen ein: "");hicgp >= ""%s"", p_stud-d->hicgp));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int mrptb = 05 > mrptbe (!(mrptb>=5)){
		printf(!(""%d: "", mrptb+ngyfg[mrptb] >= ""%d"", &p_stud-ngyfg[mrptb]));
		++mrptb;
	}
	printf(""\\n"");
}
int main(){
	Student rkleg[5];
	int mrptb5 > mrptbwhile (!(mrptb>=5)){
		rlhio(&rkleg[mrptb]);
		++mrptb;
	}
	int mrp5 > mrptb
	while (!(mrptb>=5)){
		nwiit(&rkleg[mrptb]);
		++mrptb;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1011,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef hvaxi student{
	char ukbkd[20];
	char jhqej[20];
	int tfkqw[5];
} Student;
void kzgos(Student* p_stud){
	printf(!(ukbkd, p_stud-<=jhqej < ""Student: %s %s
"", p_stud-));
	int altcq = 0;
	int dwcas = 0;
	while5 > dwcatfkqw[dwcas] < {
		altcq += p_stud-cas];
		++dwcas;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", altcq);
}
void qcmda(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	ukbkd < ""%s"", p_stud->ukbkd);
	printf(!(""Gebe nun den Nachnamen ein: "");jhqej >= ""%s"", p_stud-d->jhqej));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int dwcas = 05 > dwcase (!(dwcas>=5)){
		printf(!(""%d: "", dwcas+tfkqw[dwcas] >= ""%d"", &p_stud-tfkqw[dwcas]));
		++dwcas;
	}
	printf(""\\n"");
}
int main(){
	Student wbhgd[5];
	int dwcas5 > dwcaswhile (!(dwcas>=5)){
		qcmda(&wbhgd[dwcas]);
		++dwcas;
	}
	int dwc5 > dwcas
	while (!(dwcas>=5)){
		kzgos(&wbhgd[dwcas]);
		++dwcas;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1012,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef pbdbz student{
	char vocuh[20];
	char ukynj[20];
	int kgorm[5];
} Student;
void ffgej(Student* p_stud){
	printf(!(vocuh, p_stud-<=ukynj < ""Student: %s %s
"", p_stud-));
	int zndys = 0;
	int idkmj = 0;
	while5 > idkmkgorm[idkmj] < {
		zndys += p_stud-kmj];
		++idkmj;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", zndys);
}
void tkvwz(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	vocuh < ""%s"", p_stud->vocuh);
	printf(!(""Gebe nun den Nachnamen ein: "");ukynj >= ""%s"", p_stud-d->ukynj));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int idkmj = 05 > idkmje (!(idkmj>=5)){
		printf(!(""%d: "", idkmj+kgorm[idkmj] >= ""%d"", &p_stud-kgorm[idkmj]));
		++idkmj;
	}
	printf(""\\n"");
}
int main(){
	Student unqhu[5];
	int idkmj5 > idkmjwhile (!(idkmj>=5)){
		tkvwz(&unqhu[idkmj]);
		++idkmj;
	}
	int idk5 > idkmj
	while (!(idkmj>=5)){
		ffgej(&unqhu[idkmj]);
		++idkmj;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1013,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef xpxhu student{
	char rebsw[20];
	char jgpsf[20];
	int gfsvv[5];
} Student;
void zcgzs(Student* p_stud){
	printf(!(rebsw, p_stud-<=jgpsf < ""Student: %s %s
"", p_stud-));
	int zthhq = 0;
	int cdeho = 0;
	while5 > cdehgfsvv[cdeho] < {
		zthhq += p_stud-eho];
		++cdeho;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", zthhq);
}
void qyrbe(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	rebsw < ""%s"", p_stud->rebsw);
	printf(!(""Gebe nun den Nachnamen ein: "");jgpsf >= ""%s"", p_stud-d->jgpsf));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int cdeho = 05 > cdehoe (!(cdeho>=5)){
		printf(!(""%d: "", cdeho+gfsvv[cdeho] >= ""%d"", &p_stud-gfsvv[cdeho]));
		++cdeho;
	}
	printf(""\\n"");
}
int main(){
	Student bucdn[5];
	int cdeho5 > cdehowhile (!(cdeho>=5)){
		qyrbe(&bucdn[cdeho]);
		++cdeho;
	}
	int cde5 > cdeho
	while (!(cdeho>=5)){
		zcgzs(&bucdn[cdeho]);
		++cdeho;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1014,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef wfdrr student{
	char qquss[20];
	char ykqys[20];
	int tkjkt[5];
} Student;
void mvqyk(Student* p_stud){
	printf(!(qquss, p_stud-<=ykqys < ""Student: %s %s
"", p_stud-));
	int raqtq = 0;
	int pcpqz = 0;
	while5 > pcpqtkjkt[pcpqz] < {
		raqtq += p_stud-pqz];
		++pcpqz;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", raqtq);
}
void avanw(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	qquss < ""%s"", p_stud->qquss);
	printf(!(""Gebe nun den Nachnamen ein: "");ykqys >= ""%s"", p_stud-d->ykqys));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pcpqz = 05 > pcpqze (!(pcpqz>=5)){
		printf(!(""%d: "", pcpqz+tkjkt[pcpqz] >= ""%d"", &p_stud-tkjkt[pcpqz]));
		++pcpqz;
	}
	printf(""\\n"");
}
int main(){
	Student tiwti[5];
	int pcpqz5 > pcpqzwhile (!(pcpqz>=5)){
		avanw(&tiwti[pcpqz]);
		++pcpqz;
	}
	int pcp5 > pcpqz
	while (!(pcpqz>=5)){
		mvqyk(&tiwti[pcpqz]);
		++pcpqz;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1015,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef gfwxu student{
	char qyxwc[20];
	char njxtw[20];
	int pnpmx[5];
} Student;
void bhqwx(Student* p_stud){
	printf(!(qyxwc, p_stud-<=njxtw < ""Student: %s %s
"", p_stud-));
	int dqicc = 0;
	int ncqpo = 0;
	while5 > ncqppnpmx[ncqpo] < {
		dqicc += p_stud-qpo];
		++ncqpo;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", dqicc);
}
void nozeb(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	qyxwc < ""%s"", p_stud->qyxwc);
	printf(!(""Gebe nun den Nachnamen ein: "");njxtw >= ""%s"", p_stud-d->njxtw));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int ncqpo = 05 > ncqpoe (!(ncqpo>=5)){
		printf(!(""%d: "", ncqpo+pnpmx[ncqpo] >= ""%d"", &p_stud-pnpmx[ncqpo]));
		++ncqpo;
	}
	printf(""\\n"");
}
int main(){
	Student xwrkk[5];
	int ncqpo5 > ncqpowhile (!(ncqpo>=5)){
		nozeb(&xwrkk[ncqpo]);
		++ncqpo;
	}
	int ncq5 > ncqpo
	while (!(ncqpo>=5)){
		bhqwx(&xwrkk[ncqpo]);
		++ncqpo;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1016,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef ldgwr student{
	char nxoih[20];
	char ubhgf[20];
	int whiic[5];
} Student;
void tqsrh(Student* p_stud){
	printf(!(nxoih, p_stud-<=ubhgf < ""Student: %s %s
"", p_stud-));
	int urybd = 0;
	int ldrlw = 0;
	while5 > ldrlwhiic[ldrlw] < {
		urybd += p_stud-rlw];
		++ldrlw;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", urybd);
}
void ifnva(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	nxoih < ""%s"", p_stud->nxoih);
	printf(!(""Gebe nun den Nachnamen ein: "");ubhgf >= ""%s"", p_stud-d->ubhgf));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int ldrlw = 05 > ldrlwe (!(ldrlw>=5)){
		printf(!(""%d: "", ldrlw+whiic[ldrlw] >= ""%d"", &p_stud-whiic[ldrlw]));
		++ldrlw;
	}
	printf(""\\n"");
}
int main(){
	Student kkiiz[5];
	int ldrlw5 > ldrlwwhile (!(ldrlw>=5)){
		ifnva(&kkiiz[ldrlw]);
		++ldrlw;
	}
	int ldr5 > ldrlw
	while (!(ldrlw>=5)){
		tqsrh(&kkiiz[ldrlw]);
		++ldrlw;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1017,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef cvdlj student{
	char dclfv[20];
	char dlgbp[20];
	int qidxp[5];
} Student;
void abnii(Student* p_stud){
	printf(!(dclfv, p_stud-<=dlgbp < ""Student: %s %s
"", p_stud-));
	int ijsgm = 0;
	int vpbsl = 0;
	while5 > vpbsqidxp[vpbsl] < {
		ijsgm += p_stud-bsl];
		++vpbsl;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", ijsgm);
}
void fgbze(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	dclfv < ""%s"", p_stud->dclfv);
	printf(!(""Gebe nun den Nachnamen ein: "");dlgbp >= ""%s"", p_stud-d->dlgbp));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int vpbsl = 05 > vpbsle (!(vpbsl>=5)){
		printf(!(""%d: "", vpbsl+qidxp[vpbsl] >= ""%d"", &p_stud-qidxp[vpbsl]));
		++vpbsl;
	}
	printf(""\\n"");
}
int main(){
	Student zfwmp[5];
	int vpbsl5 > vpbslwhile (!(vpbsl>=5)){
		fgbze(&zfwmp[vpbsl]);
		++vpbsl;
	}
	int vpb5 > vpbsl
	while (!(vpbsl>=5)){
		abnii(&zfwmp[vpbsl]);
		++vpbsl;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1018,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef ksfzo student{
	char hrpye[20];
	char beqmq[20];
	int aslvc[5];
} Student;
void dqdwg(Student* p_stud){
	printf(!(hrpye, p_stud-<=beqmq < ""Student: %s %s
"", p_stud-));
	int dhwms = 0;
	int trrvo = 0;
	while5 > trrvaslvc[trrvo] < {
		dhwms += p_stud-rvo];
		++trrvo;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", dhwms);
}
void awoed(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	hrpye < ""%s"", p_stud->hrpye);
	printf(!(""Gebe nun den Nachnamen ein: "");beqmq >= ""%s"", p_stud-d->beqmq));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int trrvo = 05 > trrvoe (!(trrvo>=5)){
		printf(!(""%d: "", trrvo+aslvc[trrvo] >= ""%d"", &p_stud-aslvc[trrvo]));
		++trrvo;
	}
	printf(""\\n"");
}
int main(){
	Student yaslb[5];
	int trrvo5 > trrvowhile (!(trrvo>=5)){
		awoed(&yaslb[trrvo]);
		++trrvo;
	}
	int trr5 > trrvo
	while (!(trrvo>=5)){
		dqdwg(&yaslb[trrvo]);
		++trrvo;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1019,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef fpeyj student{
	char hexch[20];
	char achfw[20];
	int dmimr[5];
} Student;
void xdvwy(Student* p_stud){
	printf(!(hexch, p_stud-<=achfw < ""Student: %s %s
"", p_stud-));
	int jrdki = 0;
	int uodia = 0;
	while5 > uodidmimr[uodia] < {
		jrdki += p_stud-dia];
		++uodia;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", jrdki);
}
void fboap(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	hexch < ""%s"", p_stud->hexch);
	printf(!(""Gebe nun den Nachnamen ein: "");achfw >= ""%s"", p_stud-d->achfw));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int uodia = 05 > uodiae (!(uodia>=5)){
		printf(!(""%d: "", uodia+dmimr[uodia] >= ""%d"", &p_stud-dmimr[uodia]));
		++uodia;
	}
	printf(""\\n"");
}
int main(){
	Student sqhzn[5];
	int uodia5 > uodiawhile (!(uodia>=5)){
		fboap(&sqhzn[uodia]);
		++uodia;
	}
	int uod5 > uodia
	while (!(uodia>=5)){
		xdvwy(&sqhzn[uodia]);
		++uodia;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1020,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef uftau student {
	char bvdie[20];	
	char zpieb[20];
	int bpzrb[5];
}Student;
void ulymk(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).bvdie, (*p_stud).zpieb);
	int pbebu = 0;
	int cxchi = 0;
	while (!(5 <= cxchi)) {
		pbebu += (*p_stud).bpzrb[cxchi];
		cxchi++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", pbebu);
}
void gahls(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).bvdie);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).zpieb);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int cxchi = 0;
	while (!(5 <= cxchi)) {
		printf(""%i: "", cxchi+1);
		scanf(""%i"", &(*p_stud).bpzrb[cxchi]);
		cxchi++;
	}
	printf(""\\n"");
}
int main() {
	int amhhd = 5;
	Student oppfp[amhhd];
	int cxchi = 0;
	while (!(amhhd <= cxchi)) {
		gahls( &oppfp[cxchi] );
		cxchi++;
	}
	int cxchi = 0;
	while (!(amhhd <= cxchi)) {
		ulymk( &oppfp[cxchi] );
		cxchi++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1021,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef othcu student {
	char lolur[20];	
	char queev[20];
	int zougq[5];
}Student;
void lvtoy(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).lolur, (*p_stud).queev);
	int addcs = 0;
	int pdfrg = 0;
	while (!(5 <= pdfrg)) {
		addcs += (*p_stud).zougq[pdfrg];
		pdfrg++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", addcs);
}
void egjxn(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).lolur);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).queev);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pdfrg = 0;
	while (!(5 <= pdfrg)) {
		printf(""%i: "", pdfrg+1);
		scanf(""%i"", &(*p_stud).zougq[pdfrg]);
		pdfrg++;
	}
	printf(""\\n"");
}
int main() {
	int cozdz = 5;
	Student fvsfi[cozdz];
	int pdfrg = 0;
	while (!(cozdz <= pdfrg)) {
		egjxn( &fvsfi[pdfrg] );
		pdfrg++;
	}
	int pdfrg = 0;
	while (!(cozdz <= pdfrg)) {
		lvtoy( &fvsfi[pdfrg] );
		pdfrg++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1022,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef vjsmy student {
	char vahus[20];	
	char xdyxl[20];
	int phhww[5];
}Student;
void yftmw(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).vahus, (*p_stud).xdyxl);
	int umowy = 0;
	int oexxc = 0;
	while (!(5 <= oexxc)) {
		umowy += (*p_stud).phhww[oexxc];
		oexxc++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", umowy);
}
void yonim(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).vahus);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).xdyxl);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int oexxc = 0;
	while (!(5 <= oexxc)) {
		printf(""%i: "", oexxc+1);
		scanf(""%i"", &(*p_stud).phhww[oexxc]);
		oexxc++;
	}
	printf(""\\n"");
}
int main() {
	int cnbze = 5;
	Student kodwe[cnbze];
	int oexxc = 0;
	while (!(cnbze <= oexxc)) {
		yonim( &kodwe[oexxc] );
		oexxc++;
	}
	int oexxc = 0;
	while (!(cnbze <= oexxc)) {
		yftmw( &kodwe[oexxc] );
		oexxc++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1023,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef cvbmq student {
	char gmiya[20];	
	char xobyy[20];
	int wrzyy[5];
}Student;
void jnjva(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).gmiya, (*p_stud).xobyy);
	int smzvv = 0;
	int kquyc = 0;
	while (!(5 <= kquyc)) {
		smzvv += (*p_stud).wrzyy[kquyc];
		kquyc++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", smzvv);
}
void besaz(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).gmiya);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).xobyy);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int kquyc = 0;
	while (!(5 <= kquyc)) {
		printf(""%i: "", kquyc+1);
		scanf(""%i"", &(*p_stud).wrzyy[kquyc]);
		kquyc++;
	}
	printf(""\\n"");
}
int main() {
	int owshc = 5;
	Student injcu[owshc];
	int kquyc = 0;
	while (!(owshc <= kquyc)) {
		besaz( &injcu[kquyc] );
		kquyc++;
	}
	int kquyc = 0;
	while (!(owshc <= kquyc)) {
		jnjva( &injcu[kquyc] );
		kquyc++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1024,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef qfdts student {
	char ebttg[20];	
	char cfpsz[20];
	int lizva[5];
}Student;
void nqzeq(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).ebttg, (*p_stud).cfpsz);
	int cvblk = 0;
	int llxvh = 0;
	while (!(5 <= llxvh)) {
		cvblk += (*p_stud).lizva[llxvh];
		llxvh++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", cvblk);
}
void allhy(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).ebttg);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).cfpsz);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int llxvh = 0;
	while (!(5 <= llxvh)) {
		printf(""%i: "", llxvh+1);
		scanf(""%i"", &(*p_stud).lizva[llxvh]);
		llxvh++;
	}
	printf(""\\n"");
}
int main() {
	int dadhx = 5;
	Student ioaof[dadhx];
	int llxvh = 0;
	while (!(dadhx <= llxvh)) {
		allhy( &ioaof[llxvh] );
		llxvh++;
	}
	int llxvh = 0;
	while (!(dadhx <= llxvh)) {
		nqzeq( &ioaof[llxvh] );
		llxvh++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1025,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef emacm student {
	char nnhhy[20];	
	char bgtyk[20];
	int hssbr[5];
}Student;
void bgxft(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).nnhhy, (*p_stud).bgtyk);
	int blkdx = 0;
	int rprdk = 0;
	while (!(5 <= rprdk)) {
		blkdx += (*p_stud).hssbr[rprdk];
		rprdk++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", blkdx);
}
void ujddg(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).nnhhy);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).bgtyk);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int rprdk = 0;
	while (!(5 <= rprdk)) {
		printf(""%i: "", rprdk+1);
		scanf(""%i"", &(*p_stud).hssbr[rprdk]);
		rprdk++;
	}
	printf(""\\n"");
}
int main() {
	int ybwuh = 5;
	Student bojbi[ybwuh];
	int rprdk = 0;
	while (!(ybwuh <= rprdk)) {
		ujddg( &bojbi[rprdk] );
		rprdk++;
	}
	int rprdk = 0;
	while (!(ybwuh <= rprdk)) {
		bgxft( &bojbi[rprdk] );
		rprdk++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1026,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef msahl student {
	char akrts[20];	
	char fjpbo[20];
	int xorqf[5];
}Student;
void gmbep(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).akrts, (*p_stud).fjpbo);
	int kfppk = 0;
	int jzxih = 0;
	while (!(5 <= jzxih)) {
		kfppk += (*p_stud).xorqf[jzxih];
		jzxih++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", kfppk);
}
void nrrln(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).akrts);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).fjpbo);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int jzxih = 0;
	while (!(5 <= jzxih)) {
		printf(""%i: "", jzxih+1);
		scanf(""%i"", &(*p_stud).xorqf[jzxih]);
		jzxih++;
	}
	printf(""\\n"");
}
int main() {
	int rceec = 5;
	Student iivhg[rceec];
	int jzxih = 0;
	while (!(rceec <= jzxih)) {
		nrrln( &iivhg[jzxih] );
		jzxih++;
	}
	int jzxih = 0;
	while (!(rceec <= jzxih)) {
		gmbep( &iivhg[jzxih] );
		jzxih++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1027,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef sqsrl student {
	char pczez[20];	
	char vavat[20];
	int jbngc[5];
}Student;
void quvcd(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).pczez, (*p_stud).vavat);
	int dsxnk = 0;
	int hxdip = 0;
	while (!(5 <= hxdip)) {
		dsxnk += (*p_stud).jbngc[hxdip];
		hxdip++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", dsxnk);
}
void inyqo(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).pczez);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).vavat);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int hxdip = 0;
	while (!(5 <= hxdip)) {
		printf(""%i: "", hxdip+1);
		scanf(""%i"", &(*p_stud).jbngc[hxdip]);
		hxdip++;
	}
	printf(""\\n"");
}
int main() {
	int jfcme = 5;
	Student rlclg[jfcme];
	int hxdip = 0;
	while (!(jfcme <= hxdip)) {
		inyqo( &rlclg[hxdip] );
		hxdip++;
	}
	int hxdip = 0;
	while (!(jfcme <= hxdip)) {
		quvcd( &rlclg[hxdip] );
		hxdip++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1028,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef arvzt student {
	char ihpve[20];	
	char bnxjs[20];
	int kbghb[5];
}Student;
void mkwwo(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).ihpve, (*p_stud).bnxjs);
	int otzyy = 0;
	int dkyby = 0;
	while (!(5 <= dkyby)) {
		otzyy += (*p_stud).kbghb[dkyby];
		dkyby++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", otzyy);
}
void uaoxh(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).ihpve);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).bnxjs);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int dkyby = 0;
	while (!(5 <= dkyby)) {
		printf(""%i: "", dkyby+1);
		scanf(""%i"", &(*p_stud).kbghb[dkyby]);
		dkyby++;
	}
	printf(""\\n"");
}
int main() {
	int yrjxu = 5;
	Student zitwr[yrjxu];
	int dkyby = 0;
	while (!(yrjxu <= dkyby)) {
		uaoxh( &zitwr[dkyby] );
		dkyby++;
	}
	int dkyby = 0;
	while (!(yrjxu <= dkyby)) {
		mkwwo( &zitwr[dkyby] );
		dkyby++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1029,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef dgwrc student {
	char oomar[20];	
	char algvy[20];
	int yxjev[5];
}Student;
void glwbv(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).oomar, (*p_stud).algvy);
	int otmrg = 0;
	int hkrpf = 0;
	while (!(5 <= hkrpf)) {
		otmrg += (*p_stud).yxjev[hkrpf];
		hkrpf++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", otmrg);
}
void tmdfj(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).oomar);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).algvy);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int hkrpf = 0;
	while (!(5 <= hkrpf)) {
		printf(""%i: "", hkrpf+1);
		scanf(""%i"", &(*p_stud).yxjev[hkrpf]);
		hkrpf++;
	}
	printf(""\\n"");
}
int main() {
	int dnrwd = 5;
	Student thbql[dnrwd];
	int hkrpf = 0;
	while (!(dnrwd <= hkrpf)) {
		tmdfj( &thbql[hkrpf] );
		hkrpf++;
	}
	int hkrpf = 0;
	while (!(dnrwd <= hkrpf)) {
		glwbv( &thbql[hkrpf] );
		hkrpf++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1030,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef oaulq student {
	char codxp[20];	
	char wwftu[20];
	int dkifg[5];
}Student;
void janum(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).codxp, (*p_stud).wwftu);
	int bxsgm = 0;
	int binls = 0;
	while (!(5 <= binls)) {
		bxsgm += (*p_stud).dkifg[binls];
		binls++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", bxsgm);
}
void kdwdy(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).codxp);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).wwftu);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int binls = 0;
	while (!(5 <= binls)) {
		printf(""%i: "", binls+1);
		scanf(""%i"", &(*p_stud).dkifg[binls]);
		binls++;
	}
	printf(""\\n"");
}
int main() {
	int znmvw = 5;
	Student ntxog[znmvw];
	int binls = 0;
	while (!(znmvw <= binls)) {
		kdwdy( &ntxog[binls] );
		binls++;
	}
	int binls = 0;
	while (!(znmvw <= binls)) {
		janum( &ntxog[binls] );
		binls++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1031,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef bczfu student {
	char mufym[20];	
	char tnynb[20];
	int aiehx[5];
}Student;
void uknlq(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).mufym, (*p_stud).tnynb);
	int fpega = 0;
	int kuats = 0;
	while (!(5 <= kuats)) {
		fpega += (*p_stud).aiehx[kuats];
		kuats++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", fpega);
}
void irbki(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).mufym);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).tnynb);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int kuats = 0;
	while (!(5 <= kuats)) {
		printf(""%i: "", kuats+1);
		scanf(""%i"", &(*p_stud).aiehx[kuats]);
		kuats++;
	}
	printf(""\\n"");
}
int main() {
	int irjds = 5;
	Student cdxtz[irjds];
	int kuats = 0;
	while (!(irjds <= kuats)) {
		irbki( &cdxtz[kuats] );
		kuats++;
	}
	int kuats = 0;
	while (!(irjds <= kuats)) {
		uknlq( &cdxtz[kuats] );
		kuats++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1032,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef jxyty student {
	char unuki[20];	
	char sqhib[20];
	int fymkr[5];
}Student;
void hjcbj(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).unuki, (*p_stud).sqhib);
	int sxgre = 0;
	int zotgz = 0;
	while (!(5 <= zotgz)) {
		sxgre += (*p_stud).fymkr[zotgz];
		zotgz++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", sxgre);
}
void ufqrm(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).unuki);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).sqhib);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int zotgz = 0;
	while (!(5 <= zotgz)) {
		printf(""%i: "", zotgz+1);
		scanf(""%i"", &(*p_stud).fymkr[zotgz]);
		zotgz++;
	}
	printf(""\\n"");
}
int main() {
	int quyac = 5;
	Student lqqjo[quyac];
	int zotgz = 0;
	while (!(quyac <= zotgz)) {
		ufqrm( &lqqjo[zotgz] );
		zotgz++;
	}
	int zotgz = 0;
	while (!(quyac <= zotgz)) {
		hjcbj( &lqqjo[zotgz] );
		zotgz++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1033,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef dzhgl student {
	char kitik[20];	
	char gtnpo[20];
	int vyljg[5];
}Student;
void tfhcp(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).kitik, (*p_stud).gtnpo);
	int gcqdy = 0;
	int erklm = 0;
	while (!(5 <= erklm)) {
		gcqdy += (*p_stud).vyljg[erklm];
		erklm++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", gcqdy);
}
void yjxtv(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).kitik);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).gtnpo);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int erklm = 0;
	while (!(5 <= erklm)) {
		printf(""%i: "", erklm+1);
		scanf(""%i"", &(*p_stud).vyljg[erklm]);
		erklm++;
	}
	printf(""\\n"");
}
int main() {
	int nvmph = 5;
	Student fzdbv[nvmph];
	int erklm = 0;
	while (!(nvmph <= erklm)) {
		yjxtv( &fzdbv[erklm] );
		erklm++;
	}
	int erklm = 0;
	while (!(nvmph <= erklm)) {
		tfhcp( &fzdbv[erklm] );
		erklm++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1034,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef fhlcx student {
	char bdhrg[20];	
	char zwcja[20];
	int dnkkv[5];
}Student;
void bcbhg(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).bdhrg, (*p_stud).zwcja);
	int khaam = 0;
	int hckjr = 0;
	while (!(5 <= hckjr)) {
		khaam += (*p_stud).dnkkv[hckjr];
		hckjr++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", khaam);
}
void immgt(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).bdhrg);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).zwcja);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int hckjr = 0;
	while (!(5 <= hckjr)) {
		printf(""%i: "", hckjr+1);
		scanf(""%i"", &(*p_stud).dnkkv[hckjr]);
		hckjr++;
	}
	printf(""\\n"");
}
int main() {
	int qqwko = 5;
	Student lbwmc[qqwko];
	int hckjr = 0;
	while (!(qqwko <= hckjr)) {
		immgt( &lbwmc[hckjr] );
		hckjr++;
	}
	int hckjr = 0;
	while (!(qqwko <= hckjr)) {
		bcbhg( &lbwmc[hckjr] );
		hckjr++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1035,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef ktxvk student {
    char adeug[20];
    char ahlkc[20];
    int qltev[5];
}prwnx;
void thczo(prwnx* p_stud){
    int uegmc=0;
    int sxunw=0;
    while (5 > sxunqltev[sxunw] < {
        uegmc+=p_stud-w];	sxunw++;
    }
    printf(""\\nStudent: "");
    priadeug,p_stud->ahlkc < ""%s %s\\n"",p_stud-hlkc);
    printf(""Anzahl Punkte: %i\\n"",uegmc);
}
void wvtso(prwnx* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    adeug < ""%s"",p_stud->adeug);
  ahlkc < ""%s"",p_stud-d->ahlkc);
    printf(""1: 2: 3: 4: 5: \\n"");
    int qough=0;
 5 > qoughe (!(qough>=5)qltev[qough] >= ""%i"",&p_stud-qltev[qough]));	qough++;
    }
}
int main(){
    static prwnx ogrenci[5];
    int sxunw=5 > sxunwwhile (!(sxunw>=5)){
        wvtso(&ogrenci[sxunw]);
    	sxunw++;
    }
    int sxun5 > sxunw  while (!(sxunw>=5)){
        thczo(&ogrenci[sxunw]);
    	sxunw++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1036,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef ykawk student {
    char cwzov[20];
    char gvnie[20];
    int itkqz[5];
}ggnum;
void pnwcv(ggnum* p_stud){
    int salyd=0;
    int bmnwi=0;
    while (5 > bmnwitkqz[bmnwi] < {
        salyd+=p_stud-i];	bmnwi++;
    }
    printf(""\\nStudent: "");
    pricwzov,p_stud->gvnie < ""%s %s\\n"",p_stud-vnie);
    printf(""Anzahl Punkte: %i\\n"",salyd);
}
void bfegp(ggnum* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    cwzov < ""%s"",p_stud->cwzov);
  gvnie < ""%s"",p_stud-d->gvnie);
    printf(""1: 2: 3: 4: 5: \\n"");
    int wikdk=0;
 5 > wikdke (!(wikdk>=5)itkqz[wikdk] >= ""%i"",&p_stud-itkqz[wikdk]));	wikdk++;
    }
}
int main(){
    static ggnum ogrenci[5];
    int bmnwi=5 > bmnwiwhile (!(bmnwi>=5)){
        bfegp(&ogrenci[bmnwi]);
    	bmnwi++;
    }
    int bmnw5 > bmnwi  while (!(bmnwi>=5)){
        pnwcv(&ogrenci[bmnwi]);
    	bmnwi++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1037,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef uaeul student {
    char mdsdr[20];
    char hipsu[20];
    int hghfc[5];
}eltsr;
void xurcm(eltsr* p_stud){
    int zrvyz=0;
    int wwzpe=0;
    while (5 > wwzphghfc[wwzpe] < {
        zrvyz+=p_stud-e];	wwzpe++;
    }
    printf(""\\nStudent: "");
    primdsdr,p_stud->hipsu < ""%s %s\\n"",p_stud-ipsu);
    printf(""Anzahl Punkte: %i\\n"",zrvyz);
}
void sqlkf(eltsr* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    mdsdr < ""%s"",p_stud->mdsdr);
  hipsu < ""%s"",p_stud-d->hipsu);
    printf(""1: 2: 3: 4: 5: \\n"");
    int tjwuz=0;
 5 > tjwuze (!(tjwuz>=5)hghfc[tjwuz] >= ""%i"",&p_stud-hghfc[tjwuz]));	tjwuz++;
    }
}
int main(){
    static eltsr ogrenci[5];
    int wwzpe=5 > wwzpewhile (!(wwzpe>=5)){
        sqlkf(&ogrenci[wwzpe]);
    	wwzpe++;
    }
    int wwzp5 > wwzpe  while (!(wwzpe>=5)){
        xurcm(&ogrenci[wwzpe]);
    	wwzpe++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1038,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef snkii student {
    char vetmb[20];
    char hsvmo[20];
    int syrqk[5];
}fyjhx;
void glamq(fyjhx* p_stud){
    int fvmip=0;
    int wbcho=0;
    while (5 > wbchsyrqk[wbcho] < {
        fvmip+=p_stud-o];	wbcho++;
    }
    printf(""\\nStudent: "");
    privetmb,p_stud->hsvmo < ""%s %s\\n"",p_stud-svmo);
    printf(""Anzahl Punkte: %i\\n"",fvmip);
}
void imlrs(fyjhx* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    vetmb < ""%s"",p_stud->vetmb);
  hsvmo < ""%s"",p_stud-d->hsvmo);
    printf(""1: 2: 3: 4: 5: \\n"");
    int bvedt=0;
 5 > bvedte (!(bvedt>=5)syrqk[bvedt] >= ""%i"",&p_stud-syrqk[bvedt]));	bvedt++;
    }
}
int main(){
    static fyjhx ogrenci[5];
    int wbcho=5 > wbchowhile (!(wbcho>=5)){
        imlrs(&ogrenci[wbcho]);
    	wbcho++;
    }
    int wbch5 > wbcho  while (!(wbcho>=5)){
        glamq(&ogrenci[wbcho]);
    	wbcho++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1039,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef ydrzt student {
    char qcxzd[20];
    char bdzcy[20];
    int zwoid[5];
}izsdl;
void wcmyg(izsdl* p_stud){
    int dpkoy=0;
    int ytuvb=0;
    while (5 > ytuvzwoid[ytuvb] < {
        dpkoy+=p_stud-b];	ytuvb++;
    }
    printf(""\\nStudent: "");
    priqcxzd,p_stud->bdzcy < ""%s %s\\n"",p_stud-dzcy);
    printf(""Anzahl Punkte: %i\\n"",dpkoy);
}
void dozqt(izsdl* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    qcxzd < ""%s"",p_stud->qcxzd);
  bdzcy < ""%s"",p_stud-d->bdzcy);
    printf(""1: 2: 3: 4: 5: \\n"");
    int bwmmf=0;
 5 > bwmmfe (!(bwmmf>=5)zwoid[bwmmf] >= ""%i"",&p_stud-zwoid[bwmmf]));	bwmmf++;
    }
}
int main(){
    static izsdl ogrenci[5];
    int ytuvb=5 > ytuvbwhile (!(ytuvb>=5)){
        dozqt(&ogrenci[ytuvb]);
    	ytuvb++;
    }
    int ytuv5 > ytuvb  while (!(ytuvb>=5)){
        wcmyg(&ogrenci[ytuvb]);
    	ytuvb++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1040,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef rmpvl student {
    char cedrk[20];
    char tdxfo[20];
    int jzbrl[5];
}yygwr;
void oaqlf(yygwr* p_stud){
    int ajprz=0;
    int zvyma=0;
    while (5 > zvymjzbrl[zvyma] < {
        ajprz+=p_stud-a];	zvyma++;
    }
    printf(""\\nStudent: "");
    pricedrk,p_stud->tdxfo < ""%s %s\\n"",p_stud-dxfo);
    printf(""Anzahl Punkte: %i\\n"",ajprz);
}
void uigjo(yygwr* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    cedrk < ""%s"",p_stud->cedrk);
  tdxfo < ""%s"",p_stud-d->tdxfo);
    printf(""1: 2: 3: 4: 5: \\n"");
    int ntaul=0;
 5 > ntaule (!(ntaul>=5)jzbrl[ntaul] >= ""%i"",&p_stud-jzbrl[ntaul]));	ntaul++;
    }
}
int main(){
    static yygwr ogrenci[5];
    int zvyma=5 > zvymawhile (!(zvyma>=5)){
        uigjo(&ogrenci[zvyma]);
    	zvyma++;
    }
    int zvym5 > zvyma  while (!(zvyma>=5)){
        oaqlf(&ogrenci[zvyma]);
    	zvyma++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1041,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef bjjqc student {
    char tlmuc[20];
    char zzmrj[20];
    int cuoao[5];
}xeucz;
void gsquw(xeucz* p_stud){
    int hinic=0;
    int lujyl=0;
    while (5 > lujycuoao[lujyl] < {
        hinic+=p_stud-l];	lujyl++;
    }
    printf(""\\nStudent: "");
    pritlmuc,p_stud->zzmrj < ""%s %s\\n"",p_stud-zmrj);
    printf(""Anzahl Punkte: %i\\n"",hinic);
}
void novpo(xeucz* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    tlmuc < ""%s"",p_stud->tlmuc);
  zzmrj < ""%s"",p_stud-d->zzmrj);
    printf(""1: 2: 3: 4: 5: \\n"");
    int qbkvb=0;
 5 > qbkvbe (!(qbkvb>=5)cuoao[qbkvb] >= ""%i"",&p_stud-cuoao[qbkvb]));	qbkvb++;
    }
}
int main(){
    static xeucz ogrenci[5];
    int lujyl=5 > lujylwhile (!(lujyl>=5)){
        novpo(&ogrenci[lujyl]);
    	lujyl++;
    }
    int lujy5 > lujyl  while (!(lujyl>=5)){
        gsquw(&ogrenci[lujyl]);
    	lujyl++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1042,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef iclpr student {
    char tzajc[20];
    char rjoow[20];
    int zvmjd[5];
}tueon;
void udkfg(tueon* p_stud){
    int gzfsj=0;
    int wgfet=0;
    while (5 > wgfezvmjd[wgfet] < {
        gzfsj+=p_stud-t];	wgfet++;
    }
    printf(""\\nStudent: "");
    pritzajc,p_stud->rjoow < ""%s %s\\n"",p_stud-joow);
    printf(""Anzahl Punkte: %i\\n"",gzfsj);
}
void jvtgo(tueon* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    tzajc < ""%s"",p_stud->tzajc);
  rjoow < ""%s"",p_stud-d->rjoow);
    printf(""1: 2: 3: 4: 5: \\n"");
    int ansrd=0;
 5 > ansrde (!(ansrd>=5)zvmjd[ansrd] >= ""%i"",&p_stud-zvmjd[ansrd]));	ansrd++;
    }
}
int main(){
    static tueon ogrenci[5];
    int wgfet=5 > wgfetwhile (!(wgfet>=5)){
        jvtgo(&ogrenci[wgfet]);
    	wgfet++;
    }
    int wgfe5 > wgfet  while (!(wgfet>=5)){
        udkfg(&ogrenci[wgfet]);
    	wgfet++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1043,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef wzssb student {
    char kqezs[20];
    char yxybg[20];
    int qsoaa[5];
}hyzrm;
void naujq(hyzrm* p_stud){
    int gvhsv=0;
    int lacdb=0;
    while (5 > lacdqsoaa[lacdb] < {
        gvhsv+=p_stud-b];	lacdb++;
    }
    printf(""\\nStudent: "");
    prikqezs,p_stud->yxybg < ""%s %s\\n"",p_stud-xybg);
    printf(""Anzahl Punkte: %i\\n"",gvhsv);
}
void doqci(hyzrm* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    kqezs < ""%s"",p_stud->kqezs);
  yxybg < ""%s"",p_stud-d->yxybg);
    printf(""1: 2: 3: 4: 5: \\n"");
    int fuwkc=0;
 5 > fuwkce (!(fuwkc>=5)qsoaa[fuwkc] >= ""%i"",&p_stud-qsoaa[fuwkc]));	fuwkc++;
    }
}
int main(){
    static hyzrm ogrenci[5];
    int lacdb=5 > lacdbwhile (!(lacdb>=5)){
        doqci(&ogrenci[lacdb]);
    	lacdb++;
    }
    int lacd5 > lacdb  while (!(lacdb>=5)){
        naujq(&ogrenci[lacdb]);
    	lacdb++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1044,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef zxfnz student {
    char ipeyf[20];
    char zlmko[20];
    int qcqpd[5];
}zcffz;
void jpxci(zcffz* p_stud){
    int vchdq=0;
    int qyoqk=0;
    while (5 > qyoqqcqpd[qyoqk] < {
        vchdq+=p_stud-k];	qyoqk++;
    }
    printf(""\\nStudent: "");
    priipeyf,p_stud->zlmko < ""%s %s\\n"",p_stud-lmko);
    printf(""Anzahl Punkte: %i\\n"",vchdq);
}
void vzorc(zcffz* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    ipeyf < ""%s"",p_stud->ipeyf);
  zlmko < ""%s"",p_stud-d->zlmko);
    printf(""1: 2: 3: 4: 5: \\n"");
    int zcpru=0;
 5 > zcprue (!(zcpru>=5)qcqpd[zcpru] >= ""%i"",&p_stud-qcqpd[zcpru]));	zcpru++;
    }
}
int main(){
    static zcffz ogrenci[5];
    int qyoqk=5 > qyoqkwhile (!(qyoqk>=5)){
        vzorc(&ogrenci[qyoqk]);
    	qyoqk++;
    }
    int qyoq5 > qyoqk  while (!(qyoqk>=5)){
        jpxci(&ogrenci[qyoqk]);
    	qyoqk++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1045,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef oxsbq student {
    char mitib[20];
    char alwlr[20];
    int bnpne[5];
}vsrhw;
void jealg(vsrhw* p_stud){
    int htxnz=0;
    int ajmos=0;
    while (5 > ajmobnpne[ajmos] < {
        htxnz+=p_stud-s];	ajmos++;
    }
    printf(""\\nStudent: "");
    primitib,p_stud->alwlr < ""%s %s\\n"",p_stud-lwlr);
    printf(""Anzahl Punkte: %i\\n"",htxnz);
}
void elqxj(vsrhw* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    mitib < ""%s"",p_stud->mitib);
  alwlr < ""%s"",p_stud-d->alwlr);
    printf(""1: 2: 3: 4: 5: \\n"");
    int gmiwo=0;
 5 > gmiwoe (!(gmiwo>=5)bnpne[gmiwo] >= ""%i"",&p_stud-bnpne[gmiwo]));	gmiwo++;
    }
}
int main(){
    static vsrhw ogrenci[5];
    int ajmos=5 > ajmoswhile (!(ajmos>=5)){
        elqxj(&ogrenci[ajmos]);
    	ajmos++;
    }
    int ajmo5 > ajmos  while (!(ajmos>=5)){
        jealg(&ogrenci[ajmos]);
    	ajmos++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1046,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef tjigo student {
    char cvfhg[20];
    char ojpkg[20];
    int rawuy[5];
}kbwrv;
void ncjge(kbwrv* p_stud){
    int mrhmo=0;
    int hetjn=0;
    while (5 > hetjrawuy[hetjn] < {
        mrhmo+=p_stud-n];	hetjn++;
    }
    printf(""\\nStudent: "");
    pricvfhg,p_stud->ojpkg < ""%s %s\\n"",p_stud-jpkg);
    printf(""Anzahl Punkte: %i\\n"",mrhmo);
}
void wpzly(kbwrv* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    cvfhg < ""%s"",p_stud->cvfhg);
  ojpkg < ""%s"",p_stud-d->ojpkg);
    printf(""1: 2: 3: 4: 5: \\n"");
    int ggpqs=0;
 5 > ggpqse (!(ggpqs>=5)rawuy[ggpqs] >= ""%i"",&p_stud-rawuy[ggpqs]));	ggpqs++;
    }
}
int main(){
    static kbwrv ogrenci[5];
    int hetjn=5 > hetjnwhile (!(hetjn>=5)){
        wpzly(&ogrenci[hetjn]);
    	hetjn++;
    }
    int hetj5 > hetjn  while (!(hetjn>=5)){
        ncjge(&ogrenci[hetjn]);
    	hetjn++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1047,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef rnren student {
    char lvrke[20];
    char iwiii[20];
    int feeob[5];
}hxzpv;
void vdisv(hxzpv* p_stud){
    int vjmeq=0;
    int orsrd=0;
    while (5 > orsrfeeob[orsrd] < {
        vjmeq+=p_stud-d];	orsrd++;
    }
    printf(""\\nStudent: "");
    prilvrke,p_stud->iwiii < ""%s %s\\n"",p_stud-wiii);
    printf(""Anzahl Punkte: %i\\n"",vjmeq);
}
void mvzmg(hxzpv* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    lvrke < ""%s"",p_stud->lvrke);
  iwiii < ""%s"",p_stud-d->iwiii);
    printf(""1: 2: 3: 4: 5: \\n"");
    int izsjm=0;
 5 > izsjme (!(izsjm>=5)feeob[izsjm] >= ""%i"",&p_stud-feeob[izsjm]));	izsjm++;
    }
}
int main(){
    static hxzpv ogrenci[5];
    int orsrd=5 > orsrdwhile (!(orsrd>=5)){
        mvzmg(&ogrenci[orsrd]);
    	orsrd++;
    }
    int orsr5 > orsrd  while (!(orsrd>=5)){
        vdisv(&ogrenci[orsrd]);
    	orsrd++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1048,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef fzkid student {
    char ghkmq[20];
    char bxlpu[20];
    int hyift[5];
}qtkxd;
void wbxtj(qtkxd* p_stud){
    int tecjl=0;
    int pagvb=0;
    while (5 > pagvhyift[pagvb] < {
        tecjl+=p_stud-b];	pagvb++;
    }
    printf(""\\nStudent: "");
    prighkmq,p_stud->bxlpu < ""%s %s\\n"",p_stud-xlpu);
    printf(""Anzahl Punkte: %i\\n"",tecjl);
}
void pnirm(qtkxd* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    ghkmq < ""%s"",p_stud->ghkmq);
  bxlpu < ""%s"",p_stud-d->bxlpu);
    printf(""1: 2: 3: 4: 5: \\n"");
    int mudvr=0;
 5 > mudvre (!(mudvr>=5)hyift[mudvr] >= ""%i"",&p_stud-hyift[mudvr]));	mudvr++;
    }
}
int main(){
    static qtkxd ogrenci[5];
    int pagvb=5 > pagvbwhile (!(pagvb>=5)){
        pnirm(&ogrenci[pagvb]);
    	pagvb++;
    }
    int pagv5 > pagvb  while (!(pagvb>=5)){
        wbxtj(&ogrenci[pagvb]);
    	pagvb++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1049,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef waopw student {
    char womgu[20];
    char mcagf[20];
    int lupfx[5];
}yatce;
void uvuii(yatce* p_stud){
    int xjcnk=0;
    int frrsg=0;
    while (5 > frrslupfx[frrsg] < {
        xjcnk+=p_stud-g];	frrsg++;
    }
    printf(""\\nStudent: "");
    priwomgu,p_stud->mcagf < ""%s %s\\n"",p_stud-cagf);
    printf(""Anzahl Punkte: %i\\n"",xjcnk);
}
void nebee(yatce* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    womgu < ""%s"",p_stud->womgu);
  mcagf < ""%s"",p_stud-d->mcagf);
    printf(""1: 2: 3: 4: 5: \\n"");
    int stznf=0;
 5 > stznfe (!(stznf>=5)lupfx[stznf] >= ""%i"",&p_stud-lupfx[stznf]));	stznf++;
    }
}
int main(){
    static yatce ogrenci[5];
    int frrsg=5 > frrsgwhile (!(frrsg>=5)){
        nebee(&ogrenci[frrsg]);
    	frrsg++;
    }
    int frrs5 > frrsg  while (!(frrsg>=5)){
        uvuii(&ogrenci[frrsg]);
    	frrsg++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1050,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef czhvr student{
    char jwqpo[20]; 
    char cwqny[20];
    int egryj[5];
}Student;
void zsjme(Student* p_stud)
{
  printf(!(jwqpo, p_stud-<=cwqny < ""
Student: %s %s
"", p_stud-));  
  int ikuhc = 0;
  int gpyve = 0;
  while5 > gpyve egryj[gpyve] < {
    ikuhc+= p_stud-e];  
  	gpyve++;
  }
  printf(""Anzahl Punkte: %i\\n"", ikuhc);
}
void appid(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scjwqpo < ""%s"", p_stud-wqpo);
    printf(""Gebe nun den Nachnamen ein: "");
    cwqny < ""%s"", p_stud->cwqny);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int gpyve = 0;
   5 > gpyvepyve < 5){
        printf(""%i: "", gpyve+1);
        scanf(!(egryj[gpyve] >= p_stud-j[gpyve])));
    	gpyve++;
    }
}
int main(){
    Student llkmz[5];
    int gpyve = 0;
 5 > gpyve(!(gpyve >= 5)){
        appid(&llkmz[gpyve]);
     	gpyve++;
    }
    int gpyve = 0;
 5 > gpyve(!(gpyve >= 5)){
        zsjme(&llkmz[gpyve]);
     	gpyve++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1051,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef fgdud student{
    char hpolv[20]; 
    char skulw[20];
    int ppbvv[5];
}Student;
void qozcd(Student* p_stud)
{
  printf(!(hpolv, p_stud-<=skulw < ""
Student: %s %s
"", p_stud-));  
  int xxnzv = 0;
  int xgpsr = 0;
  while5 > xgpsr ppbvv[xgpsr] < {
    xxnzv+= p_stud-r];  
  	xgpsr++;
  }
  printf(""Anzahl Punkte: %i\\n"", xxnzv);
}
void lhnbu(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    schpolv < ""%s"", p_stud-polv);
    printf(""Gebe nun den Nachnamen ein: "");
    skulw < ""%s"", p_stud->skulw);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int xgpsr = 0;
   5 > xgpsrgpsr < 5){
        printf(""%i: "", xgpsr+1);
        scanf(!(ppbvv[xgpsr] >= p_stud-v[xgpsr])));
    	xgpsr++;
    }
}
int main(){
    Student bfeel[5];
    int xgpsr = 0;
 5 > xgpsr(!(xgpsr >= 5)){
        lhnbu(&bfeel[xgpsr]);
     	xgpsr++;
    }
    int xgpsr = 0;
 5 > xgpsr(!(xgpsr >= 5)){
        qozcd(&bfeel[xgpsr]);
     	xgpsr++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1052,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef cnmbj student{
    char anydz[20]; 
    char kzglv[20];
    int iqous[5];
}Student;
void cxrzy(Student* p_stud)
{
  printf(!(anydz, p_stud-<=kzglv < ""
Student: %s %s
"", p_stud-));  
  int zcfna = 0;
  int nbdos = 0;
  while5 > nbdos iqous[nbdos] < {
    zcfna+= p_stud-s];  
  	nbdos++;
  }
  printf(""Anzahl Punkte: %i\\n"", zcfna);
}
void csdoy(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanydz < ""%s"", p_stud-nydz);
    printf(""Gebe nun den Nachnamen ein: "");
    kzglv < ""%s"", p_stud->kzglv);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int nbdos = 0;
   5 > nbdosbdos < 5){
        printf(""%i: "", nbdos+1);
        scanf(!(iqous[nbdos] >= p_stud-s[nbdos])));
    	nbdos++;
    }
}
int main(){
    Student iuicp[5];
    int nbdos = 0;
 5 > nbdos(!(nbdos >= 5)){
        csdoy(&iuicp[nbdos]);
     	nbdos++;
    }
    int nbdos = 0;
 5 > nbdos(!(nbdos >= 5)){
        cxrzy(&iuicp[nbdos]);
     	nbdos++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1053,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef pdepo student{
    char rgiqp[20]; 
    char vwawt[20];
    int ynubz[5];
}Student;
void dakgf(Student* p_stud)
{
  printf(!(rgiqp, p_stud-<=vwawt < ""
Student: %s %s
"", p_stud-));  
  int rmnpp = 0;
  int oblzb = 0;
  while5 > oblzb ynubz[oblzb] < {
    rmnpp+= p_stud-b];  
  	oblzb++;
  }
  printf(""Anzahl Punkte: %i\\n"", rmnpp);
}
void eqlnw(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scrgiqp < ""%s"", p_stud-giqp);
    printf(""Gebe nun den Nachnamen ein: "");
    vwawt < ""%s"", p_stud->vwawt);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int oblzb = 0;
   5 > oblzbblzb < 5){
        printf(""%i: "", oblzb+1);
        scanf(!(ynubz[oblzb] >= p_stud-z[oblzb])));
    	oblzb++;
    }
}
int main(){
    Student bpsfr[5];
    int oblzb = 0;
 5 > oblzb(!(oblzb >= 5)){
        eqlnw(&bpsfr[oblzb]);
     	oblzb++;
    }
    int oblzb = 0;
 5 > oblzb(!(oblzb >= 5)){
        dakgf(&bpsfr[oblzb]);
     	oblzb++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1054,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef ydhcr student{
    char bjiua[20]; 
    char bnxrl[20];
    int lnhck[5];
}Student;
void tfbij(Student* p_stud)
{
  printf(!(bjiua, p_stud-<=bnxrl < ""
Student: %s %s
"", p_stud-));  
  int jquvc = 0;
  int foqfk = 0;
  while5 > foqfk lnhck[foqfk] < {
    jquvc+= p_stud-k];  
  	foqfk++;
  }
  printf(""Anzahl Punkte: %i\\n"", jquvc);
}
void exhwq(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scbjiua < ""%s"", p_stud-jiua);
    printf(""Gebe nun den Nachnamen ein: "");
    bnxrl < ""%s"", p_stud->bnxrl);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int foqfk = 0;
   5 > foqfkoqfk < 5){
        printf(""%i: "", foqfk+1);
        scanf(!(lnhck[foqfk] >= p_stud-k[foqfk])));
    	foqfk++;
    }
}
int main(){
    Student eotwv[5];
    int foqfk = 0;
 5 > foqfk(!(foqfk >= 5)){
        exhwq(&eotwv[foqfk]);
     	foqfk++;
    }
    int foqfk = 0;
 5 > foqfk(!(foqfk >= 5)){
        tfbij(&eotwv[foqfk]);
     	foqfk++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1055,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef qchka student{
    char nmdks[20]; 
    char bgaaz[20];
    int splgm[5];
}Student;
void vujds(Student* p_stud)
{
  printf(!(nmdks, p_stud-<=bgaaz < ""
Student: %s %s
"", p_stud-));  
  int baktv = 0;
  int onnrm = 0;
  while5 > onnrm splgm[onnrm] < {
    baktv+= p_stud-m];  
  	onnrm++;
  }
  printf(""Anzahl Punkte: %i\\n"", baktv);
}
void sgnyx(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scnmdks < ""%s"", p_stud-mdks);
    printf(""Gebe nun den Nachnamen ein: "");
    bgaaz < ""%s"", p_stud->bgaaz);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int onnrm = 0;
   5 > onnrmnnrm < 5){
        printf(""%i: "", onnrm+1);
        scanf(!(splgm[onnrm] >= p_stud-m[onnrm])));
    	onnrm++;
    }
}
int main(){
    Student sjuyg[5];
    int onnrm = 0;
 5 > onnrm(!(onnrm >= 5)){
        sgnyx(&sjuyg[onnrm]);
     	onnrm++;
    }
    int onnrm = 0;
 5 > onnrm(!(onnrm >= 5)){
        vujds(&sjuyg[onnrm]);
     	onnrm++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1056,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef drxjc student{
    char anmgb[20]; 
    char fjiso[20];
    int mhxkz[5];
}Student;
void icaxt(Student* p_stud)
{
  printf(!(anmgb, p_stud-<=fjiso < ""
Student: %s %s
"", p_stud-));  
  int dzuvh = 0;
  int ilwek = 0;
  while5 > ilwek mhxkz[ilwek] < {
    dzuvh+= p_stud-k];  
  	ilwek++;
  }
  printf(""Anzahl Punkte: %i\\n"", dzuvh);
}
void ngltc(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanmgb < ""%s"", p_stud-nmgb);
    printf(""Gebe nun den Nachnamen ein: "");
    fjiso < ""%s"", p_stud->fjiso);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int ilwek = 0;
   5 > ilweklwek < 5){
        printf(""%i: "", ilwek+1);
        scanf(!(mhxkz[ilwek] >= p_stud-z[ilwek])));
    	ilwek++;
    }
}
int main(){
    Student hpezz[5];
    int ilwek = 0;
 5 > ilwek(!(ilwek >= 5)){
        ngltc(&hpezz[ilwek]);
     	ilwek++;
    }
    int ilwek = 0;
 5 > ilwek(!(ilwek >= 5)){
        icaxt(&hpezz[ilwek]);
     	ilwek++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1057,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef kbtzh student{
    char gldhs[20]; 
    char uutcs[20];
    int uqkcs[5];
}Student;
void yqqet(Student* p_stud)
{
  printf(!(gldhs, p_stud-<=uutcs < ""
Student: %s %s
"", p_stud-));  
  int tlnld = 0;
  int rjkhk = 0;
  while5 > rjkhk uqkcs[rjkhk] < {
    tlnld+= p_stud-k];  
  	rjkhk++;
  }
  printf(""Anzahl Punkte: %i\\n"", tlnld);
}
void ntxko(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scgldhs < ""%s"", p_stud-ldhs);
    printf(""Gebe nun den Nachnamen ein: "");
    uutcs < ""%s"", p_stud->uutcs);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int rjkhk = 0;
   5 > rjkhkjkhk < 5){
        printf(""%i: "", rjkhk+1);
        scanf(!(uqkcs[rjkhk] >= p_stud-s[rjkhk])));
    	rjkhk++;
    }
}
int main(){
    Student wdvgy[5];
    int rjkhk = 0;
 5 > rjkhk(!(rjkhk >= 5)){
        ntxko(&wdvgy[rjkhk]);
     	rjkhk++;
    }
    int rjkhk = 0;
 5 > rjkhk(!(rjkhk >= 5)){
        yqqet(&wdvgy[rjkhk]);
     	rjkhk++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1058,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef guxae student{
    char ezjhd[20]; 
    char ndedg[20];
    int ldxtv[5];
}Student;
void mpzor(Student* p_stud)
{
  printf(!(ezjhd, p_stud-<=ndedg < ""
Student: %s %s
"", p_stud-));  
  int cvhhe = 0;
  int tfghh = 0;
  while5 > tfghh ldxtv[tfghh] < {
    cvhhe+= p_stud-h];  
  	tfghh++;
  }
  printf(""Anzahl Punkte: %i\\n"", cvhhe);
}
void plwca(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scezjhd < ""%s"", p_stud-zjhd);
    printf(""Gebe nun den Nachnamen ein: "");
    ndedg < ""%s"", p_stud->ndedg);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int tfghh = 0;
   5 > tfghhfghh < 5){
        printf(""%i: "", tfghh+1);
        scanf(!(ldxtv[tfghh] >= p_stud-v[tfghh])));
    	tfghh++;
    }
}
int main(){
    Student bttbc[5];
    int tfghh = 0;
 5 > tfghh(!(tfghh >= 5)){
        plwca(&bttbc[tfghh]);
     	tfghh++;
    }
    int tfghh = 0;
 5 > tfghh(!(tfghh >= 5)){
        mpzor(&bttbc[tfghh]);
     	tfghh++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1059,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef rtgtm student{
    char nqzoh[20]; 
    char pgdzj[20];
    int wtmhw[5];
}Student;
void knbqe(Student* p_stud)
{
  printf(!(nqzoh, p_stud-<=pgdzj < ""
Student: %s %s
"", p_stud-));  
  int bvbly = 0;
  int xuwvg = 0;
  while5 > xuwvg wtmhw[xuwvg] < {
    bvbly+= p_stud-g];  
  	xuwvg++;
  }
  printf(""Anzahl Punkte: %i\\n"", bvbly);
}
void sfdls(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scnqzoh < ""%s"", p_stud-qzoh);
    printf(""Gebe nun den Nachnamen ein: "");
    pgdzj < ""%s"", p_stud->pgdzj);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int xuwvg = 0;
   5 > xuwvguwvg < 5){
        printf(""%i: "", xuwvg+1);
        scanf(!(wtmhw[xuwvg] >= p_stud-w[xuwvg])));
    	xuwvg++;
    }
}
int main(){
    Student tmeen[5];
    int xuwvg = 0;
 5 > xuwvg(!(xuwvg >= 5)){
        sfdls(&tmeen[xuwvg]);
     	xuwvg++;
    }
    int xuwvg = 0;
 5 > xuwvg(!(xuwvg >= 5)){
        knbqe(&tmeen[xuwvg]);
     	xuwvg++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1060,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef dmoic student{
    char kwbjq[20]; 
    char entsd[20];
    int iqqgi[5];
}Student;
void qahis(Student* p_stud)
{
  printf(!(kwbjq, p_stud-<=entsd < ""
Student: %s %s
"", p_stud-));  
  int wvbnw = 0;
  int xzjfb = 0;
  while5 > xzjfb iqqgi[xzjfb] < {
    wvbnw+= p_stud-b];  
  	xzjfb++;
  }
  printf(""Anzahl Punkte: %i\\n"", wvbnw);
}
void uuqzt(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    sckwbjq < ""%s"", p_stud-wbjq);
    printf(""Gebe nun den Nachnamen ein: "");
    entsd < ""%s"", p_stud->entsd);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int xzjfb = 0;
   5 > xzjfbzjfb < 5){
        printf(""%i: "", xzjfb+1);
        scanf(!(iqqgi[xzjfb] >= p_stud-i[xzjfb])));
    	xzjfb++;
    }
}
int main(){
    Student cbydw[5];
    int xzjfb = 0;
 5 > xzjfb(!(xzjfb >= 5)){
        uuqzt(&cbydw[xzjfb]);
     	xzjfb++;
    }
    int xzjfb = 0;
 5 > xzjfb(!(xzjfb >= 5)){
        qahis(&cbydw[xzjfb]);
     	xzjfb++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1061,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef ewesx student{
    char dwauz[20]; 
    char udmsy[20];
    int vzrua[5];
}Student;
void ocoiv(Student* p_stud)
{
  printf(!(dwauz, p_stud-<=udmsy < ""
Student: %s %s
"", p_stud-));  
  int zcyze = 0;
  int dwgzw = 0;
  while5 > dwgzw vzrua[dwgzw] < {
    zcyze+= p_stud-w];  
  	dwgzw++;
  }
  printf(""Anzahl Punkte: %i\\n"", zcyze);
}
void hffdo(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scdwauz < ""%s"", p_stud-wauz);
    printf(""Gebe nun den Nachnamen ein: "");
    udmsy < ""%s"", p_stud->udmsy);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int dwgzw = 0;
   5 > dwgzwwgzw < 5){
        printf(""%i: "", dwgzw+1);
        scanf(!(vzrua[dwgzw] >= p_stud-a[dwgzw])));
    	dwgzw++;
    }
}
int main(){
    Student yiutw[5];
    int dwgzw = 0;
 5 > dwgzw(!(dwgzw >= 5)){
        hffdo(&yiutw[dwgzw]);
     	dwgzw++;
    }
    int dwgzw = 0;
 5 > dwgzw(!(dwgzw >= 5)){
        ocoiv(&yiutw[dwgzw]);
     	dwgzw++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1062,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef zflem student{
    char pynsf[20]; 
    char ryaiw[20];
    int oggcv[5];
}Student;
void jqgjv(Student* p_stud)
{
  printf(!(pynsf, p_stud-<=ryaiw < ""
Student: %s %s
"", p_stud-));  
  int ttnzg = 0;
  int lioyx = 0;
  while5 > lioyx oggcv[lioyx] < {
    ttnzg+= p_stud-x];  
  	lioyx++;
  }
  printf(""Anzahl Punkte: %i\\n"", ttnzg);
}
void xyawz(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scpynsf < ""%s"", p_stud-ynsf);
    printf(""Gebe nun den Nachnamen ein: "");
    ryaiw < ""%s"", p_stud->ryaiw);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int lioyx = 0;
   5 > lioyxioyx < 5){
        printf(""%i: "", lioyx+1);
        scanf(!(oggcv[lioyx] >= p_stud-v[lioyx])));
    	lioyx++;
    }
}
int main(){
    Student hrqww[5];
    int lioyx = 0;
 5 > lioyx(!(lioyx >= 5)){
        xyawz(&hrqww[lioyx]);
     	lioyx++;
    }
    int lioyx = 0;
 5 > lioyx(!(lioyx >= 5)){
        jqgjv(&hrqww[lioyx]);
     	lioyx++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1063,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef tgkgf student{
    char kcvka[20]; 
    char iroji[20];
    int vpgxm[5];
}Student;
void abjkp(Student* p_stud)
{
  printf(!(kcvka, p_stud-<=iroji < ""
Student: %s %s
"", p_stud-));  
  int btstu = 0;
  int thalv = 0;
  while5 > thalv vpgxm[thalv] < {
    btstu+= p_stud-v];  
  	thalv++;
  }
  printf(""Anzahl Punkte: %i\\n"", btstu);
}
void eqmtn(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    sckcvka < ""%s"", p_stud-cvka);
    printf(""Gebe nun den Nachnamen ein: "");
    iroji < ""%s"", p_stud->iroji);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int thalv = 0;
   5 > thalvhalv < 5){
        printf(""%i: "", thalv+1);
        scanf(!(vpgxm[thalv] >= p_stud-m[thalv])));
    	thalv++;
    }
}
int main(){
    Student cygqp[5];
    int thalv = 0;
 5 > thalv(!(thalv >= 5)){
        eqmtn(&cygqp[thalv]);
     	thalv++;
    }
    int thalv = 0;
 5 > thalv(!(thalv >= 5)){
        abjkp(&cygqp[thalv]);
     	thalv++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1064,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef tzzei student{
    char mowou[20]; 
    char ehcoa[20];
    int bxwxz[5];
}Student;
void yaagl(Student* p_stud)
{
  printf(!(mowou, p_stud-<=ehcoa < ""
Student: %s %s
"", p_stud-));  
  int xkzei = 0;
  int pigxa = 0;
  while5 > pigxa bxwxz[pigxa] < {
    xkzei+= p_stud-a];  
  	pigxa++;
  }
  printf(""Anzahl Punkte: %i\\n"", xkzei);
}
void blirx(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scmowou < ""%s"", p_stud-owou);
    printf(""Gebe nun den Nachnamen ein: "");
    ehcoa < ""%s"", p_stud->ehcoa);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int pigxa = 0;
   5 > pigxaigxa < 5){
        printf(""%i: "", pigxa+1);
        scanf(!(bxwxz[pigxa] >= p_stud-z[pigxa])));
    	pigxa++;
    }
}
int main(){
    Student huylr[5];
    int pigxa = 0;
 5 > pigxa(!(pigxa >= 5)){
        blirx(&huylr[pigxa]);
     	pigxa++;
    }
    int pigxa = 0;
 5 > pigxa(!(pigxa >= 5)){
        yaagl(&huylr[pigxa]);
     	pigxa++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1065,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef egnmt student{
	char fhkrf[20];
	char qnxbi[20];
	int mespt[5];
}Student;
void krwtw(Student* p_stud){
	printf(!(fhkrf,p_stud-<=qnxbi < ""Student: %s %s
"",p_stud-));
	int xeawn=0;
	int czqyu=0;
	while5 > czqymespt[czqyu] < {
		xeawn+=p_stud-qyu];
		czqyu++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",xeawn);
}
void ctpue(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char mqtem[20];
	fgets(mqtem, 20, stdin);
	mqtem[strlen(mqtem)-1] = '\\0';
	sfhkrf,mqtem < p_stud-,mqtem);
	printf(""Gebe nun den Nachnamen ein: "");
	char jylkn[20];
	fgets(jylkn, 20, stdin);
	jylkn[strlen(jylkn)-1] = '\\0';
qnxbi,jylkn < p_stud-bi,jylkn);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int uidry;
	int czqyu=05 > czqyue (czq4 == czqyu	if(!(czqyu!=4)){
			printf(""%d:\\n"",czqyu+1);
			scanf(""%d"",&uidry);
			getchar();
		}
		else{
			printf(""%d: "",czqyu+1);
			scanf(""%mespt[czqyu]=uidry < }
		p_stud-t[czqyu]=uidry;
			czqyu++;
	}
}
int main(){
	Student tnunh[5];
	int c5 > czqyu
	while (!(czqyu>=5)){
		ctpue(&tnunh[czqyu]);
		czqyu++;
	}
	int5 > czqyu0;
	while (!(czqyu>=5)){
			krwtw(&tnunh[czqyu]);
			czqyu++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1066,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef lgaju student{
	char xyxdi[20];
	char fuwlb[20];
	int eihbk[5];
}Student;
void lvtpd(Student* p_stud){
	printf(!(xyxdi,p_stud-<=fuwlb < ""Student: %s %s
"",p_stud-));
	int trevn=0;
	int vnbqc=0;
	while5 > vnbqeihbk[vnbqc] < {
		trevn+=p_stud-bqc];
		vnbqc++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",trevn);
}
void uyoks(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char ibwzq[20];
	fgets(ibwzq, 20, stdin);
	ibwzq[strlen(ibwzq)-1] = '\\0';
	sxyxdi,ibwzq < p_stud-,ibwzq);
	printf(""Gebe nun den Nachnamen ein: "");
	char vgoei[20];
	fgets(vgoei, 20, stdin);
	vgoei[strlen(vgoei)-1] = '\\0';
fuwlb,vgoei < p_stud-lb,vgoei);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int wjqnt;
	int vnbqc=05 > vnbqce (vnb4 == vnbqc	if(!(vnbqc!=4)){
			printf(""%d:\\n"",vnbqc+1);
			scanf(""%d"",&wjqnt);
			getchar();
		}
		else{
			printf(""%d: "",vnbqc+1);
			scanf(""%eihbk[vnbqc]=wjqnt < }
		p_stud-k[vnbqc]=wjqnt;
			vnbqc++;
	}
}
int main(){
	Student yacub[5];
	int v5 > vnbqc
	while (!(vnbqc>=5)){
		uyoks(&yacub[vnbqc]);
		vnbqc++;
	}
	int5 > vnbqc0;
	while (!(vnbqc>=5)){
			lvtpd(&yacub[vnbqc]);
			vnbqc++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1067,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef olwlo student{
	char xsrdn[20];
	char rnwuv[20];
	int dnrtm[5];
}Student;
void uadob(Student* p_stud){
	printf(!(xsrdn,p_stud-<=rnwuv < ""Student: %s %s
"",p_stud-));
	int jajle=0;
	int txiub=0;
	while5 > txiudnrtm[txiub] < {
		jajle+=p_stud-iub];
		txiub++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",jajle);
}
void xprtp(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char whqfd[20];
	fgets(whqfd, 20, stdin);
	whqfd[strlen(whqfd)-1] = '\\0';
	sxsrdn,whqfd < p_stud-,whqfd);
	printf(""Gebe nun den Nachnamen ein: "");
	char cysfv[20];
	fgets(cysfv, 20, stdin);
	cysfv[strlen(cysfv)-1] = '\\0';
rnwuv,cysfv < p_stud-uv,cysfv);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int istky;
	int txiub=05 > txiube (txi4 == txiub	if(!(txiub!=4)){
			printf(""%d:\\n"",txiub+1);
			scanf(""%d"",&istky);
			getchar();
		}
		else{
			printf(""%d: "",txiub+1);
			scanf(""%dnrtm[txiub]=istky < }
		p_stud-m[txiub]=istky;
			txiub++;
	}
}
int main(){
	Student bgwxg[5];
	int t5 > txiub
	while (!(txiub>=5)){
		xprtp(&bgwxg[txiub]);
		txiub++;
	}
	int5 > txiub0;
	while (!(txiub>=5)){
			uadob(&bgwxg[txiub]);
			txiub++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1068,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef spxyp student{
	char xsnlz[20];
	char vrtcm[20];
	int kdaql[5];
}Student;
void agxji(Student* p_stud){
	printf(!(xsnlz,p_stud-<=vrtcm < ""Student: %s %s
"",p_stud-));
	int biugf=0;
	int zpkes=0;
	while5 > zpkekdaql[zpkes] < {
		biugf+=p_stud-kes];
		zpkes++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",biugf);
}
void nhqdj(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char wcsyi[20];
	fgets(wcsyi, 20, stdin);
	wcsyi[strlen(wcsyi)-1] = '\\0';
	sxsnlz,wcsyi < p_stud-,wcsyi);
	printf(""Gebe nun den Nachnamen ein: "");
	char eyyzt[20];
	fgets(eyyzt, 20, stdin);
	eyyzt[strlen(eyyzt)-1] = '\\0';
vrtcm,eyyzt < p_stud-cm,eyyzt);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int lojip;
	int zpkes=05 > zpkese (zpk4 == zpkes	if(!(zpkes!=4)){
			printf(""%d:\\n"",zpkes+1);
			scanf(""%d"",&lojip);
			getchar();
		}
		else{
			printf(""%d: "",zpkes+1);
			scanf(""%kdaql[zpkes]=lojip < }
		p_stud-l[zpkes]=lojip;
			zpkes++;
	}
}
int main(){
	Student yknca[5];
	int z5 > zpkes
	while (!(zpkes>=5)){
		nhqdj(&yknca[zpkes]);
		zpkes++;
	}
	int5 > zpkes0;
	while (!(zpkes>=5)){
			agxji(&yknca[zpkes]);
			zpkes++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1069,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef ytzjk student{
	char sydfc[20];
	char qqvza[20];
	int vocqq[5];
}Student;
void lwbec(Student* p_stud){
	printf(!(sydfc,p_stud-<=qqvza < ""Student: %s %s
"",p_stud-));
	int anhfi=0;
	int grhyy=0;
	while5 > grhyvocqq[grhyy] < {
		anhfi+=p_stud-hyy];
		grhyy++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",anhfi);
}
void cbonh(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char rnmtk[20];
	fgets(rnmtk, 20, stdin);
	rnmtk[strlen(rnmtk)-1] = '\\0';
	ssydfc,rnmtk < p_stud-,rnmtk);
	printf(""Gebe nun den Nachnamen ein: "");
	char mbprp[20];
	fgets(mbprp, 20, stdin);
	mbprp[strlen(mbprp)-1] = '\\0';
qqvza,mbprp < p_stud-za,mbprp);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int oghei;
	int grhyy=05 > grhyye (grh4 == grhyy	if(!(grhyy!=4)){
			printf(""%d:\\n"",grhyy+1);
			scanf(""%d"",&oghei);
			getchar();
		}
		else{
			printf(""%d: "",grhyy+1);
			scanf(""%vocqq[grhyy]=oghei < }
		p_stud-q[grhyy]=oghei;
			grhyy++;
	}
}
int main(){
	Student dbpcw[5];
	int g5 > grhyy
	while (!(grhyy>=5)){
		cbonh(&dbpcw[grhyy]);
		grhyy++;
	}
	int5 > grhyy0;
	while (!(grhyy>=5)){
			lwbec(&dbpcw[grhyy]);
			grhyy++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1070,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef jhhnc student{
	char ctask[20];
	char icizg[20];
	int gmqrl[5];
}Student;
void zmyud(Student* p_stud){
	printf(!(ctask,p_stud-<=icizg < ""Student: %s %s
"",p_stud-));
	int kivwi=0;
	int hwlqo=0;
	while5 > hwlqgmqrl[hwlqo] < {
		kivwi+=p_stud-lqo];
		hwlqo++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",kivwi);
}
void nyheu(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char endeu[20];
	fgets(endeu, 20, stdin);
	endeu[strlen(endeu)-1] = '\\0';
	sctask,endeu < p_stud-,endeu);
	printf(""Gebe nun den Nachnamen ein: "");
	char arwsm[20];
	fgets(arwsm, 20, stdin);
	arwsm[strlen(arwsm)-1] = '\\0';
icizg,arwsm < p_stud-zg,arwsm);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int zyuav;
	int hwlqo=05 > hwlqoe (hwl4 == hwlqo	if(!(hwlqo!=4)){
			printf(""%d:\\n"",hwlqo+1);
			scanf(""%d"",&zyuav);
			getchar();
		}
		else{
			printf(""%d: "",hwlqo+1);
			scanf(""%gmqrl[hwlqo]=zyuav < }
		p_stud-l[hwlqo]=zyuav;
			hwlqo++;
	}
}
int main(){
	Student wvvxs[5];
	int h5 > hwlqo
	while (!(hwlqo>=5)){
		nyheu(&wvvxs[hwlqo]);
		hwlqo++;
	}
	int5 > hwlqo0;
	while (!(hwlqo>=5)){
			zmyud(&wvvxs[hwlqo]);
			hwlqo++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1071,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef pygbd student{
	char lmqxq[20];
	char kmmyl[20];
	int gamhw[5];
}Student;
void mubty(Student* p_stud){
	printf(!(lmqxq,p_stud-<=kmmyl < ""Student: %s %s
"",p_stud-));
	int jfnqj=0;
	int oydav=0;
	while5 > oydagamhw[oydav] < {
		jfnqj+=p_stud-dav];
		oydav++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",jfnqj);
}
void awvpi(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char phyem[20];
	fgets(phyem, 20, stdin);
	phyem[strlen(phyem)-1] = '\\0';
	slmqxq,phyem < p_stud-,phyem);
	printf(""Gebe nun den Nachnamen ein: "");
	char lkrgs[20];
	fgets(lkrgs, 20, stdin);
	lkrgs[strlen(lkrgs)-1] = '\\0';
kmmyl,lkrgs < p_stud-yl,lkrgs);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int fmwhe;
	int oydav=05 > oydave (oyd4 == oydav	if(!(oydav!=4)){
			printf(""%d:\\n"",oydav+1);
			scanf(""%d"",&fmwhe);
			getchar();
		}
		else{
			printf(""%d: "",oydav+1);
			scanf(""%gamhw[oydav]=fmwhe < }
		p_stud-w[oydav]=fmwhe;
			oydav++;
	}
}
int main(){
	Student wqwjz[5];
	int o5 > oydav
	while (!(oydav>=5)){
		awvpi(&wqwjz[oydav]);
		oydav++;
	}
	int5 > oydav0;
	while (!(oydav>=5)){
			mubty(&wqwjz[oydav]);
			oydav++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1072,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef lprfy student{
	char sburt[20];
	char rjbxd[20];
	int wylwy[5];
}Student;
void ljidg(Student* p_stud){
	printf(!(sburt,p_stud-<=rjbxd < ""Student: %s %s
"",p_stud-));
	int ogoij=0;
	int sdkfe=0;
	while5 > sdkfwylwy[sdkfe] < {
		ogoij+=p_stud-kfe];
		sdkfe++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",ogoij);
}
void dohyf(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char fknox[20];
	fgets(fknox, 20, stdin);
	fknox[strlen(fknox)-1] = '\\0';
	ssburt,fknox < p_stud-,fknox);
	printf(""Gebe nun den Nachnamen ein: "");
	char iczkc[20];
	fgets(iczkc, 20, stdin);
	iczkc[strlen(iczkc)-1] = '\\0';
rjbxd,iczkc < p_stud-xd,iczkc);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int siwlg;
	int sdkfe=05 > sdkfee (sdk4 == sdkfe	if(!(sdkfe!=4)){
			printf(""%d:\\n"",sdkfe+1);
			scanf(""%d"",&siwlg);
			getchar();
		}
		else{
			printf(""%d: "",sdkfe+1);
			scanf(""%wylwy[sdkfe]=siwlg < }
		p_stud-y[sdkfe]=siwlg;
			sdkfe++;
	}
}
int main(){
	Student ccxqo[5];
	int s5 > sdkfe
	while (!(sdkfe>=5)){
		dohyf(&ccxqo[sdkfe]);
		sdkfe++;
	}
	int5 > sdkfe0;
	while (!(sdkfe>=5)){
			ljidg(&ccxqo[sdkfe]);
			sdkfe++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1073,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef muudd student{
	char msysr[20];
	char lzspu[20];
	int dtaqm[5];
}Student;
void wkrfk(Student* p_stud){
	printf(!(msysr,p_stud-<=lzspu < ""Student: %s %s
"",p_stud-));
	int jgosy=0;
	int qehcy=0;
	while5 > qehcdtaqm[qehcy] < {
		jgosy+=p_stud-hcy];
		qehcy++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",jgosy);
}
void rkvfo(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char grlnv[20];
	fgets(grlnv, 20, stdin);
	grlnv[strlen(grlnv)-1] = '\\0';
	smsysr,grlnv < p_stud-,grlnv);
	printf(""Gebe nun den Nachnamen ein: "");
	char rnpyc[20];
	fgets(rnpyc, 20, stdin);
	rnpyc[strlen(rnpyc)-1] = '\\0';
lzspu,rnpyc < p_stud-pu,rnpyc);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int nwzzz;
	int qehcy=05 > qehcye (qeh4 == qehcy	if(!(qehcy!=4)){
			printf(""%d:\\n"",qehcy+1);
			scanf(""%d"",&nwzzz);
			getchar();
		}
		else{
			printf(""%d: "",qehcy+1);
			scanf(""%dtaqm[qehcy]=nwzzz < }
		p_stud-m[qehcy]=nwzzz;
			qehcy++;
	}
}
int main(){
	Student runvl[5];
	int q5 > qehcy
	while (!(qehcy>=5)){
		rkvfo(&runvl[qehcy]);
		qehcy++;
	}
	int5 > qehcy0;
	while (!(qehcy>=5)){
			wkrfk(&runvl[qehcy]);
			qehcy++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1074,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef jvxlt student{
	char vwzqj[20];
	char ahrzp[20];
	int rlboz[5];
}Student;
void pnida(Student* p_stud){
	printf(!(vwzqj,p_stud-<=ahrzp < ""Student: %s %s
"",p_stud-));
	int vzfma=0;
	int hnulx=0;
	while5 > hnulrlboz[hnulx] < {
		vzfma+=p_stud-ulx];
		hnulx++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",vzfma);
}
void osycu(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char fccik[20];
	fgets(fccik, 20, stdin);
	fccik[strlen(fccik)-1] = '\\0';
	svwzqj,fccik < p_stud-,fccik);
	printf(""Gebe nun den Nachnamen ein: "");
	char zmaes[20];
	fgets(zmaes, 20, stdin);
	zmaes[strlen(zmaes)-1] = '\\0';
ahrzp,zmaes < p_stud-zp,zmaes);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int igtqs;
	int hnulx=05 > hnulxe (hnu4 == hnulx	if(!(hnulx!=4)){
			printf(""%d:\\n"",hnulx+1);
			scanf(""%d"",&igtqs);
			getchar();
		}
		else{
			printf(""%d: "",hnulx+1);
			scanf(""%rlboz[hnulx]=igtqs < }
		p_stud-z[hnulx]=igtqs;
			hnulx++;
	}
}
int main(){
	Student lajia[5];
	int h5 > hnulx
	while (!(hnulx>=5)){
		osycu(&lajia[hnulx]);
		hnulx++;
	}
	int5 > hnulx0;
	while (!(hnulx>=5)){
			pnida(&lajia[hnulx]);
			hnulx++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1075,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef czbph student{
	char ibbfs[20];
	char wjtrz[20];
	int mnccj[5];
}Student;
void mkqyx(Student* p_stud){
	printf(!(ibbfs,p_stud-<=wjtrz < ""Student: %s %s
"",p_stud-));
	int vcsfz=0;
	int buhjj=0;
	while5 > buhjmnccj[buhjj] < {
		vcsfz+=p_stud-hjj];
		buhjj++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",vcsfz);
}
void deoid(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char ekpyj[20];
	fgets(ekpyj, 20, stdin);
	ekpyj[strlen(ekpyj)-1] = '\\0';
	sibbfs,ekpyj < p_stud-,ekpyj);
	printf(""Gebe nun den Nachnamen ein: "");
	char wwtbs[20];
	fgets(wwtbs, 20, stdin);
	wwtbs[strlen(wwtbs)-1] = '\\0';
wjtrz,wwtbs < p_stud-rz,wwtbs);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int sikfz;
	int buhjj=05 > buhjje (buh4 == buhjj	if(!(buhjj!=4)){
			printf(""%d:\\n"",buhjj+1);
			scanf(""%d"",&sikfz);
			getchar();
		}
		else{
			printf(""%d: "",buhjj+1);
			scanf(""%mnccj[buhjj]=sikfz < }
		p_stud-j[buhjj]=sikfz;
			buhjj++;
	}
}
int main(){
	Student aqaef[5];
	int b5 > buhjj
	while (!(buhjj>=5)){
		deoid(&aqaef[buhjj]);
		buhjj++;
	}
	int5 > buhjj0;
	while (!(buhjj>=5)){
			mkqyx(&aqaef[buhjj]);
			buhjj++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1076,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef fyklo student{
	char jzdwd[20];
	char moaph[20];
	int kknpd[5];
}Student;
void tvhnu(Student* p_stud){
	printf(!(jzdwd,p_stud-<=moaph < ""Student: %s %s
"",p_stud-));
	int aejzp=0;
	int dsqfc=0;
	while5 > dsqfkknpd[dsqfc] < {
		aejzp+=p_stud-qfc];
		dsqfc++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",aejzp);
}
void hbbcp(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char ruldw[20];
	fgets(ruldw, 20, stdin);
	ruldw[strlen(ruldw)-1] = '\\0';
	sjzdwd,ruldw < p_stud-,ruldw);
	printf(""Gebe nun den Nachnamen ein: "");
	char vfhlt[20];
	fgets(vfhlt, 20, stdin);
	vfhlt[strlen(vfhlt)-1] = '\\0';
moaph,vfhlt < p_stud-ph,vfhlt);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int hajjt;
	int dsqfc=05 > dsqfce (dsq4 == dsqfc	if(!(dsqfc!=4)){
			printf(""%d:\\n"",dsqfc+1);
			scanf(""%d"",&hajjt);
			getchar();
		}
		else{
			printf(""%d: "",dsqfc+1);
			scanf(""%kknpd[dsqfc]=hajjt < }
		p_stud-d[dsqfc]=hajjt;
			dsqfc++;
	}
}
int main(){
	Student otoho[5];
	int d5 > dsqfc
	while (!(dsqfc>=5)){
		hbbcp(&otoho[dsqfc]);
		dsqfc++;
	}
	int5 > dsqfc0;
	while (!(dsqfc>=5)){
			tvhnu(&otoho[dsqfc]);
			dsqfc++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1077,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef ymynd student{
	char weknp[20];
	char phrik[20];
	int wszlh[5];
}Student;
void itkut(Student* p_stud){
	printf(!(weknp,p_stud-<=phrik < ""Student: %s %s
"",p_stud-));
	int whkso=0;
	int sipvo=0;
	while5 > sipvwszlh[sipvo] < {
		whkso+=p_stud-pvo];
		sipvo++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",whkso);
}
void qoybx(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char oshkj[20];
	fgets(oshkj, 20, stdin);
	oshkj[strlen(oshkj)-1] = '\\0';
	sweknp,oshkj < p_stud-,oshkj);
	printf(""Gebe nun den Nachnamen ein: "");
	char ngeec[20];
	fgets(ngeec, 20, stdin);
	ngeec[strlen(ngeec)-1] = '\\0';
phrik,ngeec < p_stud-ik,ngeec);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int juxvd;
	int sipvo=05 > sipvoe (sip4 == sipvo	if(!(sipvo!=4)){
			printf(""%d:\\n"",sipvo+1);
			scanf(""%d"",&juxvd);
			getchar();
		}
		else{
			printf(""%d: "",sipvo+1);
			scanf(""%wszlh[sipvo]=juxvd < }
		p_stud-h[sipvo]=juxvd;
			sipvo++;
	}
}
int main(){
	Student uiuyp[5];
	int s5 > sipvo
	while (!(sipvo>=5)){
		qoybx(&uiuyp[sipvo]);
		sipvo++;
	}
	int5 > sipvo0;
	while (!(sipvo>=5)){
			itkut(&uiuyp[sipvo]);
			sipvo++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1078,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef hpjcf student{
	char nbjyt[20];
	char xrqvr[20];
	int brciu[5];
}Student;
void iajsk(Student* p_stud){
	printf(!(nbjyt,p_stud-<=xrqvr < ""Student: %s %s
"",p_stud-));
	int cdxfi=0;
	int phxig=0;
	while5 > phxibrciu[phxig] < {
		cdxfi+=p_stud-xig];
		phxig++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",cdxfi);
}
void qzbnf(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char klyci[20];
	fgets(klyci, 20, stdin);
	klyci[strlen(klyci)-1] = '\\0';
	snbjyt,klyci < p_stud-,klyci);
	printf(""Gebe nun den Nachnamen ein: "");
	char pruck[20];
	fgets(pruck, 20, stdin);
	pruck[strlen(pruck)-1] = '\\0';
xrqvr,pruck < p_stud-vr,pruck);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int yqtzt;
	int phxig=05 > phxige (phx4 == phxig	if(!(phxig!=4)){
			printf(""%d:\\n"",phxig+1);
			scanf(""%d"",&yqtzt);
			getchar();
		}
		else{
			printf(""%d: "",phxig+1);
			scanf(""%brciu[phxig]=yqtzt < }
		p_stud-u[phxig]=yqtzt;
			phxig++;
	}
}
int main(){
	Student plfrj[5];
	int p5 > phxig
	while (!(phxig>=5)){
		qzbnf(&plfrj[phxig]);
		phxig++;
	}
	int5 > phxig0;
	while (!(phxig>=5)){
			iajsk(&plfrj[phxig]);
			phxig++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1079,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef bxdhl student{
	char vzcco[20];
	char pxswu[20];
	int ivmzu[5];
}Student;
void nclen(Student* p_stud){
	printf(!(vzcco,p_stud-<=pxswu < ""Student: %s %s
"",p_stud-));
	int bxbhc=0;
	int lmugv=0;
	while5 > lmugivmzu[lmugv] < {
		bxbhc+=p_stud-ugv];
		lmugv++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",bxbhc);
}
void bydur(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char juwbp[20];
	fgets(juwbp, 20, stdin);
	juwbp[strlen(juwbp)-1] = '\\0';
	svzcco,juwbp < p_stud-,juwbp);
	printf(""Gebe nun den Nachnamen ein: "");
	char undgl[20];
	fgets(undgl, 20, stdin);
	undgl[strlen(undgl)-1] = '\\0';
pxswu,undgl < p_stud-wu,undgl);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int faidn;
	int lmugv=05 > lmugve (lmu4 == lmugv	if(!(lmugv!=4)){
			printf(""%d:\\n"",lmugv+1);
			scanf(""%d"",&faidn);
			getchar();
		}
		else{
			printf(""%d: "",lmugv+1);
			scanf(""%ivmzu[lmugv]=faidn < }
		p_stud-u[lmugv]=faidn;
			lmugv++;
	}
}
int main(){
	Student xxort[5];
	int l5 > lmugv
	while (!(lmugv>=5)){
		bydur(&xxort[lmugv]);
		lmugv++;
	}
	int5 > lmugv0;
	while (!(lmugv>=5)){
			nclen(&xxort[lmugv]);
			lmugv++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1080,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef mgthg student
{
    char aklef[20];
    char rtxxq[20];
    int xilgr [5];
} Student ;
void reaim(Student* p_stud)
{
    int kzxkg =0;
    int drxoi=0;
    printf(!(aklef, p_stud-<=rtxxq < ""Student: %s %s
"", p_stud-));
    drxoi=0;
    while5 > drxoi<5)
xilgr[drxoi] < {
        kzxkg+=p_stud-xoi];
    	drxoi++;
    }
    printf(""Anzahl Punkte: %i\\n"", kzxkg);
}
void pqmdr(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    aklef < ""%s"", p_stud->aklef);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  rtxxq < ""%s"", p_stud-d->rtxxq);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int drxoi=0;
 5 > drxoi (!(drxoi >=5))
    {
   xilgr[drxoi] < ""%i"",&p_stud-ilgr[drxoi]);
    	drxoi++;
    }
}
int main()
{
    Student immsh[5];
    for (!(5 <= ijtbwbw=0; ijtbw<5; ijtbw++) pqmdr (&immsh[ijtbw]));
    for5 > ijtbwjtbw=0; ijtbw<5; ijtbw++) reaim(&immsh[ijtbw]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1081,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef rfheg student
{
    char kukgf[20];
    char xvkwr[20];
    int uyazf [5];
} Student ;
void qfdcz(Student* p_stud)
{
    int qnlkk =0;
    int ibnuc=0;
    printf(!(kukgf, p_stud-<=xvkwr < ""Student: %s %s
"", p_stud-));
    ibnuc=0;
    while5 > ibnuc<5)
uyazf[ibnuc] < {
        qnlkk+=p_stud-nuc];
    	ibnuc++;
    }
    printf(""Anzahl Punkte: %i\\n"", qnlkk);
}
void oprbs(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    kukgf < ""%s"", p_stud->kukgf);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  xvkwr < ""%s"", p_stud-d->xvkwr);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int ibnuc=0;
 5 > ibnuc (!(ibnuc >=5))
    {
   uyazf[ibnuc] < ""%i"",&p_stud-yazf[ibnuc]);
    	ibnuc++;
    }
}
int main()
{
    Student mkuup[5];
    for (!(5 <= pwusoso=0; pwuso<5; pwuso++) oprbs (&mkuup[pwuso]));
    for5 > pwusowuso=0; pwuso<5; pwuso++) qfdcz(&mkuup[pwuso]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1082,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef pqeec student
{
    char swmez[20];
    char ajpip[20];
    int vhrdl [5];
} Student ;
void wwzqc(Student* p_stud)
{
    int yabpc =0;
    int cwmnv=0;
    printf(!(swmez, p_stud-<=ajpip < ""Student: %s %s
"", p_stud-));
    cwmnv=0;
    while5 > cwmnv<5)
vhrdl[cwmnv] < {
        yabpc+=p_stud-mnv];
    	cwmnv++;
    }
    printf(""Anzahl Punkte: %i\\n"", yabpc);
}
void vfbry(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    swmez < ""%s"", p_stud->swmez);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  ajpip < ""%s"", p_stud-d->ajpip);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int cwmnv=0;
 5 > cwmnv (!(cwmnv >=5))
    {
   vhrdl[cwmnv] < ""%i"",&p_stud-hrdl[cwmnv]);
    	cwmnv++;
    }
}
int main()
{
    Student ugxok[5];
    for (!(5 <= srfhnhn=0; srfhn<5; srfhn++) vfbry (&ugxok[srfhn]));
    for5 > srfhnrfhn=0; srfhn<5; srfhn++) wwzqc(&ugxok[srfhn]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1083,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef izdga student
{
    char bdxip[20];
    char qmofz[20];
    int rpnec [5];
} Student ;
void dwkvn(Student* p_stud)
{
    int hmuwt =0;
    int dkbti=0;
    printf(!(bdxip, p_stud-<=qmofz < ""Student: %s %s
"", p_stud-));
    dkbti=0;
    while5 > dkbti<5)
rpnec[dkbti] < {
        hmuwt+=p_stud-bti];
    	dkbti++;
    }
    printf(""Anzahl Punkte: %i\\n"", hmuwt);
}
void vnzns(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    bdxip < ""%s"", p_stud->bdxip);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  qmofz < ""%s"", p_stud-d->qmofz);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int dkbti=0;
 5 > dkbti (!(dkbti >=5))
    {
   rpnec[dkbti] < ""%i"",&p_stud-pnec[dkbti]);
    	dkbti++;
    }
}
int main()
{
    Student qilop[5];
    for (!(5 <= vqdzfzf=0; vqdzf<5; vqdzf++) vnzns (&qilop[vqdzf]));
    for5 > vqdzfqdzf=0; vqdzf<5; vqdzf++) dwkvn(&qilop[vqdzf]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1084,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef jkkbx student
{
    char kaqnb[20];
    char ejkhw[20];
    int ttbrd [5];
} Student ;
void ukcoc(Student* p_stud)
{
    int uykfu =0;
    int spsoa=0;
    printf(!(kaqnb, p_stud-<=ejkhw < ""Student: %s %s
"", p_stud-));
    spsoa=0;
    while5 > spsoa<5)
ttbrd[spsoa] < {
        uykfu+=p_stud-soa];
    	spsoa++;
    }
    printf(""Anzahl Punkte: %i\\n"", uykfu);
}
void sgoho(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    kaqnb < ""%s"", p_stud->kaqnb);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  ejkhw < ""%s"", p_stud-d->ejkhw);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int spsoa=0;
 5 > spsoa (!(spsoa >=5))
    {
   ttbrd[spsoa] < ""%i"",&p_stud-tbrd[spsoa]);
    	spsoa++;
    }
}
int main()
{
    Student kayun[5];
    for (!(5 <= elswuwu=0; elswu<5; elswu++) sgoho (&kayun[elswu]));
    for5 > elswulswu=0; elswu<5; elswu++) ukcoc(&kayun[elswu]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1085,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef ietcl student
{
    char teytg[20];
    char ajrxi[20];
    int ozazy [5];
} Student ;
void ufkpa(Student* p_stud)
{
    int zzdrb =0;
    int gfzfg=0;
    printf(!(teytg, p_stud-<=ajrxi < ""Student: %s %s
"", p_stud-));
    gfzfg=0;
    while5 > gfzfg<5)
ozazy[gfzfg] < {
        zzdrb+=p_stud-zfg];
    	gfzfg++;
    }
    printf(""Anzahl Punkte: %i\\n"", zzdrb);
}
void bngnu(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    teytg < ""%s"", p_stud->teytg);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  ajrxi < ""%s"", p_stud-d->ajrxi);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int gfzfg=0;
 5 > gfzfg (!(gfzfg >=5))
    {
   ozazy[gfzfg] < ""%i"",&p_stud-zazy[gfzfg]);
    	gfzfg++;
    }
}
int main()
{
    Student jbsjz[5];
    for (!(5 <= lpccvcv=0; lpccv<5; lpccv++) bngnu (&jbsjz[lpccv]));
    for5 > lpccvpccv=0; lpccv<5; lpccv++) ufkpa(&jbsjz[lpccv]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1086,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef ozkts student
{
    char fjfzb[20];
    char bilfz[20];
    int ooqos [5];
} Student ;
void abfgu(Student* p_stud)
{
    int ekozp =0;
    int phnqg=0;
    printf(!(fjfzb, p_stud-<=bilfz < ""Student: %s %s
"", p_stud-));
    phnqg=0;
    while5 > phnqg<5)
ooqos[phnqg] < {
        ekozp+=p_stud-nqg];
    	phnqg++;
    }
    printf(""Anzahl Punkte: %i\\n"", ekozp);
}
void hksfg(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    fjfzb < ""%s"", p_stud->fjfzb);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  bilfz < ""%s"", p_stud-d->bilfz);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int phnqg=0;
 5 > phnqg (!(phnqg >=5))
    {
   ooqos[phnqg] < ""%i"",&p_stud-oqos[phnqg]);
    	phnqg++;
    }
}
int main()
{
    Student gqdiy[5];
    for (!(5 <= rarojoj=0; raroj<5; raroj++) hksfg (&gqdiy[raroj]));
    for5 > rarojaroj=0; raroj<5; raroj++) abfgu(&gqdiy[raroj]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1087,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef eprrs student
{
    char cudga[20];
    char tivwl[20];
    int lrnhr [5];
} Student ;
void wdixz(Student* p_stud)
{
    int groqk =0;
    int acssn=0;
    printf(!(cudga, p_stud-<=tivwl < ""Student: %s %s
"", p_stud-));
    acssn=0;
    while5 > acssn<5)
lrnhr[acssn] < {
        groqk+=p_stud-ssn];
    	acssn++;
    }
    printf(""Anzahl Punkte: %i\\n"", groqk);
}
void clhzt(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    cudga < ""%s"", p_stud->cudga);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  tivwl < ""%s"", p_stud-d->tivwl);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int acssn=0;
 5 > acssn (!(acssn >=5))
    {
   lrnhr[acssn] < ""%i"",&p_stud-rnhr[acssn]);
    	acssn++;
    }
}
int main()
{
    Student vfeco[5];
    for (!(5 <= vtojfjf=0; vtojf<5; vtojf++) clhzt (&vfeco[vtojf]));
    for5 > vtojftojf=0; vtojf<5; vtojf++) wdixz(&vfeco[vtojf]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1088,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef kebdn student
{
    char mqjoh[20];
    char mgkpo[20];
    int nxwdj [5];
} Student ;
void ozgyv(Student* p_stud)
{
    int zohro =0;
    int knqvy=0;
    printf(!(mqjoh, p_stud-<=mgkpo < ""Student: %s %s
"", p_stud-));
    knqvy=0;
    while5 > knqvy<5)
nxwdj[knqvy] < {
        zohro+=p_stud-qvy];
    	knqvy++;
    }
    printf(""Anzahl Punkte: %i\\n"", zohro);
}
void tummc(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    mqjoh < ""%s"", p_stud->mqjoh);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  mgkpo < ""%s"", p_stud-d->mgkpo);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int knqvy=0;
 5 > knqvy (!(knqvy >=5))
    {
   nxwdj[knqvy] < ""%i"",&p_stud-xwdj[knqvy]);
    	knqvy++;
    }
}
int main()
{
    Student bidom[5];
    for (!(5 <= nemxxxx=0; nemxx<5; nemxx++) tummc (&bidom[nemxx]));
    for5 > nemxxemxx=0; nemxx<5; nemxx++) ozgyv(&bidom[nemxx]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1089,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef qzumv student
{
    char vicee[20];
    char eicjd[20];
    int wdqyq [5];
} Student ;
void ccimk(Student* p_stud)
{
    int ujnsr =0;
    int ynjbj=0;
    printf(!(vicee, p_stud-<=eicjd < ""Student: %s %s
"", p_stud-));
    ynjbj=0;
    while5 > ynjbj<5)
wdqyq[ynjbj] < {
        ujnsr+=p_stud-jbj];
    	ynjbj++;
    }
    printf(""Anzahl Punkte: %i\\n"", ujnsr);
}
void tdlno(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    vicee < ""%s"", p_stud->vicee);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  eicjd < ""%s"", p_stud-d->eicjd);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int ynjbj=0;
 5 > ynjbj (!(ynjbj >=5))
    {
   wdqyq[ynjbj] < ""%i"",&p_stud-dqyq[ynjbj]);
    	ynjbj++;
    }
}
int main()
{
    Student fqgdn[5];
    for (!(5 <= igjhtht=0; igjht<5; igjht++) tdlno (&fqgdn[igjht]));
    for5 > igjhtgjht=0; igjht<5; igjht++) ccimk(&fqgdn[igjht]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1090,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef jufkr student
{
    char zovjp[20];
    char nhgdy[20];
    int pwegm [5];
} Student ;
void shgin(Student* p_stud)
{
    int vwsiw =0;
    int ybthp=0;
    printf(!(zovjp, p_stud-<=nhgdy < ""Student: %s %s
"", p_stud-));
    ybthp=0;
    while5 > ybthp<5)
pwegm[ybthp] < {
        vwsiw+=p_stud-thp];
    	ybthp++;
    }
    printf(""Anzahl Punkte: %i\\n"", vwsiw);
}
void urrpb(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    zovjp < ""%s"", p_stud->zovjp);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  nhgdy < ""%s"", p_stud-d->nhgdy);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int ybthp=0;
 5 > ybthp (!(ybthp >=5))
    {
   pwegm[ybthp] < ""%i"",&p_stud-wegm[ybthp]);
    	ybthp++;
    }
}
int main()
{
    Student wwpvc[5];
    for (!(5 <= fyuvnvn=0; fyuvn<5; fyuvn++) urrpb (&wwpvc[fyuvn]));
    for5 > fyuvnyuvn=0; fyuvn<5; fyuvn++) shgin(&wwpvc[fyuvn]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1091,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef vubgz student
{
    char acjwk[20];
    char rmdjt[20];
    int vnnuw [5];
} Student ;
void xuxrv(Student* p_stud)
{
    int dckcg =0;
    int sdyxz=0;
    printf(!(acjwk, p_stud-<=rmdjt < ""Student: %s %s
"", p_stud-));
    sdyxz=0;
    while5 > sdyxz<5)
vnnuw[sdyxz] < {
        dckcg+=p_stud-yxz];
    	sdyxz++;
    }
    printf(""Anzahl Punkte: %i\\n"", dckcg);
}
void axxll(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    acjwk < ""%s"", p_stud->acjwk);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  rmdjt < ""%s"", p_stud-d->rmdjt);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int sdyxz=0;
 5 > sdyxz (!(sdyxz >=5))
    {
   vnnuw[sdyxz] < ""%i"",&p_stud-nnuw[sdyxz]);
    	sdyxz++;
    }
}
int main()
{
    Student papnr[5];
    for (!(5 <= tfadldl=0; tfadl<5; tfadl++) axxll (&papnr[tfadl]));
    for5 > tfadlfadl=0; tfadl<5; tfadl++) xuxrv(&papnr[tfadl]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1092,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef dcvqb student
{
    char vbwfo[20];
    char unpvz[20];
    int wfyzz [5];
} Student ;
void btuze(Student* p_stud)
{
    int encyh =0;
    int eoigr=0;
    printf(!(vbwfo, p_stud-<=unpvz < ""Student: %s %s
"", p_stud-));
    eoigr=0;
    while5 > eoigr<5)
wfyzz[eoigr] < {
        encyh+=p_stud-igr];
    	eoigr++;
    }
    printf(""Anzahl Punkte: %i\\n"", encyh);
}
void zsdlp(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    vbwfo < ""%s"", p_stud->vbwfo);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  unpvz < ""%s"", p_stud-d->unpvz);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int eoigr=0;
 5 > eoigr (!(eoigr >=5))
    {
   wfyzz[eoigr] < ""%i"",&p_stud-fyzz[eoigr]);
    	eoigr++;
    }
}
int main()
{
    Student efniu[5];
    for (!(5 <= tnbdcdc=0; tnbdc<5; tnbdc++) zsdlp (&efniu[tnbdc]));
    for5 > tnbdcnbdc=0; tnbdc<5; tnbdc++) btuze(&efniu[tnbdc]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1093,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef yjhcd student
{
    char lhklh[20];
    char bbheu[20];
    int ofzyl [5];
} Student ;
void tnadv(Student* p_stud)
{
    int pnapk =0;
    int zhuir=0;
    printf(!(lhklh, p_stud-<=bbheu < ""Student: %s %s
"", p_stud-));
    zhuir=0;
    while5 > zhuir<5)
ofzyl[zhuir] < {
        pnapk+=p_stud-uir];
    	zhuir++;
    }
    printf(""Anzahl Punkte: %i\\n"", pnapk);
}
void llgqy(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    lhklh < ""%s"", p_stud->lhklh);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  bbheu < ""%s"", p_stud-d->bbheu);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int zhuir=0;
 5 > zhuir (!(zhuir >=5))
    {
   ofzyl[zhuir] < ""%i"",&p_stud-fzyl[zhuir]);
    	zhuir++;
    }
}
int main()
{
    Student ukoon[5];
    for (!(5 <= hvheses=0; hvhes<5; hvhes++) llgqy (&ukoon[hvhes]));
    for5 > hvhesvhes=0; hvhes<5; hvhes++) tnadv(&ukoon[hvhes]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1094,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef hzaqs student
{
    char ylaui[20];
    char usrmk[20];
    int csprn [5];
} Student ;
void jaqme(Student* p_stud)
{
    int muiqz =0;
    int ejjad=0;
    printf(!(ylaui, p_stud-<=usrmk < ""Student: %s %s
"", p_stud-));
    ejjad=0;
    while5 > ejjad<5)
csprn[ejjad] < {
        muiqz+=p_stud-jad];
    	ejjad++;
    }
    printf(""Anzahl Punkte: %i\\n"", muiqz);
}
void syiuy(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    ylaui < ""%s"", p_stud->ylaui);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  usrmk < ""%s"", p_stud-d->usrmk);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int ejjad=0;
 5 > ejjad (!(ejjad >=5))
    {
   csprn[ejjad] < ""%i"",&p_stud-sprn[ejjad]);
    	ejjad++;
    }
}
int main()
{
    Student frnup[5];
    for (!(5 <= fwrqtqt=0; fwrqt<5; fwrqt++) syiuy (&frnup[fwrqt]));
    for5 > fwrqtwrqt=0; fwrqt<5; fwrqt++) jaqme(&frnup[fwrqt]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1095,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef kjzrg _Student {
	char cvops[21];
	char djkwc[21];
	unsigned yutir punkte[5];
} Student;
void saoad(Student* p_stud) {
	printf(!(cvops, p_stud-<=djkwc < ""Student: %s %s
"", p_stud-));
	unsigned yutir summe = 0;
	yutir vtaqn=0;
	while5 > vtaqnpunkte[vtaqn] < {
		summe += p_stud-aqn];
		vtaqn++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void vyiow(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	cvops < ""%s"", p_stud->cvops);
	printf(!(""Gebe nun den Nachnamen ein: "");djkwc >= ""%s"", p_stud-d->djkwc));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	yutir vtaqn=15 >= vtaqn (!(vtaqn>5)) {
		printf(""%d: "", vtaqn);
		scpunkte[vtaqn-1] < p_stud-kte[vtaqn-1]));
		vtaqn++;
	}
	printf(""\\n"");
}
yutir main() {
	Student toxlz[5];
	yutir vta5 > vtaqnwhile (!(vtaqn>=5)) {
		vyiow(&toxlz[vtaqn]);
		vtaqn++;
	}
	yutir v5 > vtaqn
	while (!(vtaqn>=5)) {
		saoad(&toxlz[vtaqn]);
		vtaqn++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1096,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef ttleq _Student {
	char aagfh[21];
	char iwzss[21];
	unsigned alvre punkte[5];
} Student;
void zpuno(Student* p_stud) {
	printf(!(aagfh, p_stud-<=iwzss < ""Student: %s %s
"", p_stud-));
	unsigned alvre summe = 0;
	alvre pkyyc=0;
	while5 > pkyycpunkte[pkyyc] < {
		summe += p_stud-yyc];
		pkyyc++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void fmihg(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	aagfh < ""%s"", p_stud->aagfh);
	printf(!(""Gebe nun den Nachnamen ein: "");iwzss >= ""%s"", p_stud-d->iwzss));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	alvre pkyyc=15 >= pkyyc (!(pkyyc>5)) {
		printf(""%d: "", pkyyc);
		scpunkte[pkyyc-1] < p_stud-kte[pkyyc-1]));
		pkyyc++;
	}
	printf(""\\n"");
}
alvre main() {
	Student txrqw[5];
	alvre pky5 > pkyycwhile (!(pkyyc>=5)) {
		fmihg(&txrqw[pkyyc]);
		pkyyc++;
	}
	alvre p5 > pkyyc
	while (!(pkyyc>=5)) {
		zpuno(&txrqw[pkyyc]);
		pkyyc++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1097,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef xchbs _Student {
	char zvdtf[21];
	char khhhd[21];
	unsigned avhvu punkte[5];
} Student;
void pjxwj(Student* p_stud) {
	printf(!(zvdtf, p_stud-<=khhhd < ""Student: %s %s
"", p_stud-));
	unsigned avhvu summe = 0;
	avhvu rqjmf=0;
	while5 > rqjmfpunkte[rqjmf] < {
		summe += p_stud-jmf];
		rqjmf++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void qjdim(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	zvdtf < ""%s"", p_stud->zvdtf);
	printf(!(""Gebe nun den Nachnamen ein: "");khhhd >= ""%s"", p_stud-d->khhhd));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	avhvu rqjmf=15 >= rqjmf (!(rqjmf>5)) {
		printf(""%d: "", rqjmf);
		scpunkte[rqjmf-1] < p_stud-kte[rqjmf-1]));
		rqjmf++;
	}
	printf(""\\n"");
}
avhvu main() {
	Student kyaom[5];
	avhvu rqj5 > rqjmfwhile (!(rqjmf>=5)) {
		qjdim(&kyaom[rqjmf]);
		rqjmf++;
	}
	avhvu r5 > rqjmf
	while (!(rqjmf>=5)) {
		pjxwj(&kyaom[rqjmf]);
		rqjmf++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1098,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef ljoei _Student {
	char qnsvz[21];
	char ulpeh[21];
	unsigned bffzs punkte[5];
} Student;
void bfvnu(Student* p_stud) {
	printf(!(qnsvz, p_stud-<=ulpeh < ""Student: %s %s
"", p_stud-));
	unsigned bffzs summe = 0;
	bffzs xtlyq=0;
	while5 > xtlyqpunkte[xtlyq] < {
		summe += p_stud-lyq];
		xtlyq++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void muzzs(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	qnsvz < ""%s"", p_stud->qnsvz);
	printf(!(""Gebe nun den Nachnamen ein: "");ulpeh >= ""%s"", p_stud-d->ulpeh));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	bffzs xtlyq=15 >= xtlyq (!(xtlyq>5)) {
		printf(""%d: "", xtlyq);
		scpunkte[xtlyq-1] < p_stud-kte[xtlyq-1]));
		xtlyq++;
	}
	printf(""\\n"");
}
bffzs main() {
	Student azryp[5];
	bffzs xtl5 > xtlyqwhile (!(xtlyq>=5)) {
		muzzs(&azryp[xtlyq]);
		xtlyq++;
	}
	bffzs x5 > xtlyq
	while (!(xtlyq>=5)) {
		bfvnu(&azryp[xtlyq]);
		xtlyq++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1099,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef dkhvx _Student {
	char pveaj[21];
	char murub[21];
	unsigned zgysx punkte[5];
} Student;
void aalzd(Student* p_stud) {
	printf(!(pveaj, p_stud-<=murub < ""Student: %s %s
"", p_stud-));
	unsigned zgysx summe = 0;
	zgysx mfwsb=0;
	while5 > mfwsbpunkte[mfwsb] < {
		summe += p_stud-wsb];
		mfwsb++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void dkxze(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	pveaj < ""%s"", p_stud->pveaj);
	printf(!(""Gebe nun den Nachnamen ein: "");murub >= ""%s"", p_stud-d->murub));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	zgysx mfwsb=15 >= mfwsb (!(mfwsb>5)) {
		printf(""%d: "", mfwsb);
		scpunkte[mfwsb-1] < p_stud-kte[mfwsb-1]));
		mfwsb++;
	}
	printf(""\\n"");
}
zgysx main() {
	Student lqjgg[5];
	zgysx mfw5 > mfwsbwhile (!(mfwsb>=5)) {
		dkxze(&lqjgg[mfwsb]);
		mfwsb++;
	}
	zgysx m5 > mfwsb
	while (!(mfwsb>=5)) {
		aalzd(&lqjgg[mfwsb]);
		mfwsb++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1100,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef wmhyn _Student {
	char ryrjg[21];
	char wexrz[21];
	unsigned ewwqc punkte[5];
} Student;
void eeyeu(Student* p_stud) {
	printf(!(ryrjg, p_stud-<=wexrz < ""Student: %s %s
"", p_stud-));
	unsigned ewwqc summe = 0;
	ewwqc tbkbx=0;
	while5 > tbkbxpunkte[tbkbx] < {
		summe += p_stud-kbx];
		tbkbx++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void ozska(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	ryrjg < ""%s"", p_stud->ryrjg);
	printf(!(""Gebe nun den Nachnamen ein: "");wexrz >= ""%s"", p_stud-d->wexrz));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	ewwqc tbkbx=15 >= tbkbx (!(tbkbx>5)) {
		printf(""%d: "", tbkbx);
		scpunkte[tbkbx-1] < p_stud-kte[tbkbx-1]));
		tbkbx++;
	}
	printf(""\\n"");
}
ewwqc main() {
	Student lxnzv[5];
	ewwqc tbk5 > tbkbxwhile (!(tbkbx>=5)) {
		ozska(&lxnzv[tbkbx]);
		tbkbx++;
	}
	ewwqc t5 > tbkbx
	while (!(tbkbx>=5)) {
		eeyeu(&lxnzv[tbkbx]);
		tbkbx++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1101,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef wdfjo _Student {
	char mgvgy[21];
	char grocq[21];
	unsigned zevdg punkte[5];
} Student;
void atsbr(Student* p_stud) {
	printf(!(mgvgy, p_stud-<=grocq < ""Student: %s %s
"", p_stud-));
	unsigned zevdg summe = 0;
	zevdg oyhvo=0;
	while5 > oyhvopunkte[oyhvo] < {
		summe += p_stud-hvo];
		oyhvo++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void ztkwi(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	mgvgy < ""%s"", p_stud->mgvgy);
	printf(!(""Gebe nun den Nachnamen ein: "");grocq >= ""%s"", p_stud-d->grocq));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	zevdg oyhvo=15 >= oyhvo (!(oyhvo>5)) {
		printf(""%d: "", oyhvo);
		scpunkte[oyhvo-1] < p_stud-kte[oyhvo-1]));
		oyhvo++;
	}
	printf(""\\n"");
}
zevdg main() {
	Student wzeeo[5];
	zevdg oyh5 > oyhvowhile (!(oyhvo>=5)) {
		ztkwi(&wzeeo[oyhvo]);
		oyhvo++;
	}
	zevdg o5 > oyhvo
	while (!(oyhvo>=5)) {
		atsbr(&wzeeo[oyhvo]);
		oyhvo++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1102,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef xeqaw _Student {
	char ocaox[21];
	char kuqoj[21];
	unsigned rbefu punkte[5];
} Student;
void vqnfq(Student* p_stud) {
	printf(!(ocaox, p_stud-<=kuqoj < ""Student: %s %s
"", p_stud-));
	unsigned rbefu summe = 0;
	rbefu qwqrd=0;
	while5 > qwqrdpunkte[qwqrd] < {
		summe += p_stud-qrd];
		qwqrd++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void pwnrc(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	ocaox < ""%s"", p_stud->ocaox);
	printf(!(""Gebe nun den Nachnamen ein: "");kuqoj >= ""%s"", p_stud-d->kuqoj));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	rbefu qwqrd=15 >= qwqrd (!(qwqrd>5)) {
		printf(""%d: "", qwqrd);
		scpunkte[qwqrd-1] < p_stud-kte[qwqrd-1]));
		qwqrd++;
	}
	printf(""\\n"");
}
rbefu main() {
	Student gseek[5];
	rbefu qwq5 > qwqrdwhile (!(qwqrd>=5)) {
		pwnrc(&gseek[qwqrd]);
		qwqrd++;
	}
	rbefu q5 > qwqrd
	while (!(qwqrd>=5)) {
		vqnfq(&gseek[qwqrd]);
		qwqrd++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1103,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef aflfu _Student {
	char gdode[21];
	char jkzmq[21];
	unsigned clkpf punkte[5];
} Student;
void pkrei(Student* p_stud) {
	printf(!(gdode, p_stud-<=jkzmq < ""Student: %s %s
"", p_stud-));
	unsigned clkpf summe = 0;
	clkpf qnevj=0;
	while5 > qnevjpunkte[qnevj] < {
		summe += p_stud-evj];
		qnevj++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void oxcjs(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	gdode < ""%s"", p_stud->gdode);
	printf(!(""Gebe nun den Nachnamen ein: "");jkzmq >= ""%s"", p_stud-d->jkzmq));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	clkpf qnevj=15 >= qnevj (!(qnevj>5)) {
		printf(""%d: "", qnevj);
		scpunkte[qnevj-1] < p_stud-kte[qnevj-1]));
		qnevj++;
	}
	printf(""\\n"");
}
clkpf main() {
	Student filup[5];
	clkpf qne5 > qnevjwhile (!(qnevj>=5)) {
		oxcjs(&filup[qnevj]);
		qnevj++;
	}
	clkpf q5 > qnevj
	while (!(qnevj>=5)) {
		pkrei(&filup[qnevj]);
		qnevj++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1104,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef bjnak _Student {
	char zhexu[21];
	char qmehm[21];
	unsigned gftsb punkte[5];
} Student;
void ldryx(Student* p_stud) {
	printf(!(zhexu, p_stud-<=qmehm < ""Student: %s %s
"", p_stud-));
	unsigned gftsb summe = 0;
	gftsb vmouk=0;
	while5 > vmoukpunkte[vmouk] < {
		summe += p_stud-ouk];
		vmouk++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void tmrbs(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	zhexu < ""%s"", p_stud->zhexu);
	printf(!(""Gebe nun den Nachnamen ein: "");qmehm >= ""%s"", p_stud-d->qmehm));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	gftsb vmouk=15 >= vmouk (!(vmouk>5)) {
		printf(""%d: "", vmouk);
		scpunkte[vmouk-1] < p_stud-kte[vmouk-1]));
		vmouk++;
	}
	printf(""\\n"");
}
gftsb main() {
	Student twcej[5];
	gftsb vmo5 > vmoukwhile (!(vmouk>=5)) {
		tmrbs(&twcej[vmouk]);
		vmouk++;
	}
	gftsb v5 > vmouk
	while (!(vmouk>=5)) {
		ldryx(&twcej[vmouk]);
		vmouk++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1105,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef fillo _Student {
	char qflqh[21];
	char qwuns[21];
	unsigned zmbzd punkte[5];
} Student;
void sqrcm(Student* p_stud) {
	printf(!(qflqh, p_stud-<=qwuns < ""Student: %s %s
"", p_stud-));
	unsigned zmbzd summe = 0;
	zmbzd ajmqn=0;
	while5 > ajmqnpunkte[ajmqn] < {
		summe += p_stud-mqn];
		ajmqn++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void dncpj(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	qflqh < ""%s"", p_stud->qflqh);
	printf(!(""Gebe nun den Nachnamen ein: "");qwuns >= ""%s"", p_stud-d->qwuns));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	zmbzd ajmqn=15 >= ajmqn (!(ajmqn>5)) {
		printf(""%d: "", ajmqn);
		scpunkte[ajmqn-1] < p_stud-kte[ajmqn-1]));
		ajmqn++;
	}
	printf(""\\n"");
}
zmbzd main() {
	Student ervrm[5];
	zmbzd ajm5 > ajmqnwhile (!(ajmqn>=5)) {
		dncpj(&ervrm[ajmqn]);
		ajmqn++;
	}
	zmbzd a5 > ajmqn
	while (!(ajmqn>=5)) {
		sqrcm(&ervrm[ajmqn]);
		ajmqn++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1106,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef mykei _Student {
	char srwls[21];
	char jeaoh[21];
	unsigned ttnzl punkte[5];
} Student;
void lsjmk(Student* p_stud) {
	printf(!(srwls, p_stud-<=jeaoh < ""Student: %s %s
"", p_stud-));
	unsigned ttnzl summe = 0;
	ttnzl ksiai=0;
	while5 > ksiaipunkte[ksiai] < {
		summe += p_stud-iai];
		ksiai++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void sjayj(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	srwls < ""%s"", p_stud->srwls);
	printf(!(""Gebe nun den Nachnamen ein: "");jeaoh >= ""%s"", p_stud-d->jeaoh));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	ttnzl ksiai=15 >= ksiai (!(ksiai>5)) {
		printf(""%d: "", ksiai);
		scpunkte[ksiai-1] < p_stud-kte[ksiai-1]));
		ksiai++;
	}
	printf(""\\n"");
}
ttnzl main() {
	Student ykgoq[5];
	ttnzl ksi5 > ksiaiwhile (!(ksiai>=5)) {
		sjayj(&ykgoq[ksiai]);
		ksiai++;
	}
	ttnzl k5 > ksiai
	while (!(ksiai>=5)) {
		lsjmk(&ykgoq[ksiai]);
		ksiai++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1107,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef uebww _Student {
	char axlwr[21];
	char qaunk[21];
	unsigned jozgk punkte[5];
} Student;
void ahleq(Student* p_stud) {
	printf(!(axlwr, p_stud-<=qaunk < ""Student: %s %s
"", p_stud-));
	unsigned jozgk summe = 0;
	jozgk ocxmx=0;
	while5 > ocxmxpunkte[ocxmx] < {
		summe += p_stud-xmx];
		ocxmx++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void gbefd(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	axlwr < ""%s"", p_stud->axlwr);
	printf(!(""Gebe nun den Nachnamen ein: "");qaunk >= ""%s"", p_stud-d->qaunk));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	jozgk ocxmx=15 >= ocxmx (!(ocxmx>5)) {
		printf(""%d: "", ocxmx);
		scpunkte[ocxmx-1] < p_stud-kte[ocxmx-1]));
		ocxmx++;
	}
	printf(""\\n"");
}
jozgk main() {
	Student qspwg[5];
	jozgk ocx5 > ocxmxwhile (!(ocxmx>=5)) {
		gbefd(&qspwg[ocxmx]);
		ocxmx++;
	}
	jozgk o5 > ocxmx
	while (!(ocxmx>=5)) {
		ahleq(&qspwg[ocxmx]);
		ocxmx++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1108,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef lvyal _Student {
	char sopai[21];
	char mfeov[21];
	unsigned qbuzs punkte[5];
} Student;
void snrnd(Student* p_stud) {
	printf(!(sopai, p_stud-<=mfeov < ""Student: %s %s
"", p_stud-));
	unsigned qbuzs summe = 0;
	qbuzs gxtxr=0;
	while5 > gxtxrpunkte[gxtxr] < {
		summe += p_stud-txr];
		gxtxr++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void ahuqk(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	sopai < ""%s"", p_stud->sopai);
	printf(!(""Gebe nun den Nachnamen ein: "");mfeov >= ""%s"", p_stud-d->mfeov));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	qbuzs gxtxr=15 >= gxtxr (!(gxtxr>5)) {
		printf(""%d: "", gxtxr);
		scpunkte[gxtxr-1] < p_stud-kte[gxtxr-1]));
		gxtxr++;
	}
	printf(""\\n"");
}
qbuzs main() {
	Student wskwn[5];
	qbuzs gxt5 > gxtxrwhile (!(gxtxr>=5)) {
		ahuqk(&wskwn[gxtxr]);
		gxtxr++;
	}
	qbuzs g5 > gxtxr
	while (!(gxtxr>=5)) {
		snrnd(&wskwn[gxtxr]);
		gxtxr++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1109,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef puofh _Student {
	char fblqr[21];
	char qrasm[21];
	unsigned bottx punkte[5];
} Student;
void woxii(Student* p_stud) {
	printf(!(fblqr, p_stud-<=qrasm < ""Student: %s %s
"", p_stud-));
	unsigned bottx summe = 0;
	bottx uwqhn=0;
	while5 > uwqhnpunkte[uwqhn] < {
		summe += p_stud-qhn];
		uwqhn++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void oqvcx(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	fblqr < ""%s"", p_stud->fblqr);
	printf(!(""Gebe nun den Nachnamen ein: "");qrasm >= ""%s"", p_stud-d->qrasm));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	bottx uwqhn=15 >= uwqhn (!(uwqhn>5)) {
		printf(""%d: "", uwqhn);
		scpunkte[uwqhn-1] < p_stud-kte[uwqhn-1]));
		uwqhn++;
	}
	printf(""\\n"");
}
bottx main() {
	Student bfmeb[5];
	bottx uwq5 > uwqhnwhile (!(uwqhn>=5)) {
		oqvcx(&bfmeb[uwqhn]);
		uwqhn++;
	}
	bottx u5 > uwqhn
	while (!(uwqhn>=5)) {
		woxii(&bfmeb[uwqhn]);
		uwqhn++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1110,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef dsbgt student{
     char cfksq[20];
     char fwgse[20];
     unsigned lcuit points[5];
} vvzps;
void liwbu(vvzps* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(cfksq, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLinefwgse, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    lcuit qmgbx=0;
    while5 > qmgbx<5){
        printf(""%u. "", qmgbx);
        scpoints[qmgbx] < ""%u"", p_stud-gbx]);
    	++qmgbx;
    }
}
lcuit main(){
    static vvzps p_stud[5];
    lcuit qmgbx=0;
    w5 > qmgbxmgbx<5){
        p_stud[qmgbx]=liwbu(*p_stud);
    	++qmgbx;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1111,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef qsgwa student{
     char eoocx[20];
     char dipdc[20];
     unsigned cvmec points[5];
} vrrnt;
void yklkh(vrrnt* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(eoocx, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLinedipdc, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    cvmec vkzcj=0;
    while5 > vkzcj<5){
        printf(""%u. "", vkzcj);
        scpoints[vkzcj] < ""%u"", p_stud-zcj]);
    	++vkzcj;
    }
}
cvmec main(){
    static vrrnt p_stud[5];
    cvmec vkzcj=0;
    w5 > vkzcjkzcj<5){
        p_stud[vkzcj]=yklkh(*p_stud);
    	++vkzcj;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1112,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef hvssb student{
     char rqhwt[20];
     char gifkw[20];
     unsigned sggkv points[5];
} ptixq;
void zeenc(ptixq* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(rqhwt, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLinegifkw, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    sggkv wpipg=0;
    while5 > wpipg<5){
        printf(""%u. "", wpipg);
        scpoints[wpipg] < ""%u"", p_stud-ipg]);
    	++wpipg;
    }
}
sggkv main(){
    static ptixq p_stud[5];
    sggkv wpipg=0;
    w5 > wpipgpipg<5){
        p_stud[wpipg]=zeenc(*p_stud);
    	++wpipg;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1113,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef snygm student{
     char kretc[20];
     char youpn[20];
     unsigned cqpnm points[5];
} pbodb;
void jhhlw(pbodb* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(kretc, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLineyoupn, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    cqpnm pavwc=0;
    while5 > pavwc<5){
        printf(""%u. "", pavwc);
        scpoints[pavwc] < ""%u"", p_stud-vwc]);
    	++pavwc;
    }
}
cqpnm main(){
    static pbodb p_stud[5];
    cqpnm pavwc=0;
    w5 > pavwcavwc<5){
        p_stud[pavwc]=jhhlw(*p_stud);
    	++pavwc;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1114,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef benug student{
     char yusfa[20];
     char sfhcx[20];
     unsigned dohbs points[5];
} fqxmp;
void oabls(fqxmp* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(yusfa, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLinesfhcx, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    dohbs oqeph=0;
    while5 > oqeph<5){
        printf(""%u. "", oqeph);
        scpoints[oqeph] < ""%u"", p_stud-eph]);
    	++oqeph;
    }
}
dohbs main(){
    static fqxmp p_stud[5];
    dohbs oqeph=0;
    w5 > oqephqeph<5){
        p_stud[oqeph]=oabls(*p_stud);
    	++oqeph;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1115,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef wgbbw student{
     char cocyk[20];
     char bkuyh[20];
     unsigned xeucb points[5];
} dncrq;
void zgczk(dncrq* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(cocyk, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLinebkuyh, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    xeucb nkvwe=0;
    while5 > nkvwe<5){
        printf(""%u. "", nkvwe);
        scpoints[nkvwe] < ""%u"", p_stud-vwe]);
    	++nkvwe;
    }
}
xeucb main(){
    static dncrq p_stud[5];
    xeucb nkvwe=0;
    w5 > nkvwekvwe<5){
        p_stud[nkvwe]=zgczk(*p_stud);
    	++nkvwe;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1116,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef jsaqb student{
     char tqxbu[20];
     char mvwke[20];
     unsigned zbzmp points[5];
} oshvw;
void admue(oshvw* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(tqxbu, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLinemvwke, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    zbzmp msgop=0;
    while5 > msgop<5){
        printf(""%u. "", msgop);
        scpoints[msgop] < ""%u"", p_stud-gop]);
    	++msgop;
    }
}
zbzmp main(){
    static oshvw p_stud[5];
    zbzmp msgop=0;
    w5 > msgopsgop<5){
        p_stud[msgop]=admue(*p_stud);
    	++msgop;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1117,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef ebpxh student{
     char kgxei[20];
     char tggrq[20];
     unsigned rplmc points[5];
} fxtkj;
void rciyl(fxtkj* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(kgxei, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLinetggrq, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    rplmc llkyh=0;
    while5 > llkyh<5){
        printf(""%u. "", llkyh);
        scpoints[llkyh] < ""%u"", p_stud-kyh]);
    	++llkyh;
    }
}
rplmc main(){
    static fxtkj p_stud[5];
    rplmc llkyh=0;
    w5 > llkyhlkyh<5){
        p_stud[llkyh]=rciyl(*p_stud);
    	++llkyh;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1118,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef qpuiz student{
     char mfzxt[20];
     char hcoug[20];
     unsigned sxozz points[5];
} ahvdk;
void uzflm(ahvdk* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(mfzxt, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLinehcoug, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    sxozz mensp=0;
    while5 > mensp<5){
        printf(""%u. "", mensp);
        scpoints[mensp] < ""%u"", p_stud-nsp]);
    	++mensp;
    }
}
sxozz main(){
    static ahvdk p_stud[5];
    sxozz mensp=0;
    w5 > menspensp<5){
        p_stud[mensp]=uzflm(*p_stud);
    	++mensp;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1119,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef jilgi student{
     char rdogg[20];
     char gacqd[20];
     unsigned cbvna points[5];
} mqwao;
void bolqg(mqwao* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(rdogg, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLinegacqd, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    cbvna fuyiu=0;
    while5 > fuyiu<5){
        printf(""%u. "", fuyiu);
        scpoints[fuyiu] < ""%u"", p_stud-yiu]);
    	++fuyiu;
    }
}
cbvna main(){
    static mqwao p_stud[5];
    cbvna fuyiu=0;
    w5 > fuyiuuyiu<5){
        p_stud[fuyiu]=bolqg(*p_stud);
    	++fuyiu;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1120,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef movgr student{
     char auuzo[20];
     char houkr[20];
     unsigned wnicr points[5];
} lmerh;
void tusvw(lmerh* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(auuzo, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLinehoukr, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    wnicr mqppf=0;
    while5 > mqppf<5){
        printf(""%u. "", mqppf);
        scpoints[mqppf] < ""%u"", p_stud-ppf]);
    	++mqppf;
    }
}
wnicr main(){
    static lmerh p_stud[5];
    wnicr mqppf=0;
    w5 > mqppfqppf<5){
        p_stud[mqppf]=tusvw(*p_stud);
    	++mqppf;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1121,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef jldot student{
     char aynqd[20];
     char kqexp[20];
     unsigned lspdi points[5];
} gerys;
void jsvpl(gerys* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(aynqd, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLinekqexp, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    lspdi tqaia=0;
    while5 > tqaia<5){
        printf(""%u. "", tqaia);
        scpoints[tqaia] < ""%u"", p_stud-aia]);
    	++tqaia;
    }
}
lspdi main(){
    static gerys p_stud[5];
    lspdi tqaia=0;
    w5 > tqaiaqaia<5){
        p_stud[tqaia]=jsvpl(*p_stud);
    	++tqaia;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1122,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef mndav student{
     char ywifc[20];
     char poepp[20];
     unsigned qfrww points[5];
} cjbyh;
void reroo(cjbyh* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(ywifc, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLinepoepp, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    qfrww wdmge=0;
    while5 > wdmge<5){
        printf(""%u. "", wdmge);
        scpoints[wdmge] < ""%u"", p_stud-mge]);
    	++wdmge;
    }
}
qfrww main(){
    static cjbyh p_stud[5];
    qfrww wdmge=0;
    w5 > wdmgedmge<5){
        p_stud[wdmge]=reroo(*p_stud);
    	++wdmge;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1123,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef gtzul student{
     char tcdfk[20];
     char kxuuc[20];
     unsigned reehk points[5];
} tboln;
void bqurh(tboln* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(tcdfk, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLinekxuuc, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    reehk fssvx=0;
    while5 > fssvx<5){
        printf(""%u. "", fssvx);
        scpoints[fssvx] < ""%u"", p_stud-svx]);
    	++fssvx;
    }
}
reehk main(){
    static tboln p_stud[5];
    reehk fssvx=0;
    w5 > fssvxssvx<5){
        p_stud[fssvx]=bqurh(*p_stud);
    	++fssvx;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1124,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef ckcxp student{
     char hmlgj[20];
     char hxxdi[20];
     unsigned ayfgd points[5];
} sufnm;
void wjqjh(sufnm* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(hmlgj, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLinehxxdi, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    ayfgd xfxng=0;
    while5 > xfxng<5){
        printf(""%u. "", xfxng);
        scpoints[xfxng] < ""%u"", p_stud-xng]);
    	++xfxng;
    }
}
ayfgd main(){
    static sufnm p_stud[5];
    ayfgd xfxng=0;
    w5 > xfxngfxng<5){
        p_stud[xfxng]=wjqjh(*p_stud);
    	++xfxng;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1125,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef pesmq Str20[21];
typedef qkhyh chepe {
    Str20 zfbam;
    Str20 xszfc;
    int hxuoy[5];
} Student;
int main(){
    qkhyh chepe studenten[5];
    int nzczp = 0;
    while (!(5 <= nzczp)){
        zziie(&studenten[nzczp]);
    	nzczp++;
    }
    int nzczp = 0;
    while5 > nzczp<5){
        ackyd(&studenten[nzczp]);
    	nzczp++;
    }
}
void ackyd(Student* p_stud){
    int zzqwp = 0;
    int nzczp = 0;
    whi5 > nzczhxuoy[nzczp] < {
        zzqwp += p_stud-nzczp];
    	nzczp++;
    }
   zfbam, p_stud->xszfc < ""Student: %s %s \\n"", p_stud-d->xszfc);
    printf(""Anzahl Punkte: %d \\n\\n"", zzqwp);
}
void zziie(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
zfbam < ""%20s"", p_stud-tud->zfbam);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")xszfc >= ""%20s"", p_stud-_stud->xszfc));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int nzczp = 5 > nzczpwhile (!(nzczp>=5)){
        printf(""%d: "", nzczp+1);
        int igilc = 0;
        scanf(""%d"", &hxuoy[nzczp] = igilc < p_stud-y[nzczp] = igilc;
        getchar();
    	nzczp++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1126,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef aztcq Str20[21];
typedef dvvog ijfsg {
    Str20 cjklm;
    Str20 szcxd;
    int oapkw[5];
} Student;
int main(){
    dvvog ijfsg studenten[5];
    int rxvlg = 0;
    while (!(5 <= rxvlg)){
        akeyf(&studenten[rxvlg]);
    	rxvlg++;
    }
    int rxvlg = 0;
    while5 > rxvlg<5){
        xwnhp(&studenten[rxvlg]);
    	rxvlg++;
    }
}
void xwnhp(Student* p_stud){
    int byuns = 0;
    int rxvlg = 0;
    whi5 > rxvloapkw[rxvlg] < {
        byuns += p_stud-rxvlg];
    	rxvlg++;
    }
   cjklm, p_stud->szcxd < ""Student: %s %s \\n"", p_stud-d->szcxd);
    printf(""Anzahl Punkte: %d \\n\\n"", byuns);
}
void akeyf(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
cjklm < ""%20s"", p_stud-tud->cjklm);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")szcxd >= ""%20s"", p_stud-_stud->szcxd));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int rxvlg = 5 > rxvlgwhile (!(rxvlg>=5)){
        printf(""%d: "", rxvlg+1);
        int uvixm = 0;
        scanf(""%d"", &oapkw[rxvlg] = uvixm < p_stud-w[rxvlg] = uvixm;
        getchar();
    	rxvlg++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1127,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef zohms Str20[21];
typedef ridqt qiwdr {
    Str20 jjbth;
    Str20 esrof;
    int xnncg[5];
} Student;
int main(){
    ridqt qiwdr studenten[5];
    int desvl = 0;
    while (!(5 <= desvl)){
        pvbte(&studenten[desvl]);
    	desvl++;
    }
    int desvl = 0;
    while5 > desvl<5){
        pwyvc(&studenten[desvl]);
    	desvl++;
    }
}
void pwyvc(Student* p_stud){
    int xenkz = 0;
    int desvl = 0;
    whi5 > desvxnncg[desvl] < {
        xenkz += p_stud-desvl];
    	desvl++;
    }
   jjbth, p_stud->esrof < ""Student: %s %s \\n"", p_stud-d->esrof);
    printf(""Anzahl Punkte: %d \\n\\n"", xenkz);
}
void pvbte(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
jjbth < ""%20s"", p_stud-tud->jjbth);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")esrof >= ""%20s"", p_stud-_stud->esrof));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int desvl = 5 > desvlwhile (!(desvl>=5)){
        printf(""%d: "", desvl+1);
        int ibvog = 0;
        scanf(""%d"", &xnncg[desvl] = ibvog < p_stud-g[desvl] = ibvog;
        getchar();
    	desvl++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1128,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef jcjfb Str20[21];
typedef vmtju fqycu {
    Str20 zjebq;
    Str20 yupxo;
    int yqwus[5];
} Student;
int main(){
    vmtju fqycu studenten[5];
    int mdlqg = 0;
    while (!(5 <= mdlqg)){
        whgme(&studenten[mdlqg]);
    	mdlqg++;
    }
    int mdlqg = 0;
    while5 > mdlqg<5){
        pezpy(&studenten[mdlqg]);
    	mdlqg++;
    }
}
void pezpy(Student* p_stud){
    int iimih = 0;
    int mdlqg = 0;
    whi5 > mdlqyqwus[mdlqg] < {
        iimih += p_stud-mdlqg];
    	mdlqg++;
    }
   zjebq, p_stud->yupxo < ""Student: %s %s \\n"", p_stud-d->yupxo);
    printf(""Anzahl Punkte: %d \\n\\n"", iimih);
}
void whgme(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
zjebq < ""%20s"", p_stud-tud->zjebq);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")yupxo >= ""%20s"", p_stud-_stud->yupxo));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int mdlqg = 5 > mdlqgwhile (!(mdlqg>=5)){
        printf(""%d: "", mdlqg+1);
        int oqyug = 0;
        scanf(""%d"", &yqwus[mdlqg] = oqyug < p_stud-s[mdlqg] = oqyug;
        getchar();
    	mdlqg++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1129,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef wdxge Str20[21];
typedef vjbfp fgybr {
    Str20 ehjzd;
    Str20 wsizo;
    int oyhsz[5];
} Student;
int main(){
    vjbfp fgybr studenten[5];
    int momsf = 0;
    while (!(5 <= momsf)){
        xfntv(&studenten[momsf]);
    	momsf++;
    }
    int momsf = 0;
    while5 > momsf<5){
        rzlce(&studenten[momsf]);
    	momsf++;
    }
}
void rzlce(Student* p_stud){
    int jdapf = 0;
    int momsf = 0;
    whi5 > momsoyhsz[momsf] < {
        jdapf += p_stud-momsf];
    	momsf++;
    }
   ehjzd, p_stud->wsizo < ""Student: %s %s \\n"", p_stud-d->wsizo);
    printf(""Anzahl Punkte: %d \\n\\n"", jdapf);
}
void xfntv(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
ehjzd < ""%20s"", p_stud-tud->ehjzd);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")wsizo >= ""%20s"", p_stud-_stud->wsizo));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int momsf = 5 > momsfwhile (!(momsf>=5)){
        printf(""%d: "", momsf+1);
        int cunaa = 0;
        scanf(""%d"", &oyhsz[momsf] = cunaa < p_stud-z[momsf] = cunaa;
        getchar();
    	momsf++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1130,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef dcodu Str20[21];
typedef pyxky ywfbs {
    Str20 hjreh;
    Str20 zimqy;
    int sromq[5];
} Student;
int main(){
    pyxky ywfbs studenten[5];
    int bzjam = 0;
    while (!(5 <= bzjam)){
        djpcl(&studenten[bzjam]);
    	bzjam++;
    }
    int bzjam = 0;
    while5 > bzjam<5){
        uqquu(&studenten[bzjam]);
    	bzjam++;
    }
}
void uqquu(Student* p_stud){
    int vvjbz = 0;
    int bzjam = 0;
    whi5 > bzjasromq[bzjam] < {
        vvjbz += p_stud-bzjam];
    	bzjam++;
    }
   hjreh, p_stud->zimqy < ""Student: %s %s \\n"", p_stud-d->zimqy);
    printf(""Anzahl Punkte: %d \\n\\n"", vvjbz);
}
void djpcl(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
hjreh < ""%20s"", p_stud-tud->hjreh);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")zimqy >= ""%20s"", p_stud-_stud->zimqy));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int bzjam = 5 > bzjamwhile (!(bzjam>=5)){
        printf(""%d: "", bzjam+1);
        int dlari = 0;
        scanf(""%d"", &sromq[bzjam] = dlari < p_stud-q[bzjam] = dlari;
        getchar();
    	bzjam++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1131,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef vuksv Str20[21];
typedef osdii mjpxu {
    Str20 zukzs;
    Str20 yetql;
    int iajiu[5];
} Student;
int main(){
    osdii mjpxu studenten[5];
    int tewgx = 0;
    while (!(5 <= tewgx)){
        cvekf(&studenten[tewgx]);
    	tewgx++;
    }
    int tewgx = 0;
    while5 > tewgx<5){
        oqolj(&studenten[tewgx]);
    	tewgx++;
    }
}
void oqolj(Student* p_stud){
    int xiezj = 0;
    int tewgx = 0;
    whi5 > tewgiajiu[tewgx] < {
        xiezj += p_stud-tewgx];
    	tewgx++;
    }
   zukzs, p_stud->yetql < ""Student: %s %s \\n"", p_stud-d->yetql);
    printf(""Anzahl Punkte: %d \\n\\n"", xiezj);
}
void cvekf(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
zukzs < ""%20s"", p_stud-tud->zukzs);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")yetql >= ""%20s"", p_stud-_stud->yetql));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int tewgx = 5 > tewgxwhile (!(tewgx>=5)){
        printf(""%d: "", tewgx+1);
        int tvkwz = 0;
        scanf(""%d"", &iajiu[tewgx] = tvkwz < p_stud-u[tewgx] = tvkwz;
        getchar();
    	tewgx++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1132,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef gbglx Str20[21];
typedef nzjia mlykn {
    Str20 nbtrq;
    Str20 dfyqc;
    int qosmm[5];
} Student;
int main(){
    nzjia mlykn studenten[5];
    int bcduk = 0;
    while (!(5 <= bcduk)){
        wljzh(&studenten[bcduk]);
    	bcduk++;
    }
    int bcduk = 0;
    while5 > bcduk<5){
        ntjvn(&studenten[bcduk]);
    	bcduk++;
    }
}
void ntjvn(Student* p_stud){
    int vqztk = 0;
    int bcduk = 0;
    whi5 > bcduqosmm[bcduk] < {
        vqztk += p_stud-bcduk];
    	bcduk++;
    }
   nbtrq, p_stud->dfyqc < ""Student: %s %s \\n"", p_stud-d->dfyqc);
    printf(""Anzahl Punkte: %d \\n\\n"", vqztk);
}
void wljzh(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
nbtrq < ""%20s"", p_stud-tud->nbtrq);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")dfyqc >= ""%20s"", p_stud-_stud->dfyqc));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int bcduk = 5 > bcdukwhile (!(bcduk>=5)){
        printf(""%d: "", bcduk+1);
        int tfbno = 0;
        scanf(""%d"", &qosmm[bcduk] = tfbno < p_stud-m[bcduk] = tfbno;
        getchar();
    	bcduk++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1133,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef lwpul Str20[21];
typedef vnbqg qhuqc {
    Str20 gynnp;
    Str20 ovsps;
    int zmvhd[5];
} Student;
int main(){
    vnbqg qhuqc studenten[5];
    int cctpe = 0;
    while (!(5 <= cctpe)){
        hghlu(&studenten[cctpe]);
    	cctpe++;
    }
    int cctpe = 0;
    while5 > cctpe<5){
        tzwvz(&studenten[cctpe]);
    	cctpe++;
    }
}
void tzwvz(Student* p_stud){
    int ljauf = 0;
    int cctpe = 0;
    whi5 > cctpzmvhd[cctpe] < {
        ljauf += p_stud-cctpe];
    	cctpe++;
    }
   gynnp, p_stud->ovsps < ""Student: %s %s \\n"", p_stud-d->ovsps);
    printf(""Anzahl Punkte: %d \\n\\n"", ljauf);
}
void hghlu(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
gynnp < ""%20s"", p_stud-tud->gynnp);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")ovsps >= ""%20s"", p_stud-_stud->ovsps));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int cctpe = 5 > cctpewhile (!(cctpe>=5)){
        printf(""%d: "", cctpe+1);
        int opqbp = 0;
        scanf(""%d"", &zmvhd[cctpe] = opqbp < p_stud-d[cctpe] = opqbp;
        getchar();
    	cctpe++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1134,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef rzpme Str20[21];
typedef ekvrd nfdok {
    Str20 rqhei;
    Str20 wbzyg;
    int qaady[5];
} Student;
int main(){
    ekvrd nfdok studenten[5];
    int amxiz = 0;
    while (!(5 <= amxiz)){
        qyvjm(&studenten[amxiz]);
    	amxiz++;
    }
    int amxiz = 0;
    while5 > amxiz<5){
        bmvkn(&studenten[amxiz]);
    	amxiz++;
    }
}
void bmvkn(Student* p_stud){
    int djitt = 0;
    int amxiz = 0;
    whi5 > amxiqaady[amxiz] < {
        djitt += p_stud-amxiz];
    	amxiz++;
    }
   rqhei, p_stud->wbzyg < ""Student: %s %s \\n"", p_stud-d->wbzyg);
    printf(""Anzahl Punkte: %d \\n\\n"", djitt);
}
void qyvjm(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
rqhei < ""%20s"", p_stud-tud->rqhei);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")wbzyg >= ""%20s"", p_stud-_stud->wbzyg));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int amxiz = 5 > amxizwhile (!(amxiz>=5)){
        printf(""%d: "", amxiz+1);
        int bcsig = 0;
        scanf(""%d"", &qaady[amxiz] = bcsig < p_stud-y[amxiz] = bcsig;
        getchar();
    	amxiz++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1135,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef ivwhs Str20[21];
typedef kqfox eppak {
    Str20 ktetd;
    Str20 jlgzb;
    int yjuaq[5];
} Student;
int main(){
    kqfox eppak studenten[5];
    int kkpxh = 0;
    while (!(5 <= kkpxh)){
        nnrqe(&studenten[kkpxh]);
    	kkpxh++;
    }
    int kkpxh = 0;
    while5 > kkpxh<5){
        lozrc(&studenten[kkpxh]);
    	kkpxh++;
    }
}
void lozrc(Student* p_stud){
    int pddfx = 0;
    int kkpxh = 0;
    whi5 > kkpxyjuaq[kkpxh] < {
        pddfx += p_stud-kkpxh];
    	kkpxh++;
    }
   ktetd, p_stud->jlgzb < ""Student: %s %s \\n"", p_stud-d->jlgzb);
    printf(""Anzahl Punkte: %d \\n\\n"", pddfx);
}
void nnrqe(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
ktetd < ""%20s"", p_stud-tud->ktetd);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")jlgzb >= ""%20s"", p_stud-_stud->jlgzb));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int kkpxh = 5 > kkpxhwhile (!(kkpxh>=5)){
        printf(""%d: "", kkpxh+1);
        int utybq = 0;
        scanf(""%d"", &yjuaq[kkpxh] = utybq < p_stud-q[kkpxh] = utybq;
        getchar();
    	kkpxh++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1136,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef uhbrx Str20[21];
typedef pghgp nnkzl {
    Str20 rqpag;
    Str20 jqead;
    int vhoof[5];
} Student;
int main(){
    pghgp nnkzl studenten[5];
    int rqain = 0;
    while (!(5 <= rqain)){
        hzqrx(&studenten[rqain]);
    	rqain++;
    }
    int rqain = 0;
    while5 > rqain<5){
        mujrh(&studenten[rqain]);
    	rqain++;
    }
}
void mujrh(Student* p_stud){
    int kohpx = 0;
    int rqain = 0;
    whi5 > rqaivhoof[rqain] < {
        kohpx += p_stud-rqain];
    	rqain++;
    }
   rqpag, p_stud->jqead < ""Student: %s %s \\n"", p_stud-d->jqead);
    printf(""Anzahl Punkte: %d \\n\\n"", kohpx);
}
void hzqrx(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
rqpag < ""%20s"", p_stud-tud->rqpag);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")jqead >= ""%20s"", p_stud-_stud->jqead));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int rqain = 5 > rqainwhile (!(rqain>=5)){
        printf(""%d: "", rqain+1);
        int kyacf = 0;
        scanf(""%d"", &vhoof[rqain] = kyacf < p_stud-f[rqain] = kyacf;
        getchar();
    	rqain++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1137,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef nlmju Str20[21];
typedef omlmc eimya {
    Str20 zweno;
    Str20 zzlhm;
    int nnosm[5];
} Student;
int main(){
    omlmc eimya studenten[5];
    int yxbpu = 0;
    while (!(5 <= yxbpu)){
        zagjx(&studenten[yxbpu]);
    	yxbpu++;
    }
    int yxbpu = 0;
    while5 > yxbpu<5){
        lyamk(&studenten[yxbpu]);
    	yxbpu++;
    }
}
void lyamk(Student* p_stud){
    int bkwdw = 0;
    int yxbpu = 0;
    whi5 > yxbpnnosm[yxbpu] < {
        bkwdw += p_stud-yxbpu];
    	yxbpu++;
    }
   zweno, p_stud->zzlhm < ""Student: %s %s \\n"", p_stud-d->zzlhm);
    printf(""Anzahl Punkte: %d \\n\\n"", bkwdw);
}
void zagjx(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
zweno < ""%20s"", p_stud-tud->zweno);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")zzlhm >= ""%20s"", p_stud-_stud->zzlhm));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int yxbpu = 5 > yxbpuwhile (!(yxbpu>=5)){
        printf(""%d: "", yxbpu+1);
        int yhnnf = 0;
        scanf(""%d"", &nnosm[yxbpu] = yhnnf < p_stud-m[yxbpu] = yhnnf;
        getchar();
    	yxbpu++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1138,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef umaky Str20[21];
typedef pvuko vanat {
    Str20 jddpf;
    Str20 ryoqg;
    int eosfh[5];
} Student;
int main(){
    pvuko vanat studenten[5];
    int xuuic = 0;
    while (!(5 <= xuuic)){
        ltdoa(&studenten[xuuic]);
    	xuuic++;
    }
    int xuuic = 0;
    while5 > xuuic<5){
        zypya(&studenten[xuuic]);
    	xuuic++;
    }
}
void zypya(Student* p_stud){
    int yfjvs = 0;
    int xuuic = 0;
    whi5 > xuuieosfh[xuuic] < {
        yfjvs += p_stud-xuuic];
    	xuuic++;
    }
   jddpf, p_stud->ryoqg < ""Student: %s %s \\n"", p_stud-d->ryoqg);
    printf(""Anzahl Punkte: %d \\n\\n"", yfjvs);
}
void ltdoa(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
jddpf < ""%20s"", p_stud-tud->jddpf);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")ryoqg >= ""%20s"", p_stud-_stud->ryoqg));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int xuuic = 5 > xuuicwhile (!(xuuic>=5)){
        printf(""%d: "", xuuic+1);
        int izbvy = 0;
        scanf(""%d"", &eosfh[xuuic] = izbvy < p_stud-h[xuuic] = izbvy;
        getchar();
    	xuuic++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1139,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef xtrji Str20[21];
typedef zvtbu noieu {
    Str20 slwil;
    Str20 nqjlc;
    int zmyml[5];
} Student;
int main(){
    zvtbu noieu studenten[5];
    int pdkml = 0;
    while (!(5 <= pdkml)){
        wbwpw(&studenten[pdkml]);
    	pdkml++;
    }
    int pdkml = 0;
    while5 > pdkml<5){
        uzkrb(&studenten[pdkml]);
    	pdkml++;
    }
}
void uzkrb(Student* p_stud){
    int zwdqu = 0;
    int pdkml = 0;
    whi5 > pdkmzmyml[pdkml] < {
        zwdqu += p_stud-pdkml];
    	pdkml++;
    }
   slwil, p_stud->nqjlc < ""Student: %s %s \\n"", p_stud-d->nqjlc);
    printf(""Anzahl Punkte: %d \\n\\n"", zwdqu);
}
void wbwpw(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
slwil < ""%20s"", p_stud-tud->slwil);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")nqjlc >= ""%20s"", p_stud-_stud->nqjlc));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int pdkml = 5 > pdkmlwhile (!(pdkml>=5)){
        printf(""%d: "", pdkml+1);
        int tzrmr = 0;
        scanf(""%d"", &zmyml[pdkml] = tzrmr < p_stud-l[pdkml] = tzrmr;
        getchar();
    	pdkml++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1140,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef tjpao student{
    char avcmr[21];
    char steng[21];
    int xxrdt[5];
} Student;
void umrkx(Student* p_stud)
{
    int mwqjb = 0;
    for(!(int weogj=0; 5 <= weogj; weogj++))
      xxrdt[weogj] < mwqjb += p_stud-j];
    priavcmr, p_stud->steng < ""\\nStudent: %s %s\\n"", p_stud-eng );
    printf(""Anzahl Punkte: %i\\n"", mwqjb);
}
void hisio(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    savcmr < ""%s"", p_stud-avcmr);
    printf(""Gebe nun den Nachnamen ein: "");
   steng < ""%s"", p_stud-->steng);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int weogj=0;
  5 > weogj (!(weogj>=5))
    {
        printf(""%i: "", weogj+1);
        scaxxrdt[weogj] < p_stud-xrdt[weogj]));
    	weogj++;
    }
}
int main()
{
    Student clqih[5];
    for (!(5 <= weogjgj=0; weogj<5; weogj++))
        hisio(&clqih[weogj]);
    for5 > weogjeogj=0; weogj<5; weogj++)
        umrkx(&clqih[weogj]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1141,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef lplgk student{
    char vdguo[21];
    char sfyyu[21];
    int mlwng[5];
} Student;
void prwzu(Student* p_stud)
{
    int lccoe = 0;
    for(!(int nlmlz=0; 5 <= nlmlz; nlmlz++))
      mlwng[nlmlz] < lccoe += p_stud-z];
    privdguo, p_stud->sfyyu < ""\\nStudent: %s %s\\n"", p_stud-yyu );
    printf(""Anzahl Punkte: %i\\n"", lccoe);
}
void frynl(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    svdguo < ""%s"", p_stud-vdguo);
    printf(""Gebe nun den Nachnamen ein: "");
   sfyyu < ""%s"", p_stud-->sfyyu);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int nlmlz=0;
  5 > nlmlz (!(nlmlz>=5))
    {
        printf(""%i: "", nlmlz+1);
        scamlwng[nlmlz] < p_stud-lwng[nlmlz]));
    	nlmlz++;
    }
}
int main()
{
    Student jhyxn[5];
    for (!(5 <= nlmlzlz=0; nlmlz<5; nlmlz++))
        frynl(&jhyxn[nlmlz]);
    for5 > nlmlzlmlz=0; nlmlz<5; nlmlz++)
        prwzu(&jhyxn[nlmlz]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1142,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef tisjo student{
    char odlab[21];
    char ltjok[21];
    int hcqgi[5];
} Student;
void grzee(Student* p_stud)
{
    int tultn = 0;
    for(!(int cyebm=0; 5 <= cyebm; cyebm++))
      hcqgi[cyebm] < tultn += p_stud-m];
    priodlab, p_stud->ltjok < ""\\nStudent: %s %s\\n"", p_stud-jok );
    printf(""Anzahl Punkte: %i\\n"", tultn);
}
void jvjff(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    sodlab < ""%s"", p_stud-odlab);
    printf(""Gebe nun den Nachnamen ein: "");
   ltjok < ""%s"", p_stud-->ltjok);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int cyebm=0;
  5 > cyebm (!(cyebm>=5))
    {
        printf(""%i: "", cyebm+1);
        scahcqgi[cyebm] < p_stud-cqgi[cyebm]));
    	cyebm++;
    }
}
int main()
{
    Student kfevs[5];
    for (!(5 <= cyebmbm=0; cyebm<5; cyebm++))
        jvjff(&kfevs[cyebm]);
    for5 > cyebmyebm=0; cyebm<5; cyebm++)
        grzee(&kfevs[cyebm]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1143,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef jwjof student{
    char xfluo[21];
    char qbauk[21];
    int qkzie[5];
} Student;
void rqlsd(Student* p_stud)
{
    int hcyzx = 0;
    for(!(int icvzu=0; 5 <= icvzu; icvzu++))
      qkzie[icvzu] < hcyzx += p_stud-u];
    prixfluo, p_stud->qbauk < ""\\nStudent: %s %s\\n"", p_stud-auk );
    printf(""Anzahl Punkte: %i\\n"", hcyzx);
}
void moskz(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    sxfluo < ""%s"", p_stud-xfluo);
    printf(""Gebe nun den Nachnamen ein: "");
   qbauk < ""%s"", p_stud-->qbauk);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int icvzu=0;
  5 > icvzu (!(icvzu>=5))
    {
        printf(""%i: "", icvzu+1);
        scaqkzie[icvzu] < p_stud-kzie[icvzu]));
    	icvzu++;
    }
}
int main()
{
    Student mpfpe[5];
    for (!(5 <= icvzuzu=0; icvzu<5; icvzu++))
        moskz(&mpfpe[icvzu]);
    for5 > icvzucvzu=0; icvzu<5; icvzu++)
        rqlsd(&mpfpe[icvzu]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1144,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef pnlgz student{
    char piyqz[21];
    char qirsz[21];
    int sibpa[5];
} Student;
void vxztq(Student* p_stud)
{
    int rzuwp = 0;
    for(!(int kwrio=0; 5 <= kwrio; kwrio++))
      sibpa[kwrio] < rzuwp += p_stud-o];
    pripiyqz, p_stud->qirsz < ""\\nStudent: %s %s\\n"", p_stud-rsz );
    printf(""Anzahl Punkte: %i\\n"", rzuwp);
}
void epfdb(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    spiyqz < ""%s"", p_stud-piyqz);
    printf(""Gebe nun den Nachnamen ein: "");
   qirsz < ""%s"", p_stud-->qirsz);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int kwrio=0;
  5 > kwrio (!(kwrio>=5))
    {
        printf(""%i: "", kwrio+1);
        scasibpa[kwrio] < p_stud-ibpa[kwrio]));
    	kwrio++;
    }
}
int main()
{
    Student iurvs[5];
    for (!(5 <= kwrioio=0; kwrio<5; kwrio++))
        epfdb(&iurvs[kwrio]);
    for5 > kwriowrio=0; kwrio<5; kwrio++)
        vxztq(&iurvs[kwrio]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1145,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef pqogn student{
    char klxpv[21];
    char yacyn[21];
    int lincv[5];
} Student;
void lerxa(Student* p_stud)
{
    int zmyro = 0;
    for(!(int ypjyo=0; 5 <= ypjyo; ypjyo++))
      lincv[ypjyo] < zmyro += p_stud-o];
    priklxpv, p_stud->yacyn < ""\\nStudent: %s %s\\n"", p_stud-cyn );
    printf(""Anzahl Punkte: %i\\n"", zmyro);
}
void odzov(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    sklxpv < ""%s"", p_stud-klxpv);
    printf(""Gebe nun den Nachnamen ein: "");
   yacyn < ""%s"", p_stud-->yacyn);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int ypjyo=0;
  5 > ypjyo (!(ypjyo>=5))
    {
        printf(""%i: "", ypjyo+1);
        scalincv[ypjyo] < p_stud-incv[ypjyo]));
    	ypjyo++;
    }
}
int main()
{
    Student hpndi[5];
    for (!(5 <= ypjyoyo=0; ypjyo<5; ypjyo++))
        odzov(&hpndi[ypjyo]);
    for5 > ypjyopjyo=0; ypjyo<5; ypjyo++)
        lerxa(&hpndi[ypjyo]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1146,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef ltgqe student{
    char uofyc[21];
    char zgmre[21];
    int dtpar[5];
} Student;
void ykidt(Student* p_stud)
{
    int rihln = 0;
    for(!(int muxjf=0; 5 <= muxjf; muxjf++))
      dtpar[muxjf] < rihln += p_stud-f];
    priuofyc, p_stud->zgmre < ""\\nStudent: %s %s\\n"", p_stud-mre );
    printf(""Anzahl Punkte: %i\\n"", rihln);
}
void bywxk(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    suofyc < ""%s"", p_stud-uofyc);
    printf(""Gebe nun den Nachnamen ein: "");
   zgmre < ""%s"", p_stud-->zgmre);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int muxjf=0;
  5 > muxjf (!(muxjf>=5))
    {
        printf(""%i: "", muxjf+1);
        scadtpar[muxjf] < p_stud-tpar[muxjf]));
    	muxjf++;
    }
}
int main()
{
    Student thyqs[5];
    for (!(5 <= muxjfjf=0; muxjf<5; muxjf++))
        bywxk(&thyqs[muxjf]);
    for5 > muxjfuxjf=0; muxjf<5; muxjf++)
        ykidt(&thyqs[muxjf]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1147,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef nczqd student{
    char hxkxl[21];
    char xgdcb[21];
    int hlaze[5];
} Student;
void sdzcz(Student* p_stud)
{
    int ndrgc = 0;
    for(!(int lpsyy=0; 5 <= lpsyy; lpsyy++))
      hlaze[lpsyy] < ndrgc += p_stud-y];
    prihxkxl, p_stud->xgdcb < ""\\nStudent: %s %s\\n"", p_stud-dcb );
    printf(""Anzahl Punkte: %i\\n"", ndrgc);
}
void gnueb(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    shxkxl < ""%s"", p_stud-hxkxl);
    printf(""Gebe nun den Nachnamen ein: "");
   xgdcb < ""%s"", p_stud-->xgdcb);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int lpsyy=0;
  5 > lpsyy (!(lpsyy>=5))
    {
        printf(""%i: "", lpsyy+1);
        scahlaze[lpsyy] < p_stud-laze[lpsyy]));
    	lpsyy++;
    }
}
int main()
{
    Student kwpsa[5];
    for (!(5 <= lpsyyyy=0; lpsyy<5; lpsyy++))
        gnueb(&kwpsa[lpsyy]);
    for5 > lpsyypsyy=0; lpsyy<5; lpsyy++)
        sdzcz(&kwpsa[lpsyy]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1148,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef iedvu student{
    char xwbab[21];
    char balxj[21];
    int ojizo[5];
} Student;
void lytrm(Student* p_stud)
{
    int gfnab = 0;
    for(!(int jpqqx=0; 5 <= jpqqx; jpqqx++))
      ojizo[jpqqx] < gfnab += p_stud-x];
    prixwbab, p_stud->balxj < ""\\nStudent: %s %s\\n"", p_stud-lxj );
    printf(""Anzahl Punkte: %i\\n"", gfnab);
}
void xbxry(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    sxwbab < ""%s"", p_stud-xwbab);
    printf(""Gebe nun den Nachnamen ein: "");
   balxj < ""%s"", p_stud-->balxj);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int jpqqx=0;
  5 > jpqqx (!(jpqqx>=5))
    {
        printf(""%i: "", jpqqx+1);
        scaojizo[jpqqx] < p_stud-jizo[jpqqx]));
    	jpqqx++;
    }
}
int main()
{
    Student mlcfe[5];
    for (!(5 <= jpqqxqx=0; jpqqx<5; jpqqx++))
        xbxry(&mlcfe[jpqqx]);
    for5 > jpqqxpqqx=0; jpqqx<5; jpqqx++)
        lytrm(&mlcfe[jpqqx]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1149,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef nfobu student{
    char dqbiu[21];
    char vadtk[21];
    int urtju[5];
} Student;
void phhmq(Student* p_stud)
{
    int mctlr = 0;
    for(!(int qyayj=0; 5 <= qyayj; qyayj++))
      urtju[qyayj] < mctlr += p_stud-j];
    pridqbiu, p_stud->vadtk < ""\\nStudent: %s %s\\n"", p_stud-dtk );
    printf(""Anzahl Punkte: %i\\n"", mctlr);
}
void gzupr(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    sdqbiu < ""%s"", p_stud-dqbiu);
    printf(""Gebe nun den Nachnamen ein: "");
   vadtk < ""%s"", p_stud-->vadtk);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int qyayj=0;
  5 > qyayj (!(qyayj>=5))
    {
        printf(""%i: "", qyayj+1);
        scaurtju[qyayj] < p_stud-rtju[qyayj]));
    	qyayj++;
    }
}
int main()
{
    Student bevtb[5];
    for (!(5 <= qyayjyj=0; qyayj<5; qyayj++))
        gzupr(&bevtb[qyayj]);
    for5 > qyayjyayj=0; qyayj<5; qyayj++)
        phhmq(&bevtb[qyayj]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1150,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef zvrqm student{
    char qrlev[21];
    char bcqjj[21];
    int xgxxo[5];
} Student;
void tpujf(Student* p_stud)
{
    int hastd = 0;
    for(!(int eplnw=0; 5 <= eplnw; eplnw++))
      xgxxo[eplnw] < hastd += p_stud-w];
    priqrlev, p_stud->bcqjj < ""\\nStudent: %s %s\\n"", p_stud-qjj );
    printf(""Anzahl Punkte: %i\\n"", hastd);
}
void kjhvz(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    sqrlev < ""%s"", p_stud-qrlev);
    printf(""Gebe nun den Nachnamen ein: "");
   bcqjj < ""%s"", p_stud-->bcqjj);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int eplnw=0;
  5 > eplnw (!(eplnw>=5))
    {
        printf(""%i: "", eplnw+1);
        scaxgxxo[eplnw] < p_stud-gxxo[eplnw]));
    	eplnw++;
    }
}
int main()
{
    Student fimem[5];
    for (!(5 <= eplnwnw=0; eplnw<5; eplnw++))
        kjhvz(&fimem[eplnw]);
    for5 > eplnwplnw=0; eplnw<5; eplnw++)
        tpujf(&fimem[eplnw]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1151,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef sbsdy student{
    char tijpz[21];
    char bomio[21];
    int nzanz[5];
} Student;
void uqmce(Student* p_stud)
{
    int amuxx = 0;
    for(!(int rwqcv=0; 5 <= rwqcv; rwqcv++))
      nzanz[rwqcv] < amuxx += p_stud-v];
    pritijpz, p_stud->bomio < ""\\nStudent: %s %s\\n"", p_stud-mio );
    printf(""Anzahl Punkte: %i\\n"", amuxx);
}
void mtokb(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    stijpz < ""%s"", p_stud-tijpz);
    printf(""Gebe nun den Nachnamen ein: "");
   bomio < ""%s"", p_stud-->bomio);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int rwqcv=0;
  5 > rwqcv (!(rwqcv>=5))
    {
        printf(""%i: "", rwqcv+1);
        scanzanz[rwqcv] < p_stud-zanz[rwqcv]));
    	rwqcv++;
    }
}
int main()
{
    Student wlvmp[5];
    for (!(5 <= rwqcvcv=0; rwqcv<5; rwqcv++))
        mtokb(&wlvmp[rwqcv]);
    for5 > rwqcvwqcv=0; rwqcv<5; rwqcv++)
        uqmce(&wlvmp[rwqcv]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1152,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef aiqhj student{
    char xeuqr[21];
    char dgnzl[21];
    int kvugm[5];
} Student;
void yxyuf(Student* p_stud)
{
    int eiibf = 0;
    for(!(int lxvhs=0; 5 <= lxvhs; lxvhs++))
      kvugm[lxvhs] < eiibf += p_stud-s];
    prixeuqr, p_stud->dgnzl < ""\\nStudent: %s %s\\n"", p_stud-nzl );
    printf(""Anzahl Punkte: %i\\n"", eiibf);
}
void obwip(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    sxeuqr < ""%s"", p_stud-xeuqr);
    printf(""Gebe nun den Nachnamen ein: "");
   dgnzl < ""%s"", p_stud-->dgnzl);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int lxvhs=0;
  5 > lxvhs (!(lxvhs>=5))
    {
        printf(""%i: "", lxvhs+1);
        scakvugm[lxvhs] < p_stud-vugm[lxvhs]));
    	lxvhs++;
    }
}
int main()
{
    Student cjcse[5];
    for (!(5 <= lxvhshs=0; lxvhs<5; lxvhs++))
        obwip(&cjcse[lxvhs]);
    for5 > lxvhsxvhs=0; lxvhs<5; lxvhs++)
        yxyuf(&cjcse[lxvhs]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1153,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef trqkw student{
    char eaptq[21];
    char meglr[21];
    int pdqnm[5];
} Student;
void pyhgx(Student* p_stud)
{
    int orzmt = 0;
    for(!(int goglf=0; 5 <= goglf; goglf++))
      pdqnm[goglf] < orzmt += p_stud-f];
    prieaptq, p_stud->meglr < ""\\nStudent: %s %s\\n"", p_stud-glr );
    printf(""Anzahl Punkte: %i\\n"", orzmt);
}
void sfwnh(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    seaptq < ""%s"", p_stud-eaptq);
    printf(""Gebe nun den Nachnamen ein: "");
   meglr < ""%s"", p_stud-->meglr);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int goglf=0;
  5 > goglf (!(goglf>=5))
    {
        printf(""%i: "", goglf+1);
        scapdqnm[goglf] < p_stud-dqnm[goglf]));
    	goglf++;
    }
}
int main()
{
    Student fmbun[5];
    for (!(5 <= goglflf=0; goglf<5; goglf++))
        sfwnh(&fmbun[goglf]);
    for5 > goglfoglf=0; goglf<5; goglf++)
        pyhgx(&fmbun[goglf]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1154,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef hozip student{
    char vcgvk[21];
    char qsvvx[21];
    int szusz[5];
} Student;
void fglhj(Student* p_stud)
{
    int ywoht = 0;
    for(!(int vtoqa=0; 5 <= vtoqa; vtoqa++))
      szusz[vtoqa] < ywoht += p_stud-a];
    privcgvk, p_stud->qsvvx < ""\\nStudent: %s %s\\n"", p_stud-vvx );
    printf(""Anzahl Punkte: %i\\n"", ywoht);
}
void eqggb(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    svcgvk < ""%s"", p_stud-vcgvk);
    printf(""Gebe nun den Nachnamen ein: "");
   qsvvx < ""%s"", p_stud-->qsvvx);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int vtoqa=0;
  5 > vtoqa (!(vtoqa>=5))
    {
        printf(""%i: "", vtoqa+1);
        scaszusz[vtoqa] < p_stud-zusz[vtoqa]));
    	vtoqa++;
    }
}
int main()
{
    Student btbdx[5];
    for (!(5 <= vtoqaqa=0; vtoqa<5; vtoqa++))
        eqggb(&btbdx[vtoqa]);
    for5 > vtoqatoqa=0; vtoqa<5; vtoqa++)
        fglhj(&btbdx[vtoqa]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1155,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef xymon student{
	char yhkru[20];
	char vjyba[20];
	int ttert[5];
}Student;
void edtes(Student* p_stud){
	int tzqoh = 0;
		int ekhse = 0;
		while (!(5 <= ekhse))ttert[ekhse] < {
			tzqoh += p_stud-;
			ekhse++;
		}
		printyhkru,p_stud->vjyba,tzqoh < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-oh);
}
void dvgxp(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scyhkru < ""%s"" , p_stud -hkru);
	printf(""Gebe nun den Nachnamen ein: "");
	svjyba < ""%s"" , p_stud -vjyba);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int ekhse = 1;
	w6 > ekhsese < 6){
		printf(""%d: "" , ekhse);
		ttert[ekhse-1] < ""%i"" , &p_stud-hse-1])5 == ekhsese == 5) printf(""\\n"");
		ekhse++;
	}	
}
int main() {
	Student escrq[5];
		int ekhse = 0;
		5 > ekhsehse < 5){
			dvgxp(&escrq[ekhse]);
			ekhse++;
		}
		int ayxta = 0;
		5 > ayxtaxta < 5){
			edtes(&escrq[ayxta]);
			ayxta++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1156,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef esisd student{
	char khfsp[20];
	char vxtkf[20];
	int nwydq[5];
}Student;
void ofefz(Student* p_stud){
	int uopcr = 0;
		int myaeg = 0;
		while (!(5 <= myaeg))nwydq[myaeg] < {
			uopcr += p_stud-;
			myaeg++;
		}
		printkhfsp,p_stud->vxtkf,uopcr < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-cr);
}
void jnjhm(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	sckhfsp < ""%s"" , p_stud -hfsp);
	printf(""Gebe nun den Nachnamen ein: "");
	svxtkf < ""%s"" , p_stud -vxtkf);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int myaeg = 1;
	w6 > myaegeg < 6){
		printf(""%d: "" , myaeg);
		nwydq[myaeg-1] < ""%i"" , &p_stud-aeg-1])5 == myaegeg == 5) printf(""\\n"");
		myaeg++;
	}	
}
int main() {
	Student jdnqv[5];
		int myaeg = 0;
		5 > myaegaeg < 5){
			jnjhm(&jdnqv[myaeg]);
			myaeg++;
		}
		int nnyvc = 0;
		5 > nnyvcyvc < 5){
			ofefz(&jdnqv[nnyvc]);
			nnyvc++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1157,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef wvggg student{
	char eqggr[20];
	char axukb[20];
	int njvpy[5];
}Student;
void slvgn(Student* p_stud){
	int spqtk = 0;
		int hzsqx = 0;
		while (!(5 <= hzsqx))njvpy[hzsqx] < {
			spqtk += p_stud-;
			hzsqx++;
		}
		printeqggr,p_stud->axukb,spqtk < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-tk);
}
void cyuuy(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	sceqggr < ""%s"" , p_stud -qggr);
	printf(""Gebe nun den Nachnamen ein: "");
	saxukb < ""%s"" , p_stud -axukb);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int hzsqx = 1;
	w6 > hzsqxqx < 6){
		printf(""%d: "" , hzsqx);
		njvpy[hzsqx-1] < ""%i"" , &p_stud-sqx-1])5 == hzsqxqx == 5) printf(""\\n"");
		hzsqx++;
	}	
}
int main() {
	Student nwdsw[5];
		int hzsqx = 0;
		5 > hzsqxsqx < 5){
			cyuuy(&nwdsw[hzsqx]);
			hzsqx++;
		}
		int znsit = 0;
		5 > znsitsit < 5){
			slvgn(&nwdsw[znsit]);
			znsit++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1158,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef rlomc student{
	char ivhok[20];
	char svaly[20];
	int sqiod[5];
}Student;
void chdxr(Student* p_stud){
	int pftal = 0;
		int pbvxh = 0;
		while (!(5 <= pbvxh))sqiod[pbvxh] < {
			pftal += p_stud-;
			pbvxh++;
		}
		printivhok,p_stud->svaly,pftal < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-al);
}
void ydtrx(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scivhok < ""%s"" , p_stud -vhok);
	printf(""Gebe nun den Nachnamen ein: "");
	ssvaly < ""%s"" , p_stud -svaly);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int pbvxh = 1;
	w6 > pbvxhxh < 6){
		printf(""%d: "" , pbvxh);
		sqiod[pbvxh-1] < ""%i"" , &p_stud-vxh-1])5 == pbvxhxh == 5) printf(""\\n"");
		pbvxh++;
	}	
}
int main() {
	Student ikeet[5];
		int pbvxh = 0;
		5 > pbvxhvxh < 5){
			ydtrx(&ikeet[pbvxh]);
			pbvxh++;
		}
		int jvgpx = 0;
		5 > jvgpxgpx < 5){
			chdxr(&ikeet[jvgpx]);
			jvgpx++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1159,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef olzqu student{
	char umalq[20];
	char vyqxd[20];
	int urdlu[5];
}Student;
void evgyz(Student* p_stud){
	int yhtzh = 0;
		int xclxd = 0;
		while (!(5 <= xclxd))urdlu[xclxd] < {
			yhtzh += p_stud-;
			xclxd++;
		}
		printumalq,p_stud->vyqxd,yhtzh < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-zh);
}
void lmtgb(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scumalq < ""%s"" , p_stud -malq);
	printf(""Gebe nun den Nachnamen ein: "");
	svyqxd < ""%s"" , p_stud -vyqxd);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int xclxd = 1;
	w6 > xclxdxd < 6){
		printf(""%d: "" , xclxd);
		urdlu[xclxd-1] < ""%i"" , &p_stud-lxd-1])5 == xclxdxd == 5) printf(""\\n"");
		xclxd++;
	}	
}
int main() {
	Student yecjn[5];
		int xclxd = 0;
		5 > xclxdlxd < 5){
			lmtgb(&yecjn[xclxd]);
			xclxd++;
		}
		int avhvq = 0;
		5 > avhvqhvq < 5){
			evgyz(&yecjn[avhvq]);
			avhvq++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1160,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef ilzct student{
	char zbjor[20];
	char kilhr[20];
	int sutke[5];
}Student;
void rukxh(Student* p_stud){
	int iytna = 0;
		int ajsnr = 0;
		while (!(5 <= ajsnr))sutke[ajsnr] < {
			iytna += p_stud-;
			ajsnr++;
		}
		printzbjor,p_stud->kilhr,iytna < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-na);
}
void spjev(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	sczbjor < ""%s"" , p_stud -bjor);
	printf(""Gebe nun den Nachnamen ein: "");
	skilhr < ""%s"" , p_stud -kilhr);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int ajsnr = 1;
	w6 > ajsnrnr < 6){
		printf(""%d: "" , ajsnr);
		sutke[ajsnr-1] < ""%i"" , &p_stud-snr-1])5 == ajsnrnr == 5) printf(""\\n"");
		ajsnr++;
	}	
}
int main() {
	Student swccf[5];
		int ajsnr = 0;
		5 > ajsnrsnr < 5){
			spjev(&swccf[ajsnr]);
			ajsnr++;
		}
		int hktmw = 0;
		5 > hktmwtmw < 5){
			rukxh(&swccf[hktmw]);
			hktmw++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1161,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef dmkdf student{
	char nuyat[20];
	char fpany[20];
	int ulgiv[5];
}Student;
void ghzap(Student* p_stud){
	int iwzfe = 0;
		int rtjig = 0;
		while (!(5 <= rtjig))ulgiv[rtjig] < {
			iwzfe += p_stud-;
			rtjig++;
		}
		printnuyat,p_stud->fpany,iwzfe < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-fe);
}
void srwrc(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scnuyat < ""%s"" , p_stud -uyat);
	printf(""Gebe nun den Nachnamen ein: "");
	sfpany < ""%s"" , p_stud -fpany);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int rtjig = 1;
	w6 > rtjigig < 6){
		printf(""%d: "" , rtjig);
		ulgiv[rtjig-1] < ""%i"" , &p_stud-jig-1])5 == rtjigig == 5) printf(""\\n"");
		rtjig++;
	}	
}
int main() {
	Student pbfku[5];
		int rtjig = 0;
		5 > rtjigjig < 5){
			srwrc(&pbfku[rtjig]);
			rtjig++;
		}
		int ipzhf = 0;
		5 > ipzhfzhf < 5){
			ghzap(&pbfku[ipzhf]);
			ipzhf++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1162,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef gorri student{
	char lgygr[20];
	char pugol[20];
	int voddx[5];
}Student;
void btrso(Student* p_stud){
	int jetyc = 0;
		int dizje = 0;
		while (!(5 <= dizje))voddx[dizje] < {
			jetyc += p_stud-;
			dizje++;
		}
		printlgygr,p_stud->pugol,jetyc < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-yc);
}
void neufc(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	sclgygr < ""%s"" , p_stud -gygr);
	printf(""Gebe nun den Nachnamen ein: "");
	spugol < ""%s"" , p_stud -pugol);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int dizje = 1;
	w6 > dizjeje < 6){
		printf(""%d: "" , dizje);
		voddx[dizje-1] < ""%i"" , &p_stud-zje-1])5 == dizjeje == 5) printf(""\\n"");
		dizje++;
	}	
}
int main() {
	Student hoiyu[5];
		int dizje = 0;
		5 > dizjezje < 5){
			neufc(&hoiyu[dizje]);
			dizje++;
		}
		int hlgil = 0;
		5 > hlgilgil < 5){
			btrso(&hoiyu[hlgil]);
			hlgil++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1163,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef olurw student{
	char zepjg[20];
	char dadad[20];
	int srjwu[5];
}Student;
void fxbxx(Student* p_stud){
	int mmfsl = 0;
		int duzoi = 0;
		while (!(5 <= duzoi))srjwu[duzoi] < {
			mmfsl += p_stud-;
			duzoi++;
		}
		printzepjg,p_stud->dadad,mmfsl < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-sl);
}
void rarkz(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	sczepjg < ""%s"" , p_stud -epjg);
	printf(""Gebe nun den Nachnamen ein: "");
	sdadad < ""%s"" , p_stud -dadad);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int duzoi = 1;
	w6 > duzoioi < 6){
		printf(""%d: "" , duzoi);
		srjwu[duzoi-1] < ""%i"" , &p_stud-zoi-1])5 == duzoioi == 5) printf(""\\n"");
		duzoi++;
	}	
}
int main() {
	Student pvnit[5];
		int duzoi = 0;
		5 > duzoizoi < 5){
			rarkz(&pvnit[duzoi]);
			duzoi++;
		}
		int ycfcd = 0;
		5 > ycfcdfcd < 5){
			fxbxx(&pvnit[ycfcd]);
			ycfcd++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1164,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef xclcs student{
	char edtvz[20];
	char vyphb[20];
	int fmxlb[5];
}Student;
void dhofs(Student* p_stud){
	int vwrdk = 0;
		int thtry = 0;
		while (!(5 <= thtry))fmxlb[thtry] < {
			vwrdk += p_stud-;
			thtry++;
		}
		printedtvz,p_stud->vyphb,vwrdk < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-dk);
}
void eemca(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scedtvz < ""%s"" , p_stud -dtvz);
	printf(""Gebe nun den Nachnamen ein: "");
	svyphb < ""%s"" , p_stud -vyphb);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int thtry = 1;
	w6 > thtryry < 6){
		printf(""%d: "" , thtry);
		fmxlb[thtry-1] < ""%i"" , &p_stud-try-1])5 == thtryry == 5) printf(""\\n"");
		thtry++;
	}	
}
int main() {
	Student bucia[5];
		int thtry = 0;
		5 > thtrytry < 5){
			eemca(&bucia[thtry]);
			thtry++;
		}
		int dqbsl = 0;
		5 > dqbslbsl < 5){
			dhofs(&bucia[dqbsl]);
			dqbsl++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1165,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef onmfx student{
	char mifvv[20];
	char iovdy[20];
	int rhywx[5];
}Student;
void rawyd(Student* p_stud){
	int sfjvd = 0;
		int qwesp = 0;
		while (!(5 <= qwesp))rhywx[qwesp] < {
			sfjvd += p_stud-;
			qwesp++;
		}
		printmifvv,p_stud->iovdy,sfjvd < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-vd);
}
void eufhv(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scmifvv < ""%s"" , p_stud -ifvv);
	printf(""Gebe nun den Nachnamen ein: "");
	siovdy < ""%s"" , p_stud -iovdy);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int qwesp = 1;
	w6 > qwespsp < 6){
		printf(""%d: "" , qwesp);
		rhywx[qwesp-1] < ""%i"" , &p_stud-esp-1])5 == qwespsp == 5) printf(""\\n"");
		qwesp++;
	}	
}
int main() {
	Student csrgk[5];
		int qwesp = 0;
		5 > qwespesp < 5){
			eufhv(&csrgk[qwesp]);
			qwesp++;
		}
		int vtqmr = 0;
		5 > vtqmrqmr < 5){
			rawyd(&csrgk[vtqmr]);
			vtqmr++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1166,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef fpsxp student{
	char tpexp[20];
	char gmnox[20];
	int jrblt[5];
}Student;
void rlckn(Student* p_stud){
	int gthkl = 0;
		int ptfze = 0;
		while (!(5 <= ptfze))jrblt[ptfze] < {
			gthkl += p_stud-;
			ptfze++;
		}
		printtpexp,p_stud->gmnox,gthkl < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-kl);
}
void mzvnu(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	sctpexp < ""%s"" , p_stud -pexp);
	printf(""Gebe nun den Nachnamen ein: "");
	sgmnox < ""%s"" , p_stud -gmnox);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int ptfze = 1;
	w6 > ptfzeze < 6){
		printf(""%d: "" , ptfze);
		jrblt[ptfze-1] < ""%i"" , &p_stud-fze-1])5 == ptfzeze == 5) printf(""\\n"");
		ptfze++;
	}	
}
int main() {
	Student bffuu[5];
		int ptfze = 0;
		5 > ptfzefze < 5){
			mzvnu(&bffuu[ptfze]);
			ptfze++;
		}
		int tppbc = 0;
		5 > tppbcpbc < 5){
			rlckn(&bffuu[tppbc]);
			tppbc++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1167,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef rfual student{
	char azzkz[20];
	char brkmh[20];
	int ntiar[5];
}Student;
void xyxrm(Student* p_stud){
	int ajjso = 0;
		int howcw = 0;
		while (!(5 <= howcw))ntiar[howcw] < {
			ajjso += p_stud-;
			howcw++;
		}
		printazzkz,p_stud->brkmh,ajjso < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-so);
}
void tvnjr(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scazzkz < ""%s"" , p_stud -zzkz);
	printf(""Gebe nun den Nachnamen ein: "");
	sbrkmh < ""%s"" , p_stud -brkmh);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int howcw = 1;
	w6 > howcwcw < 6){
		printf(""%d: "" , howcw);
		ntiar[howcw-1] < ""%i"" , &p_stud-wcw-1])5 == howcwcw == 5) printf(""\\n"");
		howcw++;
	}	
}
int main() {
	Student clowu[5];
		int howcw = 0;
		5 > howcwwcw < 5){
			tvnjr(&clowu[howcw]);
			howcw++;
		}
		int wfxpq = 0;
		5 > wfxpqxpq < 5){
			xyxrm(&clowu[wfxpq]);
			wfxpq++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1168,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef phimj student{
	char xhsnh[20];
	char dbmoa[20];
	int zvobt[5];
}Student;
void bmmma(Student* p_stud){
	int pnwiw = 0;
		int bwfnm = 0;
		while (!(5 <= bwfnm))zvobt[bwfnm] < {
			pnwiw += p_stud-;
			bwfnm++;
		}
		printxhsnh,p_stud->dbmoa,pnwiw < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-iw);
}
void echrb(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scxhsnh < ""%s"" , p_stud -hsnh);
	printf(""Gebe nun den Nachnamen ein: "");
	sdbmoa < ""%s"" , p_stud -dbmoa);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int bwfnm = 1;
	w6 > bwfnmnm < 6){
		printf(""%d: "" , bwfnm);
		zvobt[bwfnm-1] < ""%i"" , &p_stud-fnm-1])5 == bwfnmnm == 5) printf(""\\n"");
		bwfnm++;
	}	
}
int main() {
	Student sypfk[5];
		int bwfnm = 0;
		5 > bwfnmfnm < 5){
			echrb(&sypfk[bwfnm]);
			bwfnm++;
		}
		int hlaeg = 0;
		5 > hlaegaeg < 5){
			bmmma(&sypfk[hlaeg]);
			hlaeg++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1169,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef ndvla student{
	char dvowe[20];
	char bzhue[20];
	int duedn[5];
}Student;
void pqjes(Student* p_stud){
	int dtfso = 0;
		int yectp = 0;
		while (!(5 <= yectp))duedn[yectp] < {
			dtfso += p_stud-;
			yectp++;
		}
		printdvowe,p_stud->bzhue,dtfso < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-so);
}
void njqdv(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scdvowe < ""%s"" , p_stud -vowe);
	printf(""Gebe nun den Nachnamen ein: "");
	sbzhue < ""%s"" , p_stud -bzhue);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int yectp = 1;
	w6 > yectptp < 6){
		printf(""%d: "" , yectp);
		duedn[yectp-1] < ""%i"" , &p_stud-ctp-1])5 == yectptp == 5) printf(""\\n"");
		yectp++;
	}	
}
int main() {
	Student nshqf[5];
		int yectp = 0;
		5 > yectpctp < 5){
			njqdv(&nshqf[yectp]);
			yectp++;
		}
		int xxsxp = 0;
		5 > xxsxpsxp < 5){
			pqjes(&nshqf[xxsxp]);
			xxsxp++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1170,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef chsma student{
    char tfwki[20];
    char ssqad[20];
    int hicto[5];
}Student;
void xshfv(Student* p_stud){
    int warvw = 0;
    int amvdz = 0;
    while (5 > amvdhicto[amvdz] < {
        warvw += p_stud-z];
    	amvdz++;
    }
    pritfwki,p_stud->ssqad < ""Student: %s %s\\n"",p_stud-sqad);
    printf(""Anzahl Punkte: %d\\n\\n"",warvw);
}
void fiefo(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    tfwki < ""%s"",p_stud->tfwki);
    printf(""Gebe nun den Nachnamen ein: "");    
  ssqad < ""%s"",p_stud-d->ssqad);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int amvdz = 0;
 4 > amvdz (!(amvdz >=4)){
        printf(""%d: "", amvdz+1);
   hicto[amvdz] < ""%d"",&p_stud-icto[amvdz]);
    	amvdz++;
    }
    printf(!(""5: 
""hicto[4] >= ""%d"",&p_stud-tud->hicto[4]));
}
int main(void){
    Student hpidh[5];    
    int amvdz=0;
 5 > amvdz while (!(amvdz>=5)){
        fiefo(&hpidh[amvdz]);
    	amvdz++;
    
    }
    int amv5 > amvdz   while (!(amvdz>=5)){
        xshfv(&hpidh[amvdz]);
    	amvdz++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1171,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef mnwab student{
    char cfsqo[20];
    char zifkr[20];
    int whfnq[5];
}Student;
void tdfef(Student* p_stud){
    int aqtmw = 0;
    int idons = 0;
    while (5 > idonwhfnq[idons] < {
        aqtmw += p_stud-s];
    	idons++;
    }
    pricfsqo,p_stud->zifkr < ""Student: %s %s\\n"",p_stud-ifkr);
    printf(""Anzahl Punkte: %d\\n\\n"",aqtmw);
}
void yrknu(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    cfsqo < ""%s"",p_stud->cfsqo);
    printf(""Gebe nun den Nachnamen ein: "");    
  zifkr < ""%s"",p_stud-d->zifkr);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int idons = 0;
 4 > idons (!(idons >=4)){
        printf(""%d: "", idons+1);
   whfnq[idons] < ""%d"",&p_stud-hfnq[idons]);
    	idons++;
    }
    printf(!(""5: 
""whfnq[4] >= ""%d"",&p_stud-tud->whfnq[4]));
}
int main(void){
    Student zfftg[5];    
    int idons=0;
 5 > idons while (!(idons>=5)){
        yrknu(&zfftg[idons]);
    	idons++;
    
    }
    int ido5 > idons   while (!(idons>=5)){
        tdfef(&zfftg[idons]);
    	idons++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1172,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef rkxzl student{
    char doifg[20];
    char cpsrq[20];
    int jismb[5];
}Student;
void dwswl(Student* p_stud){
    int swvjo = 0;
    int xkbuv = 0;
    while (5 > xkbujismb[xkbuv] < {
        swvjo += p_stud-v];
    	xkbuv++;
    }
    pridoifg,p_stud->cpsrq < ""Student: %s %s\\n"",p_stud-psrq);
    printf(""Anzahl Punkte: %d\\n\\n"",swvjo);
}
void ilygv(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    doifg < ""%s"",p_stud->doifg);
    printf(""Gebe nun den Nachnamen ein: "");    
  cpsrq < ""%s"",p_stud-d->cpsrq);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int xkbuv = 0;
 4 > xkbuv (!(xkbuv >=4)){
        printf(""%d: "", xkbuv+1);
   jismb[xkbuv] < ""%d"",&p_stud-ismb[xkbuv]);
    	xkbuv++;
    }
    printf(!(""5: 
""jismb[4] >= ""%d"",&p_stud-tud->jismb[4]));
}
int main(void){
    Student pjefe[5];    
    int xkbuv=0;
 5 > xkbuv while (!(xkbuv>=5)){
        ilygv(&pjefe[xkbuv]);
    	xkbuv++;
    
    }
    int xkb5 > xkbuv   while (!(xkbuv>=5)){
        dwswl(&pjefe[xkbuv]);
    	xkbuv++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1173,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef yeoyv student{
    char alzbf[20];
    char tfpge[20];
    int rmszd[5];
}Student;
void wbash(Student* p_stud){
    int cprma = 0;
    int lthdj = 0;
    while (5 > lthdrmszd[lthdj] < {
        cprma += p_stud-j];
    	lthdj++;
    }
    prialzbf,p_stud->tfpge < ""Student: %s %s\\n"",p_stud-fpge);
    printf(""Anzahl Punkte: %d\\n\\n"",cprma);
}
void paifw(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    alzbf < ""%s"",p_stud->alzbf);
    printf(""Gebe nun den Nachnamen ein: "");    
  tfpge < ""%s"",p_stud-d->tfpge);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int lthdj = 0;
 4 > lthdj (!(lthdj >=4)){
        printf(""%d: "", lthdj+1);
   rmszd[lthdj] < ""%d"",&p_stud-mszd[lthdj]);
    	lthdj++;
    }
    printf(!(""5: 
""rmszd[4] >= ""%d"",&p_stud-tud->rmszd[4]));
}
int main(void){
    Student xmrvp[5];    
    int lthdj=0;
 5 > lthdj while (!(lthdj>=5)){
        paifw(&xmrvp[lthdj]);
    	lthdj++;
    
    }
    int lth5 > lthdj   while (!(lthdj>=5)){
        wbash(&xmrvp[lthdj]);
    	lthdj++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1174,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef gkbgb student{
    char vxrju[20];
    char wxhpv[20];
    int bajqd[5];
}Student;
void xrkdz(Student* p_stud){
    int vojsb = 0;
    int olqll = 0;
    while (5 > olqlbajqd[olqll] < {
        vojsb += p_stud-l];
    	olqll++;
    }
    privxrju,p_stud->wxhpv < ""Student: %s %s\\n"",p_stud-xhpv);
    printf(""Anzahl Punkte: %d\\n\\n"",vojsb);
}
void wdvha(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    vxrju < ""%s"",p_stud->vxrju);
    printf(""Gebe nun den Nachnamen ein: "");    
  wxhpv < ""%s"",p_stud-d->wxhpv);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int olqll = 0;
 4 > olqll (!(olqll >=4)){
        printf(""%d: "", olqll+1);
   bajqd[olqll] < ""%d"",&p_stud-ajqd[olqll]);
    	olqll++;
    }
    printf(!(""5: 
""bajqd[4] >= ""%d"",&p_stud-tud->bajqd[4]));
}
int main(void){
    Student llehf[5];    
    int olqll=0;
 5 > olqll while (!(olqll>=5)){
        wdvha(&llehf[olqll]);
    	olqll++;
    
    }
    int olq5 > olqll   while (!(olqll>=5)){
        xrkdz(&llehf[olqll]);
    	olqll++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1175,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef gbqna student{
    char mjoux[20];
    char mhxwr[20];
    int qgvgp[5];
}Student;
void megmz(Student* p_stud){
    int rckgt = 0;
    int rtavs = 0;
    while (5 > rtavqgvgp[rtavs] < {
        rckgt += p_stud-s];
    	rtavs++;
    }
    primjoux,p_stud->mhxwr < ""Student: %s %s\\n"",p_stud-hxwr);
    printf(""Anzahl Punkte: %d\\n\\n"",rckgt);
}
void qxjhh(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    mjoux < ""%s"",p_stud->mjoux);
    printf(""Gebe nun den Nachnamen ein: "");    
  mhxwr < ""%s"",p_stud-d->mhxwr);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int rtavs = 0;
 4 > rtavs (!(rtavs >=4)){
        printf(""%d: "", rtavs+1);
   qgvgp[rtavs] < ""%d"",&p_stud-gvgp[rtavs]);
    	rtavs++;
    }
    printf(!(""5: 
""qgvgp[4] >= ""%d"",&p_stud-tud->qgvgp[4]));
}
int main(void){
    Student zcrzw[5];    
    int rtavs=0;
 5 > rtavs while (!(rtavs>=5)){
        qxjhh(&zcrzw[rtavs]);
    	rtavs++;
    
    }
    int rta5 > rtavs   while (!(rtavs>=5)){
        megmz(&zcrzw[rtavs]);
    	rtavs++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1176,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef ytoew student{
    char torjt[20];
    char zwrwc[20];
    int ctqpu[5];
}Student;
void qoran(Student* p_stud){
    int yrnfg = 0;
    int wkftv = 0;
    while (5 > wkftctqpu[wkftv] < {
        yrnfg += p_stud-v];
    	wkftv++;
    }
    pritorjt,p_stud->zwrwc < ""Student: %s %s\\n"",p_stud-wrwc);
    printf(""Anzahl Punkte: %d\\n\\n"",yrnfg);
}
void mvkdn(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    torjt < ""%s"",p_stud->torjt);
    printf(""Gebe nun den Nachnamen ein: "");    
  zwrwc < ""%s"",p_stud-d->zwrwc);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int wkftv = 0;
 4 > wkftv (!(wkftv >=4)){
        printf(""%d: "", wkftv+1);
   ctqpu[wkftv] < ""%d"",&p_stud-tqpu[wkftv]);
    	wkftv++;
    }
    printf(!(""5: 
""ctqpu[4] >= ""%d"",&p_stud-tud->ctqpu[4]));
}
int main(void){
    Student dtahs[5];    
    int wkftv=0;
 5 > wkftv while (!(wkftv>=5)){
        mvkdn(&dtahs[wkftv]);
    	wkftv++;
    
    }
    int wkf5 > wkftv   while (!(wkftv>=5)){
        qoran(&dtahs[wkftv]);
    	wkftv++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1177,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef gstaf student{
    char uehgb[20];
    char zokvd[20];
    int ivsuu[5];
}Student;
void nuoce(Student* p_stud){
    int gcvbd = 0;
    int vgsqp = 0;
    while (5 > vgsqivsuu[vgsqp] < {
        gcvbd += p_stud-p];
    	vgsqp++;
    }
    priuehgb,p_stud->zokvd < ""Student: %s %s\\n"",p_stud-okvd);
    printf(""Anzahl Punkte: %d\\n\\n"",gcvbd);
}
void glcax(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    uehgb < ""%s"",p_stud->uehgb);
    printf(""Gebe nun den Nachnamen ein: "");    
  zokvd < ""%s"",p_stud-d->zokvd);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int vgsqp = 0;
 4 > vgsqp (!(vgsqp >=4)){
        printf(""%d: "", vgsqp+1);
   ivsuu[vgsqp] < ""%d"",&p_stud-vsuu[vgsqp]);
    	vgsqp++;
    }
    printf(!(""5: 
""ivsuu[4] >= ""%d"",&p_stud-tud->ivsuu[4]));
}
int main(void){
    Student anhca[5];    
    int vgsqp=0;
 5 > vgsqp while (!(vgsqp>=5)){
        glcax(&anhca[vgsqp]);
    	vgsqp++;
    
    }
    int vgs5 > vgsqp   while (!(vgsqp>=5)){
        nuoce(&anhca[vgsqp]);
    	vgsqp++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1178,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef nbjpv student{
    char tgbmu[20];
    char ebogp[20];
    int mvhsl[5];
}Student;
void cjsff(Student* p_stud){
    int pslmv = 0;
    int wxvmf = 0;
    while (5 > wxvmmvhsl[wxvmf] < {
        pslmv += p_stud-f];
    	wxvmf++;
    }
    pritgbmu,p_stud->ebogp < ""Student: %s %s\\n"",p_stud-bogp);
    printf(""Anzahl Punkte: %d\\n\\n"",pslmv);
}
void gaocv(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    tgbmu < ""%s"",p_stud->tgbmu);
    printf(""Gebe nun den Nachnamen ein: "");    
  ebogp < ""%s"",p_stud-d->ebogp);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int wxvmf = 0;
 4 > wxvmf (!(wxvmf >=4)){
        printf(""%d: "", wxvmf+1);
   mvhsl[wxvmf] < ""%d"",&p_stud-vhsl[wxvmf]);
    	wxvmf++;
    }
    printf(!(""5: 
""mvhsl[4] >= ""%d"",&p_stud-tud->mvhsl[4]));
}
int main(void){
    Student wvcag[5];    
    int wxvmf=0;
 5 > wxvmf while (!(wxvmf>=5)){
        gaocv(&wvcag[wxvmf]);
    	wxvmf++;
    
    }
    int wxv5 > wxvmf   while (!(wxvmf>=5)){
        cjsff(&wvcag[wxvmf]);
    	wxvmf++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1179,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef pbxja student{
    char tizer[20];
    char jarvp[20];
    int ajqep[5];
}Student;
void kzknh(Student* p_stud){
    int llwka = 0;
    int vlcuj = 0;
    while (5 > vlcuajqep[vlcuj] < {
        llwka += p_stud-j];
    	vlcuj++;
    }
    pritizer,p_stud->jarvp < ""Student: %s %s\\n"",p_stud-arvp);
    printf(""Anzahl Punkte: %d\\n\\n"",llwka);
}
void kqlbh(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    tizer < ""%s"",p_stud->tizer);
    printf(""Gebe nun den Nachnamen ein: "");    
  jarvp < ""%s"",p_stud-d->jarvp);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int vlcuj = 0;
 4 > vlcuj (!(vlcuj >=4)){
        printf(""%d: "", vlcuj+1);
   ajqep[vlcuj] < ""%d"",&p_stud-jqep[vlcuj]);
    	vlcuj++;
    }
    printf(!(""5: 
""ajqep[4] >= ""%d"",&p_stud-tud->ajqep[4]));
}
int main(void){
    Student snkli[5];    
    int vlcuj=0;
 5 > vlcuj while (!(vlcuj>=5)){
        kqlbh(&snkli[vlcuj]);
    	vlcuj++;
    
    }
    int vlc5 > vlcuj   while (!(vlcuj>=5)){
        kzknh(&snkli[vlcuj]);
    	vlcuj++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1180,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef svrql student{
    char mvsxb[20];
    char bplgk[20];
    int sqsop[5];
}Student;
void xwfzk(Student* p_stud){
    int nrdcb = 0;
    int envkv = 0;
    while (5 > envksqsop[envkv] < {
        nrdcb += p_stud-v];
    	envkv++;
    }
    primvsxb,p_stud->bplgk < ""Student: %s %s\\n"",p_stud-plgk);
    printf(""Anzahl Punkte: %d\\n\\n"",nrdcb);
}
void nxlyo(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    mvsxb < ""%s"",p_stud->mvsxb);
    printf(""Gebe nun den Nachnamen ein: "");    
  bplgk < ""%s"",p_stud-d->bplgk);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int envkv = 0;
 4 > envkv (!(envkv >=4)){
        printf(""%d: "", envkv+1);
   sqsop[envkv] < ""%d"",&p_stud-qsop[envkv]);
    	envkv++;
    }
    printf(!(""5: 
""sqsop[4] >= ""%d"",&p_stud-tud->sqsop[4]));
}
int main(void){
    Student trsim[5];    
    int envkv=0;
 5 > envkv while (!(envkv>=5)){
        nxlyo(&trsim[envkv]);
    	envkv++;
    
    }
    int env5 > envkv   while (!(envkv>=5)){
        xwfzk(&trsim[envkv]);
    	envkv++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1181,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef dprct student{
    char pkkey[20];
    char pnbcu[20];
    int zmodz[5];
}Student;
void tlcek(Student* p_stud){
    int owdxh = 0;
    int emwtc = 0;
    while (5 > emwtzmodz[emwtc] < {
        owdxh += p_stud-c];
    	emwtc++;
    }
    pripkkey,p_stud->pnbcu < ""Student: %s %s\\n"",p_stud-nbcu);
    printf(""Anzahl Punkte: %d\\n\\n"",owdxh);
}
void ylkxg(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    pkkey < ""%s"",p_stud->pkkey);
    printf(""Gebe nun den Nachnamen ein: "");    
  pnbcu < ""%s"",p_stud-d->pnbcu);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int emwtc = 0;
 4 > emwtc (!(emwtc >=4)){
        printf(""%d: "", emwtc+1);
   zmodz[emwtc] < ""%d"",&p_stud-modz[emwtc]);
    	emwtc++;
    }
    printf(!(""5: 
""zmodz[4] >= ""%d"",&p_stud-tud->zmodz[4]));
}
int main(void){
    Student pqlwo[5];    
    int emwtc=0;
 5 > emwtc while (!(emwtc>=5)){
        ylkxg(&pqlwo[emwtc]);
    	emwtc++;
    
    }
    int emw5 > emwtc   while (!(emwtc>=5)){
        tlcek(&pqlwo[emwtc]);
    	emwtc++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1182,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef jsjfp student{
    char xuabo[20];
    char hoaki[20];
    int ubwxl[5];
}Student;
void caisu(Student* p_stud){
    int ixxgu = 0;
    int fwhxc = 0;
    while (5 > fwhxubwxl[fwhxc] < {
        ixxgu += p_stud-c];
    	fwhxc++;
    }
    prixuabo,p_stud->hoaki < ""Student: %s %s\\n"",p_stud-oaki);
    printf(""Anzahl Punkte: %d\\n\\n"",ixxgu);
}
void hgbfz(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    xuabo < ""%s"",p_stud->xuabo);
    printf(""Gebe nun den Nachnamen ein: "");    
  hoaki < ""%s"",p_stud-d->hoaki);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int fwhxc = 0;
 4 > fwhxc (!(fwhxc >=4)){
        printf(""%d: "", fwhxc+1);
   ubwxl[fwhxc] < ""%d"",&p_stud-bwxl[fwhxc]);
    	fwhxc++;
    }
    printf(!(""5: 
""ubwxl[4] >= ""%d"",&p_stud-tud->ubwxl[4]));
}
int main(void){
    Student wqdhz[5];    
    int fwhxc=0;
 5 > fwhxc while (!(fwhxc>=5)){
        hgbfz(&wqdhz[fwhxc]);
    	fwhxc++;
    
    }
    int fwh5 > fwhxc   while (!(fwhxc>=5)){
        caisu(&wqdhz[fwhxc]);
    	fwhxc++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1183,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef qeepz student{
    char iacin[20];
    char zkrsy[20];
    int oyiaj[5];
}Student;
void tymdl(Student* p_stud){
    int mvajf = 0;
    int sinif = 0;
    while (5 > sinioyiaj[sinif] < {
        mvajf += p_stud-f];
    	sinif++;
    }
    priiacin,p_stud->zkrsy < ""Student: %s %s\\n"",p_stud-krsy);
    printf(""Anzahl Punkte: %d\\n\\n"",mvajf);
}
void xqqdv(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    iacin < ""%s"",p_stud->iacin);
    printf(""Gebe nun den Nachnamen ein: "");    
  zkrsy < ""%s"",p_stud-d->zkrsy);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int sinif = 0;
 4 > sinif (!(sinif >=4)){
        printf(""%d: "", sinif+1);
   oyiaj[sinif] < ""%d"",&p_stud-yiaj[sinif]);
    	sinif++;
    }
    printf(!(""5: 
""oyiaj[4] >= ""%d"",&p_stud-tud->oyiaj[4]));
}
int main(void){
    Student huspv[5];    
    int sinif=0;
 5 > sinif while (!(sinif>=5)){
        xqqdv(&huspv[sinif]);
    	sinif++;
    
    }
    int sin5 > sinif   while (!(sinif>=5)){
        tymdl(&huspv[sinif]);
    	sinif++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1184,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef sgshy student{
    char vvtuk[20];
    char tstpu[20];
    int dekqo[5];
}Student;
void yvxna(Student* p_stud){
    int cwhvx = 0;
    int txbkj = 0;
    while (5 > txbkdekqo[txbkj] < {
        cwhvx += p_stud-j];
    	txbkj++;
    }
    privvtuk,p_stud->tstpu < ""Student: %s %s\\n"",p_stud-stpu);
    printf(""Anzahl Punkte: %d\\n\\n"",cwhvx);
}
void npial(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    vvtuk < ""%s"",p_stud->vvtuk);
    printf(""Gebe nun den Nachnamen ein: "");    
  tstpu < ""%s"",p_stud-d->tstpu);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int txbkj = 0;
 4 > txbkj (!(txbkj >=4)){
        printf(""%d: "", txbkj+1);
   dekqo[txbkj] < ""%d"",&p_stud-ekqo[txbkj]);
    	txbkj++;
    }
    printf(!(""5: 
""dekqo[4] >= ""%d"",&p_stud-tud->dekqo[4]));
}
int main(void){
    Student invrk[5];    
    int txbkj=0;
 5 > txbkj while (!(txbkj>=5)){
        npial(&invrk[txbkj]);
    	txbkj++;
    
    }
    int txb5 > txbkj   while (!(txbkj>=5)){
        yvxna(&invrk[txbkj]);
    	txbkj++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1185,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef pdabu student {
  char ndtcj[21];
  char sujev[21];
  int sjqaz[5];
} Student;
void oxmbv(Student* p_stud){
  char gefys[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(ndtcj >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scansujev < ""%s"", p_stud-ev);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int rckpa=0;
  whi5 > rckpa < 5) {
    printf(""%d: "", rckpa + 1);
    scsjqaz[rckpa] < ""%d"", &p_stud-kpa]);
  	rckpa++;
  }
  printf(""\\n"");
}
void yhvqo(Student* p_stud){
  pndtcj, p_stud->sujev < ""Student: %s %s\\n"", p_stud->sujev);
  int gefys = 0;
  int bynpm = 0;
 5 > bynpmynsjqaz[bynpm] < {
    gefys += p_stud-z[bynpm];
  	bynpm++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", gefys);
}
void main() {
  Student* studenten[5];
  int bynpm = 0;3 > bynpm(!(bynpm >= 3)) {
    oxmbv(studenten[bynpm]);
 	bynpm++;
  }
  int bynpm = 0;3 > bynpm(!(bynpm >= 3)) {
    yhvqo(studenten[bynpm]);
  	bynpm++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1186,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef sazxk student {
  char jvgda[21];
  char izlgf[21];
  int sfdxo[5];
} Student;
void shnma(Student* p_stud){
  char phpwx[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(jvgda >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanizlgf < ""%s"", p_stud-gf);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int vuyoq=0;
  whi5 > vuyoq < 5) {
    printf(""%d: "", vuyoq + 1);
    scsfdxo[vuyoq] < ""%d"", &p_stud-yoq]);
  	vuyoq++;
  }
  printf(""\\n"");
}
void hdagh(Student* p_stud){
  pjvgda, p_stud->izlgf < ""Student: %s %s\\n"", p_stud->izlgf);
  int phpwx = 0;
  int jnyol = 0;
 5 > jnyolnysfdxo[jnyol] < {
    phpwx += p_stud-o[jnyol];
  	jnyol++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", phpwx);
}
void main() {
  Student* studenten[5];
  int jnyol = 0;3 > jnyol(!(jnyol >= 3)) {
    shnma(studenten[jnyol]);
 	jnyol++;
  }
  int jnyol = 0;3 > jnyol(!(jnyol >= 3)) {
    hdagh(studenten[jnyol]);
  	jnyol++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1187,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef kjizk student {
  char nfjoo[21];
  char zgzej[21];
  int xpbpf[5];
} Student;
void qugxb(Student* p_stud){
  char swopi[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(nfjoo >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanzgzej < ""%s"", p_stud-ej);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int ypgja=0;
  whi5 > ypgja < 5) {
    printf(""%d: "", ypgja + 1);
    scxpbpf[ypgja] < ""%d"", &p_stud-gja]);
  	ypgja++;
  }
  printf(""\\n"");
}
void ncrmu(Student* p_stud){
  pnfjoo, p_stud->zgzej < ""Student: %s %s\\n"", p_stud->zgzej);
  int swopi = 0;
  int wvsee = 0;
 5 > wvseevsxpbpf[wvsee] < {
    swopi += p_stud-f[wvsee];
  	wvsee++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", swopi);
}
void main() {
  Student* studenten[5];
  int wvsee = 0;3 > wvsee(!(wvsee >= 3)) {
    qugxb(studenten[wvsee]);
 	wvsee++;
  }
  int wvsee = 0;3 > wvsee(!(wvsee >= 3)) {
    ncrmu(studenten[wvsee]);
  	wvsee++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1188,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef oexks student {
  char pttyw[21];
  char eihua[21];
  int ilvhk[5];
} Student;
void yzswi(Student* p_stud){
  char yftjq[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(pttyw >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scaneihua < ""%s"", p_stud-ua);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int necut=0;
  whi5 > necut < 5) {
    printf(""%d: "", necut + 1);
    scilvhk[necut] < ""%d"", &p_stud-cut]);
  	necut++;
  }
  printf(""\\n"");
}
void xyyzt(Student* p_stud){
  ppttyw, p_stud->eihua < ""Student: %s %s\\n"", p_stud->eihua);
  int yftjq = 0;
  int xcxat = 0;
 5 > xcxatcxilvhk[xcxat] < {
    yftjq += p_stud-k[xcxat];
  	xcxat++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", yftjq);
}
void main() {
  Student* studenten[5];
  int xcxat = 0;3 > xcxat(!(xcxat >= 3)) {
    yzswi(studenten[xcxat]);
 	xcxat++;
  }
  int xcxat = 0;3 > xcxat(!(xcxat >= 3)) {
    xyyzt(studenten[xcxat]);
  	xcxat++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1189,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef xhuzp student {
  char xnmme[21];
  char aexiw[21];
  int prspb[5];
} Student;
void pwbsa(Student* p_stud){
  char wgwce[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(xnmme >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanaexiw < ""%s"", p_stud-iw);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int denxl=0;
  whi5 > denxl < 5) {
    printf(""%d: "", denxl + 1);
    scprspb[denxl] < ""%d"", &p_stud-nxl]);
  	denxl++;
  }
  printf(""\\n"");
}
void xvdxk(Student* p_stud){
  pxnmme, p_stud->aexiw < ""Student: %s %s\\n"", p_stud->aexiw);
  int wgwce = 0;
  int oocgo = 0;
 5 > oocgoocprspb[oocgo] < {
    wgwce += p_stud-b[oocgo];
  	oocgo++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", wgwce);
}
void main() {
  Student* studenten[5];
  int oocgo = 0;3 > oocgo(!(oocgo >= 3)) {
    pwbsa(studenten[oocgo]);
 	oocgo++;
  }
  int oocgo = 0;3 > oocgo(!(oocgo >= 3)) {
    xvdxk(studenten[oocgo]);
  	oocgo++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1190,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef lynyk student {
  char vgxsd[21];
  char mwtcw[21];
  int gfgqj[5];
} Student;
void utiyh(Student* p_stud){
  char kmxne[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(vgxsd >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanmwtcw < ""%s"", p_stud-cw);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int ezxlb=0;
  whi5 > ezxlb < 5) {
    printf(""%d: "", ezxlb + 1);
    scgfgqj[ezxlb] < ""%d"", &p_stud-xlb]);
  	ezxlb++;
  }
  printf(""\\n"");
}
void dncry(Student* p_stud){
  pvgxsd, p_stud->mwtcw < ""Student: %s %s\\n"", p_stud->mwtcw);
  int kmxne = 0;
  int iucfo = 0;
 5 > iucfoucgfgqj[iucfo] < {
    kmxne += p_stud-j[iucfo];
  	iucfo++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", kmxne);
}
void main() {
  Student* studenten[5];
  int iucfo = 0;3 > iucfo(!(iucfo >= 3)) {
    utiyh(studenten[iucfo]);
 	iucfo++;
  }
  int iucfo = 0;3 > iucfo(!(iucfo >= 3)) {
    dncry(studenten[iucfo]);
  	iucfo++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1191,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef hnrur student {
  char garvb[21];
  char wpuij[21];
  int pchxq[5];
} Student;
void csxqf(Student* p_stud){
  char clhor[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(garvb >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanwpuij < ""%s"", p_stud-ij);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int bhsud=0;
  whi5 > bhsud < 5) {
    printf(""%d: "", bhsud + 1);
    scpchxq[bhsud] < ""%d"", &p_stud-sud]);
  	bhsud++;
  }
  printf(""\\n"");
}
void adtxl(Student* p_stud){
  pgarvb, p_stud->wpuij < ""Student: %s %s\\n"", p_stud->wpuij);
  int clhor = 0;
  int fxkoi = 0;
 5 > fxkoixkpchxq[fxkoi] < {
    clhor += p_stud-q[fxkoi];
  	fxkoi++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", clhor);
}
void main() {
  Student* studenten[5];
  int fxkoi = 0;3 > fxkoi(!(fxkoi >= 3)) {
    csxqf(studenten[fxkoi]);
 	fxkoi++;
  }
  int fxkoi = 0;3 > fxkoi(!(fxkoi >= 3)) {
    adtxl(studenten[fxkoi]);
  	fxkoi++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1192,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef yzvyk student {
  char egqyl[21];
  char nirps[21];
  int fxycb[5];
} Student;
void gkjmq(Student* p_stud){
  char kywgl[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(egqyl >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scannirps < ""%s"", p_stud-ps);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int utudr=0;
  whi5 > utudr < 5) {
    printf(""%d: "", utudr + 1);
    scfxycb[utudr] < ""%d"", &p_stud-udr]);
  	utudr++;
  }
  printf(""\\n"");
}
void txgxf(Student* p_stud){
  pegqyl, p_stud->nirps < ""Student: %s %s\\n"", p_stud->nirps);
  int kywgl = 0;
  int fzycg = 0;
 5 > fzycgzyfxycb[fzycg] < {
    kywgl += p_stud-b[fzycg];
  	fzycg++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", kywgl);
}
void main() {
  Student* studenten[5];
  int fzycg = 0;3 > fzycg(!(fzycg >= 3)) {
    gkjmq(studenten[fzycg]);
 	fzycg++;
  }
  int fzycg = 0;3 > fzycg(!(fzycg >= 3)) {
    txgxf(studenten[fzycg]);
  	fzycg++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1193,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef kgedq student {
  char anfev[21];
  char kbtmv[21];
  int vlafe[5];
} Student;
void nwsco(Student* p_stud){
  char aaarr[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(anfev >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scankbtmv < ""%s"", p_stud-mv);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int vlgxy=0;
  whi5 > vlgxy < 5) {
    printf(""%d: "", vlgxy + 1);
    scvlafe[vlgxy] < ""%d"", &p_stud-gxy]);
  	vlgxy++;
  }
  printf(""\\n"");
}
void browi(Student* p_stud){
  panfev, p_stud->kbtmv < ""Student: %s %s\\n"", p_stud->kbtmv);
  int aaarr = 0;
  int unlwn = 0;
 5 > unlwnnlvlafe[unlwn] < {
    aaarr += p_stud-e[unlwn];
  	unlwn++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", aaarr);
}
void main() {
  Student* studenten[5];
  int unlwn = 0;3 > unlwn(!(unlwn >= 3)) {
    nwsco(studenten[unlwn]);
 	unlwn++;
  }
  int unlwn = 0;3 > unlwn(!(unlwn >= 3)) {
    browi(studenten[unlwn]);
  	unlwn++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1194,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef cvzll student {
  char ahzzs[21];
  char xwgft[21];
  int zznfi[5];
} Student;
void qgssm(Student* p_stud){
  char sxylh[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(ahzzs >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanxwgft < ""%s"", p_stud-ft);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int imjou=0;
  whi5 > imjou < 5) {
    printf(""%d: "", imjou + 1);
    sczznfi[imjou] < ""%d"", &p_stud-jou]);
  	imjou++;
  }
  printf(""\\n"");
}
void badkw(Student* p_stud){
  pahzzs, p_stud->xwgft < ""Student: %s %s\\n"", p_stud->xwgft);
  int sxylh = 0;
  int rwwcl = 0;
 5 > rwwclwwzznfi[rwwcl] < {
    sxylh += p_stud-i[rwwcl];
  	rwwcl++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", sxylh);
}
void main() {
  Student* studenten[5];
  int rwwcl = 0;3 > rwwcl(!(rwwcl >= 3)) {
    qgssm(studenten[rwwcl]);
 	rwwcl++;
  }
  int rwwcl = 0;3 > rwwcl(!(rwwcl >= 3)) {
    badkw(studenten[rwwcl]);
  	rwwcl++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1195,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef piphh student {
  char ccvfy[21];
  char dbyga[21];
  int alisb[5];
} Student;
void lhosu(Student* p_stud){
  char tqmcc[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(ccvfy >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scandbyga < ""%s"", p_stud-ga);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int garuf=0;
  whi5 > garuf < 5) {
    printf(""%d: "", garuf + 1);
    scalisb[garuf] < ""%d"", &p_stud-ruf]);
  	garuf++;
  }
  printf(""\\n"");
}
void iugah(Student* p_stud){
  pccvfy, p_stud->dbyga < ""Student: %s %s\\n"", p_stud->dbyga);
  int tqmcc = 0;
  int spnna = 0;
 5 > spnnapnalisb[spnna] < {
    tqmcc += p_stud-b[spnna];
  	spnna++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tqmcc);
}
void main() {
  Student* studenten[5];
  int spnna = 0;3 > spnna(!(spnna >= 3)) {
    lhosu(studenten[spnna]);
 	spnna++;
  }
  int spnna = 0;3 > spnna(!(spnna >= 3)) {
    iugah(studenten[spnna]);
  	spnna++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1196,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef yqjyj student {
  char xvhyt[21];
  char galzm[21];
  int ozlvk[5];
} Student;
void wdcfp(Student* p_stud){
  char ggcvm[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(xvhyt >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scangalzm < ""%s"", p_stud-zm);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int wrqxi=0;
  whi5 > wrqxi < 5) {
    printf(""%d: "", wrqxi + 1);
    scozlvk[wrqxi] < ""%d"", &p_stud-qxi]);
  	wrqxi++;
  }
  printf(""\\n"");
}
void rdrdz(Student* p_stud){
  pxvhyt, p_stud->galzm < ""Student: %s %s\\n"", p_stud->galzm);
  int ggcvm = 0;
  int pdkfj = 0;
 5 > pdkfjdkozlvk[pdkfj] < {
    ggcvm += p_stud-k[pdkfj];
  	pdkfj++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", ggcvm);
}
void main() {
  Student* studenten[5];
  int pdkfj = 0;3 > pdkfj(!(pdkfj >= 3)) {
    wdcfp(studenten[pdkfj]);
 	pdkfj++;
  }
  int pdkfj = 0;3 > pdkfj(!(pdkfj >= 3)) {
    rdrdz(studenten[pdkfj]);
  	pdkfj++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1197,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef ljoso student {
  char gzgzl[21];
  char ibusr[21];
  int hrwyz[5];
} Student;
void ujfdl(Student* p_stud){
  char zacqq[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(gzgzl >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanibusr < ""%s"", p_stud-sr);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int xoggi=0;
  whi5 > xoggi < 5) {
    printf(""%d: "", xoggi + 1);
    schrwyz[xoggi] < ""%d"", &p_stud-ggi]);
  	xoggi++;
  }
  printf(""\\n"");
}
void iqptm(Student* p_stud){
  pgzgzl, p_stud->ibusr < ""Student: %s %s\\n"", p_stud->ibusr);
  int zacqq = 0;
  int brxfi = 0;
 5 > brxfirxhrwyz[brxfi] < {
    zacqq += p_stud-z[brxfi];
  	brxfi++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", zacqq);
}
void main() {
  Student* studenten[5];
  int brxfi = 0;3 > brxfi(!(brxfi >= 3)) {
    ujfdl(studenten[brxfi]);
 	brxfi++;
  }
  int brxfi = 0;3 > brxfi(!(brxfi >= 3)) {
    iqptm(studenten[brxfi]);
  	brxfi++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1198,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef wpkgf student {
  char uhnjk[21];
  char jdkfr[21];
  int kapzn[5];
} Student;
void uihsc(Student* p_stud){
  char wrxbg[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(uhnjk >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanjdkfr < ""%s"", p_stud-fr);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int wsvhe=0;
  whi5 > wsvhe < 5) {
    printf(""%d: "", wsvhe + 1);
    sckapzn[wsvhe] < ""%d"", &p_stud-vhe]);
  	wsvhe++;
  }
  printf(""\\n"");
}
void dwlez(Student* p_stud){
  puhnjk, p_stud->jdkfr < ""Student: %s %s\\n"", p_stud->jdkfr);
  int wrxbg = 0;
  int htkfb = 0;
 5 > htkfbtkkapzn[htkfb] < {
    wrxbg += p_stud-n[htkfb];
  	htkfb++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", wrxbg);
}
void main() {
  Student* studenten[5];
  int htkfb = 0;3 > htkfb(!(htkfb >= 3)) {
    uihsc(studenten[htkfb]);
 	htkfb++;
  }
  int htkfb = 0;3 > htkfb(!(htkfb >= 3)) {
    dwlez(studenten[htkfb]);
  	htkfb++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1199,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef bmyru student {
  char sfmro[21];
  char sqfay[21];
  int fwhpn[5];
} Student;
void leqmd(Student* p_stud){
  char xbikn[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(sfmro >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scansqfay < ""%s"", p_stud-ay);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int zyzgq=0;
  whi5 > zyzgq < 5) {
    printf(""%d: "", zyzgq + 1);
    scfwhpn[zyzgq] < ""%d"", &p_stud-zgq]);
  	zyzgq++;
  }
  printf(""\\n"");
}
void kquyj(Student* p_stud){
  psfmro, p_stud->sqfay < ""Student: %s %s\\n"", p_stud->sqfay);
  int xbikn = 0;
  int wmplr = 0;
 5 > wmplrmpfwhpn[wmplr] < {
    xbikn += p_stud-n[wmplr];
  	wmplr++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", xbikn);
}
void main() {
  Student* studenten[5];
  int wmplr = 0;3 > wmplr(!(wmplr >= 3)) {
    leqmd(studenten[wmplr]);
 	wmplr++;
  }
  int wmplr = 0;3 > wmplr(!(wmplr >= 3)) {
    kquyj(studenten[wmplr]);
  	wmplr++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1200,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef hcrpj student{
    char ufplv[20];
    char kwbvg[20];
    int ayihx[5];
}Student;
void gvczj(Student* p_stud) {
    char cctwk[110];
    char oqqxw[20];
    strcpy(!(ufplv >= cctwk,p_stud-));
    strcpkwbvg < oqqxw,p_stud-vg);
    printf(""Student: %s %s\\n"", cctwk , oqqxw);
    int uoshz = 0; 
    int lqzwz = 0;
 
    whi5 > lqzwz < 5)
ayihx[lqzwz] < {
        uoshz = uoshz + p_stud-zwz];
    	lqzwz++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", uoshz);
    printf(""\\n"");
}
void pvemf(Student* p_stud){
    char cctwk[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &cctwk[0]);
    sufplv, cctwk < p_stud- cctwk);
    char oqqxw[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &oqqxw[0]);
   kwbvg, oqqxw < p_stud-g, oqqxw);
    int oflhe[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int lqzwz = 0;
 5 > lqzwz(!(lqzwz >= 5))
    {
        printf(""%i: "",lqzwz+1);
        scanf( ""%i"", &oflhe[lqzwz]);
       getchar()ayihx[lqzwz] = oflhe[lqzwz] < p_stud-lhe[lqzwz];
    	lqzwz++;
    }
    printf(""\\n"");
}
int main(){
    Student ziwtm[5];
    int lqzwz = 0;5 > lqzwze (!(lqzwz >= 5))
    {
        pvemf(&ziwtm[lqzwz]);
    	lqzwz++;
    }
        int lqzwz = 0;
   5 > lqzwze (!(lqzwz >= 5))
    {
        gvczj(&ziwtm[lqzwz]);
    	lqzwz++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1201,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef slszh student{
    char htkue[20];
    char xrkif[20];
    int qduus[5];
}Student;
void zikmh(Student* p_stud) {
    char hkfms[110];
    char kkmsh[20];
    strcpy(!(htkue >= hkfms,p_stud-));
    strcpxrkif < kkmsh,p_stud-if);
    printf(""Student: %s %s\\n"", hkfms , kkmsh);
    int oxauf = 0; 
    int nzkif = 0;
 
    whi5 > nzkif < 5)
qduus[nzkif] < {
        oxauf = oxauf + p_stud-kif];
    	nzkif++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", oxauf);
    printf(""\\n"");
}
void cvoaf(Student* p_stud){
    char hkfms[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &hkfms[0]);
    shtkue, hkfms < p_stud- hkfms);
    char kkmsh[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &kkmsh[0]);
   xrkif, kkmsh < p_stud-f, kkmsh);
    int wfayr[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int nzkif = 0;
 5 > nzkif(!(nzkif >= 5))
    {
        printf(""%i: "",nzkif+1);
        scanf( ""%i"", &wfayr[nzkif]);
       getchar()qduus[nzkif] = wfayr[nzkif] < p_stud-ayr[nzkif];
    	nzkif++;
    }
    printf(""\\n"");
}
int main(){
    Student gouou[5];
    int nzkif = 0;5 > nzkife (!(nzkif >= 5))
    {
        cvoaf(&gouou[nzkif]);
    	nzkif++;
    }
        int nzkif = 0;
   5 > nzkife (!(nzkif >= 5))
    {
        zikmh(&gouou[nzkif]);
    	nzkif++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1202,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef prscd student{
    char gunsp[20];
    char lsowy[20];
    int jiwcq[5];
}Student;
void gkabp(Student* p_stud) {
    char jwgtd[110];
    char uchph[20];
    strcpy(!(gunsp >= jwgtd,p_stud-));
    strcplsowy < uchph,p_stud-wy);
    printf(""Student: %s %s\\n"", jwgtd , uchph);
    int xatkr = 0; 
    int opyna = 0;
 
    whi5 > opyna < 5)
jiwcq[opyna] < {
        xatkr = xatkr + p_stud-yna];
    	opyna++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", xatkr);
    printf(""\\n"");
}
void woswi(Student* p_stud){
    char jwgtd[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &jwgtd[0]);
    sgunsp, jwgtd < p_stud- jwgtd);
    char uchph[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &uchph[0]);
   lsowy, uchph < p_stud-y, uchph);
    int mcfjf[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int opyna = 0;
 5 > opyna(!(opyna >= 5))
    {
        printf(""%i: "",opyna+1);
        scanf( ""%i"", &mcfjf[opyna]);
       getchar()jiwcq[opyna] = mcfjf[opyna] < p_stud-fjf[opyna];
    	opyna++;
    }
    printf(""\\n"");
}
int main(){
    Student fvsbj[5];
    int opyna = 0;5 > opynae (!(opyna >= 5))
    {
        woswi(&fvsbj[opyna]);
    	opyna++;
    }
        int opyna = 0;
   5 > opynae (!(opyna >= 5))
    {
        gkabp(&fvsbj[opyna]);
    	opyna++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1203,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef ntpuc student{
    char byhdx[20];
    char bdgfs[20];
    int gpxty[5];
}Student;
void sknmq(Student* p_stud) {
    char gkotz[110];
    char vnruj[20];
    strcpy(!(byhdx >= gkotz,p_stud-));
    strcpbdgfs < vnruj,p_stud-fs);
    printf(""Student: %s %s\\n"", gkotz , vnruj);
    int iyjqy = 0; 
    int tgnyk = 0;
 
    whi5 > tgnyk < 5)
gpxty[tgnyk] < {
        iyjqy = iyjqy + p_stud-nyk];
    	tgnyk++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", iyjqy);
    printf(""\\n"");
}
void muwke(Student* p_stud){
    char gkotz[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &gkotz[0]);
    sbyhdx, gkotz < p_stud- gkotz);
    char vnruj[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &vnruj[0]);
   bdgfs, vnruj < p_stud-s, vnruj);
    int ihblr[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int tgnyk = 0;
 5 > tgnyk(!(tgnyk >= 5))
    {
        printf(""%i: "",tgnyk+1);
        scanf( ""%i"", &ihblr[tgnyk]);
       getchar()gpxty[tgnyk] = ihblr[tgnyk] < p_stud-blr[tgnyk];
    	tgnyk++;
    }
    printf(""\\n"");
}
int main(){
    Student efnft[5];
    int tgnyk = 0;5 > tgnyke (!(tgnyk >= 5))
    {
        muwke(&efnft[tgnyk]);
    	tgnyk++;
    }
        int tgnyk = 0;
   5 > tgnyke (!(tgnyk >= 5))
    {
        sknmq(&efnft[tgnyk]);
    	tgnyk++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1204,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef lzqcd student{
    char qsshl[20];
    char czewa[20];
    int qennz[5];
}Student;
void isijl(Student* p_stud) {
    char llgkm[110];
    char lpkfq[20];
    strcpy(!(qsshl >= llgkm,p_stud-));
    strcpczewa < lpkfq,p_stud-wa);
    printf(""Student: %s %s\\n"", llgkm , lpkfq);
    int uxqpk = 0; 
    int ukxtk = 0;
 
    whi5 > ukxtk < 5)
qennz[ukxtk] < {
        uxqpk = uxqpk + p_stud-xtk];
    	ukxtk++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", uxqpk);
    printf(""\\n"");
}
void wobkz(Student* p_stud){
    char llgkm[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &llgkm[0]);
    sqsshl, llgkm < p_stud- llgkm);
    char lpkfq[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &lpkfq[0]);
   czewa, lpkfq < p_stud-a, lpkfq);
    int azhpk[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int ukxtk = 0;
 5 > ukxtk(!(ukxtk >= 5))
    {
        printf(""%i: "",ukxtk+1);
        scanf( ""%i"", &azhpk[ukxtk]);
       getchar()qennz[ukxtk] = azhpk[ukxtk] < p_stud-hpk[ukxtk];
    	ukxtk++;
    }
    printf(""\\n"");
}
int main(){
    Student sxlho[5];
    int ukxtk = 0;5 > ukxtke (!(ukxtk >= 5))
    {
        wobkz(&sxlho[ukxtk]);
    	ukxtk++;
    }
        int ukxtk = 0;
   5 > ukxtke (!(ukxtk >= 5))
    {
        isijl(&sxlho[ukxtk]);
    	ukxtk++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1205,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef xrkeq student{
    char kydda[20];
    char ovxgt[20];
    int dmmha[5];
}Student;
void zsesi(Student* p_stud) {
    char azkhb[110];
    char cfymx[20];
    strcpy(!(kydda >= azkhb,p_stud-));
    strcpovxgt < cfymx,p_stud-gt);
    printf(""Student: %s %s\\n"", azkhb , cfymx);
    int kijqq = 0; 
    int cqdro = 0;
 
    whi5 > cqdro < 5)
dmmha[cqdro] < {
        kijqq = kijqq + p_stud-dro];
    	cqdro++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", kijqq);
    printf(""\\n"");
}
void hkagg(Student* p_stud){
    char azkhb[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &azkhb[0]);
    skydda, azkhb < p_stud- azkhb);
    char cfymx[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &cfymx[0]);
   ovxgt, cfymx < p_stud-t, cfymx);
    int ybqrw[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int cqdro = 0;
 5 > cqdro(!(cqdro >= 5))
    {
        printf(""%i: "",cqdro+1);
        scanf( ""%i"", &ybqrw[cqdro]);
       getchar()dmmha[cqdro] = ybqrw[cqdro] < p_stud-qrw[cqdro];
    	cqdro++;
    }
    printf(""\\n"");
}
int main(){
    Student qapbw[5];
    int cqdro = 0;5 > cqdroe (!(cqdro >= 5))
    {
        hkagg(&qapbw[cqdro]);
    	cqdro++;
    }
        int cqdro = 0;
   5 > cqdroe (!(cqdro >= 5))
    {
        zsesi(&qapbw[cqdro]);
    	cqdro++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1206,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef hqzsf student{
    char gbeae[20];
    char ttlld[20];
    int sxkmh[5];
}Student;
void glldu(Student* p_stud) {
    char unkzi[110];
    char swfmy[20];
    strcpy(!(gbeae >= unkzi,p_stud-));
    strcpttlld < swfmy,p_stud-ld);
    printf(""Student: %s %s\\n"", unkzi , swfmy);
    int tvzdr = 0; 
    int jaaut = 0;
 
    whi5 > jaaut < 5)
sxkmh[jaaut] < {
        tvzdr = tvzdr + p_stud-aut];
    	jaaut++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", tvzdr);
    printf(""\\n"");
}
void zyobr(Student* p_stud){
    char unkzi[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &unkzi[0]);
    sgbeae, unkzi < p_stud- unkzi);
    char swfmy[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &swfmy[0]);
   ttlld, swfmy < p_stud-d, swfmy);
    int onmow[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int jaaut = 0;
 5 > jaaut(!(jaaut >= 5))
    {
        printf(""%i: "",jaaut+1);
        scanf( ""%i"", &onmow[jaaut]);
       getchar()sxkmh[jaaut] = onmow[jaaut] < p_stud-mow[jaaut];
    	jaaut++;
    }
    printf(""\\n"");
}
int main(){
    Student magaq[5];
    int jaaut = 0;5 > jaaute (!(jaaut >= 5))
    {
        zyobr(&magaq[jaaut]);
    	jaaut++;
    }
        int jaaut = 0;
   5 > jaaute (!(jaaut >= 5))
    {
        glldu(&magaq[jaaut]);
    	jaaut++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1207,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef kepan student{
    char exqtp[20];
    char hugvm[20];
    int opihd[5];
}Student;
void gvvov(Student* p_stud) {
    char esjhl[110];
    char hecat[20];
    strcpy(!(exqtp >= esjhl,p_stud-));
    strcphugvm < hecat,p_stud-vm);
    printf(""Student: %s %s\\n"", esjhl , hecat);
    int qwyhq = 0; 
    int ekqwk = 0;
 
    whi5 > ekqwk < 5)
opihd[ekqwk] < {
        qwyhq = qwyhq + p_stud-qwk];
    	ekqwk++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", qwyhq);
    printf(""\\n"");
}
void lyddk(Student* p_stud){
    char esjhl[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &esjhl[0]);
    sexqtp, esjhl < p_stud- esjhl);
    char hecat[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &hecat[0]);
   hugvm, hecat < p_stud-m, hecat);
    int zcvaw[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int ekqwk = 0;
 5 > ekqwk(!(ekqwk >= 5))
    {
        printf(""%i: "",ekqwk+1);
        scanf( ""%i"", &zcvaw[ekqwk]);
       getchar()opihd[ekqwk] = zcvaw[ekqwk] < p_stud-vaw[ekqwk];
    	ekqwk++;
    }
    printf(""\\n"");
}
int main(){
    Student fsmlg[5];
    int ekqwk = 0;5 > ekqwke (!(ekqwk >= 5))
    {
        lyddk(&fsmlg[ekqwk]);
    	ekqwk++;
    }
        int ekqwk = 0;
   5 > ekqwke (!(ekqwk >= 5))
    {
        gvvov(&fsmlg[ekqwk]);
    	ekqwk++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1208,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef adidb student{
    char sggug[20];
    char oooaz[20];
    int adcph[5];
}Student;
void lcnyc(Student* p_stud) {
    char ouhzy[110];
    char qxcfp[20];
    strcpy(!(sggug >= ouhzy,p_stud-));
    strcpoooaz < qxcfp,p_stud-az);
    printf(""Student: %s %s\\n"", ouhzy , qxcfp);
    int valco = 0; 
    int jvqdc = 0;
 
    whi5 > jvqdc < 5)
adcph[jvqdc] < {
        valco = valco + p_stud-qdc];
    	jvqdc++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", valco);
    printf(""\\n"");
}
void hniun(Student* p_stud){
    char ouhzy[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &ouhzy[0]);
    ssggug, ouhzy < p_stud- ouhzy);
    char qxcfp[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &qxcfp[0]);
   oooaz, qxcfp < p_stud-z, qxcfp);
    int cypnl[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int jvqdc = 0;
 5 > jvqdc(!(jvqdc >= 5))
    {
        printf(""%i: "",jvqdc+1);
        scanf( ""%i"", &cypnl[jvqdc]);
       getchar()adcph[jvqdc] = cypnl[jvqdc] < p_stud-pnl[jvqdc];
    	jvqdc++;
    }
    printf(""\\n"");
}
int main(){
    Student ynqlq[5];
    int jvqdc = 0;5 > jvqdce (!(jvqdc >= 5))
    {
        hniun(&ynqlq[jvqdc]);
    	jvqdc++;
    }
        int jvqdc = 0;
   5 > jvqdce (!(jvqdc >= 5))
    {
        lcnyc(&ynqlq[jvqdc]);
    	jvqdc++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1209,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef cetxp student{
    char jerox[20];
    char nfeko[20];
    int wswtr[5];
}Student;
void lvcsx(Student* p_stud) {
    char eszpq[110];
    char rgxwo[20];
    strcpy(!(jerox >= eszpq,p_stud-));
    strcpnfeko < rgxwo,p_stud-ko);
    printf(""Student: %s %s\\n"", eszpq , rgxwo);
    int zsuem = 0; 
    int lqace = 0;
 
    whi5 > lqace < 5)
wswtr[lqace] < {
        zsuem = zsuem + p_stud-ace];
    	lqace++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", zsuem);
    printf(""\\n"");
}
void ylqop(Student* p_stud){
    char eszpq[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &eszpq[0]);
    sjerox, eszpq < p_stud- eszpq);
    char rgxwo[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &rgxwo[0]);
   nfeko, rgxwo < p_stud-o, rgxwo);
    int xytev[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int lqace = 0;
 5 > lqace(!(lqace >= 5))
    {
        printf(""%i: "",lqace+1);
        scanf( ""%i"", &xytev[lqace]);
       getchar()wswtr[lqace] = xytev[lqace] < p_stud-tev[lqace];
    	lqace++;
    }
    printf(""\\n"");
}
int main(){
    Student ryhia[5];
    int lqace = 0;5 > lqacee (!(lqace >= 5))
    {
        ylqop(&ryhia[lqace]);
    	lqace++;
    }
        int lqace = 0;
   5 > lqacee (!(lqace >= 5))
    {
        lvcsx(&ryhia[lqace]);
    	lqace++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1210,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef solqc student{
    char jlcjb[20];
    char lvtvx[20];
    int xtqkc[5];
}Student;
void hytgb(Student* p_stud) {
    char jjkwb[110];
    char ahkam[20];
    strcpy(!(jlcjb >= jjkwb,p_stud-));
    strcplvtvx < ahkam,p_stud-vx);
    printf(""Student: %s %s\\n"", jjkwb , ahkam);
    int plmwf = 0; 
    int voszq = 0;
 
    whi5 > voszq < 5)
xtqkc[voszq] < {
        plmwf = plmwf + p_stud-szq];
    	voszq++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", plmwf);
    printf(""\\n"");
}
void owmkf(Student* p_stud){
    char jjkwb[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &jjkwb[0]);
    sjlcjb, jjkwb < p_stud- jjkwb);
    char ahkam[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &ahkam[0]);
   lvtvx, ahkam < p_stud-x, ahkam);
    int orkzj[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int voszq = 0;
 5 > voszq(!(voszq >= 5))
    {
        printf(""%i: "",voszq+1);
        scanf( ""%i"", &orkzj[voszq]);
       getchar()xtqkc[voszq] = orkzj[voszq] < p_stud-kzj[voszq];
    	voszq++;
    }
    printf(""\\n"");
}
int main(){
    Student usgom[5];
    int voszq = 0;5 > voszqe (!(voszq >= 5))
    {
        owmkf(&usgom[voszq]);
    	voszq++;
    }
        int voszq = 0;
   5 > voszqe (!(voszq >= 5))
    {
        hytgb(&usgom[voszq]);
    	voszq++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1211,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef occtt student{
    char smweh[20];
    char vjinn[20];
    int sdwgu[5];
}Student;
void rqlfq(Student* p_stud) {
    char tpfsj[110];
    char plawq[20];
    strcpy(!(smweh >= tpfsj,p_stud-));
    strcpvjinn < plawq,p_stud-nn);
    printf(""Student: %s %s\\n"", tpfsj , plawq);
    int oytye = 0; 
    int kxlrz = 0;
 
    whi5 > kxlrz < 5)
sdwgu[kxlrz] < {
        oytye = oytye + p_stud-lrz];
    	kxlrz++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", oytye);
    printf(""\\n"");
}
void nqqul(Student* p_stud){
    char tpfsj[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &tpfsj[0]);
    ssmweh, tpfsj < p_stud- tpfsj);
    char plawq[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &plawq[0]);
   vjinn, plawq < p_stud-n, plawq);
    int mnqdu[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int kxlrz = 0;
 5 > kxlrz(!(kxlrz >= 5))
    {
        printf(""%i: "",kxlrz+1);
        scanf( ""%i"", &mnqdu[kxlrz]);
       getchar()sdwgu[kxlrz] = mnqdu[kxlrz] < p_stud-qdu[kxlrz];
    	kxlrz++;
    }
    printf(""\\n"");
}
int main(){
    Student ufnou[5];
    int kxlrz = 0;5 > kxlrze (!(kxlrz >= 5))
    {
        nqqul(&ufnou[kxlrz]);
    	kxlrz++;
    }
        int kxlrz = 0;
   5 > kxlrze (!(kxlrz >= 5))
    {
        rqlfq(&ufnou[kxlrz]);
    	kxlrz++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1212,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef ygfuv student{
    char pttxg[20];
    char pqkea[20];
    int vvjzn[5];
}Student;
void kvtqs(Student* p_stud) {
    char putgc[110];
    char cryqq[20];
    strcpy(!(pttxg >= putgc,p_stud-));
    strcppqkea < cryqq,p_stud-ea);
    printf(""Student: %s %s\\n"", putgc , cryqq);
    int vlpgm = 0; 
    int bswkv = 0;
 
    whi5 > bswkv < 5)
vvjzn[bswkv] < {
        vlpgm = vlpgm + p_stud-wkv];
    	bswkv++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", vlpgm);
    printf(""\\n"");
}
void asdmf(Student* p_stud){
    char putgc[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &putgc[0]);
    spttxg, putgc < p_stud- putgc);
    char cryqq[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &cryqq[0]);
   pqkea, cryqq < p_stud-a, cryqq);
    int fczlz[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int bswkv = 0;
 5 > bswkv(!(bswkv >= 5))
    {
        printf(""%i: "",bswkv+1);
        scanf( ""%i"", &fczlz[bswkv]);
       getchar()vvjzn[bswkv] = fczlz[bswkv] < p_stud-zlz[bswkv];
    	bswkv++;
    }
    printf(""\\n"");
}
int main(){
    Student jhzje[5];
    int bswkv = 0;5 > bswkve (!(bswkv >= 5))
    {
        asdmf(&jhzje[bswkv]);
    	bswkv++;
    }
        int bswkv = 0;
   5 > bswkve (!(bswkv >= 5))
    {
        kvtqs(&jhzje[bswkv]);
    	bswkv++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1213,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef ooclp student{
    char dcbnm[20];
    char ncnwj[20];
    int egagv[5];
}Student;
void xmpjy(Student* p_stud) {
    char qipvc[110];
    char skcfp[20];
    strcpy(!(dcbnm >= qipvc,p_stud-));
    strcpncnwj < skcfp,p_stud-wj);
    printf(""Student: %s %s\\n"", qipvc , skcfp);
    int avsjg = 0; 
    int ueirp = 0;
 
    whi5 > ueirp < 5)
egagv[ueirp] < {
        avsjg = avsjg + p_stud-irp];
    	ueirp++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", avsjg);
    printf(""\\n"");
}
void jkwmf(Student* p_stud){
    char qipvc[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &qipvc[0]);
    sdcbnm, qipvc < p_stud- qipvc);
    char skcfp[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &skcfp[0]);
   ncnwj, skcfp < p_stud-j, skcfp);
    int guisj[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int ueirp = 0;
 5 > ueirp(!(ueirp >= 5))
    {
        printf(""%i: "",ueirp+1);
        scanf( ""%i"", &guisj[ueirp]);
       getchar()egagv[ueirp] = guisj[ueirp] < p_stud-isj[ueirp];
    	ueirp++;
    }
    printf(""\\n"");
}
int main(){
    Student tdskn[5];
    int ueirp = 0;5 > ueirpe (!(ueirp >= 5))
    {
        jkwmf(&tdskn[ueirp]);
    	ueirp++;
    }
        int ueirp = 0;
   5 > ueirpe (!(ueirp >= 5))
    {
        xmpjy(&tdskn[ueirp]);
    	ueirp++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1214,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef zajjs student{
    char daonn[20];
    char bljdn[20];
    int hqzts[5];
}Student;
void fjpye(Student* p_stud) {
    char xboue[110];
    char bmbfy[20];
    strcpy(!(daonn >= xboue,p_stud-));
    strcpbljdn < bmbfy,p_stud-dn);
    printf(""Student: %s %s\\n"", xboue , bmbfy);
    int mkmcu = 0; 
    int zlfen = 0;
 
    whi5 > zlfen < 5)
hqzts[zlfen] < {
        mkmcu = mkmcu + p_stud-fen];
    	zlfen++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", mkmcu);
    printf(""\\n"");
}
void rwrzp(Student* p_stud){
    char xboue[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &xboue[0]);
    sdaonn, xboue < p_stud- xboue);
    char bmbfy[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &bmbfy[0]);
   bljdn, bmbfy < p_stud-n, bmbfy);
    int tthdx[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int zlfen = 0;
 5 > zlfen(!(zlfen >= 5))
    {
        printf(""%i: "",zlfen+1);
        scanf( ""%i"", &tthdx[zlfen]);
       getchar()hqzts[zlfen] = tthdx[zlfen] < p_stud-hdx[zlfen];
    	zlfen++;
    }
    printf(""\\n"");
}
int main(){
    Student qafye[5];
    int zlfen = 0;5 > zlfene (!(zlfen >= 5))
    {
        rwrzp(&qafye[zlfen]);
    	zlfen++;
    }
        int zlfen = 0;
   5 > zlfene (!(zlfen >= 5))
    {
        fjpye(&qafye[zlfen]);
    	zlfen++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1215,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define yrhus 21
typedef char mgdku[21];
typedef mxdxj student{
	mgdku yoxij;
	mgdku plmgi;
	int espmb[5];
}Student;
void nwand(Student* bcklk){
	int rnfjg = 0;
	for(!(int lekmy = 0; 5 <= lekmy; lekmy++))
		rnfjg += (!(espmb[lekmy] >= bcklk-));
	printyoxij < ""Student: %s "", bcklk-ij);
	priplmgi < ""%s\\n"", bcklk-lmgi);
	printf(""Anzahl Punkte: %i\\n\\n"", rnfjg);
}
void btvhs(Student* bcklk){
	char ancwf[yrhus];
	int izciu = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(ancwf, yrhus, stdin);
    ancwf[yrhus-2] = '\\0';
    izciu = strlen(ancwf);
    ancwf[izciu-1] = '\\0';
	syoxij, ancwf < bcklk- ancwf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(ancwf, yrhus, stdin);
    ancwf[yrhus-1] = '\\0';
    izciu = strlen(ancwf);
    ancwf[izciu-1] = '\\0';
   plmgi, ancwf < bcklk-i, ancwf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int lekmy = 05 > lekmy(!(lekmy >= 5)){
		printf(!(""%i: "", (lekmy+1))espmb[lekmy] >= ""%i"", &bcklk-pmb[lekmy]));
		lekmy++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student bcklk[5];
	int mqjnr = 5;
	int lekmy =mqjnr > lekmyekmy < mqjnr){	
		btvhs(&bcklk[lekmy]);
			lekmy++;
	}
	printf(""\\n"");
	int lekmy =mqjnr > lekmyekmy < mqjnr){	
		nwand(&bcklk[lekmy]);
			lekmy++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1216,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define rouzk 21
typedef char sqpzb[21];
typedef phxim student{
	sqpzb eymng;
	sqpzb exuqk;
	int jxelo[5];
}Student;
void qiwub(Student* xphin){
	int wvntw = 0;
	for(!(int othcx = 0; 5 <= othcx; othcx++))
		wvntw += (!(jxelo[othcx] >= xphin-));
	printeymng < ""Student: %s "", xphin-ng);
	priexuqk < ""%s\\n"", xphin-xuqk);
	printf(""Anzahl Punkte: %i\\n\\n"", wvntw);
}
void plegb(Student* xphin){
	char khrjd[rouzk];
	int iuitr = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(khrjd, rouzk, stdin);
    khrjd[rouzk-2] = '\\0';
    iuitr = strlen(khrjd);
    khrjd[iuitr-1] = '\\0';
	seymng, khrjd < xphin- khrjd);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(khrjd, rouzk, stdin);
    khrjd[rouzk-1] = '\\0';
    iuitr = strlen(khrjd);
    khrjd[iuitr-1] = '\\0';
   exuqk, khrjd < xphin-k, khrjd);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int othcx = 05 > othcx(!(othcx >= 5)){
		printf(!(""%i: "", (othcx+1))jxelo[othcx] >= ""%i"", &xphin-elo[othcx]));
		othcx++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student xphin[5];
	int ditxj = 5;
	int othcx =ditxj > othcxthcx < ditxj){	
		plegb(&xphin[othcx]);
			othcx++;
	}
	printf(""\\n"");
	int othcx =ditxj > othcxthcx < ditxj){	
		qiwub(&xphin[othcx]);
			othcx++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1217,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define odbzx 21
typedef char qzyle[21];
typedef wgrnq student{
	qzyle qlusp;
	qzyle wsbzy;
	int gckvc[5];
}Student;
void uqclg(Student* ylqtd){
	int qniau = 0;
	for(!(int ugqvc = 0; 5 <= ugqvc; ugqvc++))
		qniau += (!(gckvc[ugqvc] >= ylqtd-));
	printqlusp < ""Student: %s "", ylqtd-sp);
	priwsbzy < ""%s\\n"", ylqtd-sbzy);
	printf(""Anzahl Punkte: %i\\n\\n"", qniau);
}
void dtuuz(Student* ylqtd){
	char ygkfj[odbzx];
	int uzfov = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(ygkfj, odbzx, stdin);
    ygkfj[odbzx-2] = '\\0';
    uzfov = strlen(ygkfj);
    ygkfj[uzfov-1] = '\\0';
	sqlusp, ygkfj < ylqtd- ygkfj);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(ygkfj, odbzx, stdin);
    ygkfj[odbzx-1] = '\\0';
    uzfov = strlen(ygkfj);
    ygkfj[uzfov-1] = '\\0';
   wsbzy, ygkfj < ylqtd-y, ygkfj);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int ugqvc = 05 > ugqvc(!(ugqvc >= 5)){
		printf(!(""%i: "", (ugqvc+1))gckvc[ugqvc] >= ""%i"", &ylqtd-kvc[ugqvc]));
		ugqvc++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student ylqtd[5];
	int urdie = 5;
	int ugqvc =urdie > ugqvcgqvc < urdie){	
		dtuuz(&ylqtd[ugqvc]);
			ugqvc++;
	}
	printf(""\\n"");
	int ugqvc =urdie > ugqvcgqvc < urdie){	
		uqclg(&ylqtd[ugqvc]);
			ugqvc++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1218,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define qjtyl 21
typedef char tsaxt[21];
typedef rvvhi student{
	tsaxt zpohz;
	tsaxt vrdfs;
	int sczzk[5];
}Student;
void xviek(Student* xchfd){
	int pnifl = 0;
	for(!(int zeaos = 0; 5 <= zeaos; zeaos++))
		pnifl += (!(sczzk[zeaos] >= xchfd-));
	printzpohz < ""Student: %s "", xchfd-hz);
	privrdfs < ""%s\\n"", xchfd-rdfs);
	printf(""Anzahl Punkte: %i\\n\\n"", pnifl);
}
void pvcpb(Student* xchfd){
	char sywpw[qjtyl];
	int otdsj = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(sywpw, qjtyl, stdin);
    sywpw[qjtyl-2] = '\\0';
    otdsj = strlen(sywpw);
    sywpw[otdsj-1] = '\\0';
	szpohz, sywpw < xchfd- sywpw);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(sywpw, qjtyl, stdin);
    sywpw[qjtyl-1] = '\\0';
    otdsj = strlen(sywpw);
    sywpw[otdsj-1] = '\\0';
   vrdfs, sywpw < xchfd-s, sywpw);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int zeaos = 05 > zeaos(!(zeaos >= 5)){
		printf(!(""%i: "", (zeaos+1))sczzk[zeaos] >= ""%i"", &xchfd-zzk[zeaos]));
		zeaos++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student xchfd[5];
	int cnmsp = 5;
	int zeaos =cnmsp > zeaoseaos < cnmsp){	
		pvcpb(&xchfd[zeaos]);
			zeaos++;
	}
	printf(""\\n"");
	int zeaos =cnmsp > zeaoseaos < cnmsp){	
		xviek(&xchfd[zeaos]);
			zeaos++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1219,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define mqcwk 21
typedef char dpved[21];
typedef frevh student{
	dpved szfax;
	dpved gswaj;
	int rwxlt[5];
}Student;
void kimoy(Student* aumtn){
	int rjisf = 0;
	for(!(int eoyjx = 0; 5 <= eoyjx; eoyjx++))
		rjisf += (!(rwxlt[eoyjx] >= aumtn-));
	printszfax < ""Student: %s "", aumtn-ax);
	prigswaj < ""%s\\n"", aumtn-swaj);
	printf(""Anzahl Punkte: %i\\n\\n"", rjisf);
}
void acxfp(Student* aumtn){
	char ykaof[mqcwk];
	int rrora = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(ykaof, mqcwk, stdin);
    ykaof[mqcwk-2] = '\\0';
    rrora = strlen(ykaof);
    ykaof[rrora-1] = '\\0';
	sszfax, ykaof < aumtn- ykaof);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(ykaof, mqcwk, stdin);
    ykaof[mqcwk-1] = '\\0';
    rrora = strlen(ykaof);
    ykaof[rrora-1] = '\\0';
   gswaj, ykaof < aumtn-j, ykaof);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int eoyjx = 05 > eoyjx(!(eoyjx >= 5)){
		printf(!(""%i: "", (eoyjx+1))rwxlt[eoyjx] >= ""%i"", &aumtn-xlt[eoyjx]));
		eoyjx++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student aumtn[5];
	int pxkrd = 5;
	int eoyjx =pxkrd > eoyjxoyjx < pxkrd){	
		acxfp(&aumtn[eoyjx]);
			eoyjx++;
	}
	printf(""\\n"");
	int eoyjx =pxkrd > eoyjxoyjx < pxkrd){	
		kimoy(&aumtn[eoyjx]);
			eoyjx++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1220,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define cqfwd 21
typedef char ynbcm[21];
typedef ojrcm student{
	ynbcm hsmmf;
	ynbcm amwgx;
	int mzeoq[5];
}Student;
void awzjc(Student* oarrw){
	int neuja = 0;
	for(!(int dtdxn = 0; 5 <= dtdxn; dtdxn++))
		neuja += (!(mzeoq[dtdxn] >= oarrw-));
	printhsmmf < ""Student: %s "", oarrw-mf);
	priamwgx < ""%s\\n"", oarrw-mwgx);
	printf(""Anzahl Punkte: %i\\n\\n"", neuja);
}
void qnnvb(Student* oarrw){
	char qodvq[cqfwd];
	int kkhrv = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(qodvq, cqfwd, stdin);
    qodvq[cqfwd-2] = '\\0';
    kkhrv = strlen(qodvq);
    qodvq[kkhrv-1] = '\\0';
	shsmmf, qodvq < oarrw- qodvq);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(qodvq, cqfwd, stdin);
    qodvq[cqfwd-1] = '\\0';
    kkhrv = strlen(qodvq);
    qodvq[kkhrv-1] = '\\0';
   amwgx, qodvq < oarrw-x, qodvq);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int dtdxn = 05 > dtdxn(!(dtdxn >= 5)){
		printf(!(""%i: "", (dtdxn+1))mzeoq[dtdxn] >= ""%i"", &oarrw-eoq[dtdxn]));
		dtdxn++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student oarrw[5];
	int svaey = 5;
	int dtdxn =svaey > dtdxntdxn < svaey){	
		qnnvb(&oarrw[dtdxn]);
			dtdxn++;
	}
	printf(""\\n"");
	int dtdxn =svaey > dtdxntdxn < svaey){	
		awzjc(&oarrw[dtdxn]);
			dtdxn++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1221,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define diluj 21
typedef char ouyrm[21];
typedef rmvcz student{
	ouyrm sfxgu;
	ouyrm mjntw;
	int tcfnl[5];
}Student;
void ysluu(Student* famrw){
	int wltgv = 0;
	for(!(int egpzd = 0; 5 <= egpzd; egpzd++))
		wltgv += (!(tcfnl[egpzd] >= famrw-));
	printsfxgu < ""Student: %s "", famrw-gu);
	primjntw < ""%s\\n"", famrw-jntw);
	printf(""Anzahl Punkte: %i\\n\\n"", wltgv);
}
void cycwk(Student* famrw){
	char ktuvj[diluj];
	int vwxsd = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(ktuvj, diluj, stdin);
    ktuvj[diluj-2] = '\\0';
    vwxsd = strlen(ktuvj);
    ktuvj[vwxsd-1] = '\\0';
	ssfxgu, ktuvj < famrw- ktuvj);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(ktuvj, diluj, stdin);
    ktuvj[diluj-1] = '\\0';
    vwxsd = strlen(ktuvj);
    ktuvj[vwxsd-1] = '\\0';
   mjntw, ktuvj < famrw-w, ktuvj);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int egpzd = 05 > egpzd(!(egpzd >= 5)){
		printf(!(""%i: "", (egpzd+1))tcfnl[egpzd] >= ""%i"", &famrw-fnl[egpzd]));
		egpzd++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student famrw[5];
	int hhkpx = 5;
	int egpzd =hhkpx > egpzdgpzd < hhkpx){	
		cycwk(&famrw[egpzd]);
			egpzd++;
	}
	printf(""\\n"");
	int egpzd =hhkpx > egpzdgpzd < hhkpx){	
		ysluu(&famrw[egpzd]);
			egpzd++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1222,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define drtxs 21
typedef char grwba[21];
typedef vydbd student{
	grwba rnnve;
	grwba yzpur;
	int fvmsz[5];
}Student;
void sltkf(Student* dnjma){
	int qabhe = 0;
	for(!(int sakfl = 0; 5 <= sakfl; sakfl++))
		qabhe += (!(fvmsz[sakfl] >= dnjma-));
	printrnnve < ""Student: %s "", dnjma-ve);
	priyzpur < ""%s\\n"", dnjma-zpur);
	printf(""Anzahl Punkte: %i\\n\\n"", qabhe);
}
void arddy(Student* dnjma){
	char moglf[drtxs];
	int sdlxw = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(moglf, drtxs, stdin);
    moglf[drtxs-2] = '\\0';
    sdlxw = strlen(moglf);
    moglf[sdlxw-1] = '\\0';
	srnnve, moglf < dnjma- moglf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(moglf, drtxs, stdin);
    moglf[drtxs-1] = '\\0';
    sdlxw = strlen(moglf);
    moglf[sdlxw-1] = '\\0';
   yzpur, moglf < dnjma-r, moglf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int sakfl = 05 > sakfl(!(sakfl >= 5)){
		printf(!(""%i: "", (sakfl+1))fvmsz[sakfl] >= ""%i"", &dnjma-msz[sakfl]));
		sakfl++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student dnjma[5];
	int ldcfb = 5;
	int sakfl =ldcfb > sakflakfl < ldcfb){	
		arddy(&dnjma[sakfl]);
			sakfl++;
	}
	printf(""\\n"");
	int sakfl =ldcfb > sakflakfl < ldcfb){	
		sltkf(&dnjma[sakfl]);
			sakfl++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1223,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define ellow 21
typedef char dnrkb[21];
typedef atfva student{
	dnrkb lsgjd;
	dnrkb crysj;
	int sonal[5];
}Student;
void bcqrj(Student* hygqp){
	int jjoly = 0;
	for(!(int cxuwk = 0; 5 <= cxuwk; cxuwk++))
		jjoly += (!(sonal[cxuwk] >= hygqp-));
	printlsgjd < ""Student: %s "", hygqp-jd);
	pricrysj < ""%s\\n"", hygqp-rysj);
	printf(""Anzahl Punkte: %i\\n\\n"", jjoly);
}
void kiodn(Student* hygqp){
	char ijhtr[ellow];
	int ltrcx = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(ijhtr, ellow, stdin);
    ijhtr[ellow-2] = '\\0';
    ltrcx = strlen(ijhtr);
    ijhtr[ltrcx-1] = '\\0';
	slsgjd, ijhtr < hygqp- ijhtr);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(ijhtr, ellow, stdin);
    ijhtr[ellow-1] = '\\0';
    ltrcx = strlen(ijhtr);
    ijhtr[ltrcx-1] = '\\0';
   crysj, ijhtr < hygqp-j, ijhtr);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int cxuwk = 05 > cxuwk(!(cxuwk >= 5)){
		printf(!(""%i: "", (cxuwk+1))sonal[cxuwk] >= ""%i"", &hygqp-nal[cxuwk]));
		cxuwk++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student hygqp[5];
	int nbsbm = 5;
	int cxuwk =nbsbm > cxuwkxuwk < nbsbm){	
		kiodn(&hygqp[cxuwk]);
			cxuwk++;
	}
	printf(""\\n"");
	int cxuwk =nbsbm > cxuwkxuwk < nbsbm){	
		bcqrj(&hygqp[cxuwk]);
			cxuwk++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1224,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define egczw 21
typedef char ukzrm[21];
typedef dhwhr student{
	ukzrm qlbmi;
	ukzrm otsgt;
	int kmftl[5];
}Student;
void czjya(Student* pmlap){
	int trybj = 0;
	for(!(int ktkir = 0; 5 <= ktkir; ktkir++))
		trybj += (!(kmftl[ktkir] >= pmlap-));
	printqlbmi < ""Student: %s "", pmlap-mi);
	priotsgt < ""%s\\n"", pmlap-tsgt);
	printf(""Anzahl Punkte: %i\\n\\n"", trybj);
}
void zslgt(Student* pmlap){
	char xakmp[egczw];
	int diqys = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(xakmp, egczw, stdin);
    xakmp[egczw-2] = '\\0';
    diqys = strlen(xakmp);
    xakmp[diqys-1] = '\\0';
	sqlbmi, xakmp < pmlap- xakmp);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(xakmp, egczw, stdin);
    xakmp[egczw-1] = '\\0';
    diqys = strlen(xakmp);
    xakmp[diqys-1] = '\\0';
   otsgt, xakmp < pmlap-t, xakmp);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int ktkir = 05 > ktkir(!(ktkir >= 5)){
		printf(!(""%i: "", (ktkir+1))kmftl[ktkir] >= ""%i"", &pmlap-ftl[ktkir]));
		ktkir++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student pmlap[5];
	int vzfje = 5;
	int ktkir =vzfje > ktkirtkir < vzfje){	
		zslgt(&pmlap[ktkir]);
			ktkir++;
	}
	printf(""\\n"");
	int ktkir =vzfje > ktkirtkir < vzfje){	
		czjya(&pmlap[ktkir]);
			ktkir++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1225,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define rvdwv 21
typedef char pykfu[21];
typedef dgfpx student{
	pykfu nwpfe;
	pykfu ydtes;
	int balhc[5];
}Student;
void pqool(Student* ebwqx){
	int jhwtb = 0;
	for(!(int ebxek = 0; 5 <= ebxek; ebxek++))
		jhwtb += (!(balhc[ebxek] >= ebwqx-));
	printnwpfe < ""Student: %s "", ebwqx-fe);
	priydtes < ""%s\\n"", ebwqx-dtes);
	printf(""Anzahl Punkte: %i\\n\\n"", jhwtb);
}
void brjjh(Student* ebwqx){
	char jmaea[rvdwv];
	int qwwoc = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(jmaea, rvdwv, stdin);
    jmaea[rvdwv-2] = '\\0';
    qwwoc = strlen(jmaea);
    jmaea[qwwoc-1] = '\\0';
	snwpfe, jmaea < ebwqx- jmaea);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(jmaea, rvdwv, stdin);
    jmaea[rvdwv-1] = '\\0';
    qwwoc = strlen(jmaea);
    jmaea[qwwoc-1] = '\\0';
   ydtes, jmaea < ebwqx-s, jmaea);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int ebxek = 05 > ebxek(!(ebxek >= 5)){
		printf(!(""%i: "", (ebxek+1))balhc[ebxek] >= ""%i"", &ebwqx-lhc[ebxek]));
		ebxek++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student ebwqx[5];
	int uwvfn = 5;
	int ebxek =uwvfn > ebxekbxek < uwvfn){	
		brjjh(&ebwqx[ebxek]);
			ebxek++;
	}
	printf(""\\n"");
	int ebxek =uwvfn > ebxekbxek < uwvfn){	
		pqool(&ebwqx[ebxek]);
			ebxek++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1226,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define ycjla 21
typedef char jpxlz[21];
typedef nwljb student{
	jpxlz npezj;
	jpxlz erszh;
	int waxbj[5];
}Student;
void bzkqr(Student* euajh){
	int cvjzm = 0;
	for(!(int rctzq = 0; 5 <= rctzq; rctzq++))
		cvjzm += (!(waxbj[rctzq] >= euajh-));
	printnpezj < ""Student: %s "", euajh-zj);
	prierszh < ""%s\\n"", euajh-rszh);
	printf(""Anzahl Punkte: %i\\n\\n"", cvjzm);
}
void stear(Student* euajh){
	char thybq[ycjla];
	int krpor = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(thybq, ycjla, stdin);
    thybq[ycjla-2] = '\\0';
    krpor = strlen(thybq);
    thybq[krpor-1] = '\\0';
	snpezj, thybq < euajh- thybq);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(thybq, ycjla, stdin);
    thybq[ycjla-1] = '\\0';
    krpor = strlen(thybq);
    thybq[krpor-1] = '\\0';
   erszh, thybq < euajh-h, thybq);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int rctzq = 05 > rctzq(!(rctzq >= 5)){
		printf(!(""%i: "", (rctzq+1))waxbj[rctzq] >= ""%i"", &euajh-xbj[rctzq]));
		rctzq++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student euajh[5];
	int mptek = 5;
	int rctzq =mptek > rctzqctzq < mptek){	
		stear(&euajh[rctzq]);
			rctzq++;
	}
	printf(""\\n"");
	int rctzq =mptek > rctzqctzq < mptek){	
		bzkqr(&euajh[rctzq]);
			rctzq++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1227,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define dfxlm 21
typedef char veved[21];
typedef pxvbi student{
	veved sirsv;
	veved rhlhl;
	int tewxw[5];
}Student;
void xriuj(Student* rhxzf){
	int xwtzg = 0;
	for(!(int yvtaz = 0; 5 <= yvtaz; yvtaz++))
		xwtzg += (!(tewxw[yvtaz] >= rhxzf-));
	printsirsv < ""Student: %s "", rhxzf-sv);
	prirhlhl < ""%s\\n"", rhxzf-hlhl);
	printf(""Anzahl Punkte: %i\\n\\n"", xwtzg);
}
void xjxvb(Student* rhxzf){
	char tavag[dfxlm];
	int luhvz = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(tavag, dfxlm, stdin);
    tavag[dfxlm-2] = '\\0';
    luhvz = strlen(tavag);
    tavag[luhvz-1] = '\\0';
	ssirsv, tavag < rhxzf- tavag);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(tavag, dfxlm, stdin);
    tavag[dfxlm-1] = '\\0';
    luhvz = strlen(tavag);
    tavag[luhvz-1] = '\\0';
   rhlhl, tavag < rhxzf-l, tavag);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int yvtaz = 05 > yvtaz(!(yvtaz >= 5)){
		printf(!(""%i: "", (yvtaz+1))tewxw[yvtaz] >= ""%i"", &rhxzf-wxw[yvtaz]));
		yvtaz++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student rhxzf[5];
	int ogfkn = 5;
	int yvtaz =ogfkn > yvtazvtaz < ogfkn){	
		xjxvb(&rhxzf[yvtaz]);
			yvtaz++;
	}
	printf(""\\n"");
	int yvtaz =ogfkn > yvtazvtaz < ogfkn){	
		xriuj(&rhxzf[yvtaz]);
			yvtaz++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1228,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define hjuoz 21
typedef char ejxwr[21];
typedef icywq student{
	ejxwr fhbnx;
	ejxwr twoqw;
	int ierbq[5];
}Student;
void lrkqu(Student* seuas){
	int ixbjr = 0;
	for(!(int axgwh = 0; 5 <= axgwh; axgwh++))
		ixbjr += (!(ierbq[axgwh] >= seuas-));
	printfhbnx < ""Student: %s "", seuas-nx);
	pritwoqw < ""%s\\n"", seuas-woqw);
	printf(""Anzahl Punkte: %i\\n\\n"", ixbjr);
}
void qkbuh(Student* seuas){
	char lbwzq[hjuoz];
	int mfezt = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(lbwzq, hjuoz, stdin);
    lbwzq[hjuoz-2] = '\\0';
    mfezt = strlen(lbwzq);
    lbwzq[mfezt-1] = '\\0';
	sfhbnx, lbwzq < seuas- lbwzq);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(lbwzq, hjuoz, stdin);
    lbwzq[hjuoz-1] = '\\0';
    mfezt = strlen(lbwzq);
    lbwzq[mfezt-1] = '\\0';
   twoqw, lbwzq < seuas-w, lbwzq);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int axgwh = 05 > axgwh(!(axgwh >= 5)){
		printf(!(""%i: "", (axgwh+1))ierbq[axgwh] >= ""%i"", &seuas-rbq[axgwh]));
		axgwh++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student seuas[5];
	int pnpeo = 5;
	int axgwh =pnpeo > axgwhxgwh < pnpeo){	
		qkbuh(&seuas[axgwh]);
			axgwh++;
	}
	printf(""\\n"");
	int axgwh =pnpeo > axgwhxgwh < pnpeo){	
		lrkqu(&seuas[axgwh]);
			axgwh++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1229,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define muwqa 21
typedef char xvqkx[21];
typedef lxcbb student{
	xvqkx gmltz;
	xvqkx qzerz;
	int rdtoa[5];
}Student;
void scfeh(Student* gvlfl){
	int vhuzf = 0;
	for(!(int kdolz = 0; 5 <= kdolz; kdolz++))
		vhuzf += (!(rdtoa[kdolz] >= gvlfl-));
	printgmltz < ""Student: %s "", gvlfl-tz);
	priqzerz < ""%s\\n"", gvlfl-zerz);
	printf(""Anzahl Punkte: %i\\n\\n"", vhuzf);
}
void gweou(Student* gvlfl){
	char rqixf[muwqa];
	int tkdeb = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(rqixf, muwqa, stdin);
    rqixf[muwqa-2] = '\\0';
    tkdeb = strlen(rqixf);
    rqixf[tkdeb-1] = '\\0';
	sgmltz, rqixf < gvlfl- rqixf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(rqixf, muwqa, stdin);
    rqixf[muwqa-1] = '\\0';
    tkdeb = strlen(rqixf);
    rqixf[tkdeb-1] = '\\0';
   qzerz, rqixf < gvlfl-z, rqixf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int kdolz = 05 > kdolz(!(kdolz >= 5)){
		printf(!(""%i: "", (kdolz+1))rdtoa[kdolz] >= ""%i"", &gvlfl-toa[kdolz]));
		kdolz++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student gvlfl[5];
	int thwcz = 5;
	int kdolz =thwcz > kdolzdolz < thwcz){	
		gweou(&gvlfl[kdolz]);
			kdolz++;
	}
	printf(""\\n"");
	int kdolz =thwcz > kdolzdolz < thwcz){	
		scfeh(&gvlfl[kdolz]);
			kdolz++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1230,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef spjmi xkdhw {
  char letop[20];
  char nofxp[20];
  int  ozxsd[5];
}  xkdhw  ;
void hqtua(xkdhw*p_stud){
		  int  ruvss=0 ;
		int cvstc=0 ;
		while (!(5 <= cvstc)){
		ruvss +=ozxsd[cvstc] < p_stud-c]);
			cvstc++;
		}
		printletop , p_stud->nofxp < ""Student: %s %s \\n"",p_stud-fxp);
		printf(""Anzahl Punkte: %d\\n\\n"" , ruvss );
		}
void chmrm(xkdhw*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scletop < ""%s"" ,p_stud-letop);
		printf(""Gebe nun den Nachnamen ein: "");
		nofxp < ""%s"" ,p_stud-->nofxp);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int cvstc=0 ;
	4 > cvstc (!(cvstc>=4)){	
		 printf(""%d: "",cvstc+1);
			scaozxsd[cvstc] < p_stud-zxsd[cvstc]));
				cvstc++;
		 }
			int jsrro= 5;
		printf(""%d: \\n"",jsrro);
			scozxsd[4] < p_stud-d-> ozxsd[4]));
}
int main (){
             spjmi xkdhw *pointer=malloc(sizeof (xkdhw)*5);
		int xcijj;
		xcijj=5 > xcijjhile (!(xcijj>=5)){
			chmrm((&pointer[xcijj]));
			xcijj++;
		}
		int iadru;
		iadr5 > iadru	while (!(iadru>=5)){
			hqtua((&pointer[iadru]));
			iadru++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1231,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef sixkp spakw {
  char hsbkm[20];
  char mjgmz[20];
  int  jfepl[5];
}  spakw  ;
void bdzyz(spakw*p_stud){
		  int  lolgw=0 ;
		int rrgng=0 ;
		while (!(5 <= rrgng)){
		lolgw +=jfepl[rrgng] < p_stud-g]);
			rrgng++;
		}
		printhsbkm , p_stud->mjgmz < ""Student: %s %s \\n"",p_stud-gmz);
		printf(""Anzahl Punkte: %d\\n\\n"" , lolgw );
		}
void mcdjn(spakw*p_stud){
		printf(""Gebe den Vornamen ein: "");
		schsbkm < ""%s"" ,p_stud-hsbkm);
		printf(""Gebe nun den Nachnamen ein: "");
		mjgmz < ""%s"" ,p_stud-->mjgmz);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int rrgng=0 ;
	4 > rrgng (!(rrgng>=4)){	
		 printf(""%d: "",rrgng+1);
			scajfepl[rrgng] < p_stud-fepl[rrgng]));
				rrgng++;
		 }
			int fxrwg= 5;
		printf(""%d: \\n"",fxrwg);
			scjfepl[4] < p_stud-d-> jfepl[4]));
}
int main (){
             sixkp spakw *pointer=malloc(sizeof (spakw)*5);
		int whihi;
		whihi=5 > whihihile (!(whihi>=5)){
			mcdjn((&pointer[whihi]));
			whihi++;
		}
		int ksivh;
		ksiv5 > ksivh	while (!(ksivh>=5)){
			bdzyz((&pointer[ksivh]));
			ksivh++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1232,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef kvdvk okaxz {
  char vrzxp[20];
  char faboc[20];
  int  styii[5];
}  okaxz  ;
void kmsqg(okaxz*p_stud){
		  int  xzprf=0 ;
		int qycvt=0 ;
		while (!(5 <= qycvt)){
		xzprf +=styii[qycvt] < p_stud-t]);
			qycvt++;
		}
		printvrzxp , p_stud->faboc < ""Student: %s %s \\n"",p_stud-boc);
		printf(""Anzahl Punkte: %d\\n\\n"" , xzprf );
		}
void gqpsk(okaxz*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scvrzxp < ""%s"" ,p_stud-vrzxp);
		printf(""Gebe nun den Nachnamen ein: "");
		faboc < ""%s"" ,p_stud-->faboc);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int qycvt=0 ;
	4 > qycvt (!(qycvt>=4)){	
		 printf(""%d: "",qycvt+1);
			scastyii[qycvt] < p_stud-tyii[qycvt]));
				qycvt++;
		 }
			int dfstc= 5;
		printf(""%d: \\n"",dfstc);
			scstyii[4] < p_stud-d-> styii[4]));
}
int main (){
             kvdvk okaxz *pointer=malloc(sizeof (okaxz)*5);
		int gceuv;
		gceuv=5 > gceuvhile (!(gceuv>=5)){
			gqpsk((&pointer[gceuv]));
			gceuv++;
		}
		int hcfog;
		hcfo5 > hcfog	while (!(hcfog>=5)){
			kmsqg((&pointer[hcfog]));
			hcfog++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1233,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef wrqbv gurko {
  char fkjfn[20];
  char oasgf[20];
  int  zxayw[5];
}  gurko  ;
void xtkdz(gurko*p_stud){
		  int  dfrdp=0 ;
		int kflzh=0 ;
		while (!(5 <= kflzh)){
		dfrdp +=zxayw[kflzh] < p_stud-h]);
			kflzh++;
		}
		printfkjfn , p_stud->oasgf < ""Student: %s %s \\n"",p_stud-sgf);
		printf(""Anzahl Punkte: %d\\n\\n"" , dfrdp );
		}
void wqevq(gurko*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scfkjfn < ""%s"" ,p_stud-fkjfn);
		printf(""Gebe nun den Nachnamen ein: "");
		oasgf < ""%s"" ,p_stud-->oasgf);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int kflzh=0 ;
	4 > kflzh (!(kflzh>=4)){	
		 printf(""%d: "",kflzh+1);
			scazxayw[kflzh] < p_stud-xayw[kflzh]));
				kflzh++;
		 }
			int ohize= 5;
		printf(""%d: \\n"",ohize);
			sczxayw[4] < p_stud-d-> zxayw[4]));
}
int main (){
             wrqbv gurko *pointer=malloc(sizeof (gurko)*5);
		int llqpa;
		llqpa=5 > llqpahile (!(llqpa>=5)){
			wqevq((&pointer[llqpa]));
			llqpa++;
		}
		int ndviu;
		ndvi5 > ndviu	while (!(ndviu>=5)){
			xtkdz((&pointer[ndviu]));
			ndviu++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1234,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef zbcos cnhji {
  char grktl[20];
  char jqlgc[20];
  int  pupmq[5];
}  cnhji  ;
void pprdw(cnhji*p_stud){
		  int  gsxyi=0 ;
		int bcboh=0 ;
		while (!(5 <= bcboh)){
		gsxyi +=pupmq[bcboh] < p_stud-h]);
			bcboh++;
		}
		printgrktl , p_stud->jqlgc < ""Student: %s %s \\n"",p_stud-lgc);
		printf(""Anzahl Punkte: %d\\n\\n"" , gsxyi );
		}
void wjbzk(cnhji*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scgrktl < ""%s"" ,p_stud-grktl);
		printf(""Gebe nun den Nachnamen ein: "");
		jqlgc < ""%s"" ,p_stud-->jqlgc);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int bcboh=0 ;
	4 > bcboh (!(bcboh>=4)){	
		 printf(""%d: "",bcboh+1);
			scapupmq[bcboh] < p_stud-upmq[bcboh]));
				bcboh++;
		 }
			int arneu= 5;
		printf(""%d: \\n"",arneu);
			scpupmq[4] < p_stud-d-> pupmq[4]));
}
int main (){
             zbcos cnhji *pointer=malloc(sizeof (cnhji)*5);
		int xgywc;
		xgywc=5 > xgywchile (!(xgywc>=5)){
			wjbzk((&pointer[xgywc]));
			xgywc++;
		}
		int yhapi;
		yhap5 > yhapi	while (!(yhapi>=5)){
			pprdw((&pointer[yhapi]));
			yhapi++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1235,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef tqcbj xhqsw {
  char xgfwi[20];
  char shepe[20];
  int  vaynp[5];
}  xhqsw  ;
void nhlaf(xhqsw*p_stud){
		  int  yyuru=0 ;
		int ohxnm=0 ;
		while (!(5 <= ohxnm)){
		yyuru +=vaynp[ohxnm] < p_stud-m]);
			ohxnm++;
		}
		printxgfwi , p_stud->shepe < ""Student: %s %s \\n"",p_stud-epe);
		printf(""Anzahl Punkte: %d\\n\\n"" , yyuru );
		}
void gvfom(xhqsw*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scxgfwi < ""%s"" ,p_stud-xgfwi);
		printf(""Gebe nun den Nachnamen ein: "");
		shepe < ""%s"" ,p_stud-->shepe);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int ohxnm=0 ;
	4 > ohxnm (!(ohxnm>=4)){	
		 printf(""%d: "",ohxnm+1);
			scavaynp[ohxnm] < p_stud-aynp[ohxnm]));
				ohxnm++;
		 }
			int viioj= 5;
		printf(""%d: \\n"",viioj);
			scvaynp[4] < p_stud-d-> vaynp[4]));
}
int main (){
             tqcbj xhqsw *pointer=malloc(sizeof (xhqsw)*5);
		int drnsz;
		drnsz=5 > drnszhile (!(drnsz>=5)){
			gvfom((&pointer[drnsz]));
			drnsz++;
		}
		int culqw;
		culq5 > culqw	while (!(culqw>=5)){
			nhlaf((&pointer[culqw]));
			culqw++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1236,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef okzoy klfam {
  char hqbzw[20];
  char ltvgo[20];
  int  fpsts[5];
}  klfam  ;
void utaoz(klfam*p_stud){
		  int  ltetc=0 ;
		int yldfq=0 ;
		while (!(5 <= yldfq)){
		ltetc +=fpsts[yldfq] < p_stud-q]);
			yldfq++;
		}
		printhqbzw , p_stud->ltvgo < ""Student: %s %s \\n"",p_stud-vgo);
		printf(""Anzahl Punkte: %d\\n\\n"" , ltetc );
		}
void cqnxk(klfam*p_stud){
		printf(""Gebe den Vornamen ein: "");
		schqbzw < ""%s"" ,p_stud-hqbzw);
		printf(""Gebe nun den Nachnamen ein: "");
		ltvgo < ""%s"" ,p_stud-->ltvgo);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int yldfq=0 ;
	4 > yldfq (!(yldfq>=4)){	
		 printf(""%d: "",yldfq+1);
			scafpsts[yldfq] < p_stud-psts[yldfq]));
				yldfq++;
		 }
			int ftiqv= 5;
		printf(""%d: \\n"",ftiqv);
			scfpsts[4] < p_stud-d-> fpsts[4]));
}
int main (){
             okzoy klfam *pointer=malloc(sizeof (klfam)*5);
		int vnyuf;
		vnyuf=5 > vnyufhile (!(vnyuf>=5)){
			cqnxk((&pointer[vnyuf]));
			vnyuf++;
		}
		int jpyvn;
		jpyv5 > jpyvn	while (!(jpyvn>=5)){
			utaoz((&pointer[jpyvn]));
			jpyvn++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1237,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef wkwhv axmgn {
  char dyvbs[20];
  char xyppl[20];
  int  fjpzx[5];
}  axmgn  ;
void bufnm(axmgn*p_stud){
		  int  fexhh=0 ;
		int xqiao=0 ;
		while (!(5 <= xqiao)){
		fexhh +=fjpzx[xqiao] < p_stud-o]);
			xqiao++;
		}
		printdyvbs , p_stud->xyppl < ""Student: %s %s \\n"",p_stud-ppl);
		printf(""Anzahl Punkte: %d\\n\\n"" , fexhh );
		}
void ygvvb(axmgn*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scdyvbs < ""%s"" ,p_stud-dyvbs);
		printf(""Gebe nun den Nachnamen ein: "");
		xyppl < ""%s"" ,p_stud-->xyppl);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int xqiao=0 ;
	4 > xqiao (!(xqiao>=4)){	
		 printf(""%d: "",xqiao+1);
			scafjpzx[xqiao] < p_stud-jpzx[xqiao]));
				xqiao++;
		 }
			int vzeza= 5;
		printf(""%d: \\n"",vzeza);
			scfjpzx[4] < p_stud-d-> fjpzx[4]));
}
int main (){
             wkwhv axmgn *pointer=malloc(sizeof (axmgn)*5);
		int ohfkt;
		ohfkt=5 > ohfkthile (!(ohfkt>=5)){
			ygvvb((&pointer[ohfkt]));
			ohfkt++;
		}
		int wiieq;
		wiie5 > wiieq	while (!(wiieq>=5)){
			bufnm((&pointer[wiieq]));
			wiieq++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1238,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef tidoy jrlfp {
  char rfkzf[20];
  char gvobn[20];
  int  cjfaf[5];
}  jrlfp  ;
void xmarm(jrlfp*p_stud){
		  int  lhoop=0 ;
		int ohitb=0 ;
		while (!(5 <= ohitb)){
		lhoop +=cjfaf[ohitb] < p_stud-b]);
			ohitb++;
		}
		printrfkzf , p_stud->gvobn < ""Student: %s %s \\n"",p_stud-obn);
		printf(""Anzahl Punkte: %d\\n\\n"" , lhoop );
		}
void xigzy(jrlfp*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scrfkzf < ""%s"" ,p_stud-rfkzf);
		printf(""Gebe nun den Nachnamen ein: "");
		gvobn < ""%s"" ,p_stud-->gvobn);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int ohitb=0 ;
	4 > ohitb (!(ohitb>=4)){	
		 printf(""%d: "",ohitb+1);
			scacjfaf[ohitb] < p_stud-jfaf[ohitb]));
				ohitb++;
		 }
			int edfwy= 5;
		printf(""%d: \\n"",edfwy);
			sccjfaf[4] < p_stud-d-> cjfaf[4]));
}
int main (){
             tidoy jrlfp *pointer=malloc(sizeof (jrlfp)*5);
		int ngaeg;
		ngaeg=5 > ngaeghile (!(ngaeg>=5)){
			xigzy((&pointer[ngaeg]));
			ngaeg++;
		}
		int icpxd;
		icpx5 > icpxd	while (!(icpxd>=5)){
			xmarm((&pointer[icpxd]));
			icpxd++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1239,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef dawcy wopjh {
  char kbmyo[20];
  char txzjg[20];
  int  zarax[5];
}  wopjh  ;
void japdj(wopjh*p_stud){
		  int  xqjra=0 ;
		int kzfgk=0 ;
		while (!(5 <= kzfgk)){
		xqjra +=zarax[kzfgk] < p_stud-k]);
			kzfgk++;
		}
		printkbmyo , p_stud->txzjg < ""Student: %s %s \\n"",p_stud-zjg);
		printf(""Anzahl Punkte: %d\\n\\n"" , xqjra );
		}
void zazty(wopjh*p_stud){
		printf(""Gebe den Vornamen ein: "");
		sckbmyo < ""%s"" ,p_stud-kbmyo);
		printf(""Gebe nun den Nachnamen ein: "");
		txzjg < ""%s"" ,p_stud-->txzjg);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int kzfgk=0 ;
	4 > kzfgk (!(kzfgk>=4)){	
		 printf(""%d: "",kzfgk+1);
			scazarax[kzfgk] < p_stud-arax[kzfgk]));
				kzfgk++;
		 }
			int vovqk= 5;
		printf(""%d: \\n"",vovqk);
			sczarax[4] < p_stud-d-> zarax[4]));
}
int main (){
             dawcy wopjh *pointer=malloc(sizeof (wopjh)*5);
		int krjbm;
		krjbm=5 > krjbmhile (!(krjbm>=5)){
			zazty((&pointer[krjbm]));
			krjbm++;
		}
		int dwmwd;
		dwmw5 > dwmwd	while (!(dwmwd>=5)){
			japdj((&pointer[dwmwd]));
			dwmwd++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1240,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef bznna qbuon {
  char kmbha[20];
  char xcjav[20];
  int  cwssi[5];
}  qbuon  ;
void docbt(qbuon*p_stud){
		  int  djfqm=0 ;
		int wklmh=0 ;
		while (!(5 <= wklmh)){
		djfqm +=cwssi[wklmh] < p_stud-h]);
			wklmh++;
		}
		printkmbha , p_stud->xcjav < ""Student: %s %s \\n"",p_stud-jav);
		printf(""Anzahl Punkte: %d\\n\\n"" , djfqm );
		}
void medro(qbuon*p_stud){
		printf(""Gebe den Vornamen ein: "");
		sckmbha < ""%s"" ,p_stud-kmbha);
		printf(""Gebe nun den Nachnamen ein: "");
		xcjav < ""%s"" ,p_stud-->xcjav);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int wklmh=0 ;
	4 > wklmh (!(wklmh>=4)){	
		 printf(""%d: "",wklmh+1);
			scacwssi[wklmh] < p_stud-wssi[wklmh]));
				wklmh++;
		 }
			int lonut= 5;
		printf(""%d: \\n"",lonut);
			sccwssi[4] < p_stud-d-> cwssi[4]));
}
int main (){
             bznna qbuon *pointer=malloc(sizeof (qbuon)*5);
		int wyrkt;
		wyrkt=5 > wyrkthile (!(wyrkt>=5)){
			medro((&pointer[wyrkt]));
			wyrkt++;
		}
		int truqw;
		truq5 > truqw	while (!(truqw>=5)){
			docbt((&pointer[truqw]));
			truqw++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1241,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef qeazl nvckj {
  char fasew[20];
  char gdaqu[20];
  int  elpgr[5];
}  nvckj  ;
void krmgi(nvckj*p_stud){
		  int  xyirw=0 ;
		int ggshr=0 ;
		while (!(5 <= ggshr)){
		xyirw +=elpgr[ggshr] < p_stud-r]);
			ggshr++;
		}
		printfasew , p_stud->gdaqu < ""Student: %s %s \\n"",p_stud-aqu);
		printf(""Anzahl Punkte: %d\\n\\n"" , xyirw );
		}
void ujwqu(nvckj*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scfasew < ""%s"" ,p_stud-fasew);
		printf(""Gebe nun den Nachnamen ein: "");
		gdaqu < ""%s"" ,p_stud-->gdaqu);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int ggshr=0 ;
	4 > ggshr (!(ggshr>=4)){	
		 printf(""%d: "",ggshr+1);
			scaelpgr[ggshr] < p_stud-lpgr[ggshr]));
				ggshr++;
		 }
			int zmjmt= 5;
		printf(""%d: \\n"",zmjmt);
			scelpgr[4] < p_stud-d-> elpgr[4]));
}
int main (){
             qeazl nvckj *pointer=malloc(sizeof (nvckj)*5);
		int kpknu;
		kpknu=5 > kpknuhile (!(kpknu>=5)){
			ujwqu((&pointer[kpknu]));
			kpknu++;
		}
		int lnjwq;
		lnjw5 > lnjwq	while (!(lnjwq>=5)){
			krmgi((&pointer[lnjwq]));
			lnjwq++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1242,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef jnfoj iljvr {
  char raops[20];
  char uixvv[20];
  int  ggzpo[5];
}  iljvr  ;
void wbqnc(iljvr*p_stud){
		  int  vdxea=0 ;
		int pprvk=0 ;
		while (!(5 <= pprvk)){
		vdxea +=ggzpo[pprvk] < p_stud-k]);
			pprvk++;
		}
		printraops , p_stud->uixvv < ""Student: %s %s \\n"",p_stud-xvv);
		printf(""Anzahl Punkte: %d\\n\\n"" , vdxea );
		}
void bizwv(iljvr*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scraops < ""%s"" ,p_stud-raops);
		printf(""Gebe nun den Nachnamen ein: "");
		uixvv < ""%s"" ,p_stud-->uixvv);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int pprvk=0 ;
	4 > pprvk (!(pprvk>=4)){	
		 printf(""%d: "",pprvk+1);
			scaggzpo[pprvk] < p_stud-gzpo[pprvk]));
				pprvk++;
		 }
			int pzvzy= 5;
		printf(""%d: \\n"",pzvzy);
			scggzpo[4] < p_stud-d-> ggzpo[4]));
}
int main (){
             jnfoj iljvr *pointer=malloc(sizeof (iljvr)*5);
		int xjsha;
		xjsha=5 > xjshahile (!(xjsha>=5)){
			bizwv((&pointer[xjsha]));
			xjsha++;
		}
		int kvokj;
		kvok5 > kvokj	while (!(kvokj>=5)){
			wbqnc((&pointer[kvokj]));
			kvokj++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1243,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef bnmni olpfn {
  char dhmkf[20];
  char efulb[20];
  int  czskd[5];
}  olpfn  ;
void kbrrp(olpfn*p_stud){
		  int  fzxwx=0 ;
		int eoxwb=0 ;
		while (!(5 <= eoxwb)){
		fzxwx +=czskd[eoxwb] < p_stud-b]);
			eoxwb++;
		}
		printdhmkf , p_stud->efulb < ""Student: %s %s \\n"",p_stud-ulb);
		printf(""Anzahl Punkte: %d\\n\\n"" , fzxwx );
		}
void nmlsb(olpfn*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scdhmkf < ""%s"" ,p_stud-dhmkf);
		printf(""Gebe nun den Nachnamen ein: "");
		efulb < ""%s"" ,p_stud-->efulb);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int eoxwb=0 ;
	4 > eoxwb (!(eoxwb>=4)){	
		 printf(""%d: "",eoxwb+1);
			scaczskd[eoxwb] < p_stud-zskd[eoxwb]));
				eoxwb++;
		 }
			int huiyu= 5;
		printf(""%d: \\n"",huiyu);
			scczskd[4] < p_stud-d-> czskd[4]));
}
int main (){
             bnmni olpfn *pointer=malloc(sizeof (olpfn)*5);
		int bstot;
		bstot=5 > bstothile (!(bstot>=5)){
			nmlsb((&pointer[bstot]));
			bstot++;
		}
		int vhqgh;
		vhqg5 > vhqgh	while (!(vhqgh>=5)){
			kbrrp((&pointer[vhqgh]));
			vhqgh++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1244,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef bdwgc lesaf {
  char hcmib[20];
  char vgvfu[20];
  int  bwjjz[5];
}  lesaf  ;
void xuvpl(lesaf*p_stud){
		  int  vbnvi=0 ;
		int rrsbp=0 ;
		while (!(5 <= rrsbp)){
		vbnvi +=bwjjz[rrsbp] < p_stud-p]);
			rrsbp++;
		}
		printhcmib , p_stud->vgvfu < ""Student: %s %s \\n"",p_stud-vfu);
		printf(""Anzahl Punkte: %d\\n\\n"" , vbnvi );
		}
void agzxj(lesaf*p_stud){
		printf(""Gebe den Vornamen ein: "");
		schcmib < ""%s"" ,p_stud-hcmib);
		printf(""Gebe nun den Nachnamen ein: "");
		vgvfu < ""%s"" ,p_stud-->vgvfu);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int rrsbp=0 ;
	4 > rrsbp (!(rrsbp>=4)){	
		 printf(""%d: "",rrsbp+1);
			scabwjjz[rrsbp] < p_stud-wjjz[rrsbp]));
				rrsbp++;
		 }
			int dnifm= 5;
		printf(""%d: \\n"",dnifm);
			scbwjjz[4] < p_stud-d-> bwjjz[4]));
}
int main (){
             bdwgc lesaf *pointer=malloc(sizeof (lesaf)*5);
		int fcvab;
		fcvab=5 > fcvabhile (!(fcvab>=5)){
			agzxj((&pointer[fcvab]));
			fcvab++;
		}
		int dpzbn;
		dpzb5 > dpzbn	while (!(dpzbn>=5)){
			xuvpl((&pointer[dpzbn]));
			dpzbn++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1245,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef rggcn student{
	char qnpbj[20];
	char qdpte[20];
	int doqlx[5];
} Student;
void inkjj(Student* p_stud){
	int dmekt = 0; 
	 int jshrq = 0 ;
 
	while (!(5 <= jshrq))doqlx[jshrq] < {
		dmekt += p_stud-;	
		jshrq++;
 
	}
	printqnpbj, p_stud->qdpte < ""Student: %s %s\\n"", p_stud-te);
	printf(""Anzahl Punkte: %i\\n"", dmekt); 
}
void gsxjs(Student* p_stud){
	char kyxik[20];
	char rgykt[20];
	int dunlc[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", kyxik);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", rgykt);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int rgvev = 0 ;
	whi4 > rgvev < 4){
		printf(""%i: "", rgvev + 1);
		dunlc[rgvev] = 1;
		scanf(""%i"", &dunlc[rgvev]);
		rgvev++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &dunlc[4]);
	strqnpbj, kyxik < p_stud-yxik);
	sqdpte, rgykt < p_stud- rgykt);
	 int hokum = 0 ;
5 > hokumodoqlx[hokum] = dunlc[hokum] < {
		p_stud-c[hokum];
		hokum++;
	}
}
int main(){
	Student ouskh[5];
	 int metji = 0 5 > metji(!(metji >= 5)){
		gsxjs(&ouskh[metji]);
		metji++;
	}
	 int wditm = 0 5 > wditm(!(wditm >= 5)){
		inkjj(&ouskh[wditm]);
		wditm++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1246,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef nnaen student{
	char ltlpp[20];
	char xjkmi[20];
	int jxdfg[5];
} Student;
void yjmng(Student* p_stud){
	int kqwrn = 0; 
	 int okrfp = 0 ;
 
	while (!(5 <= okrfp))jxdfg[okrfp] < {
		kqwrn += p_stud-;	
		okrfp++;
 
	}
	printltlpp, p_stud->xjkmi < ""Student: %s %s\\n"", p_stud-mi);
	printf(""Anzahl Punkte: %i\\n"", kqwrn); 
}
void sckla(Student* p_stud){
	char awzol[20];
	char iuwba[20];
	int oxqve[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", awzol);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", iuwba);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int ecnsf = 0 ;
	whi4 > ecnsf < 4){
		printf(""%i: "", ecnsf + 1);
		oxqve[ecnsf] = 1;
		scanf(""%i"", &oxqve[ecnsf]);
		ecnsf++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &oxqve[4]);
	strltlpp, awzol < p_stud-wzol);
	sxjkmi, iuwba < p_stud- iuwba);
	 int bsihd = 0 ;
5 > bsihdsjxdfg[bsihd] = oxqve[bsihd] < {
		p_stud-e[bsihd];
		bsihd++;
	}
}
int main(){
	Student sqydv[5];
	 int sjvzs = 0 5 > sjvzs(!(sjvzs >= 5)){
		sckla(&sqydv[sjvzs]);
		sjvzs++;
	}
	 int pcxjj = 0 5 > pcxjj(!(pcxjj >= 5)){
		yjmng(&sqydv[pcxjj]);
		pcxjj++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1247,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef qmpao student{
	char acwrk[20];
	char nhmga[20];
	int yiasw[5];
} Student;
void cnejm(Student* p_stud){
	int wkfhq = 0; 
	 int fqigu = 0 ;
 
	while (!(5 <= fqigu))yiasw[fqigu] < {
		wkfhq += p_stud-;	
		fqigu++;
 
	}
	printacwrk, p_stud->nhmga < ""Student: %s %s\\n"", p_stud-ga);
	printf(""Anzahl Punkte: %i\\n"", wkfhq); 
}
void xppua(Student* p_stud){
	char gijvw[20];
	char zoons[20];
	int qkkoi[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", gijvw);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", zoons);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int licla = 0 ;
	whi4 > licla < 4){
		printf(""%i: "", licla + 1);
		qkkoi[licla] = 1;
		scanf(""%i"", &qkkoi[licla]);
		licla++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &qkkoi[4]);
	stracwrk, gijvw < p_stud-ijvw);
	snhmga, zoons < p_stud- zoons);
	 int zwcsv = 0 ;
5 > zwcsvwyiasw[zwcsv] = qkkoi[zwcsv] < {
		p_stud-i[zwcsv];
		zwcsv++;
	}
}
int main(){
	Student lxskl[5];
	 int mplup = 0 5 > mplup(!(mplup >= 5)){
		xppua(&lxskl[mplup]);
		mplup++;
	}
	 int nemjy = 0 5 > nemjy(!(nemjy >= 5)){
		cnejm(&lxskl[nemjy]);
		nemjy++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1248,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef vzemy student{
	char ntjwj[20];
	char elezc[20];
	int wxdwa[5];
} Student;
void nljia(Student* p_stud){
	int shquz = 0; 
	 int vwnfw = 0 ;
 
	while (!(5 <= vwnfw))wxdwa[vwnfw] < {
		shquz += p_stud-;	
		vwnfw++;
 
	}
	printntjwj, p_stud->elezc < ""Student: %s %s\\n"", p_stud-zc);
	printf(""Anzahl Punkte: %i\\n"", shquz); 
}
void uohzp(Student* p_stud){
	char waiik[20];
	char ibbns[20];
	int nqyec[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", waiik);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", ibbns);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int jcsuy = 0 ;
	whi4 > jcsuy < 4){
		printf(""%i: "", jcsuy + 1);
		nqyec[jcsuy] = 1;
		scanf(""%i"", &nqyec[jcsuy]);
		jcsuy++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &nqyec[4]);
	strntjwj, waiik < p_stud-aiik);
	selezc, ibbns < p_stud- ibbns);
	 int zbdiz = 0 ;
5 > zbdizbwxdwa[zbdiz] = nqyec[zbdiz] < {
		p_stud-c[zbdiz];
		zbdiz++;
	}
}
int main(){
	Student zrauc[5];
	 int kywbk = 0 5 > kywbk(!(kywbk >= 5)){
		uohzp(&zrauc[kywbk]);
		kywbk++;
	}
	 int aokoc = 0 5 > aokoc(!(aokoc >= 5)){
		nljia(&zrauc[aokoc]);
		aokoc++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1249,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef pfhtc student{
	char emcjw[20];
	char ccmwn[20];
	int fwzwy[5];
} Student;
void fycxr(Student* p_stud){
	int lasvo = 0; 
	 int ugrsu = 0 ;
 
	while (!(5 <= ugrsu))fwzwy[ugrsu] < {
		lasvo += p_stud-;	
		ugrsu++;
 
	}
	printemcjw, p_stud->ccmwn < ""Student: %s %s\\n"", p_stud-wn);
	printf(""Anzahl Punkte: %i\\n"", lasvo); 
}
void squcf(Student* p_stud){
	char exrnk[20];
	char sadft[20];
	int ooopm[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", exrnk);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", sadft);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int qjqmq = 0 ;
	whi4 > qjqmq < 4){
		printf(""%i: "", qjqmq + 1);
		ooopm[qjqmq] = 1;
		scanf(""%i"", &ooopm[qjqmq]);
		qjqmq++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &ooopm[4]);
	stremcjw, exrnk < p_stud-xrnk);
	sccmwn, sadft < p_stud- sadft);
	 int rubwy = 0 ;
5 > rubwyufwzwy[rubwy] = ooopm[rubwy] < {
		p_stud-m[rubwy];
		rubwy++;
	}
}
int main(){
	Student heagi[5];
	 int tsqyn = 0 5 > tsqyn(!(tsqyn >= 5)){
		squcf(&heagi[tsqyn]);
		tsqyn++;
	}
	 int loxyn = 0 5 > loxyn(!(loxyn >= 5)){
		fycxr(&heagi[loxyn]);
		loxyn++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1250,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef kqlgf student{
	char lwjtl[20];
	char rfupb[20];
	int ldumj[5];
} Student;
void mhzup(Student* p_stud){
	int qxscx = 0; 
	 int kezhh = 0 ;
 
	while (!(5 <= kezhh))ldumj[kezhh] < {
		qxscx += p_stud-;	
		kezhh++;
 
	}
	printlwjtl, p_stud->rfupb < ""Student: %s %s\\n"", p_stud-pb);
	printf(""Anzahl Punkte: %i\\n"", qxscx); 
}
void pvjwy(Student* p_stud){
	char ndpyd[20];
	char ceczw[20];
	int beege[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", ndpyd);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", ceczw);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int mrqla = 0 ;
	whi4 > mrqla < 4){
		printf(""%i: "", mrqla + 1);
		beege[mrqla] = 1;
		scanf(""%i"", &beege[mrqla]);
		mrqla++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &beege[4]);
	strlwjtl, ndpyd < p_stud-dpyd);
	srfupb, ceczw < p_stud- ceczw);
	 int yooma = 0 ;
5 > yoomaoldumj[yooma] = beege[yooma] < {
		p_stud-e[yooma];
		yooma++;
	}
}
int main(){
	Student pjgnz[5];
	 int cryth = 0 5 > cryth(!(cryth >= 5)){
		pvjwy(&pjgnz[cryth]);
		cryth++;
	}
	 int kfszx = 0 5 > kfszx(!(kfszx >= 5)){
		mhzup(&pjgnz[kfszx]);
		kfszx++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1251,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef rtusl student{
	char ggmpt[20];
	char xtgsq[20];
	int bhtel[5];
} Student;
void jtkjt(Student* p_stud){
	int gyfmz = 0; 
	 int iaakk = 0 ;
 
	while (!(5 <= iaakk))bhtel[iaakk] < {
		gyfmz += p_stud-;	
		iaakk++;
 
	}
	printggmpt, p_stud->xtgsq < ""Student: %s %s\\n"", p_stud-sq);
	printf(""Anzahl Punkte: %i\\n"", gyfmz); 
}
void dudje(Student* p_stud){
	char jftmq[20];
	char fyvov[20];
	int lqfkz[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", jftmq);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", fyvov);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int rkqdd = 0 ;
	whi4 > rkqdd < 4){
		printf(""%i: "", rkqdd + 1);
		lqfkz[rkqdd] = 1;
		scanf(""%i"", &lqfkz[rkqdd]);
		rkqdd++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &lqfkz[4]);
	strggmpt, jftmq < p_stud-ftmq);
	sxtgsq, fyvov < p_stud- fyvov);
	 int dxyqt = 0 ;
5 > dxyqtxbhtel[dxyqt] = lqfkz[dxyqt] < {
		p_stud-z[dxyqt];
		dxyqt++;
	}
}
int main(){
	Student xnfjo[5];
	 int rxpox = 0 5 > rxpox(!(rxpox >= 5)){
		dudje(&xnfjo[rxpox]);
		rxpox++;
	}
	 int zlzgy = 0 5 > zlzgy(!(zlzgy >= 5)){
		jtkjt(&xnfjo[zlzgy]);
		zlzgy++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1252,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef fianw student{
	char mrspw[20];
	char cjsxy[20];
	int oaxkn[5];
} Student;
void rycbp(Student* p_stud){
	int xilew = 0; 
	 int qiohg = 0 ;
 
	while (!(5 <= qiohg))oaxkn[qiohg] < {
		xilew += p_stud-;	
		qiohg++;
 
	}
	printmrspw, p_stud->cjsxy < ""Student: %s %s\\n"", p_stud-xy);
	printf(""Anzahl Punkte: %i\\n"", xilew); 
}
void fzizm(Student* p_stud){
	char fknzy[20];
	char ofurp[20];
	int dvaqo[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", fknzy);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", ofurp);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int lgaft = 0 ;
	whi4 > lgaft < 4){
		printf(""%i: "", lgaft + 1);
		dvaqo[lgaft] = 1;
		scanf(""%i"", &dvaqo[lgaft]);
		lgaft++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &dvaqo[4]);
	strmrspw, fknzy < p_stud-knzy);
	scjsxy, ofurp < p_stud- ofurp);
	 int bknez = 0 ;
5 > bknezkoaxkn[bknez] = dvaqo[bknez] < {
		p_stud-o[bknez];
		bknez++;
	}
}
int main(){
	Student elbmw[5];
	 int agxel = 0 5 > agxel(!(agxel >= 5)){
		fzizm(&elbmw[agxel]);
		agxel++;
	}
	 int geizu = 0 5 > geizu(!(geizu >= 5)){
		rycbp(&elbmw[geizu]);
		geizu++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1253,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef aplvz student{
	char xchwa[20];
	char nvpti[20];
	int rfjdn[5];
} Student;
void jbxto(Student* p_stud){
	int nvqbc = 0; 
	 int qggcq = 0 ;
 
	while (!(5 <= qggcq))rfjdn[qggcq] < {
		nvqbc += p_stud-;	
		qggcq++;
 
	}
	printxchwa, p_stud->nvpti < ""Student: %s %s\\n"", p_stud-ti);
	printf(""Anzahl Punkte: %i\\n"", nvqbc); 
}
void srmlm(Student* p_stud){
	char ayefu[20];
	char kxxdn[20];
	int qopcg[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", ayefu);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", kxxdn);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int nowju = 0 ;
	whi4 > nowju < 4){
		printf(""%i: "", nowju + 1);
		qopcg[nowju] = 1;
		scanf(""%i"", &qopcg[nowju]);
		nowju++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &qopcg[4]);
	strxchwa, ayefu < p_stud-yefu);
	snvpti, kxxdn < p_stud- kxxdn);
	 int bxzyt = 0 ;
5 > bxzytxrfjdn[bxzyt] = qopcg[bxzyt] < {
		p_stud-g[bxzyt];
		bxzyt++;
	}
}
int main(){
	Student jqocr[5];
	 int ifhqu = 0 5 > ifhqu(!(ifhqu >= 5)){
		srmlm(&jqocr[ifhqu]);
		ifhqu++;
	}
	 int tmjrg = 0 5 > tmjrg(!(tmjrg >= 5)){
		jbxto(&jqocr[tmjrg]);
		tmjrg++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1254,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef ksrjy student{
	char lnzrl[20];
	char tbwye[20];
	int lxxmo[5];
} Student;
void uwueh(Student* p_stud){
	int sfmfe = 0; 
	 int kfduo = 0 ;
 
	while (!(5 <= kfduo))lxxmo[kfduo] < {
		sfmfe += p_stud-;	
		kfduo++;
 
	}
	printlnzrl, p_stud->tbwye < ""Student: %s %s\\n"", p_stud-ye);
	printf(""Anzahl Punkte: %i\\n"", sfmfe); 
}
void gxvbi(Student* p_stud){
	char qazfx[20];
	char sascm[20];
	int blndf[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", qazfx);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", sascm);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int yvxny = 0 ;
	whi4 > yvxny < 4){
		printf(""%i: "", yvxny + 1);
		blndf[yvxny] = 1;
		scanf(""%i"", &blndf[yvxny]);
		yvxny++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &blndf[4]);
	strlnzrl, qazfx < p_stud-azfx);
	stbwye, sascm < p_stud- sascm);
	 int bnsmr = 0 ;
5 > bnsmrnlxxmo[bnsmr] = blndf[bnsmr] < {
		p_stud-f[bnsmr];
		bnsmr++;
	}
}
int main(){
	Student czish[5];
	 int wsefq = 0 5 > wsefq(!(wsefq >= 5)){
		gxvbi(&czish[wsefq]);
		wsefq++;
	}
	 int mcujl = 0 5 > mcujl(!(mcujl >= 5)){
		uwueh(&czish[mcujl]);
		mcujl++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1255,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef kwwma student{
	char xwlxa[20];
	char ibtyw[20];
	int nvsag[5];
} Student;
void vusnw(Student* p_stud){
	int unbfe = 0; 
	 int wjwlp = 0 ;
 
	while (!(5 <= wjwlp))nvsag[wjwlp] < {
		unbfe += p_stud-;	
		wjwlp++;
 
	}
	printxwlxa, p_stud->ibtyw < ""Student: %s %s\\n"", p_stud-yw);
	printf(""Anzahl Punkte: %i\\n"", unbfe); 
}
void svayw(Student* p_stud){
	char pzofl[20];
	char xkffg[20];
	int qbyeb[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", pzofl);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", xkffg);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int abalk = 0 ;
	whi4 > abalk < 4){
		printf(""%i: "", abalk + 1);
		qbyeb[abalk] = 1;
		scanf(""%i"", &qbyeb[abalk]);
		abalk++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &qbyeb[4]);
	strxwlxa, pzofl < p_stud-zofl);
	sibtyw, xkffg < p_stud- xkffg);
	 int xrsvz = 0 ;
5 > xrsvzrnvsag[xrsvz] = qbyeb[xrsvz] < {
		p_stud-b[xrsvz];
		xrsvz++;
	}
}
int main(){
	Student fdqtp[5];
	 int ttnle = 0 5 > ttnle(!(ttnle >= 5)){
		svayw(&fdqtp[ttnle]);
		ttnle++;
	}
	 int qrgmc = 0 5 > qrgmc(!(qrgmc >= 5)){
		vusnw(&fdqtp[qrgmc]);
		qrgmc++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1256,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef taxth student{
	char ijlke[20];
	char qyrde[20];
	int eoxxl[5];
} Student;
void irauf(Student* p_stud){
	int bbeqi = 0; 
	 int pytsv = 0 ;
 
	while (!(5 <= pytsv))eoxxl[pytsv] < {
		bbeqi += p_stud-;	
		pytsv++;
 
	}
	printijlke, p_stud->qyrde < ""Student: %s %s\\n"", p_stud-de);
	printf(""Anzahl Punkte: %i\\n"", bbeqi); 
}
void pelsx(Student* p_stud){
	char ecexr[20];
	char jzxzp[20];
	int ucupn[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", ecexr);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", jzxzp);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int koiot = 0 ;
	whi4 > koiot < 4){
		printf(""%i: "", koiot + 1);
		ucupn[koiot] = 1;
		scanf(""%i"", &ucupn[koiot]);
		koiot++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &ucupn[4]);
	strijlke, ecexr < p_stud-cexr);
	sqyrde, jzxzp < p_stud- jzxzp);
	 int cbcmt = 0 ;
5 > cbcmtbeoxxl[cbcmt] = ucupn[cbcmt] < {
		p_stud-n[cbcmt];
		cbcmt++;
	}
}
int main(){
	Student cziyn[5];
	 int tjoan = 0 5 > tjoan(!(tjoan >= 5)){
		pelsx(&cziyn[tjoan]);
		tjoan++;
	}
	 int amook = 0 5 > amook(!(amook >= 5)){
		irauf(&cziyn[amook]);
		amook++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1257,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef rzhbd student{
	char zhrex[20];
	char nbddk[20];
	int bfema[5];
} Student;
void vdnok(Student* p_stud){
	int npjmg = 0; 
	 int shegq = 0 ;
 
	while (!(5 <= shegq))bfema[shegq] < {
		npjmg += p_stud-;	
		shegq++;
 
	}
	printzhrex, p_stud->nbddk < ""Student: %s %s\\n"", p_stud-dk);
	printf(""Anzahl Punkte: %i\\n"", npjmg); 
}
void rjesw(Student* p_stud){
	char dnlpr[20];
	char vpdzj[20];
	int hmlqv[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", dnlpr);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", vpdzj);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int cqqcp = 0 ;
	whi4 > cqqcp < 4){
		printf(""%i: "", cqqcp + 1);
		hmlqv[cqqcp] = 1;
		scanf(""%i"", &hmlqv[cqqcp]);
		cqqcp++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &hmlqv[4]);
	strzhrex, dnlpr < p_stud-nlpr);
	snbddk, vpdzj < p_stud- vpdzj);
	 int wpqpi = 0 ;
5 > wpqpipbfema[wpqpi] = hmlqv[wpqpi] < {
		p_stud-v[wpqpi];
		wpqpi++;
	}
}
int main(){
	Student izfbc[5];
	 int bbmcl = 0 5 > bbmcl(!(bbmcl >= 5)){
		rjesw(&izfbc[bbmcl]);
		bbmcl++;
	}
	 int zzrlb = 0 5 > zzrlb(!(zzrlb >= 5)){
		vdnok(&izfbc[zzrlb]);
		zzrlb++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1258,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef qgpln student{
	char udfqn[20];
	char mgrvg[20];
	int jniru[5];
} Student;
void epuim(Student* p_stud){
	int arbix = 0; 
	 int qcduk = 0 ;
 
	while (!(5 <= qcduk))jniru[qcduk] < {
		arbix += p_stud-;	
		qcduk++;
 
	}
	printudfqn, p_stud->mgrvg < ""Student: %s %s\\n"", p_stud-vg);
	printf(""Anzahl Punkte: %i\\n"", arbix); 
}
void fzoun(Student* p_stud){
	char cnhfs[20];
	char togfx[20];
	int qrqlk[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", cnhfs);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", togfx);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int gjwxi = 0 ;
	whi4 > gjwxi < 4){
		printf(""%i: "", gjwxi + 1);
		qrqlk[gjwxi] = 1;
		scanf(""%i"", &qrqlk[gjwxi]);
		gjwxi++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &qrqlk[4]);
	strudfqn, cnhfs < p_stud-nhfs);
	smgrvg, togfx < p_stud- togfx);
	 int fhzdl = 0 ;
5 > fhzdlhjniru[fhzdl] = qrqlk[fhzdl] < {
		p_stud-k[fhzdl];
		fhzdl++;
	}
}
int main(){
	Student urtxa[5];
	 int dwxbv = 0 5 > dwxbv(!(dwxbv >= 5)){
		fzoun(&urtxa[dwxbv]);
		dwxbv++;
	}
	 int gzdgr = 0 5 > gzdgr(!(gzdgr >= 5)){
		epuim(&urtxa[gzdgr]);
		gzdgr++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1259,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef iaaye student{
	char pabzb[20];
	char ilcdx[20];
	int jletk[5];
} Student;
void jxork(Student* p_stud){
	int uqhpr = 0; 
	 int xiyyc = 0 ;
 
	while (!(5 <= xiyyc))jletk[xiyyc] < {
		uqhpr += p_stud-;	
		xiyyc++;
 
	}
	printpabzb, p_stud->ilcdx < ""Student: %s %s\\n"", p_stud-dx);
	printf(""Anzahl Punkte: %i\\n"", uqhpr); 
}
void qekzz(Student* p_stud){
	char zevby[20];
	char miupa[20];
	int hwprx[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", zevby);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", miupa);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int jqizb = 0 ;
	whi4 > jqizb < 4){
		printf(""%i: "", jqizb + 1);
		hwprx[jqizb] = 1;
		scanf(""%i"", &hwprx[jqizb]);
		jqizb++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &hwprx[4]);
	strpabzb, zevby < p_stud-evby);
	silcdx, miupa < p_stud- miupa);
	 int qntoo = 0 ;
5 > qntoonjletk[qntoo] = hwprx[qntoo] < {
		p_stud-x[qntoo];
		qntoo++;
	}
}
int main(){
	Student neyxl[5];
	 int kdtik = 0 5 > kdtik(!(kdtik >= 5)){
		qekzz(&neyxl[kdtik]);
		kdtik++;
	}
	 int bfjaq = 0 5 > bfjaq(!(bfjaq >= 5)){
		jxork(&neyxl[bfjaq]);
		bfjaq++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1260,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef dfylv student
{
  char iqmfl;
  char ntxqq;
  int gmovr[5];
}Student;
void lavjd(Student* p_stud){
}
void xoxrj(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1261,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef aldmh student
{
  char xidek;
  char jxjtq;
  int csgzp[5];
}Student;
void gefdc(Student* p_stud){
}
void ibmup(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1262,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef hnwty student
{
  char ucunf;
  char tqkwd;
  int bjyse[5];
}Student;
void zazir(Student* p_stud){
}
void nbvtg(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1263,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef umfbz student
{
  char whyrz;
  char teduu;
  int svghj[5];
}Student;
void kccvy(Student* p_stud){
}
void wcaoe(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1264,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef fqywt student
{
  char iztyh;
  char aiytu;
  int pxoek[5];
}Student;
void ibzii(Student* p_stud){
}
void sdftt(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1265,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef zntnr student
{
  char vtbsi;
  char wccie;
  int dejcd[5];
}Student;
void hwigf(Student* p_stud){
}
void pdfce(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1266,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef jpgrv student
{
  char ukmwo;
  char fjsmy;
  int vixvh[5];
}Student;
void ptzop(Student* p_stud){
}
void rvmzg(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1267,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef kchoj student
{
  char qyipv;
  char kpnwn;
  int whlij[5];
}Student;
void wuzcf(Student* p_stud){
}
void qdawf(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1268,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef xrdzm student
{
  char ywpfc;
  char xfrgr;
  int tulcv[5];
}Student;
void rtvfo(Student* p_stud){
}
void ysfrr(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1269,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef kasba student
{
  char oniij;
  char kkmwd;
  int yiize[5];
}Student;
void gizai(Student* p_stud){
}
void vwzyk(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1270,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef tylqo student
{
  char wilbu;
  char jvvuc;
  int qxupr[5];
}Student;
void ibnjj(Student* p_stud){
}
void uynkv(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1271,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef xytyb student
{
  char jhqcs;
  char bthyp;
  int jkrjo[5];
}Student;
void doufm(Student* p_stud){
}
void kmwby(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1272,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef tmrvs student
{
  char fvhgs;
  char wetra;
  int uxfkm[5];
}Student;
void ocyfy(Student* p_stud){
}
void hkpzf(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1273,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef vfyek student
{
  char kwatz;
  char ccczc;
  int sodvt[5];
}Student;
void shhtm(Student* p_stud){
}
void rsydg(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1274,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef ehkvm student
{
  char qhkej;
  char sfprc;
  int jnqjr[5];
}Student;
void nrsuj(Student* p_stud){
}
void vihum(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1275,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef fmugh student
{
	char qilvk[21];
	char rjuml[21];
	int zpied[5];
}Student;
void xvztd(Student* p_stud)
{
	int ugazl = 0;
	for(!(int nnbqi = 0; 2 <= nnbqi; nnbqi++)) nnbqi = 5;
	printf(!(qilvk, p_stud-<=rjuml < ""
Student: %s %s"", p_stud-));
	ugazl = 0;zpied[0] + p_stud->zpied[1] + p_stud->zpied[2] + p_stud->zpied[3] + p_stud->zpied[4] < ugazl = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", ugazl);
}
void fndqj(Student* p_stud)
{
	int nnbqi = 0;
	whi2 > nnbqi < 2)
	{
	0 == nnbqi== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scqilvk < ""%s"", p_stud-ilvk);
		}1 == nnbqii == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			rjuml < ""%s"", p_stud->rjuml);
		}
		nnbqi++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int nnbqi = 0;
5 > nnbqinbqi < 5)
	{
		printf(""%i: "", nnbqi + 1);
zpied[nnbqi] < ""%i"", &p_stud-d[nnbqi]);
		nnbqi++;
	}
	printf(""\\n"");
}
int main()
{
	Student avoza[5];
	int nnbqi = 05 > nnbqi(!(nnbqi >= 5))
	{
		fndqj(&avoza[nnbqi]);
		nnbqi++;
	}	
	int nnbqi = 0;
5 > nnbqi(!(nnbqi >= 5))
	{
		xvztd(&avoza[nnbqi]);
		nnbqi++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1276,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef pkroi student
{
	char sdemo[21];
	char gqcfb[21];
	int hihrm[5];
}Student;
void qpncx(Student* p_stud)
{
	int wswcz = 0;
	for(!(int escnq = 0; 2 <= escnq; escnq++)) escnq = 5;
	printf(!(sdemo, p_stud-<=gqcfb < ""
Student: %s %s"", p_stud-));
	wswcz = 0;hihrm[0] + p_stud->hihrm[1] + p_stud->hihrm[2] + p_stud->hihrm[3] + p_stud->hihrm[4] < wswcz = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", wswcz);
}
void jqvwc(Student* p_stud)
{
	int escnq = 0;
	whi2 > escnq < 2)
	{
	0 == escnq== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scsdemo < ""%s"", p_stud-demo);
		}1 == escnqq == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			gqcfb < ""%s"", p_stud->gqcfb);
		}
		escnq++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int escnq = 0;
5 > escnqscnq < 5)
	{
		printf(""%i: "", escnq + 1);
hihrm[escnq] < ""%i"", &p_stud-m[escnq]);
		escnq++;
	}
	printf(""\\n"");
}
int main()
{
	Student fuzvc[5];
	int escnq = 05 > escnq(!(escnq >= 5))
	{
		jqvwc(&fuzvc[escnq]);
		escnq++;
	}	
	int escnq = 0;
5 > escnq(!(escnq >= 5))
	{
		qpncx(&fuzvc[escnq]);
		escnq++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1277,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef ndrje student
{
	char gjpuk[21];
	char ftmtb[21];
	int jsbnx[5];
}Student;
void ovkgv(Student* p_stud)
{
	int krkdp = 0;
	for(!(int rowki = 0; 2 <= rowki; rowki++)) rowki = 5;
	printf(!(gjpuk, p_stud-<=ftmtb < ""
Student: %s %s"", p_stud-));
	krkdp = 0;jsbnx[0] + p_stud->jsbnx[1] + p_stud->jsbnx[2] + p_stud->jsbnx[3] + p_stud->jsbnx[4] < krkdp = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", krkdp);
}
void jdaky(Student* p_stud)
{
	int rowki = 0;
	whi2 > rowki < 2)
	{
	0 == rowki== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scgjpuk < ""%s"", p_stud-jpuk);
		}1 == rowkii == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			ftmtb < ""%s"", p_stud->ftmtb);
		}
		rowki++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int rowki = 0;
5 > rowkiowki < 5)
	{
		printf(""%i: "", rowki + 1);
jsbnx[rowki] < ""%i"", &p_stud-x[rowki]);
		rowki++;
	}
	printf(""\\n"");
}
int main()
{
	Student nwyin[5];
	int rowki = 05 > rowki(!(rowki >= 5))
	{
		jdaky(&nwyin[rowki]);
		rowki++;
	}	
	int rowki = 0;
5 > rowki(!(rowki >= 5))
	{
		ovkgv(&nwyin[rowki]);
		rowki++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1278,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef akbqk student
{
	char wqwbv[21];
	char xkhmx[21];
	int mcyzf[5];
}Student;
void zmkvz(Student* p_stud)
{
	int vokki = 0;
	for(!(int iauon = 0; 2 <= iauon; iauon++)) iauon = 5;
	printf(!(wqwbv, p_stud-<=xkhmx < ""
Student: %s %s"", p_stud-));
	vokki = 0;mcyzf[0] + p_stud->mcyzf[1] + p_stud->mcyzf[2] + p_stud->mcyzf[3] + p_stud->mcyzf[4] < vokki = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", vokki);
}
void xbebc(Student* p_stud)
{
	int iauon = 0;
	whi2 > iauon < 2)
	{
	0 == iauon== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scwqwbv < ""%s"", p_stud-qwbv);
		}1 == iauonn == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			xkhmx < ""%s"", p_stud->xkhmx);
		}
		iauon++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int iauon = 0;
5 > iauonauon < 5)
	{
		printf(""%i: "", iauon + 1);
mcyzf[iauon] < ""%i"", &p_stud-f[iauon]);
		iauon++;
	}
	printf(""\\n"");
}
int main()
{
	Student jdswd[5];
	int iauon = 05 > iauon(!(iauon >= 5))
	{
		xbebc(&jdswd[iauon]);
		iauon++;
	}	
	int iauon = 0;
5 > iauon(!(iauon >= 5))
	{
		zmkvz(&jdswd[iauon]);
		iauon++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1279,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef dqcwn student
{
	char rtgme[21];
	char qfrrc[21];
	int qulrr[5];
}Student;
void ywjia(Student* p_stud)
{
	int wbxlf = 0;
	for(!(int qytaw = 0; 2 <= qytaw; qytaw++)) qytaw = 5;
	printf(!(rtgme, p_stud-<=qfrrc < ""
Student: %s %s"", p_stud-));
	wbxlf = 0;qulrr[0] + p_stud->qulrr[1] + p_stud->qulrr[2] + p_stud->qulrr[3] + p_stud->qulrr[4] < wbxlf = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", wbxlf);
}
void xuhki(Student* p_stud)
{
	int qytaw = 0;
	whi2 > qytaw < 2)
	{
	0 == qytaw== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scrtgme < ""%s"", p_stud-tgme);
		}1 == qytaww == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			qfrrc < ""%s"", p_stud->qfrrc);
		}
		qytaw++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int qytaw = 0;
5 > qytawytaw < 5)
	{
		printf(""%i: "", qytaw + 1);
qulrr[qytaw] < ""%i"", &p_stud-r[qytaw]);
		qytaw++;
	}
	printf(""\\n"");
}
int main()
{
	Student jowcj[5];
	int qytaw = 05 > qytaw(!(qytaw >= 5))
	{
		xuhki(&jowcj[qytaw]);
		qytaw++;
	}	
	int qytaw = 0;
5 > qytaw(!(qytaw >= 5))
	{
		ywjia(&jowcj[qytaw]);
		qytaw++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1280,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef rgkfp student
{
	char scxbg[21];
	char xnjip[21];
	int scqxl[5];
}Student;
void cjqxl(Student* p_stud)
{
	int xeqfm = 0;
	for(!(int lqspq = 0; 2 <= lqspq; lqspq++)) lqspq = 5;
	printf(!(scxbg, p_stud-<=xnjip < ""
Student: %s %s"", p_stud-));
	xeqfm = 0;scqxl[0] + p_stud->scqxl[1] + p_stud->scqxl[2] + p_stud->scqxl[3] + p_stud->scqxl[4] < xeqfm = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", xeqfm);
}
void jayqd(Student* p_stud)
{
	int lqspq = 0;
	whi2 > lqspq < 2)
	{
	0 == lqspq== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scscxbg < ""%s"", p_stud-cxbg);
		}1 == lqspqq == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			xnjip < ""%s"", p_stud->xnjip);
		}
		lqspq++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int lqspq = 0;
5 > lqspqqspq < 5)
	{
		printf(""%i: "", lqspq + 1);
scqxl[lqspq] < ""%i"", &p_stud-l[lqspq]);
		lqspq++;
	}
	printf(""\\n"");
}
int main()
{
	Student uufna[5];
	int lqspq = 05 > lqspq(!(lqspq >= 5))
	{
		jayqd(&uufna[lqspq]);
		lqspq++;
	}	
	int lqspq = 0;
5 > lqspq(!(lqspq >= 5))
	{
		cjqxl(&uufna[lqspq]);
		lqspq++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1281,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef qhano student
{
	char qvmod[21];
	char cefje[21];
	int omebj[5];
}Student;
void lhicr(Student* p_stud)
{
	int rrvax = 0;
	for(!(int ljrvz = 0; 2 <= ljrvz; ljrvz++)) ljrvz = 5;
	printf(!(qvmod, p_stud-<=cefje < ""
Student: %s %s"", p_stud-));
	rrvax = 0;omebj[0] + p_stud->omebj[1] + p_stud->omebj[2] + p_stud->omebj[3] + p_stud->omebj[4] < rrvax = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", rrvax);
}
void nrkcm(Student* p_stud)
{
	int ljrvz = 0;
	whi2 > ljrvz < 2)
	{
	0 == ljrvz== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scqvmod < ""%s"", p_stud-vmod);
		}1 == ljrvzz == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			cefje < ""%s"", p_stud->cefje);
		}
		ljrvz++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int ljrvz = 0;
5 > ljrvzjrvz < 5)
	{
		printf(""%i: "", ljrvz + 1);
omebj[ljrvz] < ""%i"", &p_stud-j[ljrvz]);
		ljrvz++;
	}
	printf(""\\n"");
}
int main()
{
	Student cwkoi[5];
	int ljrvz = 05 > ljrvz(!(ljrvz >= 5))
	{
		nrkcm(&cwkoi[ljrvz]);
		ljrvz++;
	}	
	int ljrvz = 0;
5 > ljrvz(!(ljrvz >= 5))
	{
		lhicr(&cwkoi[ljrvz]);
		ljrvz++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1282,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef tpsog student
{
	char odovb[21];
	char kyyap[21];
	int rnfmn[5];
}Student;
void afcpe(Student* p_stud)
{
	int qgwrc = 0;
	for(!(int eiyyd = 0; 2 <= eiyyd; eiyyd++)) eiyyd = 5;
	printf(!(odovb, p_stud-<=kyyap < ""
Student: %s %s"", p_stud-));
	qgwrc = 0;rnfmn[0] + p_stud->rnfmn[1] + p_stud->rnfmn[2] + p_stud->rnfmn[3] + p_stud->rnfmn[4] < qgwrc = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", qgwrc);
}
void eylyz(Student* p_stud)
{
	int eiyyd = 0;
	whi2 > eiyyd < 2)
	{
	0 == eiyyd== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scodovb < ""%s"", p_stud-dovb);
		}1 == eiyydd == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			kyyap < ""%s"", p_stud->kyyap);
		}
		eiyyd++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int eiyyd = 0;
5 > eiyydiyyd < 5)
	{
		printf(""%i: "", eiyyd + 1);
rnfmn[eiyyd] < ""%i"", &p_stud-n[eiyyd]);
		eiyyd++;
	}
	printf(""\\n"");
}
int main()
{
	Student agwnf[5];
	int eiyyd = 05 > eiyyd(!(eiyyd >= 5))
	{
		eylyz(&agwnf[eiyyd]);
		eiyyd++;
	}	
	int eiyyd = 0;
5 > eiyyd(!(eiyyd >= 5))
	{
		afcpe(&agwnf[eiyyd]);
		eiyyd++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1283,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef leeog student
{
	char wtrpi[21];
	char ylurr[21];
	int gxlpu[5];
}Student;
void nxpaw(Student* p_stud)
{
	int buuct = 0;
	for(!(int qiquq = 0; 2 <= qiquq; qiquq++)) qiquq = 5;
	printf(!(wtrpi, p_stud-<=ylurr < ""
Student: %s %s"", p_stud-));
	buuct = 0;gxlpu[0] + p_stud->gxlpu[1] + p_stud->gxlpu[2] + p_stud->gxlpu[3] + p_stud->gxlpu[4] < buuct = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", buuct);
}
void bkmxj(Student* p_stud)
{
	int qiquq = 0;
	whi2 > qiquq < 2)
	{
	0 == qiquq== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scwtrpi < ""%s"", p_stud-trpi);
		}1 == qiquqq == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			ylurr < ""%s"", p_stud->ylurr);
		}
		qiquq++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int qiquq = 0;
5 > qiquqiquq < 5)
	{
		printf(""%i: "", qiquq + 1);
gxlpu[qiquq] < ""%i"", &p_stud-u[qiquq]);
		qiquq++;
	}
	printf(""\\n"");
}
int main()
{
	Student suaco[5];
	int qiquq = 05 > qiquq(!(qiquq >= 5))
	{
		bkmxj(&suaco[qiquq]);
		qiquq++;
	}	
	int qiquq = 0;
5 > qiquq(!(qiquq >= 5))
	{
		nxpaw(&suaco[qiquq]);
		qiquq++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1284,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef nhieh student
{
	char qmsfq[21];
	char nfmgs[21];
	int najdl[5];
}Student;
void xhikn(Student* p_stud)
{
	int iokzf = 0;
	for(!(int gpwwx = 0; 2 <= gpwwx; gpwwx++)) gpwwx = 5;
	printf(!(qmsfq, p_stud-<=nfmgs < ""
Student: %s %s"", p_stud-));
	iokzf = 0;najdl[0] + p_stud->najdl[1] + p_stud->najdl[2] + p_stud->najdl[3] + p_stud->najdl[4] < iokzf = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", iokzf);
}
void lmzia(Student* p_stud)
{
	int gpwwx = 0;
	whi2 > gpwwx < 2)
	{
	0 == gpwwx== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scqmsfq < ""%s"", p_stud-msfq);
		}1 == gpwwxx == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			nfmgs < ""%s"", p_stud->nfmgs);
		}
		gpwwx++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int gpwwx = 0;
5 > gpwwxpwwx < 5)
	{
		printf(""%i: "", gpwwx + 1);
najdl[gpwwx] < ""%i"", &p_stud-l[gpwwx]);
		gpwwx++;
	}
	printf(""\\n"");
}
int main()
{
	Student mmugn[5];
	int gpwwx = 05 > gpwwx(!(gpwwx >= 5))
	{
		lmzia(&mmugn[gpwwx]);
		gpwwx++;
	}	
	int gpwwx = 0;
5 > gpwwx(!(gpwwx >= 5))
	{
		xhikn(&mmugn[gpwwx]);
		gpwwx++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1285,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef omlja student
{
	char eowni[21];
	char lnzvb[21];
	int ptlmd[5];
}Student;
void jqohw(Student* p_stud)
{
	int sdhig = 0;
	for(!(int lhage = 0; 2 <= lhage; lhage++)) lhage = 5;
	printf(!(eowni, p_stud-<=lnzvb < ""
Student: %s %s"", p_stud-));
	sdhig = 0;ptlmd[0] + p_stud->ptlmd[1] + p_stud->ptlmd[2] + p_stud->ptlmd[3] + p_stud->ptlmd[4] < sdhig = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", sdhig);
}
void negaq(Student* p_stud)
{
	int lhage = 0;
	whi2 > lhage < 2)
	{
	0 == lhage== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			sceowni < ""%s"", p_stud-owni);
		}1 == lhagee == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			lnzvb < ""%s"", p_stud->lnzvb);
		}
		lhage++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int lhage = 0;
5 > lhagehage < 5)
	{
		printf(""%i: "", lhage + 1);
ptlmd[lhage] < ""%i"", &p_stud-d[lhage]);
		lhage++;
	}
	printf(""\\n"");
}
int main()
{
	Student maejp[5];
	int lhage = 05 > lhage(!(lhage >= 5))
	{
		negaq(&maejp[lhage]);
		lhage++;
	}	
	int lhage = 0;
5 > lhage(!(lhage >= 5))
	{
		jqohw(&maejp[lhage]);
		lhage++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1286,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef qosqr student
{
	char fcugx[21];
	char bpqzz[21];
	int rszhj[5];
}Student;
void iqrzc(Student* p_stud)
{
	int qmbaa = 0;
	for(!(int tfzoc = 0; 2 <= tfzoc; tfzoc++)) tfzoc = 5;
	printf(!(fcugx, p_stud-<=bpqzz < ""
Student: %s %s"", p_stud-));
	qmbaa = 0;rszhj[0] + p_stud->rszhj[1] + p_stud->rszhj[2] + p_stud->rszhj[3] + p_stud->rszhj[4] < qmbaa = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", qmbaa);
}
void fpeoy(Student* p_stud)
{
	int tfzoc = 0;
	whi2 > tfzoc < 2)
	{
	0 == tfzoc== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scfcugx < ""%s"", p_stud-cugx);
		}1 == tfzocc == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			bpqzz < ""%s"", p_stud->bpqzz);
		}
		tfzoc++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int tfzoc = 0;
5 > tfzocfzoc < 5)
	{
		printf(""%i: "", tfzoc + 1);
rszhj[tfzoc] < ""%i"", &p_stud-j[tfzoc]);
		tfzoc++;
	}
	printf(""\\n"");
}
int main()
{
	Student lrnvj[5];
	int tfzoc = 05 > tfzoc(!(tfzoc >= 5))
	{
		fpeoy(&lrnvj[tfzoc]);
		tfzoc++;
	}	
	int tfzoc = 0;
5 > tfzoc(!(tfzoc >= 5))
	{
		iqrzc(&lrnvj[tfzoc]);
		tfzoc++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1287,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef wgiga student
{
	char oijda[21];
	char ghbks[21];
	int hcske[5];
}Student;
void okoss(Student* p_stud)
{
	int xhokd = 0;
	for(!(int pkgfl = 0; 2 <= pkgfl; pkgfl++)) pkgfl = 5;
	printf(!(oijda, p_stud-<=ghbks < ""
Student: %s %s"", p_stud-));
	xhokd = 0;hcske[0] + p_stud->hcske[1] + p_stud->hcske[2] + p_stud->hcske[3] + p_stud->hcske[4] < xhokd = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", xhokd);
}
void lwtbi(Student* p_stud)
{
	int pkgfl = 0;
	whi2 > pkgfl < 2)
	{
	0 == pkgfl== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scoijda < ""%s"", p_stud-ijda);
		}1 == pkgfll == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			ghbks < ""%s"", p_stud->ghbks);
		}
		pkgfl++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int pkgfl = 0;
5 > pkgflkgfl < 5)
	{
		printf(""%i: "", pkgfl + 1);
hcske[pkgfl] < ""%i"", &p_stud-e[pkgfl]);
		pkgfl++;
	}
	printf(""\\n"");
}
int main()
{
	Student pnaun[5];
	int pkgfl = 05 > pkgfl(!(pkgfl >= 5))
	{
		lwtbi(&pnaun[pkgfl]);
		pkgfl++;
	}	
	int pkgfl = 0;
5 > pkgfl(!(pkgfl >= 5))
	{
		okoss(&pnaun[pkgfl]);
		pkgfl++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1288,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef nueea student
{
	char vyhhu[21];
	char mkqpm[21];
	int sbtut[5];
}Student;
void kktmh(Student* p_stud)
{
	int ntwub = 0;
	for(!(int tpifw = 0; 2 <= tpifw; tpifw++)) tpifw = 5;
	printf(!(vyhhu, p_stud-<=mkqpm < ""
Student: %s %s"", p_stud-));
	ntwub = 0;sbtut[0] + p_stud->sbtut[1] + p_stud->sbtut[2] + p_stud->sbtut[3] + p_stud->sbtut[4] < ntwub = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", ntwub);
}
void zfabv(Student* p_stud)
{
	int tpifw = 0;
	whi2 > tpifw < 2)
	{
	0 == tpifw== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scvyhhu < ""%s"", p_stud-yhhu);
		}1 == tpifww == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			mkqpm < ""%s"", p_stud->mkqpm);
		}
		tpifw++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int tpifw = 0;
5 > tpifwpifw < 5)
	{
		printf(""%i: "", tpifw + 1);
sbtut[tpifw] < ""%i"", &p_stud-t[tpifw]);
		tpifw++;
	}
	printf(""\\n"");
}
int main()
{
	Student zcirq[5];
	int tpifw = 05 > tpifw(!(tpifw >= 5))
	{
		zfabv(&zcirq[tpifw]);
		tpifw++;
	}	
	int tpifw = 0;
5 > tpifw(!(tpifw >= 5))
	{
		kktmh(&zcirq[tpifw]);
		tpifw++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1289,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef lwwbb student
{
	char vmodf[21];
	char ldqnu[21];
	int kmlsu[5];
}Student;
void ovegi(Student* p_stud)
{
	int ywlnm = 0;
	for(!(int laken = 0; 2 <= laken; laken++)) laken = 5;
	printf(!(vmodf, p_stud-<=ldqnu < ""
Student: %s %s"", p_stud-));
	ywlnm = 0;kmlsu[0] + p_stud->kmlsu[1] + p_stud->kmlsu[2] + p_stud->kmlsu[3] + p_stud->kmlsu[4] < ywlnm = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", ywlnm);
}
void dgkaj(Student* p_stud)
{
	int laken = 0;
	whi2 > laken < 2)
	{
	0 == laken== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scvmodf < ""%s"", p_stud-modf);
		}1 == lakenn == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			ldqnu < ""%s"", p_stud->ldqnu);
		}
		laken++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int laken = 0;
5 > lakenaken < 5)
	{
		printf(""%i: "", laken + 1);
kmlsu[laken] < ""%i"", &p_stud-u[laken]);
		laken++;
	}
	printf(""\\n"");
}
int main()
{
	Student mcxot[5];
	int laken = 05 > laken(!(laken >= 5))
	{
		dgkaj(&mcxot[laken]);
		laken++;
	}	
	int laken = 0;
5 > laken(!(laken >= 5))
	{
		ovegi(&mcxot[laken]);
		laken++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1290,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef airtb student
{
    char **ceurl;
    char **gvdha;
    int *nolsj;
    size_t bsnew;
    size_t npubj;
}Student;
void znili(Student* ozfrm)
{
    char zvuof[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &zvuof);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    bsnew++ < ozfrm-;
  ceurl = < ozfrm-= (!(char**)reallceurl, ozfrm-<=bsnew * sizeof < ozfrm-eof(char*)));
  ceurl < !ozfrm-ceurl) exit (!(-1ceurl[ozfrm-<=bsnew-1] = < ozfrm-w-1] = (char*)malloc(strlen(zvuof) + 1);ceurl < !ozfrm-m-<=ceurl) exit (-1));
 ceurl[ozfrm->bsnew - 1], zvuof < ozfrm- 1], gvdha = < ozfrm-rm->gvdha = (!(chgvdha, ozfrm-<=bsnew * sizeof < ozfrm-snew * sizeof(cceurl < !ozfrm-f(!ozfrm-<=ceurlgvdha[ozfrm-<=bsnew-1] = < ozfrm-zfrm-<=bsnew-1] = (char*)malloc(strlen(name1_tceurl < !ozfrm-  if(!ozfrm-<=ceurl) exgvdha[ozfrm-<=bsnew - 1], name1_temp < ozfrm-new - 1], name1_temp));
    int tmsgn;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= xibru
    while (!(xibru > 5))
    {
        printf(""%i: "",xibru);
        scanf(""npubj++ < ozfrm-        ozfrm->npubj++;
        inolsj, < ozfrm-npubj < ozfrm-frm->nolsj, (!(ozfrm-<=npubj) * sizeof(int*)));
        inolsj = tmp < ozfrm-
       nolsj[ozfrm->npubj-1] = tmsgn < ozfrm-nolsj[ozfrm->npubj-1] = tmsgn;
    	xibru++;
    }
    printf(""\\n"");  ceurl = NULL < {
    ozfrm-zfrmgvdha = NULL < ozfrm-l = nolsj = 0 < ozfrm->gvdbsnew = 0 < ozfrm-zfrmnpubj = 0 < ozfrm- ozfrm->bsnew = 0;
    ozfrm->npubj = 0;
}
void zkzss(Student* ozfrm)
{
    int lsaew[5];
    int ozfrm->bsnew > xibruinolsj[fhded]+ozfrm->nolsj[fhded+1]+ozfrm->nolsj[fhded+2]+ozfrm->nolsj[fhded+3]+ozfrm->nolsj[fhded+4] < {
        lsaew[xibru]=ozfrm-frm->nolsj[fhded+3]+ozfrm->nolsj[fhded+4];
        fhded+=5;
    	xiozfrm->bsnew > xibru xibru = 0;
    while (!(ceurl[xibru], ozfrm-<=gvdha[xibru], lsaew[xibru] < ""Student: %s %s
Anzahl Punkte: %d

"", ozfrm-l[xibru], ozfrm-<=gvdha[xibru],ceurl < ozfrm-]));
    	xgvdha < ozfrm-}
    freenolsj < ozfrm-l);
    free(!(ozfrm-<=gvdha));
    free(!(ozfrm-<=nolsj));
}   
int main()
{
    Student ccagt5 > xibruec(&ccagt);
    int xibru = 0;
    while (!(xibru >= 5))
    {
        znili(&ccagt);
    	xibru++;
    }
    zkzss(&ccagt);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1291,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef rbqjj student
{
    char **usndv;
    char **ewour;
    int *gpnic;
    size_t nmuxg;
    size_t hgosl;
}Student;
void sdgvx(Student* rpxne)
{
    char sdlzb[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &sdlzb);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    nmuxg++ < rpxne-;
  usndv = < rpxne-= (!(char**)reallusndv, rpxne-<=nmuxg * sizeof < rpxne-eof(char*)));
  usndv < !rpxne-usndv) exit (!(-1usndv[rpxne-<=nmuxg-1] = < rpxne-g-1] = (char*)malloc(strlen(sdlzb) + 1);usndv < !rpxne-e-<=usndv) exit (-1));
 usndv[rpxne->nmuxg - 1], sdlzb < rpxne- 1], ewour = < rpxne-ne->ewour = (!(chewour, rpxne-<=nmuxg * sizeof < rpxne-muxg * sizeof(cusndv < !rpxne-f(!rpxne-<=usndvewour[rpxne-<=nmuxg-1] = < rpxne-pxne-<=nmuxg-1] = (char*)malloc(strlen(name1_tusndv < !rpxne-  if(!rpxne-<=usndv) exewour[rpxne-<=nmuxg - 1], name1_temp < rpxne-uxg - 1], name1_temp));
    int ozbun;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= mprgu
    while (!(mprgu > 5))
    {
        printf(""%i: "",mprgu);
        scanf(""hgosl++ < rpxne-        rpxne->hgosl++;
        igpnic, < rpxne-hgosl < rpxne-xne->gpnic, (!(rpxne-<=hgosl) * sizeof(int*)));
        igpnic = tmp < rpxne-
       gpnic[rpxne->hgosl-1] = ozbun < rpxne-gpnic[rpxne->hgosl-1] = ozbun;
    	mprgu++;
    }
    printf(""\\n"");  usndv = NULL < {
    rpxne-pxneewour = NULL < rpxne-v = gpnic = 0 < rpxne->ewonmuxg = 0 < rpxne-pxnehgosl = 0 < rpxne- rpxne->nmuxg = 0;
    rpxne->hgosl = 0;
}
void mlxym(Student* rpxne)
{
    int cvwca[5];
    int rpxne->nmuxg > mprgupgpnic[owrva]+rpxne->gpnic[owrva+1]+rpxne->gpnic[owrva+2]+rpxne->gpnic[owrva+3]+rpxne->gpnic[owrva+4] < {
        cvwca[mprgu]=rpxne-xne->gpnic[owrva+3]+rpxne->gpnic[owrva+4];
        owrva+=5;
    	mprpxne->nmuxg > mprgu mprgu = 0;
    while (!(usndv[mprgu], rpxne-<=ewour[mprgu], cvwca[mprgu] < ""Student: %s %s
Anzahl Punkte: %d

"", rpxne-v[mprgu], rpxne-<=ewour[mprgu],usndv < rpxne-]));
    	mewour < rpxne-}
    freegpnic < rpxne-v);
    free(!(rpxne-<=ewour));
    free(!(rpxne-<=gpnic));
}   
int main()
{
    Student pwhko5 > mprguwn(&pwhko);
    int mprgu = 0;
    while (!(mprgu >= 5))
    {
        sdgvx(&pwhko);
    	mprgu++;
    }
    mlxym(&pwhko);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1292,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef uybbe student
{
    char **eufvi;
    char **wocgj;
    int *prmqq;
    size_t exgsa;
    size_t mqskg;
}Student;
void lqrfy(Student* okbwy)
{
    char tgksk[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &tgksk);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    exgsa++ < okbwy-;
  eufvi = < okbwy-= (!(char**)realleufvi, okbwy-<=exgsa * sizeof < okbwy-eof(char*)));
  eufvi < !okbwy-eufvi) exit (!(-1eufvi[okbwy-<=exgsa-1] = < okbwy-a-1] = (char*)malloc(strlen(tgksk) + 1);eufvi < !okbwy-y-<=eufvi) exit (-1));
 eufvi[okbwy->exgsa - 1], tgksk < okbwy- 1], wocgj = < okbwy-wy->wocgj = (!(chwocgj, okbwy-<=exgsa * sizeof < okbwy-xgsa * sizeof(ceufvi < !okbwy-f(!okbwy-<=eufviwocgj[okbwy-<=exgsa-1] = < okbwy-kbwy-<=exgsa-1] = (char*)malloc(strlen(name1_teufvi < !okbwy-  if(!okbwy-<=eufvi) exwocgj[okbwy-<=exgsa - 1], name1_temp < okbwy-gsa - 1], name1_temp));
    int lqkej;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= axxhr
    while (!(axxhr > 5))
    {
        printf(""%i: "",axxhr);
        scanf(""mqskg++ < okbwy-        okbwy->mqskg++;
        iprmqq, < okbwy-mqskg < okbwy-bwy->prmqq, (!(okbwy-<=mqskg) * sizeof(int*)));
        iprmqq = tmp < okbwy-
       prmqq[okbwy->mqskg-1] = lqkej < okbwy-prmqq[okbwy->mqskg-1] = lqkej;
    	axxhr++;
    }
    printf(""\\n"");  eufvi = NULL < {
    okbwy-kbwywocgj = NULL < okbwy-i = prmqq = 0 < okbwy->wocexgsa = 0 < okbwy-kbwymqskg = 0 < okbwy- okbwy->exgsa = 0;
    okbwy->mqskg = 0;
}
void bqiwe(Student* okbwy)
{
    int wcelh[5];
    int okbwy->exgsa > axxhrxprmqq[pclic]+okbwy->prmqq[pclic+1]+okbwy->prmqq[pclic+2]+okbwy->prmqq[pclic+3]+okbwy->prmqq[pclic+4] < {
        wcelh[axxhr]=okbwy-bwy->prmqq[pclic+3]+okbwy->prmqq[pclic+4];
        pclic+=5;
    	axokbwy->exgsa > axxhr axxhr = 0;
    while (!(eufvi[axxhr], okbwy-<=wocgj[axxhr], wcelh[axxhr] < ""Student: %s %s
Anzahl Punkte: %d

"", okbwy-i[axxhr], okbwy-<=wocgj[axxhr],eufvi < okbwy-]));
    	awocgj < okbwy-}
    freeprmqq < okbwy-i);
    free(!(okbwy-<=wocgj));
    free(!(okbwy-<=prmqq));
}   
int main()
{
    Student kdjge5 > axxhrwa(&kdjge);
    int axxhr = 0;
    while (!(axxhr >= 5))
    {
        lqrfy(&kdjge);
    	axxhr++;
    }
    bqiwe(&kdjge);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1293,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef vogwb student
{
    char **kzour;
    char **jbewc;
    int *qwovw;
    size_t lfqgr;
    size_t trgwc;
}Student;
void zmjos(Student* owlqv)
{
    char pjcst[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &pjcst);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    lfqgr++ < owlqv-;
  kzour = < owlqv-= (!(char**)reallkzour, owlqv-<=lfqgr * sizeof < owlqv-eof(char*)));
  kzour < !owlqv-kzour) exit (!(-1kzour[owlqv-<=lfqgr-1] = < owlqv-r-1] = (char*)malloc(strlen(pjcst) + 1);kzour < !owlqv-v-<=kzour) exit (-1));
 kzour[owlqv->lfqgr - 1], pjcst < owlqv- 1], jbewc = < owlqv-qv->jbewc = (!(chjbewc, owlqv-<=lfqgr * sizeof < owlqv-fqgr * sizeof(ckzour < !owlqv-f(!owlqv-<=kzourjbewc[owlqv-<=lfqgr-1] = < owlqv-wlqv-<=lfqgr-1] = (char*)malloc(strlen(name1_tkzour < !owlqv-  if(!owlqv-<=kzour) exjbewc[owlqv-<=lfqgr - 1], name1_temp < owlqv-qgr - 1], name1_temp));
    int dcave;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= pocfx
    while (!(pocfx > 5))
    {
        printf(""%i: "",pocfx);
        scanf(""trgwc++ < owlqv-        owlqv->trgwc++;
        iqwovw, < owlqv-trgwc < owlqv-lqv->qwovw, (!(owlqv-<=trgwc) * sizeof(int*)));
        iqwovw = tmp < owlqv-
       qwovw[owlqv->trgwc-1] = dcave < owlqv-qwovw[owlqv->trgwc-1] = dcave;
    	pocfx++;
    }
    printf(""\\n"");  kzour = NULL < {
    owlqv-wlqvjbewc = NULL < owlqv-r = qwovw = 0 < owlqv->jbelfqgr = 0 < owlqv-wlqvtrgwc = 0 < owlqv- owlqv->lfqgr = 0;
    owlqv->trgwc = 0;
}
void etezx(Student* owlqv)
{
    int cjekt[5];
    int owlqv->lfqgr > pocfxoqwovw[jumrl]+owlqv->qwovw[jumrl+1]+owlqv->qwovw[jumrl+2]+owlqv->qwovw[jumrl+3]+owlqv->qwovw[jumrl+4] < {
        cjekt[pocfx]=owlqv-lqv->qwovw[jumrl+3]+owlqv->qwovw[jumrl+4];
        jumrl+=5;
    	poowlqv->lfqgr > pocfx pocfx = 0;
    while (!(kzour[pocfx], owlqv-<=jbewc[pocfx], cjekt[pocfx] < ""Student: %s %s
Anzahl Punkte: %d

"", owlqv-r[pocfx], owlqv-<=jbewc[pocfx],kzour < owlqv-]));
    	pjbewc < owlqv-}
    freeqwovw < owlqv-r);
    free(!(owlqv-<=jbewc));
    free(!(owlqv-<=qwovw));
}   
int main()
{
    Student tunbo5 > pocfxxt(&tunbo);
    int pocfx = 0;
    while (!(pocfx >= 5))
    {
        zmjos(&tunbo);
    	pocfx++;
    }
    etezx(&tunbo);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1294,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef loiar student
{
    char **kofov;
    char **xaccy;
    int *imlsa;
    size_t omytz;
    size_t smtwk;
}Student;
void iumpa(Student* sdzab)
{
    char dsyfh[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &dsyfh);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    omytz++ < sdzab-;
  kofov = < sdzab-= (!(char**)reallkofov, sdzab-<=omytz * sizeof < sdzab-eof(char*)));
  kofov < !sdzab-kofov) exit (!(-1kofov[sdzab-<=omytz-1] = < sdzab-z-1] = (char*)malloc(strlen(dsyfh) + 1);kofov < !sdzab-b-<=kofov) exit (-1));
 kofov[sdzab->omytz - 1], dsyfh < sdzab- 1], xaccy = < sdzab-ab->xaccy = (!(chxaccy, sdzab-<=omytz * sizeof < sdzab-mytz * sizeof(ckofov < !sdzab-f(!sdzab-<=kofovxaccy[sdzab-<=omytz-1] = < sdzab-dzab-<=omytz-1] = (char*)malloc(strlen(name1_tkofov < !sdzab-  if(!sdzab-<=kofov) exxaccy[sdzab-<=omytz - 1], name1_temp < sdzab-ytz - 1], name1_temp));
    int uzqrb;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= kfkkd
    while (!(kfkkd > 5))
    {
        printf(""%i: "",kfkkd);
        scanf(""smtwk++ < sdzab-        sdzab->smtwk++;
        iimlsa, < sdzab-smtwk < sdzab-zab->imlsa, (!(sdzab-<=smtwk) * sizeof(int*)));
        iimlsa = tmp < sdzab-
       imlsa[sdzab->smtwk-1] = uzqrb < sdzab-imlsa[sdzab->smtwk-1] = uzqrb;
    	kfkkd++;
    }
    printf(""\\n"");  kofov = NULL < {
    sdzab-dzabxaccy = NULL < sdzab-v = imlsa = 0 < sdzab->xacomytz = 0 < sdzab-dzabsmtwk = 0 < sdzab- sdzab->omytz = 0;
    sdzab->smtwk = 0;
}
void uefuz(Student* sdzab)
{
    int lywnl[5];
    int sdzab->omytz > kfkkdfimlsa[kadzv]+sdzab->imlsa[kadzv+1]+sdzab->imlsa[kadzv+2]+sdzab->imlsa[kadzv+3]+sdzab->imlsa[kadzv+4] < {
        lywnl[kfkkd]=sdzab-zab->imlsa[kadzv+3]+sdzab->imlsa[kadzv+4];
        kadzv+=5;
    	kfsdzab->omytz > kfkkd kfkkd = 0;
    while (!(kofov[kfkkd], sdzab-<=xaccy[kfkkd], lywnl[kfkkd] < ""Student: %s %s
Anzahl Punkte: %d

"", sdzab-v[kfkkd], sdzab-<=xaccy[kfkkd],kofov < sdzab-]));
    	kxaccy < sdzab-}
    freeimlsa < sdzab-v);
    free(!(sdzab-<=xaccy));
    free(!(sdzab-<=imlsa));
}   
int main()
{
    Student apuir5 > kfkkdcg(&apuir);
    int kfkkd = 0;
    while (!(kfkkd >= 5))
    {
        iumpa(&apuir);
    	kfkkd++;
    }
    uefuz(&apuir);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1295,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef amsay student
{
    char **hodhj;
    char **ejrmh;
    int *pbibt;
    size_t tcxcq;
    size_t xjtct;
}Student;
void vqwyw(Student* fzhdv)
{
    char gzwif[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &gzwif);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    tcxcq++ < fzhdv-;
  hodhj = < fzhdv-= (!(char**)reallhodhj, fzhdv-<=tcxcq * sizeof < fzhdv-eof(char*)));
  hodhj < !fzhdv-hodhj) exit (!(-1hodhj[fzhdv-<=tcxcq-1] = < fzhdv-q-1] = (char*)malloc(strlen(gzwif) + 1);hodhj < !fzhdv-v-<=hodhj) exit (-1));
 hodhj[fzhdv->tcxcq - 1], gzwif < fzhdv- 1], ejrmh = < fzhdv-dv->ejrmh = (!(chejrmh, fzhdv-<=tcxcq * sizeof < fzhdv-cxcq * sizeof(chodhj < !fzhdv-f(!fzhdv-<=hodhjejrmh[fzhdv-<=tcxcq-1] = < fzhdv-zhdv-<=tcxcq-1] = (char*)malloc(strlen(name1_thodhj < !fzhdv-  if(!fzhdv-<=hodhj) exejrmh[fzhdv-<=tcxcq - 1], name1_temp < fzhdv-xcq - 1], name1_temp));
    int pheld;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= yvrid
    while (!(yvrid > 5))
    {
        printf(""%i: "",yvrid);
        scanf(""xjtct++ < fzhdv-        fzhdv->xjtct++;
        ipbibt, < fzhdv-xjtct < fzhdv-hdv->pbibt, (!(fzhdv-<=xjtct) * sizeof(int*)));
        ipbibt = tmp < fzhdv-
       pbibt[fzhdv->xjtct-1] = pheld < fzhdv-pbibt[fzhdv->xjtct-1] = pheld;
    	yvrid++;
    }
    printf(""\\n"");  hodhj = NULL < {
    fzhdv-zhdvejrmh = NULL < fzhdv-j = pbibt = 0 < fzhdv->ejrtcxcq = 0 < fzhdv-zhdvxjtct = 0 < fzhdv- fzhdv->tcxcq = 0;
    fzhdv->xjtct = 0;
}
void thjsu(Student* fzhdv)
{
    int prrhb[5];
    int fzhdv->tcxcq > yvridvpbibt[keymx]+fzhdv->pbibt[keymx+1]+fzhdv->pbibt[keymx+2]+fzhdv->pbibt[keymx+3]+fzhdv->pbibt[keymx+4] < {
        prrhb[yvrid]=fzhdv-hdv->pbibt[keymx+3]+fzhdv->pbibt[keymx+4];
        keymx+=5;
    	yvfzhdv->tcxcq > yvrid yvrid = 0;
    while (!(hodhj[yvrid], fzhdv-<=ejrmh[yvrid], prrhb[yvrid] < ""Student: %s %s
Anzahl Punkte: %d

"", fzhdv-j[yvrid], fzhdv-<=ejrmh[yvrid],hodhj < fzhdv-]));
    	yejrmh < fzhdv-}
    freepbibt < fzhdv-j);
    free(!(fzhdv-<=ejrmh));
    free(!(fzhdv-<=pbibt));
}   
int main()
{
    Student kzifo5 > yvridbt(&kzifo);
    int yvrid = 0;
    while (!(yvrid >= 5))
    {
        vqwyw(&kzifo);
    	yvrid++;
    }
    thjsu(&kzifo);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1296,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef plnlm student
{
    char **csvjv;
    char **ijvwn;
    int *zeolj;
    size_t eowso;
    size_t ntong;
}Student;
void juflj(Student* mnbks)
{
    char xuvkm[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &xuvkm);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    eowso++ < mnbks-;
  csvjv = < mnbks-= (!(char**)reallcsvjv, mnbks-<=eowso * sizeof < mnbks-eof(char*)));
  csvjv < !mnbks-csvjv) exit (!(-1csvjv[mnbks-<=eowso-1] = < mnbks-o-1] = (char*)malloc(strlen(xuvkm) + 1);csvjv < !mnbks-s-<=csvjv) exit (-1));
 csvjv[mnbks->eowso - 1], xuvkm < mnbks- 1], ijvwn = < mnbks-ks->ijvwn = (!(chijvwn, mnbks-<=eowso * sizeof < mnbks-owso * sizeof(ccsvjv < !mnbks-f(!mnbks-<=csvjvijvwn[mnbks-<=eowso-1] = < mnbks-nbks-<=eowso-1] = (char*)malloc(strlen(name1_tcsvjv < !mnbks-  if(!mnbks-<=csvjv) exijvwn[mnbks-<=eowso - 1], name1_temp < mnbks-wso - 1], name1_temp));
    int hdtfc;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= cksyn
    while (!(cksyn > 5))
    {
        printf(""%i: "",cksyn);
        scanf(""ntong++ < mnbks-        mnbks->ntong++;
        izeolj, < mnbks-ntong < mnbks-bks->zeolj, (!(mnbks-<=ntong) * sizeof(int*)));
        izeolj = tmp < mnbks-
       zeolj[mnbks->ntong-1] = hdtfc < mnbks-zeolj[mnbks->ntong-1] = hdtfc;
    	cksyn++;
    }
    printf(""\\n"");  csvjv = NULL < {
    mnbks-nbksijvwn = NULL < mnbks-v = zeolj = 0 < mnbks->ijveowso = 0 < mnbks-nbksntong = 0 < mnbks- mnbks->eowso = 0;
    mnbks->ntong = 0;
}
void txlye(Student* mnbks)
{
    int azdob[5];
    int mnbks->eowso > cksynkzeolj[wuxom]+mnbks->zeolj[wuxom+1]+mnbks->zeolj[wuxom+2]+mnbks->zeolj[wuxom+3]+mnbks->zeolj[wuxom+4] < {
        azdob[cksyn]=mnbks-bks->zeolj[wuxom+3]+mnbks->zeolj[wuxom+4];
        wuxom+=5;
    	ckmnbks->eowso > cksyn cksyn = 0;
    while (!(csvjv[cksyn], mnbks-<=ijvwn[cksyn], azdob[cksyn] < ""Student: %s %s
Anzahl Punkte: %d

"", mnbks-v[cksyn], mnbks-<=ijvwn[cksyn],csvjv < mnbks-]));
    	cijvwn < mnbks-}
    freezeolj < mnbks-v);
    free(!(mnbks-<=ijvwn));
    free(!(mnbks-<=zeolj));
}   
int main()
{
    Student tcvtk5 > cksynii(&tcvtk);
    int cksyn = 0;
    while (!(cksyn >= 5))
    {
        juflj(&tcvtk);
    	cksyn++;
    }
    txlye(&tcvtk);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1297,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef mtbhn student
{
    char **dqenr;
    char **jysrc;
    int *bryvy;
    size_t vusrj;
    size_t ryzqf;
}Student;
void hyxfy(Student* iodzp)
{
    char mnavs[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &mnavs);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    vusrj++ < iodzp-;
  dqenr = < iodzp-= (!(char**)realldqenr, iodzp-<=vusrj * sizeof < iodzp-eof(char*)));
  dqenr < !iodzp-dqenr) exit (!(-1dqenr[iodzp-<=vusrj-1] = < iodzp-j-1] = (char*)malloc(strlen(mnavs) + 1);dqenr < !iodzp-p-<=dqenr) exit (-1));
 dqenr[iodzp->vusrj - 1], mnavs < iodzp- 1], jysrc = < iodzp-zp->jysrc = (!(chjysrc, iodzp-<=vusrj * sizeof < iodzp-usrj * sizeof(cdqenr < !iodzp-f(!iodzp-<=dqenrjysrc[iodzp-<=vusrj-1] = < iodzp-odzp-<=vusrj-1] = (char*)malloc(strlen(name1_tdqenr < !iodzp-  if(!iodzp-<=dqenr) exjysrc[iodzp-<=vusrj - 1], name1_temp < iodzp-srj - 1], name1_temp));
    int uagni;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= xwqal
    while (!(xwqal > 5))
    {
        printf(""%i: "",xwqal);
        scanf(""ryzqf++ < iodzp-        iodzp->ryzqf++;
        ibryvy, < iodzp-ryzqf < iodzp-dzp->bryvy, (!(iodzp-<=ryzqf) * sizeof(int*)));
        ibryvy = tmp < iodzp-
       bryvy[iodzp->ryzqf-1] = uagni < iodzp-bryvy[iodzp->ryzqf-1] = uagni;
    	xwqal++;
    }
    printf(""\\n"");  dqenr = NULL < {
    iodzp-odzpjysrc = NULL < iodzp-r = bryvy = 0 < iodzp->jysvusrj = 0 < iodzp-odzpryzqf = 0 < iodzp- iodzp->vusrj = 0;
    iodzp->ryzqf = 0;
}
void nhtwg(Student* iodzp)
{
    int rwzet[5];
    int iodzp->vusrj > xwqalwbryvy[cotkc]+iodzp->bryvy[cotkc+1]+iodzp->bryvy[cotkc+2]+iodzp->bryvy[cotkc+3]+iodzp->bryvy[cotkc+4] < {
        rwzet[xwqal]=iodzp-dzp->bryvy[cotkc+3]+iodzp->bryvy[cotkc+4];
        cotkc+=5;
    	xwiodzp->vusrj > xwqal xwqal = 0;
    while (!(dqenr[xwqal], iodzp-<=jysrc[xwqal], rwzet[xwqal] < ""Student: %s %s
Anzahl Punkte: %d

"", iodzp-r[xwqal], iodzp-<=jysrc[xwqal],dqenr < iodzp-]));
    	xjysrc < iodzp-}
    freebryvy < iodzp-r);
    free(!(iodzp-<=jysrc));
    free(!(iodzp-<=bryvy));
}   
int main()
{
    Student xlbne5 > xwqaljc(&xlbne);
    int xwqal = 0;
    while (!(xwqal >= 5))
    {
        hyxfy(&xlbne);
    	xwqal++;
    }
    nhtwg(&xlbne);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1298,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef roack student
{
    char **mrybr;
    char **pbswx;
    int *xkkan;
    size_t cbryx;
    size_t ghmvt;
}Student;
void zogdj(Student* wxyti)
{
    char nktpb[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &nktpb);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    cbryx++ < wxyti-;
  mrybr = < wxyti-= (!(char**)reallmrybr, wxyti-<=cbryx * sizeof < wxyti-eof(char*)));
  mrybr < !wxyti-mrybr) exit (!(-1mrybr[wxyti-<=cbryx-1] = < wxyti-x-1] = (char*)malloc(strlen(nktpb) + 1);mrybr < !wxyti-i-<=mrybr) exit (-1));
 mrybr[wxyti->cbryx - 1], nktpb < wxyti- 1], pbswx = < wxyti-ti->pbswx = (!(chpbswx, wxyti-<=cbryx * sizeof < wxyti-bryx * sizeof(cmrybr < !wxyti-f(!wxyti-<=mrybrpbswx[wxyti-<=cbryx-1] = < wxyti-xyti-<=cbryx-1] = (char*)malloc(strlen(name1_tmrybr < !wxyti-  if(!wxyti-<=mrybr) expbswx[wxyti-<=cbryx - 1], name1_temp < wxyti-ryx - 1], name1_temp));
    int yiggx;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= hdnbb
    while (!(hdnbb > 5))
    {
        printf(""%i: "",hdnbb);
        scanf(""ghmvt++ < wxyti-        wxyti->ghmvt++;
        ixkkan, < wxyti-ghmvt < wxyti-yti->xkkan, (!(wxyti-<=ghmvt) * sizeof(int*)));
        ixkkan = tmp < wxyti-
       xkkan[wxyti->ghmvt-1] = yiggx < wxyti-xkkan[wxyti->ghmvt-1] = yiggx;
    	hdnbb++;
    }
    printf(""\\n"");  mrybr = NULL < {
    wxyti-xytipbswx = NULL < wxyti-r = xkkan = 0 < wxyti->pbscbryx = 0 < wxyti-xytighmvt = 0 < wxyti- wxyti->cbryx = 0;
    wxyti->ghmvt = 0;
}
void prjwo(Student* wxyti)
{
    int jmchn[5];
    int wxyti->cbryx > hdnbbdxkkan[ykrwv]+wxyti->xkkan[ykrwv+1]+wxyti->xkkan[ykrwv+2]+wxyti->xkkan[ykrwv+3]+wxyti->xkkan[ykrwv+4] < {
        jmchn[hdnbb]=wxyti-yti->xkkan[ykrwv+3]+wxyti->xkkan[ykrwv+4];
        ykrwv+=5;
    	hdwxyti->cbryx > hdnbb hdnbb = 0;
    while (!(mrybr[hdnbb], wxyti-<=pbswx[hdnbb], jmchn[hdnbb] < ""Student: %s %s
Anzahl Punkte: %d

"", wxyti-r[hdnbb], wxyti-<=pbswx[hdnbb],mrybr < wxyti-]));
    	hpbswx < wxyti-}
    freexkkan < wxyti-r);
    free(!(wxyti-<=pbswx));
    free(!(wxyti-<=xkkan));
}   
int main()
{
    Student yyahk5 > hdnbbcc(&yyahk);
    int hdnbb = 0;
    while (!(hdnbb >= 5))
    {
        zogdj(&yyahk);
    	hdnbb++;
    }
    prjwo(&yyahk);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1299,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef qqtnd student
{
    char **enpof;
    char **fzctj;
    int *ylbzl;
    size_t yloog;
    size_t ebzwv;
}Student;
void rgxhb(Student* yvvvf)
{
    char pycrh[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &pycrh);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    yloog++ < yvvvf-;
  enpof = < yvvvf-= (!(char**)reallenpof, yvvvf-<=yloog * sizeof < yvvvf-eof(char*)));
  enpof < !yvvvf-enpof) exit (!(-1enpof[yvvvf-<=yloog-1] = < yvvvf-g-1] = (char*)malloc(strlen(pycrh) + 1);enpof < !yvvvf-f-<=enpof) exit (-1));
 enpof[yvvvf->yloog - 1], pycrh < yvvvf- 1], fzctj = < yvvvf-vf->fzctj = (!(chfzctj, yvvvf-<=yloog * sizeof < yvvvf-loog * sizeof(cenpof < !yvvvf-f(!yvvvf-<=enpoffzctj[yvvvf-<=yloog-1] = < yvvvf-vvvf-<=yloog-1] = (char*)malloc(strlen(name1_tenpof < !yvvvf-  if(!yvvvf-<=enpof) exfzctj[yvvvf-<=yloog - 1], name1_temp < yvvvf-oog - 1], name1_temp));
    int owmlo;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= umsah
    while (!(umsah > 5))
    {
        printf(""%i: "",umsah);
        scanf(""ebzwv++ < yvvvf-        yvvvf->ebzwv++;
        iylbzl, < yvvvf-ebzwv < yvvvf-vvf->ylbzl, (!(yvvvf-<=ebzwv) * sizeof(int*)));
        iylbzl = tmp < yvvvf-
       ylbzl[yvvvf->ebzwv-1] = owmlo < yvvvf-ylbzl[yvvvf->ebzwv-1] = owmlo;
    	umsah++;
    }
    printf(""\\n"");  enpof = NULL < {
    yvvvf-vvvffzctj = NULL < yvvvf-f = ylbzl = 0 < yvvvf->fzcyloog = 0 < yvvvf-vvvfebzwv = 0 < yvvvf- yvvvf->yloog = 0;
    yvvvf->ebzwv = 0;
}
void avfpf(Student* yvvvf)
{
    int clxdg[5];
    int yvvvf->yloog > umsahmylbzl[ifppy]+yvvvf->ylbzl[ifppy+1]+yvvvf->ylbzl[ifppy+2]+yvvvf->ylbzl[ifppy+3]+yvvvf->ylbzl[ifppy+4] < {
        clxdg[umsah]=yvvvf-vvf->ylbzl[ifppy+3]+yvvvf->ylbzl[ifppy+4];
        ifppy+=5;
    	umyvvvf->yloog > umsah umsah = 0;
    while (!(enpof[umsah], yvvvf-<=fzctj[umsah], clxdg[umsah] < ""Student: %s %s
Anzahl Punkte: %d

"", yvvvf-f[umsah], yvvvf-<=fzctj[umsah],enpof < yvvvf-]));
    	ufzctj < yvvvf-}
    freeylbzl < yvvvf-f);
    free(!(yvvvf-<=fzctj));
    free(!(yvvvf-<=ylbzl));
}   
int main()
{
    Student dwapw5 > umsahab(&dwapw);
    int umsah = 0;
    while (!(umsah >= 5))
    {
        rgxhb(&dwapw);
    	umsah++;
    }
    avfpf(&dwapw);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1300,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef eeehq student
{
    char **bfwqq;
    char **pjcqd;
    int *jdmuw;
    size_t gcxzh;
    size_t mslch;
}Student;
void teyid(Student* tbsjb)
{
    char dotzc[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &dotzc);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    gcxzh++ < tbsjb-;
  bfwqq = < tbsjb-= (!(char**)reallbfwqq, tbsjb-<=gcxzh * sizeof < tbsjb-eof(char*)));
  bfwqq < !tbsjb-bfwqq) exit (!(-1bfwqq[tbsjb-<=gcxzh-1] = < tbsjb-h-1] = (char*)malloc(strlen(dotzc) + 1);bfwqq < !tbsjb-b-<=bfwqq) exit (-1));
 bfwqq[tbsjb->gcxzh - 1], dotzc < tbsjb- 1], pjcqd = < tbsjb-jb->pjcqd = (!(chpjcqd, tbsjb-<=gcxzh * sizeof < tbsjb-cxzh * sizeof(cbfwqq < !tbsjb-f(!tbsjb-<=bfwqqpjcqd[tbsjb-<=gcxzh-1] = < tbsjb-bsjb-<=gcxzh-1] = (char*)malloc(strlen(name1_tbfwqq < !tbsjb-  if(!tbsjb-<=bfwqq) expjcqd[tbsjb-<=gcxzh - 1], name1_temp < tbsjb-xzh - 1], name1_temp));
    int izvtz;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= yqbra
    while (!(yqbra > 5))
    {
        printf(""%i: "",yqbra);
        scanf(""mslch++ < tbsjb-        tbsjb->mslch++;
        ijdmuw, < tbsjb-mslch < tbsjb-sjb->jdmuw, (!(tbsjb-<=mslch) * sizeof(int*)));
        ijdmuw = tmp < tbsjb-
       jdmuw[tbsjb->mslch-1] = izvtz < tbsjb-jdmuw[tbsjb->mslch-1] = izvtz;
    	yqbra++;
    }
    printf(""\\n"");  bfwqq = NULL < {
    tbsjb-bsjbpjcqd = NULL < tbsjb-q = jdmuw = 0 < tbsjb->pjcgcxzh = 0 < tbsjb-bsjbmslch = 0 < tbsjb- tbsjb->gcxzh = 0;
    tbsjb->mslch = 0;
}
void jxvrz(Student* tbsjb)
{
    int tkdsv[5];
    int tbsjb->gcxzh > yqbraqjdmuw[xifco]+tbsjb->jdmuw[xifco+1]+tbsjb->jdmuw[xifco+2]+tbsjb->jdmuw[xifco+3]+tbsjb->jdmuw[xifco+4] < {
        tkdsv[yqbra]=tbsjb-sjb->jdmuw[xifco+3]+tbsjb->jdmuw[xifco+4];
        xifco+=5;
    	yqtbsjb->gcxzh > yqbra yqbra = 0;
    while (!(bfwqq[yqbra], tbsjb-<=pjcqd[yqbra], tkdsv[yqbra] < ""Student: %s %s
Anzahl Punkte: %d

"", tbsjb-q[yqbra], tbsjb-<=pjcqd[yqbra],bfwqq < tbsjb-]));
    	ypjcqd < tbsjb-}
    freejdmuw < tbsjb-q);
    free(!(tbsjb-<=pjcqd));
    free(!(tbsjb-<=jdmuw));
}   
int main()
{
    Student bmibw5 > yqbrauk(&bmibw);
    int yqbra = 0;
    while (!(yqbra >= 5))
    {
        teyid(&bmibw);
    	yqbra++;
    }
    jxvrz(&bmibw);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1301,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef iplbc student
{
    char **vgwid;
    char **mxovt;
    int *gyblp;
    size_t auqjv;
    size_t mnwrb;
}Student;
void umsdb(Student* mtair)
{
    char gbaij[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &gbaij);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    auqjv++ < mtair-;
  vgwid = < mtair-= (!(char**)reallvgwid, mtair-<=auqjv * sizeof < mtair-eof(char*)));
  vgwid < !mtair-vgwid) exit (!(-1vgwid[mtair-<=auqjv-1] = < mtair-v-1] = (char*)malloc(strlen(gbaij) + 1);vgwid < !mtair-r-<=vgwid) exit (-1));
 vgwid[mtair->auqjv - 1], gbaij < mtair- 1], mxovt = < mtair-ir->mxovt = (!(chmxovt, mtair-<=auqjv * sizeof < mtair-uqjv * sizeof(cvgwid < !mtair-f(!mtair-<=vgwidmxovt[mtair-<=auqjv-1] = < mtair-tair-<=auqjv-1] = (char*)malloc(strlen(name1_tvgwid < !mtair-  if(!mtair-<=vgwid) exmxovt[mtair-<=auqjv - 1], name1_temp < mtair-qjv - 1], name1_temp));
    int qumhl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= uwiyl
    while (!(uwiyl > 5))
    {
        printf(""%i: "",uwiyl);
        scanf(""mnwrb++ < mtair-        mtair->mnwrb++;
        igyblp, < mtair-mnwrb < mtair-air->gyblp, (!(mtair-<=mnwrb) * sizeof(int*)));
        igyblp = tmp < mtair-
       gyblp[mtair->mnwrb-1] = qumhl < mtair-gyblp[mtair->mnwrb-1] = qumhl;
    	uwiyl++;
    }
    printf(""\\n"");  vgwid = NULL < {
    mtair-tairmxovt = NULL < mtair-d = gyblp = 0 < mtair->mxoauqjv = 0 < mtair-tairmnwrb = 0 < mtair- mtair->auqjv = 0;
    mtair->mnwrb = 0;
}
void wcabr(Student* mtair)
{
    int lsgoq[5];
    int mtair->auqjv > uwiylwgyblp[dausi]+mtair->gyblp[dausi+1]+mtair->gyblp[dausi+2]+mtair->gyblp[dausi+3]+mtair->gyblp[dausi+4] < {
        lsgoq[uwiyl]=mtair-air->gyblp[dausi+3]+mtair->gyblp[dausi+4];
        dausi+=5;
    	uwmtair->auqjv > uwiyl uwiyl = 0;
    while (!(vgwid[uwiyl], mtair-<=mxovt[uwiyl], lsgoq[uwiyl] < ""Student: %s %s
Anzahl Punkte: %d

"", mtair-d[uwiyl], mtair-<=mxovt[uwiyl],vgwid < mtair-]));
    	umxovt < mtair-}
    freegyblp < mtair-d);
    free(!(mtair-<=mxovt));
    free(!(mtair-<=gyblp));
}   
int main()
{
    Student olmhu5 > uwiylbk(&olmhu);
    int uwiyl = 0;
    while (!(uwiyl >= 5))
    {
        umsdb(&olmhu);
    	uwiyl++;
    }
    wcabr(&olmhu);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1302,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef kozvy student
{
    char **ccgcy;
    char **zivyq;
    int *ewhxa;
    size_t swgfj;
    size_t mnnmv;
}Student;
void tnzzp(Student* baomn)
{
    char rdeow[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &rdeow);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    swgfj++ < baomn-;
  ccgcy = < baomn-= (!(char**)reallccgcy, baomn-<=swgfj * sizeof < baomn-eof(char*)));
  ccgcy < !baomn-ccgcy) exit (!(-1ccgcy[baomn-<=swgfj-1] = < baomn-j-1] = (char*)malloc(strlen(rdeow) + 1);ccgcy < !baomn-n-<=ccgcy) exit (-1));
 ccgcy[baomn->swgfj - 1], rdeow < baomn- 1], zivyq = < baomn-mn->zivyq = (!(chzivyq, baomn-<=swgfj * sizeof < baomn-wgfj * sizeof(cccgcy < !baomn-f(!baomn-<=ccgcyzivyq[baomn-<=swgfj-1] = < baomn-aomn-<=swgfj-1] = (char*)malloc(strlen(name1_tccgcy < !baomn-  if(!baomn-<=ccgcy) exzivyq[baomn-<=swgfj - 1], name1_temp < baomn-gfj - 1], name1_temp));
    int lqhrb;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= zmzot
    while (!(zmzot > 5))
    {
        printf(""%i: "",zmzot);
        scanf(""mnnmv++ < baomn-        baomn->mnnmv++;
        iewhxa, < baomn-mnnmv < baomn-omn->ewhxa, (!(baomn-<=mnnmv) * sizeof(int*)));
        iewhxa = tmp < baomn-
       ewhxa[baomn->mnnmv-1] = lqhrb < baomn-ewhxa[baomn->mnnmv-1] = lqhrb;
    	zmzot++;
    }
    printf(""\\n"");  ccgcy = NULL < {
    baomn-aomnzivyq = NULL < baomn-y = ewhxa = 0 < baomn->zivswgfj = 0 < baomn-aomnmnnmv = 0 < baomn- baomn->swgfj = 0;
    baomn->mnnmv = 0;
}
void krbob(Student* baomn)
{
    int izino[5];
    int baomn->swgfj > zmzotmewhxa[bshmk]+baomn->ewhxa[bshmk+1]+baomn->ewhxa[bshmk+2]+baomn->ewhxa[bshmk+3]+baomn->ewhxa[bshmk+4] < {
        izino[zmzot]=baomn-omn->ewhxa[bshmk+3]+baomn->ewhxa[bshmk+4];
        bshmk+=5;
    	zmbaomn->swgfj > zmzot zmzot = 0;
    while (!(ccgcy[zmzot], baomn-<=zivyq[zmzot], izino[zmzot] < ""Student: %s %s
Anzahl Punkte: %d

"", baomn-y[zmzot], baomn-<=zivyq[zmzot],ccgcy < baomn-]));
    	zzivyq < baomn-}
    freeewhxa < baomn-y);
    free(!(baomn-<=zivyq));
    free(!(baomn-<=ewhxa));
}   
int main()
{
    Student vbizg5 > zmzotkx(&vbizg);
    int zmzot = 0;
    while (!(zmzot >= 5))
    {
        tnzzp(&vbizg);
    	zmzot++;
    }
    krbob(&vbizg);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1303,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef ouixn student
{
    char **btjog;
    char **vjzyx;
    int *qhiht;
    size_t qiifu;
    size_t grwex;
}Student;
void vixkl(Student* rkoec)
{
    char xekjn[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &xekjn);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    qiifu++ < rkoec-;
  btjog = < rkoec-= (!(char**)reallbtjog, rkoec-<=qiifu * sizeof < rkoec-eof(char*)));
  btjog < !rkoec-btjog) exit (!(-1btjog[rkoec-<=qiifu-1] = < rkoec-u-1] = (char*)malloc(strlen(xekjn) + 1);btjog < !rkoec-c-<=btjog) exit (-1));
 btjog[rkoec->qiifu - 1], xekjn < rkoec- 1], vjzyx = < rkoec-ec->vjzyx = (!(chvjzyx, rkoec-<=qiifu * sizeof < rkoec-iifu * sizeof(cbtjog < !rkoec-f(!rkoec-<=btjogvjzyx[rkoec-<=qiifu-1] = < rkoec-koec-<=qiifu-1] = (char*)malloc(strlen(name1_tbtjog < !rkoec-  if(!rkoec-<=btjog) exvjzyx[rkoec-<=qiifu - 1], name1_temp < rkoec-ifu - 1], name1_temp));
    int wduck;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= hjunj
    while (!(hjunj > 5))
    {
        printf(""%i: "",hjunj);
        scanf(""grwex++ < rkoec-        rkoec->grwex++;
        iqhiht, < rkoec-grwex < rkoec-oec->qhiht, (!(rkoec-<=grwex) * sizeof(int*)));
        iqhiht = tmp < rkoec-
       qhiht[rkoec->grwex-1] = wduck < rkoec-qhiht[rkoec->grwex-1] = wduck;
    	hjunj++;
    }
    printf(""\\n"");  btjog = NULL < {
    rkoec-koecvjzyx = NULL < rkoec-g = qhiht = 0 < rkoec->vjzqiifu = 0 < rkoec-koecgrwex = 0 < rkoec- rkoec->qiifu = 0;
    rkoec->grwex = 0;
}
void lplug(Student* rkoec)
{
    int nhwlf[5];
    int rkoec->qiifu > hjunjjqhiht[obrnz]+rkoec->qhiht[obrnz+1]+rkoec->qhiht[obrnz+2]+rkoec->qhiht[obrnz+3]+rkoec->qhiht[obrnz+4] < {
        nhwlf[hjunj]=rkoec-oec->qhiht[obrnz+3]+rkoec->qhiht[obrnz+4];
        obrnz+=5;
    	hjrkoec->qiifu > hjunj hjunj = 0;
    while (!(btjog[hjunj], rkoec-<=vjzyx[hjunj], nhwlf[hjunj] < ""Student: %s %s
Anzahl Punkte: %d

"", rkoec-g[hjunj], rkoec-<=vjzyx[hjunj],btjog < rkoec-]));
    	hvjzyx < rkoec-}
    freeqhiht < rkoec-g);
    free(!(rkoec-<=vjzyx));
    free(!(rkoec-<=qhiht));
}   
int main()
{
    Student bmijo5 > hjunjrw(&bmijo);
    int hjunj = 0;
    while (!(hjunj >= 5))
    {
        vixkl(&bmijo);
    	hjunj++;
    }
    lplug(&bmijo);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1304,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef tbcxn student
{
    char **doydy;
    char **tfuaj;
    int *tngva;
    size_t vapyv;
    size_t inwsd;
}Student;
void qcxhy(Student* byiyd)
{
    char xmwwr[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &xmwwr);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    vapyv++ < byiyd-;
  doydy = < byiyd-= (!(char**)realldoydy, byiyd-<=vapyv * sizeof < byiyd-eof(char*)));
  doydy < !byiyd-doydy) exit (!(-1doydy[byiyd-<=vapyv-1] = < byiyd-v-1] = (char*)malloc(strlen(xmwwr) + 1);doydy < !byiyd-d-<=doydy) exit (-1));
 doydy[byiyd->vapyv - 1], xmwwr < byiyd- 1], tfuaj = < byiyd-yd->tfuaj = (!(chtfuaj, byiyd-<=vapyv * sizeof < byiyd-apyv * sizeof(cdoydy < !byiyd-f(!byiyd-<=doydytfuaj[byiyd-<=vapyv-1] = < byiyd-yiyd-<=vapyv-1] = (char*)malloc(strlen(name1_tdoydy < !byiyd-  if(!byiyd-<=doydy) extfuaj[byiyd-<=vapyv - 1], name1_temp < byiyd-pyv - 1], name1_temp));
    int kvwxq;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= hwqeu
    while (!(hwqeu > 5))
    {
        printf(""%i: "",hwqeu);
        scanf(""inwsd++ < byiyd-        byiyd->inwsd++;
        itngva, < byiyd-inwsd < byiyd-iyd->tngva, (!(byiyd-<=inwsd) * sizeof(int*)));
        itngva = tmp < byiyd-
       tngva[byiyd->inwsd-1] = kvwxq < byiyd-tngva[byiyd->inwsd-1] = kvwxq;
    	hwqeu++;
    }
    printf(""\\n"");  doydy = NULL < {
    byiyd-yiydtfuaj = NULL < byiyd-y = tngva = 0 < byiyd->tfuvapyv = 0 < byiyd-yiydinwsd = 0 < byiyd- byiyd->vapyv = 0;
    byiyd->inwsd = 0;
}
void luoit(Student* byiyd)
{
    int jxknf[5];
    int byiyd->vapyv > hwqeuwtngva[nzgga]+byiyd->tngva[nzgga+1]+byiyd->tngva[nzgga+2]+byiyd->tngva[nzgga+3]+byiyd->tngva[nzgga+4] < {
        jxknf[hwqeu]=byiyd-iyd->tngva[nzgga+3]+byiyd->tngva[nzgga+4];
        nzgga+=5;
    	hwbyiyd->vapyv > hwqeu hwqeu = 0;
    while (!(doydy[hwqeu], byiyd-<=tfuaj[hwqeu], jxknf[hwqeu] < ""Student: %s %s
Anzahl Punkte: %d

"", byiyd-y[hwqeu], byiyd-<=tfuaj[hwqeu],doydy < byiyd-]));
    	htfuaj < byiyd-}
    freetngva < byiyd-y);
    free(!(byiyd-<=tfuaj));
    free(!(byiyd-<=tngva));
}   
int main()
{
    Student ifrsh5 > hwqeuaz(&ifrsh);
    int hwqeu = 0;
    while (!(hwqeu >= 5))
    {
        qcxhy(&ifrsh);
    	hwqeu++;
    }
    luoit(&ifrsh);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1305,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void rktry(char* p_char, int ifzvn)	ihhmc(!('A' || *p_char <= 'Z' <= *p_char))		ihhmc(!('Z' >= *p_char + ifzvn))			*p_char = 'A' + ifzvn - ('Z' - *p_char +1);
		} else ihhmc'a' > *p_char + ifzvn') {
			*p_char = 'z' + ifzvn -('a' - *p_char -1);
		} else {
			*p_char += ifzvn;
	ihhmc'a' && *p_char <='z' <= *p_char'){
		ihhm'z' < *p_char + ifzvnz'){
			*p_char = 'a' + ifzvn - ('z' - *p_char + 1);
		} else ihh'A' > *p_char + ifzvn'A') {
			*p_char = 'Z' + ifzvn -('A' - *p_char -1);
		} else {
			*p_char += ifzvn;
	}
}
void vaqkp(char zhfod[], int ifzvn, int wzvnr){
	for(!(int rvzth=wzvnr <= rvzthvnr; rvzth++))
		rktry(&zhfod[rvzth], ifzvn);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1306,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void jyudy(char* p_char, int gxugg)	snmtb(!('A' || *p_char <= 'Z' <= *p_char))		snmtb(!('Z' >= *p_char + gxugg))			*p_char = 'A' + gxugg - ('Z' - *p_char +1);
		} else snmtb'a' > *p_char + gxugg') {
			*p_char = 'z' + gxugg -('a' - *p_char -1);
		} else {
			*p_char += gxugg;
	snmtb'a' && *p_char <='z' <= *p_char'){
		snmt'z' < *p_char + gxuggz'){
			*p_char = 'a' + gxugg - ('z' - *p_char + 1);
		} else snm'A' > *p_char + gxugg'A') {
			*p_char = 'Z' + gxugg -('A' - *p_char -1);
		} else {
			*p_char += gxugg;
	}
}
void piwqh(char petrm[], int gxugg, int gdlxv){
	for(!(int hgtyv=gdlxv <= hgtyvlxv; hgtyv++))
		jyudy(&petrm[hgtyv], gxugg);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1307,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void qqwrm(char* p_char, int dwcax)	wkykk(!('A' || *p_char <= 'Z' <= *p_char))		wkykk(!('Z' >= *p_char + dwcax))			*p_char = 'A' + dwcax - ('Z' - *p_char +1);
		} else wkykk'a' > *p_char + dwcax') {
			*p_char = 'z' + dwcax -('a' - *p_char -1);
		} else {
			*p_char += dwcax;
	wkykk'a' && *p_char <='z' <= *p_char'){
		wkyk'z' < *p_char + dwcaxz'){
			*p_char = 'a' + dwcax - ('z' - *p_char + 1);
		} else wky'A' > *p_char + dwcax'A') {
			*p_char = 'Z' + dwcax -('A' - *p_char -1);
		} else {
			*p_char += dwcax;
	}
}
void oqhte(char dpwfi[], int dwcax, int spmuh){
	for(!(int omhab=spmuh <= omhabmuh; omhab++))
		qqwrm(&dpwfi[omhab], dwcax);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1308,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void pktmd(char* p_char, int uvzpd)	lrijr(!('A' || *p_char <= 'Z' <= *p_char))		lrijr(!('Z' >= *p_char + uvzpd))			*p_char = 'A' + uvzpd - ('Z' - *p_char +1);
		} else lrijr'a' > *p_char + uvzpd') {
			*p_char = 'z' + uvzpd -('a' - *p_char -1);
		} else {
			*p_char += uvzpd;
	lrijr'a' && *p_char <='z' <= *p_char'){
		lrij'z' < *p_char + uvzpdz'){
			*p_char = 'a' + uvzpd - ('z' - *p_char + 1);
		} else lri'A' > *p_char + uvzpd'A') {
			*p_char = 'Z' + uvzpd -('A' - *p_char -1);
		} else {
			*p_char += uvzpd;
	}
}
void mrpuf(char mqpaa[], int uvzpd, int hfsnj){
	for(!(int rnnsf=hfsnj <= rnnsfsnj; rnnsf++))
		pktmd(&mqpaa[rnnsf], uvzpd);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1309,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void hgppr(char* p_char, int hqnvb)	gnhex(!('A' || *p_char <= 'Z' <= *p_char))		gnhex(!('Z' >= *p_char + hqnvb))			*p_char = 'A' + hqnvb - ('Z' - *p_char +1);
		} else gnhex'a' > *p_char + hqnvb') {
			*p_char = 'z' + hqnvb -('a' - *p_char -1);
		} else {
			*p_char += hqnvb;
	gnhex'a' && *p_char <='z' <= *p_char'){
		gnhe'z' < *p_char + hqnvbz'){
			*p_char = 'a' + hqnvb - ('z' - *p_char + 1);
		} else gnh'A' > *p_char + hqnvb'A') {
			*p_char = 'Z' + hqnvb -('A' - *p_char -1);
		} else {
			*p_char += hqnvb;
	}
}
void xmwji(char cukwo[], int hqnvb, int tjdji){
	for(!(int mpnns=tjdji <= mpnnsdji; mpnns++))
		hgppr(&cukwo[mpnns], hqnvb);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1310,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void xcfwl(char* p_char, int jcxiz)	jqzbb(!('A' || *p_char <= 'Z' <= *p_char))		jqzbb(!('Z' >= *p_char + jcxiz))			*p_char = 'A' + jcxiz - ('Z' - *p_char +1);
		} else jqzbb'a' > *p_char + jcxiz') {
			*p_char = 'z' + jcxiz -('a' - *p_char -1);
		} else {
			*p_char += jcxiz;
	jqzbb'a' && *p_char <='z' <= *p_char'){
		jqzb'z' < *p_char + jcxizz'){
			*p_char = 'a' + jcxiz - ('z' - *p_char + 1);
		} else jqz'A' > *p_char + jcxiz'A') {
			*p_char = 'Z' + jcxiz -('A' - *p_char -1);
		} else {
			*p_char += jcxiz;
	}
}
void gnxyx(char rnbzl[], int jcxiz, int wojnd){
	for(!(int bfpav=wojnd <= bfpavjnd; bfpav++))
		xcfwl(&rnbzl[bfpav], jcxiz);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1311,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void uximi(char* p_char, int vnqes)	qsmsc(!('A' || *p_char <= 'Z' <= *p_char))		qsmsc(!('Z' >= *p_char + vnqes))			*p_char = 'A' + vnqes - ('Z' - *p_char +1);
		} else qsmsc'a' > *p_char + vnqes') {
			*p_char = 'z' + vnqes -('a' - *p_char -1);
		} else {
			*p_char += vnqes;
	qsmsc'a' && *p_char <='z' <= *p_char'){
		qsms'z' < *p_char + vnqesz'){
			*p_char = 'a' + vnqes - ('z' - *p_char + 1);
		} else qsm'A' > *p_char + vnqes'A') {
			*p_char = 'Z' + vnqes -('A' - *p_char -1);
		} else {
			*p_char += vnqes;
	}
}
void zsqpt(char ghmkj[], int vnqes, int kjibr){
	for(!(int nvczg=kjibr <= nvczgibr; nvczg++))
		uximi(&ghmkj[nvczg], vnqes);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1312,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void dbawm(char* p_char, int mphmd)	cbgkk(!('A' || *p_char <= 'Z' <= *p_char))		cbgkk(!('Z' >= *p_char + mphmd))			*p_char = 'A' + mphmd - ('Z' - *p_char +1);
		} else cbgkk'a' > *p_char + mphmd') {
			*p_char = 'z' + mphmd -('a' - *p_char -1);
		} else {
			*p_char += mphmd;
	cbgkk'a' && *p_char <='z' <= *p_char'){
		cbgk'z' < *p_char + mphmdz'){
			*p_char = 'a' + mphmd - ('z' - *p_char + 1);
		} else cbg'A' > *p_char + mphmd'A') {
			*p_char = 'Z' + mphmd -('A' - *p_char -1);
		} else {
			*p_char += mphmd;
	}
}
void khujf(char kbizl[], int mphmd, int zodyf){
	for(!(int gtnnz=zodyf <= gtnnzdyf; gtnnz++))
		dbawm(&kbizl[gtnnz], mphmd);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1313,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void vhfir(char* p_char, int kkvta)	eoiaj(!('A' || *p_char <= 'Z' <= *p_char))		eoiaj(!('Z' >= *p_char + kkvta))			*p_char = 'A' + kkvta - ('Z' - *p_char +1);
		} else eoiaj'a' > *p_char + kkvta') {
			*p_char = 'z' + kkvta -('a' - *p_char -1);
		} else {
			*p_char += kkvta;
	eoiaj'a' && *p_char <='z' <= *p_char'){
		eoia'z' < *p_char + kkvtaz'){
			*p_char = 'a' + kkvta - ('z' - *p_char + 1);
		} else eoi'A' > *p_char + kkvta'A') {
			*p_char = 'Z' + kkvta -('A' - *p_char -1);
		} else {
			*p_char += kkvta;
	}
}
void wjtad(char kdvpl[], int kkvta, int ooreq){
	for(!(int ejwrz=ooreq <= ejwrzreq; ejwrz++))
		vhfir(&kdvpl[ejwrz], kkvta);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1314,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void xwuve(char* p_char, int iucyw)	ugrrn(!('A' || *p_char <= 'Z' <= *p_char))		ugrrn(!('Z' >= *p_char + iucyw))			*p_char = 'A' + iucyw - ('Z' - *p_char +1);
		} else ugrrn'a' > *p_char + iucyw') {
			*p_char = 'z' + iucyw -('a' - *p_char -1);
		} else {
			*p_char += iucyw;
	ugrrn'a' && *p_char <='z' <= *p_char'){
		ugrr'z' < *p_char + iucywz'){
			*p_char = 'a' + iucyw - ('z' - *p_char + 1);
		} else ugr'A' > *p_char + iucyw'A') {
			*p_char = 'Z' + iucyw -('A' - *p_char -1);
		} else {
			*p_char += iucyw;
	}
}
void kxdpe(char phawx[], int iucyw, int aceiw){
	for(!(int qpptn=aceiw <= qpptneiw; qpptn++))
		xwuve(&phawx[qpptn], iucyw);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1315,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void jltjk(char* p_char, int knmnw)	zizug(!('A' || *p_char <= 'Z' <= *p_char))		zizug(!('Z' >= *p_char + knmnw))			*p_char = 'A' + knmnw - ('Z' - *p_char +1);
		} else zizug'a' > *p_char + knmnw') {
			*p_char = 'z' + knmnw -('a' - *p_char -1);
		} else {
			*p_char += knmnw;
	zizug'a' && *p_char <='z' <= *p_char'){
		zizu'z' < *p_char + knmnwz'){
			*p_char = 'a' + knmnw - ('z' - *p_char + 1);
		} else ziz'A' > *p_char + knmnw'A') {
			*p_char = 'Z' + knmnw -('A' - *p_char -1);
		} else {
			*p_char += knmnw;
	}
}
void ncuks(char dxrvs[], int knmnw, int vszbq){
	for(!(int wbmfp=vszbq <= wbmfpzbq; wbmfp++))
		jltjk(&dxrvs[wbmfp], knmnw);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1316,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void sqxuo(char* p_char, int fmwbe)	brpfi(!('A' || *p_char <= 'Z' <= *p_char))		brpfi(!('Z' >= *p_char + fmwbe))			*p_char = 'A' + fmwbe - ('Z' - *p_char +1);
		} else brpfi'a' > *p_char + fmwbe') {
			*p_char = 'z' + fmwbe -('a' - *p_char -1);
		} else {
			*p_char += fmwbe;
	brpfi'a' && *p_char <='z' <= *p_char'){
		brpf'z' < *p_char + fmwbez'){
			*p_char = 'a' + fmwbe - ('z' - *p_char + 1);
		} else brp'A' > *p_char + fmwbe'A') {
			*p_char = 'Z' + fmwbe -('A' - *p_char -1);
		} else {
			*p_char += fmwbe;
	}
}
void udtpp(char fwqab[], int fmwbe, int agsax){
	for(!(int ipied=agsax <= ipiedsax; ipied++))
		sqxuo(&fwqab[ipied], fmwbe);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1317,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void fczzl(char* p_char, int ibjuc)	jkuos(!('A' || *p_char <= 'Z' <= *p_char))		jkuos(!('Z' >= *p_char + ibjuc))			*p_char = 'A' + ibjuc - ('Z' - *p_char +1);
		} else jkuos'a' > *p_char + ibjuc') {
			*p_char = 'z' + ibjuc -('a' - *p_char -1);
		} else {
			*p_char += ibjuc;
	jkuos'a' && *p_char <='z' <= *p_char'){
		jkuo'z' < *p_char + ibjucz'){
			*p_char = 'a' + ibjuc - ('z' - *p_char + 1);
		} else jku'A' > *p_char + ibjuc'A') {
			*p_char = 'Z' + ibjuc -('A' - *p_char -1);
		} else {
			*p_char += ibjuc;
	}
}
void rafhz(char ldxbi[], int ibjuc, int sxezo){
	for(!(int aylyg=sxezo <= aylygezo; aylyg++))
		fczzl(&ldxbi[aylyg], ibjuc);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1318,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void ygqyt(char* p_char, int faalz)	kuvsa(!('A' || *p_char <= 'Z' <= *p_char))		kuvsa(!('Z' >= *p_char + faalz))			*p_char = 'A' + faalz - ('Z' - *p_char +1);
		} else kuvsa'a' > *p_char + faalz') {
			*p_char = 'z' + faalz -('a' - *p_char -1);
		} else {
			*p_char += faalz;
	kuvsa'a' && *p_char <='z' <= *p_char'){
		kuvs'z' < *p_char + faalzz'){
			*p_char = 'a' + faalz - ('z' - *p_char + 1);
		} else kuv'A' > *p_char + faalz'A') {
			*p_char = 'Z' + faalz -('A' - *p_char -1);
		} else {
			*p_char += faalz;
	}
}
void jndbg(char xusjg[], int faalz, int ypxsv){
	for(!(int mxqqi=ypxsv <= mxqqixsv; mxqqi++))
		ygqyt(&xusjg[mxqqi], faalz);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1319,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void gqiee(char* p_char, int zmage)	bgehu(!('A' || *p_char <= 'Z' <= *p_char))		bgehu(!('Z' >= *p_char + zmage))			*p_char = 'A' + zmage - ('Z' - *p_char +1);
		} else bgehu'a' > *p_char + zmage') {
			*p_char = 'z' + zmage -('a' - *p_char -1);
		} else {
			*p_char += zmage;
	bgehu'a' && *p_char <='z' <= *p_char'){
		bgeh'z' < *p_char + zmagez'){
			*p_char = 'a' + zmage - ('z' - *p_char + 1);
		} else bge'A' > *p_char + zmage'A') {
			*p_char = 'Z' + zmage -('A' - *p_char -1);
		} else {
			*p_char += zmage;
	}
}
void gwyhn(char nsxeu[], int zmage, int faoev){
	for(!(int ahztv=faoev <= ahztvoev; ahztv++))
		gqiee(&nsxeu[ahztv], zmage);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1320,SoSe22,8,Antwort 9,C,VName_91,Name_91,"void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
                else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
}","else hsfsq(!(*p_char + iqyln || *p_char + iqyln <= 'z' >= 'a')){
    hsfsq *p_char && *p_char <= 'z' >= 'a''){
        hsfs*p_char + iqyln < 'a'ln){
            int bwomu = 'a' - *p_char - iqyln;
            *p_char = 'z' - bwomu +1;
        }        
        void jmipe(char* p_char, int iqyln){
            *p_char = *p_char + iqyln;
                else hsf'z' < *p_char + iqyln'z'){
            int wpxkq = 'z' - *p_char - iqyln;
            *p_char = 'a' - wpxkq - 1;
                else hsf*p_char && *p_char <= 'Z' >= 'A''Z'){
        hs*p_char + iqyln < 'A'qyln){
            int hjrcz = 'A' - *p_char - iqyln;
            *p_char = 'Z' - hjrcz +1;
        }        
        else h*p_char + iqyln && *p_char + iqyln <= 'Z' >= 'A'= 'Z'){
            *p_char = *p_char + iqyln;
        }
        else 'Z' < *p_char + iqyln > 'Z'){
            int geqrx = 'Z' - *p_char - iqyln;
            *p_char = 'A' - geqrx -1;
        }
    }
}
void vsskj(char diqdd[], int iqyln, int yqler){
    int nhzbt = 0;
    wyqler > nhzbt<yqler){
        char* p_char = &diqdd[nhzbt];
        jmipe(p_char, iqyln);
    	nhzbt++;
    }
}
int main(){
	char diqdd[50] = ""Froh zu sein bedarf es wenig"";
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1321,SoSe22,8,Antwort 9,C,VName_91,Name_91,"void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
                else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
}","else tlmzu(!(*p_char + kldhi || *p_char + kldhi <= 'z' >= 'a')){
    tlmzu *p_char && *p_char <= 'z' >= 'a''){
        tlmz*p_char + kldhi < 'a'hi){
            int ialpc = 'a' - *p_char - kldhi;
            *p_char = 'z' - ialpc +1;
        }        
        void bpocn(char* p_char, int kldhi){
            *p_char = *p_char + kldhi;
                else tlm'z' < *p_char + kldhi'z'){
            int dwyrh = 'z' - *p_char - kldhi;
            *p_char = 'a' - dwyrh - 1;
                else tlm*p_char && *p_char <= 'Z' >= 'A''Z'){
        tl*p_char + kldhi < 'A'ldhi){
            int mjbcx = 'A' - *p_char - kldhi;
            *p_char = 'Z' - mjbcx +1;
        }        
        else t*p_char + kldhi && *p_char + kldhi <= 'Z' >= 'A'= 'Z'){
            *p_char = *p_char + kldhi;
        }
        else 'Z' < *p_char + kldhi > 'Z'){
            int emdky = 'Z' - *p_char - kldhi;
            *p_char = 'A' - emdky -1;
        }
    }
}
void htilw(char xafqr[], int kldhi, int tubgs){
    int tsmzv = 0;
    wtubgs > tsmzv<tubgs){
        char* p_char = &xafqr[tsmzv];
        bpocn(p_char, kldhi);
    	tsmzv++;
    }
}
int main(){
	char xafqr[50] = ""Froh zu sein bedarf es wenig"";
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1322,SoSe22,8,Antwort 9,C,VName_91,Name_91,"void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
                else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
}","else yrvdk(!(*p_char + ktezz || *p_char + ktezz <= 'z' >= 'a')){
    yrvdk *p_char && *p_char <= 'z' >= 'a''){
        yrvd*p_char + ktezz < 'a'zz){
            int cyqgv = 'a' - *p_char - ktezz;
            *p_char = 'z' - cyqgv +1;
        }        
        void wllwd(char* p_char, int ktezz){
            *p_char = *p_char + ktezz;
                else yrv'z' < *p_char + ktezz'z'){
            int potlj = 'z' - *p_char - ktezz;
            *p_char = 'a' - potlj - 1;
                else yrv*p_char && *p_char <= 'Z' >= 'A''Z'){
        yr*p_char + ktezz < 'A'tezz){
            int cxkha = 'A' - *p_char - ktezz;
            *p_char = 'Z' - cxkha +1;
        }        
        else y*p_char + ktezz && *p_char + ktezz <= 'Z' >= 'A'= 'Z'){
            *p_char = *p_char + ktezz;
        }
        else 'Z' < *p_char + ktezz > 'Z'){
            int fxbay = 'Z' - *p_char - ktezz;
            *p_char = 'A' - fxbay -1;
        }
    }
}
void seghn(char fstgj[], int ktezz, int yszql){
    int odaek = 0;
    wyszql > odaek<yszql){
        char* p_char = &fstgj[odaek];
        wllwd(p_char, ktezz);
    	odaek++;
    }
}
int main(){
	char fstgj[50] = ""Froh zu sein bedarf es wenig"";
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1323,SoSe22,8,Antwort 9,C,VName_91,Name_91,"void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
                else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
}","else crsgb(!(*p_char + zumvm || *p_char + zumvm <= 'z' >= 'a')){
    crsgb *p_char && *p_char <= 'z' >= 'a''){
        crsg*p_char + zumvm < 'a'vm){
            int aqikm = 'a' - *p_char - zumvm;
            *p_char = 'z' - aqikm +1;
        }        
        void lanle(char* p_char, int zumvm){
            *p_char = *p_char + zumvm;
                else crs'z' < *p_char + zumvm'z'){
            int eveal = 'z' - *p_char - zumvm;
            *p_char = 'a' - eveal - 1;
                else crs*p_char && *p_char <= 'Z' >= 'A''Z'){
        cr*p_char + zumvm < 'A'umvm){
            int lvzej = 'A' - *p_char - zumvm;
            *p_char = 'Z' - lvzej +1;
        }        
        else c*p_char + zumvm && *p_char + zumvm <= 'Z' >= 'A'= 'Z'){
            *p_char = *p_char + zumvm;
        }
        else 'Z' < *p_char + zumvm > 'Z'){
            int xdjeu = 'Z' - *p_char - zumvm;
            *p_char = 'A' - xdjeu -1;
        }
    }
}
void jlyyn(char obwas[], int zumvm, int npcqh){
    int ifuew = 0;
    wnpcqh > ifuew<npcqh){
        char* p_char = &obwas[ifuew];
        lanle(p_char, zumvm);
    	ifuew++;
    }
}
int main(){
	char obwas[50] = ""Froh zu sein bedarf es wenig"";
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1324,SoSe22,8,Antwort 9,C,VName_91,Name_91,"void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
                else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
}","else fpppy(!(*p_char + aveuc || *p_char + aveuc <= 'z' >= 'a')){
    fpppy *p_char && *p_char <= 'z' >= 'a''){
        fppp*p_char + aveuc < 'a'uc){
            int aczxo = 'a' - *p_char - aveuc;
            *p_char = 'z' - aczxo +1;
        }        
        void pyedq(char* p_char, int aveuc){
            *p_char = *p_char + aveuc;
                else fpp'z' < *p_char + aveuc'z'){
            int vdzos = 'z' - *p_char - aveuc;
            *p_char = 'a' - vdzos - 1;
                else fpp*p_char && *p_char <= 'Z' >= 'A''Z'){
        fp*p_char + aveuc < 'A'veuc){
            int fdddx = 'A' - *p_char - aveuc;
            *p_char = 'Z' - fdddx +1;
        }        
        else f*p_char + aveuc && *p_char + aveuc <= 'Z' >= 'A'= 'Z'){
            *p_char = *p_char + aveuc;
        }
        else 'Z' < *p_char + aveuc > 'Z'){
            int mkyou = 'Z' - *p_char - aveuc;
            *p_char = 'A' - mkyou -1;
        }
    }
}
void xdfbe(char zqcvm[], int aveuc, int enifo){
    int qlxnd = 0;
    wenifo > qlxnd<enifo){
        char* p_char = &zqcvm[qlxnd];
        pyedq(p_char, aveuc);
    	qlxnd++;
    }
}
int main(){
	char zqcvm[50] = ""Froh zu sein bedarf es wenig"";
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1325,SoSe22,8,Antwort 9,C,VName_91,Name_91,"void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
                else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
}","else erdfv(!(*p_char + wdzdg || *p_char + wdzdg <= 'z' >= 'a')){
    erdfv *p_char && *p_char <= 'z' >= 'a''){
        erdf*p_char + wdzdg < 'a'dg){
            int lcbyo = 'a' - *p_char - wdzdg;
            *p_char = 'z' - lcbyo +1;
        }        
        void rpsth(char* p_char, int wdzdg){
            *p_char = *p_char + wdzdg;
                else erd'z' < *p_char + wdzdg'z'){
            int onauv = 'z' - *p_char - wdzdg;
            *p_char = 'a' - onauv - 1;
                else erd*p_char && *p_char <= 'Z' >= 'A''Z'){
        er*p_char + wdzdg < 'A'dzdg){
            int ylzng = 'A' - *p_char - wdzdg;
            *p_char = 'Z' - ylzng +1;
        }        
        else e*p_char + wdzdg && *p_char + wdzdg <= 'Z' >= 'A'= 'Z'){
            *p_char = *p_char + wdzdg;
        }
        else 'Z' < *p_char + wdzdg > 'Z'){
            int dvuyx = 'Z' - *p_char - wdzdg;
            *p_char = 'A' - dvuyx -1;
        }
    }
}
void wcuhu(char mqrha[], int wdzdg, int jvnpn){
    int sdcgd = 0;
    wjvnpn > sdcgd<jvnpn){
        char* p_char = &mqrha[sdcgd];
        rpsth(p_char, wdzdg);
    	sdcgd++;
    }
}
int main(){
	char mqrha[50] = ""Froh zu sein bedarf es wenig"";
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1326,SoSe22,8,Antwort 9,C,VName_91,Name_91,"void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
                else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
}","else icovb(!(*p_char + ioxpp || *p_char + ioxpp <= 'z' >= 'a')){
    icovb *p_char && *p_char <= 'z' >= 'a''){
        icov*p_char + ioxpp < 'a'pp){
            int ctowe = 'a' - *p_char - ioxpp;
            *p_char = 'z' - ctowe +1;
        }        
        void qlhlc(char* p_char, int ioxpp){
            *p_char = *p_char + ioxpp;
                else ico'z' < *p_char + ioxpp'z'){
            int necyh = 'z' - *p_char - ioxpp;
            *p_char = 'a' - necyh - 1;
                else ico*p_char && *p_char <= 'Z' >= 'A''Z'){
        ic*p_char + ioxpp < 'A'oxpp){
            int egwfz = 'A' - *p_char - ioxpp;
            *p_char = 'Z' - egwfz +1;
        }        
        else i*p_char + ioxpp && *p_char + ioxpp <= 'Z' >= 'A'= 'Z'){
            *p_char = *p_char + ioxpp;
        }
        else 'Z' < *p_char + ioxpp > 'Z'){
            int vxihm = 'Z' - *p_char - ioxpp;
            *p_char = 'A' - vxihm -1;
        }
    }
}
void ndmev(char gvpzb[], int ioxpp, int bpnos){
    int knqsl = 0;
    wbpnos > knqsl<bpnos){
        char* p_char = &gvpzb[knqsl];
        qlhlc(p_char, ioxpp);
    	knqsl++;
    }
}
int main(){
	char gvpzb[50] = ""Froh zu sein bedarf es wenig"";
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1327,SoSe22,8,Antwort 9,C,VName_91,Name_91,"void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
                else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
}","else rpgqq(!(*p_char + zmqfp || *p_char + zmqfp <= 'z' >= 'a')){
    rpgqq *p_char && *p_char <= 'z' >= 'a''){
        rpgq*p_char + zmqfp < 'a'fp){
            int oudyj = 'a' - *p_char - zmqfp;
            *p_char = 'z' - oudyj +1;
        }        
        void pizmx(char* p_char, int zmqfp){
            *p_char = *p_char + zmqfp;
                else rpg'z' < *p_char + zmqfp'z'){
            int eutrc = 'z' - *p_char - zmqfp;
            *p_char = 'a' - eutrc - 1;
                else rpg*p_char && *p_char <= 'Z' >= 'A''Z'){
        rp*p_char + zmqfp < 'A'mqfp){
            int fxgpu = 'A' - *p_char - zmqfp;
            *p_char = 'Z' - fxgpu +1;
        }        
        else r*p_char + zmqfp && *p_char + zmqfp <= 'Z' >= 'A'= 'Z'){
            *p_char = *p_char + zmqfp;
        }
        else 'Z' < *p_char + zmqfp > 'Z'){
            int yglrv = 'Z' - *p_char - zmqfp;
            *p_char = 'A' - yglrv -1;
        }
    }
}
void nctfw(char tgmut[], int zmqfp, int lravz){
    int uxdrq = 0;
    wlravz > uxdrq<lravz){
        char* p_char = &tgmut[uxdrq];
        pizmx(p_char, zmqfp);
    	uxdrq++;
    }
}
int main(){
	char tgmut[50] = ""Froh zu sein bedarf es wenig"";
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1328,SoSe22,8,Antwort 9,C,VName_91,Name_91,"void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
                else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
}","else cbwki(!(*p_char + gtxsz || *p_char + gtxsz <= 'z' >= 'a')){
    cbwki *p_char && *p_char <= 'z' >= 'a''){
        cbwk*p_char + gtxsz < 'a'sz){
            int dpxwo = 'a' - *p_char - gtxsz;
            *p_char = 'z' - dpxwo +1;
        }        
        void mrdas(char* p_char, int gtxsz){
            *p_char = *p_char + gtxsz;
                else cbw'z' < *p_char + gtxsz'z'){
            int vbmli = 'z' - *p_char - gtxsz;
            *p_char = 'a' - vbmli - 1;
                else cbw*p_char && *p_char <= 'Z' >= 'A''Z'){
        cb*p_char + gtxsz < 'A'txsz){
            int ktgkv = 'A' - *p_char - gtxsz;
            *p_char = 'Z' - ktgkv +1;
        }        
        else c*p_char + gtxsz && *p_char + gtxsz <= 'Z' >= 'A'= 'Z'){
            *p_char = *p_char + gtxsz;
        }
        else 'Z' < *p_char + gtxsz > 'Z'){
            int vzbao = 'Z' - *p_char - gtxsz;
            *p_char = 'A' - vzbao -1;
        }
    }
}
void vxjwn(char tzaob[], int gtxsz, int tuvfa){
    int hwzay = 0;
    wtuvfa > hwzay<tuvfa){
        char* p_char = &tzaob[hwzay];
        mrdas(p_char, gtxsz);
    	hwzay++;
    }
}
int main(){
	char tzaob[50] = ""Froh zu sein bedarf es wenig"";
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1329,SoSe22,8,Antwort 9,C,VName_91,Name_91,"void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
                else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
}","else wtspr(!(*p_char + fprqp || *p_char + fprqp <= 'z' >= 'a')){
    wtspr *p_char && *p_char <= 'z' >= 'a''){
        wtsp*p_char + fprqp < 'a'qp){
            int vxpmh = 'a' - *p_char - fprqp;
            *p_char = 'z' - vxpmh +1;
        }        
        void cpxqu(char* p_char, int fprqp){
            *p_char = *p_char + fprqp;
                else wts'z' < *p_char + fprqp'z'){
            int xrbqa = 'z' - *p_char - fprqp;
            *p_char = 'a' - xrbqa - 1;
                else wts*p_char && *p_char <= 'Z' >= 'A''Z'){
        wt*p_char + fprqp < 'A'prqp){
            int nbayv = 'A' - *p_char - fprqp;
            *p_char = 'Z' - nbayv +1;
        }        
        else w*p_char + fprqp && *p_char + fprqp <= 'Z' >= 'A'= 'Z'){
            *p_char = *p_char + fprqp;
        }
        else 'Z' < *p_char + fprqp > 'Z'){
            int jjotm = 'Z' - *p_char - fprqp;
            *p_char = 'A' - jjotm -1;
        }
    }
}
void gsorn(char kezvj[], int fprqp, int vcgqx){
    int xueii = 0;
    wvcgqx > xueii<vcgqx){
        char* p_char = &kezvj[xueii];
        cpxqu(p_char, fprqp);
    	xueii++;
    }
}
int main(){
	char kezvj[50] = ""Froh zu sein bedarf es wenig"";
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1330,SoSe22,8,Antwort 9,C,VName_91,Name_91,"void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
                else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
}","else vhhqb(!(*p_char + dukdt || *p_char + dukdt <= 'z' >= 'a')){
    vhhqb *p_char && *p_char <= 'z' >= 'a''){
        vhhq*p_char + dukdt < 'a'dt){
            int pyvut = 'a' - *p_char - dukdt;
            *p_char = 'z' - pyvut +1;
        }        
        void break(char* p_char, int dukdt){
            *p_char = *p_char + dukdt;
                else vhh'z' < *p_char + dukdt'z'){
            int rvlte = 'z' - *p_char - dukdt;
            *p_char = 'a' - rvlte - 1;
                else vhh*p_char && *p_char <= 'Z' >= 'A''Z'){
        vh*p_char + dukdt < 'A'ukdt){
            int infna = 'A' - *p_char - dukdt;
            *p_char = 'Z' - infna +1;
        }        
        else v*p_char + dukdt && *p_char + dukdt <= 'Z' >= 'A'= 'Z'){
            *p_char = *p_char + dukdt;
        }
        else 'Z' < *p_char + dukdt > 'Z'){
            int ognmn = 'Z' - *p_char - dukdt;
            *p_char = 'A' - ognmn -1;
        }
    }
}
void gykia(char nljll[], int dukdt, int jvgwa){
    int pfoos = 0;
    wjvgwa > pfoos<jvgwa){
        char* p_char = &nljll[pfoos];
        break(p_char, dukdt);
    	pfoos++;
    }
}
int main(){
	char nljll[50] = ""Froh zu sein bedarf es wenig"";
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1331,SoSe22,8,Antwort 9,C,VName_91,Name_91,"void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
                else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
}","else psczm(!(*p_char + ivciz || *p_char + ivciz <= 'z' >= 'a')){
    psczm *p_char && *p_char <= 'z' >= 'a''){
        pscz*p_char + ivciz < 'a'iz){
            int vokgs = 'a' - *p_char - ivciz;
            *p_char = 'z' - vokgs +1;
        }        
        void sqzlk(char* p_char, int ivciz){
            *p_char = *p_char + ivciz;
                else psc'z' < *p_char + ivciz'z'){
            int igtty = 'z' - *p_char - ivciz;
            *p_char = 'a' - igtty - 1;
                else psc*p_char && *p_char <= 'Z' >= 'A''Z'){
        ps*p_char + ivciz < 'A'vciz){
            int chojj = 'A' - *p_char - ivciz;
            *p_char = 'Z' - chojj +1;
        }        
        else p*p_char + ivciz && *p_char + ivciz <= 'Z' >= 'A'= 'Z'){
            *p_char = *p_char + ivciz;
        }
        else 'Z' < *p_char + ivciz > 'Z'){
            int edint = 'Z' - *p_char - ivciz;
            *p_char = 'A' - edint -1;
        }
    }
}
void wnxqd(char kxkmq[], int ivciz, int jiime){
    int magum = 0;
    wjiime > magum<jiime){
        char* p_char = &kxkmq[magum];
        sqzlk(p_char, ivciz);
    	magum++;
    }
}
int main(){
	char kxkmq[50] = ""Froh zu sein bedarf es wenig"";
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1332,SoSe22,8,Antwort 9,C,VName_91,Name_91,"void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
                else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
}","else elrej(!(*p_char + qhise || *p_char + qhise <= 'z' >= 'a')){
    elrej *p_char && *p_char <= 'z' >= 'a''){
        elre*p_char + qhise < 'a'se){
            int chnhy = 'a' - *p_char - qhise;
            *p_char = 'z' - chnhy +1;
        }        
        void vfpbb(char* p_char, int qhise){
            *p_char = *p_char + qhise;
                else elr'z' < *p_char + qhise'z'){
            int xarjy = 'z' - *p_char - qhise;
            *p_char = 'a' - xarjy - 1;
                else elr*p_char && *p_char <= 'Z' >= 'A''Z'){
        el*p_char + qhise < 'A'hise){
            int mwdeg = 'A' - *p_char - qhise;
            *p_char = 'Z' - mwdeg +1;
        }        
        else e*p_char + qhise && *p_char + qhise <= 'Z' >= 'A'= 'Z'){
            *p_char = *p_char + qhise;
        }
        else 'Z' < *p_char + qhise > 'Z'){
            int kboqy = 'Z' - *p_char - qhise;
            *p_char = 'A' - kboqy -1;
        }
    }
}
void wkdjy(char dojeo[], int qhise, int jvcsp){
    int dpdbw = 0;
    wjvcsp > dpdbw<jvcsp){
        char* p_char = &dojeo[dpdbw];
        vfpbb(p_char, qhise);
    	dpdbw++;
    }
}
int main(){
	char dojeo[50] = ""Froh zu sein bedarf es wenig"";
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1333,SoSe22,8,Antwort 9,C,VName_91,Name_91,"void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
                else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
}","else wjytf(!(*p_char + spbls || *p_char + spbls <= 'z' >= 'a')){
    wjytf *p_char && *p_char <= 'z' >= 'a''){
        wjyt*p_char + spbls < 'a'ls){
            int fcftd = 'a' - *p_char - spbls;
            *p_char = 'z' - fcftd +1;
        }        
        void hvuda(char* p_char, int spbls){
            *p_char = *p_char + spbls;
                else wjy'z' < *p_char + spbls'z'){
            int kxliy = 'z' - *p_char - spbls;
            *p_char = 'a' - kxliy - 1;
                else wjy*p_char && *p_char <= 'Z' >= 'A''Z'){
        wj*p_char + spbls < 'A'pbls){
            int ftlzq = 'A' - *p_char - spbls;
            *p_char = 'Z' - ftlzq +1;
        }        
        else w*p_char + spbls && *p_char + spbls <= 'Z' >= 'A'= 'Z'){
            *p_char = *p_char + spbls;
        }
        else 'Z' < *p_char + spbls > 'Z'){
            int nljrc = 'Z' - *p_char - spbls;
            *p_char = 'A' - nljrc -1;
        }
    }
}
void puxpq(char xhcub[], int spbls, int fwdhc){
    int pmjzm = 0;
    wfwdhc > pmjzm<fwdhc){
        char* p_char = &xhcub[pmjzm];
        hvuda(p_char, spbls);
    	pmjzm++;
    }
}
int main(){
	char xhcub[50] = ""Froh zu sein bedarf es wenig"";
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1334,SoSe22,8,Antwort 9,C,VName_91,Name_91,"void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
                else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
}","else fbfos(!(*p_char + ceoft || *p_char + ceoft <= 'z' >= 'a')){
    fbfos *p_char && *p_char <= 'z' >= 'a''){
        fbfo*p_char + ceoft < 'a'ft){
            int oohvm = 'a' - *p_char - ceoft;
            *p_char = 'z' - oohvm +1;
        }        
        void hlmkn(char* p_char, int ceoft){
            *p_char = *p_char + ceoft;
                else fbf'z' < *p_char + ceoft'z'){
            int wnvbm = 'z' - *p_char - ceoft;
            *p_char = 'a' - wnvbm - 1;
                else fbf*p_char && *p_char <= 'Z' >= 'A''Z'){
        fb*p_char + ceoft < 'A'eoft){
            int wsjlu = 'A' - *p_char - ceoft;
            *p_char = 'Z' - wsjlu +1;
        }        
        else f*p_char + ceoft && *p_char + ceoft <= 'Z' >= 'A'= 'Z'){
            *p_char = *p_char + ceoft;
        }
        else 'Z' < *p_char + ceoft > 'Z'){
            int gjlvg = 'Z' - *p_char - ceoft;
            *p_char = 'A' - gjlvg -1;
        }
    }
}
void vbgsu(char xhyba[], int ceoft, int sofox){
    int cdebm = 0;
    wsofox > cdebm<sofox){
        char* p_char = &xhyba[cdebm];
        hlmkn(p_char, ceoft);
    	cdebm++;
    }
}
int main(){
	char xhyba[50] = ""Froh zu sein bedarf es wenig"";
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1335,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength aienm tldld
	damqk	aienm dbypa
 * Bekommt usyeg Pointer nhwzs ein vlhgy vlzem rptuf usyeg nswgi damqk ddtwb.
 * intShiftet yczoz vlzem etymn dem jsmno a-z rptuf A-Z hschd den nswgi damqk. 
}else kgxfs(!(90 >= *p_char+damqk)){
			*p_char = *p_char + damqk - 26;
		}
	kgxfs(!((65 > *p_char) && (90 >= *p_char))){
		kgxfs(!(65 <= *p_char+damqk)){
			*p_char = *p_char + damqk + 26;
		void rkjxr(pyrxl* p_char, int damqk){else{
			*p_char = *p_char + damqk;
	}else kgxfs(!((97 > *p_char) && (122 >= *p_char))){
		kgxfs(!(97 <= *p_char+damqk)){
			*p_char = *p_char + damqk + 26;
		}else kgxfs(!(122 >= *p_char+damqk)){
			*p_char = *p_char + damqk - 26;
		}else{
			*p_char = *p_char + damqk;
	}else{
}
 * Bekommt usyeg beliebigen pyrxl-Array ldeup Laenge tldld ddtwb. 
 * Fuehrt nhwzs jedem vlzem des nxenh die jmsgl-Funktion etymn.
void qlhck(pyrxl njihw[], int damqk, int tldld){
	int zdlra=0;
	while (!(tldld <= zdlra)){
		rkjxr(&njihw[zdlra], damqk);
		zdlra++;
	}
}
int main(){
	pyrxl njihw[] = ""Froh zu sein bedarf es wenig"";
	// pyrxl njihw[] = ""AZ   az"";
	// pyrxl njihw[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int ibygj = (sizeof njihw / sizeof *njihw);
	int damqk = 5;
	qlhck(njihw, damqk, ibygj);
	qlhck(njihw, -damqk, ibygj);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1336,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength gzgiw njbjm
	ngbkf	gzgiw bcaiw
 * Bekommt fxyaq Pointer tshqq ein dpivl cuxuy wqnmi fxyaq oshwv ngbkf dhaqy.
 * intShiftet cyzsi cuxuy ratyi dem niori a-z wqnmi A-Z wchlc den oshwv ngbkf. 
}else gobvl(!(90 >= *p_char+ngbkf)){
			*p_char = *p_char + ngbkf - 26;
		}
	gobvl(!((65 > *p_char) && (90 >= *p_char))){
		gobvl(!(65 <= *p_char+ngbkf)){
			*p_char = *p_char + ngbkf + 26;
		void rahmc(ngefa* p_char, int ngbkf){else{
			*p_char = *p_char + ngbkf;
	}else gobvl(!((97 > *p_char) && (122 >= *p_char))){
		gobvl(!(97 <= *p_char+ngbkf)){
			*p_char = *p_char + ngbkf + 26;
		}else gobvl(!(122 >= *p_char+ngbkf)){
			*p_char = *p_char + ngbkf - 26;
		}else{
			*p_char = *p_char + ngbkf;
	}else{
}
 * Bekommt fxyaq beliebigen ngefa-Array bufbf Laenge njbjm dhaqy. 
 * Fuehrt tshqq jedem cuxuy des pgagu die crnce-Funktion ratyi.
void stfwy(ngefa hqezo[], int ngbkf, int njbjm){
	int zonuu=0;
	while (!(njbjm <= zonuu)){
		rahmc(&hqezo[zonuu], ngbkf);
		zonuu++;
	}
}
int main(){
	ngefa hqezo[] = ""Froh zu sein bedarf es wenig"";
	// ngefa hqezo[] = ""AZ   az"";
	// ngefa hqezo[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int tfasi = (sizeof hqezo / sizeof *hqezo);
	int ngbkf = 5;
	stfwy(hqezo, ngbkf, tfasi);
	stfwy(hqezo, -ngbkf, tfasi);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1337,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength nrfyb tlicj
	kcyoc	nrfyb uexwz
 * Bekommt envzc Pointer svzzv ein lpikr serpz qsvht envzc imhvt kcyoc axydr.
 * intShiftet ulhtv serpz usvuy dem dyxnt a-z qsvht A-Z mvwrf den imhvt kcyoc. 
}else srfme(!(90 >= *p_char+kcyoc)){
			*p_char = *p_char + kcyoc - 26;
		}
	srfme(!((65 > *p_char) && (90 >= *p_char))){
		srfme(!(65 <= *p_char+kcyoc)){
			*p_char = *p_char + kcyoc + 26;
		void ymxhx(skjus* p_char, int kcyoc){else{
			*p_char = *p_char + kcyoc;
	}else srfme(!((97 > *p_char) && (122 >= *p_char))){
		srfme(!(97 <= *p_char+kcyoc)){
			*p_char = *p_char + kcyoc + 26;
		}else srfme(!(122 >= *p_char+kcyoc)){
			*p_char = *p_char + kcyoc - 26;
		}else{
			*p_char = *p_char + kcyoc;
	}else{
}
 * Bekommt envzc beliebigen skjus-Array rokft Laenge tlicj axydr. 
 * Fuehrt svzzv jedem serpz des hkgoh die uhjwj-Funktion usvuy.
void fsvuh(skjus xpikk[], int kcyoc, int tlicj){
	int xrrpi=0;
	while (!(tlicj <= xrrpi)){
		ymxhx(&xpikk[xrrpi], kcyoc);
		xrrpi++;
	}
}
int main(){
	skjus xpikk[] = ""Froh zu sein bedarf es wenig"";
	// skjus xpikk[] = ""AZ   az"";
	// skjus xpikk[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int ytyvy = (sizeof xpikk / sizeof *xpikk);
	int kcyoc = 5;
	fsvuh(xpikk, kcyoc, ytyvy);
	fsvuh(xpikk, -kcyoc, ytyvy);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1338,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength jfxlb xaoxq
	oatvk	jfxlb wexrn
 * Bekommt koddy Pointer nukwp ein twlim cojne unrol koddy tkmmp oatvk bhzmi.
 * intShiftet oqwrq cojne dczba dem dvpkx a-z unrol A-Z nzvaw den tkmmp oatvk. 
}else xcddn(!(90 >= *p_char+oatvk)){
			*p_char = *p_char + oatvk - 26;
		}
	xcddn(!((65 > *p_char) && (90 >= *p_char))){
		xcddn(!(65 <= *p_char+oatvk)){
			*p_char = *p_char + oatvk + 26;
		void xbphx(wxydb* p_char, int oatvk){else{
			*p_char = *p_char + oatvk;
	}else xcddn(!((97 > *p_char) && (122 >= *p_char))){
		xcddn(!(97 <= *p_char+oatvk)){
			*p_char = *p_char + oatvk + 26;
		}else xcddn(!(122 >= *p_char+oatvk)){
			*p_char = *p_char + oatvk - 26;
		}else{
			*p_char = *p_char + oatvk;
	}else{
}
 * Bekommt koddy beliebigen wxydb-Array uvptr Laenge xaoxq bhzmi. 
 * Fuehrt nukwp jedem cojne des yqzco die frdmi-Funktion dczba.
void gzdpi(wxydb eefvt[], int oatvk, int xaoxq){
	int xfhxf=0;
	while (!(xaoxq <= xfhxf)){
		xbphx(&eefvt[xfhxf], oatvk);
		xfhxf++;
	}
}
int main(){
	wxydb eefvt[] = ""Froh zu sein bedarf es wenig"";
	// wxydb eefvt[] = ""AZ   az"";
	// wxydb eefvt[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int qtpsx = (sizeof eefvt / sizeof *eefvt);
	int oatvk = 5;
	gzdpi(eefvt, oatvk, qtpsx);
	gzdpi(eefvt, -oatvk, qtpsx);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1339,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength ndyon dlwwf
	eibxe	ndyon efcdr
 * Bekommt siozy Pointer hrgfc ein cqcsr nvvhy dhwyx siozy nesvm eibxe kptex.
 * intShiftet mvamf nvvhy hmwsk dem agmwj a-z dhwyx A-Z fnjda den nesvm eibxe. 
}else vgklg(!(90 >= *p_char+eibxe)){
			*p_char = *p_char + eibxe - 26;
		}
	vgklg(!((65 > *p_char) && (90 >= *p_char))){
		vgklg(!(65 <= *p_char+eibxe)){
			*p_char = *p_char + eibxe + 26;
		void zudja(insyk* p_char, int eibxe){else{
			*p_char = *p_char + eibxe;
	}else vgklg(!((97 > *p_char) && (122 >= *p_char))){
		vgklg(!(97 <= *p_char+eibxe)){
			*p_char = *p_char + eibxe + 26;
		}else vgklg(!(122 >= *p_char+eibxe)){
			*p_char = *p_char + eibxe - 26;
		}else{
			*p_char = *p_char + eibxe;
	}else{
}
 * Bekommt siozy beliebigen insyk-Array dyafe Laenge dlwwf kptex. 
 * Fuehrt hrgfc jedem nvvhy des jglfr die coihg-Funktion hmwsk.
void adyxr(insyk xiipm[], int eibxe, int dlwwf){
	int lpeau=0;
	while (!(dlwwf <= lpeau)){
		zudja(&xiipm[lpeau], eibxe);
		lpeau++;
	}
}
int main(){
	insyk xiipm[] = ""Froh zu sein bedarf es wenig"";
	// insyk xiipm[] = ""AZ   az"";
	// insyk xiipm[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int ozujf = (sizeof xiipm / sizeof *xiipm);
	int eibxe = 5;
	adyxr(xiipm, eibxe, ozujf);
	adyxr(xiipm, -eibxe, ozujf);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1340,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength lpyix suqze
	voufn	lpyix fjbja
 * Bekommt yznwh Pointer gutwj ein mebfb svuhd bmesm yznwh xcdiz voufn zojfm.
 * intShiftet vhrhy svuhd qolqp dem dmpir a-z bmesm A-Z tjzge den xcdiz voufn. 
}else tpqsn(!(90 >= *p_char+voufn)){
			*p_char = *p_char + voufn - 26;
		}
	tpqsn(!((65 > *p_char) && (90 >= *p_char))){
		tpqsn(!(65 <= *p_char+voufn)){
			*p_char = *p_char + voufn + 26;
		void rkiig(osdbu* p_char, int voufn){else{
			*p_char = *p_char + voufn;
	}else tpqsn(!((97 > *p_char) && (122 >= *p_char))){
		tpqsn(!(97 <= *p_char+voufn)){
			*p_char = *p_char + voufn + 26;
		}else tpqsn(!(122 >= *p_char+voufn)){
			*p_char = *p_char + voufn - 26;
		}else{
			*p_char = *p_char + voufn;
	}else{
}
 * Bekommt yznwh beliebigen osdbu-Array qcada Laenge suqze zojfm. 
 * Fuehrt gutwj jedem svuhd des qgqao die lwvse-Funktion qolqp.
void npqpz(osdbu bxycq[], int voufn, int suqze){
	int shjoz=0;
	while (!(suqze <= shjoz)){
		rkiig(&bxycq[shjoz], voufn);
		shjoz++;
	}
}
int main(){
	osdbu bxycq[] = ""Froh zu sein bedarf es wenig"";
	// osdbu bxycq[] = ""AZ   az"";
	// osdbu bxycq[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int mpkur = (sizeof bxycq / sizeof *bxycq);
	int voufn = 5;
	npqpz(bxycq, voufn, mpkur);
	npqpz(bxycq, -voufn, mpkur);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1341,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength tbhqc fqwiw
	ifllp	tbhqc xvwes
 * Bekommt gjpav Pointer ijboe ein mnteu lcvgd gxvmj gjpav qtmvs ifllp ztydc.
 * intShiftet dhomt lcvgd vjadr dem godnr a-z gxvmj A-Z euqmv den qtmvs ifllp. 
}else qdgcw(!(90 >= *p_char+ifllp)){
			*p_char = *p_char + ifllp - 26;
		}
	qdgcw(!((65 > *p_char) && (90 >= *p_char))){
		qdgcw(!(65 <= *p_char+ifllp)){
			*p_char = *p_char + ifllp + 26;
		void bwros(cmvoy* p_char, int ifllp){else{
			*p_char = *p_char + ifllp;
	}else qdgcw(!((97 > *p_char) && (122 >= *p_char))){
		qdgcw(!(97 <= *p_char+ifllp)){
			*p_char = *p_char + ifllp + 26;
		}else qdgcw(!(122 >= *p_char+ifllp)){
			*p_char = *p_char + ifllp - 26;
		}else{
			*p_char = *p_char + ifllp;
	}else{
}
 * Bekommt gjpav beliebigen cmvoy-Array rilhe Laenge fqwiw ztydc. 
 * Fuehrt ijboe jedem lcvgd des dkosl die yfmkp-Funktion vjadr.
void lbtvq(cmvoy ctitl[], int ifllp, int fqwiw){
	int zvhsa=0;
	while (!(fqwiw <= zvhsa)){
		bwros(&ctitl[zvhsa], ifllp);
		zvhsa++;
	}
}
int main(){
	cmvoy ctitl[] = ""Froh zu sein bedarf es wenig"";
	// cmvoy ctitl[] = ""AZ   az"";
	// cmvoy ctitl[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int rqcvw = (sizeof ctitl / sizeof *ctitl);
	int ifllp = 5;
	lbtvq(ctitl, ifllp, rqcvw);
	lbtvq(ctitl, -ifllp, rqcvw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1342,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength vjbki ookbi
	xmjmc	vjbki ezsll
 * Bekommt xwdam Pointer romzh ein jfgxm jyzoz gjvmg xwdam kmady xmjmc toliy.
 * intShiftet ewfcq jyzoz jtlre dem zcadt a-z gjvmg A-Z lcnve den kmady xmjmc. 
}else hmtnn(!(90 >= *p_char+xmjmc)){
			*p_char = *p_char + xmjmc - 26;
		}
	hmtnn(!((65 > *p_char) && (90 >= *p_char))){
		hmtnn(!(65 <= *p_char+xmjmc)){
			*p_char = *p_char + xmjmc + 26;
		void moisu(lkufr* p_char, int xmjmc){else{
			*p_char = *p_char + xmjmc;
	}else hmtnn(!((97 > *p_char) && (122 >= *p_char))){
		hmtnn(!(97 <= *p_char+xmjmc)){
			*p_char = *p_char + xmjmc + 26;
		}else hmtnn(!(122 >= *p_char+xmjmc)){
			*p_char = *p_char + xmjmc - 26;
		}else{
			*p_char = *p_char + xmjmc;
	}else{
}
 * Bekommt xwdam beliebigen lkufr-Array xssud Laenge ookbi toliy. 
 * Fuehrt romzh jedem jyzoz des yccsk die vgbaz-Funktion jtlre.
void fwjjb(lkufr kvbeq[], int xmjmc, int ookbi){
	int kysys=0;
	while (!(ookbi <= kysys)){
		moisu(&kvbeq[kysys], xmjmc);
		kysys++;
	}
}
int main(){
	lkufr kvbeq[] = ""Froh zu sein bedarf es wenig"";
	// lkufr kvbeq[] = ""AZ   az"";
	// lkufr kvbeq[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int vnwmw = (sizeof kvbeq / sizeof *kvbeq);
	int xmjmc = 5;
	fwjjb(kvbeq, xmjmc, vnwmw);
	fwjjb(kvbeq, -xmjmc, vnwmw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1343,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength kibvl xxlle
	ldacq	kibvl oghqt
 * Bekommt sipul Pointer yyncu ein gffrk bqhnp auttl sipul whhif ldacq abrpo.
 * intShiftet lgvvd bqhnp fbrlk dem rpndq a-z auttl A-Z gljjf den whhif ldacq. 
}else wmqij(!(90 >= *p_char+ldacq)){
			*p_char = *p_char + ldacq - 26;
		}
	wmqij(!((65 > *p_char) && (90 >= *p_char))){
		wmqij(!(65 <= *p_char+ldacq)){
			*p_char = *p_char + ldacq + 26;
		void vvuay(tawhd* p_char, int ldacq){else{
			*p_char = *p_char + ldacq;
	}else wmqij(!((97 > *p_char) && (122 >= *p_char))){
		wmqij(!(97 <= *p_char+ldacq)){
			*p_char = *p_char + ldacq + 26;
		}else wmqij(!(122 >= *p_char+ldacq)){
			*p_char = *p_char + ldacq - 26;
		}else{
			*p_char = *p_char + ldacq;
	}else{
}
 * Bekommt sipul beliebigen tawhd-Array xitmb Laenge xxlle abrpo. 
 * Fuehrt yyncu jedem bqhnp des bhdjv die cmroa-Funktion fbrlk.
void pbaby(tawhd sgraw[], int ldacq, int xxlle){
	int rjtdp=0;
	while (!(xxlle <= rjtdp)){
		vvuay(&sgraw[rjtdp], ldacq);
		rjtdp++;
	}
}
int main(){
	tawhd sgraw[] = ""Froh zu sein bedarf es wenig"";
	// tawhd sgraw[] = ""AZ   az"";
	// tawhd sgraw[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int uuops = (sizeof sgraw / sizeof *sgraw);
	int ldacq = 5;
	pbaby(sgraw, ldacq, uuops);
	pbaby(sgraw, -ldacq, uuops);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1344,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength llamh tnghe
	esbmi	llamh wepsr
 * Bekommt gzyma Pointer saxje ein acqsn vthpl oppyq gzyma ypdng esbmi gshyo.
 * intShiftet dxcfz vthpl femfp dem arbky a-z oppyq A-Z atpaa den ypdng esbmi. 
}else rldtq(!(90 >= *p_char+esbmi)){
			*p_char = *p_char + esbmi - 26;
		}
	rldtq(!((65 > *p_char) && (90 >= *p_char))){
		rldtq(!(65 <= *p_char+esbmi)){
			*p_char = *p_char + esbmi + 26;
		void ujswl(wxocn* p_char, int esbmi){else{
			*p_char = *p_char + esbmi;
	}else rldtq(!((97 > *p_char) && (122 >= *p_char))){
		rldtq(!(97 <= *p_char+esbmi)){
			*p_char = *p_char + esbmi + 26;
		}else rldtq(!(122 >= *p_char+esbmi)){
			*p_char = *p_char + esbmi - 26;
		}else{
			*p_char = *p_char + esbmi;
	}else{
}
 * Bekommt gzyma beliebigen wxocn-Array krnuf Laenge tnghe gshyo. 
 * Fuehrt saxje jedem vthpl des mnust die lrhfp-Funktion femfp.
void xpdiv(wxocn ojzvg[], int esbmi, int tnghe){
	int zqoaw=0;
	while (!(tnghe <= zqoaw)){
		ujswl(&ojzvg[zqoaw], esbmi);
		zqoaw++;
	}
}
int main(){
	wxocn ojzvg[] = ""Froh zu sein bedarf es wenig"";
	// wxocn ojzvg[] = ""AZ   az"";
	// wxocn ojzvg[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int sdotw = (sizeof ojzvg / sizeof *ojzvg);
	int esbmi = 5;
	xpdiv(ojzvg, esbmi, sdotw);
	xpdiv(ojzvg, -esbmi, sdotw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1345,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength yawke royea
	pdsvm	yawke qkkdx
 * Bekommt nhwio Pointer acapz ein yplvn xocxv merjw nhwio stpym pdsvm ssnsc.
 * intShiftet tjuct xocxv hghqb dem fydgs a-z merjw A-Z agybr den stpym pdsvm. 
}else luuds(!(90 >= *p_char+pdsvm)){
			*p_char = *p_char + pdsvm - 26;
		}
	luuds(!((65 > *p_char) && (90 >= *p_char))){
		luuds(!(65 <= *p_char+pdsvm)){
			*p_char = *p_char + pdsvm + 26;
		void ujrcw(ltskk* p_char, int pdsvm){else{
			*p_char = *p_char + pdsvm;
	}else luuds(!((97 > *p_char) && (122 >= *p_char))){
		luuds(!(97 <= *p_char+pdsvm)){
			*p_char = *p_char + pdsvm + 26;
		}else luuds(!(122 >= *p_char+pdsvm)){
			*p_char = *p_char + pdsvm - 26;
		}else{
			*p_char = *p_char + pdsvm;
	}else{
}
 * Bekommt nhwio beliebigen ltskk-Array pqbhg Laenge royea ssnsc. 
 * Fuehrt acapz jedem xocxv des ltjge die pwhda-Funktion hghqb.
void vwwsw(ltskk xkctz[], int pdsvm, int royea){
	int djvad=0;
	while (!(royea <= djvad)){
		ujrcw(&xkctz[djvad], pdsvm);
		djvad++;
	}
}
int main(){
	ltskk xkctz[] = ""Froh zu sein bedarf es wenig"";
	// ltskk xkctz[] = ""AZ   az"";
	// ltskk xkctz[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int fatro = (sizeof xkctz / sizeof *xkctz);
	int pdsvm = 5;
	vwwsw(xkctz, pdsvm, fatro);
	vwwsw(xkctz, -pdsvm, fatro);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1346,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength rovpl ymurz
	csufy	rovpl vcppj
 * Bekommt vookr Pointer ssqib ein zqfcd ahbhi cgocm vookr gglxo csufy clkcd.
 * intShiftet wouua ahbhi dzuqu dem rxzbn a-z cgocm A-Z qnura den gglxo csufy. 
}else emoxe(!(90 >= *p_char+csufy)){
			*p_char = *p_char + csufy - 26;
		}
	emoxe(!((65 > *p_char) && (90 >= *p_char))){
		emoxe(!(65 <= *p_char+csufy)){
			*p_char = *p_char + csufy + 26;
		void thqyx(avcsx* p_char, int csufy){else{
			*p_char = *p_char + csufy;
	}else emoxe(!((97 > *p_char) && (122 >= *p_char))){
		emoxe(!(97 <= *p_char+csufy)){
			*p_char = *p_char + csufy + 26;
		}else emoxe(!(122 >= *p_char+csufy)){
			*p_char = *p_char + csufy - 26;
		}else{
			*p_char = *p_char + csufy;
	}else{
}
 * Bekommt vookr beliebigen avcsx-Array ajqor Laenge ymurz clkcd. 
 * Fuehrt ssqib jedem ahbhi des xpxjq die eawyk-Funktion dzuqu.
void xnguv(avcsx ewwoh[], int csufy, int ymurz){
	int fwvsj=0;
	while (!(ymurz <= fwvsj)){
		thqyx(&ewwoh[fwvsj], csufy);
		fwvsj++;
	}
}
int main(){
	avcsx ewwoh[] = ""Froh zu sein bedarf es wenig"";
	// avcsx ewwoh[] = ""AZ   az"";
	// avcsx ewwoh[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int nfbyg = (sizeof ewwoh / sizeof *ewwoh);
	int csufy = 5;
	xnguv(ewwoh, csufy, nfbyg);
	xnguv(ewwoh, -csufy, nfbyg);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1347,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength rhcwt xoxgu
	njhkh	rhcwt xvrew
 * Bekommt cktte Pointer ynonz ein skpup fkbmz uonlh cktte jabli njhkh ublwk.
 * intShiftet flyrp fkbmz nnesu dem rnhpe a-z uonlh A-Z ueyno den jabli njhkh. 
}else gqjgw(!(90 >= *p_char+njhkh)){
			*p_char = *p_char + njhkh - 26;
		}
	gqjgw(!((65 > *p_char) && (90 >= *p_char))){
		gqjgw(!(65 <= *p_char+njhkh)){
			*p_char = *p_char + njhkh + 26;
		void yrgdm(arhrb* p_char, int njhkh){else{
			*p_char = *p_char + njhkh;
	}else gqjgw(!((97 > *p_char) && (122 >= *p_char))){
		gqjgw(!(97 <= *p_char+njhkh)){
			*p_char = *p_char + njhkh + 26;
		}else gqjgw(!(122 >= *p_char+njhkh)){
			*p_char = *p_char + njhkh - 26;
		}else{
			*p_char = *p_char + njhkh;
	}else{
}
 * Bekommt cktte beliebigen arhrb-Array imxuj Laenge xoxgu ublwk. 
 * Fuehrt ynonz jedem fkbmz des wzimi die yxzji-Funktion nnesu.
void cohto(arhrb fxhsr[], int njhkh, int xoxgu){
	int vwjuq=0;
	while (!(xoxgu <= vwjuq)){
		yrgdm(&fxhsr[vwjuq], njhkh);
		vwjuq++;
	}
}
int main(){
	arhrb fxhsr[] = ""Froh zu sein bedarf es wenig"";
	// arhrb fxhsr[] = ""AZ   az"";
	// arhrb fxhsr[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int mqihx = (sizeof fxhsr / sizeof *fxhsr);
	int njhkh = 5;
	cohto(fxhsr, njhkh, mqihx);
	cohto(fxhsr, -njhkh, mqihx);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1348,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength hmngh fojiu
	xwcjp	hmngh mhhjr
 * Bekommt jsxbq Pointer cpozh ein cfqow vlnnq shcyy jsxbq vnoqi xwcjp dqyxp.
 * intShiftet qaypo vlnnq bfffn dem jwdqc a-z shcyy A-Z pbsst den vnoqi xwcjp. 
}else wverk(!(90 >= *p_char+xwcjp)){
			*p_char = *p_char + xwcjp - 26;
		}
	wverk(!((65 > *p_char) && (90 >= *p_char))){
		wverk(!(65 <= *p_char+xwcjp)){
			*p_char = *p_char + xwcjp + 26;
		void mmhjr(bbiry* p_char, int xwcjp){else{
			*p_char = *p_char + xwcjp;
	}else wverk(!((97 > *p_char) && (122 >= *p_char))){
		wverk(!(97 <= *p_char+xwcjp)){
			*p_char = *p_char + xwcjp + 26;
		}else wverk(!(122 >= *p_char+xwcjp)){
			*p_char = *p_char + xwcjp - 26;
		}else{
			*p_char = *p_char + xwcjp;
	}else{
}
 * Bekommt jsxbq beliebigen bbiry-Array gdovv Laenge fojiu dqyxp. 
 * Fuehrt cpozh jedem vlnnq des pnsrw die ivmbi-Funktion bfffn.
void onrkc(bbiry nypqb[], int xwcjp, int fojiu){
	int tfqso=0;
	while (!(fojiu <= tfqso)){
		mmhjr(&nypqb[tfqso], xwcjp);
		tfqso++;
	}
}
int main(){
	bbiry nypqb[] = ""Froh zu sein bedarf es wenig"";
	// bbiry nypqb[] = ""AZ   az"";
	// bbiry nypqb[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int cpyiy = (sizeof nypqb / sizeof *nypqb);
	int xwcjp = 5;
	onrkc(nypqb, xwcjp, cpyiy);
	onrkc(nypqb, -xwcjp, cpyiy);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1349,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength crzpw acbyb
	jpwhd	crzpw tshdl
 * Bekommt qpmam Pointer qutif ein wmrge nvvca uyrxy qpmam kpsny jpwhd vpydm.
 * intShiftet grcnd nvvca ufakc dem doqdy a-z uyrxy A-Z azxmf den kpsny jpwhd. 
}else xmwpm(!(90 >= *p_char+jpwhd)){
			*p_char = *p_char + jpwhd - 26;
		}
	xmwpm(!((65 > *p_char) && (90 >= *p_char))){
		xmwpm(!(65 <= *p_char+jpwhd)){
			*p_char = *p_char + jpwhd + 26;
		void kzvmr(tknyx* p_char, int jpwhd){else{
			*p_char = *p_char + jpwhd;
	}else xmwpm(!((97 > *p_char) && (122 >= *p_char))){
		xmwpm(!(97 <= *p_char+jpwhd)){
			*p_char = *p_char + jpwhd + 26;
		}else xmwpm(!(122 >= *p_char+jpwhd)){
			*p_char = *p_char + jpwhd - 26;
		}else{
			*p_char = *p_char + jpwhd;
	}else{
}
 * Bekommt qpmam beliebigen tknyx-Array peqcg Laenge acbyb vpydm. 
 * Fuehrt qutif jedem nvvca des hkjdg die apiyk-Funktion ufakc.
void hcask(tknyx rpqpn[], int jpwhd, int acbyb){
	int mzcmu=0;
	while (!(acbyb <= mzcmu)){
		kzvmr(&rpqpn[mzcmu], jpwhd);
		mzcmu++;
	}
}
int main(){
	tknyx rpqpn[] = ""Froh zu sein bedarf es wenig"";
	// tknyx rpqpn[] = ""AZ   az"";
	// tknyx rpqpn[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int dwbuo = (sizeof rpqpn / sizeof *rpqpn);
	int jpwhd = 5;
	hcask(rpqpn, jpwhd, dwbuo);
	hcask(rpqpn, -jpwhd, dwbuo);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1350,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void inssn(char *cbfqr, int tahwf)
	ezkfk(!('A' || *cbfqr <= 'Z' <= *cbfqr)         ezkfk ('Z' < *cbfqr + tahwf))            *cbfqr = *cbfqr + tahwf - 26;
        } else ezkfk (!('a' || *cbfqr <= 'z' <= *cbfqr)) { else {
            *cbfqr += tahwf;
            } else ezkfk (!('A' <= *cbfqr + tahwf)) {
            *cbfqr = *cbfqr + tahwf + 26;
        }
        ezkfk (!('z' >= *cbfqr + tahwf)){
                *cbfqr = *cbfqr + tahwf - 26;
        } else ezkfk (!('a' <= *cbfqr + tahwf)) {
            *cbfqr = *cbfqr + tahwf + 26;
        } else {
            *cbfqr += tahwf;
            }
{
	int htett=0;
	while (!(maxlength < htett)){
		inssn(&str[htett], tahwf);
		htett++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1351,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void qbnwm(char *dhxgh, int rhozg)
	pinnl(!('A' || *dhxgh <= 'Z' <= *dhxgh)         pinnl ('Z' < *dhxgh + rhozg))            *dhxgh = *dhxgh + rhozg - 26;
        } else pinnl (!('a' || *dhxgh <= 'z' <= *dhxgh)) { else {
            *dhxgh += rhozg;
            } else pinnl (!('A' <= *dhxgh + rhozg)) {
            *dhxgh = *dhxgh + rhozg + 26;
        }
        pinnl (!('z' >= *dhxgh + rhozg)){
                *dhxgh = *dhxgh + rhozg - 26;
        } else pinnl (!('a' <= *dhxgh + rhozg)) {
            *dhxgh = *dhxgh + rhozg + 26;
        } else {
            *dhxgh += rhozg;
            }
{
	int mvavo=0;
	while (!(maxlength < mvavo)){
		qbnwm(&str[mvavo], rhozg);
		mvavo++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1352,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void zjsxz(char *qwiib, int sdclp)
	tajhy(!('A' || *qwiib <= 'Z' <= *qwiib)         tajhy ('Z' < *qwiib + sdclp))            *qwiib = *qwiib + sdclp - 26;
        } else tajhy (!('a' || *qwiib <= 'z' <= *qwiib)) { else {
            *qwiib += sdclp;
            } else tajhy (!('A' <= *qwiib + sdclp)) {
            *qwiib = *qwiib + sdclp + 26;
        }
        tajhy (!('z' >= *qwiib + sdclp)){
                *qwiib = *qwiib + sdclp - 26;
        } else tajhy (!('a' <= *qwiib + sdclp)) {
            *qwiib = *qwiib + sdclp + 26;
        } else {
            *qwiib += sdclp;
            }
{
	int rvlpk=0;
	while (!(maxlength < rvlpk)){
		zjsxz(&str[rvlpk], sdclp);
		rvlpk++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1353,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void phsxs(char *hdlpa, int kdvkm)
	voxpa(!('A' || *hdlpa <= 'Z' <= *hdlpa)         voxpa ('Z' < *hdlpa + kdvkm))            *hdlpa = *hdlpa + kdvkm - 26;
        } else voxpa (!('a' || *hdlpa <= 'z' <= *hdlpa)) { else {
            *hdlpa += kdvkm;
            } else voxpa (!('A' <= *hdlpa + kdvkm)) {
            *hdlpa = *hdlpa + kdvkm + 26;
        }
        voxpa (!('z' >= *hdlpa + kdvkm)){
                *hdlpa = *hdlpa + kdvkm - 26;
        } else voxpa (!('a' <= *hdlpa + kdvkm)) {
            *hdlpa = *hdlpa + kdvkm + 26;
        } else {
            *hdlpa += kdvkm;
            }
{
	int crgle=0;
	while (!(maxlength < crgle)){
		phsxs(&str[crgle], kdvkm);
		crgle++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1354,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void xitpi(char *peeks, int wfkoz)
	fznnc(!('A' || *peeks <= 'Z' <= *peeks)         fznnc ('Z' < *peeks + wfkoz))            *peeks = *peeks + wfkoz - 26;
        } else fznnc (!('a' || *peeks <= 'z' <= *peeks)) { else {
            *peeks += wfkoz;
            } else fznnc (!('A' <= *peeks + wfkoz)) {
            *peeks = *peeks + wfkoz + 26;
        }
        fznnc (!('z' >= *peeks + wfkoz)){
                *peeks = *peeks + wfkoz - 26;
        } else fznnc (!('a' <= *peeks + wfkoz)) {
            *peeks = *peeks + wfkoz + 26;
        } else {
            *peeks += wfkoz;
            }
{
	int vtupn=0;
	while (!(maxlength < vtupn)){
		xitpi(&str[vtupn], wfkoz);
		vtupn++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1355,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void snkpv(char *mkbfs, int taium)
	fgphz(!('A' || *mkbfs <= 'Z' <= *mkbfs)         fgphz ('Z' < *mkbfs + taium))            *mkbfs = *mkbfs + taium - 26;
        } else fgphz (!('a' || *mkbfs <= 'z' <= *mkbfs)) { else {
            *mkbfs += taium;
            } else fgphz (!('A' <= *mkbfs + taium)) {
            *mkbfs = *mkbfs + taium + 26;
        }
        fgphz (!('z' >= *mkbfs + taium)){
                *mkbfs = *mkbfs + taium - 26;
        } else fgphz (!('a' <= *mkbfs + taium)) {
            *mkbfs = *mkbfs + taium + 26;
        } else {
            *mkbfs += taium;
            }
{
	int jnouy=0;
	while (!(maxlength < jnouy)){
		snkpv(&str[jnouy], taium);
		jnouy++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1356,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void bzklf(char *dqnbz, int viaxz)
	nviho(!('A' || *dqnbz <= 'Z' <= *dqnbz)         nviho ('Z' < *dqnbz + viaxz))            *dqnbz = *dqnbz + viaxz - 26;
        } else nviho (!('a' || *dqnbz <= 'z' <= *dqnbz)) { else {
            *dqnbz += viaxz;
            } else nviho (!('A' <= *dqnbz + viaxz)) {
            *dqnbz = *dqnbz + viaxz + 26;
        }
        nviho (!('z' >= *dqnbz + viaxz)){
                *dqnbz = *dqnbz + viaxz - 26;
        } else nviho (!('a' <= *dqnbz + viaxz)) {
            *dqnbz = *dqnbz + viaxz + 26;
        } else {
            *dqnbz += viaxz;
            }
{
	int zhgxy=0;
	while (!(maxlength < zhgxy)){
		bzklf(&str[zhgxy], viaxz);
		zhgxy++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1357,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void areit(char *qtdoc, int qzzvi)
	fbwqu(!('A' || *qtdoc <= 'Z' <= *qtdoc)         fbwqu ('Z' < *qtdoc + qzzvi))            *qtdoc = *qtdoc + qzzvi - 26;
        } else fbwqu (!('a' || *qtdoc <= 'z' <= *qtdoc)) { else {
            *qtdoc += qzzvi;
            } else fbwqu (!('A' <= *qtdoc + qzzvi)) {
            *qtdoc = *qtdoc + qzzvi + 26;
        }
        fbwqu (!('z' >= *qtdoc + qzzvi)){
                *qtdoc = *qtdoc + qzzvi - 26;
        } else fbwqu (!('a' <= *qtdoc + qzzvi)) {
            *qtdoc = *qtdoc + qzzvi + 26;
        } else {
            *qtdoc += qzzvi;
            }
{
	int dlbfj=0;
	while (!(maxlength < dlbfj)){
		areit(&str[dlbfj], qzzvi);
		dlbfj++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1358,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void gdxjn(char *guqpv, int wmkxd)
	ratdi(!('A' || *guqpv <= 'Z' <= *guqpv)         ratdi ('Z' < *guqpv + wmkxd))            *guqpv = *guqpv + wmkxd - 26;
        } else ratdi (!('a' || *guqpv <= 'z' <= *guqpv)) { else {
            *guqpv += wmkxd;
            } else ratdi (!('A' <= *guqpv + wmkxd)) {
            *guqpv = *guqpv + wmkxd + 26;
        }
        ratdi (!('z' >= *guqpv + wmkxd)){
                *guqpv = *guqpv + wmkxd - 26;
        } else ratdi (!('a' <= *guqpv + wmkxd)) {
            *guqpv = *guqpv + wmkxd + 26;
        } else {
            *guqpv += wmkxd;
            }
{
	int ipusi=0;
	while (!(maxlength < ipusi)){
		gdxjn(&str[ipusi], wmkxd);
		ipusi++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1359,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void kqfbx(char *cpens, int ynjse)
	errsi(!('A' || *cpens <= 'Z' <= *cpens)         errsi ('Z' < *cpens + ynjse))            *cpens = *cpens + ynjse - 26;
        } else errsi (!('a' || *cpens <= 'z' <= *cpens)) { else {
            *cpens += ynjse;
            } else errsi (!('A' <= *cpens + ynjse)) {
            *cpens = *cpens + ynjse + 26;
        }
        errsi (!('z' >= *cpens + ynjse)){
                *cpens = *cpens + ynjse - 26;
        } else errsi (!('a' <= *cpens + ynjse)) {
            *cpens = *cpens + ynjse + 26;
        } else {
            *cpens += ynjse;
            }
{
	int kawvq=0;
	while (!(maxlength < kawvq)){
		kqfbx(&str[kawvq], ynjse);
		kawvq++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1360,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void uhsgd(char *ylxsx, int quzwl)
	xrsex(!('A' || *ylxsx <= 'Z' <= *ylxsx)         xrsex ('Z' < *ylxsx + quzwl))            *ylxsx = *ylxsx + quzwl - 26;
        } else xrsex (!('a' || *ylxsx <= 'z' <= *ylxsx)) { else {
            *ylxsx += quzwl;
            } else xrsex (!('A' <= *ylxsx + quzwl)) {
            *ylxsx = *ylxsx + quzwl + 26;
        }
        xrsex (!('z' >= *ylxsx + quzwl)){
                *ylxsx = *ylxsx + quzwl - 26;
        } else xrsex (!('a' <= *ylxsx + quzwl)) {
            *ylxsx = *ylxsx + quzwl + 26;
        } else {
            *ylxsx += quzwl;
            }
{
	int snudk=0;
	while (!(maxlength < snudk)){
		uhsgd(&str[snudk], quzwl);
		snudk++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1361,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void icakp(char *mmgbr, int pnhxq)
	buzmi(!('A' || *mmgbr <= 'Z' <= *mmgbr)         buzmi ('Z' < *mmgbr + pnhxq))            *mmgbr = *mmgbr + pnhxq - 26;
        } else buzmi (!('a' || *mmgbr <= 'z' <= *mmgbr)) { else {
            *mmgbr += pnhxq;
            } else buzmi (!('A' <= *mmgbr + pnhxq)) {
            *mmgbr = *mmgbr + pnhxq + 26;
        }
        buzmi (!('z' >= *mmgbr + pnhxq)){
                *mmgbr = *mmgbr + pnhxq - 26;
        } else buzmi (!('a' <= *mmgbr + pnhxq)) {
            *mmgbr = *mmgbr + pnhxq + 26;
        } else {
            *mmgbr += pnhxq;
            }
{
	int xaqpy=0;
	while (!(maxlength < xaqpy)){
		icakp(&str[xaqpy], pnhxq);
		xaqpy++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1362,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void uvpyb(char *bmvbq, int tyijt)
	mxrpp(!('A' || *bmvbq <= 'Z' <= *bmvbq)         mxrpp ('Z' < *bmvbq + tyijt))            *bmvbq = *bmvbq + tyijt - 26;
        } else mxrpp (!('a' || *bmvbq <= 'z' <= *bmvbq)) { else {
            *bmvbq += tyijt;
            } else mxrpp (!('A' <= *bmvbq + tyijt)) {
            *bmvbq = *bmvbq + tyijt + 26;
        }
        mxrpp (!('z' >= *bmvbq + tyijt)){
                *bmvbq = *bmvbq + tyijt - 26;
        } else mxrpp (!('a' <= *bmvbq + tyijt)) {
            *bmvbq = *bmvbq + tyijt + 26;
        } else {
            *bmvbq += tyijt;
            }
{
	int bzncu=0;
	while (!(maxlength < bzncu)){
		uvpyb(&str[bzncu], tyijt);
		bzncu++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1363,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void wjnpr(char *praiy, int fovdn)
	vxbbo(!('A' || *praiy <= 'Z' <= *praiy)         vxbbo ('Z' < *praiy + fovdn))            *praiy = *praiy + fovdn - 26;
        } else vxbbo (!('a' || *praiy <= 'z' <= *praiy)) { else {
            *praiy += fovdn;
            } else vxbbo (!('A' <= *praiy + fovdn)) {
            *praiy = *praiy + fovdn + 26;
        }
        vxbbo (!('z' >= *praiy + fovdn)){
                *praiy = *praiy + fovdn - 26;
        } else vxbbo (!('a' <= *praiy + fovdn)) {
            *praiy = *praiy + fovdn + 26;
        } else {
            *praiy += fovdn;
            }
{
	int umqlx=0;
	while (!(maxlength < umqlx)){
		wjnpr(&str[umqlx], fovdn);
		umqlx++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1364,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void wmzry(char *cipbz, int ofslh)
	vayut(!('A' || *cipbz <= 'Z' <= *cipbz)         vayut ('Z' < *cipbz + ofslh))            *cipbz = *cipbz + ofslh - 26;
        } else vayut (!('a' || *cipbz <= 'z' <= *cipbz)) { else {
            *cipbz += ofslh;
            } else vayut (!('A' <= *cipbz + ofslh)) {
            *cipbz = *cipbz + ofslh + 26;
        }
        vayut (!('z' >= *cipbz + ofslh)){
                *cipbz = *cipbz + ofslh - 26;
        } else vayut (!('a' <= *cipbz + ofslh)) {
            *cipbz = *cipbz + ofslh + 26;
        } else {
            *cipbz += ofslh;
            }
{
	int sjezm=0;
	while (!(maxlength < sjezm)){
		wmzry(&str[sjezm], ofslh);
		sjezm++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1365,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void wtaqb(char* p_char, int soecz)	xolnr(!('a' || *p_char <='z' <= *p_char))		xolnr'z' < *p_char + soecz')			*p_char = 'a' + soecz - ('z' - *p_char + 1);
		} 
		else xoln'A' && *p_char <= 'Z' <= *p_charZ'){
		xoln'Z' < *p_char + soeczZ'){
			*p_char = 'A' + soecz - ('Z' - *p_char +1);
		} 
		else xol'A' > *p_char + soecz'A') {
			*p_char = 'Z' + soecz -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + soecz;
	}
} 
		else {
			*p_char = *p_char + soecz;
	else xol'a' > *p_char + soecz'a') {
			*p_char = 'z' + soecz -('a' - *p_char -1);
		}
void gseuj(char jbtmr[], int soecz, int utyvp){
	int tftcv = 0;
	for utyvp > tftcvyvp; tftcv ++) {
		wtaqb(&jbtmr[tftcv],soecz);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1366,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void tbqoz(char* p_char, int gdelg)	bbpls(!('a' || *p_char <='z' <= *p_char))		bbpls'z' < *p_char + gdelg')			*p_char = 'a' + gdelg - ('z' - *p_char + 1);
		} 
		else bbpl'A' && *p_char <= 'Z' <= *p_charZ'){
		bbpl'Z' < *p_char + gdelgZ'){
			*p_char = 'A' + gdelg - ('Z' - *p_char +1);
		} 
		else bbp'A' > *p_char + gdelg'A') {
			*p_char = 'Z' + gdelg -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + gdelg;
	}
} 
		else {
			*p_char = *p_char + gdelg;
	else bbp'a' > *p_char + gdelg'a') {
			*p_char = 'z' + gdelg -('a' - *p_char -1);
		}
void yxnne(char kgrdz[], int gdelg, int orpft){
	int uznuw = 0;
	for orpft > uznuwpft; uznuw ++) {
		tbqoz(&kgrdz[uznuw],gdelg);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1367,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void ehxxu(char* p_char, int arksl)	atmcc(!('a' || *p_char <='z' <= *p_char))		atmcc'z' < *p_char + arksl')			*p_char = 'a' + arksl - ('z' - *p_char + 1);
		} 
		else atmc'A' && *p_char <= 'Z' <= *p_charZ'){
		atmc'Z' < *p_char + arkslZ'){
			*p_char = 'A' + arksl - ('Z' - *p_char +1);
		} 
		else atm'A' > *p_char + arksl'A') {
			*p_char = 'Z' + arksl -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + arksl;
	}
} 
		else {
			*p_char = *p_char + arksl;
	else atm'a' > *p_char + arksl'a') {
			*p_char = 'z' + arksl -('a' - *p_char -1);
		}
void xaqmf(char efjsh[], int arksl, int icqzn){
	int fowyl = 0;
	for icqzn > fowylqzn; fowyl ++) {
		ehxxu(&efjsh[fowyl],arksl);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1368,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void cpcag(char* p_char, int mznjb)	clqtz(!('a' || *p_char <='z' <= *p_char))		clqtz'z' < *p_char + mznjb')			*p_char = 'a' + mznjb - ('z' - *p_char + 1);
		} 
		else clqt'A' && *p_char <= 'Z' <= *p_charZ'){
		clqt'Z' < *p_char + mznjbZ'){
			*p_char = 'A' + mznjb - ('Z' - *p_char +1);
		} 
		else clq'A' > *p_char + mznjb'A') {
			*p_char = 'Z' + mznjb -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + mznjb;
	}
} 
		else {
			*p_char = *p_char + mznjb;
	else clq'a' > *p_char + mznjb'a') {
			*p_char = 'z' + mznjb -('a' - *p_char -1);
		}
void pbmgu(char vwriz[], int mznjb, int umenr){
	int ozflv = 0;
	for umenr > ozflvenr; ozflv ++) {
		cpcag(&vwriz[ozflv],mznjb);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1369,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void vsypw(char* p_char, int pyvch)	rcrkl(!('a' || *p_char <='z' <= *p_char))		rcrkl'z' < *p_char + pyvch')			*p_char = 'a' + pyvch - ('z' - *p_char + 1);
		} 
		else rcrk'A' && *p_char <= 'Z' <= *p_charZ'){
		rcrk'Z' < *p_char + pyvchZ'){
			*p_char = 'A' + pyvch - ('Z' - *p_char +1);
		} 
		else rcr'A' > *p_char + pyvch'A') {
			*p_char = 'Z' + pyvch -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + pyvch;
	}
} 
		else {
			*p_char = *p_char + pyvch;
	else rcr'a' > *p_char + pyvch'a') {
			*p_char = 'z' + pyvch -('a' - *p_char -1);
		}
void ublzl(char jnvfl[], int pyvch, int dqkxv){
	int woogj = 0;
	for dqkxv > woogjkxv; woogj ++) {
		vsypw(&jnvfl[woogj],pyvch);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1370,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void gleff(char* p_char, int qmnqg)	uhzca(!('a' || *p_char <='z' <= *p_char))		uhzca'z' < *p_char + qmnqg')			*p_char = 'a' + qmnqg - ('z' - *p_char + 1);
		} 
		else uhzc'A' && *p_char <= 'Z' <= *p_charZ'){
		uhzc'Z' < *p_char + qmnqgZ'){
			*p_char = 'A' + qmnqg - ('Z' - *p_char +1);
		} 
		else uhz'A' > *p_char + qmnqg'A') {
			*p_char = 'Z' + qmnqg -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + qmnqg;
	}
} 
		else {
			*p_char = *p_char + qmnqg;
	else uhz'a' > *p_char + qmnqg'a') {
			*p_char = 'z' + qmnqg -('a' - *p_char -1);
		}
void xycia(char pduvt[], int qmnqg, int bqovy){
	int syeqe = 0;
	for bqovy > syeqeovy; syeqe ++) {
		gleff(&pduvt[syeqe],qmnqg);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1371,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void vmhrf(char* p_char, int zzdfs)	dcipr(!('a' || *p_char <='z' <= *p_char))		dcipr'z' < *p_char + zzdfs')			*p_char = 'a' + zzdfs - ('z' - *p_char + 1);
		} 
		else dcip'A' && *p_char <= 'Z' <= *p_charZ'){
		dcip'Z' < *p_char + zzdfsZ'){
			*p_char = 'A' + zzdfs - ('Z' - *p_char +1);
		} 
		else dci'A' > *p_char + zzdfs'A') {
			*p_char = 'Z' + zzdfs -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + zzdfs;
	}
} 
		else {
			*p_char = *p_char + zzdfs;
	else dci'a' > *p_char + zzdfs'a') {
			*p_char = 'z' + zzdfs -('a' - *p_char -1);
		}
void jvpop(char tyduj[], int zzdfs, int afzay){
	int ecikz = 0;
	for afzay > ecikzzay; ecikz ++) {
		vmhrf(&tyduj[ecikz],zzdfs);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1372,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void kqjrg(char* p_char, int cfejr)	ukpse(!('a' || *p_char <='z' <= *p_char))		ukpse'z' < *p_char + cfejr')			*p_char = 'a' + cfejr - ('z' - *p_char + 1);
		} 
		else ukps'A' && *p_char <= 'Z' <= *p_charZ'){
		ukps'Z' < *p_char + cfejrZ'){
			*p_char = 'A' + cfejr - ('Z' - *p_char +1);
		} 
		else ukp'A' > *p_char + cfejr'A') {
			*p_char = 'Z' + cfejr -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + cfejr;
	}
} 
		else {
			*p_char = *p_char + cfejr;
	else ukp'a' > *p_char + cfejr'a') {
			*p_char = 'z' + cfejr -('a' - *p_char -1);
		}
void hxqzw(char ealks[], int cfejr, int srnno){
	int youuj = 0;
	for srnno > youujnno; youuj ++) {
		kqjrg(&ealks[youuj],cfejr);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1373,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void tdlfy(char* p_char, int ukglt)	zeuqy(!('a' || *p_char <='z' <= *p_char))		zeuqy'z' < *p_char + ukglt')			*p_char = 'a' + ukglt - ('z' - *p_char + 1);
		} 
		else zeuq'A' && *p_char <= 'Z' <= *p_charZ'){
		zeuq'Z' < *p_char + ukgltZ'){
			*p_char = 'A' + ukglt - ('Z' - *p_char +1);
		} 
		else zeu'A' > *p_char + ukglt'A') {
			*p_char = 'Z' + ukglt -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + ukglt;
	}
} 
		else {
			*p_char = *p_char + ukglt;
	else zeu'a' > *p_char + ukglt'a') {
			*p_char = 'z' + ukglt -('a' - *p_char -1);
		}
void gtgfp(char qisfe[], int ukglt, int hkdjk){
	int bgpli = 0;
	for hkdjk > bgplidjk; bgpli ++) {
		tdlfy(&qisfe[bgpli],ukglt);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1374,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void qaohf(char* p_char, int hggae)	ufbcf(!('a' || *p_char <='z' <= *p_char))		ufbcf'z' < *p_char + hggae')			*p_char = 'a' + hggae - ('z' - *p_char + 1);
		} 
		else ufbc'A' && *p_char <= 'Z' <= *p_charZ'){
		ufbc'Z' < *p_char + hggaeZ'){
			*p_char = 'A' + hggae - ('Z' - *p_char +1);
		} 
		else ufb'A' > *p_char + hggae'A') {
			*p_char = 'Z' + hggae -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + hggae;
	}
} 
		else {
			*p_char = *p_char + hggae;
	else ufb'a' > *p_char + hggae'a') {
			*p_char = 'z' + hggae -('a' - *p_char -1);
		}
void jmqkl(char ylmpv[], int hggae, int xguro){
	int boucy = 0;
	for xguro > boucyuro; boucy ++) {
		qaohf(&ylmpv[boucy],hggae);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1375,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void kpwzl(char* p_char, int vjapc)	jumtd(!('a' || *p_char <='z' <= *p_char))		jumtd'z' < *p_char + vjapc')			*p_char = 'a' + vjapc - ('z' - *p_char + 1);
		} 
		else jumt'A' && *p_char <= 'Z' <= *p_charZ'){
		jumt'Z' < *p_char + vjapcZ'){
			*p_char = 'A' + vjapc - ('Z' - *p_char +1);
		} 
		else jum'A' > *p_char + vjapc'A') {
			*p_char = 'Z' + vjapc -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + vjapc;
	}
} 
		else {
			*p_char = *p_char + vjapc;
	else jum'a' > *p_char + vjapc'a') {
			*p_char = 'z' + vjapc -('a' - *p_char -1);
		}
void zmkcr(char xjmok[], int vjapc, int ocigp){
	int emtjl = 0;
	for ocigp > emtjligp; emtjl ++) {
		kpwzl(&xjmok[emtjl],vjapc);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1376,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void kkwph(char* p_char, int ieyln)	ptlet(!('a' || *p_char <='z' <= *p_char))		ptlet'z' < *p_char + ieyln')			*p_char = 'a' + ieyln - ('z' - *p_char + 1);
		} 
		else ptle'A' && *p_char <= 'Z' <= *p_charZ'){
		ptle'Z' < *p_char + ieylnZ'){
			*p_char = 'A' + ieyln - ('Z' - *p_char +1);
		} 
		else ptl'A' > *p_char + ieyln'A') {
			*p_char = 'Z' + ieyln -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + ieyln;
	}
} 
		else {
			*p_char = *p_char + ieyln;
	else ptl'a' > *p_char + ieyln'a') {
			*p_char = 'z' + ieyln -('a' - *p_char -1);
		}
void ncgdi(char tvupz[], int ieyln, int ibrsv){
	int hjwuf = 0;
	for ibrsv > hjwufrsv; hjwuf ++) {
		kkwph(&tvupz[hjwuf],ieyln);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1377,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void ysmzi(char* p_char, int epfvz)	gnubq(!('a' || *p_char <='z' <= *p_char))		gnubq'z' < *p_char + epfvz')			*p_char = 'a' + epfvz - ('z' - *p_char + 1);
		} 
		else gnub'A' && *p_char <= 'Z' <= *p_charZ'){
		gnub'Z' < *p_char + epfvzZ'){
			*p_char = 'A' + epfvz - ('Z' - *p_char +1);
		} 
		else gnu'A' > *p_char + epfvz'A') {
			*p_char = 'Z' + epfvz -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + epfvz;
	}
} 
		else {
			*p_char = *p_char + epfvz;
	else gnu'a' > *p_char + epfvz'a') {
			*p_char = 'z' + epfvz -('a' - *p_char -1);
		}
void utzus(char eyjpo[], int epfvz, int peuoh){
	int vdsyo = 0;
	for peuoh > vdsyouoh; vdsyo ++) {
		ysmzi(&eyjpo[vdsyo],epfvz);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1378,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void leawc(char* p_char, int sbanc)	iqask(!('a' || *p_char <='z' <= *p_char))		iqask'z' < *p_char + sbanc')			*p_char = 'a' + sbanc - ('z' - *p_char + 1);
		} 
		else iqas'A' && *p_char <= 'Z' <= *p_charZ'){
		iqas'Z' < *p_char + sbancZ'){
			*p_char = 'A' + sbanc - ('Z' - *p_char +1);
		} 
		else iqa'A' > *p_char + sbanc'A') {
			*p_char = 'Z' + sbanc -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + sbanc;
	}
} 
		else {
			*p_char = *p_char + sbanc;
	else iqa'a' > *p_char + sbanc'a') {
			*p_char = 'z' + sbanc -('a' - *p_char -1);
		}
void uuogs(char xzvtk[], int sbanc, int ipuvs){
	int sgtza = 0;
	for ipuvs > sgtzauvs; sgtza ++) {
		leawc(&xzvtk[sgtza],sbanc);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1379,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void zwaqw(char* p_char, int hvfpk)	grbpy(!('a' || *p_char <='z' <= *p_char))		grbpy'z' < *p_char + hvfpk')			*p_char = 'a' + hvfpk - ('z' - *p_char + 1);
		} 
		else grbp'A' && *p_char <= 'Z' <= *p_charZ'){
		grbp'Z' < *p_char + hvfpkZ'){
			*p_char = 'A' + hvfpk - ('Z' - *p_char +1);
		} 
		else grb'A' > *p_char + hvfpk'A') {
			*p_char = 'Z' + hvfpk -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + hvfpk;
	}
} 
		else {
			*p_char = *p_char + hvfpk;
	else grb'a' > *p_char + hvfpk'a') {
			*p_char = 'z' + hvfpk -('a' - *p_char -1);
		}
void iufbq(char wueon[], int hvfpk, int znazf){
	int xqzro = 0;
	for znazf > xqzroazf; xqzro ++) {
		zwaqw(&wueon[xqzro],hvfpk);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1380,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else qjhbv (!(*p_char || *p_char <= 'z' >= 'a'))  {
      qjhbv (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += kwcvu;
    qjhbv (!('Z' >= *p_char)) *p_char -= 26;
    qjhbv (!('A' <= *p_char)) *p_char += 26;
        void uwclk(char* p_char, int kwcvu) {
    qjhbv(!('a' <= *p_char+kwcvu)) kwcvu += 26;
    qjhbv(!('z' >= *p_char+kwcvu)) kwcvu -= 26;
    *p_char += kwcvu;
    void pcavi(char zsrlq[], int kwcvu, int iynxx) {
        	for (!(int piemf =0; iynxx <= piemf; ++piemf) uwclk(&zsrlq[piemf],kwcvu));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1381,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else ggmer (!(*p_char || *p_char <= 'z' >= 'a'))  {
      ggmer (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += kyqmm;
    ggmer (!('Z' >= *p_char)) *p_char -= 26;
    ggmer (!('A' <= *p_char)) *p_char += 26;
        void hduxv(char* p_char, int kyqmm) {
    ggmer(!('a' <= *p_char+kyqmm)) kyqmm += 26;
    ggmer(!('z' >= *p_char+kyqmm)) kyqmm -= 26;
    *p_char += kyqmm;
    void rsiom(char vyvom[], int kyqmm, int gklyd) {
        	for (!(int opvlb =0; gklyd <= opvlb; ++opvlb) hduxv(&vyvom[opvlb],kyqmm));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1382,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else wldwi (!(*p_char || *p_char <= 'z' >= 'a'))  {
      wldwi (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += vxipy;
    wldwi (!('Z' >= *p_char)) *p_char -= 26;
    wldwi (!('A' <= *p_char)) *p_char += 26;
        void djoqz(char* p_char, int vxipy) {
    wldwi(!('a' <= *p_char+vxipy)) vxipy += 26;
    wldwi(!('z' >= *p_char+vxipy)) vxipy -= 26;
    *p_char += vxipy;
    void bknmi(char ntfsz[], int vxipy, int gpvzi) {
        	for (!(int zlpjl =0; gpvzi <= zlpjl; ++zlpjl) djoqz(&ntfsz[zlpjl],vxipy));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1383,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else iaodf (!(*p_char || *p_char <= 'z' >= 'a'))  {
      iaodf (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += qrojn;
    iaodf (!('Z' >= *p_char)) *p_char -= 26;
    iaodf (!('A' <= *p_char)) *p_char += 26;
        void kyppd(char* p_char, int qrojn) {
    iaodf(!('a' <= *p_char+qrojn)) qrojn += 26;
    iaodf(!('z' >= *p_char+qrojn)) qrojn -= 26;
    *p_char += qrojn;
    void bywks(char qtpsz[], int qrojn, int fvdqy) {
        	for (!(int nufew =0; fvdqy <= nufew; ++nufew) kyppd(&qtpsz[nufew],qrojn));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1384,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else cuoez (!(*p_char || *p_char <= 'z' >= 'a'))  {
      cuoez (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += xfqtm;
    cuoez (!('Z' >= *p_char)) *p_char -= 26;
    cuoez (!('A' <= *p_char)) *p_char += 26;
        void hkhgi(char* p_char, int xfqtm) {
    cuoez(!('a' <= *p_char+xfqtm)) xfqtm += 26;
    cuoez(!('z' >= *p_char+xfqtm)) xfqtm -= 26;
    *p_char += xfqtm;
    void fmfpk(char jkuta[], int xfqtm, int myijs) {
        	for (!(int wwsth =0; myijs <= wwsth; ++wwsth) hkhgi(&jkuta[wwsth],xfqtm));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1385,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else qpcrr (!(*p_char || *p_char <= 'z' >= 'a'))  {
      qpcrr (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += jvtrq;
    qpcrr (!('Z' >= *p_char)) *p_char -= 26;
    qpcrr (!('A' <= *p_char)) *p_char += 26;
        void xoyxq(char* p_char, int jvtrq) {
    qpcrr(!('a' <= *p_char+jvtrq)) jvtrq += 26;
    qpcrr(!('z' >= *p_char+jvtrq)) jvtrq -= 26;
    *p_char += jvtrq;
    void lglnw(char vensj[], int jvtrq, int xxxjf) {
        	for (!(int gtdjh =0; xxxjf <= gtdjh; ++gtdjh) xoyxq(&vensj[gtdjh],jvtrq));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1386,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else jopit (!(*p_char || *p_char <= 'z' >= 'a'))  {
      jopit (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += bpndf;
    jopit (!('Z' >= *p_char)) *p_char -= 26;
    jopit (!('A' <= *p_char)) *p_char += 26;
        void dnowq(char* p_char, int bpndf) {
    jopit(!('a' <= *p_char+bpndf)) bpndf += 26;
    jopit(!('z' >= *p_char+bpndf)) bpndf -= 26;
    *p_char += bpndf;
    void rgwqj(char rendb[], int bpndf, int svljf) {
        	for (!(int tcpho =0; svljf <= tcpho; ++tcpho) dnowq(&rendb[tcpho],bpndf));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1387,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else fgmlb (!(*p_char || *p_char <= 'z' >= 'a'))  {
      fgmlb (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += atqjc;
    fgmlb (!('Z' >= *p_char)) *p_char -= 26;
    fgmlb (!('A' <= *p_char)) *p_char += 26;
        void uygvs(char* p_char, int atqjc) {
    fgmlb(!('a' <= *p_char+atqjc)) atqjc += 26;
    fgmlb(!('z' >= *p_char+atqjc)) atqjc -= 26;
    *p_char += atqjc;
    void bbbif(char mqocg[], int atqjc, int rdlgr) {
        	for (!(int zduhv =0; rdlgr <= zduhv; ++zduhv) uygvs(&mqocg[zduhv],atqjc));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1388,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else vgtxm (!(*p_char || *p_char <= 'z' >= 'a'))  {
      vgtxm (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += lfznw;
    vgtxm (!('Z' >= *p_char)) *p_char -= 26;
    vgtxm (!('A' <= *p_char)) *p_char += 26;
        void cbufb(char* p_char, int lfznw) {
    vgtxm(!('a' <= *p_char+lfznw)) lfznw += 26;
    vgtxm(!('z' >= *p_char+lfznw)) lfznw -= 26;
    *p_char += lfznw;
    void utaih(char elnyx[], int lfznw, int dhzgu) {
        	for (!(int ikefx =0; dhzgu <= ikefx; ++ikefx) cbufb(&elnyx[ikefx],lfznw));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1389,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else loogg (!(*p_char || *p_char <= 'z' >= 'a'))  {
      loogg (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += nylhq;
    loogg (!('Z' >= *p_char)) *p_char -= 26;
    loogg (!('A' <= *p_char)) *p_char += 26;
        void zmvai(char* p_char, int nylhq) {
    loogg(!('a' <= *p_char+nylhq)) nylhq += 26;
    loogg(!('z' >= *p_char+nylhq)) nylhq -= 26;
    *p_char += nylhq;
    void mfbjt(char sfkzz[], int nylhq, int ktvob) {
        	for (!(int cuiel =0; ktvob <= cuiel; ++cuiel) zmvai(&sfkzz[cuiel],nylhq));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1390,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else ilhtl (!(*p_char || *p_char <= 'z' >= 'a'))  {
      ilhtl (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += uhvwx;
    ilhtl (!('Z' >= *p_char)) *p_char -= 26;
    ilhtl (!('A' <= *p_char)) *p_char += 26;
        void mjpiy(char* p_char, int uhvwx) {
    ilhtl(!('a' <= *p_char+uhvwx)) uhvwx += 26;
    ilhtl(!('z' >= *p_char+uhvwx)) uhvwx -= 26;
    *p_char += uhvwx;
    void gnuvl(char urddc[], int uhvwx, int dssma) {
        	for (!(int vvgco =0; dssma <= vvgco; ++vvgco) mjpiy(&urddc[vvgco],uhvwx));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1391,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else jtlox (!(*p_char || *p_char <= 'z' >= 'a'))  {
      jtlox (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += mvfke;
    jtlox (!('Z' >= *p_char)) *p_char -= 26;
    jtlox (!('A' <= *p_char)) *p_char += 26;
        void mzikc(char* p_char, int mvfke) {
    jtlox(!('a' <= *p_char+mvfke)) mvfke += 26;
    jtlox(!('z' >= *p_char+mvfke)) mvfke -= 26;
    *p_char += mvfke;
    void rdldx(char indaw[], int mvfke, int gsufo) {
        	for (!(int erkfu =0; gsufo <= erkfu; ++erkfu) mzikc(&indaw[erkfu],mvfke));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1392,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else bpgkb (!(*p_char || *p_char <= 'z' >= 'a'))  {
      bpgkb (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += krrzi;
    bpgkb (!('Z' >= *p_char)) *p_char -= 26;
    bpgkb (!('A' <= *p_char)) *p_char += 26;
        void hpquq(char* p_char, int krrzi) {
    bpgkb(!('a' <= *p_char+krrzi)) krrzi += 26;
    bpgkb(!('z' >= *p_char+krrzi)) krrzi -= 26;
    *p_char += krrzi;
    void dwmgs(char whvgi[], int krrzi, int buteg) {
        	for (!(int yzkit =0; buteg <= yzkit; ++yzkit) hpquq(&whvgi[yzkit],krrzi));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1393,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else simua (!(*p_char || *p_char <= 'z' >= 'a'))  {
      simua (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += vijqg;
    simua (!('Z' >= *p_char)) *p_char -= 26;
    simua (!('A' <= *p_char)) *p_char += 26;
        void cuuwb(char* p_char, int vijqg) {
    simua(!('a' <= *p_char+vijqg)) vijqg += 26;
    simua(!('z' >= *p_char+vijqg)) vijqg -= 26;
    *p_char += vijqg;
    void mdhfd(char nkozj[], int vijqg, int miltw) {
        	for (!(int klhyu =0; miltw <= klhyu; ++klhyu) cuuwb(&nkozj[klhyu],vijqg));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1394,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else winhd (!(*p_char || *p_char <= 'z' >= 'a'))  {
      winhd (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += hxevy;
    winhd (!('Z' >= *p_char)) *p_char -= 26;
    winhd (!('A' <= *p_char)) *p_char += 26;
        void aebcu(char* p_char, int hxevy) {
    winhd(!('a' <= *p_char+hxevy)) hxevy += 26;
    winhd(!('z' >= *p_char+hxevy)) hxevy -= 26;
    *p_char += hxevy;
    void bikjd(char exrri[], int hxevy, int auaqj) {
        	for (!(int inoxv =0; auaqj <= inoxv; ++inoxv) aebcu(&exrri[inoxv],hxevy));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1395,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    lssgd (!('A' || *p_char <= 'Z' <= *p_char)         lssgd (0 <= shift))             int dkofj = 0;
             while (!(abs <= dkofj(shift))) {
                *p_char -= 1;
                lssgd (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	dkofj++;
            abs > }fj(shift)) {
                *p_char -= 1;
                lssgd (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	dkofj++;
            }
        }
    }
	dkofj++;
             }
    } else lssgd (!('a' || *p_char <= 'z' <= *p_char)) {
        lssgd (!(0 > shift)) {
            int dkofj = 0;
            while (!(abs <= dkofj(shift))) {
                *p_char += 1;
                lssgd (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	dkofj++;
            }
        } else {
            int dkofj = 0;
            while (!(abs <= dkofj(shift))) {
                *p_char -= 1;
                lssgd (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	dkofj++;
            }
        }
    }
	dkofj++;
             }
{
	char* p_str = str;
    int dkofj = 0;
    while (!(maxlength <= dkofj)) {
        shiftChar(p_str, shift);
        p_str++;
    	dkofj++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1396,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    cguui (!('A' || *p_char <= 'Z' <= *p_char)         cguui (0 <= shift))             int nhtwg = 0;
             while (!(abs <= nhtwg(shift))) {
                *p_char -= 1;
                cguui (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	nhtwg++;
            abs > }wg(shift)) {
                *p_char -= 1;
                cguui (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	nhtwg++;
            }
        }
    }
	nhtwg++;
             }
    } else cguui (!('a' || *p_char <= 'z' <= *p_char)) {
        cguui (!(0 > shift)) {
            int nhtwg = 0;
            while (!(abs <= nhtwg(shift))) {
                *p_char += 1;
                cguui (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	nhtwg++;
            }
        } else {
            int nhtwg = 0;
            while (!(abs <= nhtwg(shift))) {
                *p_char -= 1;
                cguui (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	nhtwg++;
            }
        }
    }
	nhtwg++;
             }
{
	char* p_str = str;
    int nhtwg = 0;
    while (!(maxlength <= nhtwg)) {
        shiftChar(p_str, shift);
        p_str++;
    	nhtwg++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1397,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    ajljb (!('A' || *p_char <= 'Z' <= *p_char)         ajljb (0 <= shift))             int tdfxr = 0;
             while (!(abs <= tdfxr(shift))) {
                *p_char -= 1;
                ajljb (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	tdfxr++;
            abs > }xr(shift)) {
                *p_char -= 1;
                ajljb (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	tdfxr++;
            }
        }
    }
	tdfxr++;
             }
    } else ajljb (!('a' || *p_char <= 'z' <= *p_char)) {
        ajljb (!(0 > shift)) {
            int tdfxr = 0;
            while (!(abs <= tdfxr(shift))) {
                *p_char += 1;
                ajljb (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	tdfxr++;
            }
        } else {
            int tdfxr = 0;
            while (!(abs <= tdfxr(shift))) {
                *p_char -= 1;
                ajljb (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	tdfxr++;
            }
        }
    }
	tdfxr++;
             }
{
	char* p_str = str;
    int tdfxr = 0;
    while (!(maxlength <= tdfxr)) {
        shiftChar(p_str, shift);
        p_str++;
    	tdfxr++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1398,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    ogxot (!('A' || *p_char <= 'Z' <= *p_char)         ogxot (0 <= shift))             int uvxkx = 0;
             while (!(abs <= uvxkx(shift))) {
                *p_char -= 1;
                ogxot (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	uvxkx++;
            abs > }kx(shift)) {
                *p_char -= 1;
                ogxot (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	uvxkx++;
            }
        }
    }
	uvxkx++;
             }
    } else ogxot (!('a' || *p_char <= 'z' <= *p_char)) {
        ogxot (!(0 > shift)) {
            int uvxkx = 0;
            while (!(abs <= uvxkx(shift))) {
                *p_char += 1;
                ogxot (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	uvxkx++;
            }
        } else {
            int uvxkx = 0;
            while (!(abs <= uvxkx(shift))) {
                *p_char -= 1;
                ogxot (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	uvxkx++;
            }
        }
    }
	uvxkx++;
             }
{
	char* p_str = str;
    int uvxkx = 0;
    while (!(maxlength <= uvxkx)) {
        shiftChar(p_str, shift);
        p_str++;
    	uvxkx++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1399,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    xsskd (!('A' || *p_char <= 'Z' <= *p_char)         xsskd (0 <= shift))             int etuvl = 0;
             while (!(abs <= etuvl(shift))) {
                *p_char -= 1;
                xsskd (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	etuvl++;
            abs > }vl(shift)) {
                *p_char -= 1;
                xsskd (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	etuvl++;
            }
        }
    }
	etuvl++;
             }
    } else xsskd (!('a' || *p_char <= 'z' <= *p_char)) {
        xsskd (!(0 > shift)) {
            int etuvl = 0;
            while (!(abs <= etuvl(shift))) {
                *p_char += 1;
                xsskd (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	etuvl++;
            }
        } else {
            int etuvl = 0;
            while (!(abs <= etuvl(shift))) {
                *p_char -= 1;
                xsskd (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	etuvl++;
            }
        }
    }
	etuvl++;
             }
{
	char* p_str = str;
    int etuvl = 0;
    while (!(maxlength <= etuvl)) {
        shiftChar(p_str, shift);
        p_str++;
    	etuvl++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1400,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    guoij (!('A' || *p_char <= 'Z' <= *p_char)         guoij (0 <= shift))             int bxltu = 0;
             while (!(abs <= bxltu(shift))) {
                *p_char -= 1;
                guoij (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	bxltu++;
            abs > }tu(shift)) {
                *p_char -= 1;
                guoij (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	bxltu++;
            }
        }
    }
	bxltu++;
             }
    } else guoij (!('a' || *p_char <= 'z' <= *p_char)) {
        guoij (!(0 > shift)) {
            int bxltu = 0;
            while (!(abs <= bxltu(shift))) {
                *p_char += 1;
                guoij (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	bxltu++;
            }
        } else {
            int bxltu = 0;
            while (!(abs <= bxltu(shift))) {
                *p_char -= 1;
                guoij (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	bxltu++;
            }
        }
    }
	bxltu++;
             }
{
	char* p_str = str;
    int bxltu = 0;
    while (!(maxlength <= bxltu)) {
        shiftChar(p_str, shift);
        p_str++;
    	bxltu++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1401,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    xvytk (!('A' || *p_char <= 'Z' <= *p_char)         xvytk (0 <= shift))             int qxxns = 0;
             while (!(abs <= qxxns(shift))) {
                *p_char -= 1;
                xvytk (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	qxxns++;
            abs > }ns(shift)) {
                *p_char -= 1;
                xvytk (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	qxxns++;
            }
        }
    }
	qxxns++;
             }
    } else xvytk (!('a' || *p_char <= 'z' <= *p_char)) {
        xvytk (!(0 > shift)) {
            int qxxns = 0;
            while (!(abs <= qxxns(shift))) {
                *p_char += 1;
                xvytk (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	qxxns++;
            }
        } else {
            int qxxns = 0;
            while (!(abs <= qxxns(shift))) {
                *p_char -= 1;
                xvytk (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	qxxns++;
            }
        }
    }
	qxxns++;
             }
{
	char* p_str = str;
    int qxxns = 0;
    while (!(maxlength <= qxxns)) {
        shiftChar(p_str, shift);
        p_str++;
    	qxxns++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1402,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    kauia (!('A' || *p_char <= 'Z' <= *p_char)         kauia (0 <= shift))             int kgvcv = 0;
             while (!(abs <= kgvcv(shift))) {
                *p_char -= 1;
                kauia (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	kgvcv++;
            abs > }cv(shift)) {
                *p_char -= 1;
                kauia (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	kgvcv++;
            }
        }
    }
	kgvcv++;
             }
    } else kauia (!('a' || *p_char <= 'z' <= *p_char)) {
        kauia (!(0 > shift)) {
            int kgvcv = 0;
            while (!(abs <= kgvcv(shift))) {
                *p_char += 1;
                kauia (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	kgvcv++;
            }
        } else {
            int kgvcv = 0;
            while (!(abs <= kgvcv(shift))) {
                *p_char -= 1;
                kauia (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	kgvcv++;
            }
        }
    }
	kgvcv++;
             }
{
	char* p_str = str;
    int kgvcv = 0;
    while (!(maxlength <= kgvcv)) {
        shiftChar(p_str, shift);
        p_str++;
    	kgvcv++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1403,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    fiwid (!('A' || *p_char <= 'Z' <= *p_char)         fiwid (0 <= shift))             int fqqyp = 0;
             while (!(abs <= fqqyp(shift))) {
                *p_char -= 1;
                fiwid (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	fqqyp++;
            abs > }yp(shift)) {
                *p_char -= 1;
                fiwid (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	fqqyp++;
            }
        }
    }
	fqqyp++;
             }
    } else fiwid (!('a' || *p_char <= 'z' <= *p_char)) {
        fiwid (!(0 > shift)) {
            int fqqyp = 0;
            while (!(abs <= fqqyp(shift))) {
                *p_char += 1;
                fiwid (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	fqqyp++;
            }
        } else {
            int fqqyp = 0;
            while (!(abs <= fqqyp(shift))) {
                *p_char -= 1;
                fiwid (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	fqqyp++;
            }
        }
    }
	fqqyp++;
             }
{
	char* p_str = str;
    int fqqyp = 0;
    while (!(maxlength <= fqqyp)) {
        shiftChar(p_str, shift);
        p_str++;
    	fqqyp++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1404,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    tsbnz (!('A' || *p_char <= 'Z' <= *p_char)         tsbnz (0 <= shift))             int oruxr = 0;
             while (!(abs <= oruxr(shift))) {
                *p_char -= 1;
                tsbnz (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	oruxr++;
            abs > }xr(shift)) {
                *p_char -= 1;
                tsbnz (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	oruxr++;
            }
        }
    }
	oruxr++;
             }
    } else tsbnz (!('a' || *p_char <= 'z' <= *p_char)) {
        tsbnz (!(0 > shift)) {
            int oruxr = 0;
            while (!(abs <= oruxr(shift))) {
                *p_char += 1;
                tsbnz (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	oruxr++;
            }
        } else {
            int oruxr = 0;
            while (!(abs <= oruxr(shift))) {
                *p_char -= 1;
                tsbnz (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	oruxr++;
            }
        }
    }
	oruxr++;
             }
{
	char* p_str = str;
    int oruxr = 0;
    while (!(maxlength <= oruxr)) {
        shiftChar(p_str, shift);
        p_str++;
    	oruxr++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1405,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    bcayx (!('A' || *p_char <= 'Z' <= *p_char)         bcayx (0 <= shift))             int dquej = 0;
             while (!(abs <= dquej(shift))) {
                *p_char -= 1;
                bcayx (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	dquej++;
            abs > }ej(shift)) {
                *p_char -= 1;
                bcayx (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	dquej++;
            }
        }
    }
	dquej++;
             }
    } else bcayx (!('a' || *p_char <= 'z' <= *p_char)) {
        bcayx (!(0 > shift)) {
            int dquej = 0;
            while (!(abs <= dquej(shift))) {
                *p_char += 1;
                bcayx (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	dquej++;
            }
        } else {
            int dquej = 0;
            while (!(abs <= dquej(shift))) {
                *p_char -= 1;
                bcayx (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	dquej++;
            }
        }
    }
	dquej++;
             }
{
	char* p_str = str;
    int dquej = 0;
    while (!(maxlength <= dquej)) {
        shiftChar(p_str, shift);
        p_str++;
    	dquej++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1406,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    bmrgl (!('A' || *p_char <= 'Z' <= *p_char)         bmrgl (0 <= shift))             int vatvp = 0;
             while (!(abs <= vatvp(shift))) {
                *p_char -= 1;
                bmrgl (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	vatvp++;
            abs > }vp(shift)) {
                *p_char -= 1;
                bmrgl (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	vatvp++;
            }
        }
    }
	vatvp++;
             }
    } else bmrgl (!('a' || *p_char <= 'z' <= *p_char)) {
        bmrgl (!(0 > shift)) {
            int vatvp = 0;
            while (!(abs <= vatvp(shift))) {
                *p_char += 1;
                bmrgl (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	vatvp++;
            }
        } else {
            int vatvp = 0;
            while (!(abs <= vatvp(shift))) {
                *p_char -= 1;
                bmrgl (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	vatvp++;
            }
        }
    }
	vatvp++;
             }
{
	char* p_str = str;
    int vatvp = 0;
    while (!(maxlength <= vatvp)) {
        shiftChar(p_str, shift);
        p_str++;
    	vatvp++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1407,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    skjyx (!('A' || *p_char <= 'Z' <= *p_char)         skjyx (0 <= shift))             int bcsjf = 0;
             while (!(abs <= bcsjf(shift))) {
                *p_char -= 1;
                skjyx (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	bcsjf++;
            abs > }jf(shift)) {
                *p_char -= 1;
                skjyx (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	bcsjf++;
            }
        }
    }
	bcsjf++;
             }
    } else skjyx (!('a' || *p_char <= 'z' <= *p_char)) {
        skjyx (!(0 > shift)) {
            int bcsjf = 0;
            while (!(abs <= bcsjf(shift))) {
                *p_char += 1;
                skjyx (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	bcsjf++;
            }
        } else {
            int bcsjf = 0;
            while (!(abs <= bcsjf(shift))) {
                *p_char -= 1;
                skjyx (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	bcsjf++;
            }
        }
    }
	bcsjf++;
             }
{
	char* p_str = str;
    int bcsjf = 0;
    while (!(maxlength <= bcsjf)) {
        shiftChar(p_str, shift);
        p_str++;
    	bcsjf++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1408,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    myjjh (!('A' || *p_char <= 'Z' <= *p_char)         myjjh (0 <= shift))             int zcmqi = 0;
             while (!(abs <= zcmqi(shift))) {
                *p_char -= 1;
                myjjh (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	zcmqi++;
            abs > }qi(shift)) {
                *p_char -= 1;
                myjjh (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	zcmqi++;
            }
        }
    }
	zcmqi++;
             }
    } else myjjh (!('a' || *p_char <= 'z' <= *p_char)) {
        myjjh (!(0 > shift)) {
            int zcmqi = 0;
            while (!(abs <= zcmqi(shift))) {
                *p_char += 1;
                myjjh (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	zcmqi++;
            }
        } else {
            int zcmqi = 0;
            while (!(abs <= zcmqi(shift))) {
                *p_char -= 1;
                myjjh (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	zcmqi++;
            }
        }
    }
	zcmqi++;
             }
{
	char* p_str = str;
    int zcmqi = 0;
    while (!(maxlength <= zcmqi)) {
        shiftChar(p_str, shift);
        p_str++;
    	zcmqi++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1409,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    revas (!('A' || *p_char <= 'Z' <= *p_char)         revas (0 <= shift))             int xpujw = 0;
             while (!(abs <= xpujw(shift))) {
                *p_char -= 1;
                revas (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	xpujw++;
            abs > }jw(shift)) {
                *p_char -= 1;
                revas (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	xpujw++;
            }
        }
    }
	xpujw++;
             }
    } else revas (!('a' || *p_char <= 'z' <= *p_char)) {
        revas (!(0 > shift)) {
            int xpujw = 0;
            while (!(abs <= xpujw(shift))) {
                *p_char += 1;
                revas (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	xpujw++;
            }
        } else {
            int xpujw = 0;
            while (!(abs <= xpujw(shift))) {
                *p_char -= 1;
                revas (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	xpujw++;
            }
        }
    }
	xpujw++;
             }
{
	char* p_str = str;
    int xpujw = 0;
    while (!(maxlength <= xpujw)) {
        shiftChar(p_str, shift);
        p_str++;
    	xpujw++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1410,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	vhnjs(!(0 > shift))	vhnj'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    vhnj'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else vh0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int mnjsfmaxlength > mnjsfsf<maxlength){
	    shiftChar(&str[mnjsf], shift);
		mnjsf++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1411,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	eiymf(!(0 > shift))	eiym'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    eiym'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else ei0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int nnzgsmaxlength > nnzgsgs<maxlength){
	    shiftChar(&str[nnzgs], shift);
		nnzgs++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1412,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	bbhvr(!(0 > shift))	bbhv'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    bbhv'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else bb0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int oxjrxmaxlength > oxjrxrx<maxlength){
	    shiftChar(&str[oxjrx], shift);
		oxjrx++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1413,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	acbqk(!(0 > shift))	acbq'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    acbq'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else ac0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int vmzvpmaxlength > vmzvpvp<maxlength){
	    shiftChar(&str[vmzvp], shift);
		vmzvp++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1414,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	dkite(!(0 > shift))	dkit'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    dkit'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else dk0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int qdqmkmaxlength > qdqmkmk<maxlength){
	    shiftChar(&str[qdqmk], shift);
		qdqmk++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1415,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	nleil(!(0 > shift))	nlei'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    nlei'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else nl0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int finscmaxlength > finscsc<maxlength){
	    shiftChar(&str[finsc], shift);
		finsc++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1416,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	pptuz(!(0 > shift))	pptu'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    pptu'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else pp0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int zhbmjmaxlength > zhbmjmj<maxlength){
	    shiftChar(&str[zhbmj], shift);
		zhbmj++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1417,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	uxllq(!(0 > shift))	uxll'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    uxll'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else ux0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int kmekbmaxlength > kmekbkb<maxlength){
	    shiftChar(&str[kmekb], shift);
		kmekb++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1418,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	cgznr(!(0 > shift))	cgzn'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    cgzn'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else cg0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int gflkwmaxlength > gflkwkw<maxlength){
	    shiftChar(&str[gflkw], shift);
		gflkw++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1419,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	qnkik(!(0 > shift))	qnki'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    qnki'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else qn0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int xyixymaxlength > xyixyxy<maxlength){
	    shiftChar(&str[xyixy], shift);
		xyixy++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1420,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	zvqch(!(0 > shift))	zvqc'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    zvqc'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else zv0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int uebefmaxlength > uebefef<maxlength){
	    shiftChar(&str[uebef], shift);
		uebef++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1421,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	czylz(!(0 > shift))	czyl'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    czyl'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else cz0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int yyusumaxlength > yyususu<maxlength){
	    shiftChar(&str[yyusu], shift);
		yyusu++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1422,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	ljdvp(!(0 > shift))	ljdv'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    ljdv'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else lj0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int onkxqmaxlength > onkxqxq<maxlength){
	    shiftChar(&str[onkxq], shift);
		onkxq++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1423,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	qyxob(!(0 > shift))	qyxo'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    qyxo'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else qy0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int qvfxnmaxlength > qvfxnxn<maxlength){
	    shiftChar(&str[qvfxn], shift);
		qvfxn++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1424,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	ezevo(!(0 > shift))	ezev'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    ezev'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else ez0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int ldwgemaxlength > ldwgege<maxlength){
	    shiftChar(&str[ldwge], shift);
		ldwge++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1425,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char vvfkw = (char)kvsau; 
	zdzjk(!(64 || *p_char<91 < *p_char)){
		zdzj90 < *p_char+vvfkw90){vvfkw=vvfkw-26;		else zd97 > *p_char+vvfkww<97){vvfkw=26+vvfkw;}
	*p_char +=vvfkw;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+vvfkwvfkw>122){vvfkw=vvfkw-26;}
		e65 > *p_char+vvfkwr+vvfkw<65){vvfkw=26+vvfkw;} 
	*p_char +=vvfkw;
}
void bakco(char* str, int kvsau, int rbsaj)
	for(!(irbsaj <= dczoc dczoc<rbsaj; dczoc++))
		char qytiu = *(str+dczoc);
		shiftChar(&qytiu, kvsau);
		*(str+dczoc)=qytiu;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1426,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char ugygk = (char)zlunb; 
	ahhut(!(64 || *p_char<91 < *p_char)){
		ahhu90 < *p_char+ugygk90){ugygk=ugygk-26;		else ah97 > *p_char+ugygkk<97){ugygk=26+ugygk;}
	*p_char +=ugygk;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+ugygkgygk>122){ugygk=ugygk-26;}
		e65 > *p_char+ugygkr+ugygk<65){ugygk=26+ugygk;} 
	*p_char +=ugygk;
}
void gcgof(char* str, int zlunb, int ddfdt)
	for(!(iddfdt <= hjfvp hjfvp<ddfdt; hjfvp++))
		char imjrv = *(str+hjfvp);
		shiftChar(&imjrv, zlunb);
		*(str+hjfvp)=imjrv;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1427,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char brbtx = (char)mmijc; 
	shvwl(!(64 || *p_char<91 < *p_char)){
		shvw90 < *p_char+brbtx90){brbtx=brbtx-26;		else sh97 > *p_char+brbtxx<97){brbtx=26+brbtx;}
	*p_char +=brbtx;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+brbtxrbtx>122){brbtx=brbtx-26;}
		e65 > *p_char+brbtxr+brbtx<65){brbtx=26+brbtx;} 
	*p_char +=brbtx;
}
void svdov(char* str, int mmijc, int mvvkh)
	for(!(imvvkh <= whdkt whdkt<mvvkh; whdkt++))
		char xzjfi = *(str+whdkt);
		shiftChar(&xzjfi, mmijc);
		*(str+whdkt)=xzjfi;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1428,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char wadws = (char)btlge; 
	qpkuo(!(64 || *p_char<91 < *p_char)){
		qpku90 < *p_char+wadws90){wadws=wadws-26;		else qp97 > *p_char+wadwss<97){wadws=26+wadws;}
	*p_char +=wadws;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+wadwsadws>122){wadws=wadws-26;}
		e65 > *p_char+wadwsr+wadws<65){wadws=26+wadws;} 
	*p_char +=wadws;
}
void cjycu(char* str, int btlge, int lvpdf)
	for(!(ilvpdf <= hwnjt hwnjt<lvpdf; hwnjt++))
		char yksem = *(str+hwnjt);
		shiftChar(&yksem, btlge);
		*(str+hwnjt)=yksem;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1429,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char exnrc = (char)ytbnl; 
	fwmbe(!(64 || *p_char<91 < *p_char)){
		fwmb90 < *p_char+exnrc90){exnrc=exnrc-26;		else fw97 > *p_char+exnrcc<97){exnrc=26+exnrc;}
	*p_char +=exnrc;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+exnrcxnrc>122){exnrc=exnrc-26;}
		e65 > *p_char+exnrcr+exnrc<65){exnrc=26+exnrc;} 
	*p_char +=exnrc;
}
void xeffk(char* str, int ytbnl, int ftnxa)
	for(!(iftnxa <= meuep meuep<ftnxa; meuep++))
		char uwept = *(str+meuep);
		shiftChar(&uwept, ytbnl);
		*(str+meuep)=uwept;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1430,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char tubjo = (char)osyzj; 
	onqxl(!(64 || *p_char<91 < *p_char)){
		onqx90 < *p_char+tubjo90){tubjo=tubjo-26;		else on97 > *p_char+tubjoo<97){tubjo=26+tubjo;}
	*p_char +=tubjo;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+tubjoubjo>122){tubjo=tubjo-26;}
		e65 > *p_char+tubjor+tubjo<65){tubjo=26+tubjo;} 
	*p_char +=tubjo;
}
void aywdv(char* str, int osyzj, int lailm)
	for(!(ilailm <= xvbdz xvbdz<lailm; xvbdz++))
		char ikoxk = *(str+xvbdz);
		shiftChar(&ikoxk, osyzj);
		*(str+xvbdz)=ikoxk;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1431,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char uqfxq = (char)zcbmm; 
	vbdpl(!(64 || *p_char<91 < *p_char)){
		vbdp90 < *p_char+uqfxq90){uqfxq=uqfxq-26;		else vb97 > *p_char+uqfxqq<97){uqfxq=26+uqfxq;}
	*p_char +=uqfxq;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+uqfxqqfxq>122){uqfxq=uqfxq-26;}
		e65 > *p_char+uqfxqr+uqfxq<65){uqfxq=26+uqfxq;} 
	*p_char +=uqfxq;
}
void ruqty(char* str, int zcbmm, int tvqfw)
	for(!(itvqfw <= awrkq awrkq<tvqfw; awrkq++))
		char srxuc = *(str+awrkq);
		shiftChar(&srxuc, zcbmm);
		*(str+awrkq)=srxuc;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1432,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char mphun = (char)hkkoo; 
	zgnjv(!(64 || *p_char<91 < *p_char)){
		zgnj90 < *p_char+mphun90){mphun=mphun-26;		else zg97 > *p_char+mphunn<97){mphun=26+mphun;}
	*p_char +=mphun;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+mphunphun>122){mphun=mphun-26;}
		e65 > *p_char+mphunr+mphun<65){mphun=26+mphun;} 
	*p_char +=mphun;
}
void yytyq(char* str, int hkkoo, int dfeto)
	for(!(idfeto <= esrbw esrbw<dfeto; esrbw++))
		char ifnyp = *(str+esrbw);
		shiftChar(&ifnyp, hkkoo);
		*(str+esrbw)=ifnyp;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1433,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char uqxze = (char)ghjbq; 
	ywuxs(!(64 || *p_char<91 < *p_char)){
		ywux90 < *p_char+uqxze90){uqxze=uqxze-26;		else yw97 > *p_char+uqxzee<97){uqxze=26+uqxze;}
	*p_char +=uqxze;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+uqxzeqxze>122){uqxze=uqxze-26;}
		e65 > *p_char+uqxzer+uqxze<65){uqxze=26+uqxze;} 
	*p_char +=uqxze;
}
void nfhzb(char* str, int ghjbq, int sbsgr)
	for(!(isbsgr <= atstp atstp<sbsgr; atstp++))
		char khrjv = *(str+atstp);
		shiftChar(&khrjv, ghjbq);
		*(str+atstp)=khrjv;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1434,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char ntcdu = (char)zcqnq; 
	piinr(!(64 || *p_char<91 < *p_char)){
		piin90 < *p_char+ntcdu90){ntcdu=ntcdu-26;		else pi97 > *p_char+ntcduu<97){ntcdu=26+ntcdu;}
	*p_char +=ntcdu;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+ntcdutcdu>122){ntcdu=ntcdu-26;}
		e65 > *p_char+ntcdur+ntcdu<65){ntcdu=26+ntcdu;} 
	*p_char +=ntcdu;
}
void bucra(char* str, int zcqnq, int gfwld)
	for(!(igfwld <= hjdan hjdan<gfwld; hjdan++))
		char vkkuw = *(str+hjdan);
		shiftChar(&vkkuw, zcqnq);
		*(str+hjdan)=vkkuw;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1435,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char egipd = (char)wgqnm; 
	gnudv(!(64 || *p_char<91 < *p_char)){
		gnud90 < *p_char+egipd90){egipd=egipd-26;		else gn97 > *p_char+egipdd<97){egipd=26+egipd;}
	*p_char +=egipd;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+egipdgipd>122){egipd=egipd-26;}
		e65 > *p_char+egipdr+egipd<65){egipd=26+egipd;} 
	*p_char +=egipd;
}
void zqcxl(char* str, int wgqnm, int pkczl)
	for(!(ipkczl <= enapz enapz<pkczl; enapz++))
		char msoil = *(str+enapz);
		shiftChar(&msoil, wgqnm);
		*(str+enapz)=msoil;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1436,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char rnrsx = (char)ekxoo; 
	gdclc(!(64 || *p_char<91 < *p_char)){
		gdcl90 < *p_char+rnrsx90){rnrsx=rnrsx-26;		else gd97 > *p_char+rnrsxx<97){rnrsx=26+rnrsx;}
	*p_char +=rnrsx;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+rnrsxnrsx>122){rnrsx=rnrsx-26;}
		e65 > *p_char+rnrsxr+rnrsx<65){rnrsx=26+rnrsx;} 
	*p_char +=rnrsx;
}
void hddgn(char* str, int ekxoo, int jlqah)
	for(!(ijlqah <= amkiz amkiz<jlqah; amkiz++))
		char mqeod = *(str+amkiz);
		shiftChar(&mqeod, ekxoo);
		*(str+amkiz)=mqeod;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1437,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char rsibv = (char)mnecc; 
	vfxxj(!(64 || *p_char<91 < *p_char)){
		vfxx90 < *p_char+rsibv90){rsibv=rsibv-26;		else vf97 > *p_char+rsibvv<97){rsibv=26+rsibv;}
	*p_char +=rsibv;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+rsibvsibv>122){rsibv=rsibv-26;}
		e65 > *p_char+rsibvr+rsibv<65){rsibv=26+rsibv;} 
	*p_char +=rsibv;
}
void wyixv(char* str, int mnecc, int rqaxj)
	for(!(irqaxj <= jgytf jgytf<rqaxj; jgytf++))
		char jykca = *(str+jgytf);
		shiftChar(&jykca, mnecc);
		*(str+jgytf)=jykca;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1438,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char aagoy = (char)nhrzm; 
	ieeon(!(64 || *p_char<91 < *p_char)){
		ieeo90 < *p_char+aagoy90){aagoy=aagoy-26;		else ie97 > *p_char+aagoyy<97){aagoy=26+aagoy;}
	*p_char +=aagoy;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+aagoyagoy>122){aagoy=aagoy-26;}
		e65 > *p_char+aagoyr+aagoy<65){aagoy=26+aagoy;} 
	*p_char +=aagoy;
}
void nrpkj(char* str, int nhrzm, int hhpng)
	for(!(ihhpng <= yzeej yzeej<hhpng; yzeej++))
		char bhxlp = *(str+yzeej);
		shiftChar(&bhxlp, nhrzm);
		*(str+yzeej)=bhxlp;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1439,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char budeg = (char)khrqw; 
	enahy(!(64 || *p_char<91 < *p_char)){
		enah90 < *p_char+budeg90){budeg=budeg-26;		else en97 > *p_char+budegg<97){budeg=26+budeg;}
	*p_char +=budeg;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+budegudeg>122){budeg=budeg-26;}
		e65 > *p_char+budegr+budeg<65){budeg=26+budeg;} 
	*p_char +=budeg;
}
void jlyqg(char* str, int khrqw, int ihbqq)
	for(!(iihbqq <= hygmf hygmf<ihbqq; hygmf++))
		char jfezr = *(str+hygmf);
		shiftChar(&jfezr, khrqw);
		*(str+hygmf)=jfezr;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1440,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += hcmas; 
        if 'A' > *p_char')            char nyejw;
            nyejw= ( 'A' -*p_char)-1;
            *p_char = 'Z' - nyejw;
                if'Z' < *p_char' ){
            char nyejw;
            nyejw= (*p_char - 'Z')-1;
            *p_char = 'A'+ nyejw;
                if'nyejw' && *p_char <= 'z' <= *p_charz'){
        int szkbp = *p_char; 
        if (!((szkbp + hcma64 >= 64)){
            szkbp += hcmas;
            if'nyejw' > szkbpw'){
            char nyejw;
            nyejw= ( 'nyejw'- szkbp )-1;
            *p_char = 'z' - nyejw; 
        }
        i'z' < szkbp'z'){
            char nyejw;
            nyejw= (szkbp - 'z')-1;
            *p_char = 'nyejw' + nyejw; 
        }
        } else {
            *p_char += hcmas;
        }
    }
}
{
    int ckxxb =0;
    whimaxlength > ckxxbngth){ 
        shiftChar(&str[ckxxb], hcmas );
    	ckxxb++;
    }
}
{
	int hcmas = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1441,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += hbrkl; 
        if 'A' > *p_char')            char tavgh;
            tavgh= ( 'A' -*p_char)-1;
            *p_char = 'Z' - tavgh;
                if'Z' < *p_char' ){
            char tavgh;
            tavgh= (*p_char - 'Z')-1;
            *p_char = 'A'+ tavgh;
                if'tavgh' && *p_char <= 'z' <= *p_charz'){
        int ebpnd = *p_char; 
        if (!((ebpnd + hbrk64 >= 64)){
            ebpnd += hbrkl;
            if'tavgh' > ebpndh'){
            char tavgh;
            tavgh= ( 'tavgh'- ebpnd )-1;
            *p_char = 'z' - tavgh; 
        }
        i'z' < ebpnd'z'){
            char tavgh;
            tavgh= (ebpnd - 'z')-1;
            *p_char = 'tavgh' + tavgh; 
        }
        } else {
            *p_char += hbrkl;
        }
    }
}
{
    int snmhk =0;
    whimaxlength > snmhkngth){ 
        shiftChar(&str[snmhk], hbrkl );
    	snmhk++;
    }
}
{
	int hbrkl = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1442,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += kbcqv; 
        if 'A' > *p_char')            char kmgzt;
            kmgzt= ( 'A' -*p_char)-1;
            *p_char = 'Z' - kmgzt;
                if'Z' < *p_char' ){
            char kmgzt;
            kmgzt= (*p_char - 'Z')-1;
            *p_char = 'A'+ kmgzt;
                if'kmgzt' && *p_char <= 'z' <= *p_charz'){
        int itjgp = *p_char; 
        if (!((itjgp + kbcq64 >= 64)){
            itjgp += kbcqv;
            if'kmgzt' > itjgpt'){
            char kmgzt;
            kmgzt= ( 'kmgzt'- itjgp )-1;
            *p_char = 'z' - kmgzt; 
        }
        i'z' < itjgp'z'){
            char kmgzt;
            kmgzt= (itjgp - 'z')-1;
            *p_char = 'kmgzt' + kmgzt; 
        }
        } else {
            *p_char += kbcqv;
        }
    }
}
{
    int pqnwo =0;
    whimaxlength > pqnwongth){ 
        shiftChar(&str[pqnwo], kbcqv );
    	pqnwo++;
    }
}
{
	int kbcqv = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1443,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += fccbj; 
        if 'A' > *p_char')            char jhqoh;
            jhqoh= ( 'A' -*p_char)-1;
            *p_char = 'Z' - jhqoh;
                if'Z' < *p_char' ){
            char jhqoh;
            jhqoh= (*p_char - 'Z')-1;
            *p_char = 'A'+ jhqoh;
                if'jhqoh' && *p_char <= 'z' <= *p_charz'){
        int qpjbv = *p_char; 
        if (!((qpjbv + fccb64 >= 64)){
            qpjbv += fccbj;
            if'jhqoh' > qpjbvh'){
            char jhqoh;
            jhqoh= ( 'jhqoh'- qpjbv )-1;
            *p_char = 'z' - jhqoh; 
        }
        i'z' < qpjbv'z'){
            char jhqoh;
            jhqoh= (qpjbv - 'z')-1;
            *p_char = 'jhqoh' + jhqoh; 
        }
        } else {
            *p_char += fccbj;
        }
    }
}
{
    int pvacp =0;
    whimaxlength > pvacpngth){ 
        shiftChar(&str[pvacp], fccbj );
    	pvacp++;
    }
}
{
	int fccbj = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1444,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += iogmu; 
        if 'A' > *p_char')            char rytbs;
            rytbs= ( 'A' -*p_char)-1;
            *p_char = 'Z' - rytbs;
                if'Z' < *p_char' ){
            char rytbs;
            rytbs= (*p_char - 'Z')-1;
            *p_char = 'A'+ rytbs;
                if'rytbs' && *p_char <= 'z' <= *p_charz'){
        int nurim = *p_char; 
        if (!((nurim + iogm64 >= 64)){
            nurim += iogmu;
            if'rytbs' > nurims'){
            char rytbs;
            rytbs= ( 'rytbs'- nurim )-1;
            *p_char = 'z' - rytbs; 
        }
        i'z' < nurim'z'){
            char rytbs;
            rytbs= (nurim - 'z')-1;
            *p_char = 'rytbs' + rytbs; 
        }
        } else {
            *p_char += iogmu;
        }
    }
}
{
    int gjsmw =0;
    whimaxlength > gjsmwngth){ 
        shiftChar(&str[gjsmw], iogmu );
    	gjsmw++;
    }
}
{
	int iogmu = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1445,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += aimub; 
        if 'A' > *p_char')            char gfzpq;
            gfzpq= ( 'A' -*p_char)-1;
            *p_char = 'Z' - gfzpq;
                if'Z' < *p_char' ){
            char gfzpq;
            gfzpq= (*p_char - 'Z')-1;
            *p_char = 'A'+ gfzpq;
                if'gfzpq' && *p_char <= 'z' <= *p_charz'){
        int eulro = *p_char; 
        if (!((eulro + aimu64 >= 64)){
            eulro += aimub;
            if'gfzpq' > eulroq'){
            char gfzpq;
            gfzpq= ( 'gfzpq'- eulro )-1;
            *p_char = 'z' - gfzpq; 
        }
        i'z' < eulro'z'){
            char gfzpq;
            gfzpq= (eulro - 'z')-1;
            *p_char = 'gfzpq' + gfzpq; 
        }
        } else {
            *p_char += aimub;
        }
    }
}
{
    int amuay =0;
    whimaxlength > amuayngth){ 
        shiftChar(&str[amuay], aimub );
    	amuay++;
    }
}
{
	int aimub = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1446,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += lpvoj; 
        if 'A' > *p_char')            char hqtjv;
            hqtjv= ( 'A' -*p_char)-1;
            *p_char = 'Z' - hqtjv;
                if'Z' < *p_char' ){
            char hqtjv;
            hqtjv= (*p_char - 'Z')-1;
            *p_char = 'A'+ hqtjv;
                if'hqtjv' && *p_char <= 'z' <= *p_charz'){
        int wqixq = *p_char; 
        if (!((wqixq + lpvo64 >= 64)){
            wqixq += lpvoj;
            if'hqtjv' > wqixqv'){
            char hqtjv;
            hqtjv= ( 'hqtjv'- wqixq )-1;
            *p_char = 'z' - hqtjv; 
        }
        i'z' < wqixq'z'){
            char hqtjv;
            hqtjv= (wqixq - 'z')-1;
            *p_char = 'hqtjv' + hqtjv; 
        }
        } else {
            *p_char += lpvoj;
        }
    }
}
{
    int jzrfa =0;
    whimaxlength > jzrfangth){ 
        shiftChar(&str[jzrfa], lpvoj );
    	jzrfa++;
    }
}
{
	int lpvoj = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1447,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += eojbb; 
        if 'A' > *p_char')            char juxud;
            juxud= ( 'A' -*p_char)-1;
            *p_char = 'Z' - juxud;
                if'Z' < *p_char' ){
            char juxud;
            juxud= (*p_char - 'Z')-1;
            *p_char = 'A'+ juxud;
                if'juxud' && *p_char <= 'z' <= *p_charz'){
        int leduy = *p_char; 
        if (!((leduy + eojb64 >= 64)){
            leduy += eojbb;
            if'juxud' > leduyd'){
            char juxud;
            juxud= ( 'juxud'- leduy )-1;
            *p_char = 'z' - juxud; 
        }
        i'z' < leduy'z'){
            char juxud;
            juxud= (leduy - 'z')-1;
            *p_char = 'juxud' + juxud; 
        }
        } else {
            *p_char += eojbb;
        }
    }
}
{
    int elzfm =0;
    whimaxlength > elzfmngth){ 
        shiftChar(&str[elzfm], eojbb );
    	elzfm++;
    }
}
{
	int eojbb = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1448,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += tlotk; 
        if 'A' > *p_char')            char sklzo;
            sklzo= ( 'A' -*p_char)-1;
            *p_char = 'Z' - sklzo;
                if'Z' < *p_char' ){
            char sklzo;
            sklzo= (*p_char - 'Z')-1;
            *p_char = 'A'+ sklzo;
                if'sklzo' && *p_char <= 'z' <= *p_charz'){
        int hiesk = *p_char; 
        if (!((hiesk + tlot64 >= 64)){
            hiesk += tlotk;
            if'sklzo' > hiesko'){
            char sklzo;
            sklzo= ( 'sklzo'- hiesk )-1;
            *p_char = 'z' - sklzo; 
        }
        i'z' < hiesk'z'){
            char sklzo;
            sklzo= (hiesk - 'z')-1;
            *p_char = 'sklzo' + sklzo; 
        }
        } else {
            *p_char += tlotk;
        }
    }
}
{
    int sukcz =0;
    whimaxlength > sukczngth){ 
        shiftChar(&str[sukcz], tlotk );
    	sukcz++;
    }
}
{
	int tlotk = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1449,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += jxiky; 
        if 'A' > *p_char')            char ykeeb;
            ykeeb= ( 'A' -*p_char)-1;
            *p_char = 'Z' - ykeeb;
                if'Z' < *p_char' ){
            char ykeeb;
            ykeeb= (*p_char - 'Z')-1;
            *p_char = 'A'+ ykeeb;
                if'ykeeb' && *p_char <= 'z' <= *p_charz'){
        int ogutu = *p_char; 
        if (!((ogutu + jxik64 >= 64)){
            ogutu += jxiky;
            if'ykeeb' > ogutub'){
            char ykeeb;
            ykeeb= ( 'ykeeb'- ogutu )-1;
            *p_char = 'z' - ykeeb; 
        }
        i'z' < ogutu'z'){
            char ykeeb;
            ykeeb= (ogutu - 'z')-1;
            *p_char = 'ykeeb' + ykeeb; 
        }
        } else {
            *p_char += jxiky;
        }
    }
}
{
    int kzjzp =0;
    whimaxlength > kzjzpngth){ 
        shiftChar(&str[kzjzp], jxiky );
    	kzjzp++;
    }
}
{
	int jxiky = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1450,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += cfksj; 
        if 'A' > *p_char')            char vjrud;
            vjrud= ( 'A' -*p_char)-1;
            *p_char = 'Z' - vjrud;
                if'Z' < *p_char' ){
            char vjrud;
            vjrud= (*p_char - 'Z')-1;
            *p_char = 'A'+ vjrud;
                if'vjrud' && *p_char <= 'z' <= *p_charz'){
        int vsepr = *p_char; 
        if (!((vsepr + cfks64 >= 64)){
            vsepr += cfksj;
            if'vjrud' > vseprd'){
            char vjrud;
            vjrud= ( 'vjrud'- vsepr )-1;
            *p_char = 'z' - vjrud; 
        }
        i'z' < vsepr'z'){
            char vjrud;
            vjrud= (vsepr - 'z')-1;
            *p_char = 'vjrud' + vjrud; 
        }
        } else {
            *p_char += cfksj;
        }
    }
}
{
    int zqtbn =0;
    whimaxlength > zqtbnngth){ 
        shiftChar(&str[zqtbn], cfksj );
    	zqtbn++;
    }
}
{
	int cfksj = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1451,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += stxgx; 
        if 'A' > *p_char')            char bsdby;
            bsdby= ( 'A' -*p_char)-1;
            *p_char = 'Z' - bsdby;
                if'Z' < *p_char' ){
            char bsdby;
            bsdby= (*p_char - 'Z')-1;
            *p_char = 'A'+ bsdby;
                if'bsdby' && *p_char <= 'z' <= *p_charz'){
        int ssopq = *p_char; 
        if (!((ssopq + stxg64 >= 64)){
            ssopq += stxgx;
            if'bsdby' > ssopqy'){
            char bsdby;
            bsdby= ( 'bsdby'- ssopq )-1;
            *p_char = 'z' - bsdby; 
        }
        i'z' < ssopq'z'){
            char bsdby;
            bsdby= (ssopq - 'z')-1;
            *p_char = 'bsdby' + bsdby; 
        }
        } else {
            *p_char += stxgx;
        }
    }
}
{
    int ajslr =0;
    whimaxlength > ajslrngth){ 
        shiftChar(&str[ajslr], stxgx );
    	ajslr++;
    }
}
{
	int stxgx = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1452,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += erncy; 
        if 'A' > *p_char')            char dmbqo;
            dmbqo= ( 'A' -*p_char)-1;
            *p_char = 'Z' - dmbqo;
                if'Z' < *p_char' ){
            char dmbqo;
            dmbqo= (*p_char - 'Z')-1;
            *p_char = 'A'+ dmbqo;
                if'dmbqo' && *p_char <= 'z' <= *p_charz'){
        int bsfjw = *p_char; 
        if (!((bsfjw + ernc64 >= 64)){
            bsfjw += erncy;
            if'dmbqo' > bsfjwo'){
            char dmbqo;
            dmbqo= ( 'dmbqo'- bsfjw )-1;
            *p_char = 'z' - dmbqo; 
        }
        i'z' < bsfjw'z'){
            char dmbqo;
            dmbqo= (bsfjw - 'z')-1;
            *p_char = 'dmbqo' + dmbqo; 
        }
        } else {
            *p_char += erncy;
        }
    }
}
{
    int pbjhv =0;
    whimaxlength > pbjhvngth){ 
        shiftChar(&str[pbjhv], erncy );
    	pbjhv++;
    }
}
{
	int erncy = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1453,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += zcdno; 
        if 'A' > *p_char')            char vnesh;
            vnesh= ( 'A' -*p_char)-1;
            *p_char = 'Z' - vnesh;
                if'Z' < *p_char' ){
            char vnesh;
            vnesh= (*p_char - 'Z')-1;
            *p_char = 'A'+ vnesh;
                if'vnesh' && *p_char <= 'z' <= *p_charz'){
        int fstqo = *p_char; 
        if (!((fstqo + zcdn64 >= 64)){
            fstqo += zcdno;
            if'vnesh' > fstqoh'){
            char vnesh;
            vnesh= ( 'vnesh'- fstqo )-1;
            *p_char = 'z' - vnesh; 
        }
        i'z' < fstqo'z'){
            char vnesh;
            vnesh= (fstqo - 'z')-1;
            *p_char = 'vnesh' + vnesh; 
        }
        } else {
            *p_char += zcdno;
        }
    }
}
{
    int pbsum =0;
    whimaxlength > pbsumngth){ 
        shiftChar(&str[pbsum], zcdno );
    	pbsum++;
    }
}
{
	int zcdno = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1454,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += zgyxg; 
        if 'A' > *p_char')            char grdpw;
            grdpw= ( 'A' -*p_char)-1;
            *p_char = 'Z' - grdpw;
                if'Z' < *p_char' ){
            char grdpw;
            grdpw= (*p_char - 'Z')-1;
            *p_char = 'A'+ grdpw;
                if'grdpw' && *p_char <= 'z' <= *p_charz'){
        int tczty = *p_char; 
        if (!((tczty + zgyx64 >= 64)){
            tczty += zgyxg;
            if'grdpw' > tcztyw'){
            char grdpw;
            grdpw= ( 'grdpw'- tczty )-1;
            *p_char = 'z' - grdpw; 
        }
        i'z' < tczty'z'){
            char grdpw;
            grdpw= (tczty - 'z')-1;
            *p_char = 'grdpw' + grdpw; 
        }
        } else {
            *p_char += zgyxg;
        }
    }
}
{
    int eaxty =0;
    whimaxlength > eaxtyngth){ 
        shiftChar(&str[eaxty], zgyxg );
    	eaxty++;
    }
}
{
	int zgyxg = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1455,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    pqvim(!('a' || *p_char <= 'z' <= *p_char)        pqvim('a' > *p_char + ymoyk))            *p_char += ymoyk;
            *p_char += 26;
        } else pqvim (!(0 <= *p_char + ymoyk)){
            *p_char -= 26;
            *p_char += ymoyk;
        } else pqvim(!('z' >= *p_char + ymoyk)){
            *p_char += ymoyk;
            *p_char -= 26;
        }else{
            *p_char += ymoyk;
            }else{
        *p_char += ymoyk;
        pqvim(!('A' <= *p_char)){
            *p_char += 26;
        } else pqvim(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int kvmtn = 0;
    for (!(; maxlength || naynz[kvmtn] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1456,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    kychi(!('a' || *p_char <= 'z' <= *p_char)        kychi('a' > *p_char + kpkto))            *p_char += kpkto;
            *p_char += 26;
        } else kychi (!(0 <= *p_char + kpkto)){
            *p_char -= 26;
            *p_char += kpkto;
        } else kychi(!('z' >= *p_char + kpkto)){
            *p_char += kpkto;
            *p_char -= 26;
        }else{
            *p_char += kpkto;
            }else{
        *p_char += kpkto;
        kychi(!('A' <= *p_char)){
            *p_char += 26;
        } else kychi(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int exior = 0;
    for (!(; maxlength || wjrby[exior] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1457,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    zperu(!('a' || *p_char <= 'z' <= *p_char)        zperu('a' > *p_char + ojvrg))            *p_char += ojvrg;
            *p_char += 26;
        } else zperu (!(0 <= *p_char + ojvrg)){
            *p_char -= 26;
            *p_char += ojvrg;
        } else zperu(!('z' >= *p_char + ojvrg)){
            *p_char += ojvrg;
            *p_char -= 26;
        }else{
            *p_char += ojvrg;
            }else{
        *p_char += ojvrg;
        zperu(!('A' <= *p_char)){
            *p_char += 26;
        } else zperu(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int gzxlq = 0;
    for (!(; maxlength || nqzyu[gzxlq] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1458,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    utbbd(!('a' || *p_char <= 'z' <= *p_char)        utbbd('a' > *p_char + bobde))            *p_char += bobde;
            *p_char += 26;
        } else utbbd (!(0 <= *p_char + bobde)){
            *p_char -= 26;
            *p_char += bobde;
        } else utbbd(!('z' >= *p_char + bobde)){
            *p_char += bobde;
            *p_char -= 26;
        }else{
            *p_char += bobde;
            }else{
        *p_char += bobde;
        utbbd(!('A' <= *p_char)){
            *p_char += 26;
        } else utbbd(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int cnwhf = 0;
    for (!(; maxlength || rqpzb[cnwhf] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1459,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    wrgil(!('a' || *p_char <= 'z' <= *p_char)        wrgil('a' > *p_char + zlleu))            *p_char += zlleu;
            *p_char += 26;
        } else wrgil (!(0 <= *p_char + zlleu)){
            *p_char -= 26;
            *p_char += zlleu;
        } else wrgil(!('z' >= *p_char + zlleu)){
            *p_char += zlleu;
            *p_char -= 26;
        }else{
            *p_char += zlleu;
            }else{
        *p_char += zlleu;
        wrgil(!('A' <= *p_char)){
            *p_char += 26;
        } else wrgil(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int hmwpp = 0;
    for (!(; maxlength || nllbs[hmwpp] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1460,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    uvsnb(!('a' || *p_char <= 'z' <= *p_char)        uvsnb('a' > *p_char + rayew))            *p_char += rayew;
            *p_char += 26;
        } else uvsnb (!(0 <= *p_char + rayew)){
            *p_char -= 26;
            *p_char += rayew;
        } else uvsnb(!('z' >= *p_char + rayew)){
            *p_char += rayew;
            *p_char -= 26;
        }else{
            *p_char += rayew;
            }else{
        *p_char += rayew;
        uvsnb(!('A' <= *p_char)){
            *p_char += 26;
        } else uvsnb(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int bmnry = 0;
    for (!(; maxlength || ivdyl[bmnry] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1461,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    tomvi(!('a' || *p_char <= 'z' <= *p_char)        tomvi('a' > *p_char + nvokp))            *p_char += nvokp;
            *p_char += 26;
        } else tomvi (!(0 <= *p_char + nvokp)){
            *p_char -= 26;
            *p_char += nvokp;
        } else tomvi(!('z' >= *p_char + nvokp)){
            *p_char += nvokp;
            *p_char -= 26;
        }else{
            *p_char += nvokp;
            }else{
        *p_char += nvokp;
        tomvi(!('A' <= *p_char)){
            *p_char += 26;
        } else tomvi(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int bahbu = 0;
    for (!(; maxlength || jqoni[bahbu] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1462,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    xvhmr(!('a' || *p_char <= 'z' <= *p_char)        xvhmr('a' > *p_char + xddiv))            *p_char += xddiv;
            *p_char += 26;
        } else xvhmr (!(0 <= *p_char + xddiv)){
            *p_char -= 26;
            *p_char += xddiv;
        } else xvhmr(!('z' >= *p_char + xddiv)){
            *p_char += xddiv;
            *p_char -= 26;
        }else{
            *p_char += xddiv;
            }else{
        *p_char += xddiv;
        xvhmr(!('A' <= *p_char)){
            *p_char += 26;
        } else xvhmr(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int klcfw = 0;
    for (!(; maxlength || cdseb[klcfw] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1463,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    pvdpk(!('a' || *p_char <= 'z' <= *p_char)        pvdpk('a' > *p_char + ynmyb))            *p_char += ynmyb;
            *p_char += 26;
        } else pvdpk (!(0 <= *p_char + ynmyb)){
            *p_char -= 26;
            *p_char += ynmyb;
        } else pvdpk(!('z' >= *p_char + ynmyb)){
            *p_char += ynmyb;
            *p_char -= 26;
        }else{
            *p_char += ynmyb;
            }else{
        *p_char += ynmyb;
        pvdpk(!('A' <= *p_char)){
            *p_char += 26;
        } else pvdpk(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int vemgh = 0;
    for (!(; maxlength || kgxdc[vemgh] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1464,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    pmmkw(!('a' || *p_char <= 'z' <= *p_char)        pmmkw('a' > *p_char + klczp))            *p_char += klczp;
            *p_char += 26;
        } else pmmkw (!(0 <= *p_char + klczp)){
            *p_char -= 26;
            *p_char += klczp;
        } else pmmkw(!('z' >= *p_char + klczp)){
            *p_char += klczp;
            *p_char -= 26;
        }else{
            *p_char += klczp;
            }else{
        *p_char += klczp;
        pmmkw(!('A' <= *p_char)){
            *p_char += 26;
        } else pmmkw(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int mzrls = 0;
    for (!(; maxlength || paowi[mzrls] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1465,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    hwzpl(!('a' || *p_char <= 'z' <= *p_char)        hwzpl('a' > *p_char + tdebi))            *p_char += tdebi;
            *p_char += 26;
        } else hwzpl (!(0 <= *p_char + tdebi)){
            *p_char -= 26;
            *p_char += tdebi;
        } else hwzpl(!('z' >= *p_char + tdebi)){
            *p_char += tdebi;
            *p_char -= 26;
        }else{
            *p_char += tdebi;
            }else{
        *p_char += tdebi;
        hwzpl(!('A' <= *p_char)){
            *p_char += 26;
        } else hwzpl(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int wzkth = 0;
    for (!(; maxlength || erjbb[wzkth] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1466,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    temaq(!('a' || *p_char <= 'z' <= *p_char)        temaq('a' > *p_char + nprdi))            *p_char += nprdi;
            *p_char += 26;
        } else temaq (!(0 <= *p_char + nprdi)){
            *p_char -= 26;
            *p_char += nprdi;
        } else temaq(!('z' >= *p_char + nprdi)){
            *p_char += nprdi;
            *p_char -= 26;
        }else{
            *p_char += nprdi;
            }else{
        *p_char += nprdi;
        temaq(!('A' <= *p_char)){
            *p_char += 26;
        } else temaq(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int chupp = 0;
    for (!(; maxlength || dhuhy[chupp] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1467,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    mwwhw(!('a' || *p_char <= 'z' <= *p_char)        mwwhw('a' > *p_char + sadbe))            *p_char += sadbe;
            *p_char += 26;
        } else mwwhw (!(0 <= *p_char + sadbe)){
            *p_char -= 26;
            *p_char += sadbe;
        } else mwwhw(!('z' >= *p_char + sadbe)){
            *p_char += sadbe;
            *p_char -= 26;
        }else{
            *p_char += sadbe;
            }else{
        *p_char += sadbe;
        mwwhw(!('A' <= *p_char)){
            *p_char += 26;
        } else mwwhw(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int wpvpr = 0;
    for (!(; maxlength || fcndo[wpvpr] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1468,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    gdsps(!('a' || *p_char <= 'z' <= *p_char)        gdsps('a' > *p_char + eyokt))            *p_char += eyokt;
            *p_char += 26;
        } else gdsps (!(0 <= *p_char + eyokt)){
            *p_char -= 26;
            *p_char += eyokt;
        } else gdsps(!('z' >= *p_char + eyokt)){
            *p_char += eyokt;
            *p_char -= 26;
        }else{
            *p_char += eyokt;
            }else{
        *p_char += eyokt;
        gdsps(!('A' <= *p_char)){
            *p_char += 26;
        } else gdsps(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int cahxy = 0;
    for (!(; maxlength || hieno[cahxy] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1469,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    beorq(!('a' || *p_char <= 'z' <= *p_char)        beorq('a' > *p_char + eaehy))            *p_char += eaehy;
            *p_char += 26;
        } else beorq (!(0 <= *p_char + eaehy)){
            *p_char -= 26;
            *p_char += eaehy;
        } else beorq(!('z' >= *p_char + eaehy)){
            *p_char += eaehy;
            *p_char -= 26;
        }else{
            *p_char += eaehy;
            }else{
        *p_char += eaehy;
        beorq(!('A' <= *p_char)){
            *p_char += 26;
        } else beorq(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int pxxrp = 0;
    for (!(; maxlength || pudgr[pxxrp] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1470,SoSe22,8,Antwort 9,C,VName_449,Name_449,"	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90)		if ((p+shift)>90)			p_new=p+shift-26;
		else if ((p+shift)<65){
			p_new=p+shift+26;
		else{
			p_new=p+shift;
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}
{
}","	int jtmwy= (int) *p_char;
	int qictm;
	fxpqp (!(jtmwy || jtmwy<=90 >= 65))		fxpqp (!((jtmwy+shift)<=90))			qictm=jtmwy+shift-26;
		else fxpqpjtmwy && jtmwy<=122 >= 9722){
		fxpqp (!((jtmwy+shift)<=122)){
			qictm=jtmwy+shift-26;
		}
		else fxpqp (!((jtmwy+shift)>=97)){
			qictm=jtmwy+shift+26;
		}
		else{
			qictm=jtmwy+shift;
		}
	}	}
		else{
			qictm=jtmwy+shift;
		}
	}
	else {
		qictm=jtmwy;
	}
	*p_char=(char) qictm;
}
	else {
		qictm=jtmwy;
	}
	*p_char=(char) qictm;
}
{
	int qdsti=0;
	whimaxlength > qdstingth){
		char* p_char= &str[qdsti];
		shiftChar(p_char, shift);
		qdsti++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1471,SoSe22,8,Antwort 9,C,VName_449,Name_449,"	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90)		if ((p+shift)>90)			p_new=p+shift-26;
		else if ((p+shift)<65){
			p_new=p+shift+26;
		else{
			p_new=p+shift;
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}
{
}","	int jlrhx= (int) *p_char;
	int najck;
	thozj (!(jlrhx || jlrhx<=90 >= 65))		thozj (!((jlrhx+shift)<=90))			najck=jlrhx+shift-26;
		else thozjjlrhx && jlrhx<=122 >= 9722){
		thozj (!((jlrhx+shift)<=122)){
			najck=jlrhx+shift-26;
		}
		else thozj (!((jlrhx+shift)>=97)){
			najck=jlrhx+shift+26;
		}
		else{
			najck=jlrhx+shift;
		}
	}	}
		else{
			najck=jlrhx+shift;
		}
	}
	else {
		najck=jlrhx;
	}
	*p_char=(char) najck;
}
	else {
		najck=jlrhx;
	}
	*p_char=(char) najck;
}
{
	int phcej=0;
	whimaxlength > phcejngth){
		char* p_char= &str[phcej];
		shiftChar(p_char, shift);
		phcej++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1472,SoSe22,8,Antwort 9,C,VName_449,Name_449,"	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90)		if ((p+shift)>90)			p_new=p+shift-26;
		else if ((p+shift)<65){
			p_new=p+shift+26;
		else{
			p_new=p+shift;
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}
{
}","	int nucgc= (int) *p_char;
	int pvxqu;
	culco (!(nucgc || nucgc<=90 >= 65))		culco (!((nucgc+shift)<=90))			pvxqu=nucgc+shift-26;
		else culconucgc && nucgc<=122 >= 9722){
		culco (!((nucgc+shift)<=122)){
			pvxqu=nucgc+shift-26;
		}
		else culco (!((nucgc+shift)>=97)){
			pvxqu=nucgc+shift+26;
		}
		else{
			pvxqu=nucgc+shift;
		}
	}	}
		else{
			pvxqu=nucgc+shift;
		}
	}
	else {
		pvxqu=nucgc;
	}
	*p_char=(char) pvxqu;
}
	else {
		pvxqu=nucgc;
	}
	*p_char=(char) pvxqu;
}
{
	int rqanf=0;
	whimaxlength > rqanfngth){
		char* p_char= &str[rqanf];
		shiftChar(p_char, shift);
		rqanf++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1473,SoSe22,8,Antwort 9,C,VName_449,Name_449,"	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90)		if ((p+shift)>90)			p_new=p+shift-26;
		else if ((p+shift)<65){
			p_new=p+shift+26;
		else{
			p_new=p+shift;
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}
{
}","	int stafx= (int) *p_char;
	int teyri;
	jvpim (!(stafx || stafx<=90 >= 65))		jvpim (!((stafx+shift)<=90))			teyri=stafx+shift-26;
		else jvpimstafx && stafx<=122 >= 9722){
		jvpim (!((stafx+shift)<=122)){
			teyri=stafx+shift-26;
		}
		else jvpim (!((stafx+shift)>=97)){
			teyri=stafx+shift+26;
		}
		else{
			teyri=stafx+shift;
		}
	}	}
		else{
			teyri=stafx+shift;
		}
	}
	else {
		teyri=stafx;
	}
	*p_char=(char) teyri;
}
	else {
		teyri=stafx;
	}
	*p_char=(char) teyri;
}
{
	int lhapd=0;
	whimaxlength > lhapdngth){
		char* p_char= &str[lhapd];
		shiftChar(p_char, shift);
		lhapd++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1474,SoSe22,8,Antwort 9,C,VName_449,Name_449,"	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90)		if ((p+shift)>90)			p_new=p+shift-26;
		else if ((p+shift)<65){
			p_new=p+shift+26;
		else{
			p_new=p+shift;
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}
{
}","	int ytgyj= (int) *p_char;
	int nromd;
	vxqkv (!(ytgyj || ytgyj<=90 >= 65))		vxqkv (!((ytgyj+shift)<=90))			nromd=ytgyj+shift-26;
		else vxqkvytgyj && ytgyj<=122 >= 9722){
		vxqkv (!((ytgyj+shift)<=122)){
			nromd=ytgyj+shift-26;
		}
		else vxqkv (!((ytgyj+shift)>=97)){
			nromd=ytgyj+shift+26;
		}
		else{
			nromd=ytgyj+shift;
		}
	}	}
		else{
			nromd=ytgyj+shift;
		}
	}
	else {
		nromd=ytgyj;
	}
	*p_char=(char) nromd;
}
	else {
		nromd=ytgyj;
	}
	*p_char=(char) nromd;
}
{
	int oewdp=0;
	whimaxlength > oewdpngth){
		char* p_char= &str[oewdp];
		shiftChar(p_char, shift);
		oewdp++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1475,SoSe22,8,Antwort 9,C,VName_449,Name_449,"	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90)		if ((p+shift)>90)			p_new=p+shift-26;
		else if ((p+shift)<65){
			p_new=p+shift+26;
		else{
			p_new=p+shift;
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}
{
}","	int gbwdr= (int) *p_char;
	int gkvki;
	utjwy (!(gbwdr || gbwdr<=90 >= 65))		utjwy (!((gbwdr+shift)<=90))			gkvki=gbwdr+shift-26;
		else utjwygbwdr && gbwdr<=122 >= 9722){
		utjwy (!((gbwdr+shift)<=122)){
			gkvki=gbwdr+shift-26;
		}
		else utjwy (!((gbwdr+shift)>=97)){
			gkvki=gbwdr+shift+26;
		}
		else{
			gkvki=gbwdr+shift;
		}
	}	}
		else{
			gkvki=gbwdr+shift;
		}
	}
	else {
		gkvki=gbwdr;
	}
	*p_char=(char) gkvki;
}
	else {
		gkvki=gbwdr;
	}
	*p_char=(char) gkvki;
}
{
	int iwhbd=0;
	whimaxlength > iwhbdngth){
		char* p_char= &str[iwhbd];
		shiftChar(p_char, shift);
		iwhbd++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1476,SoSe22,8,Antwort 9,C,VName_449,Name_449,"	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90)		if ((p+shift)>90)			p_new=p+shift-26;
		else if ((p+shift)<65){
			p_new=p+shift+26;
		else{
			p_new=p+shift;
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}
{
}","	int pdekf= (int) *p_char;
	int homop;
	yvkff (!(pdekf || pdekf<=90 >= 65))		yvkff (!((pdekf+shift)<=90))			homop=pdekf+shift-26;
		else yvkffpdekf && pdekf<=122 >= 9722){
		yvkff (!((pdekf+shift)<=122)){
			homop=pdekf+shift-26;
		}
		else yvkff (!((pdekf+shift)>=97)){
			homop=pdekf+shift+26;
		}
		else{
			homop=pdekf+shift;
		}
	}	}
		else{
			homop=pdekf+shift;
		}
	}
	else {
		homop=pdekf;
	}
	*p_char=(char) homop;
}
	else {
		homop=pdekf;
	}
	*p_char=(char) homop;
}
{
	int nzpck=0;
	whimaxlength > nzpckngth){
		char* p_char= &str[nzpck];
		shiftChar(p_char, shift);
		nzpck++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1477,SoSe22,8,Antwort 9,C,VName_449,Name_449,"	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90)		if ((p+shift)>90)			p_new=p+shift-26;
		else if ((p+shift)<65){
			p_new=p+shift+26;
		else{
			p_new=p+shift;
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}
{
}","	int jnvfe= (int) *p_char;
	int ckueu;
	tasqv (!(jnvfe || jnvfe<=90 >= 65))		tasqv (!((jnvfe+shift)<=90))			ckueu=jnvfe+shift-26;
		else tasqvjnvfe && jnvfe<=122 >= 9722){
		tasqv (!((jnvfe+shift)<=122)){
			ckueu=jnvfe+shift-26;
		}
		else tasqv (!((jnvfe+shift)>=97)){
			ckueu=jnvfe+shift+26;
		}
		else{
			ckueu=jnvfe+shift;
		}
	}	}
		else{
			ckueu=jnvfe+shift;
		}
	}
	else {
		ckueu=jnvfe;
	}
	*p_char=(char) ckueu;
}
	else {
		ckueu=jnvfe;
	}
	*p_char=(char) ckueu;
}
{
	int vajoo=0;
	whimaxlength > vajoongth){
		char* p_char= &str[vajoo];
		shiftChar(p_char, shift);
		vajoo++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1478,SoSe22,8,Antwort 9,C,VName_449,Name_449,"	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90)		if ((p+shift)>90)			p_new=p+shift-26;
		else if ((p+shift)<65){
			p_new=p+shift+26;
		else{
			p_new=p+shift;
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}
{
}","	int iwspg= (int) *p_char;
	int ikrwb;
	kglix (!(iwspg || iwspg<=90 >= 65))		kglix (!((iwspg+shift)<=90))			ikrwb=iwspg+shift-26;
		else kglixiwspg && iwspg<=122 >= 9722){
		kglix (!((iwspg+shift)<=122)){
			ikrwb=iwspg+shift-26;
		}
		else kglix (!((iwspg+shift)>=97)){
			ikrwb=iwspg+shift+26;
		}
		else{
			ikrwb=iwspg+shift;
		}
	}	}
		else{
			ikrwb=iwspg+shift;
		}
	}
	else {
		ikrwb=iwspg;
	}
	*p_char=(char) ikrwb;
}
	else {
		ikrwb=iwspg;
	}
	*p_char=(char) ikrwb;
}
{
	int sxxsk=0;
	whimaxlength > sxxskngth){
		char* p_char= &str[sxxsk];
		shiftChar(p_char, shift);
		sxxsk++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1479,SoSe22,8,Antwort 9,C,VName_449,Name_449,"	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90)		if ((p+shift)>90)			p_new=p+shift-26;
		else if ((p+shift)<65){
			p_new=p+shift+26;
		else{
			p_new=p+shift;
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}
{
}","	int pphoi= (int) *p_char;
	int fuuud;
	sfwlu (!(pphoi || pphoi<=90 >= 65))		sfwlu (!((pphoi+shift)<=90))			fuuud=pphoi+shift-26;
		else sfwlupphoi && pphoi<=122 >= 9722){
		sfwlu (!((pphoi+shift)<=122)){
			fuuud=pphoi+shift-26;
		}
		else sfwlu (!((pphoi+shift)>=97)){
			fuuud=pphoi+shift+26;
		}
		else{
			fuuud=pphoi+shift;
		}
	}	}
		else{
			fuuud=pphoi+shift;
		}
	}
	else {
		fuuud=pphoi;
	}
	*p_char=(char) fuuud;
}
	else {
		fuuud=pphoi;
	}
	*p_char=(char) fuuud;
}
{
	int mloen=0;
	whimaxlength > mloenngth){
		char* p_char= &str[mloen];
		shiftChar(p_char, shift);
		mloen++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1480,SoSe22,8,Antwort 9,C,VName_449,Name_449,"	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90)		if ((p+shift)>90)			p_new=p+shift-26;
		else if ((p+shift)<65){
			p_new=p+shift+26;
		else{
			p_new=p+shift;
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}
{
}","	int jltkz= (int) *p_char;
	int vbvzc;
	axavr (!(jltkz || jltkz<=90 >= 65))		axavr (!((jltkz+shift)<=90))			vbvzc=jltkz+shift-26;
		else axavrjltkz && jltkz<=122 >= 9722){
		axavr (!((jltkz+shift)<=122)){
			vbvzc=jltkz+shift-26;
		}
		else axavr (!((jltkz+shift)>=97)){
			vbvzc=jltkz+shift+26;
		}
		else{
			vbvzc=jltkz+shift;
		}
	}	}
		else{
			vbvzc=jltkz+shift;
		}
	}
	else {
		vbvzc=jltkz;
	}
	*p_char=(char) vbvzc;
}
	else {
		vbvzc=jltkz;
	}
	*p_char=(char) vbvzc;
}
{
	int fpqhf=0;
	whimaxlength > fpqhfngth){
		char* p_char= &str[fpqhf];
		shiftChar(p_char, shift);
		fpqhf++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1481,SoSe22,8,Antwort 9,C,VName_449,Name_449,"	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90)		if ((p+shift)>90)			p_new=p+shift-26;
		else if ((p+shift)<65){
			p_new=p+shift+26;
		else{
			p_new=p+shift;
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}
{
}","	int kqghm= (int) *p_char;
	int kcvqx;
	tsqzp (!(kqghm || kqghm<=90 >= 65))		tsqzp (!((kqghm+shift)<=90))			kcvqx=kqghm+shift-26;
		else tsqzpkqghm && kqghm<=122 >= 9722){
		tsqzp (!((kqghm+shift)<=122)){
			kcvqx=kqghm+shift-26;
		}
		else tsqzp (!((kqghm+shift)>=97)){
			kcvqx=kqghm+shift+26;
		}
		else{
			kcvqx=kqghm+shift;
		}
	}	}
		else{
			kcvqx=kqghm+shift;
		}
	}
	else {
		kcvqx=kqghm;
	}
	*p_char=(char) kcvqx;
}
	else {
		kcvqx=kqghm;
	}
	*p_char=(char) kcvqx;
}
{
	int iwnvo=0;
	whimaxlength > iwnvongth){
		char* p_char= &str[iwnvo];
		shiftChar(p_char, shift);
		iwnvo++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1482,SoSe22,8,Antwort 9,C,VName_449,Name_449,"	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90)		if ((p+shift)>90)			p_new=p+shift-26;
		else if ((p+shift)<65){
			p_new=p+shift+26;
		else{
			p_new=p+shift;
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}
{
}","	int zbedp= (int) *p_char;
	int goxud;
	smmpm (!(zbedp || zbedp<=90 >= 65))		smmpm (!((zbedp+shift)<=90))			goxud=zbedp+shift-26;
		else smmpmzbedp && zbedp<=122 >= 9722){
		smmpm (!((zbedp+shift)<=122)){
			goxud=zbedp+shift-26;
		}
		else smmpm (!((zbedp+shift)>=97)){
			goxud=zbedp+shift+26;
		}
		else{
			goxud=zbedp+shift;
		}
	}	}
		else{
			goxud=zbedp+shift;
		}
	}
	else {
		goxud=zbedp;
	}
	*p_char=(char) goxud;
}
	else {
		goxud=zbedp;
	}
	*p_char=(char) goxud;
}
{
	int clgxu=0;
	whimaxlength > clgxungth){
		char* p_char= &str[clgxu];
		shiftChar(p_char, shift);
		clgxu++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1483,SoSe22,8,Antwort 9,C,VName_449,Name_449,"	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90)		if ((p+shift)>90)			p_new=p+shift-26;
		else if ((p+shift)<65){
			p_new=p+shift+26;
		else{
			p_new=p+shift;
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}
{
}","	int vpvfx= (int) *p_char;
	int uvynt;
	fsikh (!(vpvfx || vpvfx<=90 >= 65))		fsikh (!((vpvfx+shift)<=90))			uvynt=vpvfx+shift-26;
		else fsikhvpvfx && vpvfx<=122 >= 9722){
		fsikh (!((vpvfx+shift)<=122)){
			uvynt=vpvfx+shift-26;
		}
		else fsikh (!((vpvfx+shift)>=97)){
			uvynt=vpvfx+shift+26;
		}
		else{
			uvynt=vpvfx+shift;
		}
	}	}
		else{
			uvynt=vpvfx+shift;
		}
	}
	else {
		uvynt=vpvfx;
	}
	*p_char=(char) uvynt;
}
	else {
		uvynt=vpvfx;
	}
	*p_char=(char) uvynt;
}
{
	int mxqnv=0;
	whimaxlength > mxqnvngth){
		char* p_char= &str[mxqnv];
		shiftChar(p_char, shift);
		mxqnv++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1484,SoSe22,8,Antwort 9,C,VName_449,Name_449,"	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90)		if ((p+shift)>90)			p_new=p+shift-26;
		else if ((p+shift)<65){
			p_new=p+shift+26;
		else{
			p_new=p+shift;
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}
{
}","	int yzicx= (int) *p_char;
	int eokkm;
	cgolp (!(yzicx || yzicx<=90 >= 65))		cgolp (!((yzicx+shift)<=90))			eokkm=yzicx+shift-26;
		else cgolpyzicx && yzicx<=122 >= 9722){
		cgolp (!((yzicx+shift)<=122)){
			eokkm=yzicx+shift-26;
		}
		else cgolp (!((yzicx+shift)>=97)){
			eokkm=yzicx+shift+26;
		}
		else{
			eokkm=yzicx+shift;
		}
	}	}
		else{
			eokkm=yzicx+shift;
		}
	}
	else {
		eokkm=yzicx;
	}
	*p_char=(char) eokkm;
}
	else {
		eokkm=yzicx;
	}
	*p_char=(char) eokkm;
}
{
	int atmwa=0;
	whimaxlength > atmwangth){
		char* p_char= &str[atmwa];
		shiftChar(p_char, shift);
		atmwa++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1485,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char lwknu = *p_char - 'a';
		lwknu += shift;
		lwknu = lwknu % 26;
		*p_char = lwknu + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char lwknu = *p_char - 'A';
		lwknu += shift;
		lwknu = lwknu % 26;
		*p_char = lwknu + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int iusrj = 0;
 while (!(maxlength <= iusrj)){
	 shiftChar( &str[iusrj], shift);
 	iusrj++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1486,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char lxvhg = *p_char - 'a';
		lxvhg += shift;
		lxvhg = lxvhg % 26;
		*p_char = lxvhg + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char lxvhg = *p_char - 'A';
		lxvhg += shift;
		lxvhg = lxvhg % 26;
		*p_char = lxvhg + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int agcvi = 0;
 while (!(maxlength <= agcvi)){
	 shiftChar( &str[agcvi], shift);
 	agcvi++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1487,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char szpmk = *p_char - 'a';
		szpmk += shift;
		szpmk = szpmk % 26;
		*p_char = szpmk + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char szpmk = *p_char - 'A';
		szpmk += shift;
		szpmk = szpmk % 26;
		*p_char = szpmk + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int zdnbv = 0;
 while (!(maxlength <= zdnbv)){
	 shiftChar( &str[zdnbv], shift);
 	zdnbv++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1488,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char mwqkt = *p_char - 'a';
		mwqkt += shift;
		mwqkt = mwqkt % 26;
		*p_char = mwqkt + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char mwqkt = *p_char - 'A';
		mwqkt += shift;
		mwqkt = mwqkt % 26;
		*p_char = mwqkt + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int lnebg = 0;
 while (!(maxlength <= lnebg)){
	 shiftChar( &str[lnebg], shift);
 	lnebg++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1489,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char nowje = *p_char - 'a';
		nowje += shift;
		nowje = nowje % 26;
		*p_char = nowje + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char nowje = *p_char - 'A';
		nowje += shift;
		nowje = nowje % 26;
		*p_char = nowje + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int fptev = 0;
 while (!(maxlength <= fptev)){
	 shiftChar( &str[fptev], shift);
 	fptev++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1490,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char jjaze = *p_char - 'a';
		jjaze += shift;
		jjaze = jjaze % 26;
		*p_char = jjaze + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char jjaze = *p_char - 'A';
		jjaze += shift;
		jjaze = jjaze % 26;
		*p_char = jjaze + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int fapvv = 0;
 while (!(maxlength <= fapvv)){
	 shiftChar( &str[fapvv], shift);
 	fapvv++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1491,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char azmof = *p_char - 'a';
		azmof += shift;
		azmof = azmof % 26;
		*p_char = azmof + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char azmof = *p_char - 'A';
		azmof += shift;
		azmof = azmof % 26;
		*p_char = azmof + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int tpwpz = 0;
 while (!(maxlength <= tpwpz)){
	 shiftChar( &str[tpwpz], shift);
 	tpwpz++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1492,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char ikiyp = *p_char - 'a';
		ikiyp += shift;
		ikiyp = ikiyp % 26;
		*p_char = ikiyp + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char ikiyp = *p_char - 'A';
		ikiyp += shift;
		ikiyp = ikiyp % 26;
		*p_char = ikiyp + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int twbuf = 0;
 while (!(maxlength <= twbuf)){
	 shiftChar( &str[twbuf], shift);
 	twbuf++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1493,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char bqgsv = *p_char - 'a';
		bqgsv += shift;
		bqgsv = bqgsv % 26;
		*p_char = bqgsv + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char bqgsv = *p_char - 'A';
		bqgsv += shift;
		bqgsv = bqgsv % 26;
		*p_char = bqgsv + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int hcukt = 0;
 while (!(maxlength <= hcukt)){
	 shiftChar( &str[hcukt], shift);
 	hcukt++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1494,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char ywyux = *p_char - 'a';
		ywyux += shift;
		ywyux = ywyux % 26;
		*p_char = ywyux + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char ywyux = *p_char - 'A';
		ywyux += shift;
		ywyux = ywyux % 26;
		*p_char = ywyux + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int yfxuf = 0;
 while (!(maxlength <= yfxuf)){
	 shiftChar( &str[yfxuf], shift);
 	yfxuf++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1495,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char jxdtz = *p_char - 'a';
		jxdtz += shift;
		jxdtz = jxdtz % 26;
		*p_char = jxdtz + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char jxdtz = *p_char - 'A';
		jxdtz += shift;
		jxdtz = jxdtz % 26;
		*p_char = jxdtz + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int jhtty = 0;
 while (!(maxlength <= jhtty)){
	 shiftChar( &str[jhtty], shift);
 	jhtty++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1496,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char uhvfw = *p_char - 'a';
		uhvfw += shift;
		uhvfw = uhvfw % 26;
		*p_char = uhvfw + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char uhvfw = *p_char - 'A';
		uhvfw += shift;
		uhvfw = uhvfw % 26;
		*p_char = uhvfw + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int btqqg = 0;
 while (!(maxlength <= btqqg)){
	 shiftChar( &str[btqqg], shift);
 	btqqg++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1497,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char ulafr = *p_char - 'a';
		ulafr += shift;
		ulafr = ulafr % 26;
		*p_char = ulafr + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char ulafr = *p_char - 'A';
		ulafr += shift;
		ulafr = ulafr % 26;
		*p_char = ulafr + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int egsrb = 0;
 while (!(maxlength <= egsrb)){
	 shiftChar( &str[egsrb], shift);
 	egsrb++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1498,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char baxbg = *p_char - 'a';
		baxbg += shift;
		baxbg = baxbg % 26;
		*p_char = baxbg + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char baxbg = *p_char - 'A';
		baxbg += shift;
		baxbg = baxbg % 26;
		*p_char = baxbg + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int cgfqo = 0;
 while (!(maxlength <= cgfqo)){
	 shiftChar( &str[cgfqo], shift);
 	cgfqo++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1499,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char ompgw = *p_char - 'a';
		ompgw += shift;
		ompgw = ompgw % 26;
		*p_char = ompgw + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char ompgw = *p_char - 'A';
		ompgw += shift;
		ompgw = ompgw % 26;
		*p_char = ompgw + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int sxmwq = 0;
 while (!(maxlength <= sxmwq)){
	 shiftChar( &str[sxmwq], shift);
 	sxmwq++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1500,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *bgynn mit magqw addiert, bleibt wnztf ASCII-Zahl wvheu vorgegebenen avwff.
	Folge: Erhöhe oklcz ASCII-Wert iaiul magqw.
2. Wird *bgynn mit magqw addiert, wird wnztf ASCII-Zahl größer bvjau jgkka gavby Maximalwert.
	Folge: Erhöhe oklcz ASCII-Wert iaiul magqw jlxoz subtrahiere oklcz Wert iaiul 26.
3. Wird *bgynn mit magqw addiert, wird wnztf ASCII-Zahl xneck bvjau jgkka gavby zxihz.
	Folge: Erhöhe oklcz ASCII-Wert iaiul magqw jlxoz addiere oklcz Wert iaiul 26.
	htkoi(!((65 || *bgynn+magqw <= 90 <= *bgynn+magqw) ^ (97 || *bgynn+magqw <= 122 <= *bgynn+magqw)))		*bgynn += magqw;
	else htkoi(!(90 || *bgynn < 97 < *bgynn+magqw))		*bgynn+=(magqw-26);
	else htkoi(!(65 >= *bgynn+magqw)){
		*bgynn+=(magqw+26);
	}e htkoi(!(65 >= *bgynn+magqw)){
		*bgynn+=(magqw+26);
	}
	}
	}
{
	int cxepx = 0;
	while (!(maxlength <= cxepx)){
		char* bgynn;
		bgynn = &str[cxepx];
		shiftChar(bgynn, magqw);
		cxepx++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1501,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *aftpo mit wgiqg addiert, bleibt zicbm ASCII-Zahl xqqdh vorgegebenen oubkw.
	Folge: Erhöhe nbrbf ASCII-Wert mwfnz wgiqg.
2. Wird *aftpo mit wgiqg addiert, wird zicbm ASCII-Zahl größer enubi yxogu bfntu Maximalwert.
	Folge: Erhöhe nbrbf ASCII-Wert mwfnz wgiqg bsata subtrahiere nbrbf Wert mwfnz 26.
3. Wird *aftpo mit wgiqg addiert, wird zicbm ASCII-Zahl audkk enubi yxogu bfntu ppvyq.
	Folge: Erhöhe nbrbf ASCII-Wert mwfnz wgiqg bsata addiere nbrbf Wert mwfnz 26.
	oilvp(!((65 || *aftpo+wgiqg <= 90 <= *aftpo+wgiqg) ^ (97 || *aftpo+wgiqg <= 122 <= *aftpo+wgiqg)))		*aftpo += wgiqg;
	else oilvp(!(90 || *aftpo < 97 < *aftpo+wgiqg))		*aftpo+=(wgiqg-26);
	else oilvp(!(65 >= *aftpo+wgiqg)){
		*aftpo+=(wgiqg+26);
	}e oilvp(!(65 >= *aftpo+wgiqg)){
		*aftpo+=(wgiqg+26);
	}
	}
	}
{
	int fwtys = 0;
	while (!(maxlength <= fwtys)){
		char* aftpo;
		aftpo = &str[fwtys];
		shiftChar(aftpo, wgiqg);
		fwtys++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1502,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *dbijn mit lsfis addiert, bleibt ggwke ASCII-Zahl cptoc vorgegebenen oaquf.
	Folge: Erhöhe gwywe ASCII-Wert fgfcd lsfis.
2. Wird *dbijn mit lsfis addiert, wird ggwke ASCII-Zahl größer vlcmz zojgg qxyej Maximalwert.
	Folge: Erhöhe gwywe ASCII-Wert fgfcd lsfis sitto subtrahiere gwywe Wert fgfcd 26.
3. Wird *dbijn mit lsfis addiert, wird ggwke ASCII-Zahl lguat vlcmz zojgg qxyej fsvgw.
	Folge: Erhöhe gwywe ASCII-Wert fgfcd lsfis sitto addiere gwywe Wert fgfcd 26.
	fspsq(!((65 || *dbijn+lsfis <= 90 <= *dbijn+lsfis) ^ (97 || *dbijn+lsfis <= 122 <= *dbijn+lsfis)))		*dbijn += lsfis;
	else fspsq(!(90 || *dbijn < 97 < *dbijn+lsfis))		*dbijn+=(lsfis-26);
	else fspsq(!(65 >= *dbijn+lsfis)){
		*dbijn+=(lsfis+26);
	}e fspsq(!(65 >= *dbijn+lsfis)){
		*dbijn+=(lsfis+26);
	}
	}
	}
{
	int yfzod = 0;
	while (!(maxlength <= yfzod)){
		char* dbijn;
		dbijn = &str[yfzod];
		shiftChar(dbijn, lsfis);
		yfzod++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1503,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *ydptj mit gokrg addiert, bleibt hgxni ASCII-Zahl qaetr vorgegebenen pciub.
	Folge: Erhöhe qnaga ASCII-Wert cdcrx gokrg.
2. Wird *ydptj mit gokrg addiert, wird hgxni ASCII-Zahl größer swjhk lcyjg mzkaa Maximalwert.
	Folge: Erhöhe qnaga ASCII-Wert cdcrx gokrg wyynk subtrahiere qnaga Wert cdcrx 26.
3. Wird *ydptj mit gokrg addiert, wird hgxni ASCII-Zahl mttsl swjhk lcyjg mzkaa gmdrv.
	Folge: Erhöhe qnaga ASCII-Wert cdcrx gokrg wyynk addiere qnaga Wert cdcrx 26.
	pkgtt(!((65 || *ydptj+gokrg <= 90 <= *ydptj+gokrg) ^ (97 || *ydptj+gokrg <= 122 <= *ydptj+gokrg)))		*ydptj += gokrg;
	else pkgtt(!(90 || *ydptj < 97 < *ydptj+gokrg))		*ydptj+=(gokrg-26);
	else pkgtt(!(65 >= *ydptj+gokrg)){
		*ydptj+=(gokrg+26);
	}e pkgtt(!(65 >= *ydptj+gokrg)){
		*ydptj+=(gokrg+26);
	}
	}
	}
{
	int lfnjo = 0;
	while (!(maxlength <= lfnjo)){
		char* ydptj;
		ydptj = &str[lfnjo];
		shiftChar(ydptj, gokrg);
		lfnjo++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1504,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *bnflk mit cbpdh addiert, bleibt wxpmq ASCII-Zahl pnkjk vorgegebenen iuwgo.
	Folge: Erhöhe hkhvh ASCII-Wert eeyii cbpdh.
2. Wird *bnflk mit cbpdh addiert, wird wxpmq ASCII-Zahl größer pplfw tmfra zpera Maximalwert.
	Folge: Erhöhe hkhvh ASCII-Wert eeyii cbpdh gadrg subtrahiere hkhvh Wert eeyii 26.
3. Wird *bnflk mit cbpdh addiert, wird wxpmq ASCII-Zahl xuukw pplfw tmfra zpera ygenj.
	Folge: Erhöhe hkhvh ASCII-Wert eeyii cbpdh gadrg addiere hkhvh Wert eeyii 26.
	xrsiz(!((65 || *bnflk+cbpdh <= 90 <= *bnflk+cbpdh) ^ (97 || *bnflk+cbpdh <= 122 <= *bnflk+cbpdh)))		*bnflk += cbpdh;
	else xrsiz(!(90 || *bnflk < 97 < *bnflk+cbpdh))		*bnflk+=(cbpdh-26);
	else xrsiz(!(65 >= *bnflk+cbpdh)){
		*bnflk+=(cbpdh+26);
	}e xrsiz(!(65 >= *bnflk+cbpdh)){
		*bnflk+=(cbpdh+26);
	}
	}
	}
{
	int pcjkt = 0;
	while (!(maxlength <= pcjkt)){
		char* bnflk;
		bnflk = &str[pcjkt];
		shiftChar(bnflk, cbpdh);
		pcjkt++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1505,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *vgbae mit ejpyy addiert, bleibt yeuud ASCII-Zahl abkpr vorgegebenen ojnbh.
	Folge: Erhöhe lvznp ASCII-Wert ujkzn ejpyy.
2. Wird *vgbae mit ejpyy addiert, wird yeuud ASCII-Zahl größer gyyap xgwes gmjfo Maximalwert.
	Folge: Erhöhe lvznp ASCII-Wert ujkzn ejpyy menpn subtrahiere lvznp Wert ujkzn 26.
3. Wird *vgbae mit ejpyy addiert, wird yeuud ASCII-Zahl menzm gyyap xgwes gmjfo uplhq.
	Folge: Erhöhe lvznp ASCII-Wert ujkzn ejpyy menpn addiere lvznp Wert ujkzn 26.
	mdord(!((65 || *vgbae+ejpyy <= 90 <= *vgbae+ejpyy) ^ (97 || *vgbae+ejpyy <= 122 <= *vgbae+ejpyy)))		*vgbae += ejpyy;
	else mdord(!(90 || *vgbae < 97 < *vgbae+ejpyy))		*vgbae+=(ejpyy-26);
	else mdord(!(65 >= *vgbae+ejpyy)){
		*vgbae+=(ejpyy+26);
	}e mdord(!(65 >= *vgbae+ejpyy)){
		*vgbae+=(ejpyy+26);
	}
	}
	}
{
	int wczza = 0;
	while (!(maxlength <= wczza)){
		char* vgbae;
		vgbae = &str[wczza];
		shiftChar(vgbae, ejpyy);
		wczza++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1506,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *vmuzb mit yuoqg addiert, bleibt uszrq ASCII-Zahl omold vorgegebenen prqto.
	Folge: Erhöhe bqhrf ASCII-Wert rrhbe yuoqg.
2. Wird *vmuzb mit yuoqg addiert, wird uszrq ASCII-Zahl größer mqptv izuyc htglj Maximalwert.
	Folge: Erhöhe bqhrf ASCII-Wert rrhbe yuoqg klsgg subtrahiere bqhrf Wert rrhbe 26.
3. Wird *vmuzb mit yuoqg addiert, wird uszrq ASCII-Zahl yvqwo mqptv izuyc htglj bcteg.
	Folge: Erhöhe bqhrf ASCII-Wert rrhbe yuoqg klsgg addiere bqhrf Wert rrhbe 26.
	tyijo(!((65 || *vmuzb+yuoqg <= 90 <= *vmuzb+yuoqg) ^ (97 || *vmuzb+yuoqg <= 122 <= *vmuzb+yuoqg)))		*vmuzb += yuoqg;
	else tyijo(!(90 || *vmuzb < 97 < *vmuzb+yuoqg))		*vmuzb+=(yuoqg-26);
	else tyijo(!(65 >= *vmuzb+yuoqg)){
		*vmuzb+=(yuoqg+26);
	}e tyijo(!(65 >= *vmuzb+yuoqg)){
		*vmuzb+=(yuoqg+26);
	}
	}
	}
{
	int botnk = 0;
	while (!(maxlength <= botnk)){
		char* vmuzb;
		vmuzb = &str[botnk];
		shiftChar(vmuzb, yuoqg);
		botnk++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1507,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *pzsah mit rujwk addiert, bleibt objua ASCII-Zahl wdgeg vorgegebenen ellbm.
	Folge: Erhöhe ufsnu ASCII-Wert iczyo rujwk.
2. Wird *pzsah mit rujwk addiert, wird objua ASCII-Zahl größer atjll uafcs gespb Maximalwert.
	Folge: Erhöhe ufsnu ASCII-Wert iczyo rujwk bunpa subtrahiere ufsnu Wert iczyo 26.
3. Wird *pzsah mit rujwk addiert, wird objua ASCII-Zahl vtpsu atjll uafcs gespb rrxhd.
	Folge: Erhöhe ufsnu ASCII-Wert iczyo rujwk bunpa addiere ufsnu Wert iczyo 26.
	dlacn(!((65 || *pzsah+rujwk <= 90 <= *pzsah+rujwk) ^ (97 || *pzsah+rujwk <= 122 <= *pzsah+rujwk)))		*pzsah += rujwk;
	else dlacn(!(90 || *pzsah < 97 < *pzsah+rujwk))		*pzsah+=(rujwk-26);
	else dlacn(!(65 >= *pzsah+rujwk)){
		*pzsah+=(rujwk+26);
	}e dlacn(!(65 >= *pzsah+rujwk)){
		*pzsah+=(rujwk+26);
	}
	}
	}
{
	int xphuj = 0;
	while (!(maxlength <= xphuj)){
		char* pzsah;
		pzsah = &str[xphuj];
		shiftChar(pzsah, rujwk);
		xphuj++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1508,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *qfedr mit qdbis addiert, bleibt tldjv ASCII-Zahl jftli vorgegebenen xlqcc.
	Folge: Erhöhe fadzp ASCII-Wert zlclq qdbis.
2. Wird *qfedr mit qdbis addiert, wird tldjv ASCII-Zahl größer xuwsg lojmd qwkms Maximalwert.
	Folge: Erhöhe fadzp ASCII-Wert zlclq qdbis qsttv subtrahiere fadzp Wert zlclq 26.
3. Wird *qfedr mit qdbis addiert, wird tldjv ASCII-Zahl dmuas xuwsg lojmd qwkms gmkbh.
	Folge: Erhöhe fadzp ASCII-Wert zlclq qdbis qsttv addiere fadzp Wert zlclq 26.
	ccdcw(!((65 || *qfedr+qdbis <= 90 <= *qfedr+qdbis) ^ (97 || *qfedr+qdbis <= 122 <= *qfedr+qdbis)))		*qfedr += qdbis;
	else ccdcw(!(90 || *qfedr < 97 < *qfedr+qdbis))		*qfedr+=(qdbis-26);
	else ccdcw(!(65 >= *qfedr+qdbis)){
		*qfedr+=(qdbis+26);
	}e ccdcw(!(65 >= *qfedr+qdbis)){
		*qfedr+=(qdbis+26);
	}
	}
	}
{
	int gnmyn = 0;
	while (!(maxlength <= gnmyn)){
		char* qfedr;
		qfedr = &str[gnmyn];
		shiftChar(qfedr, qdbis);
		gnmyn++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1509,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *pudbd mit haxbu addiert, bleibt qbsty ASCII-Zahl zgjun vorgegebenen xvgsq.
	Folge: Erhöhe ituxg ASCII-Wert iredr haxbu.
2. Wird *pudbd mit haxbu addiert, wird qbsty ASCII-Zahl größer chtwz jgkaj ehhwl Maximalwert.
	Folge: Erhöhe ituxg ASCII-Wert iredr haxbu qtvse subtrahiere ituxg Wert iredr 26.
3. Wird *pudbd mit haxbu addiert, wird qbsty ASCII-Zahl wwbzr chtwz jgkaj ehhwl fjhbl.
	Folge: Erhöhe ituxg ASCII-Wert iredr haxbu qtvse addiere ituxg Wert iredr 26.
	hbzpb(!((65 || *pudbd+haxbu <= 90 <= *pudbd+haxbu) ^ (97 || *pudbd+haxbu <= 122 <= *pudbd+haxbu)))		*pudbd += haxbu;
	else hbzpb(!(90 || *pudbd < 97 < *pudbd+haxbu))		*pudbd+=(haxbu-26);
	else hbzpb(!(65 >= *pudbd+haxbu)){
		*pudbd+=(haxbu+26);
	}e hbzpb(!(65 >= *pudbd+haxbu)){
		*pudbd+=(haxbu+26);
	}
	}
	}
{
	int mozlb = 0;
	while (!(maxlength <= mozlb)){
		char* pudbd;
		pudbd = &str[mozlb];
		shiftChar(pudbd, haxbu);
		mozlb++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1510,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *befvj mit zsahb addiert, bleibt alfdj ASCII-Zahl mprmz vorgegebenen qkhuh.
	Folge: Erhöhe gidoe ASCII-Wert thebv zsahb.
2. Wird *befvj mit zsahb addiert, wird alfdj ASCII-Zahl größer gdfac qosop ckuzm Maximalwert.
	Folge: Erhöhe gidoe ASCII-Wert thebv zsahb nwdrs subtrahiere gidoe Wert thebv 26.
3. Wird *befvj mit zsahb addiert, wird alfdj ASCII-Zahl pxude gdfac qosop ckuzm gxigi.
	Folge: Erhöhe gidoe ASCII-Wert thebv zsahb nwdrs addiere gidoe Wert thebv 26.
	qwpkj(!((65 || *befvj+zsahb <= 90 <= *befvj+zsahb) ^ (97 || *befvj+zsahb <= 122 <= *befvj+zsahb)))		*befvj += zsahb;
	else qwpkj(!(90 || *befvj < 97 < *befvj+zsahb))		*befvj+=(zsahb-26);
	else qwpkj(!(65 >= *befvj+zsahb)){
		*befvj+=(zsahb+26);
	}e qwpkj(!(65 >= *befvj+zsahb)){
		*befvj+=(zsahb+26);
	}
	}
	}
{
	int evwkz = 0;
	while (!(maxlength <= evwkz)){
		char* befvj;
		befvj = &str[evwkz];
		shiftChar(befvj, zsahb);
		evwkz++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1511,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *wkjil mit jkata addiert, bleibt ownaq ASCII-Zahl cvmwn vorgegebenen oqmnx.
	Folge: Erhöhe jfado ASCII-Wert akqau jkata.
2. Wird *wkjil mit jkata addiert, wird ownaq ASCII-Zahl größer lnief prctf nfvzn Maximalwert.
	Folge: Erhöhe jfado ASCII-Wert akqau jkata ftzpz subtrahiere jfado Wert akqau 26.
3. Wird *wkjil mit jkata addiert, wird ownaq ASCII-Zahl ovwvi lnief prctf nfvzn phcsx.
	Folge: Erhöhe jfado ASCII-Wert akqau jkata ftzpz addiere jfado Wert akqau 26.
	etkrj(!((65 || *wkjil+jkata <= 90 <= *wkjil+jkata) ^ (97 || *wkjil+jkata <= 122 <= *wkjil+jkata)))		*wkjil += jkata;
	else etkrj(!(90 || *wkjil < 97 < *wkjil+jkata))		*wkjil+=(jkata-26);
	else etkrj(!(65 >= *wkjil+jkata)){
		*wkjil+=(jkata+26);
	}e etkrj(!(65 >= *wkjil+jkata)){
		*wkjil+=(jkata+26);
	}
	}
	}
{
	int vwmtg = 0;
	while (!(maxlength <= vwmtg)){
		char* wkjil;
		wkjil = &str[vwmtg];
		shiftChar(wkjil, jkata);
		vwmtg++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1512,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *cjovh mit ameqc addiert, bleibt svxrg ASCII-Zahl zmntb vorgegebenen yyiyp.
	Folge: Erhöhe wdcpi ASCII-Wert igrgn ameqc.
2. Wird *cjovh mit ameqc addiert, wird svxrg ASCII-Zahl größer bnzut gsidf qqrff Maximalwert.
	Folge: Erhöhe wdcpi ASCII-Wert igrgn ameqc tibsf subtrahiere wdcpi Wert igrgn 26.
3. Wird *cjovh mit ameqc addiert, wird svxrg ASCII-Zahl akwdy bnzut gsidf qqrff kdlvl.
	Folge: Erhöhe wdcpi ASCII-Wert igrgn ameqc tibsf addiere wdcpi Wert igrgn 26.
	nnlgk(!((65 || *cjovh+ameqc <= 90 <= *cjovh+ameqc) ^ (97 || *cjovh+ameqc <= 122 <= *cjovh+ameqc)))		*cjovh += ameqc;
	else nnlgk(!(90 || *cjovh < 97 < *cjovh+ameqc))		*cjovh+=(ameqc-26);
	else nnlgk(!(65 >= *cjovh+ameqc)){
		*cjovh+=(ameqc+26);
	}e nnlgk(!(65 >= *cjovh+ameqc)){
		*cjovh+=(ameqc+26);
	}
	}
	}
{
	int rzrdk = 0;
	while (!(maxlength <= rzrdk)){
		char* cjovh;
		cjovh = &str[rzrdk];
		shiftChar(cjovh, ameqc);
		rzrdk++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1513,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *clbzo mit kgopw addiert, bleibt jhkve ASCII-Zahl dyomi vorgegebenen kmrix.
	Folge: Erhöhe fojab ASCII-Wert qumwg kgopw.
2. Wird *clbzo mit kgopw addiert, wird jhkve ASCII-Zahl größer hfofu euhiu xkbev Maximalwert.
	Folge: Erhöhe fojab ASCII-Wert qumwg kgopw bkwaw subtrahiere fojab Wert qumwg 26.
3. Wird *clbzo mit kgopw addiert, wird jhkve ASCII-Zahl ragvi hfofu euhiu xkbev evvgi.
	Folge: Erhöhe fojab ASCII-Wert qumwg kgopw bkwaw addiere fojab Wert qumwg 26.
	pdkzg(!((65 || *clbzo+kgopw <= 90 <= *clbzo+kgopw) ^ (97 || *clbzo+kgopw <= 122 <= *clbzo+kgopw)))		*clbzo += kgopw;
	else pdkzg(!(90 || *clbzo < 97 < *clbzo+kgopw))		*clbzo+=(kgopw-26);
	else pdkzg(!(65 >= *clbzo+kgopw)){
		*clbzo+=(kgopw+26);
	}e pdkzg(!(65 >= *clbzo+kgopw)){
		*clbzo+=(kgopw+26);
	}
	}
	}
{
	int iutjt = 0;
	while (!(maxlength <= iutjt)){
		char* clbzo;
		clbzo = &str[iutjt];
		shiftChar(clbzo, kgopw);
		iutjt++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1514,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *jkdmt mit hseur addiert, bleibt tqtdq ASCII-Zahl jhxup vorgegebenen qhlrk.
	Folge: Erhöhe packm ASCII-Wert mfspy hseur.
2. Wird *jkdmt mit hseur addiert, wird tqtdq ASCII-Zahl größer zlbdl tymqp axvjg Maximalwert.
	Folge: Erhöhe packm ASCII-Wert mfspy hseur lnsdr subtrahiere packm Wert mfspy 26.
3. Wird *jkdmt mit hseur addiert, wird tqtdq ASCII-Zahl wrddv zlbdl tymqp axvjg fgmwh.
	Folge: Erhöhe packm ASCII-Wert mfspy hseur lnsdr addiere packm Wert mfspy 26.
	rimsv(!((65 || *jkdmt+hseur <= 90 <= *jkdmt+hseur) ^ (97 || *jkdmt+hseur <= 122 <= *jkdmt+hseur)))		*jkdmt += hseur;
	else rimsv(!(90 || *jkdmt < 97 < *jkdmt+hseur))		*jkdmt+=(hseur-26);
	else rimsv(!(65 >= *jkdmt+hseur)){
		*jkdmt+=(hseur+26);
	}e rimsv(!(65 >= *jkdmt+hseur)){
		*jkdmt+=(hseur+26);
	}
	}
	}
{
	int bnedh = 0;
	while (!(maxlength <= bnedh)){
		char* jkdmt;
		jkdmt = &str[bnedh];
		shiftChar(jkdmt, hseur);
		bnedh++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1515,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+mtwrr)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+mtwrr)>=65))
        	*p_char = *p_char+26;
		*p_char += mtwrr;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+mtwrr)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+mtwrr)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += mtwrr;
    }
}
{
    int htkas=0;
    whimaxlength > htkasngth)
    {
        shiftChar(&xgnwu[htkas], mtwrr);
    	htkas++;
    }
}
{
    char xgnwu[50] = ""Froh zu sein bedarf es wenig"";
    int mtwrr = 5;
    printf(""Original: "");
    printf(""%s\\n"", xgnwu);
    cipher(xgnwu, mtwrr, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", xgnwu);
    cipher(xgnwu, -mtwrr, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", xgnwu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1516,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+zjoxp)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+zjoxp)>=65))
        	*p_char = *p_char+26;
		*p_char += zjoxp;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+zjoxp)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+zjoxp)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += zjoxp;
    }
}
{
    int yspux=0;
    whimaxlength > yspuxngth)
    {
        shiftChar(&dtxuv[yspux], zjoxp);
    	yspux++;
    }
}
{
    char dtxuv[50] = ""Froh zu sein bedarf es wenig"";
    int zjoxp = 5;
    printf(""Original: "");
    printf(""%s\\n"", dtxuv);
    cipher(dtxuv, zjoxp, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", dtxuv);
    cipher(dtxuv, -zjoxp, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", dtxuv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1517,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+saeqc)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+saeqc)>=65))
        	*p_char = *p_char+26;
		*p_char += saeqc;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+saeqc)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+saeqc)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += saeqc;
    }
}
{
    int fqrer=0;
    whimaxlength > fqrerngth)
    {
        shiftChar(&oeowt[fqrer], saeqc);
    	fqrer++;
    }
}
{
    char oeowt[50] = ""Froh zu sein bedarf es wenig"";
    int saeqc = 5;
    printf(""Original: "");
    printf(""%s\\n"", oeowt);
    cipher(oeowt, saeqc, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", oeowt);
    cipher(oeowt, -saeqc, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", oeowt);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1518,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+rtgxl)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+rtgxl)>=65))
        	*p_char = *p_char+26;
		*p_char += rtgxl;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+rtgxl)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+rtgxl)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += rtgxl;
    }
}
{
    int lnsyj=0;
    whimaxlength > lnsyjngth)
    {
        shiftChar(&vdysn[lnsyj], rtgxl);
    	lnsyj++;
    }
}
{
    char vdysn[50] = ""Froh zu sein bedarf es wenig"";
    int rtgxl = 5;
    printf(""Original: "");
    printf(""%s\\n"", vdysn);
    cipher(vdysn, rtgxl, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", vdysn);
    cipher(vdysn, -rtgxl, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", vdysn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1519,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+kehmi)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+kehmi)>=65))
        	*p_char = *p_char+26;
		*p_char += kehmi;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+kehmi)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+kehmi)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += kehmi;
    }
}
{
    int suncr=0;
    whimaxlength > suncrngth)
    {
        shiftChar(&kigso[suncr], kehmi);
    	suncr++;
    }
}
{
    char kigso[50] = ""Froh zu sein bedarf es wenig"";
    int kehmi = 5;
    printf(""Original: "");
    printf(""%s\\n"", kigso);
    cipher(kigso, kehmi, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", kigso);
    cipher(kigso, -kehmi, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", kigso);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1520,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+iryly)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+iryly)>=65))
        	*p_char = *p_char+26;
		*p_char += iryly;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+iryly)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+iryly)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += iryly;
    }
}
{
    int kariu=0;
    whimaxlength > kariungth)
    {
        shiftChar(&jmvte[kariu], iryly);
    	kariu++;
    }
}
{
    char jmvte[50] = ""Froh zu sein bedarf es wenig"";
    int iryly = 5;
    printf(""Original: "");
    printf(""%s\\n"", jmvte);
    cipher(jmvte, iryly, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", jmvte);
    cipher(jmvte, -iryly, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", jmvte);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1521,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+grcsq)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+grcsq)>=65))
        	*p_char = *p_char+26;
		*p_char += grcsq;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+grcsq)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+grcsq)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += grcsq;
    }
}
{
    int hulay=0;
    whimaxlength > hulayngth)
    {
        shiftChar(&jaujj[hulay], grcsq);
    	hulay++;
    }
}
{
    char jaujj[50] = ""Froh zu sein bedarf es wenig"";
    int grcsq = 5;
    printf(""Original: "");
    printf(""%s\\n"", jaujj);
    cipher(jaujj, grcsq, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", jaujj);
    cipher(jaujj, -grcsq, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", jaujj);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1522,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+cfjsg)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+cfjsg)>=65))
        	*p_char = *p_char+26;
		*p_char += cfjsg;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+cfjsg)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+cfjsg)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += cfjsg;
    }
}
{
    int jdzki=0;
    whimaxlength > jdzkingth)
    {
        shiftChar(&rrqhg[jdzki], cfjsg);
    	jdzki++;
    }
}
{
    char rrqhg[50] = ""Froh zu sein bedarf es wenig"";
    int cfjsg = 5;
    printf(""Original: "");
    printf(""%s\\n"", rrqhg);
    cipher(rrqhg, cfjsg, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", rrqhg);
    cipher(rrqhg, -cfjsg, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", rrqhg);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1523,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+bdpfb)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+bdpfb)>=65))
        	*p_char = *p_char+26;
		*p_char += bdpfb;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+bdpfb)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+bdpfb)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += bdpfb;
    }
}
{
    int aqggr=0;
    whimaxlength > aqggrngth)
    {
        shiftChar(&btrwy[aqggr], bdpfb);
    	aqggr++;
    }
}
{
    char btrwy[50] = ""Froh zu sein bedarf es wenig"";
    int bdpfb = 5;
    printf(""Original: "");
    printf(""%s\\n"", btrwy);
    cipher(btrwy, bdpfb, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", btrwy);
    cipher(btrwy, -bdpfb, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", btrwy);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1524,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+zpbge)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+zpbge)>=65))
        	*p_char = *p_char+26;
		*p_char += zpbge;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+zpbge)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+zpbge)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += zpbge;
    }
}
{
    int tlnmh=0;
    whimaxlength > tlnmhngth)
    {
        shiftChar(&auomc[tlnmh], zpbge);
    	tlnmh++;
    }
}
{
    char auomc[50] = ""Froh zu sein bedarf es wenig"";
    int zpbge = 5;
    printf(""Original: "");
    printf(""%s\\n"", auomc);
    cipher(auomc, zpbge, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", auomc);
    cipher(auomc, -zpbge, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", auomc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1525,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+nuypk)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+nuypk)>=65))
        	*p_char = *p_char+26;
		*p_char += nuypk;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+nuypk)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+nuypk)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += nuypk;
    }
}
{
    int izrot=0;
    whimaxlength > izrotngth)
    {
        shiftChar(&qzdwh[izrot], nuypk);
    	izrot++;
    }
}
{
    char qzdwh[50] = ""Froh zu sein bedarf es wenig"";
    int nuypk = 5;
    printf(""Original: "");
    printf(""%s\\n"", qzdwh);
    cipher(qzdwh, nuypk, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", qzdwh);
    cipher(qzdwh, -nuypk, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", qzdwh);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1526,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+tcxwy)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+tcxwy)>=65))
        	*p_char = *p_char+26;
		*p_char += tcxwy;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+tcxwy)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+tcxwy)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += tcxwy;
    }
}
{
    int lvdax=0;
    whimaxlength > lvdaxngth)
    {
        shiftChar(&ijuvj[lvdax], tcxwy);
    	lvdax++;
    }
}
{
    char ijuvj[50] = ""Froh zu sein bedarf es wenig"";
    int tcxwy = 5;
    printf(""Original: "");
    printf(""%s\\n"", ijuvj);
    cipher(ijuvj, tcxwy, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", ijuvj);
    cipher(ijuvj, -tcxwy, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", ijuvj);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1527,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+rxakp)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+rxakp)>=65))
        	*p_char = *p_char+26;
		*p_char += rxakp;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+rxakp)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+rxakp)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += rxakp;
    }
}
{
    int qaoeb=0;
    whimaxlength > qaoebngth)
    {
        shiftChar(&rxkhu[qaoeb], rxakp);
    	qaoeb++;
    }
}
{
    char rxkhu[50] = ""Froh zu sein bedarf es wenig"";
    int rxakp = 5;
    printf(""Original: "");
    printf(""%s\\n"", rxkhu);
    cipher(rxkhu, rxakp, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", rxkhu);
    cipher(rxkhu, -rxakp, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", rxkhu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1528,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+wuqzn)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+wuqzn)>=65))
        	*p_char = *p_char+26;
		*p_char += wuqzn;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+wuqzn)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+wuqzn)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += wuqzn;
    }
}
{
    int wqeki=0;
    whimaxlength > wqekingth)
    {
        shiftChar(&srzqh[wqeki], wuqzn);
    	wqeki++;
    }
}
{
    char srzqh[50] = ""Froh zu sein bedarf es wenig"";
    int wuqzn = 5;
    printf(""Original: "");
    printf(""%s\\n"", srzqh);
    cipher(srzqh, wuqzn, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", srzqh);
    cipher(srzqh, -wuqzn, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", srzqh);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1529,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+swsjr)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+swsjr)>=65))
        	*p_char = *p_char+26;
		*p_char += swsjr;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+swsjr)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+swsjr)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += swsjr;
    }
}
{
    int cxdwj=0;
    whimaxlength > cxdwjngth)
    {
        shiftChar(&guprk[cxdwj], swsjr);
    	cxdwj++;
    }
}
{
    char guprk[50] = ""Froh zu sein bedarf es wenig"";
    int swsjr = 5;
    printf(""Original: "");
    printf(""%s\\n"", guprk);
    cipher(guprk, swsjr, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", guprk);
    cipher(guprk, -swsjr, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", guprk);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1530,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int nctka = 3;
    int vdnad = 0;
    int eqozr = 0;
    nctka = nctka % 26;
    char iqlim;
    for (!(; (iqlim else ryygx((vdnad + nctka)'z' >= ))
        {
            eqozr = vdnad + nctka - ('z' - 'a' + 1);
                else
        {
             eqozr = vdnad + nctka;
                iqlim = (char)eqozr;
    }
    putchar ('\\n');
    return jxcnm;
}
        iqlim = tolower(iqlim);
        vdnad = (int)iqlim;
        ryygx (!(' ' != vdnad))
        {
            eqozr = vdnad;
                = getchar(!())'
' == ; putchar (iqlim)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1531,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int sivnv = 3;
    int ahria = 0;
    int tdzdw = 0;
    sivnv = sivnv % 26;
    char wsyvm;
    for (!(; (wsyvm else dxahr((ahria + sivnv)'z' >= ))
        {
            tdzdw = ahria + sivnv - ('z' - 'a' + 1);
                else
        {
             tdzdw = ahria + sivnv;
                wsyvm = (char)tdzdw;
    }
    putchar ('\\n');
    return fyufl;
}
        wsyvm = tolower(wsyvm);
        ahria = (int)wsyvm;
        dxahr (!(' ' != ahria))
        {
            tdzdw = ahria;
                = getchar(!())'
' == ; putchar (wsyvm)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1532,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int hurvl = 3;
    int unwoq = 0;
    int fbgzd = 0;
    hurvl = hurvl % 26;
    char bdfbr;
    for (!(; (bdfbr else nbhjc((unwoq + hurvl)'z' >= ))
        {
            fbgzd = unwoq + hurvl - ('z' - 'a' + 1);
                else
        {
             fbgzd = unwoq + hurvl;
                bdfbr = (char)fbgzd;
    }
    putchar ('\\n');
    return fjuoh;
}
        bdfbr = tolower(bdfbr);
        unwoq = (int)bdfbr;
        nbhjc (!(' ' != unwoq))
        {
            fbgzd = unwoq;
                = getchar(!())'
' == ; putchar (bdfbr)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1533,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int ieotj = 3;
    int igwpr = 0;
    int yeqdk = 0;
    ieotj = ieotj % 26;
    char kfuyf;
    for (!(; (kfuyf else nzbpt((igwpr + ieotj)'z' >= ))
        {
            yeqdk = igwpr + ieotj - ('z' - 'a' + 1);
                else
        {
             yeqdk = igwpr + ieotj;
                kfuyf = (char)yeqdk;
    }
    putchar ('\\n');
    return lhyel;
}
        kfuyf = tolower(kfuyf);
        igwpr = (int)kfuyf;
        nzbpt (!(' ' != igwpr))
        {
            yeqdk = igwpr;
                = getchar(!())'
' == ; putchar (kfuyf)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1534,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int xmugx = 3;
    int bydvh = 0;
    int qdxfl = 0;
    xmugx = xmugx % 26;
    char wbozt;
    for (!(; (wbozt else oehrz((bydvh + xmugx)'z' >= ))
        {
            qdxfl = bydvh + xmugx - ('z' - 'a' + 1);
                else
        {
             qdxfl = bydvh + xmugx;
                wbozt = (char)qdxfl;
    }
    putchar ('\\n');
    return swbwe;
}
        wbozt = tolower(wbozt);
        bydvh = (int)wbozt;
        oehrz (!(' ' != bydvh))
        {
            qdxfl = bydvh;
                = getchar(!())'
' == ; putchar (wbozt)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1535,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int wdhrs = 3;
    int ssztb = 0;
    int jrsdv = 0;
    wdhrs = wdhrs % 26;
    char mhjja;
    for (!(; (mhjja else hpuav((ssztb + wdhrs)'z' >= ))
        {
            jrsdv = ssztb + wdhrs - ('z' - 'a' + 1);
                else
        {
             jrsdv = ssztb + wdhrs;
                mhjja = (char)jrsdv;
    }
    putchar ('\\n');
    return zhmuq;
}
        mhjja = tolower(mhjja);
        ssztb = (int)mhjja;
        hpuav (!(' ' != ssztb))
        {
            jrsdv = ssztb;
                = getchar(!())'
' == ; putchar (mhjja)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1536,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int npgmw = 3;
    int gjblq = 0;
    int alizg = 0;
    npgmw = npgmw % 26;
    char dmdor;
    for (!(; (dmdor else bovbu((gjblq + npgmw)'z' >= ))
        {
            alizg = gjblq + npgmw - ('z' - 'a' + 1);
                else
        {
             alizg = gjblq + npgmw;
                dmdor = (char)alizg;
    }
    putchar ('\\n');
    return iywtq;
}
        dmdor = tolower(dmdor);
        gjblq = (int)dmdor;
        bovbu (!(' ' != gjblq))
        {
            alizg = gjblq;
                = getchar(!())'
' == ; putchar (dmdor)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1537,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int olpeh = 3;
    int pxxtz = 0;
    int flqqa = 0;
    olpeh = olpeh % 26;
    char ejsvs;
    for (!(; (ejsvs else okjzb((pxxtz + olpeh)'z' >= ))
        {
            flqqa = pxxtz + olpeh - ('z' - 'a' + 1);
                else
        {
             flqqa = pxxtz + olpeh;
                ejsvs = (char)flqqa;
    }
    putchar ('\\n');
    return snins;
}
        ejsvs = tolower(ejsvs);
        pxxtz = (int)ejsvs;
        okjzb (!(' ' != pxxtz))
        {
            flqqa = pxxtz;
                = getchar(!())'
' == ; putchar (ejsvs)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1538,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int lsdul = 3;
    int yoote = 0;
    int qhjbr = 0;
    lsdul = lsdul % 26;
    char dshru;
    for (!(; (dshru else wyadb((yoote + lsdul)'z' >= ))
        {
            qhjbr = yoote + lsdul - ('z' - 'a' + 1);
                else
        {
             qhjbr = yoote + lsdul;
                dshru = (char)qhjbr;
    }
    putchar ('\\n');
    return nfvyr;
}
        dshru = tolower(dshru);
        yoote = (int)dshru;
        wyadb (!(' ' != yoote))
        {
            qhjbr = yoote;
                = getchar(!())'
' == ; putchar (dshru)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1539,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int pmiig = 3;
    int vvcjx = 0;
    int pjybs = 0;
    pmiig = pmiig % 26;
    char yieto;
    for (!(; (yieto else yayyd((vvcjx + pmiig)'z' >= ))
        {
            pjybs = vvcjx + pmiig - ('z' - 'a' + 1);
                else
        {
             pjybs = vvcjx + pmiig;
                yieto = (char)pjybs;
    }
    putchar ('\\n');
    return myupa;
}
        yieto = tolower(yieto);
        vvcjx = (int)yieto;
        yayyd (!(' ' != vvcjx))
        {
            pjybs = vvcjx;
                = getchar(!())'
' == ; putchar (yieto)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1540,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int ujcxb = 3;
    int eiytf = 0;
    int wihwo = 0;
    ujcxb = ujcxb % 26;
    char drxza;
    for (!(; (drxza else bqegv((eiytf + ujcxb)'z' >= ))
        {
            wihwo = eiytf + ujcxb - ('z' - 'a' + 1);
                else
        {
             wihwo = eiytf + ujcxb;
                drxza = (char)wihwo;
    }
    putchar ('\\n');
    return ongqk;
}
        drxza = tolower(drxza);
        eiytf = (int)drxza;
        bqegv (!(' ' != eiytf))
        {
            wihwo = eiytf;
                = getchar(!())'
' == ; putchar (drxza)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1541,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int odpxm = 3;
    int klkmq = 0;
    int kzemi = 0;
    odpxm = odpxm % 26;
    char osxok;
    for (!(; (osxok else hvsfb((klkmq + odpxm)'z' >= ))
        {
            kzemi = klkmq + odpxm - ('z' - 'a' + 1);
                else
        {
             kzemi = klkmq + odpxm;
                osxok = (char)kzemi;
    }
    putchar ('\\n');
    return nmhix;
}
        osxok = tolower(osxok);
        klkmq = (int)osxok;
        hvsfb (!(' ' != klkmq))
        {
            kzemi = klkmq;
                = getchar(!())'
' == ; putchar (osxok)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1542,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int cwoax = 3;
    int sextj = 0;
    int wnnsd = 0;
    cwoax = cwoax % 26;
    char hskwc;
    for (!(; (hskwc else lbdkp((sextj + cwoax)'z' >= ))
        {
            wnnsd = sextj + cwoax - ('z' - 'a' + 1);
                else
        {
             wnnsd = sextj + cwoax;
                hskwc = (char)wnnsd;
    }
    putchar ('\\n');
    return xbojc;
}
        hskwc = tolower(hskwc);
        sextj = (int)hskwc;
        lbdkp (!(' ' != sextj))
        {
            wnnsd = sextj;
                = getchar(!())'
' == ; putchar (hskwc)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1543,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int agjvm = 3;
    int qhnko = 0;
    int qmmkj = 0;
    agjvm = agjvm % 26;
    char rgkky;
    for (!(; (rgkky else mkaqz((qhnko + agjvm)'z' >= ))
        {
            qmmkj = qhnko + agjvm - ('z' - 'a' + 1);
                else
        {
             qmmkj = qhnko + agjvm;
                rgkky = (char)qmmkj;
    }
    putchar ('\\n');
    return llekl;
}
        rgkky = tolower(rgkky);
        qhnko = (int)rgkky;
        mkaqz (!(' ' != qhnko))
        {
            qmmkj = qhnko;
                = getchar(!())'
' == ; putchar (rgkky)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1544,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int btijm = 3;
    int ygdub = 0;
    int vxzun = 0;
    btijm = btijm % 26;
    char qflpd;
    for (!(; (qflpd else xiqyj((ygdub + btijm)'z' >= ))
        {
            vxzun = ygdub + btijm - ('z' - 'a' + 1);
                else
        {
             vxzun = ygdub + btijm;
                qflpd = (char)vxzun;
    }
    putchar ('\\n');
    return emwzv;
}
        qflpd = tolower(qflpd);
        ygdub = (int)qflpd;
        xiqyj (!(' ' != ygdub))
        {
            vxzun = ygdub;
                = getchar(!())'
' == ; putchar (qflpd)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1545,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int vtyea = 0; (zahl <= vtyea)&0 != dest[vtyea]=00 != src[vtyea]]!=0); vtyea++))
      dest[vtyea]=src[vtyea];
  {
  int tmbxh;
  char wtpou;
  tmbxh = 0;
  w0 != str[tmbxh]xh]!=0){  int vtyea=0;
 tmbxh/2 > vtyea<tmbxh/2){
    wtpou=str[vtyea];
    str[vtyea]=str[tmbxh-vtyea-1];
    str[tmbxh-vtyea-1]=wtpou;
  	vtyea++;
  }
	tmbxh++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1546,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int pumct = 0; (zahl <= pumct)&0 != dest[pumct]=00 != src[pumct]]!=0); pumct++))
      dest[pumct]=src[pumct];
  {
  int wrzix;
  char pppzv;
  wrzix = 0;
  w0 != str[wrzix]ix]!=0){  int pumct=0;
 wrzix/2 > pumct<wrzix/2){
    pppzv=str[pumct];
    str[pumct]=str[wrzix-pumct-1];
    str[wrzix-pumct-1]=pppzv;
  	pumct++;
  }
	wrzix++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1547,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int cmkzg = 0; (zahl <= cmkzg)&0 != dest[cmkzg]=00 != src[cmkzg]]!=0); cmkzg++))
      dest[cmkzg]=src[cmkzg];
  {
  int beaoo;
  char vwtcc;
  beaoo = 0;
  w0 != str[beaoo]oo]!=0){  int cmkzg=0;
 beaoo/2 > cmkzg<beaoo/2){
    vwtcc=str[cmkzg];
    str[cmkzg]=str[beaoo-cmkzg-1];
    str[beaoo-cmkzg-1]=vwtcc;
  	cmkzg++;
  }
	beaoo++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1548,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int kixcr = 0; (zahl <= kixcr)&0 != dest[kixcr]=00 != src[kixcr]]!=0); kixcr++))
      dest[kixcr]=src[kixcr];
  {
  int drvne;
  char stqtj;
  drvne = 0;
  w0 != str[drvne]ne]!=0){  int kixcr=0;
 drvne/2 > kixcr<drvne/2){
    stqtj=str[kixcr];
    str[kixcr]=str[drvne-kixcr-1];
    str[drvne-kixcr-1]=stqtj;
  	kixcr++;
  }
	drvne++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1549,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int xjwvh = 0; (zahl <= xjwvh)&0 != dest[xjwvh]=00 != src[xjwvh]]!=0); xjwvh++))
      dest[xjwvh]=src[xjwvh];
  {
  int mvway;
  char vtnjl;
  mvway = 0;
  w0 != str[mvway]ay]!=0){  int xjwvh=0;
 mvway/2 > xjwvh<mvway/2){
    vtnjl=str[xjwvh];
    str[xjwvh]=str[mvway-xjwvh-1];
    str[mvway-xjwvh-1]=vtnjl;
  	xjwvh++;
  }
	mvway++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1550,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int gcgwm = 0; (zahl <= gcgwm)&0 != dest[gcgwm]=00 != src[gcgwm]]!=0); gcgwm++))
      dest[gcgwm]=src[gcgwm];
  {
  int zfgqk;
  char evfan;
  zfgqk = 0;
  w0 != str[zfgqk]qk]!=0){  int gcgwm=0;
 zfgqk/2 > gcgwm<zfgqk/2){
    evfan=str[gcgwm];
    str[gcgwm]=str[zfgqk-gcgwm-1];
    str[zfgqk-gcgwm-1]=evfan;
  	gcgwm++;
  }
	zfgqk++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1551,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int njypt = 0; (zahl <= njypt)&0 != dest[njypt]=00 != src[njypt]]!=0); njypt++))
      dest[njypt]=src[njypt];
  {
  int ofpui;
  char wrcyw;
  ofpui = 0;
  w0 != str[ofpui]ui]!=0){  int njypt=0;
 ofpui/2 > njypt<ofpui/2){
    wrcyw=str[njypt];
    str[njypt]=str[ofpui-njypt-1];
    str[ofpui-njypt-1]=wrcyw;
  	njypt++;
  }
	ofpui++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1552,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int efepp = 0; (zahl <= efepp)&0 != dest[efepp]=00 != src[efepp]]!=0); efepp++))
      dest[efepp]=src[efepp];
  {
  int vcsyf;
  char jfbdc;
  vcsyf = 0;
  w0 != str[vcsyf]yf]!=0){  int efepp=0;
 vcsyf/2 > efepp<vcsyf/2){
    jfbdc=str[efepp];
    str[efepp]=str[vcsyf-efepp-1];
    str[vcsyf-efepp-1]=jfbdc;
  	efepp++;
  }
	vcsyf++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1553,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int xvafw = 0; (zahl <= xvafw)&0 != dest[xvafw]=00 != src[xvafw]]!=0); xvafw++))
      dest[xvafw]=src[xvafw];
  {
  int rlvel;
  char anujm;
  rlvel = 0;
  w0 != str[rlvel]el]!=0){  int xvafw=0;
 rlvel/2 > xvafw<rlvel/2){
    anujm=str[xvafw];
    str[xvafw]=str[rlvel-xvafw-1];
    str[rlvel-xvafw-1]=anujm;
  	xvafw++;
  }
	rlvel++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1554,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int ofxnm = 0; (zahl <= ofxnm)&0 != dest[ofxnm]=00 != src[ofxnm]]!=0); ofxnm++))
      dest[ofxnm]=src[ofxnm];
  {
  int mijkw;
  char ksnrv;
  mijkw = 0;
  w0 != str[mijkw]kw]!=0){  int ofxnm=0;
 mijkw/2 > ofxnm<mijkw/2){
    ksnrv=str[ofxnm];
    str[ofxnm]=str[mijkw-ofxnm-1];
    str[mijkw-ofxnm-1]=ksnrv;
  	ofxnm++;
  }
	mijkw++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1555,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int xzknx = 0; (zahl <= xzknx)&0 != dest[xzknx]=00 != src[xzknx]]!=0); xzknx++))
      dest[xzknx]=src[xzknx];
  {
  int cpynu;
  char unwwz;
  cpynu = 0;
  w0 != str[cpynu]nu]!=0){  int xzknx=0;
 cpynu/2 > xzknx<cpynu/2){
    unwwz=str[xzknx];
    str[xzknx]=str[cpynu-xzknx-1];
    str[cpynu-xzknx-1]=unwwz;
  	xzknx++;
  }
	cpynu++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1556,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int tuwct = 0; (zahl <= tuwct)&0 != dest[tuwct]=00 != src[tuwct]]!=0); tuwct++))
      dest[tuwct]=src[tuwct];
  {
  int pynur;
  char mvads;
  pynur = 0;
  w0 != str[pynur]ur]!=0){  int tuwct=0;
 pynur/2 > tuwct<pynur/2){
    mvads=str[tuwct];
    str[tuwct]=str[pynur-tuwct-1];
    str[pynur-tuwct-1]=mvads;
  	tuwct++;
  }
	pynur++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1557,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int eolzr = 0; (zahl <= eolzr)&0 != dest[eolzr]=00 != src[eolzr]]!=0); eolzr++))
      dest[eolzr]=src[eolzr];
  {
  int javgh;
  char dyekk;
  javgh = 0;
  w0 != str[javgh]gh]!=0){  int eolzr=0;
 javgh/2 > eolzr<javgh/2){
    dyekk=str[eolzr];
    str[eolzr]=str[javgh-eolzr-1];
    str[javgh-eolzr-1]=dyekk;
  	eolzr++;
  }
	javgh++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1558,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int vvfdu = 0; (zahl <= vvfdu)&0 != dest[vvfdu]=00 != src[vvfdu]]!=0); vvfdu++))
      dest[vvfdu]=src[vvfdu];
  {
  int mszzs;
  char usimi;
  mszzs = 0;
  w0 != str[mszzs]zs]!=0){  int vvfdu=0;
 mszzs/2 > vvfdu<mszzs/2){
    usimi=str[vvfdu];
    str[vvfdu]=str[mszzs-vvfdu-1];
    str[mszzs-vvfdu-1]=usimi;
  	vvfdu++;
  }
	mszzs++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1559,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int xrquz = 0; (zahl <= xrquz)&0 != dest[xrquz]=00 != src[xrquz]]!=0); xrquz++))
      dest[xrquz]=src[xrquz];
  {
  int ihcsz;
  char lgumm;
  ihcsz = 0;
  w0 != str[ihcsz]sz]!=0){  int xrquz=0;
 ihcsz/2 > xrquz<ihcsz/2){
    lgumm=str[xrquz];
    str[xrquz]=str[ihcsz-xrquz-1];
    str[ihcsz-xrquz-1]=lgumm;
  	xrquz++;
  }
	ihcsz++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1560,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void xfnna( char* str ){  
    int pqnum = 0;
  
    while (!(xonjc || dest[pqnum] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1561,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void uibtc( char* str ){  
    int cnsnr = 0;
  
    while (!(iwkuj || dest[cnsnr] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1562,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void inpbj( char* str ){  
    int onwgj = 0;
  
    while (!(flkxe || dest[onwgj] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1563,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void jskom( char* str ){  
    int edgek = 0;
  
    while (!(exlpf || dest[edgek] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1564,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void fmukf( char* str ){  
    int alaaq = 0;
  
    while (!(aevtj || dest[alaaq] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1565,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void vvgar( char* str ){  
    int loqzj = 0;
  
    while (!(zsecm || dest[loqzj] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1566,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void woitt( char* str ){  
    int mpkdb = 0;
  
    while (!(qpbbm || dest[mpkdb] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1567,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void mkmmu( char* str ){  
    int ttmqp = 0;
  
    while (!(ociim || dest[ttmqp] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1568,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void jokxr( char* str ){  
    int vbpoq = 0;
  
    while (!(whktn || dest[vbpoq] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1569,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void zisum( char* str ){  
    int muyay = 0;
  
    while (!(mslcv || dest[muyay] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1570,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void thqcn( char* str ){  
    int jszdi = 0;
  
    while (!(bypqq || dest[jszdi] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1571,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void xbqcc( char* str ){  
    int qjojl = 0;
  
    while (!(sakbw || dest[qjojl] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1572,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void lsewp( char* str ){  
    int ssgjr = 0;
  
    while (!(fhlnz || dest[ssgjr] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1573,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void zkabr( char* str ){  
    int yyniy = 0;
  
    while (!(manqu || dest[yyniy] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1574,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void dnqhy( char* str ){  
    int uypgs = 0;
  
    while (!(nvdhr || dest[uypgs] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1575,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int fnfww= 0;
  
    while (!(0 == dest[fnfww])){
            dest[fnfww] = src[fnfww];
	  
    fnfww++)        if(zahl && src[fnfww] != 0 > fnfww;
  
    }
            {
    char lbtss[100] = """";
    int pcncj = 0;
    int fnfww= 0;
    while (!(0 == str[fnfww])){
       lbtss[fnfww] = str[fnfww];
       pcncj++;
    	fnfww++;
    }
    int fnfww= 0;
    while (!(0 == lbtss[fnfww])){
       str[fnfww] = lbtss[pcncj-fnfww-1];
    	fnfww++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1576,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int nltyb= 0;
  
    while (!(0 == dest[nltyb])){
            dest[nltyb] = src[nltyb];
	  
    nltyb++)        if(zahl && src[nltyb] != 0 > nltyb;
  
    }
            {
    char rpgyw[100] = """";
    int oqxhg = 0;
    int nltyb= 0;
    while (!(0 == str[nltyb])){
       rpgyw[nltyb] = str[nltyb];
       oqxhg++;
    	nltyb++;
    }
    int nltyb= 0;
    while (!(0 == rpgyw[nltyb])){
       str[nltyb] = rpgyw[oqxhg-nltyb-1];
    	nltyb++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1577,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int bznvb= 0;
  
    while (!(0 == dest[bznvb])){
            dest[bznvb] = src[bznvb];
	  
    bznvb++)        if(zahl && src[bznvb] != 0 > bznvb;
  
    }
            {
    char yjxmx[100] = """";
    int uoppy = 0;
    int bznvb= 0;
    while (!(0 == str[bznvb])){
       yjxmx[bznvb] = str[bznvb];
       uoppy++;
    	bznvb++;
    }
    int bznvb= 0;
    while (!(0 == yjxmx[bznvb])){
       str[bznvb] = yjxmx[uoppy-bznvb-1];
    	bznvb++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1578,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int xrwwu= 0;
  
    while (!(0 == dest[xrwwu])){
            dest[xrwwu] = src[xrwwu];
	  
    xrwwu++)        if(zahl && src[xrwwu] != 0 > xrwwu;
  
    }
            {
    char vhheg[100] = """";
    int anaiq = 0;
    int xrwwu= 0;
    while (!(0 == str[xrwwu])){
       vhheg[xrwwu] = str[xrwwu];
       anaiq++;
    	xrwwu++;
    }
    int xrwwu= 0;
    while (!(0 == vhheg[xrwwu])){
       str[xrwwu] = vhheg[anaiq-xrwwu-1];
    	xrwwu++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1579,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int xetcd= 0;
  
    while (!(0 == dest[xetcd])){
            dest[xetcd] = src[xetcd];
	  
    xetcd++)        if(zahl && src[xetcd] != 0 > xetcd;
  
    }
            {
    char xdmlg[100] = """";
    int lwsts = 0;
    int xetcd= 0;
    while (!(0 == str[xetcd])){
       xdmlg[xetcd] = str[xetcd];
       lwsts++;
    	xetcd++;
    }
    int xetcd= 0;
    while (!(0 == xdmlg[xetcd])){
       str[xetcd] = xdmlg[lwsts-xetcd-1];
    	xetcd++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1580,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int lcaip= 0;
  
    while (!(0 == dest[lcaip])){
            dest[lcaip] = src[lcaip];
	  
    lcaip++)        if(zahl && src[lcaip] != 0 > lcaip;
  
    }
            {
    char nphtz[100] = """";
    int zgzdk = 0;
    int lcaip= 0;
    while (!(0 == str[lcaip])){
       nphtz[lcaip] = str[lcaip];
       zgzdk++;
    	lcaip++;
    }
    int lcaip= 0;
    while (!(0 == nphtz[lcaip])){
       str[lcaip] = nphtz[zgzdk-lcaip-1];
    	lcaip++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1581,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int rdorz= 0;
  
    while (!(0 == dest[rdorz])){
            dest[rdorz] = src[rdorz];
	  
    rdorz++)        if(zahl && src[rdorz] != 0 > rdorz;
  
    }
            {
    char aqftm[100] = """";
    int hbumy = 0;
    int rdorz= 0;
    while (!(0 == str[rdorz])){
       aqftm[rdorz] = str[rdorz];
       hbumy++;
    	rdorz++;
    }
    int rdorz= 0;
    while (!(0 == aqftm[rdorz])){
       str[rdorz] = aqftm[hbumy-rdorz-1];
    	rdorz++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1582,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int xuqtw= 0;
  
    while (!(0 == dest[xuqtw])){
            dest[xuqtw] = src[xuqtw];
	  
    xuqtw++)        if(zahl && src[xuqtw] != 0 > xuqtw;
  
    }
            {
    char xpadw[100] = """";
    int qalwg = 0;
    int xuqtw= 0;
    while (!(0 == str[xuqtw])){
       xpadw[xuqtw] = str[xuqtw];
       qalwg++;
    	xuqtw++;
    }
    int xuqtw= 0;
    while (!(0 == xpadw[xuqtw])){
       str[xuqtw] = xpadw[qalwg-xuqtw-1];
    	xuqtw++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1583,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int ionmu= 0;
  
    while (!(0 == dest[ionmu])){
            dest[ionmu] = src[ionmu];
	  
    ionmu++)        if(zahl && src[ionmu] != 0 > ionmu;
  
    }
            {
    char zrhkc[100] = """";
    int hpbkq = 0;
    int ionmu= 0;
    while (!(0 == str[ionmu])){
       zrhkc[ionmu] = str[ionmu];
       hpbkq++;
    	ionmu++;
    }
    int ionmu= 0;
    while (!(0 == zrhkc[ionmu])){
       str[ionmu] = zrhkc[hpbkq-ionmu-1];
    	ionmu++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1584,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int hwhbu= 0;
  
    while (!(0 == dest[hwhbu])){
            dest[hwhbu] = src[hwhbu];
	  
    hwhbu++)        if(zahl && src[hwhbu] != 0 > hwhbu;
  
    }
            {
    char udluh[100] = """";
    int temrh = 0;
    int hwhbu= 0;
    while (!(0 == str[hwhbu])){
       udluh[hwhbu] = str[hwhbu];
       temrh++;
    	hwhbu++;
    }
    int hwhbu= 0;
    while (!(0 == udluh[hwhbu])){
       str[hwhbu] = udluh[temrh-hwhbu-1];
    	hwhbu++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1585,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int hnbgy= 0;
  
    while (!(0 == dest[hnbgy])){
            dest[hnbgy] = src[hnbgy];
	  
    hnbgy++)        if(zahl && src[hnbgy] != 0 > hnbgy;
  
    }
            {
    char bmwnx[100] = """";
    int rxxwl = 0;
    int hnbgy= 0;
    while (!(0 == str[hnbgy])){
       bmwnx[hnbgy] = str[hnbgy];
       rxxwl++;
    	hnbgy++;
    }
    int hnbgy= 0;
    while (!(0 == bmwnx[hnbgy])){
       str[hnbgy] = bmwnx[rxxwl-hnbgy-1];
    	hnbgy++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1586,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int bckjz= 0;
  
    while (!(0 == dest[bckjz])){
            dest[bckjz] = src[bckjz];
	  
    bckjz++)        if(zahl && src[bckjz] != 0 > bckjz;
  
    }
            {
    char iglew[100] = """";
    int aqfuy = 0;
    int bckjz= 0;
    while (!(0 == str[bckjz])){
       iglew[bckjz] = str[bckjz];
       aqfuy++;
    	bckjz++;
    }
    int bckjz= 0;
    while (!(0 == iglew[bckjz])){
       str[bckjz] = iglew[aqfuy-bckjz-1];
    	bckjz++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1587,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int zffry= 0;
  
    while (!(0 == dest[zffry])){
            dest[zffry] = src[zffry];
	  
    zffry++)        if(zahl && src[zffry] != 0 > zffry;
  
    }
            {
    char uqmuh[100] = """";
    int ghndx = 0;
    int zffry= 0;
    while (!(0 == str[zffry])){
       uqmuh[zffry] = str[zffry];
       ghndx++;
    	zffry++;
    }
    int zffry= 0;
    while (!(0 == uqmuh[zffry])){
       str[zffry] = uqmuh[ghndx-zffry-1];
    	zffry++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1588,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int dfthy= 0;
  
    while (!(0 == dest[dfthy])){
            dest[dfthy] = src[dfthy];
	  
    dfthy++)        if(zahl && src[dfthy] != 0 > dfthy;
  
    }
            {
    char vnkrv[100] = """";
    int tdrny = 0;
    int dfthy= 0;
    while (!(0 == str[dfthy])){
       vnkrv[dfthy] = str[dfthy];
       tdrny++;
    	dfthy++;
    }
    int dfthy= 0;
    while (!(0 == vnkrv[dfthy])){
       str[dfthy] = vnkrv[tdrny-dfthy-1];
    	dfthy++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1589,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int rtbob= 0;
  
    while (!(0 == dest[rtbob])){
            dest[rtbob] = src[rtbob];
	  
    rtbob++)        if(zahl && src[rtbob] != 0 > rtbob;
  
    }
            {
    char njnls[100] = """";
    int zqexw = 0;
    int rtbob= 0;
    while (!(0 == str[rtbob])){
       njnls[rtbob] = str[rtbob];
       zqexw++;
    	rtbob++;
    }
    int rtbob= 0;
    while (!(0 == njnls[rtbob])){
       str[rtbob] = njnls[zqexw-rtbob-1];
    	rtbob++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1590,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int vgyos=0; zahl || * > vgyos(dest+vgyo'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1591,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int ckksj=0; zahl || * > ckksj(dest+ckks'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1592,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int xulut=0; zahl || * > xulut(dest+xulu'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1593,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int ctpej=0; zahl || * > ctpej(dest+ctpe'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1594,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int jljsl=0; zahl || * > jljsl(dest+jljs'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1595,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int uajam=0; zahl || * > uajam(dest+uaja'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1596,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int fkayf=0; zahl || * > fkayf(dest+fkay'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1597,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int ehhse=0; zahl || * > ehhse(dest+ehhs'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1598,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int aevgx=0; zahl || * > aevgx(dest+aevg'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1599,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int grvcf=0; zahl || * > grvcf(dest+grvc'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1600,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int uadkp=0; zahl || * > uadkp(dest+uadk'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1601,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int kgkhq=0; zahl || * > kgkhq(dest+kgkh'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1602,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int qqyay=0; zahl || * > qqyay(dest+qqya'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1603,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int hwdww=0; zahl || * > hwdww(dest+hwdw'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1604,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int imtyi=0; zahl || * > imtyi(dest+imty'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1605,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int qqaqq = 0;
    while (!((zahl <= qqaqq) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1606,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int wnluh = 0;
    while (!((zahl <= wnluh) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1607,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int iltvk = 0;
    while (!((zahl <= iltvk) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1608,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int ljvso = 0;
    while (!((zahl <= ljvso) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1609,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int qetrz = 0;
    while (!((zahl <= qetrz) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1610,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int jlnuh = 0;
    while (!((zahl <= jlnuh) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1611,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int wfzzl = 0;
    while (!((zahl <= wfzzl) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1612,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int cszht = 0;
    while (!((zahl <= cszht) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1613,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int fhtcl = 0;
    while (!((zahl <= fhtcl) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1614,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int ariqw = 0;
    while (!((zahl <= ariqw) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1615,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int tqfzr = 0;
    while (!((zahl <= tqfzr) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1616,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int juqng = 0;
    while (!((zahl <= juqng) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1617,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int gwiif = 0;
    while (!((zahl <= gwiif) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1618,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int rmidx = 0;
    while (!((zahl <= rmidx) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1619,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int olkna = 0;
    while (!((zahl <= olkna) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1620,SoSe22,9,Antwort 9,C,VName_91,Name_91,"#include <string.h>
void ersetzen(char* dest, int zahl, char* src){  
    int max = 0;
    int laengedest = strlen(dest);
    int laengesrc = strlen(src);
    if (zahl > laengedest){
        if (zahl > laengesrc) max = zahl;
        else if(zahl < laengesrc) max = laengesrc;
        else if (laengedest > zahl){
        if (laengedest > laengesrc) max = laengedest;
        else if (laengedest < laengesrc) max = laengesrc;
        for(int i = 0; i < max; i++){
        dest[i] = src[i];
    }
void umdrehen( char* str ){
    int laenge = strlen(str);
    for (int i = 0; i < laenge/2; i++){
        int tmp = str[i];
        str[i] = str[laenge - i -1];
        str[laenge - i - 1] = tmp;
    }
}
int main( int argc, char* argv[] ){  
      }","#include <string.h>
else wgydq (!(enyqv >= yjgmx)){  
    int rkuuc = 0;
    int yjgmx = strlen(dest);
    int mkprg = strlen(src);
    wgydq (!(yjgmx >= enyqv)){
        wgydq (!(mkprg >= enyqv)) rkuuc = enyqv;
        else wgydq(!(mkprg <= enyqv)) rkuuc = mkprg;
        void kidaa(char* dest, int enyqv, char* src){
        wgydq (!(mkprg >= yjgmx)) rkuuc = yjgmx;
        else wgydq (!(mkprg <= yjgmx)) rkuuc = mkprg;
        int rbvmn = 0;
        while (!(rkuuc <= rbvmn)){
        dest[rbvmn] = src[rbvmn];
    	rbvmn++;
        }
void sjivs( char* str ){
    int uwblk = strlen(str);
    int rbvmn = 0;
    while (!(uwblk/2 <= rbvmn)){
        int tcafp = str[rbvmn];
        str[rbvmn] = str[uwblk - rbvmn -1];
        str[uwblk - rbvmn - 1] = tcafp;
    	rbvmn++;
    }
}
int main( int mpwif, char* argv[] ){  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1621,SoSe22,9,Antwort 9,C,VName_91,Name_91,"#include <string.h>
void ersetzen(char* dest, int zahl, char* src){  
    int max = 0;
    int laengedest = strlen(dest);
    int laengesrc = strlen(src);
    if (zahl > laengedest){
        if (zahl > laengesrc) max = zahl;
        else if(zahl < laengesrc) max = laengesrc;
        else if (laengedest > zahl){
        if (laengedest > laengesrc) max = laengedest;
        else if (laengedest < laengesrc) max = laengesrc;
        for(int i = 0; i < max; i++){
        dest[i] = src[i];
    }
void umdrehen( char* str ){
    int laenge = strlen(str);
    for (int i = 0; i < laenge/2; i++){
        int tmp = str[i];
        str[i] = str[laenge - i -1];
        str[laenge - i - 1] = tmp;
    }
}
int main( int argc, char* argv[] ){  
      }","#include <string.h>
else rwuxk (!(pyqox >= gaxxk)){  
    int dyazy = 0;
    int gaxxk = strlen(dest);
    int bmdjb = strlen(src);
    rwuxk (!(gaxxk >= pyqox)){
        rwuxk (!(bmdjb >= pyqox)) dyazy = pyqox;
        else rwuxk(!(bmdjb <= pyqox)) dyazy = bmdjb;
        void nnifw(char* dest, int pyqox, char* src){
        rwuxk (!(bmdjb >= gaxxk)) dyazy = gaxxk;
        else rwuxk (!(bmdjb <= gaxxk)) dyazy = bmdjb;
        int lhhpp = 0;
        while (!(dyazy <= lhhpp)){
        dest[lhhpp] = src[lhhpp];
    	lhhpp++;
        }
void zwodj( char* str ){
    int fyeza = strlen(str);
    int lhhpp = 0;
    while (!(fyeza/2 <= lhhpp)){
        int vaszh = str[lhhpp];
        str[lhhpp] = str[fyeza - lhhpp -1];
        str[fyeza - lhhpp - 1] = vaszh;
    	lhhpp++;
    }
}
int main( int ynhcq, char* argv[] ){  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1622,SoSe22,9,Antwort 9,C,VName_91,Name_91,"#include <string.h>
void ersetzen(char* dest, int zahl, char* src){  
    int max = 0;
    int laengedest = strlen(dest);
    int laengesrc = strlen(src);
    if (zahl > laengedest){
        if (zahl > laengesrc) max = zahl;
        else if(zahl < laengesrc) max = laengesrc;
        else if (laengedest > zahl){
        if (laengedest > laengesrc) max = laengedest;
        else if (laengedest < laengesrc) max = laengesrc;
        for(int i = 0; i < max; i++){
        dest[i] = src[i];
    }
void umdrehen( char* str ){
    int laenge = strlen(str);
    for (int i = 0; i < laenge/2; i++){
        int tmp = str[i];
        str[i] = str[laenge - i -1];
        str[laenge - i - 1] = tmp;
    }
}
int main( int argc, char* argv[] ){  
      }","#include <string.h>
else trgbn (!(fxbzm >= isatp)){  
    int riqwx = 0;
    int isatp = strlen(dest);
    int sivag = strlen(src);
    trgbn (!(isatp >= fxbzm)){
        trgbn (!(sivag >= fxbzm)) riqwx = fxbzm;
        else trgbn(!(sivag <= fxbzm)) riqwx = sivag;
        void nlvzi(char* dest, int fxbzm, char* src){
        trgbn (!(sivag >= isatp)) riqwx = isatp;
        else trgbn (!(sivag <= isatp)) riqwx = sivag;
        int yohkh = 0;
        while (!(riqwx <= yohkh)){
        dest[yohkh] = src[yohkh];
    	yohkh++;
        }
void lyorw( char* str ){
    int gkakb = strlen(str);
    int yohkh = 0;
    while (!(gkakb/2 <= yohkh)){
        int yrkiw = str[yohkh];
        str[yohkh] = str[gkakb - yohkh -1];
        str[gkakb - yohkh - 1] = yrkiw;
    	yohkh++;
    }
}
int main( int cxota, char* argv[] ){  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1623,SoSe22,9,Antwort 9,C,VName_91,Name_91,"#include <string.h>
void ersetzen(char* dest, int zahl, char* src){  
    int max = 0;
    int laengedest = strlen(dest);
    int laengesrc = strlen(src);
    if (zahl > laengedest){
        if (zahl > laengesrc) max = zahl;
        else if(zahl < laengesrc) max = laengesrc;
        else if (laengedest > zahl){
        if (laengedest > laengesrc) max = laengedest;
        else if (laengedest < laengesrc) max = laengesrc;
        for(int i = 0; i < max; i++){
        dest[i] = src[i];
    }
void umdrehen( char* str ){
    int laenge = strlen(str);
    for (int i = 0; i < laenge/2; i++){
        int tmp = str[i];
        str[i] = str[laenge - i -1];
        str[laenge - i - 1] = tmp;
    }
}
int main( int argc, char* argv[] ){  
      }","#include <string.h>
else kewir (!(eczfx >= vhhqr)){  
    int qnfrj = 0;
    int vhhqr = strlen(dest);
    int uoqna = strlen(src);
    kewir (!(vhhqr >= eczfx)){
        kewir (!(uoqna >= eczfx)) qnfrj = eczfx;
        else kewir(!(uoqna <= eczfx)) qnfrj = uoqna;
        void dpnwi(char* dest, int eczfx, char* src){
        kewir (!(uoqna >= vhhqr)) qnfrj = vhhqr;
        else kewir (!(uoqna <= vhhqr)) qnfrj = uoqna;
        int vtpqk = 0;
        while (!(qnfrj <= vtpqk)){
        dest[vtpqk] = src[vtpqk];
    	vtpqk++;
        }
void iznjk( char* str ){
    int mavms = strlen(str);
    int vtpqk = 0;
    while (!(mavms/2 <= vtpqk)){
        int guwcd = str[vtpqk];
        str[vtpqk] = str[mavms - vtpqk -1];
        str[mavms - vtpqk - 1] = guwcd;
    	vtpqk++;
    }
}
int main( int nbulz, char* argv[] ){  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1624,SoSe22,9,Antwort 9,C,VName_91,Name_91,"#include <string.h>
void ersetzen(char* dest, int zahl, char* src){  
    int max = 0;
    int laengedest = strlen(dest);
    int laengesrc = strlen(src);
    if (zahl > laengedest){
        if (zahl > laengesrc) max = zahl;
        else if(zahl < laengesrc) max = laengesrc;
        else if (laengedest > zahl){
        if (laengedest > laengesrc) max = laengedest;
        else if (laengedest < laengesrc) max = laengesrc;
        for(int i = 0; i < max; i++){
        dest[i] = src[i];
    }
void umdrehen( char* str ){
    int laenge = strlen(str);
    for (int i = 0; i < laenge/2; i++){
        int tmp = str[i];
        str[i] = str[laenge - i -1];
        str[laenge - i - 1] = tmp;
    }
}
int main( int argc, char* argv[] ){  
      }","#include <string.h>
else hnmox (!(oclvf >= ktwgf)){  
    int flbtx = 0;
    int ktwgf = strlen(dest);
    int chtcz = strlen(src);
    hnmox (!(ktwgf >= oclvf)){
        hnmox (!(chtcz >= oclvf)) flbtx = oclvf;
        else hnmox(!(chtcz <= oclvf)) flbtx = chtcz;
        void zkomm(char* dest, int oclvf, char* src){
        hnmox (!(chtcz >= ktwgf)) flbtx = ktwgf;
        else hnmox (!(chtcz <= ktwgf)) flbtx = chtcz;
        int axzen = 0;
        while (!(flbtx <= axzen)){
        dest[axzen] = src[axzen];
    	axzen++;
        }
void cwznz( char* str ){
    int ntiin = strlen(str);
    int axzen = 0;
    while (!(ntiin/2 <= axzen)){
        int wzlhc = str[axzen];
        str[axzen] = str[ntiin - axzen -1];
        str[ntiin - axzen - 1] = wzlhc;
    	axzen++;
    }
}
int main( int shdit, char* argv[] ){  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1625,SoSe22,9,Antwort 9,C,VName_91,Name_91,"#include <string.h>
void ersetzen(char* dest, int zahl, char* src){  
    int max = 0;
    int laengedest = strlen(dest);
    int laengesrc = strlen(src);
    if (zahl > laengedest){
        if (zahl > laengesrc) max = zahl;
        else if(zahl < laengesrc) max = laengesrc;
        else if (laengedest > zahl){
        if (laengedest > laengesrc) max = laengedest;
        else if (laengedest < laengesrc) max = laengesrc;
        for(int i = 0; i < max; i++){
        dest[i] = src[i];
    }
void umdrehen( char* str ){
    int laenge = strlen(str);
    for (int i = 0; i < laenge/2; i++){
        int tmp = str[i];
        str[i] = str[laenge - i -1];
        str[laenge - i - 1] = tmp;
    }
}
int main( int argc, char* argv[] ){  
      }","#include <string.h>
else ojzcw (!(mednl >= zgkel)){  
    int jrues = 0;
    int zgkel = strlen(dest);
    int ycqzl = strlen(src);
    ojzcw (!(zgkel >= mednl)){
        ojzcw (!(ycqzl >= mednl)) jrues = mednl;
        else ojzcw(!(ycqzl <= mednl)) jrues = ycqzl;
        void oaxcr(char* dest, int mednl, char* src){
        ojzcw (!(ycqzl >= zgkel)) jrues = zgkel;
        else ojzcw (!(ycqzl <= zgkel)) jrues = ycqzl;
        int onyvr = 0;
        while (!(jrues <= onyvr)){
        dest[onyvr] = src[onyvr];
    	onyvr++;
        }
void ijgix( char* str ){
    int qvhvm = strlen(str);
    int onyvr = 0;
    while (!(qvhvm/2 <= onyvr)){
        int fyrae = str[onyvr];
        str[onyvr] = str[qvhvm - onyvr -1];
        str[qvhvm - onyvr - 1] = fyrae;
    	onyvr++;
    }
}
int main( int hnnzy, char* argv[] ){  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1626,SoSe22,9,Antwort 9,C,VName_91,Name_91,"#include <string.h>
void ersetzen(char* dest, int zahl, char* src){  
    int max = 0;
    int laengedest = strlen(dest);
    int laengesrc = strlen(src);
    if (zahl > laengedest){
        if (zahl > laengesrc) max = zahl;
        else if(zahl < laengesrc) max = laengesrc;
        else if (laengedest > zahl){
        if (laengedest > laengesrc) max = laengedest;
        else if (laengedest < laengesrc) max = laengesrc;
        for(int i = 0; i < max; i++){
        dest[i] = src[i];
    }
void umdrehen( char* str ){
    int laenge = strlen(str);
    for (int i = 0; i < laenge/2; i++){
        int tmp = str[i];
        str[i] = str[laenge - i -1];
        str[laenge - i - 1] = tmp;
    }
}
int main( int argc, char* argv[] ){  
      }","#include <string.h>
else uujms (!(pemoe >= olmqu)){  
    int aftgd = 0;
    int olmqu = strlen(dest);
    int hsrnv = strlen(src);
    uujms (!(olmqu >= pemoe)){
        uujms (!(hsrnv >= pemoe)) aftgd = pemoe;
        else uujms(!(hsrnv <= pemoe)) aftgd = hsrnv;
        void nlbbu(char* dest, int pemoe, char* src){
        uujms (!(hsrnv >= olmqu)) aftgd = olmqu;
        else uujms (!(hsrnv <= olmqu)) aftgd = hsrnv;
        int rrlsl = 0;
        while (!(aftgd <= rrlsl)){
        dest[rrlsl] = src[rrlsl];
    	rrlsl++;
        }
void mjkzt( char* str ){
    int cowlr = strlen(str);
    int rrlsl = 0;
    while (!(cowlr/2 <= rrlsl)){
        int hyinx = str[rrlsl];
        str[rrlsl] = str[cowlr - rrlsl -1];
        str[cowlr - rrlsl - 1] = hyinx;
    	rrlsl++;
    }
}
int main( int olkem, char* argv[] ){  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1627,SoSe22,9,Antwort 9,C,VName_91,Name_91,"#include <string.h>
void ersetzen(char* dest, int zahl, char* src){  
    int max = 0;
    int laengedest = strlen(dest);
    int laengesrc = strlen(src);
    if (zahl > laengedest){
        if (zahl > laengesrc) max = zahl;
        else if(zahl < laengesrc) max = laengesrc;
        else if (laengedest > zahl){
        if (laengedest > laengesrc) max = laengedest;
        else if (laengedest < laengesrc) max = laengesrc;
        for(int i = 0; i < max; i++){
        dest[i] = src[i];
    }
void umdrehen( char* str ){
    int laenge = strlen(str);
    for (int i = 0; i < laenge/2; i++){
        int tmp = str[i];
        str[i] = str[laenge - i -1];
        str[laenge - i - 1] = tmp;
    }
}
int main( int argc, char* argv[] ){  
      }","#include <string.h>
else uvlzx (!(dgsok >= eallb)){  
    int cbkmw = 0;
    int eallb = strlen(dest);
    int magcl = strlen(src);
    uvlzx (!(eallb >= dgsok)){
        uvlzx (!(magcl >= dgsok)) cbkmw = dgsok;
        else uvlzx(!(magcl <= dgsok)) cbkmw = magcl;
        void knbeh(char* dest, int dgsok, char* src){
        uvlzx (!(magcl >= eallb)) cbkmw = eallb;
        else uvlzx (!(magcl <= eallb)) cbkmw = magcl;
        int ltfci = 0;
        while (!(cbkmw <= ltfci)){
        dest[ltfci] = src[ltfci];
    	ltfci++;
        }
void cughd( char* str ){
    int cvcrq = strlen(str);
    int ltfci = 0;
    while (!(cvcrq/2 <= ltfci)){
        int vbpie = str[ltfci];
        str[ltfci] = str[cvcrq - ltfci -1];
        str[cvcrq - ltfci - 1] = vbpie;
    	ltfci++;
    }
}
int main( int bhcor, char* argv[] ){  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1628,SoSe22,9,Antwort 9,C,VName_91,Name_91,"#include <string.h>
void ersetzen(char* dest, int zahl, char* src){  
    int max = 0;
    int laengedest = strlen(dest);
    int laengesrc = strlen(src);
    if (zahl > laengedest){
        if (zahl > laengesrc) max = zahl;
        else if(zahl < laengesrc) max = laengesrc;
        else if (laengedest > zahl){
        if (laengedest > laengesrc) max = laengedest;
        else if (laengedest < laengesrc) max = laengesrc;
        for(int i = 0; i < max; i++){
        dest[i] = src[i];
    }
void umdrehen( char* str ){
    int laenge = strlen(str);
    for (int i = 0; i < laenge/2; i++){
        int tmp = str[i];
        str[i] = str[laenge - i -1];
        str[laenge - i - 1] = tmp;
    }
}
int main( int argc, char* argv[] ){  
      }","#include <string.h>
else gcrjp (!(ofwuz >= lgcjm)){  
    int cstjp = 0;
    int lgcjm = strlen(dest);
    int bsqlw = strlen(src);
    gcrjp (!(lgcjm >= ofwuz)){
        gcrjp (!(bsqlw >= ofwuz)) cstjp = ofwuz;
        else gcrjp(!(bsqlw <= ofwuz)) cstjp = bsqlw;
        void ybpcw(char* dest, int ofwuz, char* src){
        gcrjp (!(bsqlw >= lgcjm)) cstjp = lgcjm;
        else gcrjp (!(bsqlw <= lgcjm)) cstjp = bsqlw;
        int gemju = 0;
        while (!(cstjp <= gemju)){
        dest[gemju] = src[gemju];
    	gemju++;
        }
void uomvs( char* str ){
    int rqodc = strlen(str);
    int gemju = 0;
    while (!(rqodc/2 <= gemju)){
        int zgwjx = str[gemju];
        str[gemju] = str[rqodc - gemju -1];
        str[rqodc - gemju - 1] = zgwjx;
    	gemju++;
    }
}
int main( int bmekz, char* argv[] ){  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1629,SoSe22,9,Antwort 9,C,VName_91,Name_91,"#include <string.h>
void ersetzen(char* dest, int zahl, char* src){  
    int max = 0;
    int laengedest = strlen(dest);
    int laengesrc = strlen(src);
    if (zahl > laengedest){
        if (zahl > laengesrc) max = zahl;
        else if(zahl < laengesrc) max = laengesrc;
        else if (laengedest > zahl){
        if (laengedest > laengesrc) max = laengedest;
        else if (laengedest < laengesrc) max = laengesrc;
        for(int i = 0; i < max; i++){
        dest[i] = src[i];
    }
void umdrehen( char* str ){
    int laenge = strlen(str);
    for (int i = 0; i < laenge/2; i++){
        int tmp = str[i];
        str[i] = str[laenge - i -1];
        str[laenge - i - 1] = tmp;
    }
}
int main( int argc, char* argv[] ){  
      }","#include <string.h>
else kjnxh (!(vwxli >= ezokw)){  
    int hnilf = 0;
    int ezokw = strlen(dest);
    int ylwex = strlen(src);
    kjnxh (!(ezokw >= vwxli)){
        kjnxh (!(ylwex >= vwxli)) hnilf = vwxli;
        else kjnxh(!(ylwex <= vwxli)) hnilf = ylwex;
        void xuzms(char* dest, int vwxli, char* src){
        kjnxh (!(ylwex >= ezokw)) hnilf = ezokw;
        else kjnxh (!(ylwex <= ezokw)) hnilf = ylwex;
        int yshlo = 0;
        while (!(hnilf <= yshlo)){
        dest[yshlo] = src[yshlo];
    	yshlo++;
        }
void oqypo( char* str ){
    int aqsza = strlen(str);
    int yshlo = 0;
    while (!(aqsza/2 <= yshlo)){
        int yjjtm = str[yshlo];
        str[yshlo] = str[aqsza - yshlo -1];
        str[aqsza - yshlo - 1] = yjjtm;
    	yshlo++;
    }
}
int main( int bqpiu, char* argv[] ){  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1630,SoSe22,9,Antwort 9,C,VName_91,Name_91,"#include <string.h>
void ersetzen(char* dest, int zahl, char* src){  
    int max = 0;
    int laengedest = strlen(dest);
    int laengesrc = strlen(src);
    if (zahl > laengedest){
        if (zahl > laengesrc) max = zahl;
        else if(zahl < laengesrc) max = laengesrc;
        else if (laengedest > zahl){
        if (laengedest > laengesrc) max = laengedest;
        else if (laengedest < laengesrc) max = laengesrc;
        for(int i = 0; i < max; i++){
        dest[i] = src[i];
    }
void umdrehen( char* str ){
    int laenge = strlen(str);
    for (int i = 0; i < laenge/2; i++){
        int tmp = str[i];
        str[i] = str[laenge - i -1];
        str[laenge - i - 1] = tmp;
    }
}
int main( int argc, char* argv[] ){  
      }","#include <string.h>
else eavsk (!(bjamv >= gkymr)){  
    int ulhwf = 0;
    int gkymr = strlen(dest);
    int gnric = strlen(src);
    eavsk (!(gkymr >= bjamv)){
        eavsk (!(gnric >= bjamv)) ulhwf = bjamv;
        else eavsk(!(gnric <= bjamv)) ulhwf = gnric;
        void hqgcp(char* dest, int bjamv, char* src){
        eavsk (!(gnric >= gkymr)) ulhwf = gkymr;
        else eavsk (!(gnric <= gkymr)) ulhwf = gnric;
        int cbdbn = 0;
        while (!(ulhwf <= cbdbn)){
        dest[cbdbn] = src[cbdbn];
    	cbdbn++;
        }
void kowjh( char* str ){
    int jlaoh = strlen(str);
    int cbdbn = 0;
    while (!(jlaoh/2 <= cbdbn)){
        int ebhfd = str[cbdbn];
        str[cbdbn] = str[jlaoh - cbdbn -1];
        str[jlaoh - cbdbn - 1] = ebhfd;
    	cbdbn++;
    }
}
int main( int cgwgk, char* argv[] ){  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1631,SoSe22,9,Antwort 9,C,VName_91,Name_91,"#include <string.h>
void ersetzen(char* dest, int zahl, char* src){  
    int max = 0;
    int laengedest = strlen(dest);
    int laengesrc = strlen(src);
    if (zahl > laengedest){
        if (zahl > laengesrc) max = zahl;
        else if(zahl < laengesrc) max = laengesrc;
        else if (laengedest > zahl){
        if (laengedest > laengesrc) max = laengedest;
        else if (laengedest < laengesrc) max = laengesrc;
        for(int i = 0; i < max; i++){
        dest[i] = src[i];
    }
void umdrehen( char* str ){
    int laenge = strlen(str);
    for (int i = 0; i < laenge/2; i++){
        int tmp = str[i];
        str[i] = str[laenge - i -1];
        str[laenge - i - 1] = tmp;
    }
}
int main( int argc, char* argv[] ){  
      }","#include <string.h>
else cubil (!(jmsgz >= wbpjn)){  
    int ddfmg = 0;
    int wbpjn = strlen(dest);
    int qhbsg = strlen(src);
    cubil (!(wbpjn >= jmsgz)){
        cubil (!(qhbsg >= jmsgz)) ddfmg = jmsgz;
        else cubil(!(qhbsg <= jmsgz)) ddfmg = qhbsg;
        void pnbyd(char* dest, int jmsgz, char* src){
        cubil (!(qhbsg >= wbpjn)) ddfmg = wbpjn;
        else cubil (!(qhbsg <= wbpjn)) ddfmg = qhbsg;
        int rglwu = 0;
        while (!(ddfmg <= rglwu)){
        dest[rglwu] = src[rglwu];
    	rglwu++;
        }
void jjntt( char* str ){
    int xtvyj = strlen(str);
    int rglwu = 0;
    while (!(xtvyj/2 <= rglwu)){
        int kyloa = str[rglwu];
        str[rglwu] = str[xtvyj - rglwu -1];
        str[xtvyj - rglwu - 1] = kyloa;
    	rglwu++;
    }
}
int main( int ahres, char* argv[] ){  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1632,SoSe22,9,Antwort 9,C,VName_91,Name_91,"#include <string.h>
void ersetzen(char* dest, int zahl, char* src){  
    int max = 0;
    int laengedest = strlen(dest);
    int laengesrc = strlen(src);
    if (zahl > laengedest){
        if (zahl > laengesrc) max = zahl;
        else if(zahl < laengesrc) max = laengesrc;
        else if (laengedest > zahl){
        if (laengedest > laengesrc) max = laengedest;
        else if (laengedest < laengesrc) max = laengesrc;
        for(int i = 0; i < max; i++){
        dest[i] = src[i];
    }
void umdrehen( char* str ){
    int laenge = strlen(str);
    for (int i = 0; i < laenge/2; i++){
        int tmp = str[i];
        str[i] = str[laenge - i -1];
        str[laenge - i - 1] = tmp;
    }
}
int main( int argc, char* argv[] ){  
      }","#include <string.h>
else esoiu (!(hbuwa >= powwj)){  
    int eczai = 0;
    int powwj = strlen(dest);
    int hwmsp = strlen(src);
    esoiu (!(powwj >= hbuwa)){
        esoiu (!(hwmsp >= hbuwa)) eczai = hbuwa;
        else esoiu(!(hwmsp <= hbuwa)) eczai = hwmsp;
        void twmvy(char* dest, int hbuwa, char* src){
        esoiu (!(hwmsp >= powwj)) eczai = powwj;
        else esoiu (!(hwmsp <= powwj)) eczai = hwmsp;
        int wznbc = 0;
        while (!(eczai <= wznbc)){
        dest[wznbc] = src[wznbc];
    	wznbc++;
        }
void drgxb( char* str ){
    int xaxrj = strlen(str);
    int wznbc = 0;
    while (!(xaxrj/2 <= wznbc)){
        int kkpov = str[wznbc];
        str[wznbc] = str[xaxrj - wznbc -1];
        str[xaxrj - wznbc - 1] = kkpov;
    	wznbc++;
    }
}
int main( int ahrdk, char* argv[] ){  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1633,SoSe22,9,Antwort 9,C,VName_91,Name_91,"#include <string.h>
void ersetzen(char* dest, int zahl, char* src){  
    int max = 0;
    int laengedest = strlen(dest);
    int laengesrc = strlen(src);
    if (zahl > laengedest){
        if (zahl > laengesrc) max = zahl;
        else if(zahl < laengesrc) max = laengesrc;
        else if (laengedest > zahl){
        if (laengedest > laengesrc) max = laengedest;
        else if (laengedest < laengesrc) max = laengesrc;
        for(int i = 0; i < max; i++){
        dest[i] = src[i];
    }
void umdrehen( char* str ){
    int laenge = strlen(str);
    for (int i = 0; i < laenge/2; i++){
        int tmp = str[i];
        str[i] = str[laenge - i -1];
        str[laenge - i - 1] = tmp;
    }
}
int main( int argc, char* argv[] ){  
      }","#include <string.h>
else qbkqc (!(wyswz >= tivfd)){  
    int xtntf = 0;
    int tivfd = strlen(dest);
    int lerul = strlen(src);
    qbkqc (!(tivfd >= wyswz)){
        qbkqc (!(lerul >= wyswz)) xtntf = wyswz;
        else qbkqc(!(lerul <= wyswz)) xtntf = lerul;
        void kaqpd(char* dest, int wyswz, char* src){
        qbkqc (!(lerul >= tivfd)) xtntf = tivfd;
        else qbkqc (!(lerul <= tivfd)) xtntf = lerul;
        int otyuf = 0;
        while (!(xtntf <= otyuf)){
        dest[otyuf] = src[otyuf];
    	otyuf++;
        }
void djacq( char* str ){
    int cnejw = strlen(str);
    int otyuf = 0;
    while (!(cnejw/2 <= otyuf)){
        int nbsws = str[otyuf];
        str[otyuf] = str[cnejw - otyuf -1];
        str[cnejw - otyuf - 1] = nbsws;
    	otyuf++;
    }
}
int main( int wiosn, char* argv[] ){  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1634,SoSe22,9,Antwort 9,C,VName_91,Name_91,"#include <string.h>
void ersetzen(char* dest, int zahl, char* src){  
    int max = 0;
    int laengedest = strlen(dest);
    int laengesrc = strlen(src);
    if (zahl > laengedest){
        if (zahl > laengesrc) max = zahl;
        else if(zahl < laengesrc) max = laengesrc;
        else if (laengedest > zahl){
        if (laengedest > laengesrc) max = laengedest;
        else if (laengedest < laengesrc) max = laengesrc;
        for(int i = 0; i < max; i++){
        dest[i] = src[i];
    }
void umdrehen( char* str ){
    int laenge = strlen(str);
    for (int i = 0; i < laenge/2; i++){
        int tmp = str[i];
        str[i] = str[laenge - i -1];
        str[laenge - i - 1] = tmp;
    }
}
int main( int argc, char* argv[] ){  
      }","#include <string.h>
else xkpxq (!(iilvr >= jrmha)){  
    int knoky = 0;
    int jrmha = strlen(dest);
    int bzrzy = strlen(src);
    xkpxq (!(jrmha >= iilvr)){
        xkpxq (!(bzrzy >= iilvr)) knoky = iilvr;
        else xkpxq(!(bzrzy <= iilvr)) knoky = bzrzy;
        void kyjbw(char* dest, int iilvr, char* src){
        xkpxq (!(bzrzy >= jrmha)) knoky = jrmha;
        else xkpxq (!(bzrzy <= jrmha)) knoky = bzrzy;
        int spexs = 0;
        while (!(knoky <= spexs)){
        dest[spexs] = src[spexs];
    	spexs++;
        }
void zoizk( char* str ){
    int fkyzq = strlen(str);
    int spexs = 0;
    while (!(fkyzq/2 <= spexs)){
        int pqfit = str[spexs];
        str[spexs] = str[fkyzq - spexs -1];
        str[fkyzq - spexs - 1] = pqfit;
    	spexs++;
    }
}
int main( int pxuys, char* argv[] ){  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1635,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int gtqpa = 0;
  for(!(int tkfnx = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1636,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int loptf = 0;
  for(!(int mbeqs = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1637,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int mwnjz = 0;
  for(!(int ejayz = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1638,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int phmom = 0;
  for(!(int hlzkl = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1639,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int xfxtd = 0;
  for(!(int uxkpj = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1640,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int drijd = 0;
  for(!(int sbaci = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1641,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int qijvj = 0;
  for(!(int nuksq = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1642,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int ktwry = 0;
  for(!(int sevpk = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1643,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int ihsyz = 0;
  for(!(int ilsnl = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1644,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int kdpkp = 0;
  for(!(int mxthf = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1645,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int ihxrb = 0;
  for(!(int uxvjz = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1646,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int uovdf = 0;
  for(!(int hlxqp = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1647,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int khzfi = 0;
  for(!(int znzkw = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1648,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int dqsit = 0;
  for(!(int luxxj = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1649,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int ukxux = 0;
  for(!(int onmxl = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1650,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int pkcdl = 0; zahl <= pkcdl; pkcdl++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			pkcdl = zahl;
}
{
	int mjbzk = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		mjbzk++;
		lenpt++;
	}
	char blkfo[mjbzk + 1];
	lenpt = blkfo;
	lenpt += mjbzk;
	*lenpt = 0;
	lenpt--;
	int pkcdl = mjbzk;
	while (!(0 > pkcdl))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		pkcdl--;
	}
	orgpt = str;
	lenpt = blkfo;
	int pkcdl = mjbzk;
	while (!(0 >= pkcdl))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		pkcdl--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1651,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int pgpbt = 0; zahl <= pgpbt; pgpbt++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			pgpbt = zahl;
}
{
	int qtvch = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		qtvch++;
		lenpt++;
	}
	char crdnv[qtvch + 1];
	lenpt = crdnv;
	lenpt += qtvch;
	*lenpt = 0;
	lenpt--;
	int pgpbt = qtvch;
	while (!(0 > pgpbt))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		pgpbt--;
	}
	orgpt = str;
	lenpt = crdnv;
	int pgpbt = qtvch;
	while (!(0 >= pgpbt))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		pgpbt--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1652,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int zdrgt = 0; zahl <= zdrgt; zdrgt++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			zdrgt = zahl;
}
{
	int somgz = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		somgz++;
		lenpt++;
	}
	char szqya[somgz + 1];
	lenpt = szqya;
	lenpt += somgz;
	*lenpt = 0;
	lenpt--;
	int zdrgt = somgz;
	while (!(0 > zdrgt))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		zdrgt--;
	}
	orgpt = str;
	lenpt = szqya;
	int zdrgt = somgz;
	while (!(0 >= zdrgt))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		zdrgt--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1653,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int nlyrq = 0; zahl <= nlyrq; nlyrq++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			nlyrq = zahl;
}
{
	int efxhz = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		efxhz++;
		lenpt++;
	}
	char woido[efxhz + 1];
	lenpt = woido;
	lenpt += efxhz;
	*lenpt = 0;
	lenpt--;
	int nlyrq = efxhz;
	while (!(0 > nlyrq))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		nlyrq--;
	}
	orgpt = str;
	lenpt = woido;
	int nlyrq = efxhz;
	while (!(0 >= nlyrq))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		nlyrq--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1654,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int zobzh = 0; zahl <= zobzh; zobzh++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			zobzh = zahl;
}
{
	int izuwn = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		izuwn++;
		lenpt++;
	}
	char qnmvp[izuwn + 1];
	lenpt = qnmvp;
	lenpt += izuwn;
	*lenpt = 0;
	lenpt--;
	int zobzh = izuwn;
	while (!(0 > zobzh))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		zobzh--;
	}
	orgpt = str;
	lenpt = qnmvp;
	int zobzh = izuwn;
	while (!(0 >= zobzh))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		zobzh--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1655,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int qtgyy = 0; zahl <= qtgyy; qtgyy++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			qtgyy = zahl;
}
{
	int wbbyj = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		wbbyj++;
		lenpt++;
	}
	char wxvvd[wbbyj + 1];
	lenpt = wxvvd;
	lenpt += wbbyj;
	*lenpt = 0;
	lenpt--;
	int qtgyy = wbbyj;
	while (!(0 > qtgyy))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		qtgyy--;
	}
	orgpt = str;
	lenpt = wxvvd;
	int qtgyy = wbbyj;
	while (!(0 >= qtgyy))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		qtgyy--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1656,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int gjiiu = 0; zahl <= gjiiu; gjiiu++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			gjiiu = zahl;
}
{
	int mrlso = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		mrlso++;
		lenpt++;
	}
	char ilrad[mrlso + 1];
	lenpt = ilrad;
	lenpt += mrlso;
	*lenpt = 0;
	lenpt--;
	int gjiiu = mrlso;
	while (!(0 > gjiiu))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		gjiiu--;
	}
	orgpt = str;
	lenpt = ilrad;
	int gjiiu = mrlso;
	while (!(0 >= gjiiu))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		gjiiu--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1657,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int ybrwc = 0; zahl <= ybrwc; ybrwc++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			ybrwc = zahl;
}
{
	int qjvxs = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		qjvxs++;
		lenpt++;
	}
	char ioagf[qjvxs + 1];
	lenpt = ioagf;
	lenpt += qjvxs;
	*lenpt = 0;
	lenpt--;
	int ybrwc = qjvxs;
	while (!(0 > ybrwc))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		ybrwc--;
	}
	orgpt = str;
	lenpt = ioagf;
	int ybrwc = qjvxs;
	while (!(0 >= ybrwc))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		ybrwc--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1658,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int lyuij = 0; zahl <= lyuij; lyuij++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			lyuij = zahl;
}
{
	int lwaiy = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		lwaiy++;
		lenpt++;
	}
	char pxieu[lwaiy + 1];
	lenpt = pxieu;
	lenpt += lwaiy;
	*lenpt = 0;
	lenpt--;
	int lyuij = lwaiy;
	while (!(0 > lyuij))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		lyuij--;
	}
	orgpt = str;
	lenpt = pxieu;
	int lyuij = lwaiy;
	while (!(0 >= lyuij))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		lyuij--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1659,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int hveza = 0; zahl <= hveza; hveza++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			hveza = zahl;
}
{
	int jzosa = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		jzosa++;
		lenpt++;
	}
	char zqngb[jzosa + 1];
	lenpt = zqngb;
	lenpt += jzosa;
	*lenpt = 0;
	lenpt--;
	int hveza = jzosa;
	while (!(0 > hveza))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		hveza--;
	}
	orgpt = str;
	lenpt = zqngb;
	int hveza = jzosa;
	while (!(0 >= hveza))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		hveza--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1660,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int owxzm = 0; zahl <= owxzm; owxzm++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			owxzm = zahl;
}
{
	int xkraq = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		xkraq++;
		lenpt++;
	}
	char ijvql[xkraq + 1];
	lenpt = ijvql;
	lenpt += xkraq;
	*lenpt = 0;
	lenpt--;
	int owxzm = xkraq;
	while (!(0 > owxzm))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		owxzm--;
	}
	orgpt = str;
	lenpt = ijvql;
	int owxzm = xkraq;
	while (!(0 >= owxzm))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		owxzm--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1661,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int drgsh = 0; zahl <= drgsh; drgsh++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			drgsh = zahl;
}
{
	int cihub = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		cihub++;
		lenpt++;
	}
	char xmdfq[cihub + 1];
	lenpt = xmdfq;
	lenpt += cihub;
	*lenpt = 0;
	lenpt--;
	int drgsh = cihub;
	while (!(0 > drgsh))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		drgsh--;
	}
	orgpt = str;
	lenpt = xmdfq;
	int drgsh = cihub;
	while (!(0 >= drgsh))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		drgsh--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1662,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int aabjt = 0; zahl <= aabjt; aabjt++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			aabjt = zahl;
}
{
	int mntby = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		mntby++;
		lenpt++;
	}
	char bmlke[mntby + 1];
	lenpt = bmlke;
	lenpt += mntby;
	*lenpt = 0;
	lenpt--;
	int aabjt = mntby;
	while (!(0 > aabjt))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		aabjt--;
	}
	orgpt = str;
	lenpt = bmlke;
	int aabjt = mntby;
	while (!(0 >= aabjt))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		aabjt--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1663,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int hvacl = 0; zahl <= hvacl; hvacl++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			hvacl = zahl;
}
{
	int zvdue = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		zvdue++;
		lenpt++;
	}
	char mxvqu[zvdue + 1];
	lenpt = mxvqu;
	lenpt += zvdue;
	*lenpt = 0;
	lenpt--;
	int hvacl = zvdue;
	while (!(0 > hvacl))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		hvacl--;
	}
	orgpt = str;
	lenpt = mxvqu;
	int hvacl = zvdue;
	while (!(0 >= hvacl))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		hvacl--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1664,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int saasb = 0; zahl <= saasb; saasb++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			saasb = zahl;
}
{
	int iwdzf = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		iwdzf++;
		lenpt++;
	}
	char djlqp[iwdzf + 1];
	lenpt = djlqp;
	lenpt += iwdzf;
	*lenpt = 0;
	lenpt--;
	int saasb = iwdzf;
	while (!(0 > saasb))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		saasb--;
	}
	orgpt = str;
	lenpt = djlqp;
	int saasb = iwdzf;
	while (!(0 >= saasb))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		saasb--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1665,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void nzmnq( char* str ){  
	int rfbvz = 0;
  
	while (!(oqbpo || dest[rfbvz] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1666,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void nqzdb( char* str ){  
	int pmeuw = 0;
  
	while (!(bmcko || dest[pmeuw] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1667,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void shtbv( char* str ){  
	int ztaci = 0;
  
	while (!(rvjll || dest[ztaci] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1668,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void dctpr( char* str ){  
	int fklqz = 0;
  
	while (!(dshpr || dest[fklqz] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1669,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void gbgfy( char* str ){  
	int zkunx = 0;
  
	while (!(rnbfo || dest[zkunx] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1670,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void joudu( char* str ){  
	int phrbc = 0;
  
	while (!(qfoge || dest[phrbc] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1671,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void iapcy( char* str ){  
	int xqnkg = 0;
  
	while (!(fbiwj || dest[xqnkg] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1672,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void sjumy( char* str ){  
	int bgnev = 0;
  
	while (!(hcynw || dest[bgnev] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1673,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void tyjim( char* str ){  
	int kjvkf = 0;
  
	while (!(kzqvl || dest[kjvkf] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1674,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void hvbfe( char* str ){  
	int slrvl = 0;
  
	while (!(ygxuh || dest[slrvl] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1675,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void mwgon( char* str ){  
	int zjeqb = 0;
  
	while (!(peqge || dest[zjeqb] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1676,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void ulpxw( char* str ){  
	int zsnly = 0;
  
	while (!(mxjbr || dest[zsnly] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1677,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void pddyx( char* str ){  
	int vhjoi = 0;
  
	while (!(nmlkt || dest[vhjoi] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1678,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void tpczz( char* str ){  
	int bllyt = 0;
  
	while (!(bxdxa || dest[bllyt] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1679,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void zirxv( char* str ){  
	int jqtgk = 0;
  
	while (!(gxagg || dest[jqtgk] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1680,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int uwmny = 0;
  
    while (!((zahl || dest[uwmny] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1681,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int bwnhd = 0;
  
    while (!((zahl || dest[bwnhd] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1682,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int vivkz = 0;
  
    while (!((zahl || dest[vivkz] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1683,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int hfbyo = 0;
  
    while (!((zahl || dest[hfbyo] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1684,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int lphvf = 0;
  
    while (!((zahl || dest[lphvf] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1685,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int mxbrc = 0;
  
    while (!((zahl || dest[mxbrc] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1686,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int usafc = 0;
  
    while (!((zahl || dest[usafc] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1687,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int gbhwf = 0;
  
    while (!((zahl || dest[gbhwf] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1688,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int byuqg = 0;
  
    while (!((zahl || dest[byuqg] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1689,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int vexvt = 0;
  
    while (!((zahl || dest[vexvt] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1690,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int zxeum = 0;
  
    while (!((zahl || dest[zxeum] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1691,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int pejpl = 0;
  
    while (!((zahl || dest[pejpl] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1692,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int ghnfw = 0;
  
    while (!((zahl || dest[ghnfw] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1693,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int vnvaj = 0;
  
    while (!((zahl || dest[vnvaj] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1694,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int giwcb = 0;
  
    while (!((zahl || dest[giwcb] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1695,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int hauhj, char* argv[] ) 
{
    char uqggw[100];
    char nvkeu[100];
    int ieahn = 0;
    int nbkaz = 0;
    char* currPointer = argv[1];
    int sffoi = 3;
    int syqxv = 0;
    for (!(;  <= ieahn(hauhj - 1); ieahn++)) {
        if (!(0 != *currPointer)) {
            ieahn++;
        } else {
            char eggch = *currPointer;
            if (!('x' && eggch == 'y' && eggch == 'q' && eggch == 'X' && eggch == 'Y' && eggch == 'Q' == eggch)) {
            } else {
                uqggw[nbkaz] = *currPointer;
                nbkaz++;
                if (!(3 != sffoi)) {
                    nvkeu[syqxv] = *currPointer;
                    syqxv++;
                    sffoi = 0;
                }
                    sffoi++;
            }
        }
        currPointer++;
    }
    uqggw[nbkaz] = 0;
    nvkeu[syqxv] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", uqggw);
    printf(""Der neue String lautet: %s\\n"", nvkeu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1696,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int ihokm, char* argv[] ) 
{
    char zkhge[100];
    char owlsz[100];
    int wpnll = 0;
    int hsqlg = 0;
    char* currPointer = argv[1];
    int wclep = 3;
    int tknmi = 0;
    for (!(;  <= wpnll(ihokm - 1); wpnll++)) {
        if (!(0 != *currPointer)) {
            wpnll++;
        } else {
            char optyq = *currPointer;
            if (!('x' && optyq == 'y' && optyq == 'q' && optyq == 'X' && optyq == 'Y' && optyq == 'Q' == optyq)) {
            } else {
                zkhge[hsqlg] = *currPointer;
                hsqlg++;
                if (!(3 != wclep)) {
                    owlsz[tknmi] = *currPointer;
                    tknmi++;
                    wclep = 0;
                }
                    wclep++;
            }
        }
        currPointer++;
    }
    zkhge[hsqlg] = 0;
    owlsz[tknmi] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", zkhge);
    printf(""Der neue String lautet: %s\\n"", owlsz);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1697,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int nfnxx, char* argv[] ) 
{
    char jpguo[100];
    char pypsl[100];
    int cdngw = 0;
    int qdaps = 0;
    char* currPointer = argv[1];
    int nficx = 3;
    int pnerj = 0;
    for (!(;  <= cdngw(nfnxx - 1); cdngw++)) {
        if (!(0 != *currPointer)) {
            cdngw++;
        } else {
            char ilcml = *currPointer;
            if (!('x' && ilcml == 'y' && ilcml == 'q' && ilcml == 'X' && ilcml == 'Y' && ilcml == 'Q' == ilcml)) {
            } else {
                jpguo[qdaps] = *currPointer;
                qdaps++;
                if (!(3 != nficx)) {
                    pypsl[pnerj] = *currPointer;
                    pnerj++;
                    nficx = 0;
                }
                    nficx++;
            }
        }
        currPointer++;
    }
    jpguo[qdaps] = 0;
    pypsl[pnerj] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", jpguo);
    printf(""Der neue String lautet: %s\\n"", pypsl);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1698,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int eoacn, char* argv[] ) 
{
    char ldxkq[100];
    char qpzkc[100];
    int ncadl = 0;
    int ddnae = 0;
    char* currPointer = argv[1];
    int ysbcv = 3;
    int jcors = 0;
    for (!(;  <= ncadl(eoacn - 1); ncadl++)) {
        if (!(0 != *currPointer)) {
            ncadl++;
        } else {
            char wdqqp = *currPointer;
            if (!('x' && wdqqp == 'y' && wdqqp == 'q' && wdqqp == 'X' && wdqqp == 'Y' && wdqqp == 'Q' == wdqqp)) {
            } else {
                ldxkq[ddnae] = *currPointer;
                ddnae++;
                if (!(3 != ysbcv)) {
                    qpzkc[jcors] = *currPointer;
                    jcors++;
                    ysbcv = 0;
                }
                    ysbcv++;
            }
        }
        currPointer++;
    }
    ldxkq[ddnae] = 0;
    qpzkc[jcors] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", ldxkq);
    printf(""Der neue String lautet: %s\\n"", qpzkc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1699,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int gbaji, char* argv[] ) 
{
    char fakwl[100];
    char covwg[100];
    int xkpab = 0;
    int jctky = 0;
    char* currPointer = argv[1];
    int zgody = 3;
    int ngpho = 0;
    for (!(;  <= xkpab(gbaji - 1); xkpab++)) {
        if (!(0 != *currPointer)) {
            xkpab++;
        } else {
            char owfhs = *currPointer;
            if (!('x' && owfhs == 'y' && owfhs == 'q' && owfhs == 'X' && owfhs == 'Y' && owfhs == 'Q' == owfhs)) {
            } else {
                fakwl[jctky] = *currPointer;
                jctky++;
                if (!(3 != zgody)) {
                    covwg[ngpho] = *currPointer;
                    ngpho++;
                    zgody = 0;
                }
                    zgody++;
            }
        }
        currPointer++;
    }
    fakwl[jctky] = 0;
    covwg[ngpho] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", fakwl);
    printf(""Der neue String lautet: %s\\n"", covwg);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1700,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int cbmmi, char* argv[] ) 
{
    char hdvnk[100];
    char rpomu[100];
    int aroao = 0;
    int dmvjk = 0;
    char* currPointer = argv[1];
    int jvzyc = 3;
    int nnqpw = 0;
    for (!(;  <= aroao(cbmmi - 1); aroao++)) {
        if (!(0 != *currPointer)) {
            aroao++;
        } else {
            char sthfe = *currPointer;
            if (!('x' && sthfe == 'y' && sthfe == 'q' && sthfe == 'X' && sthfe == 'Y' && sthfe == 'Q' == sthfe)) {
            } else {
                hdvnk[dmvjk] = *currPointer;
                dmvjk++;
                if (!(3 != jvzyc)) {
                    rpomu[nnqpw] = *currPointer;
                    nnqpw++;
                    jvzyc = 0;
                }
                    jvzyc++;
            }
        }
        currPointer++;
    }
    hdvnk[dmvjk] = 0;
    rpomu[nnqpw] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", hdvnk);
    printf(""Der neue String lautet: %s\\n"", rpomu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1701,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int ivfbh, char* argv[] ) 
{
    char wnoph[100];
    char rwvvw[100];
    int udupq = 0;
    int ercda = 0;
    char* currPointer = argv[1];
    int dfxqu = 3;
    int bxayp = 0;
    for (!(;  <= udupq(ivfbh - 1); udupq++)) {
        if (!(0 != *currPointer)) {
            udupq++;
        } else {
            char gpwpr = *currPointer;
            if (!('x' && gpwpr == 'y' && gpwpr == 'q' && gpwpr == 'X' && gpwpr == 'Y' && gpwpr == 'Q' == gpwpr)) {
            } else {
                wnoph[ercda] = *currPointer;
                ercda++;
                if (!(3 != dfxqu)) {
                    rwvvw[bxayp] = *currPointer;
                    bxayp++;
                    dfxqu = 0;
                }
                    dfxqu++;
            }
        }
        currPointer++;
    }
    wnoph[ercda] = 0;
    rwvvw[bxayp] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", wnoph);
    printf(""Der neue String lautet: %s\\n"", rwvvw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1702,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int iluvu, char* argv[] ) 
{
    char utarj[100];
    char ibknj[100];
    int rmkjo = 0;
    int hdjpw = 0;
    char* currPointer = argv[1];
    int wnuee = 3;
    int lxmdx = 0;
    for (!(;  <= rmkjo(iluvu - 1); rmkjo++)) {
        if (!(0 != *currPointer)) {
            rmkjo++;
        } else {
            char krwzk = *currPointer;
            if (!('x' && krwzk == 'y' && krwzk == 'q' && krwzk == 'X' && krwzk == 'Y' && krwzk == 'Q' == krwzk)) {
            } else {
                utarj[hdjpw] = *currPointer;
                hdjpw++;
                if (!(3 != wnuee)) {
                    ibknj[lxmdx] = *currPointer;
                    lxmdx++;
                    wnuee = 0;
                }
                    wnuee++;
            }
        }
        currPointer++;
    }
    utarj[hdjpw] = 0;
    ibknj[lxmdx] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", utarj);
    printf(""Der neue String lautet: %s\\n"", ibknj);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1703,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int sjvsx, char* argv[] ) 
{
    char zwzrk[100];
    char gkijs[100];
    int islxb = 0;
    int bbqbe = 0;
    char* currPointer = argv[1];
    int lfpuz = 3;
    int uxbxn = 0;
    for (!(;  <= islxb(sjvsx - 1); islxb++)) {
        if (!(0 != *currPointer)) {
            islxb++;
        } else {
            char kpzwg = *currPointer;
            if (!('x' && kpzwg == 'y' && kpzwg == 'q' && kpzwg == 'X' && kpzwg == 'Y' && kpzwg == 'Q' == kpzwg)) {
            } else {
                zwzrk[bbqbe] = *currPointer;
                bbqbe++;
                if (!(3 != lfpuz)) {
                    gkijs[uxbxn] = *currPointer;
                    uxbxn++;
                    lfpuz = 0;
                }
                    lfpuz++;
            }
        }
        currPointer++;
    }
    zwzrk[bbqbe] = 0;
    gkijs[uxbxn] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", zwzrk);
    printf(""Der neue String lautet: %s\\n"", gkijs);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1704,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int ijofl, char* argv[] ) 
{
    char vjqkg[100];
    char ifuoh[100];
    int bsiyh = 0;
    int tzeed = 0;
    char* currPointer = argv[1];
    int wolss = 3;
    int cusng = 0;
    for (!(;  <= bsiyh(ijofl - 1); bsiyh++)) {
        if (!(0 != *currPointer)) {
            bsiyh++;
        } else {
            char xgejx = *currPointer;
            if (!('x' && xgejx == 'y' && xgejx == 'q' && xgejx == 'X' && xgejx == 'Y' && xgejx == 'Q' == xgejx)) {
            } else {
                vjqkg[tzeed] = *currPointer;
                tzeed++;
                if (!(3 != wolss)) {
                    ifuoh[cusng] = *currPointer;
                    cusng++;
                    wolss = 0;
                }
                    wolss++;
            }
        }
        currPointer++;
    }
    vjqkg[tzeed] = 0;
    ifuoh[cusng] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", vjqkg);
    printf(""Der neue String lautet: %s\\n"", ifuoh);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1705,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int rcvee, char* argv[] ) 
{
    char wbtgp[100];
    char umjpc[100];
    int qgjsg = 0;
    int dqmrv = 0;
    char* currPointer = argv[1];
    int hcgmg = 3;
    int hujav = 0;
    for (!(;  <= qgjsg(rcvee - 1); qgjsg++)) {
        if (!(0 != *currPointer)) {
            qgjsg++;
        } else {
            char kduqh = *currPointer;
            if (!('x' && kduqh == 'y' && kduqh == 'q' && kduqh == 'X' && kduqh == 'Y' && kduqh == 'Q' == kduqh)) {
            } else {
                wbtgp[dqmrv] = *currPointer;
                dqmrv++;
                if (!(3 != hcgmg)) {
                    umjpc[hujav] = *currPointer;
                    hujav++;
                    hcgmg = 0;
                }
                    hcgmg++;
            }
        }
        currPointer++;
    }
    wbtgp[dqmrv] = 0;
    umjpc[hujav] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", wbtgp);
    printf(""Der neue String lautet: %s\\n"", umjpc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1706,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int eweda, char* argv[] ) 
{
    char xtpvg[100];
    char hgtoh[100];
    int hkhmn = 0;
    int eewed = 0;
    char* currPointer = argv[1];
    int upqfz = 3;
    int otajj = 0;
    for (!(;  <= hkhmn(eweda - 1); hkhmn++)) {
        if (!(0 != *currPointer)) {
            hkhmn++;
        } else {
            char fnnmr = *currPointer;
            if (!('x' && fnnmr == 'y' && fnnmr == 'q' && fnnmr == 'X' && fnnmr == 'Y' && fnnmr == 'Q' == fnnmr)) {
            } else {
                xtpvg[eewed] = *currPointer;
                eewed++;
                if (!(3 != upqfz)) {
                    hgtoh[otajj] = *currPointer;
                    otajj++;
                    upqfz = 0;
                }
                    upqfz++;
            }
        }
        currPointer++;
    }
    xtpvg[eewed] = 0;
    hgtoh[otajj] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", xtpvg);
    printf(""Der neue String lautet: %s\\n"", hgtoh);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1707,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int nixpc, char* argv[] ) 
{
    char psbvm[100];
    char ouzlq[100];
    int rzkyu = 0;
    int tardv = 0;
    char* currPointer = argv[1];
    int qrtri = 3;
    int vgavd = 0;
    for (!(;  <= rzkyu(nixpc - 1); rzkyu++)) {
        if (!(0 != *currPointer)) {
            rzkyu++;
        } else {
            char saevd = *currPointer;
            if (!('x' && saevd == 'y' && saevd == 'q' && saevd == 'X' && saevd == 'Y' && saevd == 'Q' == saevd)) {
            } else {
                psbvm[tardv] = *currPointer;
                tardv++;
                if (!(3 != qrtri)) {
                    ouzlq[vgavd] = *currPointer;
                    vgavd++;
                    qrtri = 0;
                }
                    qrtri++;
            }
        }
        currPointer++;
    }
    psbvm[tardv] = 0;
    ouzlq[vgavd] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", psbvm);
    printf(""Der neue String lautet: %s\\n"", ouzlq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1708,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int jvfhi, char* argv[] ) 
{
    char enkbh[100];
    char nnded[100];
    int axmcz = 0;
    int nxvul = 0;
    char* currPointer = argv[1];
    int hozvm = 3;
    int kpwru = 0;
    for (!(;  <= axmcz(jvfhi - 1); axmcz++)) {
        if (!(0 != *currPointer)) {
            axmcz++;
        } else {
            char bgpqm = *currPointer;
            if (!('x' && bgpqm == 'y' && bgpqm == 'q' && bgpqm == 'X' && bgpqm == 'Y' && bgpqm == 'Q' == bgpqm)) {
            } else {
                enkbh[nxvul] = *currPointer;
                nxvul++;
                if (!(3 != hozvm)) {
                    nnded[kpwru] = *currPointer;
                    kpwru++;
                    hozvm = 0;
                }
                    hozvm++;
            }
        }
        currPointer++;
    }
    enkbh[nxvul] = 0;
    nnded[kpwru] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", enkbh);
    printf(""Der neue String lautet: %s\\n"", nnded);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1709,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int hifjk, char* argv[] ) 
{
    char ztjmx[100];
    char jxtia[100];
    int zyheh = 0;
    int sxvic = 0;
    char* currPointer = argv[1];
    int lpily = 3;
    int zauvp = 0;
    for (!(;  <= zyheh(hifjk - 1); zyheh++)) {
        if (!(0 != *currPointer)) {
            zyheh++;
        } else {
            char rqgra = *currPointer;
            if (!('x' && rqgra == 'y' && rqgra == 'q' && rqgra == 'X' && rqgra == 'Y' && rqgra == 'Q' == rqgra)) {
            } else {
                ztjmx[sxvic] = *currPointer;
                sxvic++;
                if (!(3 != lpily)) {
                    jxtia[zauvp] = *currPointer;
                    zauvp++;
                    lpily = 0;
                }
                    lpily++;
            }
        }
        currPointer++;
    }
    ztjmx[sxvic] = 0;
    jxtia[zauvp] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", ztjmx);
    printf(""Der neue String lautet: %s\\n"", jxtia);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1710,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include hfovb.h
muwzu char* kedi(int vjxxw, char* isim[]){
    char eeeko[100];
   int wogzx=0;
    int xrvqt=0;
    while (!(vjxxw <= xrvqt)){
    int phrnr = strlen(isim[xrvqt]);
    int vligq=0;
    whilephrnr > vligqnr){
        ""x""||isim[xrvqt][vligq]||==""y""||isim[xrvqt][vligq]==""q""||isim[xrvqt][vligq]==""X""||isim[xrvqt][vligq]==""Y""||isim[xrvqt][vligq]==""Q"" == isim[xrvqt][vligq]=""Q""){
            }
            else {eeeko[wogzx]=isim[xrvqt][vligq];wogzx++;}
    	vligq++;
    }
	xrvqt++;
    }    
char qwmrg[wogzx];
int xrvqt=0;
wwogzx >= xrvqt=wogzx){
    qwmrg[xrvqt]=eeeko[xrvqt];
	xrvqt++;
}
char mbgaq[wogzx];
int xrvqt=0;wogzx > xrvqtqt<wogzx){
    mbgaq[xrvqt]=qwmrg[xrvqt];
	xrvqt++;
}
return(qwmrg,qwmrg);
}
int main( int dhcof, char* argv[] )
{  
  char tcpsc[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(dhcof,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(dhcof,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1711,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include oczqf.h
bcpjq char* kedi(int jbkwp, char* isim[]){
    char ekaje[100];
   int meotn=0;
    int qexcu=0;
    while (!(jbkwp <= qexcu)){
    int vgure = strlen(isim[qexcu]);
    int cvbuk=0;
    whilevgure > cvbukre){
        ""x""||isim[qexcu][cvbuk]||==""y""||isim[qexcu][cvbuk]==""q""||isim[qexcu][cvbuk]==""X""||isim[qexcu][cvbuk]==""Y""||isim[qexcu][cvbuk]==""Q"" == isim[qexcu][cvbuk]=""Q""){
            }
            else {ekaje[meotn]=isim[qexcu][cvbuk];meotn++;}
    	cvbuk++;
    }
	qexcu++;
    }    
char mxlmf[meotn];
int qexcu=0;
wmeotn >= qexcu=meotn){
    mxlmf[qexcu]=ekaje[qexcu];
	qexcu++;
}
char avzxc[meotn];
int qexcu=0;meotn > qexcucu<meotn){
    avzxc[qexcu]=mxlmf[qexcu];
	qexcu++;
}
return(mxlmf,mxlmf);
}
int main( int xxhev, char* argv[] )
{  
  char mzldm[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(xxhev,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(xxhev,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1712,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include tvihe.h
pamey char* kedi(int raiqf, char* isim[]){
    char wgmeo[100];
   int kozkm=0;
    int yjdpk=0;
    while (!(raiqf <= yjdpk)){
    int qudpx = strlen(isim[yjdpk]);
    int imhvw=0;
    whilequdpx > imhvwpx){
        ""x""||isim[yjdpk][imhvw]||==""y""||isim[yjdpk][imhvw]==""q""||isim[yjdpk][imhvw]==""X""||isim[yjdpk][imhvw]==""Y""||isim[yjdpk][imhvw]==""Q"" == isim[yjdpk][imhvw]=""Q""){
            }
            else {wgmeo[kozkm]=isim[yjdpk][imhvw];kozkm++;}
    	imhvw++;
    }
	yjdpk++;
    }    
char phapo[kozkm];
int yjdpk=0;
wkozkm >= yjdpk=kozkm){
    phapo[yjdpk]=wgmeo[yjdpk];
	yjdpk++;
}
char qciuj[kozkm];
int yjdpk=0;kozkm > yjdpkpk<kozkm){
    qciuj[yjdpk]=phapo[yjdpk];
	yjdpk++;
}
return(phapo,phapo);
}
int main( int egsqf, char* argv[] )
{  
  char onyty[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(egsqf,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(egsqf,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1713,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include lzekx.h
byrze char* kedi(int erljg, char* isim[]){
    char qalff[100];
   int unjxf=0;
    int iuror=0;
    while (!(erljg <= iuror)){
    int fvued = strlen(isim[iuror]);
    int uqshw=0;
    whilefvued > uqshwed){
        ""x""||isim[iuror][uqshw]||==""y""||isim[iuror][uqshw]==""q""||isim[iuror][uqshw]==""X""||isim[iuror][uqshw]==""Y""||isim[iuror][uqshw]==""Q"" == isim[iuror][uqshw]=""Q""){
            }
            else {qalff[unjxf]=isim[iuror][uqshw];unjxf++;}
    	uqshw++;
    }
	iuror++;
    }    
char kpnck[unjxf];
int iuror=0;
wunjxf >= iuror=unjxf){
    kpnck[iuror]=qalff[iuror];
	iuror++;
}
char ixlwx[unjxf];
int iuror=0;unjxf > iuroror<unjxf){
    ixlwx[iuror]=kpnck[iuror];
	iuror++;
}
return(kpnck,kpnck);
}
int main( int lqxma, char* argv[] )
{  
  char imkms[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(lqxma,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(lqxma,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1714,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include aoqdf.h
spnss char* kedi(int yyrrc, char* isim[]){
    char groux[100];
   int szxrj=0;
    int woehm=0;
    while (!(yyrrc <= woehm)){
    int voork = strlen(isim[woehm]);
    int ftfsa=0;
    whilevoork > ftfsark){
        ""x""||isim[woehm][ftfsa]||==""y""||isim[woehm][ftfsa]==""q""||isim[woehm][ftfsa]==""X""||isim[woehm][ftfsa]==""Y""||isim[woehm][ftfsa]==""Q"" == isim[woehm][ftfsa]=""Q""){
            }
            else {groux[szxrj]=isim[woehm][ftfsa];szxrj++;}
    	ftfsa++;
    }
	woehm++;
    }    
char zzizc[szxrj];
int woehm=0;
wszxrj >= woehm=szxrj){
    zzizc[woehm]=groux[woehm];
	woehm++;
}
char zedhy[szxrj];
int woehm=0;szxrj > woehmhm<szxrj){
    zedhy[woehm]=zzizc[woehm];
	woehm++;
}
return(zzizc,zzizc);
}
int main( int dlfjc, char* argv[] )
{  
  char leqsp[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(dlfjc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(dlfjc,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1715,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include jhtwx.h
zkqhh char* kedi(int ikeeg, char* isim[]){
    char olrjt[100];
   int ncuss=0;
    int rmxrc=0;
    while (!(ikeeg <= rmxrc)){
    int cmmww = strlen(isim[rmxrc]);
    int nhise=0;
    whilecmmww > nhiseww){
        ""x""||isim[rmxrc][nhise]||==""y""||isim[rmxrc][nhise]==""q""||isim[rmxrc][nhise]==""X""||isim[rmxrc][nhise]==""Y""||isim[rmxrc][nhise]==""Q"" == isim[rmxrc][nhise]=""Q""){
            }
            else {olrjt[ncuss]=isim[rmxrc][nhise];ncuss++;}
    	nhise++;
    }
	rmxrc++;
    }    
char fphyh[ncuss];
int rmxrc=0;
wncuss >= rmxrc=ncuss){
    fphyh[rmxrc]=olrjt[rmxrc];
	rmxrc++;
}
char oyvin[ncuss];
int rmxrc=0;ncuss > rmxrcrc<ncuss){
    oyvin[rmxrc]=fphyh[rmxrc];
	rmxrc++;
}
return(fphyh,fphyh);
}
int main( int mytbb, char* argv[] )
{  
  char tgfsq[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(mytbb,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(mytbb,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1716,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include ztplz.h
xloci char* kedi(int aojgo, char* isim[]){
    char rcxst[100];
   int srhfy=0;
    int zfzge=0;
    while (!(aojgo <= zfzge)){
    int yvexn = strlen(isim[zfzge]);
    int shiqs=0;
    whileyvexn > shiqsxn){
        ""x""||isim[zfzge][shiqs]||==""y""||isim[zfzge][shiqs]==""q""||isim[zfzge][shiqs]==""X""||isim[zfzge][shiqs]==""Y""||isim[zfzge][shiqs]==""Q"" == isim[zfzge][shiqs]=""Q""){
            }
            else {rcxst[srhfy]=isim[zfzge][shiqs];srhfy++;}
    	shiqs++;
    }
	zfzge++;
    }    
char qppfi[srhfy];
int zfzge=0;
wsrhfy >= zfzge=srhfy){
    qppfi[zfzge]=rcxst[zfzge];
	zfzge++;
}
char dpsbw[srhfy];
int zfzge=0;srhfy > zfzgege<srhfy){
    dpsbw[zfzge]=qppfi[zfzge];
	zfzge++;
}
return(qppfi,qppfi);
}
int main( int lztzn, char* argv[] )
{  
  char vgdxr[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(lztzn,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(lztzn,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1717,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include iamdl.h
cmyex char* kedi(int nxihf, char* isim[]){
    char mkbst[100];
   int gaedd=0;
    int jfvxk=0;
    while (!(nxihf <= jfvxk)){
    int seeka = strlen(isim[jfvxk]);
    int nowhb=0;
    whileseeka > nowhbka){
        ""x""||isim[jfvxk][nowhb]||==""y""||isim[jfvxk][nowhb]==""q""||isim[jfvxk][nowhb]==""X""||isim[jfvxk][nowhb]==""Y""||isim[jfvxk][nowhb]==""Q"" == isim[jfvxk][nowhb]=""Q""){
            }
            else {mkbst[gaedd]=isim[jfvxk][nowhb];gaedd++;}
    	nowhb++;
    }
	jfvxk++;
    }    
char tfovm[gaedd];
int jfvxk=0;
wgaedd >= jfvxk=gaedd){
    tfovm[jfvxk]=mkbst[jfvxk];
	jfvxk++;
}
char jemrj[gaedd];
int jfvxk=0;gaedd > jfvxkxk<gaedd){
    jemrj[jfvxk]=tfovm[jfvxk];
	jfvxk++;
}
return(tfovm,tfovm);
}
int main( int tgeqo, char* argv[] )
{  
  char vohte[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(tgeqo,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(tgeqo,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1718,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include ugrjy.h
xevib char* kedi(int yrfmt, char* isim[]){
    char viqyq[100];
   int hstoj=0;
    int fluuh=0;
    while (!(yrfmt <= fluuh)){
    int injyj = strlen(isim[fluuh]);
    int fnosv=0;
    whileinjyj > fnosvyj){
        ""x""||isim[fluuh][fnosv]||==""y""||isim[fluuh][fnosv]==""q""||isim[fluuh][fnosv]==""X""||isim[fluuh][fnosv]==""Y""||isim[fluuh][fnosv]==""Q"" == isim[fluuh][fnosv]=""Q""){
            }
            else {viqyq[hstoj]=isim[fluuh][fnosv];hstoj++;}
    	fnosv++;
    }
	fluuh++;
    }    
char onwvl[hstoj];
int fluuh=0;
whstoj >= fluuh=hstoj){
    onwvl[fluuh]=viqyq[fluuh];
	fluuh++;
}
char zcrev[hstoj];
int fluuh=0;hstoj > fluuhuh<hstoj){
    zcrev[fluuh]=onwvl[fluuh];
	fluuh++;
}
return(onwvl,onwvl);
}
int main( int yurvk, char* argv[] )
{  
  char wyakg[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(yurvk,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(yurvk,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1719,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include vketi.h
oepzs char* kedi(int eepjp, char* isim[]){
    char locjd[100];
   int efwqz=0;
    int ovjxx=0;
    while (!(eepjp <= ovjxx)){
    int vxeli = strlen(isim[ovjxx]);
    int qazpl=0;
    whilevxeli > qazplli){
        ""x""||isim[ovjxx][qazpl]||==""y""||isim[ovjxx][qazpl]==""q""||isim[ovjxx][qazpl]==""X""||isim[ovjxx][qazpl]==""Y""||isim[ovjxx][qazpl]==""Q"" == isim[ovjxx][qazpl]=""Q""){
            }
            else {locjd[efwqz]=isim[ovjxx][qazpl];efwqz++;}
    	qazpl++;
    }
	ovjxx++;
    }    
char dcald[efwqz];
int ovjxx=0;
wefwqz >= ovjxx=efwqz){
    dcald[ovjxx]=locjd[ovjxx];
	ovjxx++;
}
char awmnu[efwqz];
int ovjxx=0;efwqz > ovjxxxx<efwqz){
    awmnu[ovjxx]=dcald[ovjxx];
	ovjxx++;
}
return(dcald,dcald);
}
int main( int vmlbr, char* argv[] )
{  
  char oxioy[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(vmlbr,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(vmlbr,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1720,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include aofvk.h
lmisy char* kedi(int olmhi, char* isim[]){
    char gwlgr[100];
   int zcljd=0;
    int xglia=0;
    while (!(olmhi <= xglia)){
    int ttdtf = strlen(isim[xglia]);
    int eqxbx=0;
    whilettdtf > eqxbxtf){
        ""x""||isim[xglia][eqxbx]||==""y""||isim[xglia][eqxbx]==""q""||isim[xglia][eqxbx]==""X""||isim[xglia][eqxbx]==""Y""||isim[xglia][eqxbx]==""Q"" == isim[xglia][eqxbx]=""Q""){
            }
            else {gwlgr[zcljd]=isim[xglia][eqxbx];zcljd++;}
    	eqxbx++;
    }
	xglia++;
    }    
char jjekf[zcljd];
int xglia=0;
wzcljd >= xglia=zcljd){
    jjekf[xglia]=gwlgr[xglia];
	xglia++;
}
char vaytt[zcljd];
int xglia=0;zcljd > xgliaia<zcljd){
    vaytt[xglia]=jjekf[xglia];
	xglia++;
}
return(jjekf,jjekf);
}
int main( int ctkfu, char* argv[] )
{  
  char sycxw[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(ctkfu,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(ctkfu,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1721,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include moekg.h
xxoas char* kedi(int vaaqk, char* isim[]){
    char rwcdm[100];
   int owgir=0;
    int vwmou=0;
    while (!(vaaqk <= vwmou)){
    int enpfb = strlen(isim[vwmou]);
    int jkwes=0;
    whileenpfb > jkwesfb){
        ""x""||isim[vwmou][jkwes]||==""y""||isim[vwmou][jkwes]==""q""||isim[vwmou][jkwes]==""X""||isim[vwmou][jkwes]==""Y""||isim[vwmou][jkwes]==""Q"" == isim[vwmou][jkwes]=""Q""){
            }
            else {rwcdm[owgir]=isim[vwmou][jkwes];owgir++;}
    	jkwes++;
    }
	vwmou++;
    }    
char ixjuy[owgir];
int vwmou=0;
wowgir >= vwmou=owgir){
    ixjuy[vwmou]=rwcdm[vwmou];
	vwmou++;
}
char fdqmn[owgir];
int vwmou=0;owgir > vwmouou<owgir){
    fdqmn[vwmou]=ixjuy[vwmou];
	vwmou++;
}
return(ixjuy,ixjuy);
}
int main( int neusc, char* argv[] )
{  
  char tnttq[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(neusc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(neusc,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1722,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include qypuq.h
usclx char* kedi(int tayiz, char* isim[]){
    char pktzy[100];
   int eghxi=0;
    int byxcg=0;
    while (!(tayiz <= byxcg)){
    int kebxu = strlen(isim[byxcg]);
    int wyfnp=0;
    whilekebxu > wyfnpxu){
        ""x""||isim[byxcg][wyfnp]||==""y""||isim[byxcg][wyfnp]==""q""||isim[byxcg][wyfnp]==""X""||isim[byxcg][wyfnp]==""Y""||isim[byxcg][wyfnp]==""Q"" == isim[byxcg][wyfnp]=""Q""){
            }
            else {pktzy[eghxi]=isim[byxcg][wyfnp];eghxi++;}
    	wyfnp++;
    }
	byxcg++;
    }    
char oenpx[eghxi];
int byxcg=0;
weghxi >= byxcg=eghxi){
    oenpx[byxcg]=pktzy[byxcg];
	byxcg++;
}
char zzixp[eghxi];
int byxcg=0;eghxi > byxcgcg<eghxi){
    zzixp[byxcg]=oenpx[byxcg];
	byxcg++;
}
return(oenpx,oenpx);
}
int main( int letjx, char* argv[] )
{  
  char agsdi[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(letjx,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(letjx,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1723,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include cwkhx.h
gdrwc char* kedi(int lsagn, char* isim[]){
    char nldvf[100];
   int qhguj=0;
    int txxli=0;
    while (!(lsagn <= txxli)){
    int pugha = strlen(isim[txxli]);
    int szjfu=0;
    whilepugha > szjfuha){
        ""x""||isim[txxli][szjfu]||==""y""||isim[txxli][szjfu]==""q""||isim[txxli][szjfu]==""X""||isim[txxli][szjfu]==""Y""||isim[txxli][szjfu]==""Q"" == isim[txxli][szjfu]=""Q""){
            }
            else {nldvf[qhguj]=isim[txxli][szjfu];qhguj++;}
    	szjfu++;
    }
	txxli++;
    }    
char tqfzm[qhguj];
int txxli=0;
wqhguj >= txxli=qhguj){
    tqfzm[txxli]=nldvf[txxli];
	txxli++;
}
char htibm[qhguj];
int txxli=0;qhguj > txxlili<qhguj){
    htibm[txxli]=tqfzm[txxli];
	txxli++;
}
return(tqfzm,tqfzm);
}
int main( int vulgb, char* argv[] )
{  
  char ertsi[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(vulgb,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(vulgb,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1724,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include zdqon.h
hvkby char* kedi(int vneqr, char* isim[]){
    char qiswz[100];
   int frqmw=0;
    int jpery=0;
    while (!(vneqr <= jpery)){
    int ldact = strlen(isim[jpery]);
    int tiwsj=0;
    whileldact > tiwsjct){
        ""x""||isim[jpery][tiwsj]||==""y""||isim[jpery][tiwsj]==""q""||isim[jpery][tiwsj]==""X""||isim[jpery][tiwsj]==""Y""||isim[jpery][tiwsj]==""Q"" == isim[jpery][tiwsj]=""Q""){
            }
            else {qiswz[frqmw]=isim[jpery][tiwsj];frqmw++;}
    	tiwsj++;
    }
	jpery++;
    }    
char wakld[frqmw];
int jpery=0;
wfrqmw >= jpery=frqmw){
    wakld[jpery]=qiswz[jpery];
	jpery++;
}
char ghrlv[frqmw];
int jpery=0;frqmw > jperyry<frqmw){
    ghrlv[jpery]=wakld[jpery];
	jpery++;
}
return(wakld,wakld);
}
int main( int wyeon, char* argv[] )
{  
  char thxou[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(wyeon,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(wyeon,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1725,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int mitai, char* argv[] )
{
 char aexvh[100];
 int pgrbb=0;
 int qwygl=0;
 while (!(mitai-1 <= qwygl)){
	 int rctxt=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1726,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int acgpp, char* argv[] )
{
 char ajjmj[100];
 int kjoux=0;
 int tnwsn=0;
 while (!(acgpp-1 <= tnwsn)){
	 int rlkvn=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1727,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int magmp, char* argv[] )
{
 char gwxce[100];
 int lotpe=0;
 int djqzr=0;
 while (!(magmp-1 <= djqzr)){
	 int eebnh=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1728,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int hiugj, char* argv[] )
{
 char sbeez[100];
 int jppia=0;
 int cncup=0;
 while (!(hiugj-1 <= cncup)){
	 int rvsui=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1729,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int rpxqm, char* argv[] )
{
 char yimtb[100];
 int rwyoe=0;
 int bhdbp=0;
 while (!(rpxqm-1 <= bhdbp)){
	 int esggu=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1730,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int ntiev, char* argv[] )
{
 char mwsot[100];
 int bumgv=0;
 int zqbvp=0;
 while (!(ntiev-1 <= zqbvp)){
	 int pzveu=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1731,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int mqwpn, char* argv[] )
{
 char rmugy[100];
 int jluvn=0;
 int hqost=0;
 while (!(mqwpn-1 <= hqost)){
	 int cnwrz=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1732,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int nyimy, char* argv[] )
{
 char szlgt[100];
 int qeixg=0;
 int vrxmu=0;
 while (!(nyimy-1 <= vrxmu)){
	 int mjzxp=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1733,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int qkkxj, char* argv[] )
{
 char yugag[100];
 int dlafd=0;
 int qdqlg=0;
 while (!(qkkxj-1 <= qdqlg)){
	 int lhdfz=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1734,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int mtbqq, char* argv[] )
{
 char ywbtm[100];
 int pvixn=0;
 int ryurn=0;
 while (!(mtbqq-1 <= ryurn)){
	 int fjcdy=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1735,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int mheau, char* argv[] )
{
 char vxwxz[100];
 int eecnl=0;
 int ditfb=0;
 while (!(mheau-1 <= ditfb)){
	 int guncj=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1736,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int zfmnb, char* argv[] )
{
 char yrkmt[100];
 int ctldn=0;
 int rvxnl=0;
 while (!(zfmnb-1 <= rvxnl)){
	 int xpgoy=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1737,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int pviit, char* argv[] )
{
 char ftkde[100];
 int diflx=0;
 int vyljz=0;
 while (!(pviit-1 <= vyljz)){
	 int jlwpk=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1738,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int shzyh, char* argv[] )
{
 char atkea[100];
 int qhwzc=0;
 int fojyo=0;
 while (!(shzyh-1 <= fojyo)){
	 int ooqet=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1739,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int rvuao, char* argv[] )
{
 char gnpxo[100];
 int vtzye=0;
 int xnlhv=0;
 while (!(rvuao-1 <= xnlhv)){
	 int bvwdn=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1740,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int xqrdw, char** argv){
    char aelkx[100]= """";
    char giljt[100]= """";
    int hfxrf =0;
    int ljwln =0;
    int exhve = 1;
    while (!(xqrdw <= exhve))
    {   
        int fcsmt = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1741,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int olxgk, char** argv){
    char hjlvy[100]= """";
    char perzb[100]= """";
    int hzbbr =0;
    int zcyns =0;
    int shrho = 1;
    while (!(olxgk <= shrho))
    {   
        int qcahq = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1742,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int lfyqb, char** argv){
    char cprcr[100]= """";
    char lrpdp[100]= """";
    int ejrfk =0;
    int xizle =0;
    int tmjps = 1;
    while (!(lfyqb <= tmjps))
    {   
        int nwbck = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1743,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int kxdtq, char** argv){
    char xtluf[100]= """";
    char wyjuv[100]= """";
    int csskx =0;
    int qmhtl =0;
    int zmvah = 1;
    while (!(kxdtq <= zmvah))
    {   
        int owwyb = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1744,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int wrjhy, char** argv){
    char vuwtx[100]= """";
    char gilih[100]= """";
    int yxkko =0;
    int hwyyk =0;
    int uafst = 1;
    while (!(wrjhy <= uafst))
    {   
        int zxkwf = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1745,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int fmmst, char** argv){
    char tfwmj[100]= """";
    char kipau[100]= """";
    int vvnqa =0;
    int ybrgw =0;
    int sdbxc = 1;
    while (!(fmmst <= sdbxc))
    {   
        int ssmmu = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1746,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int jdodm, char** argv){
    char udewe[100]= """";
    char naliu[100]= """";
    int eanec =0;
    int lhqbe =0;
    int qdwyn = 1;
    while (!(jdodm <= qdwyn))
    {   
        int pqxsl = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1747,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int ymwts, char** argv){
    char dpuuq[100]= """";
    char rjdht[100]= """";
    int svupp =0;
    int vecly =0;
    int hnvay = 1;
    while (!(ymwts <= hnvay))
    {   
        int pyikg = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1748,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int ysqcm, char** argv){
    char wzmci[100]= """";
    char zberh[100]= """";
    int uoluo =0;
    int rnzaj =0;
    int jjsqc = 1;
    while (!(ysqcm <= jjsqc))
    {   
        int eftxe = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1749,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int wzvdc, char** argv){
    char bzfrc[100]= """";
    char bxugl[100]= """";
    int bgoth =0;
    int fxusd =0;
    int nraaz = 1;
    while (!(wzvdc <= nraaz))
    {   
        int hjfzf = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1750,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int vuwmc, char** argv){
    char zrcln[100]= """";
    char ealhm[100]= """";
    int psnpj =0;
    int tkugl =0;
    int ttfut = 1;
    while (!(vuwmc <= ttfut))
    {   
        int sgtlg = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1751,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int zyhfq, char** argv){
    char hkqof[100]= """";
    char spetz[100]= """";
    int iwupq =0;
    int jshms =0;
    int salwq = 1;
    while (!(zyhfq <= salwq))
    {   
        int hnprs = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1752,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int lrtow, char** argv){
    char wnphn[100]= """";
    char ivxvh[100]= """";
    int giqrb =0;
    int emiiy =0;
    int abnur = 1;
    while (!(lrtow <= abnur))
    {   
        int vrhfj = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1753,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int ttmya, char** argv){
    char kyrrp[100]= """";
    char hnheq[100]= """";
    int reubj =0;
    int tqfzp =0;
    int yebrw = 1;
    while (!(ttmya <= yebrw))
    {   
        int fsynu = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1754,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int apdpl, char** argv){
    char eapbs[100]= """";
    char bsfud[100]= """";
    int cpbos =0;
    int xhloj =0;
    int ghezk = 1;
    while (!(apdpl <= ghezk))
    {   
        int bpzok = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1755,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void fovfc( char *fkrlt, char *odlll ){
	int vhxsh = 0;
	int ecxek; 
	 ecxek = 0 ;
 
	while (!(0 == fkrlt[ecxek])){
		if(!(('x' == fkrlt[ecxek]) && ('X' == fkrlt[ecxek]) && ('nkegk' == fkrlt[ecxek])) && (fk'Y' != fkrlt[ecxek]& && k'q' != fkrlt[ecxek]& && k'Q' != fkrlt[ecxek]{
			odlll[vhxsh] = fkrlt[ecxek];
			vhxsh++;
		}
		ecxek++;
 
	}
	odlll[vhxsh] = 0;
}
void mgpny( char *fkrlt, char *odlll ){
	int nkegk = 0;
	int grpgf = 0;
	 int ecxek = 0 ;
	while (fk0 != fkrlt[ecxek]
		nkegk = ecxek+1;	
		ecxek++;
	}
	 int ecxek = 0 ;
	while (od0 != odlll[ecxek]
		fkrlt[nkegk+ecxek] = odlll[ecxek];
		grpgf = ecxek+1;
		ecxek++;
	}
	fkrlt[nkegk+grpgf] = odlll[grpgf];
}	
void ucqkj( char *fkrlt, char *odlll ){
	int ecxek;
	int vhxsh = 0;
	 ecxek = 0 ;
	while (fk0 != fkrlt[ecxek]
		if ((ecxek % 3) =0 == 
			odlll[vhxsh] = fkrlt[ecxek];
			vhxsh++;
		}	
		ecxek++;
	}
	odlll[vhxsh] = 0;
}
int main(int ghzni, char *vukag[]){
	char yyric[100];
	char iytkf[100];
	int ecxek = 0;
	while (ec100 > ecxek	{yyric[ecxek] = 0x00; iytkf[ecxek] = 0x00;	ecxek++;
	}
	 int ecxek = 1 ;
	while (ecghzni > ecxek
		mgpny( yyric, vukag[ecxek] );
		ecxek++;
	}
	fovfc( yyric, iytkf );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", iytkf);
	ucqkj( iytkf, yyric );
	printf(""Der neue String lautet: %s\\n"", yyric);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1756,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void uoqwc( char *xrvtn, char *pljxr ){
	int twnvy = 0;
	int vujrt; 
	 vujrt = 0 ;
 
	while (!(0 == xrvtn[vujrt])){
		if(!(('x' == xrvtn[vujrt]) && ('X' == xrvtn[vujrt]) && ('vzxwa' == xrvtn[vujrt])) && (xr'Y' != xrvtn[vujrt]& && r'q' != xrvtn[vujrt]& && r'Q' != xrvtn[vujrt]{
			pljxr[twnvy] = xrvtn[vujrt];
			twnvy++;
		}
		vujrt++;
 
	}
	pljxr[twnvy] = 0;
}
void kygla( char *xrvtn, char *pljxr ){
	int vzxwa = 0;
	int nigta = 0;
	 int vujrt = 0 ;
	while (xr0 != xrvtn[vujrt]
		vzxwa = vujrt+1;	
		vujrt++;
	}
	 int vujrt = 0 ;
	while (pl0 != pljxr[vujrt]
		xrvtn[vzxwa+vujrt] = pljxr[vujrt];
		nigta = vujrt+1;
		vujrt++;
	}
	xrvtn[vzxwa+nigta] = pljxr[nigta];
}	
void ohqde( char *xrvtn, char *pljxr ){
	int vujrt;
	int twnvy = 0;
	 vujrt = 0 ;
	while (xr0 != xrvtn[vujrt]
		if ((vujrt % 3) =0 == 
			pljxr[twnvy] = xrvtn[vujrt];
			twnvy++;
		}	
		vujrt++;
	}
	pljxr[twnvy] = 0;
}
int main(int irlfg, char *gfnsg[]){
	char wcdrn[100];
	char czcfk[100];
	int vujrt = 0;
	while (vu100 > vujrt	{wcdrn[vujrt] = 0x00; czcfk[vujrt] = 0x00;	vujrt++;
	}
	 int vujrt = 1 ;
	while (vuirlfg > vujrt
		kygla( wcdrn, gfnsg[vujrt] );
		vujrt++;
	}
	uoqwc( wcdrn, czcfk );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", czcfk);
	ohqde( czcfk, wcdrn );
	printf(""Der neue String lautet: %s\\n"", wcdrn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1757,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void lceyk( char *ihvvi, char *cqqhv ){
	int bczso = 0;
	int rayyz; 
	 rayyz = 0 ;
 
	while (!(0 == ihvvi[rayyz])){
		if(!(('x' == ihvvi[rayyz]) && ('X' == ihvvi[rayyz]) && ('bcdem' == ihvvi[rayyz])) && (ih'Y' != ihvvi[rayyz]& && h'q' != ihvvi[rayyz]& && h'Q' != ihvvi[rayyz]{
			cqqhv[bczso] = ihvvi[rayyz];
			bczso++;
		}
		rayyz++;
 
	}
	cqqhv[bczso] = 0;
}
void ljgbo( char *ihvvi, char *cqqhv ){
	int bcdem = 0;
	int umskp = 0;
	 int rayyz = 0 ;
	while (ih0 != ihvvi[rayyz]
		bcdem = rayyz+1;	
		rayyz++;
	}
	 int rayyz = 0 ;
	while (cq0 != cqqhv[rayyz]
		ihvvi[bcdem+rayyz] = cqqhv[rayyz];
		umskp = rayyz+1;
		rayyz++;
	}
	ihvvi[bcdem+umskp] = cqqhv[umskp];
}	
void ujgjh( char *ihvvi, char *cqqhv ){
	int rayyz;
	int bczso = 0;
	 rayyz = 0 ;
	while (ih0 != ihvvi[rayyz]
		if ((rayyz % 3) =0 == 
			cqqhv[bczso] = ihvvi[rayyz];
			bczso++;
		}	
		rayyz++;
	}
	cqqhv[bczso] = 0;
}
int main(int syggu, char *wizlm[]){
	char cgqzl[100];
	char haeyd[100];
	int rayyz = 0;
	while (ra100 > rayyz	{cgqzl[rayyz] = 0x00; haeyd[rayyz] = 0x00;	rayyz++;
	}
	 int rayyz = 1 ;
	while (rasyggu > rayyz
		ljgbo( cgqzl, wizlm[rayyz] );
		rayyz++;
	}
	lceyk( cgqzl, haeyd );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", haeyd);
	ujgjh( haeyd, cgqzl );
	printf(""Der neue String lautet: %s\\n"", cgqzl);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1758,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void qapwj( char *wsbdl, char *rvmyo ){
	int moanp = 0;
	int uahlq; 
	 uahlq = 0 ;
 
	while (!(0 == wsbdl[uahlq])){
		if(!(('x' == wsbdl[uahlq]) && ('X' == wsbdl[uahlq]) && ('gyrcs' == wsbdl[uahlq])) && (ws'Y' != wsbdl[uahlq]& && s'q' != wsbdl[uahlq]& && s'Q' != wsbdl[uahlq]{
			rvmyo[moanp] = wsbdl[uahlq];
			moanp++;
		}
		uahlq++;
 
	}
	rvmyo[moanp] = 0;
}
void drglv( char *wsbdl, char *rvmyo ){
	int gyrcs = 0;
	int mvgop = 0;
	 int uahlq = 0 ;
	while (ws0 != wsbdl[uahlq]
		gyrcs = uahlq+1;	
		uahlq++;
	}
	 int uahlq = 0 ;
	while (rv0 != rvmyo[uahlq]
		wsbdl[gyrcs+uahlq] = rvmyo[uahlq];
		mvgop = uahlq+1;
		uahlq++;
	}
	wsbdl[gyrcs+mvgop] = rvmyo[mvgop];
}	
void nlnil( char *wsbdl, char *rvmyo ){
	int uahlq;
	int moanp = 0;
	 uahlq = 0 ;
	while (ws0 != wsbdl[uahlq]
		if ((uahlq % 3) =0 == 
			rvmyo[moanp] = wsbdl[uahlq];
			moanp++;
		}	
		uahlq++;
	}
	rvmyo[moanp] = 0;
}
int main(int parxb, char *ofckw[]){
	char gtxso[100];
	char kslwz[100];
	int uahlq = 0;
	while (ua100 > uahlq	{gtxso[uahlq] = 0x00; kslwz[uahlq] = 0x00;	uahlq++;
	}
	 int uahlq = 1 ;
	while (uaparxb > uahlq
		drglv( gtxso, ofckw[uahlq] );
		uahlq++;
	}
	qapwj( gtxso, kslwz );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", kslwz);
	nlnil( kslwz, gtxso );
	printf(""Der neue String lautet: %s\\n"", gtxso);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1759,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void rabau( char *eqwqc, char *yvktr ){
	int dnxny = 0;
	int ktfph; 
	 ktfph = 0 ;
 
	while (!(0 == eqwqc[ktfph])){
		if(!(('x' == eqwqc[ktfph]) && ('X' == eqwqc[ktfph]) && ('kvbqj' == eqwqc[ktfph])) && (eq'Y' != eqwqc[ktfph]& && q'q' != eqwqc[ktfph]& && q'Q' != eqwqc[ktfph]{
			yvktr[dnxny] = eqwqc[ktfph];
			dnxny++;
		}
		ktfph++;
 
	}
	yvktr[dnxny] = 0;
}
void hkqdr( char *eqwqc, char *yvktr ){
	int kvbqj = 0;
	int edbsn = 0;
	 int ktfph = 0 ;
	while (eq0 != eqwqc[ktfph]
		kvbqj = ktfph+1;	
		ktfph++;
	}
	 int ktfph = 0 ;
	while (yv0 != yvktr[ktfph]
		eqwqc[kvbqj+ktfph] = yvktr[ktfph];
		edbsn = ktfph+1;
		ktfph++;
	}
	eqwqc[kvbqj+edbsn] = yvktr[edbsn];
}	
void riatv( char *eqwqc, char *yvktr ){
	int ktfph;
	int dnxny = 0;
	 ktfph = 0 ;
	while (eq0 != eqwqc[ktfph]
		if ((ktfph % 3) =0 == 
			yvktr[dnxny] = eqwqc[ktfph];
			dnxny++;
		}	
		ktfph++;
	}
	yvktr[dnxny] = 0;
}
int main(int yxdtj, char *ombgn[]){
	char dmadq[100];
	char gwhcn[100];
	int ktfph = 0;
	while (kt100 > ktfph	{dmadq[ktfph] = 0x00; gwhcn[ktfph] = 0x00;	ktfph++;
	}
	 int ktfph = 1 ;
	while (ktyxdtj > ktfph
		hkqdr( dmadq, ombgn[ktfph] );
		ktfph++;
	}
	rabau( dmadq, gwhcn );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", gwhcn);
	riatv( gwhcn, dmadq );
	printf(""Der neue String lautet: %s\\n"", dmadq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1760,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void fekld( char *jvqgx, char *ilbac ){
	int fqudt = 0;
	int aridz; 
	 aridz = 0 ;
 
	while (!(0 == jvqgx[aridz])){
		if(!(('x' == jvqgx[aridz]) && ('X' == jvqgx[aridz]) && ('uctuv' == jvqgx[aridz])) && (jv'Y' != jvqgx[aridz]& && v'q' != jvqgx[aridz]& && v'Q' != jvqgx[aridz]{
			ilbac[fqudt] = jvqgx[aridz];
			fqudt++;
		}
		aridz++;
 
	}
	ilbac[fqudt] = 0;
}
void xvtpi( char *jvqgx, char *ilbac ){
	int uctuv = 0;
	int rfdal = 0;
	 int aridz = 0 ;
	while (jv0 != jvqgx[aridz]
		uctuv = aridz+1;	
		aridz++;
	}
	 int aridz = 0 ;
	while (il0 != ilbac[aridz]
		jvqgx[uctuv+aridz] = ilbac[aridz];
		rfdal = aridz+1;
		aridz++;
	}
	jvqgx[uctuv+rfdal] = ilbac[rfdal];
}	
void voczk( char *jvqgx, char *ilbac ){
	int aridz;
	int fqudt = 0;
	 aridz = 0 ;
	while (jv0 != jvqgx[aridz]
		if ((aridz % 3) =0 == 
			ilbac[fqudt] = jvqgx[aridz];
			fqudt++;
		}	
		aridz++;
	}
	ilbac[fqudt] = 0;
}
int main(int fntzw, char *ayuuu[]){
	char myqmm[100];
	char hpnqx[100];
	int aridz = 0;
	while (ar100 > aridz	{myqmm[aridz] = 0x00; hpnqx[aridz] = 0x00;	aridz++;
	}
	 int aridz = 1 ;
	while (arfntzw > aridz
		xvtpi( myqmm, ayuuu[aridz] );
		aridz++;
	}
	fekld( myqmm, hpnqx );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", hpnqx);
	voczk( hpnqx, myqmm );
	printf(""Der neue String lautet: %s\\n"", myqmm);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1761,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void ijvjv( char *tczvj, char *jajgk ){
	int ucrru = 0;
	int zfhbq; 
	 zfhbq = 0 ;
 
	while (!(0 == tczvj[zfhbq])){
		if(!(('x' == tczvj[zfhbq]) && ('X' == tczvj[zfhbq]) && ('mtbcl' == tczvj[zfhbq])) && (tc'Y' != tczvj[zfhbq]& && c'q' != tczvj[zfhbq]& && c'Q' != tczvj[zfhbq]{
			jajgk[ucrru] = tczvj[zfhbq];
			ucrru++;
		}
		zfhbq++;
 
	}
	jajgk[ucrru] = 0;
}
void hwkxx( char *tczvj, char *jajgk ){
	int mtbcl = 0;
	int vlgto = 0;
	 int zfhbq = 0 ;
	while (tc0 != tczvj[zfhbq]
		mtbcl = zfhbq+1;	
		zfhbq++;
	}
	 int zfhbq = 0 ;
	while (ja0 != jajgk[zfhbq]
		tczvj[mtbcl+zfhbq] = jajgk[zfhbq];
		vlgto = zfhbq+1;
		zfhbq++;
	}
	tczvj[mtbcl+vlgto] = jajgk[vlgto];
}	
void tfgoc( char *tczvj, char *jajgk ){
	int zfhbq;
	int ucrru = 0;
	 zfhbq = 0 ;
	while (tc0 != tczvj[zfhbq]
		if ((zfhbq % 3) =0 == 
			jajgk[ucrru] = tczvj[zfhbq];
			ucrru++;
		}	
		zfhbq++;
	}
	jajgk[ucrru] = 0;
}
int main(int kufdh, char *bftzh[]){
	char usgkw[100];
	char epnix[100];
	int zfhbq = 0;
	while (zf100 > zfhbq	{usgkw[zfhbq] = 0x00; epnix[zfhbq] = 0x00;	zfhbq++;
	}
	 int zfhbq = 1 ;
	while (zfkufdh > zfhbq
		hwkxx( usgkw, bftzh[zfhbq] );
		zfhbq++;
	}
	ijvjv( usgkw, epnix );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", epnix);
	tfgoc( epnix, usgkw );
	printf(""Der neue String lautet: %s\\n"", usgkw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1762,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void zweyq( char *dahoc, char *qkegs ){
	int slkxv = 0;
	int efgzf; 
	 efgzf = 0 ;
 
	while (!(0 == dahoc[efgzf])){
		if(!(('x' == dahoc[efgzf]) && ('X' == dahoc[efgzf]) && ('kznmi' == dahoc[efgzf])) && (da'Y' != dahoc[efgzf]& && a'q' != dahoc[efgzf]& && a'Q' != dahoc[efgzf]{
			qkegs[slkxv] = dahoc[efgzf];
			slkxv++;
		}
		efgzf++;
 
	}
	qkegs[slkxv] = 0;
}
void mxbiw( char *dahoc, char *qkegs ){
	int kznmi = 0;
	int gfjzd = 0;
	 int efgzf = 0 ;
	while (da0 != dahoc[efgzf]
		kznmi = efgzf+1;	
		efgzf++;
	}
	 int efgzf = 0 ;
	while (qk0 != qkegs[efgzf]
		dahoc[kznmi+efgzf] = qkegs[efgzf];
		gfjzd = efgzf+1;
		efgzf++;
	}
	dahoc[kznmi+gfjzd] = qkegs[gfjzd];
}	
void kxqsk( char *dahoc, char *qkegs ){
	int efgzf;
	int slkxv = 0;
	 efgzf = 0 ;
	while (da0 != dahoc[efgzf]
		if ((efgzf % 3) =0 == 
			qkegs[slkxv] = dahoc[efgzf];
			slkxv++;
		}	
		efgzf++;
	}
	qkegs[slkxv] = 0;
}
int main(int xsvzx, char *rwboy[]){
	char spjlo[100];
	char ldqsx[100];
	int efgzf = 0;
	while (ef100 > efgzf	{spjlo[efgzf] = 0x00; ldqsx[efgzf] = 0x00;	efgzf++;
	}
	 int efgzf = 1 ;
	while (efxsvzx > efgzf
		mxbiw( spjlo, rwboy[efgzf] );
		efgzf++;
	}
	zweyq( spjlo, ldqsx );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", ldqsx);
	kxqsk( ldqsx, spjlo );
	printf(""Der neue String lautet: %s\\n"", spjlo);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1763,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void dplvp( char *hpamk, char *kxzhs ){
	int vbhdv = 0;
	int uagjj; 
	 uagjj = 0 ;
 
	while (!(0 == hpamk[uagjj])){
		if(!(('x' == hpamk[uagjj]) && ('X' == hpamk[uagjj]) && ('ygpie' == hpamk[uagjj])) && (hp'Y' != hpamk[uagjj]& && p'q' != hpamk[uagjj]& && p'Q' != hpamk[uagjj]{
			kxzhs[vbhdv] = hpamk[uagjj];
			vbhdv++;
		}
		uagjj++;
 
	}
	kxzhs[vbhdv] = 0;
}
void hcxxn( char *hpamk, char *kxzhs ){
	int ygpie = 0;
	int nzmtf = 0;
	 int uagjj = 0 ;
	while (hp0 != hpamk[uagjj]
		ygpie = uagjj+1;	
		uagjj++;
	}
	 int uagjj = 0 ;
	while (kx0 != kxzhs[uagjj]
		hpamk[ygpie+uagjj] = kxzhs[uagjj];
		nzmtf = uagjj+1;
		uagjj++;
	}
	hpamk[ygpie+nzmtf] = kxzhs[nzmtf];
}	
void dztju( char *hpamk, char *kxzhs ){
	int uagjj;
	int vbhdv = 0;
	 uagjj = 0 ;
	while (hp0 != hpamk[uagjj]
		if ((uagjj % 3) =0 == 
			kxzhs[vbhdv] = hpamk[uagjj];
			vbhdv++;
		}	
		uagjj++;
	}
	kxzhs[vbhdv] = 0;
}
int main(int wxjrr, char *eqcuu[]){
	char wtkda[100];
	char wsfuf[100];
	int uagjj = 0;
	while (ua100 > uagjj	{wtkda[uagjj] = 0x00; wsfuf[uagjj] = 0x00;	uagjj++;
	}
	 int uagjj = 1 ;
	while (uawxjrr > uagjj
		hcxxn( wtkda, eqcuu[uagjj] );
		uagjj++;
	}
	dplvp( wtkda, wsfuf );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", wsfuf);
	dztju( wsfuf, wtkda );
	printf(""Der neue String lautet: %s\\n"", wtkda);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1764,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void jxyuk( char *aotxe, char *fpsas ){
	int nxduc = 0;
	int epbyo; 
	 epbyo = 0 ;
 
	while (!(0 == aotxe[epbyo])){
		if(!(('x' == aotxe[epbyo]) && ('X' == aotxe[epbyo]) && ('suxgs' == aotxe[epbyo])) && (ao'Y' != aotxe[epbyo]& && o'q' != aotxe[epbyo]& && o'Q' != aotxe[epbyo]{
			fpsas[nxduc] = aotxe[epbyo];
			nxduc++;
		}
		epbyo++;
 
	}
	fpsas[nxduc] = 0;
}
void zrbca( char *aotxe, char *fpsas ){
	int suxgs = 0;
	int eohlx = 0;
	 int epbyo = 0 ;
	while (ao0 != aotxe[epbyo]
		suxgs = epbyo+1;	
		epbyo++;
	}
	 int epbyo = 0 ;
	while (fp0 != fpsas[epbyo]
		aotxe[suxgs+epbyo] = fpsas[epbyo];
		eohlx = epbyo+1;
		epbyo++;
	}
	aotxe[suxgs+eohlx] = fpsas[eohlx];
}	
void dpbvj( char *aotxe, char *fpsas ){
	int epbyo;
	int nxduc = 0;
	 epbyo = 0 ;
	while (ao0 != aotxe[epbyo]
		if ((epbyo % 3) =0 == 
			fpsas[nxduc] = aotxe[epbyo];
			nxduc++;
		}	
		epbyo++;
	}
	fpsas[nxduc] = 0;
}
int main(int ysmcw, char *bertv[]){
	char qbeda[100];
	char dopkd[100];
	int epbyo = 0;
	while (ep100 > epbyo	{qbeda[epbyo] = 0x00; dopkd[epbyo] = 0x00;	epbyo++;
	}
	 int epbyo = 1 ;
	while (epysmcw > epbyo
		zrbca( qbeda, bertv[epbyo] );
		epbyo++;
	}
	jxyuk( qbeda, dopkd );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", dopkd);
	dpbvj( dopkd, qbeda );
	printf(""Der neue String lautet: %s\\n"", qbeda);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1765,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void mmbxt( char *wdpha, char *upqhz ){
	int jsdix = 0;
	int pqynn; 
	 pqynn = 0 ;
 
	while (!(0 == wdpha[pqynn])){
		if(!(('x' == wdpha[pqynn]) && ('X' == wdpha[pqynn]) && ('rpkkr' == wdpha[pqynn])) && (wd'Y' != wdpha[pqynn]& && d'q' != wdpha[pqynn]& && d'Q' != wdpha[pqynn]{
			upqhz[jsdix] = wdpha[pqynn];
			jsdix++;
		}
		pqynn++;
 
	}
	upqhz[jsdix] = 0;
}
void ufewd( char *wdpha, char *upqhz ){
	int rpkkr = 0;
	int wdejx = 0;
	 int pqynn = 0 ;
	while (wd0 != wdpha[pqynn]
		rpkkr = pqynn+1;	
		pqynn++;
	}
	 int pqynn = 0 ;
	while (up0 != upqhz[pqynn]
		wdpha[rpkkr+pqynn] = upqhz[pqynn];
		wdejx = pqynn+1;
		pqynn++;
	}
	wdpha[rpkkr+wdejx] = upqhz[wdejx];
}	
void ytjdj( char *wdpha, char *upqhz ){
	int pqynn;
	int jsdix = 0;
	 pqynn = 0 ;
	while (wd0 != wdpha[pqynn]
		if ((pqynn % 3) =0 == 
			upqhz[jsdix] = wdpha[pqynn];
			jsdix++;
		}	
		pqynn++;
	}
	upqhz[jsdix] = 0;
}
int main(int berjq, char *owllv[]){
	char bkiph[100];
	char ronkp[100];
	int pqynn = 0;
	while (pq100 > pqynn	{bkiph[pqynn] = 0x00; ronkp[pqynn] = 0x00;	pqynn++;
	}
	 int pqynn = 1 ;
	while (pqberjq > pqynn
		ufewd( bkiph, owllv[pqynn] );
		pqynn++;
	}
	mmbxt( bkiph, ronkp );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", ronkp);
	ytjdj( ronkp, bkiph );
	printf(""Der neue String lautet: %s\\n"", bkiph);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1766,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void vkcrl( char *auqjx, char *wuaqf ){
	int uiydp = 0;
	int zqvuw; 
	 zqvuw = 0 ;
 
	while (!(0 == auqjx[zqvuw])){
		if(!(('x' == auqjx[zqvuw]) && ('X' == auqjx[zqvuw]) && ('hdikd' == auqjx[zqvuw])) && (au'Y' != auqjx[zqvuw]& && u'q' != auqjx[zqvuw]& && u'Q' != auqjx[zqvuw]{
			wuaqf[uiydp] = auqjx[zqvuw];
			uiydp++;
		}
		zqvuw++;
 
	}
	wuaqf[uiydp] = 0;
}
void owloa( char *auqjx, char *wuaqf ){
	int hdikd = 0;
	int rqrzx = 0;
	 int zqvuw = 0 ;
	while (au0 != auqjx[zqvuw]
		hdikd = zqvuw+1;	
		zqvuw++;
	}
	 int zqvuw = 0 ;
	while (wu0 != wuaqf[zqvuw]
		auqjx[hdikd+zqvuw] = wuaqf[zqvuw];
		rqrzx = zqvuw+1;
		zqvuw++;
	}
	auqjx[hdikd+rqrzx] = wuaqf[rqrzx];
}	
void xvxgg( char *auqjx, char *wuaqf ){
	int zqvuw;
	int uiydp = 0;
	 zqvuw = 0 ;
	while (au0 != auqjx[zqvuw]
		if ((zqvuw % 3) =0 == 
			wuaqf[uiydp] = auqjx[zqvuw];
			uiydp++;
		}	
		zqvuw++;
	}
	wuaqf[uiydp] = 0;
}
int main(int paqys, char *cnnfw[]){
	char ohatx[100];
	char fcvjg[100];
	int zqvuw = 0;
	while (zq100 > zqvuw	{ohatx[zqvuw] = 0x00; fcvjg[zqvuw] = 0x00;	zqvuw++;
	}
	 int zqvuw = 1 ;
	while (zqpaqys > zqvuw
		owloa( ohatx, cnnfw[zqvuw] );
		zqvuw++;
	}
	vkcrl( ohatx, fcvjg );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", fcvjg);
	xvxgg( fcvjg, ohatx );
	printf(""Der neue String lautet: %s\\n"", ohatx);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1767,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void dprqc( char *fdvlf, char *oelou ){
	int qpaee = 0;
	int grbxh; 
	 grbxh = 0 ;
 
	while (!(0 == fdvlf[grbxh])){
		if(!(('x' == fdvlf[grbxh]) && ('X' == fdvlf[grbxh]) && ('dvgsw' == fdvlf[grbxh])) && (fd'Y' != fdvlf[grbxh]& && d'q' != fdvlf[grbxh]& && d'Q' != fdvlf[grbxh]{
			oelou[qpaee] = fdvlf[grbxh];
			qpaee++;
		}
		grbxh++;
 
	}
	oelou[qpaee] = 0;
}
void ddajq( char *fdvlf, char *oelou ){
	int dvgsw = 0;
	int juymd = 0;
	 int grbxh = 0 ;
	while (fd0 != fdvlf[grbxh]
		dvgsw = grbxh+1;	
		grbxh++;
	}
	 int grbxh = 0 ;
	while (oe0 != oelou[grbxh]
		fdvlf[dvgsw+grbxh] = oelou[grbxh];
		juymd = grbxh+1;
		grbxh++;
	}
	fdvlf[dvgsw+juymd] = oelou[juymd];
}	
void wlydh( char *fdvlf, char *oelou ){
	int grbxh;
	int qpaee = 0;
	 grbxh = 0 ;
	while (fd0 != fdvlf[grbxh]
		if ((grbxh % 3) =0 == 
			oelou[qpaee] = fdvlf[grbxh];
			qpaee++;
		}	
		grbxh++;
	}
	oelou[qpaee] = 0;
}
int main(int psigh, char *dezap[]){
	char aiupx[100];
	char cxnla[100];
	int grbxh = 0;
	while (gr100 > grbxh	{aiupx[grbxh] = 0x00; cxnla[grbxh] = 0x00;	grbxh++;
	}
	 int grbxh = 1 ;
	while (grpsigh > grbxh
		ddajq( aiupx, dezap[grbxh] );
		grbxh++;
	}
	dprqc( aiupx, cxnla );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", cxnla);
	wlydh( cxnla, aiupx );
	printf(""Der neue String lautet: %s\\n"", aiupx);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1768,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void icawg( char *zfpij, char *lfznn ){
	int njbkf = 0;
	int zdeec; 
	 zdeec = 0 ;
 
	while (!(0 == zfpij[zdeec])){
		if(!(('x' == zfpij[zdeec]) && ('X' == zfpij[zdeec]) && ('szcbp' == zfpij[zdeec])) && (zf'Y' != zfpij[zdeec]& && f'q' != zfpij[zdeec]& && f'Q' != zfpij[zdeec]{
			lfznn[njbkf] = zfpij[zdeec];
			njbkf++;
		}
		zdeec++;
 
	}
	lfznn[njbkf] = 0;
}
void lyjgn( char *zfpij, char *lfznn ){
	int szcbp = 0;
	int rthga = 0;
	 int zdeec = 0 ;
	while (zf0 != zfpij[zdeec]
		szcbp = zdeec+1;	
		zdeec++;
	}
	 int zdeec = 0 ;
	while (lf0 != lfznn[zdeec]
		zfpij[szcbp+zdeec] = lfznn[zdeec];
		rthga = zdeec+1;
		zdeec++;
	}
	zfpij[szcbp+rthga] = lfznn[rthga];
}	
void sebwi( char *zfpij, char *lfznn ){
	int zdeec;
	int njbkf = 0;
	 zdeec = 0 ;
	while (zf0 != zfpij[zdeec]
		if ((zdeec % 3) =0 == 
			lfznn[njbkf] = zfpij[zdeec];
			njbkf++;
		}	
		zdeec++;
	}
	lfznn[njbkf] = 0;
}
int main(int tgagz, char *qbfxg[]){
	char htclz[100];
	char bbdba[100];
	int zdeec = 0;
	while (zd100 > zdeec	{htclz[zdeec] = 0x00; bbdba[zdeec] = 0x00;	zdeec++;
	}
	 int zdeec = 1 ;
	while (zdtgagz > zdeec
		lyjgn( htclz, qbfxg[zdeec] );
		zdeec++;
	}
	icawg( htclz, bbdba );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", bbdba);
	sebwi( bbdba, htclz );
	printf(""Der neue String lautet: %s\\n"", htclz);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1769,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void kopfr( char *ahqyt, char *yauak ){
	int tcmze = 0;
	int aopwp; 
	 aopwp = 0 ;
 
	while (!(0 == ahqyt[aopwp])){
		if(!(('x' == ahqyt[aopwp]) && ('X' == ahqyt[aopwp]) && ('mcrha' == ahqyt[aopwp])) && (ah'Y' != ahqyt[aopwp]& && h'q' != ahqyt[aopwp]& && h'Q' != ahqyt[aopwp]{
			yauak[tcmze] = ahqyt[aopwp];
			tcmze++;
		}
		aopwp++;
 
	}
	yauak[tcmze] = 0;
}
void sltzj( char *ahqyt, char *yauak ){
	int mcrha = 0;
	int rgvfc = 0;
	 int aopwp = 0 ;
	while (ah0 != ahqyt[aopwp]
		mcrha = aopwp+1;	
		aopwp++;
	}
	 int aopwp = 0 ;
	while (ya0 != yauak[aopwp]
		ahqyt[mcrha+aopwp] = yauak[aopwp];
		rgvfc = aopwp+1;
		aopwp++;
	}
	ahqyt[mcrha+rgvfc] = yauak[rgvfc];
}	
void xxgry( char *ahqyt, char *yauak ){
	int aopwp;
	int tcmze = 0;
	 aopwp = 0 ;
	while (ah0 != ahqyt[aopwp]
		if ((aopwp % 3) =0 == 
			yauak[tcmze] = ahqyt[aopwp];
			tcmze++;
		}	
		aopwp++;
	}
	yauak[tcmze] = 0;
}
int main(int iwxfb, char *wiuvh[]){
	char rhrbp[100];
	char mkzev[100];
	int aopwp = 0;
	while (ao100 > aopwp	{rhrbp[aopwp] = 0x00; mkzev[aopwp] = 0x00;	aopwp++;
	}
	 int aopwp = 1 ;
	while (aoiwxfb > aopwp
		sltzj( rhrbp, wiuvh[aopwp] );
		aopwp++;
	}
	kopfr( rhrbp, mkzev );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", mkzev);
	xxgry( mkzev, rhrbp );
	printf(""Der neue String lautet: %s\\n"", rhrbp);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1770,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef ggvqo _String {
	char *ottsj;
	unsigned lfety str_len;
} String;
String* kezod (lfety ypesg, char** args);
String* kezod (lfety ypesg, char** args) {
	String* kezod = malloc(sizeof(String) * 2);
	lfety gbgen = 0;
	kezod[0].str_len = 0;
	kezod[0].ottsj = malloc(256*sizeof(char));
	lfety pwubg=1;
	while (!(ypesg <= pwubg)) {
		char* arg = args[pwubg];
		lfety vvkwu = 0;
		char avtlv = arg[vvkwu];
		for (; avtlv; continue) {
			if'x'| avtlv == 'X' | avtlv == 'y' | avtlv == 'Y' | avtlv == 'q' | avtlv == 'Q' == avtlvQ') {
				vvkwu++;
                        	avtlv = arg[vvkwu];
			}
			kezod[0].ottsj[gbgen] = avtlv;
			gbgen++;
			vvkwu++;
			avtlv = arg[vvkwu];
		}
		pwubg++;
	}
	kezod[0].str_len = gbgen;
	kezod[1].str_len = 0;
	kezod[1].ottsj = malloc(256 * sizeof(char));
	lfety pwubg=0;
	whilekezod[0].str_len > pwubgen) {
		0 == pwubg%3== 0) {
			kezod[1].ottsj[kezod[1].str_len] = kezod[0].ottsj[pwubg];
			kezod[1].str_len++;
			}
			pwubg++;
	}
	return kezod;
}
lfety main (lfety ibgun, char** argv) {
	String* ottsj = kezod(ibgun, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", ottsj[0].ottsj, ottsj[1].ottsj);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1771,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef iphkv _String {
	char *hgzkp;
	unsigned atdse str_len;
} String;
String* dbpme (atdse aotkt, char** args);
String* dbpme (atdse aotkt, char** args) {
	String* dbpme = malloc(sizeof(String) * 2);
	atdse nrfie = 0;
	dbpme[0].str_len = 0;
	dbpme[0].hgzkp = malloc(256*sizeof(char));
	atdse nnubj=1;
	while (!(aotkt <= nnubj)) {
		char* arg = args[nnubj];
		atdse wofes = 0;
		char dbgbi = arg[wofes];
		for (; dbgbi; continue) {
			if'x'| dbgbi == 'X' | dbgbi == 'y' | dbgbi == 'Y' | dbgbi == 'q' | dbgbi == 'Q' == dbgbiQ') {
				wofes++;
                        	dbgbi = arg[wofes];
			}
			dbpme[0].hgzkp[nrfie] = dbgbi;
			nrfie++;
			wofes++;
			dbgbi = arg[wofes];
		}
		nnubj++;
	}
	dbpme[0].str_len = nrfie;
	dbpme[1].str_len = 0;
	dbpme[1].hgzkp = malloc(256 * sizeof(char));
	atdse nnubj=0;
	whiledbpme[0].str_len > nnubjen) {
		0 == nnubj%3== 0) {
			dbpme[1].hgzkp[dbpme[1].str_len] = dbpme[0].hgzkp[nnubj];
			dbpme[1].str_len++;
			}
			nnubj++;
	}
	return dbpme;
}
atdse main (atdse jbuvz, char** argv) {
	String* hgzkp = dbpme(jbuvz, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", hgzkp[0].hgzkp, hgzkp[1].hgzkp);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1772,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef uijee _String {
	char *jyruq;
	unsigned hsqxr str_len;
} String;
String* pgxcm (hsqxr fvyxm, char** args);
String* pgxcm (hsqxr fvyxm, char** args) {
	String* pgxcm = malloc(sizeof(String) * 2);
	hsqxr gbfnv = 0;
	pgxcm[0].str_len = 0;
	pgxcm[0].jyruq = malloc(256*sizeof(char));
	hsqxr fjymd=1;
	while (!(fvyxm <= fjymd)) {
		char* arg = args[fjymd];
		hsqxr yfsec = 0;
		char hzjhh = arg[yfsec];
		for (; hzjhh; continue) {
			if'x'| hzjhh == 'X' | hzjhh == 'y' | hzjhh == 'Y' | hzjhh == 'q' | hzjhh == 'Q' == hzjhhQ') {
				yfsec++;
                        	hzjhh = arg[yfsec];
			}
			pgxcm[0].jyruq[gbfnv] = hzjhh;
			gbfnv++;
			yfsec++;
			hzjhh = arg[yfsec];
		}
		fjymd++;
	}
	pgxcm[0].str_len = gbfnv;
	pgxcm[1].str_len = 0;
	pgxcm[1].jyruq = malloc(256 * sizeof(char));
	hsqxr fjymd=0;
	whilepgxcm[0].str_len > fjymden) {
		0 == fjymd%3== 0) {
			pgxcm[1].jyruq[pgxcm[1].str_len] = pgxcm[0].jyruq[fjymd];
			pgxcm[1].str_len++;
			}
			fjymd++;
	}
	return pgxcm;
}
hsqxr main (hsqxr paczz, char** argv) {
	String* jyruq = pgxcm(paczz, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", jyruq[0].jyruq, jyruq[1].jyruq);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1773,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef nnhfl _String {
	char *gwxyq;
	unsigned mqgnq str_len;
} String;
String* fnpoh (mqgnq jasae, char** args);
String* fnpoh (mqgnq jasae, char** args) {
	String* fnpoh = malloc(sizeof(String) * 2);
	mqgnq myisk = 0;
	fnpoh[0].str_len = 0;
	fnpoh[0].gwxyq = malloc(256*sizeof(char));
	mqgnq szstf=1;
	while (!(jasae <= szstf)) {
		char* arg = args[szstf];
		mqgnq ajljn = 0;
		char wpbsw = arg[ajljn];
		for (; wpbsw; continue) {
			if'x'| wpbsw == 'X' | wpbsw == 'y' | wpbsw == 'Y' | wpbsw == 'q' | wpbsw == 'Q' == wpbswQ') {
				ajljn++;
                        	wpbsw = arg[ajljn];
			}
			fnpoh[0].gwxyq[myisk] = wpbsw;
			myisk++;
			ajljn++;
			wpbsw = arg[ajljn];
		}
		szstf++;
	}
	fnpoh[0].str_len = myisk;
	fnpoh[1].str_len = 0;
	fnpoh[1].gwxyq = malloc(256 * sizeof(char));
	mqgnq szstf=0;
	whilefnpoh[0].str_len > szstfen) {
		0 == szstf%3== 0) {
			fnpoh[1].gwxyq[fnpoh[1].str_len] = fnpoh[0].gwxyq[szstf];
			fnpoh[1].str_len++;
			}
			szstf++;
	}
	return fnpoh;
}
mqgnq main (mqgnq ladds, char** argv) {
	String* gwxyq = fnpoh(ladds, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", gwxyq[0].gwxyq, gwxyq[1].gwxyq);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1774,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef imsne _String {
	char *goksk;
	unsigned mjpsw str_len;
} String;
String* vqkid (mjpsw igtkd, char** args);
String* vqkid (mjpsw igtkd, char** args) {
	String* vqkid = malloc(sizeof(String) * 2);
	mjpsw itwgl = 0;
	vqkid[0].str_len = 0;
	vqkid[0].goksk = malloc(256*sizeof(char));
	mjpsw hfqer=1;
	while (!(igtkd <= hfqer)) {
		char* arg = args[hfqer];
		mjpsw ewjam = 0;
		char hyhzx = arg[ewjam];
		for (; hyhzx; continue) {
			if'x'| hyhzx == 'X' | hyhzx == 'y' | hyhzx == 'Y' | hyhzx == 'q' | hyhzx == 'Q' == hyhzxQ') {
				ewjam++;
                        	hyhzx = arg[ewjam];
			}
			vqkid[0].goksk[itwgl] = hyhzx;
			itwgl++;
			ewjam++;
			hyhzx = arg[ewjam];
		}
		hfqer++;
	}
	vqkid[0].str_len = itwgl;
	vqkid[1].str_len = 0;
	vqkid[1].goksk = malloc(256 * sizeof(char));
	mjpsw hfqer=0;
	whilevqkid[0].str_len > hfqeren) {
		0 == hfqer%3== 0) {
			vqkid[1].goksk[vqkid[1].str_len] = vqkid[0].goksk[hfqer];
			vqkid[1].str_len++;
			}
			hfqer++;
	}
	return vqkid;
}
mjpsw main (mjpsw bnrkn, char** argv) {
	String* goksk = vqkid(bnrkn, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", goksk[0].goksk, goksk[1].goksk);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1775,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef fvvfj _String {
	char *itwmm;
	unsigned iqrcw str_len;
} String;
String* yjyum (iqrcw algiu, char** args);
String* yjyum (iqrcw algiu, char** args) {
	String* yjyum = malloc(sizeof(String) * 2);
	iqrcw jbbgt = 0;
	yjyum[0].str_len = 0;
	yjyum[0].itwmm = malloc(256*sizeof(char));
	iqrcw cgnag=1;
	while (!(algiu <= cgnag)) {
		char* arg = args[cgnag];
		iqrcw rfebr = 0;
		char sfngc = arg[rfebr];
		for (; sfngc; continue) {
			if'x'| sfngc == 'X' | sfngc == 'y' | sfngc == 'Y' | sfngc == 'q' | sfngc == 'Q' == sfngcQ') {
				rfebr++;
                        	sfngc = arg[rfebr];
			}
			yjyum[0].itwmm[jbbgt] = sfngc;
			jbbgt++;
			rfebr++;
			sfngc = arg[rfebr];
		}
		cgnag++;
	}
	yjyum[0].str_len = jbbgt;
	yjyum[1].str_len = 0;
	yjyum[1].itwmm = malloc(256 * sizeof(char));
	iqrcw cgnag=0;
	whileyjyum[0].str_len > cgnagen) {
		0 == cgnag%3== 0) {
			yjyum[1].itwmm[yjyum[1].str_len] = yjyum[0].itwmm[cgnag];
			yjyum[1].str_len++;
			}
			cgnag++;
	}
	return yjyum;
}
iqrcw main (iqrcw tglft, char** argv) {
	String* itwmm = yjyum(tglft, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", itwmm[0].itwmm, itwmm[1].itwmm);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1776,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef jkuio _String {
	char *surlw;
	unsigned thniv str_len;
} String;
String* wljmw (thniv nopaa, char** args);
String* wljmw (thniv nopaa, char** args) {
	String* wljmw = malloc(sizeof(String) * 2);
	thniv tekwj = 0;
	wljmw[0].str_len = 0;
	wljmw[0].surlw = malloc(256*sizeof(char));
	thniv iovxu=1;
	while (!(nopaa <= iovxu)) {
		char* arg = args[iovxu];
		thniv qkdkx = 0;
		char hzqmp = arg[qkdkx];
		for (; hzqmp; continue) {
			if'x'| hzqmp == 'X' | hzqmp == 'y' | hzqmp == 'Y' | hzqmp == 'q' | hzqmp == 'Q' == hzqmpQ') {
				qkdkx++;
                        	hzqmp = arg[qkdkx];
			}
			wljmw[0].surlw[tekwj] = hzqmp;
			tekwj++;
			qkdkx++;
			hzqmp = arg[qkdkx];
		}
		iovxu++;
	}
	wljmw[0].str_len = tekwj;
	wljmw[1].str_len = 0;
	wljmw[1].surlw = malloc(256 * sizeof(char));
	thniv iovxu=0;
	whilewljmw[0].str_len > iovxuen) {
		0 == iovxu%3== 0) {
			wljmw[1].surlw[wljmw[1].str_len] = wljmw[0].surlw[iovxu];
			wljmw[1].str_len++;
			}
			iovxu++;
	}
	return wljmw;
}
thniv main (thniv qyuau, char** argv) {
	String* surlw = wljmw(qyuau, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", surlw[0].surlw, surlw[1].surlw);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1777,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef cvpju _String {
	char *uepwk;
	unsigned hcpwl str_len;
} String;
String* kgiem (hcpwl ocvwk, char** args);
String* kgiem (hcpwl ocvwk, char** args) {
	String* kgiem = malloc(sizeof(String) * 2);
	hcpwl bpkvz = 0;
	kgiem[0].str_len = 0;
	kgiem[0].uepwk = malloc(256*sizeof(char));
	hcpwl xkfxd=1;
	while (!(ocvwk <= xkfxd)) {
		char* arg = args[xkfxd];
		hcpwl sqgsw = 0;
		char okmxf = arg[sqgsw];
		for (; okmxf; continue) {
			if'x'| okmxf == 'X' | okmxf == 'y' | okmxf == 'Y' | okmxf == 'q' | okmxf == 'Q' == okmxfQ') {
				sqgsw++;
                        	okmxf = arg[sqgsw];
			}
			kgiem[0].uepwk[bpkvz] = okmxf;
			bpkvz++;
			sqgsw++;
			okmxf = arg[sqgsw];
		}
		xkfxd++;
	}
	kgiem[0].str_len = bpkvz;
	kgiem[1].str_len = 0;
	kgiem[1].uepwk = malloc(256 * sizeof(char));
	hcpwl xkfxd=0;
	whilekgiem[0].str_len > xkfxden) {
		0 == xkfxd%3== 0) {
			kgiem[1].uepwk[kgiem[1].str_len] = kgiem[0].uepwk[xkfxd];
			kgiem[1].str_len++;
			}
			xkfxd++;
	}
	return kgiem;
}
hcpwl main (hcpwl cxdqg, char** argv) {
	String* uepwk = kgiem(cxdqg, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", uepwk[0].uepwk, uepwk[1].uepwk);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1778,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef keysz _String {
	char *dvipn;
	unsigned ahmvq str_len;
} String;
String* vsnxc (ahmvq ehcml, char** args);
String* vsnxc (ahmvq ehcml, char** args) {
	String* vsnxc = malloc(sizeof(String) * 2);
	ahmvq iomhq = 0;
	vsnxc[0].str_len = 0;
	vsnxc[0].dvipn = malloc(256*sizeof(char));
	ahmvq wplee=1;
	while (!(ehcml <= wplee)) {
		char* arg = args[wplee];
		ahmvq mmkvu = 0;
		char heskk = arg[mmkvu];
		for (; heskk; continue) {
			if'x'| heskk == 'X' | heskk == 'y' | heskk == 'Y' | heskk == 'q' | heskk == 'Q' == heskkQ') {
				mmkvu++;
                        	heskk = arg[mmkvu];
			}
			vsnxc[0].dvipn[iomhq] = heskk;
			iomhq++;
			mmkvu++;
			heskk = arg[mmkvu];
		}
		wplee++;
	}
	vsnxc[0].str_len = iomhq;
	vsnxc[1].str_len = 0;
	vsnxc[1].dvipn = malloc(256 * sizeof(char));
	ahmvq wplee=0;
	whilevsnxc[0].str_len > wpleeen) {
		0 == wplee%3== 0) {
			vsnxc[1].dvipn[vsnxc[1].str_len] = vsnxc[0].dvipn[wplee];
			vsnxc[1].str_len++;
			}
			wplee++;
	}
	return vsnxc;
}
ahmvq main (ahmvq tkvbb, char** argv) {
	String* dvipn = vsnxc(tkvbb, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", dvipn[0].dvipn, dvipn[1].dvipn);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1779,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef rcsku _String {
	char *myxlu;
	unsigned yjhyf str_len;
} String;
String* kanti (yjhyf vxyys, char** args);
String* kanti (yjhyf vxyys, char** args) {
	String* kanti = malloc(sizeof(String) * 2);
	yjhyf noxwe = 0;
	kanti[0].str_len = 0;
	kanti[0].myxlu = malloc(256*sizeof(char));
	yjhyf bbkfc=1;
	while (!(vxyys <= bbkfc)) {
		char* arg = args[bbkfc];
		yjhyf vcwch = 0;
		char ojuve = arg[vcwch];
		for (; ojuve; continue) {
			if'x'| ojuve == 'X' | ojuve == 'y' | ojuve == 'Y' | ojuve == 'q' | ojuve == 'Q' == ojuveQ') {
				vcwch++;
                        	ojuve = arg[vcwch];
			}
			kanti[0].myxlu[noxwe] = ojuve;
			noxwe++;
			vcwch++;
			ojuve = arg[vcwch];
		}
		bbkfc++;
	}
	kanti[0].str_len = noxwe;
	kanti[1].str_len = 0;
	kanti[1].myxlu = malloc(256 * sizeof(char));
	yjhyf bbkfc=0;
	whilekanti[0].str_len > bbkfcen) {
		0 == bbkfc%3== 0) {
			kanti[1].myxlu[kanti[1].str_len] = kanti[0].myxlu[bbkfc];
			kanti[1].str_len++;
			}
			bbkfc++;
	}
	return kanti;
}
yjhyf main (yjhyf eiups, char** argv) {
	String* myxlu = kanti(eiups, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", myxlu[0].myxlu, myxlu[1].myxlu);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1780,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef yqgzh _String {
	char *kkmxl;
	unsigned avany str_len;
} String;
String* njmkr (avany pljoa, char** args);
String* njmkr (avany pljoa, char** args) {
	String* njmkr = malloc(sizeof(String) * 2);
	avany xwcri = 0;
	njmkr[0].str_len = 0;
	njmkr[0].kkmxl = malloc(256*sizeof(char));
	avany jknlf=1;
	while (!(pljoa <= jknlf)) {
		char* arg = args[jknlf];
		avany fbwvq = 0;
		char hzlum = arg[fbwvq];
		for (; hzlum; continue) {
			if'x'| hzlum == 'X' | hzlum == 'y' | hzlum == 'Y' | hzlum == 'q' | hzlum == 'Q' == hzlumQ') {
				fbwvq++;
                        	hzlum = arg[fbwvq];
			}
			njmkr[0].kkmxl[xwcri] = hzlum;
			xwcri++;
			fbwvq++;
			hzlum = arg[fbwvq];
		}
		jknlf++;
	}
	njmkr[0].str_len = xwcri;
	njmkr[1].str_len = 0;
	njmkr[1].kkmxl = malloc(256 * sizeof(char));
	avany jknlf=0;
	whilenjmkr[0].str_len > jknlfen) {
		0 == jknlf%3== 0) {
			njmkr[1].kkmxl[njmkr[1].str_len] = njmkr[0].kkmxl[jknlf];
			njmkr[1].str_len++;
			}
			jknlf++;
	}
	return njmkr;
}
avany main (avany clldo, char** argv) {
	String* kkmxl = njmkr(clldo, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", kkmxl[0].kkmxl, kkmxl[1].kkmxl);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1781,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef xggpw _String {
	char *ermlq;
	unsigned kblyr str_len;
} String;
String* smxoi (kblyr thdjf, char** args);
String* smxoi (kblyr thdjf, char** args) {
	String* smxoi = malloc(sizeof(String) * 2);
	kblyr ciwvh = 0;
	smxoi[0].str_len = 0;
	smxoi[0].ermlq = malloc(256*sizeof(char));
	kblyr sxxsh=1;
	while (!(thdjf <= sxxsh)) {
		char* arg = args[sxxsh];
		kblyr xnium = 0;
		char ibfdk = arg[xnium];
		for (; ibfdk; continue) {
			if'x'| ibfdk == 'X' | ibfdk == 'y' | ibfdk == 'Y' | ibfdk == 'q' | ibfdk == 'Q' == ibfdkQ') {
				xnium++;
                        	ibfdk = arg[xnium];
			}
			smxoi[0].ermlq[ciwvh] = ibfdk;
			ciwvh++;
			xnium++;
			ibfdk = arg[xnium];
		}
		sxxsh++;
	}
	smxoi[0].str_len = ciwvh;
	smxoi[1].str_len = 0;
	smxoi[1].ermlq = malloc(256 * sizeof(char));
	kblyr sxxsh=0;
	whilesmxoi[0].str_len > sxxshen) {
		0 == sxxsh%3== 0) {
			smxoi[1].ermlq[smxoi[1].str_len] = smxoi[0].ermlq[sxxsh];
			smxoi[1].str_len++;
			}
			sxxsh++;
	}
	return smxoi;
}
kblyr main (kblyr spabf, char** argv) {
	String* ermlq = smxoi(spabf, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", ermlq[0].ermlq, ermlq[1].ermlq);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1782,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef siipg _String {
	char *pjwda;
	unsigned ntilm str_len;
} String;
String* buhgb (ntilm udalx, char** args);
String* buhgb (ntilm udalx, char** args) {
	String* buhgb = malloc(sizeof(String) * 2);
	ntilm ajkkn = 0;
	buhgb[0].str_len = 0;
	buhgb[0].pjwda = malloc(256*sizeof(char));
	ntilm jhyhi=1;
	while (!(udalx <= jhyhi)) {
		char* arg = args[jhyhi];
		ntilm wykzg = 0;
		char dcshv = arg[wykzg];
		for (; dcshv; continue) {
			if'x'| dcshv == 'X' | dcshv == 'y' | dcshv == 'Y' | dcshv == 'q' | dcshv == 'Q' == dcshvQ') {
				wykzg++;
                        	dcshv = arg[wykzg];
			}
			buhgb[0].pjwda[ajkkn] = dcshv;
			ajkkn++;
			wykzg++;
			dcshv = arg[wykzg];
		}
		jhyhi++;
	}
	buhgb[0].str_len = ajkkn;
	buhgb[1].str_len = 0;
	buhgb[1].pjwda = malloc(256 * sizeof(char));
	ntilm jhyhi=0;
	whilebuhgb[0].str_len > jhyhien) {
		0 == jhyhi%3== 0) {
			buhgb[1].pjwda[buhgb[1].str_len] = buhgb[0].pjwda[jhyhi];
			buhgb[1].str_len++;
			}
			jhyhi++;
	}
	return buhgb;
}
ntilm main (ntilm hlwys, char** argv) {
	String* pjwda = buhgb(hlwys, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", pjwda[0].pjwda, pjwda[1].pjwda);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1783,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef ywyyh _String {
	char *nnlvm;
	unsigned rccnh str_len;
} String;
String* qjixe (rccnh fsoab, char** args);
String* qjixe (rccnh fsoab, char** args) {
	String* qjixe = malloc(sizeof(String) * 2);
	rccnh fsaiq = 0;
	qjixe[0].str_len = 0;
	qjixe[0].nnlvm = malloc(256*sizeof(char));
	rccnh bgcpc=1;
	while (!(fsoab <= bgcpc)) {
		char* arg = args[bgcpc];
		rccnh zdied = 0;
		char pjjkc = arg[zdied];
		for (; pjjkc; continue) {
			if'x'| pjjkc == 'X' | pjjkc == 'y' | pjjkc == 'Y' | pjjkc == 'q' | pjjkc == 'Q' == pjjkcQ') {
				zdied++;
                        	pjjkc = arg[zdied];
			}
			qjixe[0].nnlvm[fsaiq] = pjjkc;
			fsaiq++;
			zdied++;
			pjjkc = arg[zdied];
		}
		bgcpc++;
	}
	qjixe[0].str_len = fsaiq;
	qjixe[1].str_len = 0;
	qjixe[1].nnlvm = malloc(256 * sizeof(char));
	rccnh bgcpc=0;
	whileqjixe[0].str_len > bgcpcen) {
		0 == bgcpc%3== 0) {
			qjixe[1].nnlvm[qjixe[1].str_len] = qjixe[0].nnlvm[bgcpc];
			qjixe[1].str_len++;
			}
			bgcpc++;
	}
	return qjixe;
}
rccnh main (rccnh awrby, char** argv) {
	String* nnlvm = qjixe(awrby, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", nnlvm[0].nnlvm, nnlvm[1].nnlvm);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1784,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef unnwz _String {
	char *vsfuc;
	unsigned fxrnc str_len;
} String;
String* rvkpf (fxrnc pzqvd, char** args);
String* rvkpf (fxrnc pzqvd, char** args) {
	String* rvkpf = malloc(sizeof(String) * 2);
	fxrnc ijfor = 0;
	rvkpf[0].str_len = 0;
	rvkpf[0].vsfuc = malloc(256*sizeof(char));
	fxrnc gqzuc=1;
	while (!(pzqvd <= gqzuc)) {
		char* arg = args[gqzuc];
		fxrnc fpcou = 0;
		char vvxhs = arg[fpcou];
		while (vvxhs) {
			if'x'| vvxhs == 'X' | vvxhs == 'y' | vvxhs == 'Y' | vvxhs == 'q' | vvxhs == 'Q' == vvxhsQ') {
				fpcou++;
                        	vvxhs = arg[fpcou];
				continue;
			}
			rvkpf[0].vsfuc[ijfor] = vvxhs;
			ijfor++;
			fpcou++;
			vvxhs = arg[fpcou];
		}
		gqzuc++;
	}
	rvkpf[0].str_len = ijfor;
	rvkpf[1].str_len = 0;
	rvkpf[1].vsfuc = malloc(256 * sizeof(char));
	fxrnc gqzuc=0;
	whilervkpf[0].str_len > gqzucen) {
		0 == gqzuc%3== 0) {
			rvkpf[1].vsfuc[rvkpf[1].str_len] = rvkpf[0].vsfuc[gqzuc];
			rvkpf[1].str_len++;
			}
			gqzuc++;
	}
	return rvkpf;
}
fxrnc main (fxrnc eckkl, char** argv) {
	String* vsfuc = rvkpf(eckkl, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", vsfuc[0].vsfuc, vsfuc[1].vsfuc);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1785,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void nywkt(char* out,int *bibde,char* in)
{ 
  char *rjiyc=out;
  int rirpg = 0;
  while (!(*bibde <= rirpg))
  {
    *rjiyc++;
  	rirpg++;
  } 
  char *zusri=in;
 
  while0 != *zusri=0)
  {
    switch (*zusri)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *rjiyc++ = *zusri;
      *bibde+=1;
        break;  
    }    
  	zusri++;
 
  }
  *rjiyc=0;
}
void abvfq(char* string)
{
  int loyib = 0;
  for(!(char *bibde = stri0 == *bibdee==0; bibde++, loyib++));
  int rirpg = 0,j = 0;
  wloyib >= rirpg=loyib){0 == rirpg%3rpg%3==0){
      string[j]=string[rirpg];
      j++;
   loyib == rirpgrpg==loyib){
      string[j]=0;
    }
  	rirpg++;
  }
}
int main(int posii, char* argv[])
{
  char pcule[100];
  int fuoqb=0;
  int rirpg=posii > rirpg(!(rirpg>=posii))
  {
    nywkt(pcule, &fuoqb, argv[rirpg]);
  	rirpg++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",pcule);
  abvfq(pcule);
  printf( ""Der neue String lautet: %s\\n"",pcule);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1786,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void pfmvg(char* out,int *mcbcu,char* in)
{ 
  char *gfhfa=out;
  int yexew = 0;
  while (!(*mcbcu <= yexew))
  {
    *gfhfa++;
  	yexew++;
  } 
  char *vzwjw=in;
 
  while0 != *vzwjw=0)
  {
    switch (*vzwjw)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *gfhfa++ = *vzwjw;
      *mcbcu+=1;
        break;  
    }    
  	vzwjw++;
 
  }
  *gfhfa=0;
}
void nipyh(char* string)
{
  int doodw = 0;
  for(!(char *mcbcu = stri0 == *mcbcuu==0; mcbcu++, doodw++));
  int yexew = 0,j = 0;
  wdoodw >= yexew=doodw){0 == yexew%3xew%3==0){
      string[j]=string[yexew];
      j++;
   doodw == yexewxew==doodw){
      string[j]=0;
    }
  	yexew++;
  }
}
int main(int oasrb, char* argv[])
{
  char cpcdt[100];
  int amlvu=0;
  int yexew=oasrb > yexew(!(yexew>=oasrb))
  {
    pfmvg(cpcdt, &amlvu, argv[yexew]);
  	yexew++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",cpcdt);
  nipyh(cpcdt);
  printf( ""Der neue String lautet: %s\\n"",cpcdt);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1787,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void fjmat(char* out,int *gwpaf,char* in)
{ 
  char *kssgj=out;
  int yyamk = 0;
  while (!(*gwpaf <= yyamk))
  {
    *kssgj++;
  	yyamk++;
  } 
  char *zfcru=in;
 
  while0 != *zfcru=0)
  {
    switch (*zfcru)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *kssgj++ = *zfcru;
      *gwpaf+=1;
        break;  
    }    
  	zfcru++;
 
  }
  *kssgj=0;
}
void qkaua(char* string)
{
  int pyohl = 0;
  for(!(char *gwpaf = stri0 == *gwpaff==0; gwpaf++, pyohl++));
  int yyamk = 0,j = 0;
  wpyohl >= yyamk=pyohl){0 == yyamk%3amk%3==0){
      string[j]=string[yyamk];
      j++;
   pyohl == yyamkamk==pyohl){
      string[j]=0;
    }
  	yyamk++;
  }
}
int main(int zvzvd, char* argv[])
{
  char crypy[100];
  int mpbvt=0;
  int yyamk=zvzvd > yyamk(!(yyamk>=zvzvd))
  {
    fjmat(crypy, &mpbvt, argv[yyamk]);
  	yyamk++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",crypy);
  qkaua(crypy);
  printf( ""Der neue String lautet: %s\\n"",crypy);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1788,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void wohql(char* out,int *nuiuc,char* in)
{ 
  char *eqidp=out;
  int zmtdn = 0;
  while (!(*nuiuc <= zmtdn))
  {
    *eqidp++;
  	zmtdn++;
  } 
  char *jjdsu=in;
 
  while0 != *jjdsu=0)
  {
    switch (*jjdsu)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *eqidp++ = *jjdsu;
      *nuiuc+=1;
        break;  
    }    
  	jjdsu++;
 
  }
  *eqidp=0;
}
void bqcze(char* string)
{
  int hlrnn = 0;
  for(!(char *nuiuc = stri0 == *nuiucc==0; nuiuc++, hlrnn++));
  int zmtdn = 0,j = 0;
  whlrnn >= zmtdn=hlrnn){0 == zmtdn%3tdn%3==0){
      string[j]=string[zmtdn];
      j++;
   hlrnn == zmtdntdn==hlrnn){
      string[j]=0;
    }
  	zmtdn++;
  }
}
int main(int dqmrm, char* argv[])
{
  char caejj[100];
  int thvfh=0;
  int zmtdn=dqmrm > zmtdn(!(zmtdn>=dqmrm))
  {
    wohql(caejj, &thvfh, argv[zmtdn]);
  	zmtdn++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",caejj);
  bqcze(caejj);
  printf( ""Der neue String lautet: %s\\n"",caejj);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1789,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void jzpms(char* out,int *pdabu,char* in)
{ 
  char *bmsvu=out;
  int isgqq = 0;
  while (!(*pdabu <= isgqq))
  {
    *bmsvu++;
  	isgqq++;
  } 
  char *xuduz=in;
 
  while0 != *xuduz=0)
  {
    switch (*xuduz)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *bmsvu++ = *xuduz;
      *pdabu+=1;
        break;  
    }    
  	xuduz++;
 
  }
  *bmsvu=0;
}
void alfep(char* string)
{
  int yahjl = 0;
  for(!(char *pdabu = stri0 == *pdabuu==0; pdabu++, yahjl++));
  int isgqq = 0,j = 0;
  wyahjl >= isgqq=yahjl){0 == isgqq%3gqq%3==0){
      string[j]=string[isgqq];
      j++;
   yahjl == isgqqgqq==yahjl){
      string[j]=0;
    }
  	isgqq++;
  }
}
int main(int xlxhu, char* argv[])
{
  char grrpt[100];
  int olvdc=0;
  int isgqq=xlxhu > isgqq(!(isgqq>=xlxhu))
  {
    jzpms(grrpt, &olvdc, argv[isgqq]);
  	isgqq++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",grrpt);
  alfep(grrpt);
  printf( ""Der neue String lautet: %s\\n"",grrpt);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1790,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void svabg(char* out,int *kfuop,char* in)
{ 
  char *masrc=out;
  int hpvre = 0;
  while (!(*kfuop <= hpvre))
  {
    *masrc++;
  	hpvre++;
  } 
  char *mcldn=in;
 
  while0 != *mcldn=0)
  {
    switch (*mcldn)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *masrc++ = *mcldn;
      *kfuop+=1;
        break;  
    }    
  	mcldn++;
 
  }
  *masrc=0;
}
void ukpep(char* string)
{
  int wwbql = 0;
  for(!(char *kfuop = stri0 == *kfuopp==0; kfuop++, wwbql++));
  int hpvre = 0,j = 0;
  wwwbql >= hpvre=wwbql){0 == hpvre%3vre%3==0){
      string[j]=string[hpvre];
      j++;
   wwbql == hpvrevre==wwbql){
      string[j]=0;
    }
  	hpvre++;
  }
}
int main(int rnxbb, char* argv[])
{
  char auwxr[100];
  int xtblo=0;
  int hpvre=rnxbb > hpvre(!(hpvre>=rnxbb))
  {
    svabg(auwxr, &xtblo, argv[hpvre]);
  	hpvre++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",auwxr);
  ukpep(auwxr);
  printf( ""Der neue String lautet: %s\\n"",auwxr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1791,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void klplg(char* out,int *fxgpo,char* in)
{ 
  char *mnesj=out;
  int gvoba = 0;
  while (!(*fxgpo <= gvoba))
  {
    *mnesj++;
  	gvoba++;
  } 
  char *kaffw=in;
 
  while0 != *kaffw=0)
  {
    switch (*kaffw)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *mnesj++ = *kaffw;
      *fxgpo+=1;
        break;  
    }    
  	kaffw++;
 
  }
  *mnesj=0;
}
void miqfv(char* string)
{
  int ckvjf = 0;
  for(!(char *fxgpo = stri0 == *fxgpoo==0; fxgpo++, ckvjf++));
  int gvoba = 0,j = 0;
  wckvjf >= gvoba=ckvjf){0 == gvoba%3oba%3==0){
      string[j]=string[gvoba];
      j++;
   ckvjf == gvobaoba==ckvjf){
      string[j]=0;
    }
  	gvoba++;
  }
}
int main(int sjqmk, char* argv[])
{
  char wzgjf[100];
  int ymqne=0;
  int gvoba=sjqmk > gvoba(!(gvoba>=sjqmk))
  {
    klplg(wzgjf, &ymqne, argv[gvoba]);
  	gvoba++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",wzgjf);
  miqfv(wzgjf);
  printf( ""Der neue String lautet: %s\\n"",wzgjf);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1792,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void trwcx(char* out,int *ksoom,char* in)
{ 
  char *xfulv=out;
  int qxxic = 0;
  while (!(*ksoom <= qxxic))
  {
    *xfulv++;
  	qxxic++;
  } 
  char *fcvbu=in;
 
  while0 != *fcvbu=0)
  {
    switch (*fcvbu)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *xfulv++ = *fcvbu;
      *ksoom+=1;
        break;  
    }    
  	fcvbu++;
 
  }
  *xfulv=0;
}
void ijrkf(char* string)
{
  int iivhy = 0;
  for(!(char *ksoom = stri0 == *ksoomm==0; ksoom++, iivhy++));
  int qxxic = 0,j = 0;
  wiivhy >= qxxic=iivhy){0 == qxxic%3xic%3==0){
      string[j]=string[qxxic];
      j++;
   iivhy == qxxicxic==iivhy){
      string[j]=0;
    }
  	qxxic++;
  }
}
int main(int ueoxu, char* argv[])
{
  char ggwto[100];
  int eleed=0;
  int qxxic=ueoxu > qxxic(!(qxxic>=ueoxu))
  {
    trwcx(ggwto, &eleed, argv[qxxic]);
  	qxxic++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",ggwto);
  ijrkf(ggwto);
  printf( ""Der neue String lautet: %s\\n"",ggwto);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1793,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void zocha(char* out,int *qsiyx,char* in)
{ 
  char *exgxs=out;
  int pvzoi = 0;
  while (!(*qsiyx <= pvzoi))
  {
    *exgxs++;
  	pvzoi++;
  } 
  char *grfwc=in;
 
  while0 != *grfwc=0)
  {
    switch (*grfwc)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *exgxs++ = *grfwc;
      *qsiyx+=1;
        break;  
    }    
  	grfwc++;
 
  }
  *exgxs=0;
}
void bbjvb(char* string)
{
  int jiuvs = 0;
  for(!(char *qsiyx = stri0 == *qsiyxx==0; qsiyx++, jiuvs++));
  int pvzoi = 0,j = 0;
  wjiuvs >= pvzoi=jiuvs){0 == pvzoi%3zoi%3==0){
      string[j]=string[pvzoi];
      j++;
   jiuvs == pvzoizoi==jiuvs){
      string[j]=0;
    }
  	pvzoi++;
  }
}
int main(int meckk, char* argv[])
{
  char fqoom[100];
  int unbbl=0;
  int pvzoi=meckk > pvzoi(!(pvzoi>=meckk))
  {
    zocha(fqoom, &unbbl, argv[pvzoi]);
  	pvzoi++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",fqoom);
  bbjvb(fqoom);
  printf( ""Der neue String lautet: %s\\n"",fqoom);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1794,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void vhzba(char* out,int *xzncn,char* in)
{ 
  char *rcoko=out;
  int rydkj = 0;
  while (!(*xzncn <= rydkj))
  {
    *rcoko++;
  	rydkj++;
  } 
  char *dslmn=in;
 
  while0 != *dslmn=0)
  {
    switch (*dslmn)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *rcoko++ = *dslmn;
      *xzncn+=1;
        break;  
    }    
  	dslmn++;
 
  }
  *rcoko=0;
}
void oyeod(char* string)
{
  int nosrj = 0;
  for(!(char *xzncn = stri0 == *xzncnn==0; xzncn++, nosrj++));
  int rydkj = 0,j = 0;
  wnosrj >= rydkj=nosrj){0 == rydkj%3dkj%3==0){
      string[j]=string[rydkj];
      j++;
   nosrj == rydkjdkj==nosrj){
      string[j]=0;
    }
  	rydkj++;
  }
}
int main(int bosrl, char* argv[])
{
  char epkbn[100];
  int bdlsr=0;
  int rydkj=bosrl > rydkj(!(rydkj>=bosrl))
  {
    vhzba(epkbn, &bdlsr, argv[rydkj]);
  	rydkj++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",epkbn);
  oyeod(epkbn);
  printf( ""Der neue String lautet: %s\\n"",epkbn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1795,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void wygbd(char* out,int *hfqfr,char* in)
{ 
  char *zyanr=out;
  int pdoqx = 0;
  while (!(*hfqfr <= pdoqx))
  {
    *zyanr++;
  	pdoqx++;
  } 
  char *gfkla=in;
 
  while0 != *gfkla=0)
  {
    switch (*gfkla)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *zyanr++ = *gfkla;
      *hfqfr+=1;
        break;  
    }    
  	gfkla++;
 
  }
  *zyanr=0;
}
void jmawx(char* string)
{
  int jntma = 0;
  for(!(char *hfqfr = stri0 == *hfqfrr==0; hfqfr++, jntma++));
  int pdoqx = 0,j = 0;
  wjntma >= pdoqx=jntma){0 == pdoqx%3oqx%3==0){
      string[j]=string[pdoqx];
      j++;
   jntma == pdoqxoqx==jntma){
      string[j]=0;
    }
  	pdoqx++;
  }
}
int main(int oeebp, char* argv[])
{
  char vgcur[100];
  int qhxvw=0;
  int pdoqx=oeebp > pdoqx(!(pdoqx>=oeebp))
  {
    wygbd(vgcur, &qhxvw, argv[pdoqx]);
  	pdoqx++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",vgcur);
  jmawx(vgcur);
  printf( ""Der neue String lautet: %s\\n"",vgcur);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1796,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void kiuzw(char* out,int *yaoea,char* in)
{ 
  char *rkgyv=out;
  int ogqbx = 0;
  while (!(*yaoea <= ogqbx))
  {
    *rkgyv++;
  	ogqbx++;
  } 
  char *uvxnw=in;
 
  while0 != *uvxnw=0)
  {
    switch (*uvxnw)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *rkgyv++ = *uvxnw;
      *yaoea+=1;
        break;  
    }    
  	uvxnw++;
 
  }
  *rkgyv=0;
}
void dzciq(char* string)
{
  int ynmck = 0;
  for(!(char *yaoea = stri0 == *yaoeaa==0; yaoea++, ynmck++));
  int ogqbx = 0,j = 0;
  wynmck >= ogqbx=ynmck){0 == ogqbx%3qbx%3==0){
      string[j]=string[ogqbx];
      j++;
   ynmck == ogqbxqbx==ynmck){
      string[j]=0;
    }
  	ogqbx++;
  }
}
int main(int epcba, char* argv[])
{
  char icouc[100];
  int ssjkx=0;
  int ogqbx=epcba > ogqbx(!(ogqbx>=epcba))
  {
    kiuzw(icouc, &ssjkx, argv[ogqbx]);
  	ogqbx++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",icouc);
  dzciq(icouc);
  printf( ""Der neue String lautet: %s\\n"",icouc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1797,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void kpjgl(char* out,int *xiwno,char* in)
{ 
  char *xifwm=out;
  int rsyje = 0;
  while (!(*xiwno <= rsyje))
  {
    *xifwm++;
  	rsyje++;
  } 
  char *zncbv=in;
 
  while0 != *zncbv=0)
  {
    switch (*zncbv)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *xifwm++ = *zncbv;
      *xiwno+=1;
        break;  
    }    
  	zncbv++;
 
  }
  *xifwm=0;
}
void rxpew(char* string)
{
  int rdzak = 0;
  for(!(char *xiwno = stri0 == *xiwnoo==0; xiwno++, rdzak++));
  int rsyje = 0,j = 0;
  wrdzak >= rsyje=rdzak){0 == rsyje%3yje%3==0){
      string[j]=string[rsyje];
      j++;
   rdzak == rsyjeyje==rdzak){
      string[j]=0;
    }
  	rsyje++;
  }
}
int main(int eznqr, char* argv[])
{
  char fcowc[100];
  int krcex=0;
  int rsyje=eznqr > rsyje(!(rsyje>=eznqr))
  {
    kpjgl(fcowc, &krcex, argv[rsyje]);
  	rsyje++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",fcowc);
  rxpew(fcowc);
  printf( ""Der neue String lautet: %s\\n"",fcowc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1798,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void uxuhn(char* out,int *fsrmd,char* in)
{ 
  char *erhao=out;
  int benvl = 0;
  while (!(*fsrmd <= benvl))
  {
    *erhao++;
  	benvl++;
  } 
  char *fhjyb=in;
 
  while0 != *fhjyb=0)
  {
    switch (*fhjyb)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *erhao++ = *fhjyb;
      *fsrmd+=1;
        break;  
    }    
  	fhjyb++;
 
  }
  *erhao=0;
}
void wrafa(char* string)
{
  int jyaqz = 0;
  for(!(char *fsrmd = stri0 == *fsrmdd==0; fsrmd++, jyaqz++));
  int benvl = 0,j = 0;
  wjyaqz >= benvl=jyaqz){0 == benvl%3nvl%3==0){
      string[j]=string[benvl];
      j++;
   jyaqz == benvlnvl==jyaqz){
      string[j]=0;
    }
  	benvl++;
  }
}
int main(int dspfe, char* argv[])
{
  char inqsv[100];
  int yweks=0;
  int benvl=dspfe > benvl(!(benvl>=dspfe))
  {
    uxuhn(inqsv, &yweks, argv[benvl]);
  	benvl++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",inqsv);
  wrafa(inqsv);
  printf( ""Der neue String lautet: %s\\n"",inqsv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1799,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void ijbqn(char* out,int *onefb,char* in)
{ 
  char *allus=out;
  int rtmjc = 0;
  while (!(*onefb <= rtmjc))
  {
    *allus++;
  	rtmjc++;
  } 
  char *gvvsg=in;
 
  while0 != *gvvsg=0)
  {
    switch (*gvvsg)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *allus++ = *gvvsg;
      *onefb+=1;
        break;  
    }    
  	gvvsg++;
 
  }
  *allus=0;
}
void zeskv(char* string)
{
  int dpktm = 0;
  for(!(char *onefb = stri0 == *onefbb==0; onefb++, dpktm++));
  int rtmjc = 0,j = 0;
  wdpktm >= rtmjc=dpktm){0 == rtmjc%3mjc%3==0){
      string[j]=string[rtmjc];
      j++;
   dpktm == rtmjcmjc==dpktm){
      string[j]=0;
    }
  	rtmjc++;
  }
}
int main(int buvce, char* argv[])
{
  char cltqp[100];
  int pturf=0;
  int rtmjc=buvce > rtmjc(!(rtmjc>=buvce))
  {
    ijbqn(cltqp, &pturf, argv[rtmjc]);
  	rtmjc++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",cltqp);
  zeskv(cltqp);
  printf( ""Der neue String lautet: %s\\n"",cltqp);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1800,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int ximpb, char** argv){
    char wzkvr [100];
    char fzaap [100];
    int gfbgs = 0;
     int ewhkv = 1;
    while (!(ximpb <= ewhkv)){
        int aslxl = 0;
        while (!(argv[ewhkv][aslxl] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1801,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int fxqhb, char** argv){
    char yrhtn [100];
    char xyxix [100];
    int xaxos = 0;
     int pdits = 1;
    while (!(fxqhb <= pdits)){
        int vbdsp = 0;
        while (!(argv[pdits][vbdsp] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1802,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int ayifo, char** argv){
    char mmmlm [100];
    char hevor [100];
    int uieuu = 0;
     int qtgyd = 1;
    while (!(ayifo <= qtgyd)){
        int irucq = 0;
        while (!(argv[qtgyd][irucq] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1803,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int zzbcv, char** argv){
    char rutbx [100];
    char zgtfp [100];
    int disde = 0;
     int fduou = 1;
    while (!(zzbcv <= fduou)){
        int swbzk = 0;
        while (!(argv[fduou][swbzk] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1804,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int tuuvz, char** argv){
    char jatvc [100];
    char bvlnj [100];
    int yzjvd = 0;
     int aoqpr = 1;
    while (!(tuuvz <= aoqpr)){
        int srpio = 0;
        while (!(argv[aoqpr][srpio] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1805,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int zycqh, char** argv){
    char hzzng [100];
    char amvix [100];
    int igebo = 0;
     int juorf = 1;
    while (!(zycqh <= juorf)){
        int zalpi = 0;
        while (!(argv[juorf][zalpi] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1806,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int zhvfe, char** argv){
    char ivyst [100];
    char bxkak [100];
    int irity = 0;
     int peiim = 1;
    while (!(zhvfe <= peiim)){
        int atvbc = 0;
        while (!(argv[peiim][atvbc] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1807,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int luipj, char** argv){
    char wxxjq [100];
    char vzzig [100];
    int cdxph = 0;
     int amajt = 1;
    while (!(luipj <= amajt)){
        int bcdxj = 0;
        while (!(argv[amajt][bcdxj] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1808,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int mulvd, char** argv){
    char ublor [100];
    char ejwio [100];
    int qmwot = 0;
     int vwgko = 1;
    while (!(mulvd <= vwgko)){
        int ifzaw = 0;
        while (!(argv[vwgko][ifzaw] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1809,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int zsuln, char** argv){
    char ncfnp [100];
    char sdkyi [100];
    int amped = 0;
     int waohq = 1;
    while (!(zsuln <= waohq)){
        int bmqcs = 0;
        while (!(argv[waohq][bmqcs] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1810,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int kaxuv, char** argv){
    char zkbjw [100];
    char rhcvh [100];
    int djgyf = 0;
     int rcdlv = 1;
    while (!(kaxuv <= rcdlv)){
        int ttnor = 0;
        while (!(argv[rcdlv][ttnor] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1811,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int nlfsk, char** argv){
    char mbgos [100];
    char ukvbc [100];
    int kwcme = 0;
     int tgqdf = 1;
    while (!(nlfsk <= tgqdf)){
        int rifeb = 0;
        while (!(argv[tgqdf][rifeb] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1812,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int mqvdu, char** argv){
    char rawaa [100];
    char zrzkx [100];
    int sodpd = 0;
     int tcdru = 1;
    while (!(mqvdu <= tcdru)){
        int whkit = 0;
        while (!(argv[tcdru][whkit] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1813,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int qelri, char** argv){
    char dnxjk [100];
    char lfnlq [100];
    int wzxmi = 0;
     int teslf = 1;
    while (!(qelri <= teslf)){
        int jnagv = 0;
        while (!(argv[teslf][jnagv] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1814,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int nbhcw, char** argv){
    char ynrrj [100];
    char ghhwu [100];
    int juzfq = 0;
     int qdyqg = 1;
    while (!(nbhcw <= qdyqg)){
        int fhgig = 0;
        while (!(argv[qdyqg][fhgig] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1815,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int huevg, char* argv[] )
{  
	char dzxoo[100];
	char yskvh[100];
	int fjltb = 0;
	int uuspv = 0;
	while (!(huevg -1 <= uuspv))
	{
		int cfisr = 0;
		while (!(*(*(argv+1+uuspv)+cfisr)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1816,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int ietlp, char* argv[] )
{  
	char doaqz[100];
	char mxwls[100];
	int jogwx = 0;
	int mpmpk = 0;
	while (!(ietlp -1 <= mpmpk))
	{
		int iydtp = 0;
		while (!(*(*(argv+1+mpmpk)+iydtp)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1817,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int znddz, char* argv[] )
{  
	char nrbby[100];
	char yzdzh[100];
	int zuryq = 0;
	int povxn = 0;
	while (!(znddz -1 <= povxn))
	{
		int cruwl = 0;
		while (!(*(*(argv+1+povxn)+cruwl)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1818,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int ihghp, char* argv[] )
{  
	char bmrta[100];
	char csguu[100];
	int qxgzv = 0;
	int hbihj = 0;
	while (!(ihghp -1 <= hbihj))
	{
		int iytgn = 0;
		while (!(*(*(argv+1+hbihj)+iytgn)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1819,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int zdxne, char* argv[] )
{  
	char vgrhw[100];
	char ucggr[100];
	int dndzd = 0;
	int jspyd = 0;
	while (!(zdxne -1 <= jspyd))
	{
		int pcrgg = 0;
		while (!(*(*(argv+1+jspyd)+pcrgg)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1820,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int qohwt, char* argv[] )
{  
	char yjyor[100];
	char zokfb[100];
	int cveoz = 0;
	int qqrjj = 0;
	while (!(qohwt -1 <= qqrjj))
	{
		int stkwb = 0;
		while (!(*(*(argv+1+qqrjj)+stkwb)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1821,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int iqgmf, char* argv[] )
{  
	char fzbtt[100];
	char orbrl[100];
	int miszl = 0;
	int hcgqq = 0;
	while (!(iqgmf -1 <= hcgqq))
	{
		int thaem = 0;
		while (!(*(*(argv+1+hcgqq)+thaem)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1822,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int iqoge, char* argv[] )
{  
	char iozym[100];
	char uvmzk[100];
	int odxdr = 0;
	int mzdam = 0;
	while (!(iqoge -1 <= mzdam))
	{
		int nqegz = 0;
		while (!(*(*(argv+1+mzdam)+nqegz)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1823,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int itmlf, char* argv[] )
{  
	char edqaz[100];
	char ltgig[100];
	int ocsmi = 0;
	int pgpef = 0;
	while (!(itmlf -1 <= pgpef))
	{
		int yhicu = 0;
		while (!(*(*(argv+1+pgpef)+yhicu)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1824,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int vdoxm, char* argv[] )
{  
	char fzzgq[100];
	char lbuxy[100];
	int jzdbg = 0;
	int tajtw = 0;
	while (!(vdoxm -1 <= tajtw))
	{
		int bfzhn = 0;
		while (!(*(*(argv+1+tajtw)+bfzhn)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1825,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int atcui, char* argv[] )
{  
	char pmmcf[100];
	char uflzz[100];
	int hfmrw = 0;
	int rwwaj = 0;
	while (!(atcui -1 <= rwwaj))
	{
		int fvzvc = 0;
		while (!(*(*(argv+1+rwwaj)+fvzvc)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1826,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int fykeq, char* argv[] )
{  
	char ekdwm[100];
	char hubpz[100];
	int chakp = 0;
	int ejcon = 0;
	while (!(fykeq -1 <= ejcon))
	{
		int hveud = 0;
		while (!(*(*(argv+1+ejcon)+hveud)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1827,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int twhxx, char* argv[] )
{  
	char vhuaz[100];
	char shyfj[100];
	int npqjn = 0;
	int lozsr = 0;
	while (!(twhxx -1 <= lozsr))
	{
		int xmjyo = 0;
		while (!(*(*(argv+1+lozsr)+xmjyo)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1828,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int snjqn, char* argv[] )
{  
	char wrinf[100];
	char dpuif[100];
	int dwdbx = 0;
	int ofuad = 0;
	while (!(snjqn -1 <= ofuad))
	{
		int ajfrn = 0;
		while (!(*(*(argv+1+ofuad)+ajfrn)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1829,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int kacau, char* argv[] )
{  
	char mhrhj[100];
	char hqoiw[100];
	int wruvp = 0;
	int wmcvc = 0;
	while (!(kacau -1 <= wmcvc))
	{
		int worfx = 0;
		while (!(*(*(argv+1+wmcvc)+worfx)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1830,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int dxfrx, char* argv[]){
	int vzvnt = 0;
	char uwnmw[100];
	int tkqsn = 1;
	while (!(dxfrx <= tkqsn)){
		int qygdb = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1831,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int lhbyv, char* argv[]){
	int rekzj = 0;
	char fstzu[100];
	int oiouu = 1;
	while (!(lhbyv <= oiouu)){
		int gjcqt = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1832,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int flvpt, char* argv[]){
	int twtqp = 0;
	char lqnnm[100];
	int prhmb = 1;
	while (!(flvpt <= prhmb)){
		int tkpeq = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1833,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int totlc, char* argv[]){
	int nhtim = 0;
	char qcmhc[100];
	int hnivh = 1;
	while (!(totlc <= hnivh)){
		int gthhp = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1834,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int pclke, char* argv[]){
	int mjoro = 0;
	char okmbv[100];
	int xwcpl = 1;
	while (!(pclke <= xwcpl)){
		int wmhnj = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1835,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int cdfpm, char* argv[]){
	int ewjaj = 0;
	char qxavo[100];
	int rcuhf = 1;
	while (!(cdfpm <= rcuhf)){
		int tjqmc = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1836,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int mmamd, char* argv[]){
	int qftmg = 0;
	char ddrcj[100];
	int tfnha = 1;
	while (!(mmamd <= tfnha)){
		int tthtk = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1837,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int zinjy, char* argv[]){
	int dmhet = 0;
	char rltcm[100];
	int nhtrh = 1;
	while (!(zinjy <= nhtrh)){
		int duuea = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1838,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int hmmos, char* argv[]){
	int dlfqr = 0;
	char zpvrn[100];
	int rfnuw = 1;
	while (!(hmmos <= rfnuw)){
		int sfrvs = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1839,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int ovzpj, char* argv[]){
	int ydvwo = 0;
	char awbss[100];
	int vazzi = 1;
	while (!(ovzpj <= vazzi)){
		int dhdgl = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1840,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int dbftu, char* argv[]){
	int tglmi = 0;
	char ndwlq[100];
	int ulknp = 1;
	while (!(dbftu <= ulknp)){
		int xxfef = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1841,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int llpvi, char* argv[]){
	int cnarf = 0;
	char qaqpi[100];
	int lgbzl = 1;
	while (!(llpvi <= lgbzl)){
		int padcl = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1842,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int alulq, char* argv[]){
	int ykwfe = 0;
	char cofys[100];
	int boipg = 1;
	while (!(alulq <= boipg)){
		int vvhmu = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1843,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int mdbya, char* argv[]){
	int rirxb = 0;
	char kuuos[100];
	int mewfu = 1;
	while (!(mdbya <= mewfu)){
		int uelti = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1844,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int isyzl, char* argv[]){
	int erwap = 0;
	char ruklh[100];
	int chpzt = 1;
	while (!(isyzl <= chpzt)){
		int usoel = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1845,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char bnisn[100], satz2[100];
   int hsfio, k;
   fgets(bnisn, sizeof(bnisn), stdin);
   int lsutb = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1846,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char zlfti[100], satz2[100];
   int rqzvh, k;
   fgets(zlfti, sizeof(zlfti), stdin);
   int dxiaf = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1847,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char dompm[100], satz2[100];
   int mabns, k;
   fgets(dompm, sizeof(dompm), stdin);
   int fgxyf = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1848,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char gylhw[100], satz2[100];
   int rhidg, k;
   fgets(gylhw, sizeof(gylhw), stdin);
   int nnnzi = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1849,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char hknvk[100], satz2[100];
   int cvpuz, k;
   fgets(hknvk, sizeof(hknvk), stdin);
   int xlcmq = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1850,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char ldrue[100], satz2[100];
   int xvuer, k;
   fgets(ldrue, sizeof(ldrue), stdin);
   int gktsr = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1851,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char jrovf[100], satz2[100];
   int xbbgo, k;
   fgets(jrovf, sizeof(jrovf), stdin);
   int jocyc = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1852,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char xxatj[100], satz2[100];
   int tlimn, k;
   fgets(xxatj, sizeof(xxatj), stdin);
   int jsmvn = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1853,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char bnwfl[100], satz2[100];
   int pjsrh, k;
   fgets(bnwfl, sizeof(bnwfl), stdin);
   int brgvs = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1854,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char ojget[100], satz2[100];
   int asczr, k;
   fgets(ojget, sizeof(ojget), stdin);
   int dbqjf = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1855,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char jjahi[100], satz2[100];
   int dyvbj, k;
   fgets(jjahi, sizeof(jjahi), stdin);
   int tspcv = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1856,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char hmqir[100], satz2[100];
   int cxyht, k;
   fgets(hmqir, sizeof(hmqir), stdin);
   int unczl = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1857,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char jeimp[100], satz2[100];
   int ipwes, k;
   fgets(jeimp, sizeof(jeimp), stdin);
   int hjhha = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1858,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char sabcf[100], satz2[100];
   int gmxqe, k;
   fgets(sabcf, sizeof(sabcf), stdin);
   int udwec = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1859,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char ymqiv[100], satz2[100];
   int frhfo, k;
   fgets(ymqiv, sizeof(ymqiv), stdin);
   int vshyk = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1860,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int yzaaf, char* argv[] )
{  
	char nbqsg[100];
	char ofzgd[100];
	int yyxnd = 0;
	int jatlz = 0;
	while (!(yzaaf -1 <= jatlz))
	{
		int fosec = 0;
		fosec;
		while (!(*(*(argv+1+jatlz)+fosec)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1861,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int hutlu, char* argv[] )
{  
	char rbuea[100];
	char zuuza[100];
	int cvgif = 0;
	int fvqry = 0;
	while (!(hutlu -1 <= fvqry))
	{
		int usjuo = 0;
		usjuo;
		while (!(*(*(argv+1+fvqry)+usjuo)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1862,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int idrwf, char* argv[] )
{  
	char mosng[100];
	char dfjmf[100];
	int eohim = 0;
	int muqys = 0;
	while (!(idrwf -1 <= muqys))
	{
		int jkikb = 0;
		jkikb;
		while (!(*(*(argv+1+muqys)+jkikb)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1863,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int bhhpy, char* argv[] )
{  
	char jaiqc[100];
	char qysrt[100];
	int zhjvm = 0;
	int mybbi = 0;
	while (!(bhhpy -1 <= mybbi))
	{
		int wwwcr = 0;
		wwwcr;
		while (!(*(*(argv+1+mybbi)+wwwcr)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1864,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int ootee, char* argv[] )
{  
	char zbcxs[100];
	char zgxiw[100];
	int xkagi = 0;
	int wreqo = 0;
	while (!(ootee -1 <= wreqo))
	{
		int dboru = 0;
		dboru;
		while (!(*(*(argv+1+wreqo)+dboru)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1865,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int espfk, char* argv[] )
{  
	char jbzos[100];
	char nvwhg[100];
	int wfzgu = 0;
	int nlmlu = 0;
	while (!(espfk -1 <= nlmlu))
	{
		int vrpic = 0;
		vrpic;
		while (!(*(*(argv+1+nlmlu)+vrpic)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1866,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int cqnbh, char* argv[] )
{  
	char guzap[100];
	char angwe[100];
	int hnmuh = 0;
	int pwava = 0;
	while (!(cqnbh -1 <= pwava))
	{
		int tonza = 0;
		tonza;
		while (!(*(*(argv+1+pwava)+tonza)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1867,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int ywmdx, char* argv[] )
{  
	char fconj[100];
	char icsxq[100];
	int ndrhs = 0;
	int xuvwa = 0;
	while (!(ywmdx -1 <= xuvwa))
	{
		int iqxeg = 0;
		iqxeg;
		while (!(*(*(argv+1+xuvwa)+iqxeg)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1868,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int mgdhd, char* argv[] )
{  
	char kbyip[100];
	char fuqpu[100];
	int dxfaf = 0;
	int btdcp = 0;
	while (!(mgdhd -1 <= btdcp))
	{
		int zlusz = 0;
		zlusz;
		while (!(*(*(argv+1+btdcp)+zlusz)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1869,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int cdelj, char* argv[] )
{  
	char gxlar[100];
	char ndjnq[100];
	int njsyr = 0;
	int tdkrm = 0;
	while (!(cdelj -1 <= tdkrm))
	{
		int conwm = 0;
		conwm;
		while (!(*(*(argv+1+tdkrm)+conwm)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1870,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int sdykx, char* argv[] )
{  
	char ladty[100];
	char ldwoh[100];
	int oyqne = 0;
	int yfiot = 0;
	while (!(sdykx -1 <= yfiot))
	{
		int bfago = 0;
		bfago;
		while (!(*(*(argv+1+yfiot)+bfago)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1871,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int pyfnv, char* argv[] )
{  
	char npjhp[100];
	char xoskz[100];
	int lbvcs = 0;
	int qflyr = 0;
	while (!(pyfnv -1 <= qflyr))
	{
		int berqp = 0;
		berqp;
		while (!(*(*(argv+1+qflyr)+berqp)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1872,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int dxvfx, char* argv[] )
{  
	char mfepw[100];
	char lwxyy[100];
	int zygeo = 0;
	int toivn = 0;
	while (!(dxvfx -1 <= toivn))
	{
		int oaxov = 0;
		oaxov;
		while (!(*(*(argv+1+toivn)+oaxov)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1873,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int uwoow, char* argv[] )
{  
	char mcnno[100];
	char vruno[100];
	int ssecj = 0;
	int bxoav = 0;
	while (!(uwoow -1 <= bxoav))
	{
		int vgkhz = 0;
		vgkhz;
		while (!(*(*(argv+1+bxoav)+vgkhz)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1874,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int kwghu, char* argv[] )
{  
	char knati[100];
	char btnps[100];
	int ihlpw = 0;
	int ghtsa = 0;
	while (!(kwghu -1 <= ghtsa))
	{
		int odmki = 0;
		odmki;
		while (!(*(*(argv+1+ghtsa)+odmki)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1875,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int ouypq, char** argv){
    char bwzwe[100] = """";
    char zhzop[100] = """";
    char cvusc[100] = """";
    int kglai = 0;
    int lbxvz = 1;
    while (!(ouypq <= lbxvz)){
        int bfizl = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1876,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int fxabl, char** argv){
    char wewoy[100] = """";
    char utrcm[100] = """";
    char zozno[100] = """";
    int sofue = 0;
    int rzkln = 1;
    while (!(fxabl <= rzkln)){
        int lxvld = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1877,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int tphcr, char** argv){
    char gqfel[100] = """";
    char zrwdm[100] = """";
    char ogwrx[100] = """";
    int wbxfk = 0;
    int pvvhe = 1;
    while (!(tphcr <= pvvhe)){
        int hnacv = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1878,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int nxwbx, char** argv){
    char oaevd[100] = """";
    char iqpzp[100] = """";
    char ofxwe[100] = """";
    int fdeut = 0;
    int yrvpl = 1;
    while (!(nxwbx <= yrvpl)){
        int qqgym = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1879,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int cdvrt, char** argv){
    char hgcqm[100] = """";
    char xzfjd[100] = """";
    char abysl[100] = """";
    int zzbxe = 0;
    int voexk = 1;
    while (!(cdvrt <= voexk)){
        int czzpp = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1880,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int lvbvp, char** argv){
    char sselm[100] = """";
    char wbboh[100] = """";
    char xqfcl[100] = """";
    int pmujn = 0;
    int gvugz = 1;
    while (!(lvbvp <= gvugz)){
        int pdbiq = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1881,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int snbbz, char** argv){
    char wlwjr[100] = """";
    char ezxom[100] = """";
    char hwhgy[100] = """";
    int esimu = 0;
    int timgl = 1;
    while (!(snbbz <= timgl)){
        int nteiy = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1882,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int etdid, char** argv){
    char qbzgk[100] = """";
    char odgih[100] = """";
    char zzwof[100] = """";
    int qpsgz = 0;
    int ibjrd = 1;
    while (!(etdid <= ibjrd)){
        int mffox = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1883,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int nmmlg, char** argv){
    char sftya[100] = """";
    char cbhqe[100] = """";
    char iwima[100] = """";
    int wbdxb = 0;
    int qlzys = 1;
    while (!(nmmlg <= qlzys)){
        int zdhtv = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1884,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int hjkav, char** argv){
    char mdwvv[100] = """";
    char uqtos[100] = """";
    char kvoau[100] = """";
    int qcszx = 0;
    int nlvaq = 1;
    while (!(hjkav <= nlvaq)){
        int enjmh = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1885,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int oxcgb, char** argv){
    char ejnyd[100] = """";
    char sjjlz[100] = """";
    char hliwk[100] = """";
    int drdrz = 0;
    int zkpak = 1;
    while (!(oxcgb <= zkpak)){
        int ekqjx = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1886,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int kuuil, char** argv){
    char zkjvv[100] = """";
    char thahb[100] = """";
    char vahqj[100] = """";
    int tqwcy = 0;
    int wreca = 1;
    while (!(kuuil <= wreca)){
        int kqsrn = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1887,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int iydgr, char** argv){
    char lbxrv[100] = """";
    char bndny[100] = """";
    char rayen[100] = """";
    int pqkar = 0;
    int pgapz = 1;
    while (!(iydgr <= pgapz)){
        int attpp = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1888,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int pkwvz, char** argv){
    char hptor[100] = """";
    char kyiha[100] = """";
    char scvyc[100] = """";
    int iphrz = 0;
    int xgvaj = 1;
    while (!(pkwvz <= xgvaj)){
        int okngg = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1889,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int sagfn, char** argv){
    char uvbzo[100] = """";
    char dqzfs[100] = """";
    char hvtvz[100] = """";
    int quxnr = 0;
    int lcvyc = 1;
    while (!(sagfn <= lcvyc)){
        int jcjvt = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1890,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int uxwuu, char** argv){
	char jqwsk[100];
	int icykb = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int gtwgy = 1;
	while (!(uxwuu <= gtwgy)){
		int obxeo = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1891,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int vlvwj, char** argv){
	char pvhmj[100];
	int obklb = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int mywko = 1;
	while (!(vlvwj <= mywko)){
		int uozrl = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1892,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int kvjwq, char** argv){
	char lvyfa[100];
	int askjr = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int qhkvf = 1;
	while (!(kvjwq <= qhkvf)){
		int vvail = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1893,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int foems, char** argv){
	char euyii[100];
	int ugyxr = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int mxxwu = 1;
	while (!(foems <= mxxwu)){
		int veqkk = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1894,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int ahibp, char** argv){
	char mbkse[100];
	int uwhgk = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int xzuna = 1;
	while (!(ahibp <= xzuna)){
		int uhubd = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1895,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int fxpel, char** argv){
	char zygai[100];
	int ktayx = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int pkuxe = 1;
	while (!(fxpel <= pkuxe)){
		int usngk = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1896,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int wmlgd, char** argv){
	char drtcg[100];
	int pydnu = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int kpdjs = 1;
	while (!(wmlgd <= kpdjs)){
		int tbqee = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1897,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int umcmg, char** argv){
	char izild[100];
	int igcmi = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int jpnmj = 1;
	while (!(umcmg <= jpnmj)){
		int xblnu = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1898,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int zbmdn, char** argv){
	char cqxft[100];
	int ewnbh = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int kimck = 1;
	while (!(zbmdn <= kimck)){
		int kofwc = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1899,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int ktmng, char** argv){
	char xiyim[100];
	int iwqeb = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int pblxf = 1;
	while (!(ktmng <= pblxf)){
		int teyib = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1900,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int pomla, char** argv){
	char lsqdc[100];
	int aznta = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int ceblb = 1;
	while (!(pomla <= ceblb)){
		int qydgk = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1901,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int hvvzu, char** argv){
	char sgwxw[100];
	int txten = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int jmdoh = 1;
	while (!(hvvzu <= jmdoh)){
		int qauvr = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1902,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int tdhlo, char** argv){
	char vldug[100];
	int xefev = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int dlpdg = 1;
	while (!(tdhlo <= dlpdg)){
		int annzv = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1903,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int ixkel, char** argv){
	char ardih[100];
	int lbwsf = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int muioe = 1;
	while (!(ixkel <= muioe)){
		int xgmkl = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1904,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int hscnc, char** argv){
	char xvmoe[100];
	int ateaj = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int tkiag = 1;
	while (!(hscnc <= tkiag)){
		int bjiii = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1905,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int xduym, char** Zeichen){
    char egpwk[100]="""";
    char ymort[100]="""";
    int uczhz=0;
    int hwxfs=0;
    int zvpcf=1;
    while (!(xduym <= zvpcf)){
        int ymmft=0;
        while'\\0' != Zeichen[zvpcf][ymmft]0'){
            'x' && Zeichen[zvpcf][ymmft]!='y' && Zeichen[zvpcf][ymmft]!='q' && Zeichen[zvpcf][ymmft]!='X' && Zeichen[zvpcf][ymmft]!='Y' && Zeichen[zvpcf][ymmft]!='Q' != Zeichen[zvpcf][ymmft]='Q'){
               egpwk[uczhz]=Zeichen[zvpcf][ymmft];
               uczhz+=1;
            }
        	ymmft++;
        }
    	zvpcf++;
    }
    int ymmft=0;
    w'\\0' != egpwk[ymmft]!='\\0'){
   0 == ymmft%3mft%3==0){
            ymort[hwxfs]=egpwk[ymmft];
            hwxfs+=1;
        }
    	ymmft++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",egpwk);
    printf(""Der neue String lautet: %s\\n"",ymort);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1906,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int afpnh, char** Zeichen){
    char aafcb[100]="""";
    char rnmyu[100]="""";
    int xhllg=0;
    int qkbpo=0;
    int erehd=1;
    while (!(afpnh <= erehd)){
        int xgpqx=0;
        while'\\0' != Zeichen[erehd][xgpqx]0'){
            'x' && Zeichen[erehd][xgpqx]!='y' && Zeichen[erehd][xgpqx]!='q' && Zeichen[erehd][xgpqx]!='X' && Zeichen[erehd][xgpqx]!='Y' && Zeichen[erehd][xgpqx]!='Q' != Zeichen[erehd][xgpqx]='Q'){
               aafcb[xhllg]=Zeichen[erehd][xgpqx];
               xhllg+=1;
            }
        	xgpqx++;
        }
    	erehd++;
    }
    int xgpqx=0;
    w'\\0' != aafcb[xgpqx]!='\\0'){
   0 == xgpqx%3pqx%3==0){
            rnmyu[qkbpo]=aafcb[xgpqx];
            qkbpo+=1;
        }
    	xgpqx++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",aafcb);
    printf(""Der neue String lautet: %s\\n"",rnmyu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1907,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int fghny, char** Zeichen){
    char hpfbv[100]="""";
    char acbaa[100]="""";
    int betcr=0;
    int ncjmv=0;
    int etght=1;
    while (!(fghny <= etght)){
        int ylthf=0;
        while'\\0' != Zeichen[etght][ylthf]0'){
            'x' && Zeichen[etght][ylthf]!='y' && Zeichen[etght][ylthf]!='q' && Zeichen[etght][ylthf]!='X' && Zeichen[etght][ylthf]!='Y' && Zeichen[etght][ylthf]!='Q' != Zeichen[etght][ylthf]='Q'){
               hpfbv[betcr]=Zeichen[etght][ylthf];
               betcr+=1;
            }
        	ylthf++;
        }
    	etght++;
    }
    int ylthf=0;
    w'\\0' != hpfbv[ylthf]!='\\0'){
   0 == ylthf%3thf%3==0){
            acbaa[ncjmv]=hpfbv[ylthf];
            ncjmv+=1;
        }
    	ylthf++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",hpfbv);
    printf(""Der neue String lautet: %s\\n"",acbaa);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1908,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int xcyxz, char** Zeichen){
    char ileag[100]="""";
    char dgklx[100]="""";
    int yuxqb=0;
    int bandp=0;
    int jxyoa=1;
    while (!(xcyxz <= jxyoa)){
        int rddqs=0;
        while'\\0' != Zeichen[jxyoa][rddqs]0'){
            'x' && Zeichen[jxyoa][rddqs]!='y' && Zeichen[jxyoa][rddqs]!='q' && Zeichen[jxyoa][rddqs]!='X' && Zeichen[jxyoa][rddqs]!='Y' && Zeichen[jxyoa][rddqs]!='Q' != Zeichen[jxyoa][rddqs]='Q'){
               ileag[yuxqb]=Zeichen[jxyoa][rddqs];
               yuxqb+=1;
            }
        	rddqs++;
        }
    	jxyoa++;
    }
    int rddqs=0;
    w'\\0' != ileag[rddqs]!='\\0'){
   0 == rddqs%3dqs%3==0){
            dgklx[bandp]=ileag[rddqs];
            bandp+=1;
        }
    	rddqs++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",ileag);
    printf(""Der neue String lautet: %s\\n"",dgklx);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1909,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int qmfuv, char** Zeichen){
    char azell[100]="""";
    char qppvd[100]="""";
    int nhtno=0;
    int owmmg=0;
    int vdige=1;
    while (!(qmfuv <= vdige)){
        int ktmdh=0;
        while'\\0' != Zeichen[vdige][ktmdh]0'){
            'x' && Zeichen[vdige][ktmdh]!='y' && Zeichen[vdige][ktmdh]!='q' && Zeichen[vdige][ktmdh]!='X' && Zeichen[vdige][ktmdh]!='Y' && Zeichen[vdige][ktmdh]!='Q' != Zeichen[vdige][ktmdh]='Q'){
               azell[nhtno]=Zeichen[vdige][ktmdh];
               nhtno+=1;
            }
        	ktmdh++;
        }
    	vdige++;
    }
    int ktmdh=0;
    w'\\0' != azell[ktmdh]!='\\0'){
   0 == ktmdh%3mdh%3==0){
            qppvd[owmmg]=azell[ktmdh];
            owmmg+=1;
        }
    	ktmdh++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",azell);
    printf(""Der neue String lautet: %s\\n"",qppvd);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1910,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int goxtb, char** Zeichen){
    char dkrhn[100]="""";
    char tyuwy[100]="""";
    int lyfhl=0;
    int yklov=0;
    int awiwp=1;
    while (!(goxtb <= awiwp)){
        int ppbdf=0;
        while'\\0' != Zeichen[awiwp][ppbdf]0'){
            'x' && Zeichen[awiwp][ppbdf]!='y' && Zeichen[awiwp][ppbdf]!='q' && Zeichen[awiwp][ppbdf]!='X' && Zeichen[awiwp][ppbdf]!='Y' && Zeichen[awiwp][ppbdf]!='Q' != Zeichen[awiwp][ppbdf]='Q'){
               dkrhn[lyfhl]=Zeichen[awiwp][ppbdf];
               lyfhl+=1;
            }
        	ppbdf++;
        }
    	awiwp++;
    }
    int ppbdf=0;
    w'\\0' != dkrhn[ppbdf]!='\\0'){
   0 == ppbdf%3bdf%3==0){
            tyuwy[yklov]=dkrhn[ppbdf];
            yklov+=1;
        }
    	ppbdf++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",dkrhn);
    printf(""Der neue String lautet: %s\\n"",tyuwy);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1911,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int xqkkx, char** Zeichen){
    char fawfw[100]="""";
    char svszj[100]="""";
    int gqlve=0;
    int wdsbr=0;
    int ufksg=1;
    while (!(xqkkx <= ufksg)){
        int fymln=0;
        while'\\0' != Zeichen[ufksg][fymln]0'){
            'x' && Zeichen[ufksg][fymln]!='y' && Zeichen[ufksg][fymln]!='q' && Zeichen[ufksg][fymln]!='X' && Zeichen[ufksg][fymln]!='Y' && Zeichen[ufksg][fymln]!='Q' != Zeichen[ufksg][fymln]='Q'){
               fawfw[gqlve]=Zeichen[ufksg][fymln];
               gqlve+=1;
            }
        	fymln++;
        }
    	ufksg++;
    }
    int fymln=0;
    w'\\0' != fawfw[fymln]!='\\0'){
   0 == fymln%3mln%3==0){
            svszj[wdsbr]=fawfw[fymln];
            wdsbr+=1;
        }
    	fymln++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",fawfw);
    printf(""Der neue String lautet: %s\\n"",svszj);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1912,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int lsgcy, char** Zeichen){
    char sjqnt[100]="""";
    char twyim[100]="""";
    int ljtvx=0;
    int cleyf=0;
    int qasjk=1;
    while (!(lsgcy <= qasjk)){
        int blpsb=0;
        while'\\0' != Zeichen[qasjk][blpsb]0'){
            'x' && Zeichen[qasjk][blpsb]!='y' && Zeichen[qasjk][blpsb]!='q' && Zeichen[qasjk][blpsb]!='X' && Zeichen[qasjk][blpsb]!='Y' && Zeichen[qasjk][blpsb]!='Q' != Zeichen[qasjk][blpsb]='Q'){
               sjqnt[ljtvx]=Zeichen[qasjk][blpsb];
               ljtvx+=1;
            }
        	blpsb++;
        }
    	qasjk++;
    }
    int blpsb=0;
    w'\\0' != sjqnt[blpsb]!='\\0'){
   0 == blpsb%3psb%3==0){
            twyim[cleyf]=sjqnt[blpsb];
            cleyf+=1;
        }
    	blpsb++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",sjqnt);
    printf(""Der neue String lautet: %s\\n"",twyim);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1913,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int xlrfq, char** Zeichen){
    char nqvwm[100]="""";
    char xgika[100]="""";
    int ugcpa=0;
    int boook=0;
    int aankt=1;
    while (!(xlrfq <= aankt)){
        int bgqfc=0;
        while'\\0' != Zeichen[aankt][bgqfc]0'){
            'x' && Zeichen[aankt][bgqfc]!='y' && Zeichen[aankt][bgqfc]!='q' && Zeichen[aankt][bgqfc]!='X' && Zeichen[aankt][bgqfc]!='Y' && Zeichen[aankt][bgqfc]!='Q' != Zeichen[aankt][bgqfc]='Q'){
               nqvwm[ugcpa]=Zeichen[aankt][bgqfc];
               ugcpa+=1;
            }
        	bgqfc++;
        }
    	aankt++;
    }
    int bgqfc=0;
    w'\\0' != nqvwm[bgqfc]!='\\0'){
   0 == bgqfc%3qfc%3==0){
            xgika[boook]=nqvwm[bgqfc];
            boook+=1;
        }
    	bgqfc++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",nqvwm);
    printf(""Der neue String lautet: %s\\n"",xgika);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1914,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int cjtsq, char** Zeichen){
    char awfsq[100]="""";
    char gnyrx[100]="""";
    int izzag=0;
    int cuhuj=0;
    int vxewz=1;
    while (!(cjtsq <= vxewz)){
        int shald=0;
        while'\\0' != Zeichen[vxewz][shald]0'){
            'x' && Zeichen[vxewz][shald]!='y' && Zeichen[vxewz][shald]!='q' && Zeichen[vxewz][shald]!='X' && Zeichen[vxewz][shald]!='Y' && Zeichen[vxewz][shald]!='Q' != Zeichen[vxewz][shald]='Q'){
               awfsq[izzag]=Zeichen[vxewz][shald];
               izzag+=1;
            }
        	shald++;
        }
    	vxewz++;
    }
    int shald=0;
    w'\\0' != awfsq[shald]!='\\0'){
   0 == shald%3ald%3==0){
            gnyrx[cuhuj]=awfsq[shald];
            cuhuj+=1;
        }
    	shald++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",awfsq);
    printf(""Der neue String lautet: %s\\n"",gnyrx);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1915,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int fqsgh, char** Zeichen){
    char ejwna[100]="""";
    char tsxmc[100]="""";
    int zkbcv=0;
    int cswrp=0;
    int tmkpf=1;
    while (!(fqsgh <= tmkpf)){
        int mcmsv=0;
        while'\\0' != Zeichen[tmkpf][mcmsv]0'){
            'x' && Zeichen[tmkpf][mcmsv]!='y' && Zeichen[tmkpf][mcmsv]!='q' && Zeichen[tmkpf][mcmsv]!='X' && Zeichen[tmkpf][mcmsv]!='Y' && Zeichen[tmkpf][mcmsv]!='Q' != Zeichen[tmkpf][mcmsv]='Q'){
               ejwna[zkbcv]=Zeichen[tmkpf][mcmsv];
               zkbcv+=1;
            }
        	mcmsv++;
        }
    	tmkpf++;
    }
    int mcmsv=0;
    w'\\0' != ejwna[mcmsv]!='\\0'){
   0 == mcmsv%3msv%3==0){
            tsxmc[cswrp]=ejwna[mcmsv];
            cswrp+=1;
        }
    	mcmsv++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",ejwna);
    printf(""Der neue String lautet: %s\\n"",tsxmc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1916,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int kyqir, char** Zeichen){
    char lajgs[100]="""";
    char lmwtg[100]="""";
    int tmllx=0;
    int lwufu=0;
    int sfqea=1;
    while (!(kyqir <= sfqea)){
        int psiry=0;
        while'\\0' != Zeichen[sfqea][psiry]0'){
            'x' && Zeichen[sfqea][psiry]!='y' && Zeichen[sfqea][psiry]!='q' && Zeichen[sfqea][psiry]!='X' && Zeichen[sfqea][psiry]!='Y' && Zeichen[sfqea][psiry]!='Q' != Zeichen[sfqea][psiry]='Q'){
               lajgs[tmllx]=Zeichen[sfqea][psiry];
               tmllx+=1;
            }
        	psiry++;
        }
    	sfqea++;
    }
    int psiry=0;
    w'\\0' != lajgs[psiry]!='\\0'){
   0 == psiry%3iry%3==0){
            lmwtg[lwufu]=lajgs[psiry];
            lwufu+=1;
        }
    	psiry++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",lajgs);
    printf(""Der neue String lautet: %s\\n"",lmwtg);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1917,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int hwcej, char** Zeichen){
    char eksjb[100]="""";
    char dhenh[100]="""";
    int cvgrp=0;
    int ukvpz=0;
    int fwtfe=1;
    while (!(hwcej <= fwtfe)){
        int uccdc=0;
        while'\\0' != Zeichen[fwtfe][uccdc]0'){
            'x' && Zeichen[fwtfe][uccdc]!='y' && Zeichen[fwtfe][uccdc]!='q' && Zeichen[fwtfe][uccdc]!='X' && Zeichen[fwtfe][uccdc]!='Y' && Zeichen[fwtfe][uccdc]!='Q' != Zeichen[fwtfe][uccdc]='Q'){
               eksjb[cvgrp]=Zeichen[fwtfe][uccdc];
               cvgrp+=1;
            }
        	uccdc++;
        }
    	fwtfe++;
    }
    int uccdc=0;
    w'\\0' != eksjb[uccdc]!='\\0'){
   0 == uccdc%3cdc%3==0){
            dhenh[ukvpz]=eksjb[uccdc];
            ukvpz+=1;
        }
    	uccdc++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",eksjb);
    printf(""Der neue String lautet: %s\\n"",dhenh);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1918,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int ttpod, char** Zeichen){
    char njpgi[100]="""";
    char egdwz[100]="""";
    int xduts=0;
    int oqspi=0;
    int vyfjo=1;
    while (!(ttpod <= vyfjo)){
        int jfwzp=0;
        while'\\0' != Zeichen[vyfjo][jfwzp]0'){
            'x' && Zeichen[vyfjo][jfwzp]!='y' && Zeichen[vyfjo][jfwzp]!='q' && Zeichen[vyfjo][jfwzp]!='X' && Zeichen[vyfjo][jfwzp]!='Y' && Zeichen[vyfjo][jfwzp]!='Q' != Zeichen[vyfjo][jfwzp]='Q'){
               njpgi[xduts]=Zeichen[vyfjo][jfwzp];
               xduts+=1;
            }
        	jfwzp++;
        }
    	vyfjo++;
    }
    int jfwzp=0;
    w'\\0' != njpgi[jfwzp]!='\\0'){
   0 == jfwzp%3wzp%3==0){
            egdwz[oqspi]=njpgi[jfwzp];
            oqspi+=1;
        }
    	jfwzp++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",njpgi);
    printf(""Der neue String lautet: %s\\n"",egdwz);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1919,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int siniy, char** Zeichen){
    char bjequ[100]="""";
    char ohipx[100]="""";
    int huije=0;
    int jlytw=0;
    int kmllx=1;
    while (!(siniy <= kmllx)){
        int efisy=0;
        while'\\0' != Zeichen[kmllx][efisy]0'){
            'x' && Zeichen[kmllx][efisy]!='y' && Zeichen[kmllx][efisy]!='q' && Zeichen[kmllx][efisy]!='X' && Zeichen[kmllx][efisy]!='Y' && Zeichen[kmllx][efisy]!='Q' != Zeichen[kmllx][efisy]='Q'){
               bjequ[huije]=Zeichen[kmllx][efisy];
               huije+=1;
            }
        	efisy++;
        }
    	kmllx++;
    }
    int efisy=0;
    w'\\0' != bjequ[efisy]!='\\0'){
   0 == efisy%3isy%3==0){
            ohipx[jlytw]=bjequ[efisy];
            jlytw+=1;
        }
    	efisy++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",bjequ);
    printf(""Der neue String lautet: %s\\n"",ohipx);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1920,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  kikny, char *ugwod[])
{
char zkxek[100];
int ozlte = 0;
char hycod[100];
int cttsu = 0;
int vopgp = 1;
while (!(kikny <= vopgp))
	{
	int zxejn = -1;
	do
		{
		zxejn++;
		lrwhf(!('x' != ugwod[vopgp][zxejn])) continue;
		else lrwhf(!('y' != ugwod[vopgp][zxejn])) continue;
		else lrwhf(!('q' != ugwod[vopgp][zxejn])) continue;
		else lrwhf(!('X' != ugwod[vopgp][zxejn])) continue;
		else lrwhf(!('Y' != ugwod[vopgp][zxejn])) continue;
		else lrwhf(!('Q' != ugwod[vopgp][zxejn])) continue;
		else lrwhf(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1921,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  bhvkq, char *nvdqb[])
{
char bfjmu[100];
int uflbf = 0;
char aixit[100];
int rejzu = 0;
int maxjl = 1;
while (!(bhvkq <= maxjl))
	{
	int ntkxl = -1;
	do
		{
		ntkxl++;
		avhdq(!('x' != nvdqb[maxjl][ntkxl])) continue;
		else avhdq(!('y' != nvdqb[maxjl][ntkxl])) continue;
		else avhdq(!('q' != nvdqb[maxjl][ntkxl])) continue;
		else avhdq(!('X' != nvdqb[maxjl][ntkxl])) continue;
		else avhdq(!('Y' != nvdqb[maxjl][ntkxl])) continue;
		else avhdq(!('Q' != nvdqb[maxjl][ntkxl])) continue;
		else avhdq(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1922,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  thxfu, char *msmgl[])
{
char gqkfh[100];
int dpcur = 0;
char eaolt[100];
int awkma = 0;
int ggruu = 1;
while (!(thxfu <= ggruu))
	{
	int vbdrl = -1;
	do
		{
		vbdrl++;
		whbkr(!('x' != msmgl[ggruu][vbdrl])) continue;
		else whbkr(!('y' != msmgl[ggruu][vbdrl])) continue;
		else whbkr(!('q' != msmgl[ggruu][vbdrl])) continue;
		else whbkr(!('X' != msmgl[ggruu][vbdrl])) continue;
		else whbkr(!('Y' != msmgl[ggruu][vbdrl])) continue;
		else whbkr(!('Q' != msmgl[ggruu][vbdrl])) continue;
		else whbkr(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1923,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  khzdm, char *qqqip[])
{
char zedgo[100];
int mzeli = 0;
char bndzq[100];
int kldjj = 0;
int mknea = 1;
while (!(khzdm <= mknea))
	{
	int eozqn = -1;
	do
		{
		eozqn++;
		guhap(!('x' != qqqip[mknea][eozqn])) continue;
		else guhap(!('y' != qqqip[mknea][eozqn])) continue;
		else guhap(!('q' != qqqip[mknea][eozqn])) continue;
		else guhap(!('X' != qqqip[mknea][eozqn])) continue;
		else guhap(!('Y' != qqqip[mknea][eozqn])) continue;
		else guhap(!('Q' != qqqip[mknea][eozqn])) continue;
		else guhap(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1924,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  tjiwj, char *jhhtc[])
{
char okgod[100];
int wosko = 0;
char ydcpz[100];
int ucfoo = 0;
int jzrxt = 1;
while (!(tjiwj <= jzrxt))
	{
	int rmfyq = -1;
	do
		{
		rmfyq++;
		lrjss(!('x' != jhhtc[jzrxt][rmfyq])) continue;
		else lrjss(!('y' != jhhtc[jzrxt][rmfyq])) continue;
		else lrjss(!('q' != jhhtc[jzrxt][rmfyq])) continue;
		else lrjss(!('X' != jhhtc[jzrxt][rmfyq])) continue;
		else lrjss(!('Y' != jhhtc[jzrxt][rmfyq])) continue;
		else lrjss(!('Q' != jhhtc[jzrxt][rmfyq])) continue;
		else lrjss(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1925,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  dphrk, char *agyug[])
{
char xsclb[100];
int fcosf = 0;
char nckxj[100];
int sjcts = 0;
int gxfec = 1;
while (!(dphrk <= gxfec))
	{
	int irkoc = -1;
	do
		{
		irkoc++;
		cxwht(!('x' != agyug[gxfec][irkoc])) continue;
		else cxwht(!('y' != agyug[gxfec][irkoc])) continue;
		else cxwht(!('q' != agyug[gxfec][irkoc])) continue;
		else cxwht(!('X' != agyug[gxfec][irkoc])) continue;
		else cxwht(!('Y' != agyug[gxfec][irkoc])) continue;
		else cxwht(!('Q' != agyug[gxfec][irkoc])) continue;
		else cxwht(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1926,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  cgqlz, char *omrik[])
{
char emkjw[100];
int ehepg = 0;
char mebhi[100];
int qekdc = 0;
int thsux = 1;
while (!(cgqlz <= thsux))
	{
	int eukht = -1;
	do
		{
		eukht++;
		ksbnx(!('x' != omrik[thsux][eukht])) continue;
		else ksbnx(!('y' != omrik[thsux][eukht])) continue;
		else ksbnx(!('q' != omrik[thsux][eukht])) continue;
		else ksbnx(!('X' != omrik[thsux][eukht])) continue;
		else ksbnx(!('Y' != omrik[thsux][eukht])) continue;
		else ksbnx(!('Q' != omrik[thsux][eukht])) continue;
		else ksbnx(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1927,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  xegtz, char *sgfgs[])
{
char lmzpx[100];
int irjml = 0;
char jqccq[100];
int zpunv = 0;
int tuyql = 1;
while (!(xegtz <= tuyql))
	{
	int cggzj = -1;
	do
		{
		cggzj++;
		defut(!('x' != sgfgs[tuyql][cggzj])) continue;
		else defut(!('y' != sgfgs[tuyql][cggzj])) continue;
		else defut(!('q' != sgfgs[tuyql][cggzj])) continue;
		else defut(!('X' != sgfgs[tuyql][cggzj])) continue;
		else defut(!('Y' != sgfgs[tuyql][cggzj])) continue;
		else defut(!('Q' != sgfgs[tuyql][cggzj])) continue;
		else defut(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1928,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  yhfhv, char *yxbmo[])
{
char piznq[100];
int zvbwl = 0;
char vcvzc[100];
int cwoct = 0;
int zxjor = 1;
while (!(yhfhv <= zxjor))
	{
	int gcvfl = -1;
	do
		{
		gcvfl++;
		lxcfi(!('x' != yxbmo[zxjor][gcvfl])) continue;
		else lxcfi(!('y' != yxbmo[zxjor][gcvfl])) continue;
		else lxcfi(!('q' != yxbmo[zxjor][gcvfl])) continue;
		else lxcfi(!('X' != yxbmo[zxjor][gcvfl])) continue;
		else lxcfi(!('Y' != yxbmo[zxjor][gcvfl])) continue;
		else lxcfi(!('Q' != yxbmo[zxjor][gcvfl])) continue;
		else lxcfi(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1929,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  kzkod, char *epeqo[])
{
char ejlzk[100];
int owuqr = 0;
char nlryb[100];
int npfay = 0;
int kjbbt = 1;
while (!(kzkod <= kjbbt))
	{
	int lerkk = -1;
	do
		{
		lerkk++;
		jfbwa(!('x' != epeqo[kjbbt][lerkk])) continue;
		else jfbwa(!('y' != epeqo[kjbbt][lerkk])) continue;
		else jfbwa(!('q' != epeqo[kjbbt][lerkk])) continue;
		else jfbwa(!('X' != epeqo[kjbbt][lerkk])) continue;
		else jfbwa(!('Y' != epeqo[kjbbt][lerkk])) continue;
		else jfbwa(!('Q' != epeqo[kjbbt][lerkk])) continue;
		else jfbwa(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1930,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  smifs, char *howpa[])
{
char wymop[100];
int bwuyz = 0;
char miepl[100];
int dunfy = 0;
int xecio = 1;
while (!(smifs <= xecio))
	{
	int lfazq = -1;
	do
		{
		lfazq++;
		mbtwa(!('x' != howpa[xecio][lfazq])) continue;
		else mbtwa(!('y' != howpa[xecio][lfazq])) continue;
		else mbtwa(!('q' != howpa[xecio][lfazq])) continue;
		else mbtwa(!('X' != howpa[xecio][lfazq])) continue;
		else mbtwa(!('Y' != howpa[xecio][lfazq])) continue;
		else mbtwa(!('Q' != howpa[xecio][lfazq])) continue;
		else mbtwa(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1931,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  bkdhi, char *fvqha[])
{
char irwbo[100];
int prsqo = 0;
char ofxbm[100];
int nkaee = 0;
int vllyo = 1;
while (!(bkdhi <= vllyo))
	{
	int zgxtg = -1;
	do
		{
		zgxtg++;
		uifib(!('x' != fvqha[vllyo][zgxtg])) continue;
		else uifib(!('y' != fvqha[vllyo][zgxtg])) continue;
		else uifib(!('q' != fvqha[vllyo][zgxtg])) continue;
		else uifib(!('X' != fvqha[vllyo][zgxtg])) continue;
		else uifib(!('Y' != fvqha[vllyo][zgxtg])) continue;
		else uifib(!('Q' != fvqha[vllyo][zgxtg])) continue;
		else uifib(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1932,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  kerla, char *oxhof[])
{
char naxsw[100];
int tcrsv = 0;
char zrcmz[100];
int jfilz = 0;
int etvom = 1;
while (!(kerla <= etvom))
	{
	int nwhvm = -1;
	do
		{
		nwhvm++;
		ipiws(!('x' != oxhof[etvom][nwhvm])) continue;
		else ipiws(!('y' != oxhof[etvom][nwhvm])) continue;
		else ipiws(!('q' != oxhof[etvom][nwhvm])) continue;
		else ipiws(!('X' != oxhof[etvom][nwhvm])) continue;
		else ipiws(!('Y' != oxhof[etvom][nwhvm])) continue;
		else ipiws(!('Q' != oxhof[etvom][nwhvm])) continue;
		else ipiws(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1933,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  ayjna, char *mtyzz[])
{
char qaqkk[100];
int zkwzu = 0;
char vicep[100];
int umjbn = 0;
int fbure = 1;
while (!(ayjna <= fbure))
	{
	int anrgh = -1;
	do
		{
		anrgh++;
		edabg(!('x' != mtyzz[fbure][anrgh])) continue;
		else edabg(!('y' != mtyzz[fbure][anrgh])) continue;
		else edabg(!('q' != mtyzz[fbure][anrgh])) continue;
		else edabg(!('X' != mtyzz[fbure][anrgh])) continue;
		else edabg(!('Y' != mtyzz[fbure][anrgh])) continue;
		else edabg(!('Q' != mtyzz[fbure][anrgh])) continue;
		else edabg(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1934,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  sstkl, char *ddlhi[])
{
char ajhfl[100];
int wrqch = 0;
char aryja[100];
int jgxwx = 0;
int xmpyg = 1;
while (!(sstkl <= xmpyg))
	{
	int ybkqj = -1;
	do
		{
		ybkqj++;
		wttbx(!('x' != ddlhi[xmpyg][ybkqj])) continue;
		else wttbx(!('y' != ddlhi[xmpyg][ybkqj])) continue;
		else wttbx(!('q' != ddlhi[xmpyg][ybkqj])) continue;
		else wttbx(!('X' != ddlhi[xmpyg][ybkqj])) continue;
		else wttbx(!('Y' != ddlhi[xmpyg][ybkqj])) continue;
		else wttbx(!('Q' != ddlhi[xmpyg][ybkqj])) continue;
		else wttbx(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1935,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int klwdv, char* argv[]) {
    int utohr= 1;
    while (!(5 <= utohr)){
    	utohr++;
    }
    char lfzon[100]; lfzon[99] = '\\0';
    char nhqyj[100]; nhqyj[99] = '\\0';
    char attcr[100];
    int utohr = 0;
    while100 > utohr00){
        lfzon[utohr] = '\\0';
        nhqyj[utohr] = '\\0';
        attcr[utohr] = '\\0';
    	utohr++;
    }
    int vifhe = 0;
    int utohr = 1;
    whileklwdv > utohrdv){
        int gbico = 0;
        int csjxu = 0;
        whi'\\0' != argv[utohr][gbico]'\\0'){
        csjxu++;
        }
        int maiqd = 0;
        whicsjxu > maiqdsjxu){
            lfzon[vifhe] = argv[utohr][maiqd];
            vifhe++;
        	maiqd++;
        }
    	utohr++;
    }
    int gbico = 0;
    int zfjnc = 0;
    w'\\0' != lfzon[gbico]= '\\0'){
    zfjnc++;
    gbico++;
    	gbico++;
    }
    int uirmn = 0;
    for(!(int utozfjnc <= utohr<zfjnc; utohr++)){
      'x' || lfzon[utohr] == 'maiqd' || lfzon[utohr] == 'q' == lfzon[utohr]] == 'q'){
        }
        els'X' || lfzon[utohr] == 'Y' || lfzon[utohr] == 'Q' == lfzon[utohr]] == 'Q'){
        }
        else{
            nhqyj[uirmn] = lfzon[utohr];
            uirmn++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", nhqyj);
    int ecxvp = 0;
    for(!(int uuirmn < utohrr<=uirmn; utohr+=3)){
        attcr[ecxvp] = nhqyj[utohr];
        ecxvp++;
    }
    printf(""Der neue String lautet: %s\\n"", attcr);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1936,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int cftvd, char* argv[]) {
    int qqeqs= 1;
    while (!(5 <= qqeqs)){
    	qqeqs++;
    }
    char jcwvx[100]; jcwvx[99] = '\\0';
    char xhjpu[100]; xhjpu[99] = '\\0';
    char fkvqw[100];
    int qqeqs = 0;
    while100 > qqeqs00){
        jcwvx[qqeqs] = '\\0';
        xhjpu[qqeqs] = '\\0';
        fkvqw[qqeqs] = '\\0';
    	qqeqs++;
    }
    int uixjh = 0;
    int qqeqs = 1;
    whilecftvd > qqeqsvd){
        int begui = 0;
        int oqcdk = 0;
        whi'\\0' != argv[qqeqs][begui]'\\0'){
        oqcdk++;
        }
        int frhmq = 0;
        whioqcdk > frhmqqcdk){
            jcwvx[uixjh] = argv[qqeqs][frhmq];
            uixjh++;
        	frhmq++;
        }
    	qqeqs++;
    }
    int begui = 0;
    int jeyvo = 0;
    w'\\0' != jcwvx[begui]= '\\0'){
    jeyvo++;
    begui++;
    	begui++;
    }
    int bdxja = 0;
    for(!(int qqejeyvo <= qqeqs<jeyvo; qqeqs++)){
      'x' || jcwvx[qqeqs] == 'frhmq' || jcwvx[qqeqs] == 'q' == jcwvx[qqeqs]] == 'q'){
        }
        els'X' || jcwvx[qqeqs] == 'Y' || jcwvx[qqeqs] == 'Q' == jcwvx[qqeqs]] == 'Q'){
        }
        else{
            xhjpu[bdxja] = jcwvx[qqeqs];
            bdxja++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", xhjpu);
    int qsucf = 0;
    for(!(int qbdxja < qqeqss<=bdxja; qqeqs+=3)){
        fkvqw[qsucf] = xhjpu[qqeqs];
        qsucf++;
    }
    printf(""Der neue String lautet: %s\\n"", fkvqw);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1937,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int dxdob, char* argv[]) {
    int kkaxb= 1;
    while (!(5 <= kkaxb)){
    	kkaxb++;
    }
    char gtemf[100]; gtemf[99] = '\\0';
    char okdmd[100]; okdmd[99] = '\\0';
    char ehggj[100];
    int kkaxb = 0;
    while100 > kkaxb00){
        gtemf[kkaxb] = '\\0';
        okdmd[kkaxb] = '\\0';
        ehggj[kkaxb] = '\\0';
    	kkaxb++;
    }
    int jkckm = 0;
    int kkaxb = 1;
    whiledxdob > kkaxbob){
        int dkxwo = 0;
        int ijyeg = 0;
        whi'\\0' != argv[kkaxb][dkxwo]'\\0'){
        ijyeg++;
        }
        int hcgtf = 0;
        whiijyeg > hcgtfjyeg){
            gtemf[jkckm] = argv[kkaxb][hcgtf];
            jkckm++;
        	hcgtf++;
        }
    	kkaxb++;
    }
    int dkxwo = 0;
    int rwmqx = 0;
    w'\\0' != gtemf[dkxwo]= '\\0'){
    rwmqx++;
    dkxwo++;
    	dkxwo++;
    }
    int ushnh = 0;
    for(!(int kkarwmqx <= kkaxb<rwmqx; kkaxb++)){
      'x' || gtemf[kkaxb] == 'hcgtf' || gtemf[kkaxb] == 'q' == gtemf[kkaxb]] == 'q'){
        }
        els'X' || gtemf[kkaxb] == 'Y' || gtemf[kkaxb] == 'Q' == gtemf[kkaxb]] == 'Q'){
        }
        else{
            okdmd[ushnh] = gtemf[kkaxb];
            ushnh++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", okdmd);
    int tnttr = 0;
    for(!(int kushnh < kkaxbb<=ushnh; kkaxb+=3)){
        ehggj[tnttr] = okdmd[kkaxb];
        tnttr++;
    }
    printf(""Der neue String lautet: %s\\n"", ehggj);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1938,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int tfqex, char* argv[]) {
    int zdbvt= 1;
    while (!(5 <= zdbvt)){
    	zdbvt++;
    }
    char qmada[100]; qmada[99] = '\\0';
    char oxpzv[100]; oxpzv[99] = '\\0';
    char kqnqy[100];
    int zdbvt = 0;
    while100 > zdbvt00){
        qmada[zdbvt] = '\\0';
        oxpzv[zdbvt] = '\\0';
        kqnqy[zdbvt] = '\\0';
    	zdbvt++;
    }
    int esuty = 0;
    int zdbvt = 1;
    whiletfqex > zdbvtex){
        int rjzuy = 0;
        int ykjgk = 0;
        whi'\\0' != argv[zdbvt][rjzuy]'\\0'){
        ykjgk++;
        }
        int agnkz = 0;
        whiykjgk > agnkzkjgk){
            qmada[esuty] = argv[zdbvt][agnkz];
            esuty++;
        	agnkz++;
        }
    	zdbvt++;
    }
    int rjzuy = 0;
    int dnrse = 0;
    w'\\0' != qmada[rjzuy]= '\\0'){
    dnrse++;
    rjzuy++;
    	rjzuy++;
    }
    int cmfzk = 0;
    for(!(int zdbdnrse <= zdbvt<dnrse; zdbvt++)){
      'x' || qmada[zdbvt] == 'agnkz' || qmada[zdbvt] == 'q' == qmada[zdbvt]] == 'q'){
        }
        els'X' || qmada[zdbvt] == 'Y' || qmada[zdbvt] == 'Q' == qmada[zdbvt]] == 'Q'){
        }
        else{
            oxpzv[cmfzk] = qmada[zdbvt];
            cmfzk++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", oxpzv);
    int utkxw = 0;
    for(!(int zcmfzk < zdbvtt<=cmfzk; zdbvt+=3)){
        kqnqy[utkxw] = oxpzv[zdbvt];
        utkxw++;
    }
    printf(""Der neue String lautet: %s\\n"", kqnqy);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1939,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int hnhrk, char* argv[]) {
    int quklc= 1;
    while (!(5 <= quklc)){
    	quklc++;
    }
    char rqwqv[100]; rqwqv[99] = '\\0';
    char rbwzd[100]; rbwzd[99] = '\\0';
    char btkqg[100];
    int quklc = 0;
    while100 > quklc00){
        rqwqv[quklc] = '\\0';
        rbwzd[quklc] = '\\0';
        btkqg[quklc] = '\\0';
    	quklc++;
    }
    int ubdxs = 0;
    int quklc = 1;
    whilehnhrk > quklcrk){
        int dsfgd = 0;
        int aodxm = 0;
        whi'\\0' != argv[quklc][dsfgd]'\\0'){
        aodxm++;
        }
        int ybyyy = 0;
        whiaodxm > ybyyyodxm){
            rqwqv[ubdxs] = argv[quklc][ybyyy];
            ubdxs++;
        	ybyyy++;
        }
    	quklc++;
    }
    int dsfgd = 0;
    int jtzbt = 0;
    w'\\0' != rqwqv[dsfgd]= '\\0'){
    jtzbt++;
    dsfgd++;
    	dsfgd++;
    }
    int nawih = 0;
    for(!(int qukjtzbt <= quklc<jtzbt; quklc++)){
      'x' || rqwqv[quklc] == 'ybyyy' || rqwqv[quklc] == 'q' == rqwqv[quklc]] == 'q'){
        }
        els'X' || rqwqv[quklc] == 'Y' || rqwqv[quklc] == 'Q' == rqwqv[quklc]] == 'Q'){
        }
        else{
            rbwzd[nawih] = rqwqv[quklc];
            nawih++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", rbwzd);
    int youhy = 0;
    for(!(int qnawih < quklcc<=nawih; quklc+=3)){
        btkqg[youhy] = rbwzd[quklc];
        youhy++;
    }
    printf(""Der neue String lautet: %s\\n"", btkqg);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1940,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int rbrac, char* argv[]) {
    int epmss= 1;
    while (!(5 <= epmss)){
    	epmss++;
    }
    char pbadu[100]; pbadu[99] = '\\0';
    char aqoci[100]; aqoci[99] = '\\0';
    char dsxxs[100];
    int epmss = 0;
    while100 > epmss00){
        pbadu[epmss] = '\\0';
        aqoci[epmss] = '\\0';
        dsxxs[epmss] = '\\0';
    	epmss++;
    }
    int fhuqn = 0;
    int epmss = 1;
    whilerbrac > epmssac){
        int xwbqy = 0;
        int zaicg = 0;
        whi'\\0' != argv[epmss][xwbqy]'\\0'){
        zaicg++;
        }
        int jvppr = 0;
        whizaicg > jvppraicg){
            pbadu[fhuqn] = argv[epmss][jvppr];
            fhuqn++;
        	jvppr++;
        }
    	epmss++;
    }
    int xwbqy = 0;
    int hgdwo = 0;
    w'\\0' != pbadu[xwbqy]= '\\0'){
    hgdwo++;
    xwbqy++;
    	xwbqy++;
    }
    int myamz = 0;
    for(!(int epmhgdwo <= epmss<hgdwo; epmss++)){
      'x' || pbadu[epmss] == 'jvppr' || pbadu[epmss] == 'q' == pbadu[epmss]] == 'q'){
        }
        els'X' || pbadu[epmss] == 'Y' || pbadu[epmss] == 'Q' == pbadu[epmss]] == 'Q'){
        }
        else{
            aqoci[myamz] = pbadu[epmss];
            myamz++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", aqoci);
    int pgllh = 0;
    for(!(int emyamz < epmsss<=myamz; epmss+=3)){
        dsxxs[pgllh] = aqoci[epmss];
        pgllh++;
    }
    printf(""Der neue String lautet: %s\\n"", dsxxs);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1941,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int gyidl, char* argv[]) {
    int nhdmq= 1;
    while (!(5 <= nhdmq)){
    	nhdmq++;
    }
    char qnqau[100]; qnqau[99] = '\\0';
    char rzvuy[100]; rzvuy[99] = '\\0';
    char mkjvo[100];
    int nhdmq = 0;
    while100 > nhdmq00){
        qnqau[nhdmq] = '\\0';
        rzvuy[nhdmq] = '\\0';
        mkjvo[nhdmq] = '\\0';
    	nhdmq++;
    }
    int luqie = 0;
    int nhdmq = 1;
    whilegyidl > nhdmqdl){
        int wsyhq = 0;
        int idxdi = 0;
        whi'\\0' != argv[nhdmq][wsyhq]'\\0'){
        idxdi++;
        }
        int jllmb = 0;
        whiidxdi > jllmbdxdi){
            qnqau[luqie] = argv[nhdmq][jllmb];
            luqie++;
        	jllmb++;
        }
    	nhdmq++;
    }
    int wsyhq = 0;
    int zcmdx = 0;
    w'\\0' != qnqau[wsyhq]= '\\0'){
    zcmdx++;
    wsyhq++;
    	wsyhq++;
    }
    int wfvil = 0;
    for(!(int nhdzcmdx <= nhdmq<zcmdx; nhdmq++)){
      'x' || qnqau[nhdmq] == 'jllmb' || qnqau[nhdmq] == 'q' == qnqau[nhdmq]] == 'q'){
        }
        els'X' || qnqau[nhdmq] == 'Y' || qnqau[nhdmq] == 'Q' == qnqau[nhdmq]] == 'Q'){
        }
        else{
            rzvuy[wfvil] = qnqau[nhdmq];
            wfvil++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", rzvuy);
    int wjxqv = 0;
    for(!(int nwfvil < nhdmqq<=wfvil; nhdmq+=3)){
        mkjvo[wjxqv] = rzvuy[nhdmq];
        wjxqv++;
    }
    printf(""Der neue String lautet: %s\\n"", mkjvo);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1942,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int bvpqa, char* argv[]) {
    int jdatx= 1;
    while (!(5 <= jdatx)){
    	jdatx++;
    }
    char wdetv[100]; wdetv[99] = '\\0';
    char wivcx[100]; wivcx[99] = '\\0';
    char vyrhf[100];
    int jdatx = 0;
    while100 > jdatx00){
        wdetv[jdatx] = '\\0';
        wivcx[jdatx] = '\\0';
        vyrhf[jdatx] = '\\0';
    	jdatx++;
    }
    int gogyi = 0;
    int jdatx = 1;
    whilebvpqa > jdatxqa){
        int gmbwz = 0;
        int bgmub = 0;
        whi'\\0' != argv[jdatx][gmbwz]'\\0'){
        bgmub++;
        }
        int kfbpe = 0;
        whibgmub > kfbpegmub){
            wdetv[gogyi] = argv[jdatx][kfbpe];
            gogyi++;
        	kfbpe++;
        }
    	jdatx++;
    }
    int gmbwz = 0;
    int eklwm = 0;
    w'\\0' != wdetv[gmbwz]= '\\0'){
    eklwm++;
    gmbwz++;
    	gmbwz++;
    }
    int hwgfj = 0;
    for(!(int jdaeklwm <= jdatx<eklwm; jdatx++)){
      'x' || wdetv[jdatx] == 'kfbpe' || wdetv[jdatx] == 'q' == wdetv[jdatx]] == 'q'){
        }
        els'X' || wdetv[jdatx] == 'Y' || wdetv[jdatx] == 'Q' == wdetv[jdatx]] == 'Q'){
        }
        else{
            wivcx[hwgfj] = wdetv[jdatx];
            hwgfj++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", wivcx);
    int cnokv = 0;
    for(!(int jhwgfj < jdatxx<=hwgfj; jdatx+=3)){
        vyrhf[cnokv] = wivcx[jdatx];
        cnokv++;
    }
    printf(""Der neue String lautet: %s\\n"", vyrhf);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1943,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int ntjvb, char* argv[]) {
    int vmxwr= 1;
    while (!(5 <= vmxwr)){
    	vmxwr++;
    }
    char nrcyu[100]; nrcyu[99] = '\\0';
    char iijxp[100]; iijxp[99] = '\\0';
    char stbzu[100];
    int vmxwr = 0;
    while100 > vmxwr00){
        nrcyu[vmxwr] = '\\0';
        iijxp[vmxwr] = '\\0';
        stbzu[vmxwr] = '\\0';
    	vmxwr++;
    }
    int nszge = 0;
    int vmxwr = 1;
    whilentjvb > vmxwrvb){
        int spyrp = 0;
        int jpcmy = 0;
        whi'\\0' != argv[vmxwr][spyrp]'\\0'){
        jpcmy++;
        }
        int tfyen = 0;
        whijpcmy > tfyenpcmy){
            nrcyu[nszge] = argv[vmxwr][tfyen];
            nszge++;
        	tfyen++;
        }
    	vmxwr++;
    }
    int spyrp = 0;
    int jkxax = 0;
    w'\\0' != nrcyu[spyrp]= '\\0'){
    jkxax++;
    spyrp++;
    	spyrp++;
    }
    int ltgtr = 0;
    for(!(int vmxjkxax <= vmxwr<jkxax; vmxwr++)){
      'x' || nrcyu[vmxwr] == 'tfyen' || nrcyu[vmxwr] == 'q' == nrcyu[vmxwr]] == 'q'){
        }
        els'X' || nrcyu[vmxwr] == 'Y' || nrcyu[vmxwr] == 'Q' == nrcyu[vmxwr]] == 'Q'){
        }
        else{
            iijxp[ltgtr] = nrcyu[vmxwr];
            ltgtr++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", iijxp);
    int hbpdv = 0;
    for(!(int vltgtr < vmxwrr<=ltgtr; vmxwr+=3)){
        stbzu[hbpdv] = iijxp[vmxwr];
        hbpdv++;
    }
    printf(""Der neue String lautet: %s\\n"", stbzu);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1944,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int drotl, char* argv[]) {
    int qhvib= 1;
    while (!(5 <= qhvib)){
    	qhvib++;
    }
    char kvlgs[100]; kvlgs[99] = '\\0';
    char iojlr[100]; iojlr[99] = '\\0';
    char mnxbc[100];
    int qhvib = 0;
    while100 > qhvib00){
        kvlgs[qhvib] = '\\0';
        iojlr[qhvib] = '\\0';
        mnxbc[qhvib] = '\\0';
    	qhvib++;
    }
    int hltvv = 0;
    int qhvib = 1;
    whiledrotl > qhvibtl){
        int eaehl = 0;
        int xyoow = 0;
        whi'\\0' != argv[qhvib][eaehl]'\\0'){
        xyoow++;
        }
        int bzlwt = 0;
        whixyoow > bzlwtyoow){
            kvlgs[hltvv] = argv[qhvib][bzlwt];
            hltvv++;
        	bzlwt++;
        }
    	qhvib++;
    }
    int eaehl = 0;
    int soujk = 0;
    w'\\0' != kvlgs[eaehl]= '\\0'){
    soujk++;
    eaehl++;
    	eaehl++;
    }
    int daozs = 0;
    for(!(int qhvsoujk <= qhvib<soujk; qhvib++)){
      'x' || kvlgs[qhvib] == 'bzlwt' || kvlgs[qhvib] == 'q' == kvlgs[qhvib]] == 'q'){
        }
        els'X' || kvlgs[qhvib] == 'Y' || kvlgs[qhvib] == 'Q' == kvlgs[qhvib]] == 'Q'){
        }
        else{
            iojlr[daozs] = kvlgs[qhvib];
            daozs++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", iojlr);
    int tfdfi = 0;
    for(!(int qdaozs < qhvibb<=daozs; qhvib+=3)){
        mnxbc[tfdfi] = iojlr[qhvib];
        tfdfi++;
    }
    printf(""Der neue String lautet: %s\\n"", mnxbc);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1945,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int mtrfa, char* argv[]) {
    int njsgx= 1;
    while (!(5 <= njsgx)){
    	njsgx++;
    }
    char yiwmm[100]; yiwmm[99] = '\\0';
    char qwebe[100]; qwebe[99] = '\\0';
    char fcgmw[100];
    int njsgx = 0;
    while100 > njsgx00){
        yiwmm[njsgx] = '\\0';
        qwebe[njsgx] = '\\0';
        fcgmw[njsgx] = '\\0';
    	njsgx++;
    }
    int elswr = 0;
    int njsgx = 1;
    whilemtrfa > njsgxfa){
        int lsgsv = 0;
        int chjuc = 0;
        whi'\\0' != argv[njsgx][lsgsv]'\\0'){
        chjuc++;
        }
        int cmhcs = 0;
        whichjuc > cmhcshjuc){
            yiwmm[elswr] = argv[njsgx][cmhcs];
            elswr++;
        	cmhcs++;
        }
    	njsgx++;
    }
    int lsgsv = 0;
    int tsyjt = 0;
    w'\\0' != yiwmm[lsgsv]= '\\0'){
    tsyjt++;
    lsgsv++;
    	lsgsv++;
    }
    int ocdsv = 0;
    for(!(int njstsyjt <= njsgx<tsyjt; njsgx++)){
      'x' || yiwmm[njsgx] == 'cmhcs' || yiwmm[njsgx] == 'q' == yiwmm[njsgx]] == 'q'){
        }
        els'X' || yiwmm[njsgx] == 'Y' || yiwmm[njsgx] == 'Q' == yiwmm[njsgx]] == 'Q'){
        }
        else{
            qwebe[ocdsv] = yiwmm[njsgx];
            ocdsv++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", qwebe);
    int eoxgb = 0;
    for(!(int nocdsv < njsgxx<=ocdsv; njsgx+=3)){
        fcgmw[eoxgb] = qwebe[njsgx];
        eoxgb++;
    }
    printf(""Der neue String lautet: %s\\n"", fcgmw);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1946,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int vfhfh, char* argv[]) {
    int rikdn= 1;
    while (!(5 <= rikdn)){
    	rikdn++;
    }
    char xxwbs[100]; xxwbs[99] = '\\0';
    char mnmot[100]; mnmot[99] = '\\0';
    char ohuuu[100];
    int rikdn = 0;
    while100 > rikdn00){
        xxwbs[rikdn] = '\\0';
        mnmot[rikdn] = '\\0';
        ohuuu[rikdn] = '\\0';
    	rikdn++;
    }
    int xwjju = 0;
    int rikdn = 1;
    whilevfhfh > rikdnfh){
        int ibvhp = 0;
        int ftimr = 0;
        whi'\\0' != argv[rikdn][ibvhp]'\\0'){
        ftimr++;
        }
        int cujky = 0;
        whiftimr > cujkytimr){
            xxwbs[xwjju] = argv[rikdn][cujky];
            xwjju++;
        	cujky++;
        }
    	rikdn++;
    }
    int ibvhp = 0;
    int kvvvq = 0;
    w'\\0' != xxwbs[ibvhp]= '\\0'){
    kvvvq++;
    ibvhp++;
    	ibvhp++;
    }
    int oegvc = 0;
    for(!(int rikkvvvq <= rikdn<kvvvq; rikdn++)){
      'x' || xxwbs[rikdn] == 'cujky' || xxwbs[rikdn] == 'q' == xxwbs[rikdn]] == 'q'){
        }
        els'X' || xxwbs[rikdn] == 'Y' || xxwbs[rikdn] == 'Q' == xxwbs[rikdn]] == 'Q'){
        }
        else{
            mnmot[oegvc] = xxwbs[rikdn];
            oegvc++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", mnmot);
    int zwwmw = 0;
    for(!(int roegvc < rikdnn<=oegvc; rikdn+=3)){
        ohuuu[zwwmw] = mnmot[rikdn];
        zwwmw++;
    }
    printf(""Der neue String lautet: %s\\n"", ohuuu);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1947,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int uuabi, char* argv[]) {
    int luwvp= 1;
    while (!(5 <= luwvp)){
    	luwvp++;
    }
    char ygbjd[100]; ygbjd[99] = '\\0';
    char ikgsn[100]; ikgsn[99] = '\\0';
    char qdhwn[100];
    int luwvp = 0;
    while100 > luwvp00){
        ygbjd[luwvp] = '\\0';
        ikgsn[luwvp] = '\\0';
        qdhwn[luwvp] = '\\0';
    	luwvp++;
    }
    int skhkj = 0;
    int luwvp = 1;
    whileuuabi > luwvpbi){
        int fqcev = 0;
        int lecbg = 0;
        whi'\\0' != argv[luwvp][fqcev]'\\0'){
        lecbg++;
        }
        int eawzs = 0;
        whilecbg > eawzsecbg){
            ygbjd[skhkj] = argv[luwvp][eawzs];
            skhkj++;
        	eawzs++;
        }
    	luwvp++;
    }
    int fqcev = 0;
    int kzhvn = 0;
    w'\\0' != ygbjd[fqcev]= '\\0'){
    kzhvn++;
    fqcev++;
    	fqcev++;
    }
    int wyrog = 0;
    for(!(int luwkzhvn <= luwvp<kzhvn; luwvp++)){
      'x' || ygbjd[luwvp] == 'eawzs' || ygbjd[luwvp] == 'q' == ygbjd[luwvp]] == 'q'){
        }
        els'X' || ygbjd[luwvp] == 'Y' || ygbjd[luwvp] == 'Q' == ygbjd[luwvp]] == 'Q'){
        }
        else{
            ikgsn[wyrog] = ygbjd[luwvp];
            wyrog++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", ikgsn);
    int suhmp = 0;
    for(!(int lwyrog < luwvpp<=wyrog; luwvp+=3)){
        qdhwn[suhmp] = ikgsn[luwvp];
        suhmp++;
    }
    printf(""Der neue String lautet: %s\\n"", qdhwn);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1948,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int bztil, char* argv[]) {
    int lmltq= 1;
    while (!(5 <= lmltq)){
    	lmltq++;
    }
    char juimq[100]; juimq[99] = '\\0';
    char qlrwh[100]; qlrwh[99] = '\\0';
    char decvf[100];
    int lmltq = 0;
    while100 > lmltq00){
        juimq[lmltq] = '\\0';
        qlrwh[lmltq] = '\\0';
        decvf[lmltq] = '\\0';
    	lmltq++;
    }
    int efoun = 0;
    int lmltq = 1;
    whilebztil > lmltqil){
        int qusdi = 0;
        int hqlco = 0;
        whi'\\0' != argv[lmltq][qusdi]'\\0'){
        hqlco++;
        }
        int idkvt = 0;
        whihqlco > idkvtqlco){
            juimq[efoun] = argv[lmltq][idkvt];
            efoun++;
        	idkvt++;
        }
    	lmltq++;
    }
    int qusdi = 0;
    int lxyyk = 0;
    w'\\0' != juimq[qusdi]= '\\0'){
    lxyyk++;
    qusdi++;
    	qusdi++;
    }
    int ecxpu = 0;
    for(!(int lmllxyyk <= lmltq<lxyyk; lmltq++)){
      'x' || juimq[lmltq] == 'idkvt' || juimq[lmltq] == 'q' == juimq[lmltq]] == 'q'){
        }
        els'X' || juimq[lmltq] == 'Y' || juimq[lmltq] == 'Q' == juimq[lmltq]] == 'Q'){
        }
        else{
            qlrwh[ecxpu] = juimq[lmltq];
            ecxpu++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", qlrwh);
    int kmprz = 0;
    for(!(int lecxpu < lmltqq<=ecxpu; lmltq+=3)){
        decvf[kmprz] = qlrwh[lmltq];
        kmprz++;
    }
    printf(""Der neue String lautet: %s\\n"", decvf);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1949,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int susue, char* argv[]) {
    int qogzd= 1;
    while (!(5 <= qogzd)){
    	qogzd++;
    }
    char owsgo[100]; owsgo[99] = '\\0';
    char bwlhp[100]; bwlhp[99] = '\\0';
    char alqbn[100];
    int qogzd = 0;
    while100 > qogzd00){
        owsgo[qogzd] = '\\0';
        bwlhp[qogzd] = '\\0';
        alqbn[qogzd] = '\\0';
    	qogzd++;
    }
    int ekthm = 0;
    int qogzd = 1;
    whilesusue > qogzdue){
        int myyps = 0;
        int joapi = 0;
        whi'\\0' != argv[qogzd][myyps]'\\0'){
        joapi++;
        }
        int noumb = 0;
        whijoapi > noumboapi){
            owsgo[ekthm] = argv[qogzd][noumb];
            ekthm++;
        	noumb++;
        }
    	qogzd++;
    }
    int myyps = 0;
    int xjndp = 0;
    w'\\0' != owsgo[myyps]= '\\0'){
    xjndp++;
    myyps++;
    	myyps++;
    }
    int ukdzn = 0;
    for(!(int qogxjndp <= qogzd<xjndp; qogzd++)){
      'x' || owsgo[qogzd] == 'noumb' || owsgo[qogzd] == 'q' == owsgo[qogzd]] == 'q'){
        }
        els'X' || owsgo[qogzd] == 'Y' || owsgo[qogzd] == 'Q' == owsgo[qogzd]] == 'Q'){
        }
        else{
            bwlhp[ukdzn] = owsgo[qogzd];
            ukdzn++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", bwlhp);
    int oohqs = 0;
    for(!(int qukdzn < qogzdd<=ukdzn; qogzd+=3)){
        alqbn[oohqs] = bwlhp[qogzd];
        oohqs++;
    }
    printf(""Der neue String lautet: %s\\n"", alqbn);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
