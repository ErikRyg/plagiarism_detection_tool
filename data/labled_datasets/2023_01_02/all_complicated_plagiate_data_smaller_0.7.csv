Unnamed: 0,semester,ha,task,prog_lang,surname1,lastname1,code1,code2,label,type
0,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void ozzcm(long brdqp, long *nggrj, long *ybqhn)
	eczgy(!(0 != brdqp)){
		*nggrj = 1;
		*ybqhn = brdqp;
	else eczgy(!(1 != brdqp)){
		*nggrj = 1;
		*ybqhn = brdqp;
	else{
		long xgdcr = brdqp/2;
		for (!(; 0 == brdqp%xgdcr; xgdcr -= 1)){
			xgdcr -= 1;
		}
		*nggrj = xgdcr;
		*ybqhn = brdqp/xgdcr;
	}
}
	long brdqp, f1, f2;
	long *nggrj = &f1,*ybqhn = &f2;
	scanf(""%li"",&brdqp);
	ozzcm(brdqp,nggrj,ybqhn);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",brdqp,*nggrj,*ybqhn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void jwuxt(long dbfwy, long *csuth, long *lvssl)
	fnfyf(!(0 != dbfwy)){
		*csuth = 1;
		*lvssl = dbfwy;
	else fnfyf(!(1 != dbfwy)){
		*csuth = 1;
		*lvssl = dbfwy;
	else{
		long gblcc = dbfwy/2;
		for (!(; 0 == dbfwy%gblcc; gblcc -= 1)){
			gblcc -= 1;
		}
		*csuth = gblcc;
		*lvssl = dbfwy/gblcc;
	}
}
	long dbfwy, f1, f2;
	long *csuth = &f1,*lvssl = &f2;
	scanf(""%li"",&dbfwy);
	jwuxt(dbfwy,csuth,lvssl);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",dbfwy,*csuth,*lvssl);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void yruhm(long xbcym, long *oignw, long *yyccc)
	rojtm(!(0 != xbcym)){
		*oignw = 1;
		*yyccc = xbcym;
	else rojtm(!(1 != xbcym)){
		*oignw = 1;
		*yyccc = xbcym;
	else{
		long ywisk = xbcym/2;
		for (!(; 0 == xbcym%ywisk; ywisk -= 1)){
			ywisk -= 1;
		}
		*oignw = ywisk;
		*yyccc = xbcym/ywisk;
	}
}
	long xbcym, f1, f2;
	long *oignw = &f1,*yyccc = &f2;
	scanf(""%li"",&xbcym);
	yruhm(xbcym,oignw,yyccc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",xbcym,*oignw,*yyccc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
3,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void brhnx(long cyjxc, long *hsgzf, long *hezby)
	fyaei(!(0 != cyjxc)){
		*hsgzf = 1;
		*hezby = cyjxc;
	else fyaei(!(1 != cyjxc)){
		*hsgzf = 1;
		*hezby = cyjxc;
	else{
		long culzz = cyjxc/2;
		for (!(; 0 == cyjxc%culzz; culzz -= 1)){
			culzz -= 1;
		}
		*hsgzf = culzz;
		*hezby = cyjxc/culzz;
	}
}
	long cyjxc, f1, f2;
	long *hsgzf = &f1,*hezby = &f2;
	scanf(""%li"",&cyjxc);
	brhnx(cyjxc,hsgzf,hezby);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",cyjxc,*hsgzf,*hezby);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
4,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void fsldr(long npbpt, long *jyoxz, long *prtvu)
	ajpxq(!(0 != npbpt)){
		*jyoxz = 1;
		*prtvu = npbpt;
	else ajpxq(!(1 != npbpt)){
		*jyoxz = 1;
		*prtvu = npbpt;
	else{
		long lsvdl = npbpt/2;
		for (!(; 0 == npbpt%lsvdl; lsvdl -= 1)){
			lsvdl -= 1;
		}
		*jyoxz = lsvdl;
		*prtvu = npbpt/lsvdl;
	}
}
	long npbpt, f1, f2;
	long *jyoxz = &f1,*prtvu = &f2;
	scanf(""%li"",&npbpt);
	fsldr(npbpt,jyoxz,prtvu);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",npbpt,*jyoxz,*prtvu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
5,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void uophv(long coqoe, long *skizr, long *zgvyk)
	qemcn(!(0 != coqoe)){
		*skizr = 1;
		*zgvyk = coqoe;
	else qemcn(!(1 != coqoe)){
		*skizr = 1;
		*zgvyk = coqoe;
	else{
		long uvihx = coqoe/2;
		for (!(; 0 == coqoe%uvihx; uvihx -= 1)){
			uvihx -= 1;
		}
		*skizr = uvihx;
		*zgvyk = coqoe/uvihx;
	}
}
	long coqoe, f1, f2;
	long *skizr = &f1,*zgvyk = &f2;
	scanf(""%li"",&coqoe);
	uophv(coqoe,skizr,zgvyk);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",coqoe,*skizr,*zgvyk);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
6,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void ufkvw(long mvwdc, long *luqud, long *foviv)
	yuoid(!(0 != mvwdc)){
		*luqud = 1;
		*foviv = mvwdc;
	else yuoid(!(1 != mvwdc)){
		*luqud = 1;
		*foviv = mvwdc;
	else{
		long jyncb = mvwdc/2;
		for (!(; 0 == mvwdc%jyncb; jyncb -= 1)){
			jyncb -= 1;
		}
		*luqud = jyncb;
		*foviv = mvwdc/jyncb;
	}
}
	long mvwdc, f1, f2;
	long *luqud = &f1,*foviv = &f2;
	scanf(""%li"",&mvwdc);
	ufkvw(mvwdc,luqud,foviv);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",mvwdc,*luqud,*foviv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
7,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void bwcyh(long sgidg, long *zyvzi, long *qjtjz)
	chftw(!(0 != sgidg)){
		*zyvzi = 1;
		*qjtjz = sgidg;
	else chftw(!(1 != sgidg)){
		*zyvzi = 1;
		*qjtjz = sgidg;
	else{
		long efbae = sgidg/2;
		for (!(; 0 == sgidg%efbae; efbae -= 1)){
			efbae -= 1;
		}
		*zyvzi = efbae;
		*qjtjz = sgidg/efbae;
	}
}
	long sgidg, f1, f2;
	long *zyvzi = &f1,*qjtjz = &f2;
	scanf(""%li"",&sgidg);
	bwcyh(sgidg,zyvzi,qjtjz);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",sgidg,*zyvzi,*qjtjz);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
8,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void afzhy(long loiva, long *tnvbq, long *ofgkv)
	wtqcs(!(0 != loiva)){
		*tnvbq = 1;
		*ofgkv = loiva;
	else wtqcs(!(1 != loiva)){
		*tnvbq = 1;
		*ofgkv = loiva;
	else{
		long whgmt = loiva/2;
		for (!(; 0 == loiva%whgmt; whgmt -= 1)){
			whgmt -= 1;
		}
		*tnvbq = whgmt;
		*ofgkv = loiva/whgmt;
	}
}
	long loiva, f1, f2;
	long *tnvbq = &f1,*ofgkv = &f2;
	scanf(""%li"",&loiva);
	afzhy(loiva,tnvbq,ofgkv);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",loiva,*tnvbq,*ofgkv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
9,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void rrexj(long jhwja, long *dgpyf, long *wmuxf)
	sfnai(!(0 != jhwja)){
		*dgpyf = 1;
		*wmuxf = jhwja;
	else sfnai(!(1 != jhwja)){
		*dgpyf = 1;
		*wmuxf = jhwja;
	else{
		long jfhwa = jhwja/2;
		for (!(; 0 == jhwja%jfhwa; jfhwa -= 1)){
			jfhwa -= 1;
		}
		*dgpyf = jfhwa;
		*wmuxf = jhwja/jfhwa;
	}
}
	long jhwja, f1, f2;
	long *dgpyf = &f1,*wmuxf = &f2;
	scanf(""%li"",&jhwja);
	rrexj(jhwja,dgpyf,wmuxf);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",jhwja,*dgpyf,*wmuxf);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
10,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void tuskw(long rfkpe, long *pylqz, long *qrtqu)
	lywll(!(0 != rfkpe)){
		*pylqz = 1;
		*qrtqu = rfkpe;
	else lywll(!(1 != rfkpe)){
		*pylqz = 1;
		*qrtqu = rfkpe;
	else{
		long feiwy = rfkpe/2;
		for (!(; 0 == rfkpe%feiwy; feiwy -= 1)){
			feiwy -= 1;
		}
		*pylqz = feiwy;
		*qrtqu = rfkpe/feiwy;
	}
}
	long rfkpe, f1, f2;
	long *pylqz = &f1,*qrtqu = &f2;
	scanf(""%li"",&rfkpe);
	tuskw(rfkpe,pylqz,qrtqu);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",rfkpe,*pylqz,*qrtqu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
11,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void gmpbl(long xxrrh, long *hxehl, long *bybgs)
	yutrz(!(0 != xxrrh)){
		*hxehl = 1;
		*bybgs = xxrrh;
	else yutrz(!(1 != xxrrh)){
		*hxehl = 1;
		*bybgs = xxrrh;
	else{
		long vsvjc = xxrrh/2;
		for (!(; 0 == xxrrh%vsvjc; vsvjc -= 1)){
			vsvjc -= 1;
		}
		*hxehl = vsvjc;
		*bybgs = xxrrh/vsvjc;
	}
}
	long xxrrh, f1, f2;
	long *hxehl = &f1,*bybgs = &f2;
	scanf(""%li"",&xxrrh);
	gmpbl(xxrrh,hxehl,bybgs);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",xxrrh,*hxehl,*bybgs);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
12,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void yogia(long rxjcq, long *cyncq, long *jvjma)
	atmxu(!(0 != rxjcq)){
		*cyncq = 1;
		*jvjma = rxjcq;
	else atmxu(!(1 != rxjcq)){
		*cyncq = 1;
		*jvjma = rxjcq;
	else{
		long lcwvk = rxjcq/2;
		for (!(; 0 == rxjcq%lcwvk; lcwvk -= 1)){
			lcwvk -= 1;
		}
		*cyncq = lcwvk;
		*jvjma = rxjcq/lcwvk;
	}
}
	long rxjcq, f1, f2;
	long *cyncq = &f1,*jvjma = &f2;
	scanf(""%li"",&rxjcq);
	yogia(rxjcq,cyncq,jvjma);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",rxjcq,*cyncq,*jvjma);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
13,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void hpmfj(long ertop, long *hmaho, long *sxihl)
	bpdmk(!(0 != ertop)){
		*hmaho = 1;
		*sxihl = ertop;
	else bpdmk(!(1 != ertop)){
		*hmaho = 1;
		*sxihl = ertop;
	else{
		long hgldm = ertop/2;
		for (!(; 0 == ertop%hgldm; hgldm -= 1)){
			hgldm -= 1;
		}
		*hmaho = hgldm;
		*sxihl = ertop/hgldm;
	}
}
	long ertop, f1, f2;
	long *hmaho = &f1,*sxihl = &f2;
	scanf(""%li"",&ertop);
	hpmfj(ertop,hmaho,sxihl);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",ertop,*hmaho,*sxihl);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
14,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void blhno(long hjugp, long *pipdl, long *thsyc)
	ppmdh(!(0 != hjugp)){
		*pipdl = 1;
		*thsyc = hjugp;
	else ppmdh(!(1 != hjugp)){
		*pipdl = 1;
		*thsyc = hjugp;
	else{
		long meiuo = hjugp/2;
		for (!(; 0 == hjugp%meiuo; meiuo -= 1)){
			meiuo -= 1;
		}
		*pipdl = meiuo;
		*thsyc = hjugp/meiuo;
	}
}
	long hjugp, f1, f2;
	long *pipdl = &f1,*thsyc = &f2;
	scanf(""%li"",&hjugp);
	blhno(hjugp,pipdl,thsyc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",hjugp,*pipdl,*thsyc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
15,SoSe22,9,Antwort 8,C,VName_438,Name_438,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void usqml(long pzxfs, long *vedpk, long *hixie)
	uuqca(!(0 != pzxfs)){
		*vedpk = 1;
		*hixie = pzxfs;
	else uuqca(!(1 != pzxfs)){
		*vedpk = 1;
		*hixie = pzxfs;
	else{
		long bbchc = pzxfs/2;
		for (!(; 0 == pzxfs%bbchc; bbchc -= 1)){
			bbchc -= 1;
		}
		*vedpk = bbchc;
		*hixie = pzxfs/bbchc;
	}
}
	long pzxfs, f1, f2;
	long *vedpk = &f1,*hixie = &f2;
	scanf(""%li"",&pzxfs);
	usqml(pzxfs,vedpk,hixie);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",pzxfs,*vedpk,*hixie);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
16,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void tgdfp(long iggtg, long *xobic, long *okshf)
	uwkzl(!(0 != iggtg)){
		*xobic = 1;
		*okshf = iggtg;
	else uwkzl(!(0 != iggtg % 2)){
			*xobic = iggtg / 2;
			*okshf = (iggtg / *xobic);
		0 != });
		*xobic = kurii;
		*okshf = iggtg / *xobic;
		}
}
	else{
		long kurii = iggtg/2;
		do{
			uwkzl0 == iggtg % kurii0)
				break;
			else 
				kurii = kurii - 1;
		}while0 != iggtg % 20);
		*xobic = kurii;
		*okshf = iggtg / *xobic;
		}
}
	long iggtg;
	long xobic;
	long okshf;
	scanf(""%ld"", &iggtg);
	tgdfp(iggtg, &xobic, &okshf);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", iggtg, xobic, okshf);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
17,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void sihhb(long gdbfe, long *maguv, long *pmopu)
	uarkv(!(0 != gdbfe)){
		*maguv = 1;
		*pmopu = gdbfe;
	else uarkv(!(0 != gdbfe % 2)){
			*maguv = gdbfe / 2;
			*pmopu = (gdbfe / *maguv);
		0 != });
		*maguv = zfzhx;
		*pmopu = gdbfe / *maguv;
		}
}
	else{
		long zfzhx = gdbfe/2;
		do{
			uarkv0 == gdbfe % zfzhx0)
				break;
			else 
				zfzhx = zfzhx - 1;
		}while0 != gdbfe % 20);
		*maguv = zfzhx;
		*pmopu = gdbfe / *maguv;
		}
}
	long gdbfe;
	long maguv;
	long pmopu;
	scanf(""%ld"", &gdbfe);
	sihhb(gdbfe, &maguv, &pmopu);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", gdbfe, maguv, pmopu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
18,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void vyeqg(long usbhk, long *vpjeb, long *kzftj)
	cboky(!(0 != usbhk)){
		*vpjeb = 1;
		*kzftj = usbhk;
	else cboky(!(0 != usbhk % 2)){
			*vpjeb = usbhk / 2;
			*kzftj = (usbhk / *vpjeb);
		0 != });
		*vpjeb = kdymc;
		*kzftj = usbhk / *vpjeb;
		}
}
	else{
		long kdymc = usbhk/2;
		do{
			cboky0 == usbhk % kdymc0)
				break;
			else 
				kdymc = kdymc - 1;
		}while0 != usbhk % 20);
		*vpjeb = kdymc;
		*kzftj = usbhk / *vpjeb;
		}
}
	long usbhk;
	long vpjeb;
	long kzftj;
	scanf(""%ld"", &usbhk);
	vyeqg(usbhk, &vpjeb, &kzftj);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", usbhk, vpjeb, kzftj);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
19,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void tffjf(long pyyiw, long *wbfxd, long *ajtxc)
	utrly(!(0 != pyyiw)){
		*wbfxd = 1;
		*ajtxc = pyyiw;
	else utrly(!(0 != pyyiw % 2)){
			*wbfxd = pyyiw / 2;
			*ajtxc = (pyyiw / *wbfxd);
		0 != });
		*wbfxd = hxpwl;
		*ajtxc = pyyiw / *wbfxd;
		}
}
	else{
		long hxpwl = pyyiw/2;
		do{
			utrly0 == pyyiw % hxpwl0)
				break;
			else 
				hxpwl = hxpwl - 1;
		}while0 != pyyiw % 20);
		*wbfxd = hxpwl;
		*ajtxc = pyyiw / *wbfxd;
		}
}
	long pyyiw;
	long wbfxd;
	long ajtxc;
	scanf(""%ld"", &pyyiw);
	tffjf(pyyiw, &wbfxd, &ajtxc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pyyiw, wbfxd, ajtxc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
20,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void ogkgh(long hsfnd, long *swbru, long *qyghb)
	eoqpe(!(0 != hsfnd)){
		*swbru = 1;
		*qyghb = hsfnd;
	else eoqpe(!(0 != hsfnd % 2)){
			*swbru = hsfnd / 2;
			*qyghb = (hsfnd / *swbru);
		0 != });
		*swbru = tgxlc;
		*qyghb = hsfnd / *swbru;
		}
}
	else{
		long tgxlc = hsfnd/2;
		do{
			eoqpe0 == hsfnd % tgxlc0)
				break;
			else 
				tgxlc = tgxlc - 1;
		}while0 != hsfnd % 20);
		*swbru = tgxlc;
		*qyghb = hsfnd / *swbru;
		}
}
	long hsfnd;
	long swbru;
	long qyghb;
	scanf(""%ld"", &hsfnd);
	ogkgh(hsfnd, &swbru, &qyghb);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", hsfnd, swbru, qyghb);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
21,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void aejqc(long aqdbl, long *rlovk, long *letqg)
	oneqb(!(0 != aqdbl)){
		*rlovk = 1;
		*letqg = aqdbl;
	else oneqb(!(0 != aqdbl % 2)){
			*rlovk = aqdbl / 2;
			*letqg = (aqdbl / *rlovk);
		0 != });
		*rlovk = wsgvv;
		*letqg = aqdbl / *rlovk;
		}
}
	else{
		long wsgvv = aqdbl/2;
		do{
			oneqb0 == aqdbl % wsgvv0)
				break;
			else 
				wsgvv = wsgvv - 1;
		}while0 != aqdbl % 20);
		*rlovk = wsgvv;
		*letqg = aqdbl / *rlovk;
		}
}
	long aqdbl;
	long rlovk;
	long letqg;
	scanf(""%ld"", &aqdbl);
	aejqc(aqdbl, &rlovk, &letqg);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", aqdbl, rlovk, letqg);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
22,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void bzscp(long biwui, long *fcnfa, long *tobjo)
	htcce(!(0 != biwui)){
		*fcnfa = 1;
		*tobjo = biwui;
	else htcce(!(0 != biwui % 2)){
			*fcnfa = biwui / 2;
			*tobjo = (biwui / *fcnfa);
		0 != });
		*fcnfa = ymptg;
		*tobjo = biwui / *fcnfa;
		}
}
	else{
		long ymptg = biwui/2;
		do{
			htcce0 == biwui % ymptg0)
				break;
			else 
				ymptg = ymptg - 1;
		}while0 != biwui % 20);
		*fcnfa = ymptg;
		*tobjo = biwui / *fcnfa;
		}
}
	long biwui;
	long fcnfa;
	long tobjo;
	scanf(""%ld"", &biwui);
	bzscp(biwui, &fcnfa, &tobjo);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", biwui, fcnfa, tobjo);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
23,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void gyqua(long wxikp, long *rwvqb, long *gstho)
	pieox(!(0 != wxikp)){
		*rwvqb = 1;
		*gstho = wxikp;
	else pieox(!(0 != wxikp % 2)){
			*rwvqb = wxikp / 2;
			*gstho = (wxikp / *rwvqb);
		0 != });
		*rwvqb = bpvpz;
		*gstho = wxikp / *rwvqb;
		}
}
	else{
		long bpvpz = wxikp/2;
		do{
			pieox0 == wxikp % bpvpz0)
				break;
			else 
				bpvpz = bpvpz - 1;
		}while0 != wxikp % 20);
		*rwvqb = bpvpz;
		*gstho = wxikp / *rwvqb;
		}
}
	long wxikp;
	long rwvqb;
	long gstho;
	scanf(""%ld"", &wxikp);
	gyqua(wxikp, &rwvqb, &gstho);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", wxikp, rwvqb, gstho);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
24,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void axtsz(long uzizu, long *ycwgc, long *glnog)
	etbko(!(0 != uzizu)){
		*ycwgc = 1;
		*glnog = uzizu;
	else etbko(!(0 != uzizu % 2)){
			*ycwgc = uzizu / 2;
			*glnog = (uzizu / *ycwgc);
		0 != });
		*ycwgc = ydiul;
		*glnog = uzizu / *ycwgc;
		}
}
	else{
		long ydiul = uzizu/2;
		do{
			etbko0 == uzizu % ydiul0)
				break;
			else 
				ydiul = ydiul - 1;
		}while0 != uzizu % 20);
		*ycwgc = ydiul;
		*glnog = uzizu / *ycwgc;
		}
}
	long uzizu;
	long ycwgc;
	long glnog;
	scanf(""%ld"", &uzizu);
	axtsz(uzizu, &ycwgc, &glnog);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", uzizu, ycwgc, glnog);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
25,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void wnbyw(long akqac, long *hytlp, long *woyps)
	axdpn(!(0 != akqac)){
		*hytlp = 1;
		*woyps = akqac;
	else axdpn(!(0 != akqac % 2)){
			*hytlp = akqac / 2;
			*woyps = (akqac / *hytlp);
		0 != });
		*hytlp = nkjph;
		*woyps = akqac / *hytlp;
		}
}
	else{
		long nkjph = akqac/2;
		do{
			axdpn0 == akqac % nkjph0)
				break;
			else 
				nkjph = nkjph - 1;
		}while0 != akqac % 20);
		*hytlp = nkjph;
		*woyps = akqac / *hytlp;
		}
}
	long akqac;
	long hytlp;
	long woyps;
	scanf(""%ld"", &akqac);
	wnbyw(akqac, &hytlp, &woyps);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", akqac, hytlp, woyps);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
26,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void vamer(long wkicd, long *bmbhz, long *csqbr)
	ytnvy(!(0 != wkicd)){
		*bmbhz = 1;
		*csqbr = wkicd;
	else ytnvy(!(0 != wkicd % 2)){
			*bmbhz = wkicd / 2;
			*csqbr = (wkicd / *bmbhz);
		0 != });
		*bmbhz = goxah;
		*csqbr = wkicd / *bmbhz;
		}
}
	else{
		long goxah = wkicd/2;
		do{
			ytnvy0 == wkicd % goxah0)
				break;
			else 
				goxah = goxah - 1;
		}while0 != wkicd % 20);
		*bmbhz = goxah;
		*csqbr = wkicd / *bmbhz;
		}
}
	long wkicd;
	long bmbhz;
	long csqbr;
	scanf(""%ld"", &wkicd);
	vamer(wkicd, &bmbhz, &csqbr);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", wkicd, bmbhz, csqbr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
27,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void svaxb(long wasrt, long *dnfky, long *uveei)
	dicrw(!(0 != wasrt)){
		*dnfky = 1;
		*uveei = wasrt;
	else dicrw(!(0 != wasrt % 2)){
			*dnfky = wasrt / 2;
			*uveei = (wasrt / *dnfky);
		0 != });
		*dnfky = dcgwd;
		*uveei = wasrt / *dnfky;
		}
}
	else{
		long dcgwd = wasrt/2;
		do{
			dicrw0 == wasrt % dcgwd0)
				break;
			else 
				dcgwd = dcgwd - 1;
		}while0 != wasrt % 20);
		*dnfky = dcgwd;
		*uveei = wasrt / *dnfky;
		}
}
	long wasrt;
	long dnfky;
	long uveei;
	scanf(""%ld"", &wasrt);
	svaxb(wasrt, &dnfky, &uveei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", wasrt, dnfky, uveei);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
28,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void wsrjl(long ftcdo, long *almke, long *vowwm)
	zhqmu(!(0 != ftcdo)){
		*almke = 1;
		*vowwm = ftcdo;
	else zhqmu(!(0 != ftcdo % 2)){
			*almke = ftcdo / 2;
			*vowwm = (ftcdo / *almke);
		0 != });
		*almke = aifkd;
		*vowwm = ftcdo / *almke;
		}
}
	else{
		long aifkd = ftcdo/2;
		do{
			zhqmu0 == ftcdo % aifkd0)
				break;
			else 
				aifkd = aifkd - 1;
		}while0 != ftcdo % 20);
		*almke = aifkd;
		*vowwm = ftcdo / *almke;
		}
}
	long ftcdo;
	long almke;
	long vowwm;
	scanf(""%ld"", &ftcdo);
	wsrjl(ftcdo, &almke, &vowwm);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ftcdo, almke, vowwm);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
29,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void fceqz(long mutub, long *hywnj, long *kldez)
	bldvo(!(0 != mutub)){
		*hywnj = 1;
		*kldez = mutub;
	else bldvo(!(0 != mutub % 2)){
			*hywnj = mutub / 2;
			*kldez = (mutub / *hywnj);
		0 != });
		*hywnj = tqsmm;
		*kldez = mutub / *hywnj;
		}
}
	else{
		long tqsmm = mutub/2;
		do{
			bldvo0 == mutub % tqsmm0)
				break;
			else 
				tqsmm = tqsmm - 1;
		}while0 != mutub % 20);
		*hywnj = tqsmm;
		*kldez = mutub / *hywnj;
		}
}
	long mutub;
	long hywnj;
	long kldez;
	scanf(""%ld"", &mutub);
	fceqz(mutub, &hywnj, &kldez);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", mutub, hywnj, kldez);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
30,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void fglwi(long ribag, long *demjw, long *uwgnn)
	pcrzb(!(0 != ribag)){
		*demjw = 1;
		*uwgnn = ribag;
	else pcrzb(!(0 != ribag % 2)){
			*demjw = ribag / 2;
			*uwgnn = (ribag / *demjw);
		0 != });
		*demjw = poaop;
		*uwgnn = ribag / *demjw;
		}
}
	else{
		long poaop = ribag/2;
		do{
			pcrzb0 == ribag % poaop0)
				break;
			else 
				poaop = poaop - 1;
		}while0 != ribag % 20);
		*demjw = poaop;
		*uwgnn = ribag / *demjw;
		}
}
	long ribag;
	long demjw;
	long uwgnn;
	scanf(""%ld"", &ribag);
	fglwi(ribag, &demjw, &uwgnn);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ribag, demjw, uwgnn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
31,SoSe22,9,Antwort 8,C,VName_54,Name_54,"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void gweun(long svflz, long *uhivl, long *kixlh)
	enzxs(!(0 != svflz)){
		*uhivl = 1;
		*kixlh = svflz;
	else enzxs(!(0 != svflz % 2)){
			*uhivl = svflz / 2;
			*kixlh = (svflz / *uhivl);
		0 != });
		*uhivl = phftn;
		*kixlh = svflz / *uhivl;
		}
}
	else{
		long phftn = svflz/2;
		do{
			enzxs0 == svflz % phftn0)
				break;
			else 
				phftn = phftn - 1;
		}while0 != svflz % 20);
		*uhivl = phftn;
		*kixlh = svflz / *uhivl;
		}
}
	long svflz;
	long uhivl;
	long kixlh;
	scanf(""%ld"", &svflz);
	gweun(svflz, &uhivl, &kixlh);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", svflz, uhivl, kixlh);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
32,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void rswws(long hvdxf, long *gvmba, long *gswpi)
	if (!(0 != hvdxf)) {
		*gvmba = 1;
		*gswpi = hvdxf;
		return;
	if (!(1 != hvdxf)) {
		*gvmba = 1;  
		*gswpi = hvdxf;
		return;
	long owbjv = 2;
	while (!(hvdxf/2 <= owbjv)) {
		if (!(0 != hvdxf % owbjv)) {
			*gswpi = owbjv;
			*gvmba = hvdxf/owbjv;
			return;	
		}
		++owbjv;
	}
	*gvmba = 1;
	*gswpi = hvdxf;
}
	long hvdxf;
	long gvmba;
	long gswpi;
	scanf (""%ld"", &hvdxf);
	rswws (hvdxf, &gvmba, &gswpi);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", hvdxf, gvmba, gswpi);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
33,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void azuzz(long ttoqb, long *bkfho, long *tqphy)
	if (!(0 != ttoqb)) {
		*bkfho = 1;
		*tqphy = ttoqb;
		return;
	if (!(1 != ttoqb)) {
		*bkfho = 1;  
		*tqphy = ttoqb;
		return;
	long tejnf = 2;
	while (!(ttoqb/2 <= tejnf)) {
		if (!(0 != ttoqb % tejnf)) {
			*tqphy = tejnf;
			*bkfho = ttoqb/tejnf;
			return;	
		}
		++tejnf;
	}
	*bkfho = 1;
	*tqphy = ttoqb;
}
	long ttoqb;
	long bkfho;
	long tqphy;
	scanf (""%ld"", &ttoqb);
	azuzz (ttoqb, &bkfho, &tqphy);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ttoqb, bkfho, tqphy);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
34,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void fsrcj(long fpvpv, long *plyzh, long *otkuz)
	if (!(0 != fpvpv)) {
		*plyzh = 1;
		*otkuz = fpvpv;
		return;
	if (!(1 != fpvpv)) {
		*plyzh = 1;  
		*otkuz = fpvpv;
		return;
	long fbkpm = 2;
	while (!(fpvpv/2 <= fbkpm)) {
		if (!(0 != fpvpv % fbkpm)) {
			*otkuz = fbkpm;
			*plyzh = fpvpv/fbkpm;
			return;	
		}
		++fbkpm;
	}
	*plyzh = 1;
	*otkuz = fpvpv;
}
	long fpvpv;
	long plyzh;
	long otkuz;
	scanf (""%ld"", &fpvpv);
	fsrcj (fpvpv, &plyzh, &otkuz);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", fpvpv, plyzh, otkuz);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
35,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void psgkm(long tbnwj, long *jmogf, long *zqvdn)
	if (!(0 != tbnwj)) {
		*jmogf = 1;
		*zqvdn = tbnwj;
		return;
	if (!(1 != tbnwj)) {
		*jmogf = 1;  
		*zqvdn = tbnwj;
		return;
	long cvbjd = 2;
	while (!(tbnwj/2 <= cvbjd)) {
		if (!(0 != tbnwj % cvbjd)) {
			*zqvdn = cvbjd;
			*jmogf = tbnwj/cvbjd;
			return;	
		}
		++cvbjd;
	}
	*jmogf = 1;
	*zqvdn = tbnwj;
}
	long tbnwj;
	long jmogf;
	long zqvdn;
	scanf (""%ld"", &tbnwj);
	psgkm (tbnwj, &jmogf, &zqvdn);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", tbnwj, jmogf, zqvdn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
36,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void wmdwg(long zqbks, long *tcomq, long *cyoxc)
	if (!(0 != zqbks)) {
		*tcomq = 1;
		*cyoxc = zqbks;
		return;
	if (!(1 != zqbks)) {
		*tcomq = 1;  
		*cyoxc = zqbks;
		return;
	long xtxuu = 2;
	while (!(zqbks/2 <= xtxuu)) {
		if (!(0 != zqbks % xtxuu)) {
			*cyoxc = xtxuu;
			*tcomq = zqbks/xtxuu;
			return;	
		}
		++xtxuu;
	}
	*tcomq = 1;
	*cyoxc = zqbks;
}
	long zqbks;
	long tcomq;
	long cyoxc;
	scanf (""%ld"", &zqbks);
	wmdwg (zqbks, &tcomq, &cyoxc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zqbks, tcomq, cyoxc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
37,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void jngfq(long ymgkj, long *ixjnu, long *mtufz)
	if (!(0 != ymgkj)) {
		*ixjnu = 1;
		*mtufz = ymgkj;
		return;
	if (!(1 != ymgkj)) {
		*ixjnu = 1;  
		*mtufz = ymgkj;
		return;
	long zhvog = 2;
	while (!(ymgkj/2 <= zhvog)) {
		if (!(0 != ymgkj % zhvog)) {
			*mtufz = zhvog;
			*ixjnu = ymgkj/zhvog;
			return;	
		}
		++zhvog;
	}
	*ixjnu = 1;
	*mtufz = ymgkj;
}
	long ymgkj;
	long ixjnu;
	long mtufz;
	scanf (""%ld"", &ymgkj);
	jngfq (ymgkj, &ixjnu, &mtufz);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ymgkj, ixjnu, mtufz);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
38,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void iverj(long lrkuf, long *jhwea, long *uyqox)
	if (!(0 != lrkuf)) {
		*jhwea = 1;
		*uyqox = lrkuf;
		return;
	if (!(1 != lrkuf)) {
		*jhwea = 1;  
		*uyqox = lrkuf;
		return;
	long vjupx = 2;
	while (!(lrkuf/2 <= vjupx)) {
		if (!(0 != lrkuf % vjupx)) {
			*uyqox = vjupx;
			*jhwea = lrkuf/vjupx;
			return;	
		}
		++vjupx;
	}
	*jhwea = 1;
	*uyqox = lrkuf;
}
	long lrkuf;
	long jhwea;
	long uyqox;
	scanf (""%ld"", &lrkuf);
	iverj (lrkuf, &jhwea, &uyqox);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", lrkuf, jhwea, uyqox);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
39,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void qegsv(long kiqxq, long *wvtph, long *hsxcq)
	if (!(0 != kiqxq)) {
		*wvtph = 1;
		*hsxcq = kiqxq;
		return;
	if (!(1 != kiqxq)) {
		*wvtph = 1;  
		*hsxcq = kiqxq;
		return;
	long dwspg = 2;
	while (!(kiqxq/2 <= dwspg)) {
		if (!(0 != kiqxq % dwspg)) {
			*hsxcq = dwspg;
			*wvtph = kiqxq/dwspg;
			return;	
		}
		++dwspg;
	}
	*wvtph = 1;
	*hsxcq = kiqxq;
}
	long kiqxq;
	long wvtph;
	long hsxcq;
	scanf (""%ld"", &kiqxq);
	qegsv (kiqxq, &wvtph, &hsxcq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", kiqxq, wvtph, hsxcq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
40,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void rvpno(long awkaz, long *mkroz, long *jmrcc)
	if (!(0 != awkaz)) {
		*mkroz = 1;
		*jmrcc = awkaz;
		return;
	if (!(1 != awkaz)) {
		*mkroz = 1;  
		*jmrcc = awkaz;
		return;
	long qaqmg = 2;
	while (!(awkaz/2 <= qaqmg)) {
		if (!(0 != awkaz % qaqmg)) {
			*jmrcc = qaqmg;
			*mkroz = awkaz/qaqmg;
			return;	
		}
		++qaqmg;
	}
	*mkroz = 1;
	*jmrcc = awkaz;
}
	long awkaz;
	long mkroz;
	long jmrcc;
	scanf (""%ld"", &awkaz);
	rvpno (awkaz, &mkroz, &jmrcc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", awkaz, mkroz, jmrcc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
41,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void aneyk(long ypdls, long *pigeb, long *hmyxq)
	if (!(0 != ypdls)) {
		*pigeb = 1;
		*hmyxq = ypdls;
		return;
	if (!(1 != ypdls)) {
		*pigeb = 1;  
		*hmyxq = ypdls;
		return;
	long gpmpt = 2;
	while (!(ypdls/2 <= gpmpt)) {
		if (!(0 != ypdls % gpmpt)) {
			*hmyxq = gpmpt;
			*pigeb = ypdls/gpmpt;
			return;	
		}
		++gpmpt;
	}
	*pigeb = 1;
	*hmyxq = ypdls;
}
	long ypdls;
	long pigeb;
	long hmyxq;
	scanf (""%ld"", &ypdls);
	aneyk (ypdls, &pigeb, &hmyxq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ypdls, pigeb, hmyxq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
42,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void rkbvs(long wpxmh, long *gvvuy, long *oucis)
	if (!(0 != wpxmh)) {
		*gvvuy = 1;
		*oucis = wpxmh;
		return;
	if (!(1 != wpxmh)) {
		*gvvuy = 1;  
		*oucis = wpxmh;
		return;
	long chlhu = 2;
	while (!(wpxmh/2 <= chlhu)) {
		if (!(0 != wpxmh % chlhu)) {
			*oucis = chlhu;
			*gvvuy = wpxmh/chlhu;
			return;	
		}
		++chlhu;
	}
	*gvvuy = 1;
	*oucis = wpxmh;
}
	long wpxmh;
	long gvvuy;
	long oucis;
	scanf (""%ld"", &wpxmh);
	rkbvs (wpxmh, &gvvuy, &oucis);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", wpxmh, gvvuy, oucis);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
43,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void uvuva(long bkgry, long *vkzus, long *gvfkz)
	if (!(0 != bkgry)) {
		*vkzus = 1;
		*gvfkz = bkgry;
		return;
	if (!(1 != bkgry)) {
		*vkzus = 1;  
		*gvfkz = bkgry;
		return;
	long aemwg = 2;
	while (!(bkgry/2 <= aemwg)) {
		if (!(0 != bkgry % aemwg)) {
			*gvfkz = aemwg;
			*vkzus = bkgry/aemwg;
			return;	
		}
		++aemwg;
	}
	*vkzus = 1;
	*gvfkz = bkgry;
}
	long bkgry;
	long vkzus;
	long gvfkz;
	scanf (""%ld"", &bkgry);
	uvuva (bkgry, &vkzus, &gvfkz);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", bkgry, vkzus, gvfkz);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
44,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void ofsgk(long tnfwa, long *dlnrm, long *vmusu)
	if (!(0 != tnfwa)) {
		*dlnrm = 1;
		*vmusu = tnfwa;
		return;
	if (!(1 != tnfwa)) {
		*dlnrm = 1;  
		*vmusu = tnfwa;
		return;
	long zuqpr = 2;
	while (!(tnfwa/2 <= zuqpr)) {
		if (!(0 != tnfwa % zuqpr)) {
			*vmusu = zuqpr;
			*dlnrm = tnfwa/zuqpr;
			return;	
		}
		++zuqpr;
	}
	*dlnrm = 1;
	*vmusu = tnfwa;
}
	long tnfwa;
	long dlnrm;
	long vmusu;
	scanf (""%ld"", &tnfwa);
	ofsgk (tnfwa, &dlnrm, &vmusu);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", tnfwa, dlnrm, vmusu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
45,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void mtevl(long xaxkt, long *ukraj, long *tblwr)
	if (!(0 != xaxkt)) {
		*ukraj = 1;
		*tblwr = xaxkt;
		return;
	if (!(1 != xaxkt)) {
		*ukraj = 1;  
		*tblwr = xaxkt;
		return;
	long poclq = 2;
	while (!(xaxkt/2 <= poclq)) {
		if (!(0 != xaxkt % poclq)) {
			*tblwr = poclq;
			*ukraj = xaxkt/poclq;
			return;	
		}
		++poclq;
	}
	*ukraj = 1;
	*tblwr = xaxkt;
}
	long xaxkt;
	long ukraj;
	long tblwr;
	scanf (""%ld"", &xaxkt);
	mtevl (xaxkt, &ukraj, &tblwr);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", xaxkt, ukraj, tblwr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
46,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void blivn(long jzspx, long *mcuoj, long *ydagd)
	if (!(0 != jzspx)) {
		*mcuoj = 1;
		*ydagd = jzspx;
		return;
	if (!(1 != jzspx)) {
		*mcuoj = 1;  
		*ydagd = jzspx;
		return;
	long vazco = 2;
	while (!(jzspx/2 <= vazco)) {
		if (!(0 != jzspx % vazco)) {
			*ydagd = vazco;
			*mcuoj = jzspx/vazco;
			return;	
		}
		++vazco;
	}
	*mcuoj = 1;
	*ydagd = jzspx;
}
	long jzspx;
	long mcuoj;
	long ydagd;
	scanf (""%ld"", &jzspx);
	blivn (jzspx, &mcuoj, &ydagd);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", jzspx, mcuoj, ydagd);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
47,SoSe22,9,Antwort 8,C,VName_463,Name_463,"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void pvypv(long rgszs, long *rvecp, long *saxzn)
	if (!(0 != rgszs)) {
		*rvecp = 1;
		*saxzn = rgszs;
		return;
	if (!(1 != rgszs)) {
		*rvecp = 1;  
		*saxzn = rgszs;
		return;
	long micmo = 2;
	while (!(rgszs/2 <= micmo)) {
		if (!(0 != rgszs % micmo)) {
			*saxzn = micmo;
			*rvecp = rgszs/micmo;
			return;	
		}
		++micmo;
	}
	*rvecp = 1;
	*saxzn = rgszs;
}
	long rgszs;
	long rvecp;
	long saxzn;
	scanf (""%ld"", &rgszs);
	pvypv (rgszs, &rvecp, &saxzn);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", rgszs, rvecp, saxzn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
48,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void drlwu(long yhxwq, long *trzfw, long *uqkvz)
	if (!(2 <= yhxwq)){
		*trzfw=1;
		*uqkvz=yhxwq;
	else{
		*trzfw=yhxwq/2;
		for (!(1 >= *trzfw>1; break)){
			0 != yhxwq%*trzfww!=0){
				*trzfw=*trzfw-1;
			else{
				break;
			}
		}
		*uqkvz=yhxwq/ *trzfw;
	}
}
	long yhxwq;
	scanf(""%ld"",&yhxwq);
	long mziek;
	long dwloq;
	long *trzfw=&mziek;
	long *uqkvz=&dwloq;
	drlwu(yhxwq, trzfw, uqkvz);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",yhxwq,mziek,dwloq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
49,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void uvvay(long kyhby, long *bvewr, long *aehvt)
	if (!(2 <= kyhby)){
		*bvewr=1;
		*aehvt=kyhby;
	else{
		*bvewr=kyhby/2;
		for (!(1 >= *bvewr>1; break)){
			0 != kyhby%*bvewrr!=0){
				*bvewr=*bvewr-1;
			else{
				break;
			}
		}
		*aehvt=kyhby/ *bvewr;
	}
}
	long kyhby;
	scanf(""%ld"",&kyhby);
	long okqsd;
	long dbrpm;
	long *bvewr=&okqsd;
	long *aehvt=&dbrpm;
	uvvay(kyhby, bvewr, aehvt);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",kyhby,okqsd,dbrpm);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
50,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void uqyqm(long crqdx, long *zpacw, long *diiqr)
	if (!(2 <= crqdx)){
		*zpacw=1;
		*diiqr=crqdx;
	else{
		*zpacw=crqdx/2;
		for (!(1 >= *zpacw>1; break)){
			0 != crqdx%*zpacww!=0){
				*zpacw=*zpacw-1;
			else{
				break;
			}
		}
		*diiqr=crqdx/ *zpacw;
	}
}
	long crqdx;
	scanf(""%ld"",&crqdx);
	long uglta;
	long rjyub;
	long *zpacw=&uglta;
	long *diiqr=&rjyub;
	uqyqm(crqdx, zpacw, diiqr);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",crqdx,uglta,rjyub);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
51,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void maddm(long zfegi, long *vabfw, long *hvhfj)
	if (!(2 <= zfegi)){
		*vabfw=1;
		*hvhfj=zfegi;
	else{
		*vabfw=zfegi/2;
		for (!(1 >= *vabfw>1; break)){
			0 != zfegi%*vabfww!=0){
				*vabfw=*vabfw-1;
			else{
				break;
			}
		}
		*hvhfj=zfegi/ *vabfw;
	}
}
	long zfegi;
	scanf(""%ld"",&zfegi);
	long hkykp;
	long gands;
	long *vabfw=&hkykp;
	long *hvhfj=&gands;
	maddm(zfegi, vabfw, hvhfj);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",zfegi,hkykp,gands);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
52,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void figqx(long vbcyr, long *quvym, long *ipaok)
	if (!(2 <= vbcyr)){
		*quvym=1;
		*ipaok=vbcyr;
	else{
		*quvym=vbcyr/2;
		for (!(1 >= *quvym>1; break)){
			0 != vbcyr%*quvymm!=0){
				*quvym=*quvym-1;
			else{
				break;
			}
		}
		*ipaok=vbcyr/ *quvym;
	}
}
	long vbcyr;
	scanf(""%ld"",&vbcyr);
	long mtwgm;
	long ytwdm;
	long *quvym=&mtwgm;
	long *ipaok=&ytwdm;
	figqx(vbcyr, quvym, ipaok);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",vbcyr,mtwgm,ytwdm);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
53,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void gksix(long ilgfe, long *ybxyf, long *qorjc)
	if (!(2 <= ilgfe)){
		*ybxyf=1;
		*qorjc=ilgfe;
	else{
		*ybxyf=ilgfe/2;
		for (!(1 >= *ybxyf>1; break)){
			0 != ilgfe%*ybxyff!=0){
				*ybxyf=*ybxyf-1;
			else{
				break;
			}
		}
		*qorjc=ilgfe/ *ybxyf;
	}
}
	long ilgfe;
	scanf(""%ld"",&ilgfe);
	long bhbhu;
	long zaxlh;
	long *ybxyf=&bhbhu;
	long *qorjc=&zaxlh;
	gksix(ilgfe, ybxyf, qorjc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",ilgfe,bhbhu,zaxlh);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
54,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void dfjgo(long wqwge, long *fkcqd, long *ulwnw)
	if (!(2 <= wqwge)){
		*fkcqd=1;
		*ulwnw=wqwge;
	else{
		*fkcqd=wqwge/2;
		for (!(1 >= *fkcqd>1; break)){
			0 != wqwge%*fkcqdd!=0){
				*fkcqd=*fkcqd-1;
			else{
				break;
			}
		}
		*ulwnw=wqwge/ *fkcqd;
	}
}
	long wqwge;
	scanf(""%ld"",&wqwge);
	long mmkou;
	long cbijw;
	long *fkcqd=&mmkou;
	long *ulwnw=&cbijw;
	dfjgo(wqwge, fkcqd, ulwnw);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",wqwge,mmkou,cbijw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
55,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void nnmpt(long ununw, long *oqqnn, long *jtvyi)
	if (!(2 <= ununw)){
		*oqqnn=1;
		*jtvyi=ununw;
	else{
		*oqqnn=ununw/2;
		for (!(1 >= *oqqnn>1; break)){
			0 != ununw%*oqqnnn!=0){
				*oqqnn=*oqqnn-1;
			else{
				break;
			}
		}
		*jtvyi=ununw/ *oqqnn;
	}
}
	long ununw;
	scanf(""%ld"",&ununw);
	long zggbs;
	long bboso;
	long *oqqnn=&zggbs;
	long *jtvyi=&bboso;
	nnmpt(ununw, oqqnn, jtvyi);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",ununw,zggbs,bboso);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
56,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void dyjnk(long xbzfj, long *jfrck, long *lhggx)
	if (!(2 <= xbzfj)){
		*jfrck=1;
		*lhggx=xbzfj;
	else{
		*jfrck=xbzfj/2;
		for (!(1 >= *jfrck>1; break)){
			0 != xbzfj%*jfrckk!=0){
				*jfrck=*jfrck-1;
			else{
				break;
			}
		}
		*lhggx=xbzfj/ *jfrck;
	}
}
	long xbzfj;
	scanf(""%ld"",&xbzfj);
	long hfntm;
	long lnfos;
	long *jfrck=&hfntm;
	long *lhggx=&lnfos;
	dyjnk(xbzfj, jfrck, lhggx);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",xbzfj,hfntm,lnfos);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
57,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void zjxdt(long aqugt, long *rgpgp, long *tvbrp)
	if (!(2 <= aqugt)){
		*rgpgp=1;
		*tvbrp=aqugt;
	else{
		*rgpgp=aqugt/2;
		for (!(1 >= *rgpgp>1; break)){
			0 != aqugt%*rgpgpp!=0){
				*rgpgp=*rgpgp-1;
			else{
				break;
			}
		}
		*tvbrp=aqugt/ *rgpgp;
	}
}
	long aqugt;
	scanf(""%ld"",&aqugt);
	long jjosv;
	long bnpgk;
	long *rgpgp=&jjosv;
	long *tvbrp=&bnpgk;
	zjxdt(aqugt, rgpgp, tvbrp);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",aqugt,jjosv,bnpgk);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
58,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void xaszv(long wcspy, long *fvrwz, long *qfdxt)
	if (!(2 <= wcspy)){
		*fvrwz=1;
		*qfdxt=wcspy;
	else{
		*fvrwz=wcspy/2;
		for (!(1 >= *fvrwz>1; break)){
			0 != wcspy%*fvrwzz!=0){
				*fvrwz=*fvrwz-1;
			else{
				break;
			}
		}
		*qfdxt=wcspy/ *fvrwz;
	}
}
	long wcspy;
	scanf(""%ld"",&wcspy);
	long nbpru;
	long oifns;
	long *fvrwz=&nbpru;
	long *qfdxt=&oifns;
	xaszv(wcspy, fvrwz, qfdxt);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",wcspy,nbpru,oifns);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
59,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void gciav(long lmoml, long *wxeom, long *weswk)
	if (!(2 <= lmoml)){
		*wxeom=1;
		*weswk=lmoml;
	else{
		*wxeom=lmoml/2;
		for (!(1 >= *wxeom>1; break)){
			0 != lmoml%*wxeomm!=0){
				*wxeom=*wxeom-1;
			else{
				break;
			}
		}
		*weswk=lmoml/ *wxeom;
	}
}
	long lmoml;
	scanf(""%ld"",&lmoml);
	long cudsv;
	long kidaj;
	long *wxeom=&cudsv;
	long *weswk=&kidaj;
	gciav(lmoml, wxeom, weswk);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",lmoml,cudsv,kidaj);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
60,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void tpbrk(long nulvu, long *qljrn, long *mdwkz)
	if (!(2 <= nulvu)){
		*qljrn=1;
		*mdwkz=nulvu;
	else{
		*qljrn=nulvu/2;
		for (!(1 >= *qljrn>1; break)){
			0 != nulvu%*qljrnn!=0){
				*qljrn=*qljrn-1;
			else{
				break;
			}
		}
		*mdwkz=nulvu/ *qljrn;
	}
}
	long nulvu;
	scanf(""%ld"",&nulvu);
	long nicgv;
	long hcuib;
	long *qljrn=&nicgv;
	long *mdwkz=&hcuib;
	tpbrk(nulvu, qljrn, mdwkz);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",nulvu,nicgv,hcuib);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
61,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void sgnbs(long bijvj, long *yqclb, long *ygrtc)
	if (!(2 <= bijvj)){
		*yqclb=1;
		*ygrtc=bijvj;
	else{
		*yqclb=bijvj/2;
		for (!(1 >= *yqclb>1; break)){
			0 != bijvj%*yqclbb!=0){
				*yqclb=*yqclb-1;
			else{
				break;
			}
		}
		*ygrtc=bijvj/ *yqclb;
	}
}
	long bijvj;
	scanf(""%ld"",&bijvj);
	long jcwgw;
	long xdtuu;
	long *yqclb=&jcwgw;
	long *ygrtc=&xdtuu;
	sgnbs(bijvj, yqclb, ygrtc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",bijvj,jcwgw,xdtuu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
62,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void vsoew(long entbf, long *dpakh, long *mbeci)
	if (!(2 <= entbf)){
		*dpakh=1;
		*mbeci=entbf;
	else{
		*dpakh=entbf/2;
		for (!(1 >= *dpakh>1; break)){
			0 != entbf%*dpakhh!=0){
				*dpakh=*dpakh-1;
			else{
				break;
			}
		}
		*mbeci=entbf/ *dpakh;
	}
}
	long entbf;
	scanf(""%ld"",&entbf);
	long typgo;
	long ponvx;
	long *dpakh=&typgo;
	long *mbeci=&ponvx;
	vsoew(entbf, dpakh, mbeci);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",entbf,typgo,ponvx);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
63,SoSe22,9,Antwort 8,C,VName_449,Name_449,"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void imypz(long fkrve, long *jshzs, long *waybj)
	if (!(2 <= fkrve)){
		*jshzs=1;
		*waybj=fkrve;
	else{
		*jshzs=fkrve/2;
		for (!(1 >= *jshzs>1; break)){
			0 != fkrve%*jshzss!=0){
				*jshzs=*jshzs-1;
			else{
				break;
			}
		}
		*waybj=fkrve/ *jshzs;
	}
}
	long fkrve;
	scanf(""%ld"",&fkrve);
	long tkfro;
	long rddyb;
	long *jshzs=&tkfro;
	long *waybj=&rddyb;
	imypz(fkrve, jshzs, waybj);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",fkrve,tkfro,rddyb);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
64,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void beivb(long fvuqv, long* zahl1, long* zahl2)
zdynq(!(0 != fvuqv)) {
        *zahl1 = 1;
        *zahl2 = fvuqv;
    } else zdynq(!(1 != fvuqv)) {
        *zahl1 = 1;
        *zahl2 = fvuqv;
    } else {
        int bsxnq = fvuqv/2;
        while (!(0 >= bsxnq)) {
            zdynq(!(0 == fvuqv%bsxnq)) {
                continue;
            } else {
                *zahl1 = bsxnq;
                *zahl2 = fvuqv/bsxnq;
                break;
                        }
	bsxnq--;
        }
    long fvuqv = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &fvuqv);
    beivb(fvuqv,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",fvuqv, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
65,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void mgtra(long yqzhd, long* zahl1, long* zahl2)
dvgbq(!(0 != yqzhd)) {
        *zahl1 = 1;
        *zahl2 = yqzhd;
    } else dvgbq(!(1 != yqzhd)) {
        *zahl1 = 1;
        *zahl2 = yqzhd;
    } else {
        int vetwd = yqzhd/2;
        while (!(0 >= vetwd)) {
            dvgbq(!(0 == yqzhd%vetwd)) {
                continue;
            } else {
                *zahl1 = vetwd;
                *zahl2 = yqzhd/vetwd;
                break;
                        }
	vetwd--;
        }
    long yqzhd = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &yqzhd);
    mgtra(yqzhd,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",yqzhd, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
66,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void fhvom(long zxeix, long* zahl1, long* zahl2)
zmxqw(!(0 != zxeix)) {
        *zahl1 = 1;
        *zahl2 = zxeix;
    } else zmxqw(!(1 != zxeix)) {
        *zahl1 = 1;
        *zahl2 = zxeix;
    } else {
        int pzzrw = zxeix/2;
        while (!(0 >= pzzrw)) {
            zmxqw(!(0 == zxeix%pzzrw)) {
                continue;
            } else {
                *zahl1 = pzzrw;
                *zahl2 = zxeix/pzzrw;
                break;
                        }
	pzzrw--;
        }
    long zxeix = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &zxeix);
    fhvom(zxeix,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",zxeix, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
67,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void uzixr(long qroqb, long* zahl1, long* zahl2)
edzks(!(0 != qroqb)) {
        *zahl1 = 1;
        *zahl2 = qroqb;
    } else edzks(!(1 != qroqb)) {
        *zahl1 = 1;
        *zahl2 = qroqb;
    } else {
        int fvayz = qroqb/2;
        while (!(0 >= fvayz)) {
            edzks(!(0 == qroqb%fvayz)) {
                continue;
            } else {
                *zahl1 = fvayz;
                *zahl2 = qroqb/fvayz;
                break;
                        }
	fvayz--;
        }
    long qroqb = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &qroqb);
    uzixr(qroqb,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",qroqb, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
68,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void vpcap(long kwzsc, long* zahl1, long* zahl2)
oakig(!(0 != kwzsc)) {
        *zahl1 = 1;
        *zahl2 = kwzsc;
    } else oakig(!(1 != kwzsc)) {
        *zahl1 = 1;
        *zahl2 = kwzsc;
    } else {
        int copzc = kwzsc/2;
        while (!(0 >= copzc)) {
            oakig(!(0 == kwzsc%copzc)) {
                continue;
            } else {
                *zahl1 = copzc;
                *zahl2 = kwzsc/copzc;
                break;
                        }
	copzc--;
        }
    long kwzsc = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &kwzsc);
    vpcap(kwzsc,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",kwzsc, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
69,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void vjvli(long fhtga, long* zahl1, long* zahl2)
alzou(!(0 != fhtga)) {
        *zahl1 = 1;
        *zahl2 = fhtga;
    } else alzou(!(1 != fhtga)) {
        *zahl1 = 1;
        *zahl2 = fhtga;
    } else {
        int apybd = fhtga/2;
        while (!(0 >= apybd)) {
            alzou(!(0 == fhtga%apybd)) {
                continue;
            } else {
                *zahl1 = apybd;
                *zahl2 = fhtga/apybd;
                break;
                        }
	apybd--;
        }
    long fhtga = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &fhtga);
    vjvli(fhtga,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",fhtga, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
70,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void hojip(long sbiij, long* zahl1, long* zahl2)
lslsr(!(0 != sbiij)) {
        *zahl1 = 1;
        *zahl2 = sbiij;
    } else lslsr(!(1 != sbiij)) {
        *zahl1 = 1;
        *zahl2 = sbiij;
    } else {
        int xvgxb = sbiij/2;
        while (!(0 >= xvgxb)) {
            lslsr(!(0 == sbiij%xvgxb)) {
                continue;
            } else {
                *zahl1 = xvgxb;
                *zahl2 = sbiij/xvgxb;
                break;
                        }
	xvgxb--;
        }
    long sbiij = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &sbiij);
    hojip(sbiij,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",sbiij, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
71,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void bvfhv(long zlgmy, long* zahl1, long* zahl2)
wbvrk(!(0 != zlgmy)) {
        *zahl1 = 1;
        *zahl2 = zlgmy;
    } else wbvrk(!(1 != zlgmy)) {
        *zahl1 = 1;
        *zahl2 = zlgmy;
    } else {
        int juxyf = zlgmy/2;
        while (!(0 >= juxyf)) {
            wbvrk(!(0 == zlgmy%juxyf)) {
                continue;
            } else {
                *zahl1 = juxyf;
                *zahl2 = zlgmy/juxyf;
                break;
                        }
	juxyf--;
        }
    long zlgmy = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &zlgmy);
    bvfhv(zlgmy,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",zlgmy, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
72,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void qjios(long kvcrc, long* zahl1, long* zahl2)
thgxe(!(0 != kvcrc)) {
        *zahl1 = 1;
        *zahl2 = kvcrc;
    } else thgxe(!(1 != kvcrc)) {
        *zahl1 = 1;
        *zahl2 = kvcrc;
    } else {
        int duzpl = kvcrc/2;
        while (!(0 >= duzpl)) {
            thgxe(!(0 == kvcrc%duzpl)) {
                continue;
            } else {
                *zahl1 = duzpl;
                *zahl2 = kvcrc/duzpl;
                break;
                        }
	duzpl--;
        }
    long kvcrc = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &kvcrc);
    qjios(kvcrc,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",kvcrc, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
73,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void qetng(long ivfmf, long* zahl1, long* zahl2)
omabw(!(0 != ivfmf)) {
        *zahl1 = 1;
        *zahl2 = ivfmf;
    } else omabw(!(1 != ivfmf)) {
        *zahl1 = 1;
        *zahl2 = ivfmf;
    } else {
        int rueen = ivfmf/2;
        while (!(0 >= rueen)) {
            omabw(!(0 == ivfmf%rueen)) {
                continue;
            } else {
                *zahl1 = rueen;
                *zahl2 = ivfmf/rueen;
                break;
                        }
	rueen--;
        }
    long ivfmf = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ivfmf);
    qetng(ivfmf,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ivfmf, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
74,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void omvat(long cugko, long* zahl1, long* zahl2)
qlxfp(!(0 != cugko)) {
        *zahl1 = 1;
        *zahl2 = cugko;
    } else qlxfp(!(1 != cugko)) {
        *zahl1 = 1;
        *zahl2 = cugko;
    } else {
        int cpsgq = cugko/2;
        while (!(0 >= cpsgq)) {
            qlxfp(!(0 == cugko%cpsgq)) {
                continue;
            } else {
                *zahl1 = cpsgq;
                *zahl2 = cugko/cpsgq;
                break;
                        }
	cpsgq--;
        }
    long cugko = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &cugko);
    omvat(cugko,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",cugko, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
75,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void sudme(long ygqty, long* zahl1, long* zahl2)
dgyxo(!(0 != ygqty)) {
        *zahl1 = 1;
        *zahl2 = ygqty;
    } else dgyxo(!(1 != ygqty)) {
        *zahl1 = 1;
        *zahl2 = ygqty;
    } else {
        int ayicw = ygqty/2;
        while (!(0 >= ayicw)) {
            dgyxo(!(0 == ygqty%ayicw)) {
                continue;
            } else {
                *zahl1 = ayicw;
                *zahl2 = ygqty/ayicw;
                break;
                        }
	ayicw--;
        }
    long ygqty = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ygqty);
    sudme(ygqty,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ygqty, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
76,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void kblbc(long skuer, long* zahl1, long* zahl2)
ztzae(!(0 != skuer)) {
        *zahl1 = 1;
        *zahl2 = skuer;
    } else ztzae(!(1 != skuer)) {
        *zahl1 = 1;
        *zahl2 = skuer;
    } else {
        int mlnmg = skuer/2;
        while (!(0 >= mlnmg)) {
            ztzae(!(0 == skuer%mlnmg)) {
                continue;
            } else {
                *zahl1 = mlnmg;
                *zahl2 = skuer/mlnmg;
                break;
                        }
	mlnmg--;
        }
    long skuer = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &skuer);
    kblbc(skuer,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",skuer, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
77,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void vytdl(long savjt, long* zahl1, long* zahl2)
udejb(!(0 != savjt)) {
        *zahl1 = 1;
        *zahl2 = savjt;
    } else udejb(!(1 != savjt)) {
        *zahl1 = 1;
        *zahl2 = savjt;
    } else {
        int qndyr = savjt/2;
        while (!(0 >= qndyr)) {
            udejb(!(0 == savjt%qndyr)) {
                continue;
            } else {
                *zahl1 = qndyr;
                *zahl2 = savjt/qndyr;
                break;
                        }
	qndyr--;
        }
    long savjt = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &savjt);
    vytdl(savjt,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",savjt, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
78,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void eguto(long ulsrt, long* zahl1, long* zahl2)
ldvca(!(0 != ulsrt)) {
        *zahl1 = 1;
        *zahl2 = ulsrt;
    } else ldvca(!(1 != ulsrt)) {
        *zahl1 = 1;
        *zahl2 = ulsrt;
    } else {
        int zyjjh = ulsrt/2;
        while (!(0 >= zyjjh)) {
            ldvca(!(0 == ulsrt%zyjjh)) {
                continue;
            } else {
                *zahl1 = zyjjh;
                *zahl2 = ulsrt/zyjjh;
                break;
                        }
	zyjjh--;
        }
    long ulsrt = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ulsrt);
    eguto(ulsrt,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ulsrt, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
79,SoSe22,9,Antwort 8,C,VName_447,Name_447,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void pdlqr(long tfret, long* zahl1, long* zahl2)
krhvh(!(0 != tfret)) {
        *zahl1 = 1;
        *zahl2 = tfret;
    } else krhvh(!(1 != tfret)) {
        *zahl1 = 1;
        *zahl2 = tfret;
    } else {
        int etczq = tfret/2;
        while (!(0 >= etczq)) {
            krhvh(!(0 == tfret%etczq)) {
                continue;
            } else {
                *zahl1 = etczq;
                *zahl2 = tfret/etczq;
                break;
                        }
	etczq--;
        }
    long tfret = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &tfret);
    pdlqr(tfret,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",tfret, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
80,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void vsgvc(long febhm, long *nvobz, long *kgbmn)
	if(!(0 && febhm==1 == febhm)){
        *nvobz=1;
        *kgbmn=febhm;
	else {
        int yasyn = febhm/2;
        whil0 != febhm % yasyn=0) yasyn-=1;
        *nvobz = yasyn;
        *kgbmn = febhm/yasyn;
}
    long febhm;
    long nvobz;
    long kgbmn;
	scanf(""%ld"",&febhm);
    vsgvc (febhm, &nvobz, &kgbmn);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",febhm,nvobz,kgbmn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
81,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void pzasr(long iguwc, long *qdtov, long *jmvre)
	if(!(0 && iguwc==1 == iguwc)){
        *qdtov=1;
        *jmvre=iguwc;
	else {
        int pjplv = iguwc/2;
        whil0 != iguwc % pjplv=0) pjplv-=1;
        *qdtov = pjplv;
        *jmvre = iguwc/pjplv;
}
    long iguwc;
    long qdtov;
    long jmvre;
	scanf(""%ld"",&iguwc);
    pzasr (iguwc, &qdtov, &jmvre);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",iguwc,qdtov,jmvre);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
82,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void rrfij(long hzcoc, long *liuzn, long *mhwdc)
	if(!(0 && hzcoc==1 == hzcoc)){
        *liuzn=1;
        *mhwdc=hzcoc;
	else {
        int okzhh = hzcoc/2;
        whil0 != hzcoc % okzhh=0) okzhh-=1;
        *liuzn = okzhh;
        *mhwdc = hzcoc/okzhh;
}
    long hzcoc;
    long liuzn;
    long mhwdc;
	scanf(""%ld"",&hzcoc);
    rrfij (hzcoc, &liuzn, &mhwdc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",hzcoc,liuzn,mhwdc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
83,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void xzusb(long bbrft, long *rrhlt, long *nrtdy)
	if(!(0 && bbrft==1 == bbrft)){
        *rrhlt=1;
        *nrtdy=bbrft;
	else {
        int xjheh = bbrft/2;
        whil0 != bbrft % xjheh=0) xjheh-=1;
        *rrhlt = xjheh;
        *nrtdy = bbrft/xjheh;
}
    long bbrft;
    long rrhlt;
    long nrtdy;
	scanf(""%ld"",&bbrft);
    xzusb (bbrft, &rrhlt, &nrtdy);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",bbrft,rrhlt,nrtdy);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
84,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void deobm(long bnats, long *mgcsh, long *fcyvf)
	if(!(0 && bnats==1 == bnats)){
        *mgcsh=1;
        *fcyvf=bnats;
	else {
        int rrcsq = bnats/2;
        whil0 != bnats % rrcsq=0) rrcsq-=1;
        *mgcsh = rrcsq;
        *fcyvf = bnats/rrcsq;
}
    long bnats;
    long mgcsh;
    long fcyvf;
	scanf(""%ld"",&bnats);
    deobm (bnats, &mgcsh, &fcyvf);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",bnats,mgcsh,fcyvf);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
85,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void kiiku(long wyptj, long *nrbbj, long *qpgqc)
	if(!(0 && wyptj==1 == wyptj)){
        *nrbbj=1;
        *qpgqc=wyptj;
	else {
        int rawfr = wyptj/2;
        whil0 != wyptj % rawfr=0) rawfr-=1;
        *nrbbj = rawfr;
        *qpgqc = wyptj/rawfr;
}
    long wyptj;
    long nrbbj;
    long qpgqc;
	scanf(""%ld"",&wyptj);
    kiiku (wyptj, &nrbbj, &qpgqc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",wyptj,nrbbj,qpgqc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
86,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void yfxui(long wgtii, long *xeybk, long *oujpn)
	if(!(0 && wgtii==1 == wgtii)){
        *xeybk=1;
        *oujpn=wgtii;
	else {
        int xlwst = wgtii/2;
        whil0 != wgtii % xlwst=0) xlwst-=1;
        *xeybk = xlwst;
        *oujpn = wgtii/xlwst;
}
    long wgtii;
    long xeybk;
    long oujpn;
	scanf(""%ld"",&wgtii);
    yfxui (wgtii, &xeybk, &oujpn);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",wgtii,xeybk,oujpn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
87,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void mrfyz(long fqsfp, long *aszro, long *btffw)
	if(!(0 && fqsfp==1 == fqsfp)){
        *aszro=1;
        *btffw=fqsfp;
	else {
        int rtlmo = fqsfp/2;
        whil0 != fqsfp % rtlmo=0) rtlmo-=1;
        *aszro = rtlmo;
        *btffw = fqsfp/rtlmo;
}
    long fqsfp;
    long aszro;
    long btffw;
	scanf(""%ld"",&fqsfp);
    mrfyz (fqsfp, &aszro, &btffw);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",fqsfp,aszro,btffw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
88,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void iveuf(long nbdvp, long *ualtw, long *qltpw)
	if(!(0 && nbdvp==1 == nbdvp)){
        *ualtw=1;
        *qltpw=nbdvp;
	else {
        int jqukf = nbdvp/2;
        whil0 != nbdvp % jqukf=0) jqukf-=1;
        *ualtw = jqukf;
        *qltpw = nbdvp/jqukf;
}
    long nbdvp;
    long ualtw;
    long qltpw;
	scanf(""%ld"",&nbdvp);
    iveuf (nbdvp, &ualtw, &qltpw);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",nbdvp,ualtw,qltpw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
89,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void tybre(long gumfs, long *kxnnc, long *qvbxd)
	if(!(0 && gumfs==1 == gumfs)){
        *kxnnc=1;
        *qvbxd=gumfs;
	else {
        int nhldd = gumfs/2;
        whil0 != gumfs % nhldd=0) nhldd-=1;
        *kxnnc = nhldd;
        *qvbxd = gumfs/nhldd;
}
    long gumfs;
    long kxnnc;
    long qvbxd;
	scanf(""%ld"",&gumfs);
    tybre (gumfs, &kxnnc, &qvbxd);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",gumfs,kxnnc,qvbxd);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
90,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void ctcqd(long gdpvq, long *aidmf, long *aaeer)
	if(!(0 && gdpvq==1 == gdpvq)){
        *aidmf=1;
        *aaeer=gdpvq;
	else {
        int smcrh = gdpvq/2;
        whil0 != gdpvq % smcrh=0) smcrh-=1;
        *aidmf = smcrh;
        *aaeer = gdpvq/smcrh;
}
    long gdpvq;
    long aidmf;
    long aaeer;
	scanf(""%ld"",&gdpvq);
    ctcqd (gdpvq, &aidmf, &aaeer);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",gdpvq,aidmf,aaeer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
91,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void fuzqd(long lakfr, long *otxkp, long *xqqjm)
	if(!(0 && lakfr==1 == lakfr)){
        *otxkp=1;
        *xqqjm=lakfr;
	else {
        int nkcze = lakfr/2;
        whil0 != lakfr % nkcze=0) nkcze-=1;
        *otxkp = nkcze;
        *xqqjm = lakfr/nkcze;
}
    long lakfr;
    long otxkp;
    long xqqjm;
	scanf(""%ld"",&lakfr);
    fuzqd (lakfr, &otxkp, &xqqjm);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",lakfr,otxkp,xqqjm);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
92,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void zszab(long juzpu, long *ybasq, long *ezjmp)
	if(!(0 && juzpu==1 == juzpu)){
        *ybasq=1;
        *ezjmp=juzpu;
	else {
        int iargr = juzpu/2;
        whil0 != juzpu % iargr=0) iargr-=1;
        *ybasq = iargr;
        *ezjmp = juzpu/iargr;
}
    long juzpu;
    long ybasq;
    long ezjmp;
	scanf(""%ld"",&juzpu);
    zszab (juzpu, &ybasq, &ezjmp);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",juzpu,ybasq,ezjmp);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
93,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void cykyw(long bayti, long *xwuin, long *mlikx)
	if(!(0 && bayti==1 == bayti)){
        *xwuin=1;
        *mlikx=bayti;
	else {
        int lxzqz = bayti/2;
        whil0 != bayti % lxzqz=0) lxzqz-=1;
        *xwuin = lxzqz;
        *mlikx = bayti/lxzqz;
}
    long bayti;
    long xwuin;
    long mlikx;
	scanf(""%ld"",&bayti);
    cykyw (bayti, &xwuin, &mlikx);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",bayti,xwuin,mlikx);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
94,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void mghpl(long pdlas, long *hnvxp, long *vyxij)
	if(!(0 && pdlas==1 == pdlas)){
        *hnvxp=1;
        *vyxij=pdlas;
	else {
        int cwvmq = pdlas/2;
        whil0 != pdlas % cwvmq=0) cwvmq-=1;
        *hnvxp = cwvmq;
        *vyxij = pdlas/cwvmq;
}
    long pdlas;
    long hnvxp;
    long vyxij;
	scanf(""%ld"",&pdlas);
    mghpl (pdlas, &hnvxp, &vyxij);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",pdlas,hnvxp,vyxij);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
95,SoSe22,9,Antwort 8,C,VName_456,Name_456,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void njtpw(long cxnol, long *zxmyn, long *zwvwt)
	if(!(0 && cxnol==1 == cxnol)){
        *zxmyn=1;
        *zwvwt=cxnol;
	else {
        int wgpkv = cxnol/2;
        whil0 != cxnol % wgpkv=0) wgpkv-=1;
        *zxmyn = wgpkv;
        *zwvwt = cxnol/wgpkv;
}
    long cxnol;
    long zxmyn;
    long zwvwt;
	scanf(""%ld"",&cxnol);
    njtpw (cxnol, &zxmyn, &zwvwt);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",cxnol,zxmyn,zwvwt);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
96,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void valqv(long falfv, long *ozxdm, long *lmfvr)
	spajc (!(0 && falfv == 1 == falfv)){
		*ozxdm = 1;
		*lmfvr = falfv;
	else spajc (!(0 == falfv%2)){
		long nobiz = (falfv/2);
		while (!(0 == nobiz)){
			spajc (!(0 != falfv%nobiz)) {
				*ozxdm = nobiz;
				*lmfvr = (falfv/nobiz);
				break;
			}
			nobiz--;
		}	
	}			*lmfvr = (falfv/nobiz);
				break;
			}
			nobiz--;
		}	
	}
}
}
	long ugsdd zahl;
	scanf(""%li"", &zahl);
	long ozxdm = 0;
	long lmfvr = 0;
	valqv(zahl, &ozxdm, &lmfvr);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, ozxdm, lmfvr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
97,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void hbwcs(long etokf, long *btfnx, long *zquhr)
	foxxr (!(0 && etokf == 1 == etokf)){
		*btfnx = 1;
		*zquhr = etokf;
	else foxxr (!(0 == etokf%2)){
		long kgtby = (etokf/2);
		while (!(0 == kgtby)){
			foxxr (!(0 != etokf%kgtby)) {
				*btfnx = kgtby;
				*zquhr = (etokf/kgtby);
				break;
			}
			kgtby--;
		}	
	}			*zquhr = (etokf/kgtby);
				break;
			}
			kgtby--;
		}	
	}
}
}
	long zkcpf zahl;
	scanf(""%li"", &zahl);
	long btfnx = 0;
	long zquhr = 0;
	hbwcs(zahl, &btfnx, &zquhr);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, btfnx, zquhr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
98,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void laqet(long ddhqu, long *qdibr, long *rkdzv)
	yifbu (!(0 && ddhqu == 1 == ddhqu)){
		*qdibr = 1;
		*rkdzv = ddhqu;
	else yifbu (!(0 == ddhqu%2)){
		long cwrbc = (ddhqu/2);
		while (!(0 == cwrbc)){
			yifbu (!(0 != ddhqu%cwrbc)) {
				*qdibr = cwrbc;
				*rkdzv = (ddhqu/cwrbc);
				break;
			}
			cwrbc--;
		}	
	}			*rkdzv = (ddhqu/cwrbc);
				break;
			}
			cwrbc--;
		}	
	}
}
}
	long eutfl zahl;
	scanf(""%li"", &zahl);
	long qdibr = 0;
	long rkdzv = 0;
	laqet(zahl, &qdibr, &rkdzv);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, qdibr, rkdzv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
99,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void gbndh(long ogdcv, long *zztea, long *fanfy)
	yqori (!(0 && ogdcv == 1 == ogdcv)){
		*zztea = 1;
		*fanfy = ogdcv;
	else yqori (!(0 == ogdcv%2)){
		long afqss = (ogdcv/2);
		while (!(0 == afqss)){
			yqori (!(0 != ogdcv%afqss)) {
				*zztea = afqss;
				*fanfy = (ogdcv/afqss);
				break;
			}
			afqss--;
		}	
	}			*fanfy = (ogdcv/afqss);
				break;
			}
			afqss--;
		}	
	}
}
}
	long rtgjd zahl;
	scanf(""%li"", &zahl);
	long zztea = 0;
	long fanfy = 0;
	gbndh(zahl, &zztea, &fanfy);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, zztea, fanfy);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
100,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void nhrkg(long dynct, long *ydiij, long *gmomk)
	ktqjt (!(0 && dynct == 1 == dynct)){
		*ydiij = 1;
		*gmomk = dynct;
	else ktqjt (!(0 == dynct%2)){
		long ezxwm = (dynct/2);
		while (!(0 == ezxwm)){
			ktqjt (!(0 != dynct%ezxwm)) {
				*ydiij = ezxwm;
				*gmomk = (dynct/ezxwm);
				break;
			}
			ezxwm--;
		}	
	}			*gmomk = (dynct/ezxwm);
				break;
			}
			ezxwm--;
		}	
	}
}
}
	long mzwwc zahl;
	scanf(""%li"", &zahl);
	long ydiij = 0;
	long gmomk = 0;
	nhrkg(zahl, &ydiij, &gmomk);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, ydiij, gmomk);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
101,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void bcbpa(long hnhrh, long *uwmea, long *renfr)
	npwcy (!(0 && hnhrh == 1 == hnhrh)){
		*uwmea = 1;
		*renfr = hnhrh;
	else npwcy (!(0 == hnhrh%2)){
		long jakdg = (hnhrh/2);
		while (!(0 == jakdg)){
			npwcy (!(0 != hnhrh%jakdg)) {
				*uwmea = jakdg;
				*renfr = (hnhrh/jakdg);
				break;
			}
			jakdg--;
		}	
	}			*renfr = (hnhrh/jakdg);
				break;
			}
			jakdg--;
		}	
	}
}
}
	long qfhzm zahl;
	scanf(""%li"", &zahl);
	long uwmea = 0;
	long renfr = 0;
	bcbpa(zahl, &uwmea, &renfr);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, uwmea, renfr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
102,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void wkrtc(long sdgfx, long *vuzsx, long *roeji)
	atpqs (!(0 && sdgfx == 1 == sdgfx)){
		*vuzsx = 1;
		*roeji = sdgfx;
	else atpqs (!(0 == sdgfx%2)){
		long sodek = (sdgfx/2);
		while (!(0 == sodek)){
			atpqs (!(0 != sdgfx%sodek)) {
				*vuzsx = sodek;
				*roeji = (sdgfx/sodek);
				break;
			}
			sodek--;
		}	
	}			*roeji = (sdgfx/sodek);
				break;
			}
			sodek--;
		}	
	}
}
}
	long jtzyz zahl;
	scanf(""%li"", &zahl);
	long vuzsx = 0;
	long roeji = 0;
	wkrtc(zahl, &vuzsx, &roeji);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, vuzsx, roeji);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
103,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void mvkbj(long hlssp, long *royqx, long *jcydt)
	oyzgg (!(0 && hlssp == 1 == hlssp)){
		*royqx = 1;
		*jcydt = hlssp;
	else oyzgg (!(0 == hlssp%2)){
		long mvmrt = (hlssp/2);
		while (!(0 == mvmrt)){
			oyzgg (!(0 != hlssp%mvmrt)) {
				*royqx = mvmrt;
				*jcydt = (hlssp/mvmrt);
				break;
			}
			mvmrt--;
		}	
	}			*jcydt = (hlssp/mvmrt);
				break;
			}
			mvmrt--;
		}	
	}
}
}
	long xxlja zahl;
	scanf(""%li"", &zahl);
	long royqx = 0;
	long jcydt = 0;
	mvkbj(zahl, &royqx, &jcydt);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, royqx, jcydt);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
104,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void xdzgw(long dlayh, long *gepej, long *vaezc)
	uxzeu (!(0 && dlayh == 1 == dlayh)){
		*gepej = 1;
		*vaezc = dlayh;
	else uxzeu (!(0 == dlayh%2)){
		long rltye = (dlayh/2);
		while (!(0 == rltye)){
			uxzeu (!(0 != dlayh%rltye)) {
				*gepej = rltye;
				*vaezc = (dlayh/rltye);
				break;
			}
			rltye--;
		}	
	}			*vaezc = (dlayh/rltye);
				break;
			}
			rltye--;
		}	
	}
}
}
	long vguvl zahl;
	scanf(""%li"", &zahl);
	long gepej = 0;
	long vaezc = 0;
	xdzgw(zahl, &gepej, &vaezc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, gepej, vaezc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
105,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void gehzt(long adahn, long *nvmwf, long *hqzrb)
	byexm (!(0 && adahn == 1 == adahn)){
		*nvmwf = 1;
		*hqzrb = adahn;
	else byexm (!(0 == adahn%2)){
		long qovlb = (adahn/2);
		while (!(0 == qovlb)){
			byexm (!(0 != adahn%qovlb)) {
				*nvmwf = qovlb;
				*hqzrb = (adahn/qovlb);
				break;
			}
			qovlb--;
		}	
	}			*hqzrb = (adahn/qovlb);
				break;
			}
			qovlb--;
		}	
	}
}
}
	long opyhq zahl;
	scanf(""%li"", &zahl);
	long nvmwf = 0;
	long hqzrb = 0;
	gehzt(zahl, &nvmwf, &hqzrb);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, nvmwf, hqzrb);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
106,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void qpubi(long ntqru, long *bbskl, long *bxnsw)
	bgeje (!(0 && ntqru == 1 == ntqru)){
		*bbskl = 1;
		*bxnsw = ntqru;
	else bgeje (!(0 == ntqru%2)){
		long lofws = (ntqru/2);
		while (!(0 == lofws)){
			bgeje (!(0 != ntqru%lofws)) {
				*bbskl = lofws;
				*bxnsw = (ntqru/lofws);
				break;
			}
			lofws--;
		}	
	}			*bxnsw = (ntqru/lofws);
				break;
			}
			lofws--;
		}	
	}
}
}
	long wctzj zahl;
	scanf(""%li"", &zahl);
	long bbskl = 0;
	long bxnsw = 0;
	qpubi(zahl, &bbskl, &bxnsw);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, bbskl, bxnsw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
107,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void beamc(long cotmn, long *eowvt, long *irksb)
	lkxkc (!(0 && cotmn == 1 == cotmn)){
		*eowvt = 1;
		*irksb = cotmn;
	else lkxkc (!(0 == cotmn%2)){
		long mwmfv = (cotmn/2);
		while (!(0 == mwmfv)){
			lkxkc (!(0 != cotmn%mwmfv)) {
				*eowvt = mwmfv;
				*irksb = (cotmn/mwmfv);
				break;
			}
			mwmfv--;
		}	
	}			*irksb = (cotmn/mwmfv);
				break;
			}
			mwmfv--;
		}	
	}
}
}
	long tdqnn zahl;
	scanf(""%li"", &zahl);
	long eowvt = 0;
	long irksb = 0;
	beamc(zahl, &eowvt, &irksb);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, eowvt, irksb);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
108,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void vwrmf(long qmapl, long *qygqw, long *ngpxx)
	xebsg (!(0 && qmapl == 1 == qmapl)){
		*qygqw = 1;
		*ngpxx = qmapl;
	else xebsg (!(0 == qmapl%2)){
		long vpewy = (qmapl/2);
		while (!(0 == vpewy)){
			xebsg (!(0 != qmapl%vpewy)) {
				*qygqw = vpewy;
				*ngpxx = (qmapl/vpewy);
				break;
			}
			vpewy--;
		}	
	}			*ngpxx = (qmapl/vpewy);
				break;
			}
			vpewy--;
		}	
	}
}
}
	long vcfng zahl;
	scanf(""%li"", &zahl);
	long qygqw = 0;
	long ngpxx = 0;
	vwrmf(zahl, &qygqw, &ngpxx);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, qygqw, ngpxx);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
109,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void fxgza(long woxpz, long *rlvep, long *obvxm)
	uxhrg (!(0 && woxpz == 1 == woxpz)){
		*rlvep = 1;
		*obvxm = woxpz;
	else uxhrg (!(0 == woxpz%2)){
		long ixrim = (woxpz/2);
		while (!(0 == ixrim)){
			uxhrg (!(0 != woxpz%ixrim)) {
				*rlvep = ixrim;
				*obvxm = (woxpz/ixrim);
				break;
			}
			ixrim--;
		}	
	}			*obvxm = (woxpz/ixrim);
				break;
			}
			ixrim--;
		}	
	}
}
}
	long qhasc zahl;
	scanf(""%li"", &zahl);
	long rlvep = 0;
	long obvxm = 0;
	fxgza(zahl, &rlvep, &obvxm);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, rlvep, obvxm);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
110,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void hyjqj(long ixfej, long *fsebr, long *jbmgb)
	aexwk (!(0 && ixfej == 1 == ixfej)){
		*fsebr = 1;
		*jbmgb = ixfej;
	else aexwk (!(0 == ixfej%2)){
		long xzwza = (ixfej/2);
		while (!(0 == xzwza)){
			aexwk (!(0 != ixfej%xzwza)) {
				*fsebr = xzwza;
				*jbmgb = (ixfej/xzwza);
				break;
			}
			xzwza--;
		}	
	}			*jbmgb = (ixfej/xzwza);
				break;
			}
			xzwza--;
		}	
	}
}
}
	long nxmxs zahl;
	scanf(""%li"", &zahl);
	long fsebr = 0;
	long jbmgb = 0;
	hyjqj(zahl, &fsebr, &jbmgb);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fsebr, jbmgb);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
111,SoSe22,9,Antwort 8,C,VName_466,Name_466,"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void kauts(long dmcdr, long *lvnxu, long *obqmc)
	zccyu (!(0 && dmcdr == 1 == dmcdr)){
		*lvnxu = 1;
		*obqmc = dmcdr;
	else zccyu (!(0 == dmcdr%2)){
		long aeumj = (dmcdr/2);
		while (!(0 == aeumj)){
			zccyu (!(0 != dmcdr%aeumj)) {
				*lvnxu = aeumj;
				*obqmc = (dmcdr/aeumj);
				break;
			}
			aeumj--;
		}	
	}			*obqmc = (dmcdr/aeumj);
				break;
			}
			aeumj--;
		}	
	}
}
}
	long ozoiu zahl;
	scanf(""%li"", &zahl);
	long lvnxu = 0;
	long obqmc = 0;
	kauts(zahl, &lvnxu, &obqmc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, lvnxu, obqmc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
112,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void dwjkz(long ebxgx, long *aeslf, long *jsrop)
  if(!(0&&ebxgx==1 == ebxgx)){
    *aeslf=1;
    *jsrop=ebxgx;
  } else{
    tthlg mjtff=0;
    long tthlg h=ebxgx/2;
    while 0 < h>00 == mjtfff==0)){
   0 == ebxgx%hx%h==0){
        *aeslf=h;
        *jsrop=ebxgx/h;
        mjtff=1;
            }
	h--;
    }
  long tthlg aeslf;
  long tthlg jsrop;
  long tthlg ebxgx;
  scanf(""%ld"",&ebxgx);
  dwjkz(ebxgx,&aeslf,&jsrop);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",ebxgx,aeslf,jsrop);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
113,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void ukjxy(long wzlnh, long *vzaxo, long *icuaj)
  if(!(0&&wzlnh==1 == wzlnh)){
    *vzaxo=1;
    *icuaj=wzlnh;
  } else{
    leins wkpph=0;
    long leins h=wzlnh/2;
    while 0 < h>00 == wkpphh==0)){
   0 == wzlnh%hh%h==0){
        *vzaxo=h;
        *icuaj=wzlnh/h;
        wkpph=1;
            }
	h--;
    }
  long leins vzaxo;
  long leins icuaj;
  long leins wzlnh;
  scanf(""%ld"",&wzlnh);
  ukjxy(wzlnh,&vzaxo,&icuaj);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",wzlnh,vzaxo,icuaj);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
114,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void jtoaj(long wqxvv, long *fpwoc, long *ilhme)
  if(!(0&&wqxvv==1 == wqxvv)){
    *fpwoc=1;
    *ilhme=wqxvv;
  } else{
    moatt ffbbf=0;
    long moatt h=wqxvv/2;
    while 0 < h>00 == ffbbff==0)){
   0 == wqxvv%hv%h==0){
        *fpwoc=h;
        *ilhme=wqxvv/h;
        ffbbf=1;
            }
	h--;
    }
  long moatt fpwoc;
  long moatt ilhme;
  long moatt wqxvv;
  scanf(""%ld"",&wqxvv);
  jtoaj(wqxvv,&fpwoc,&ilhme);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",wqxvv,fpwoc,ilhme);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
115,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void orvgf(long hswhi, long *zvjzw, long *zfjkc)
  if(!(0&&hswhi==1 == hswhi)){
    *zvjzw=1;
    *zfjkc=hswhi;
  } else{
    iovnm ddobl=0;
    long iovnm h=hswhi/2;
    while 0 < h>00 == ddobll==0)){
   0 == hswhi%hi%h==0){
        *zvjzw=h;
        *zfjkc=hswhi/h;
        ddobl=1;
            }
	h--;
    }
  long iovnm zvjzw;
  long iovnm zfjkc;
  long iovnm hswhi;
  scanf(""%ld"",&hswhi);
  orvgf(hswhi,&zvjzw,&zfjkc);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",hswhi,zvjzw,zfjkc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
116,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void afvdd(long vkakz, long *uoqjn, long *bybis)
  if(!(0&&vkakz==1 == vkakz)){
    *uoqjn=1;
    *bybis=vkakz;
  } else{
    anbcs tffry=0;
    long anbcs h=vkakz/2;
    while 0 < h>00 == tffryy==0)){
   0 == vkakz%hz%h==0){
        *uoqjn=h;
        *bybis=vkakz/h;
        tffry=1;
            }
	h--;
    }
  long anbcs uoqjn;
  long anbcs bybis;
  long anbcs vkakz;
  scanf(""%ld"",&vkakz);
  afvdd(vkakz,&uoqjn,&bybis);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",vkakz,uoqjn,bybis);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
117,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void uxizc(long lrwfb, long *ihoys, long *fonzq)
  if(!(0&&lrwfb==1 == lrwfb)){
    *ihoys=1;
    *fonzq=lrwfb;
  } else{
    pfthm dekkl=0;
    long pfthm h=lrwfb/2;
    while 0 < h>00 == dekkll==0)){
   0 == lrwfb%hb%h==0){
        *ihoys=h;
        *fonzq=lrwfb/h;
        dekkl=1;
            }
	h--;
    }
  long pfthm ihoys;
  long pfthm fonzq;
  long pfthm lrwfb;
  scanf(""%ld"",&lrwfb);
  uxizc(lrwfb,&ihoys,&fonzq);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",lrwfb,ihoys,fonzq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
118,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void qkvdj(long mtgkq, long *ckzlt, long *ofwuv)
  if(!(0&&mtgkq==1 == mtgkq)){
    *ckzlt=1;
    *ofwuv=mtgkq;
  } else{
    btaus uycma=0;
    long btaus h=mtgkq/2;
    while 0 < h>00 == uycmaa==0)){
   0 == mtgkq%hq%h==0){
        *ckzlt=h;
        *ofwuv=mtgkq/h;
        uycma=1;
            }
	h--;
    }
  long btaus ckzlt;
  long btaus ofwuv;
  long btaus mtgkq;
  scanf(""%ld"",&mtgkq);
  qkvdj(mtgkq,&ckzlt,&ofwuv);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",mtgkq,ckzlt,ofwuv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
119,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void fcsbz(long lrhls, long *gactx, long *gcusr)
  if(!(0&&lrhls==1 == lrhls)){
    *gactx=1;
    *gcusr=lrhls;
  } else{
    flqgs djqyg=0;
    long flqgs h=lrhls/2;
    while 0 < h>00 == djqygg==0)){
   0 == lrhls%hs%h==0){
        *gactx=h;
        *gcusr=lrhls/h;
        djqyg=1;
            }
	h--;
    }
  long flqgs gactx;
  long flqgs gcusr;
  long flqgs lrhls;
  scanf(""%ld"",&lrhls);
  fcsbz(lrhls,&gactx,&gcusr);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",lrhls,gactx,gcusr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
120,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void ywlsn(long qidve, long *evtzl, long *qmtsb)
  if(!(0&&qidve==1 == qidve)){
    *evtzl=1;
    *qmtsb=qidve;
  } else{
    mcdla vqzvg=0;
    long mcdla h=qidve/2;
    while 0 < h>00 == vqzvgg==0)){
   0 == qidve%he%h==0){
        *evtzl=h;
        *qmtsb=qidve/h;
        vqzvg=1;
            }
	h--;
    }
  long mcdla evtzl;
  long mcdla qmtsb;
  long mcdla qidve;
  scanf(""%ld"",&qidve);
  ywlsn(qidve,&evtzl,&qmtsb);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",qidve,evtzl,qmtsb);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
121,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void yqmjx(long cekbz, long *qfjxi, long *kifaw)
  if(!(0&&cekbz==1 == cekbz)){
    *qfjxi=1;
    *kifaw=cekbz;
  } else{
    zdvjp emrmr=0;
    long zdvjp h=cekbz/2;
    while 0 < h>00 == emrmrr==0)){
   0 == cekbz%hz%h==0){
        *qfjxi=h;
        *kifaw=cekbz/h;
        emrmr=1;
            }
	h--;
    }
  long zdvjp qfjxi;
  long zdvjp kifaw;
  long zdvjp cekbz;
  scanf(""%ld"",&cekbz);
  yqmjx(cekbz,&qfjxi,&kifaw);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",cekbz,qfjxi,kifaw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
122,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void mnulk(long lzzls, long *zelbk, long *ckgca)
  if(!(0&&lzzls==1 == lzzls)){
    *zelbk=1;
    *ckgca=lzzls;
  } else{
    swrwf jziir=0;
    long swrwf h=lzzls/2;
    while 0 < h>00 == jziirr==0)){
   0 == lzzls%hs%h==0){
        *zelbk=h;
        *ckgca=lzzls/h;
        jziir=1;
            }
	h--;
    }
  long swrwf zelbk;
  long swrwf ckgca;
  long swrwf lzzls;
  scanf(""%ld"",&lzzls);
  mnulk(lzzls,&zelbk,&ckgca);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",lzzls,zelbk,ckgca);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
123,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void cdiip(long nzoso, long *thxnv, long *czfdq)
  if(!(0&&nzoso==1 == nzoso)){
    *thxnv=1;
    *czfdq=nzoso;
  } else{
    tgjux ckyad=0;
    long tgjux h=nzoso/2;
    while 0 < h>00 == ckyadd==0)){
   0 == nzoso%ho%h==0){
        *thxnv=h;
        *czfdq=nzoso/h;
        ckyad=1;
            }
	h--;
    }
  long tgjux thxnv;
  long tgjux czfdq;
  long tgjux nzoso;
  scanf(""%ld"",&nzoso);
  cdiip(nzoso,&thxnv,&czfdq);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",nzoso,thxnv,czfdq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
124,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void rbuxg(long mthwm, long *pqpul, long *wemvj)
  if(!(0&&mthwm==1 == mthwm)){
    *pqpul=1;
    *wemvj=mthwm;
  } else{
    ydbqx dzndk=0;
    long ydbqx h=mthwm/2;
    while 0 < h>00 == dzndkk==0)){
   0 == mthwm%hm%h==0){
        *pqpul=h;
        *wemvj=mthwm/h;
        dzndk=1;
            }
	h--;
    }
  long ydbqx pqpul;
  long ydbqx wemvj;
  long ydbqx mthwm;
  scanf(""%ld"",&mthwm);
  rbuxg(mthwm,&pqpul,&wemvj);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",mthwm,pqpul,wemvj);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
125,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void vstgf(long mbtjp, long *vhpeb, long *hntzg)
  if(!(0&&mbtjp==1 == mbtjp)){
    *vhpeb=1;
    *hntzg=mbtjp;
  } else{
    xoqvk zskth=0;
    long xoqvk h=mbtjp/2;
    while 0 < h>00 == zskthh==0)){
   0 == mbtjp%hp%h==0){
        *vhpeb=h;
        *hntzg=mbtjp/h;
        zskth=1;
            }
	h--;
    }
  long xoqvk vhpeb;
  long xoqvk hntzg;
  long xoqvk mbtjp;
  scanf(""%ld"",&mbtjp);
  vstgf(mbtjp,&vhpeb,&hntzg);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",mbtjp,vhpeb,hntzg);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
126,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void rpkwd(long mcysi, long *rsrck, long *dmcaj)
  if(!(0&&mcysi==1 == mcysi)){
    *rsrck=1;
    *dmcaj=mcysi;
  } else{
    bbgop vukfp=0;
    long bbgop h=mcysi/2;
    while 0 < h>00 == vukfpp==0)){
   0 == mcysi%hi%h==0){
        *rsrck=h;
        *dmcaj=mcysi/h;
        vukfp=1;
            }
	h--;
    }
  long bbgop rsrck;
  long bbgop dmcaj;
  long bbgop mcysi;
  scanf(""%ld"",&mcysi);
  rpkwd(mcysi,&rsrck,&dmcaj);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",mcysi,rsrck,dmcaj);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
127,SoSe22,9,Antwort 8,C,VName_460,Name_460,"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void skudm(long ribiq, long *fgwxw, long *qvsky)
  if(!(0&&ribiq==1 == ribiq)){
    *fgwxw=1;
    *qvsky=ribiq;
  } else{
    xponf xowyt=0;
    long xponf h=ribiq/2;
    while 0 < h>00 == xowytt==0)){
   0 == ribiq%hq%h==0){
        *fgwxw=h;
        *qvsky=ribiq/h;
        xowyt=1;
            }
	h--;
    }
  long xponf fgwxw;
  long xponf qvsky;
  long xponf ribiq;
  scanf(""%ld"",&ribiq);
  skudm(ribiq,&fgwxw,&qvsky);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",ribiq,fgwxw,qvsky);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
128,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void xagex(long azhnp, long *ryolz, long *mkrbn)
long ryolz
long mkrbn
	scanf(""%ld"", azhnp);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
129,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void qpnun(long dhtcc, long *uqdmq, long *owonw)
long uqdmq
long owonw
	scanf(""%ld"", dhtcc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
130,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void dzqsq(long mezmt, long *tygtq, long *usczg)
long tygtq
long usczg
	scanf(""%ld"", mezmt);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
131,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void cssnl(long lciag, long *fotzk, long *kjwxd)
long fotzk
long kjwxd
	scanf(""%ld"", lciag);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
132,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void sceog(long iznwk, long *mrnwl, long *gpomn)
long mrnwl
long gpomn
	scanf(""%ld"", iznwk);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
133,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void wgcrh(long ioxtb, long *usmyd, long *xqyyf)
long usmyd
long xqyyf
	scanf(""%ld"", ioxtb);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
134,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void pirrg(long qotbg, long *qefkp, long *impeh)
long qefkp
long impeh
	scanf(""%ld"", qotbg);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
135,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void sviye(long uxpxa, long *mpyur, long *qrvxk)
long mpyur
long qrvxk
	scanf(""%ld"", uxpxa);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
136,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void zcqsz(long amvjp, long *kholw, long *xrorh)
long kholw
long xrorh
	scanf(""%ld"", amvjp);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
137,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void qtkrl(long wblkd, long *kpnfc, long *xoeqz)
long kpnfc
long xoeqz
	scanf(""%ld"", wblkd);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
138,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void qdowx(long ihuvk, long *cwbou, long *dtgnm)
long cwbou
long dtgnm
	scanf(""%ld"", ihuvk);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
139,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void ixpue(long yvcfd, long *inzih, long *cylgj)
long inzih
long cylgj
	scanf(""%ld"", yvcfd);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
140,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void uaugi(long gedth, long *qxtdr, long *tcwex)
long qxtdr
long tcwex
	scanf(""%ld"", gedth);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
141,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void gkcbj(long evrxf, long *rtjfp, long *nwdjg)
long rtjfp
long nwdjg
	scanf(""%ld"", evrxf);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
142,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void rrfvn(long bmssj, long *arvvp, long *kvnxj)
long arvvp
long kvnxj
	scanf(""%ld"", bmssj);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
143,SoSe22,9,Antwort 8,C,VName_454,Name_454,"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void axnhz(long mcxom, long *wdnnr, long *pknnp)
long wdnnr
long pknnp
	scanf(""%ld"", mcxom);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
144,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void kusmm(long hwfvx, long *kttpb, long *elzxn)
{ 
     if(!(0 && hwfvx == 1 == hwfvx)){
        *kttpb = 1;
	*elzxn = hwfvx;
          else{
       long gokze = hwfvx/2;
       for (; 1; gokze = gokze - 1){
       if(!(0 != hwfvx % gokze)){
         break; 
              else{
       gokze = gokze - 1;
       }
     }
       *kttpb = gokze;
       *elzxn = hwfvx/gokze; 
   }
}
	long hwfvx, kttpb, elzxn;
	scanf(""%ld"", &hwfvx);
	kusmm(hwfvx, &kttpb, &elzxn);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", hwfvx,kttpb,elzxn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
145,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void mxwlv(long rhykl, long *nvrjj, long *utpms)
{ 
     if(!(0 && rhykl == 1 == rhykl)){
        *nvrjj = 1;
	*utpms = rhykl;
          else{
       long zljuc = rhykl/2;
       for (; 1; zljuc = zljuc - 1){
       if(!(0 != rhykl % zljuc)){
         break; 
              else{
       zljuc = zljuc - 1;
       }
     }
       *nvrjj = zljuc;
       *utpms = rhykl/zljuc; 
   }
}
	long rhykl, nvrjj, utpms;
	scanf(""%ld"", &rhykl);
	mxwlv(rhykl, &nvrjj, &utpms);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", rhykl,nvrjj,utpms);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
146,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void wpwqb(long nngzd, long *cyqjg, long *kthrx)
{ 
     if(!(0 && nngzd == 1 == nngzd)){
        *cyqjg = 1;
	*kthrx = nngzd;
          else{
       long cekms = nngzd/2;
       for (; 1; cekms = cekms - 1){
       if(!(0 != nngzd % cekms)){
         break; 
              else{
       cekms = cekms - 1;
       }
     }
       *cyqjg = cekms;
       *kthrx = nngzd/cekms; 
   }
}
	long nngzd, cyqjg, kthrx;
	scanf(""%ld"", &nngzd);
	wpwqb(nngzd, &cyqjg, &kthrx);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", nngzd,cyqjg,kthrx);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
147,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void gkzyb(long rmmsp, long *rkubp, long *socny)
{ 
     if(!(0 && rmmsp == 1 == rmmsp)){
        *rkubp = 1;
	*socny = rmmsp;
          else{
       long tdavf = rmmsp/2;
       for (; 1; tdavf = tdavf - 1){
       if(!(0 != rmmsp % tdavf)){
         break; 
              else{
       tdavf = tdavf - 1;
       }
     }
       *rkubp = tdavf;
       *socny = rmmsp/tdavf; 
   }
}
	long rmmsp, rkubp, socny;
	scanf(""%ld"", &rmmsp);
	gkzyb(rmmsp, &rkubp, &socny);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", rmmsp,rkubp,socny);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
148,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void juzvz(long lyelt, long *uufmg, long *tpjln)
{ 
     if(!(0 && lyelt == 1 == lyelt)){
        *uufmg = 1;
	*tpjln = lyelt;
          else{
       long edsxp = lyelt/2;
       for (; 1; edsxp = edsxp - 1){
       if(!(0 != lyelt % edsxp)){
         break; 
              else{
       edsxp = edsxp - 1;
       }
     }
       *uufmg = edsxp;
       *tpjln = lyelt/edsxp; 
   }
}
	long lyelt, uufmg, tpjln;
	scanf(""%ld"", &lyelt);
	juzvz(lyelt, &uufmg, &tpjln);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", lyelt,uufmg,tpjln);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
149,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void rgmkl(long bmjri, long *dysdu, long *eipbc)
{ 
     if(!(0 && bmjri == 1 == bmjri)){
        *dysdu = 1;
	*eipbc = bmjri;
          else{
       long lvnwn = bmjri/2;
       for (; 1; lvnwn = lvnwn - 1){
       if(!(0 != bmjri % lvnwn)){
         break; 
              else{
       lvnwn = lvnwn - 1;
       }
     }
       *dysdu = lvnwn;
       *eipbc = bmjri/lvnwn; 
   }
}
	long bmjri, dysdu, eipbc;
	scanf(""%ld"", &bmjri);
	rgmkl(bmjri, &dysdu, &eipbc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", bmjri,dysdu,eipbc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
150,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void vdpbh(long fyexl, long *sojhw, long *iqqpv)
{ 
     if(!(0 && fyexl == 1 == fyexl)){
        *sojhw = 1;
	*iqqpv = fyexl;
          else{
       long qjdvh = fyexl/2;
       for (; 1; qjdvh = qjdvh - 1){
       if(!(0 != fyexl % qjdvh)){
         break; 
              else{
       qjdvh = qjdvh - 1;
       }
     }
       *sojhw = qjdvh;
       *iqqpv = fyexl/qjdvh; 
   }
}
	long fyexl, sojhw, iqqpv;
	scanf(""%ld"", &fyexl);
	vdpbh(fyexl, &sojhw, &iqqpv);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", fyexl,sojhw,iqqpv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
151,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void fewfv(long xbpet, long *wjhey, long *hvweu)
{ 
     if(!(0 && xbpet == 1 == xbpet)){
        *wjhey = 1;
	*hvweu = xbpet;
          else{
       long oukwu = xbpet/2;
       for (; 1; oukwu = oukwu - 1){
       if(!(0 != xbpet % oukwu)){
         break; 
              else{
       oukwu = oukwu - 1;
       }
     }
       *wjhey = oukwu;
       *hvweu = xbpet/oukwu; 
   }
}
	long xbpet, wjhey, hvweu;
	scanf(""%ld"", &xbpet);
	fewfv(xbpet, &wjhey, &hvweu);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", xbpet,wjhey,hvweu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
152,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void foagd(long ksgvv, long *mfcsa, long *jxpwo)
{ 
     if(!(0 && ksgvv == 1 == ksgvv)){
        *mfcsa = 1;
	*jxpwo = ksgvv;
          else{
       long yrzuf = ksgvv/2;
       for (; 1; yrzuf = yrzuf - 1){
       if(!(0 != ksgvv % yrzuf)){
         break; 
              else{
       yrzuf = yrzuf - 1;
       }
     }
       *mfcsa = yrzuf;
       *jxpwo = ksgvv/yrzuf; 
   }
}
	long ksgvv, mfcsa, jxpwo;
	scanf(""%ld"", &ksgvv);
	foagd(ksgvv, &mfcsa, &jxpwo);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ksgvv,mfcsa,jxpwo);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
153,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void naoao(long tuhdp, long *ycluz, long *rydwi)
{ 
     if(!(0 && tuhdp == 1 == tuhdp)){
        *ycluz = 1;
	*rydwi = tuhdp;
          else{
       long gyfzy = tuhdp/2;
       for (; 1; gyfzy = gyfzy - 1){
       if(!(0 != tuhdp % gyfzy)){
         break; 
              else{
       gyfzy = gyfzy - 1;
       }
     }
       *ycluz = gyfzy;
       *rydwi = tuhdp/gyfzy; 
   }
}
	long tuhdp, ycluz, rydwi;
	scanf(""%ld"", &tuhdp);
	naoao(tuhdp, &ycluz, &rydwi);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", tuhdp,ycluz,rydwi);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
154,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void gfwrc(long cisnz, long *vpsdl, long *ghtqe)
{ 
     if(!(0 && cisnz == 1 == cisnz)){
        *vpsdl = 1;
	*ghtqe = cisnz;
          else{
       long fbtst = cisnz/2;
       for (; 1; fbtst = fbtst - 1){
       if(!(0 != cisnz % fbtst)){
         break; 
              else{
       fbtst = fbtst - 1;
       }
     }
       *vpsdl = fbtst;
       *ghtqe = cisnz/fbtst; 
   }
}
	long cisnz, vpsdl, ghtqe;
	scanf(""%ld"", &cisnz);
	gfwrc(cisnz, &vpsdl, &ghtqe);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", cisnz,vpsdl,ghtqe);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
155,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void ujukw(long qnoey, long *hvizz, long *asonu)
{ 
     if(!(0 && qnoey == 1 == qnoey)){
        *hvizz = 1;
	*asonu = qnoey;
          else{
       long vakfn = qnoey/2;
       for (; 1; vakfn = vakfn - 1){
       if(!(0 != qnoey % vakfn)){
         break; 
              else{
       vakfn = vakfn - 1;
       }
     }
       *hvizz = vakfn;
       *asonu = qnoey/vakfn; 
   }
}
	long qnoey, hvizz, asonu;
	scanf(""%ld"", &qnoey);
	ujukw(qnoey, &hvizz, &asonu);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", qnoey,hvizz,asonu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
156,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void ijvxw(long aznyj, long *jfjpa, long *koxfn)
{ 
     if(!(0 && aznyj == 1 == aznyj)){
        *jfjpa = 1;
	*koxfn = aznyj;
          else{
       long wzwhz = aznyj/2;
       for (; 1; wzwhz = wzwhz - 1){
       if(!(0 != aznyj % wzwhz)){
         break; 
              else{
       wzwhz = wzwhz - 1;
       }
     }
       *jfjpa = wzwhz;
       *koxfn = aznyj/wzwhz; 
   }
}
	long aznyj, jfjpa, koxfn;
	scanf(""%ld"", &aznyj);
	ijvxw(aznyj, &jfjpa, &koxfn);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", aznyj,jfjpa,koxfn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
157,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void gvprh(long rcrwz, long *dlrap, long *ekxxi)
{ 
     if(!(0 && rcrwz == 1 == rcrwz)){
        *dlrap = 1;
	*ekxxi = rcrwz;
          else{
       long zjeso = rcrwz/2;
       for (; 1; zjeso = zjeso - 1){
       if(!(0 != rcrwz % zjeso)){
         break; 
              else{
       zjeso = zjeso - 1;
       }
     }
       *dlrap = zjeso;
       *ekxxi = rcrwz/zjeso; 
   }
}
	long rcrwz, dlrap, ekxxi;
	scanf(""%ld"", &rcrwz);
	gvprh(rcrwz, &dlrap, &ekxxi);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", rcrwz,dlrap,ekxxi);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
158,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void kzldv(long faptf, long *dmeem, long *bcpsp)
{ 
     if(!(0 && faptf == 1 == faptf)){
        *dmeem = 1;
	*bcpsp = faptf;
          else{
       long ntdps = faptf/2;
       for (; 1; ntdps = ntdps - 1){
       if(!(0 != faptf % ntdps)){
         break; 
              else{
       ntdps = ntdps - 1;
       }
     }
       *dmeem = ntdps;
       *bcpsp = faptf/ntdps; 
   }
}
	long faptf, dmeem, bcpsp;
	scanf(""%ld"", &faptf);
	kzldv(faptf, &dmeem, &bcpsp);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", faptf,dmeem,bcpsp);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
159,SoSe22,9,Antwort 8,C,VName_473,Name_473,"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void ziocy(long ueifh, long *mypup, long *hnrkz)
{ 
     if(!(0 && ueifh == 1 == ueifh)){
        *mypup = 1;
	*hnrkz = ueifh;
          else{
       long bmwoq = ueifh/2;
       for (; 1; bmwoq = bmwoq - 1){
       if(!(0 != ueifh % bmwoq)){
         break; 
              else{
       bmwoq = bmwoq - 1;
       }
     }
       *mypup = bmwoq;
       *hnrkz = ueifh/bmwoq; 
   }
}
	long ueifh, mypup, hnrkz;
	scanf(""%ld"", &ueifh);
	ziocy(ueifh, &mypup, &hnrkz);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ueifh,mypup,hnrkz);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
160,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void vjrrc(long namal, long *qijjf, long *jectd)
	if (!(0 && namal == 1 == namal))
    {
       *qijjf = 1;
       *jectd = namal;
       return;
       long yelei halb = namal / 2;
   for (!(; 0 == namal % halb; *jectd = namal / halb))
   {
       halb --;
      *qijjf = halb;
}
	long  yelei zahl = 0;
	scanf(""%ld"", &zahl);
	long yelei fak1, fak2;
	vjrrc(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
161,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void hzoob(long scgrs, long *esbld, long *hoyhp)
	if (!(0 && scgrs == 1 == scgrs))
    {
       *esbld = 1;
       *hoyhp = scgrs;
       return;
       long rsbhj halb = scgrs / 2;
   for (!(; 0 == scgrs % halb; *hoyhp = scgrs / halb))
   {
       halb --;
      *esbld = halb;
}
	long  rsbhj zahl = 0;
	scanf(""%ld"", &zahl);
	long rsbhj fak1, fak2;
	hzoob(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
162,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void tvpqt(long tgenl, long *uughn, long *bomqz)
	if (!(0 && tgenl == 1 == tgenl))
    {
       *uughn = 1;
       *bomqz = tgenl;
       return;
       long uouuy halb = tgenl / 2;
   for (!(; 0 == tgenl % halb; *bomqz = tgenl / halb))
   {
       halb --;
      *uughn = halb;
}
	long  uouuy zahl = 0;
	scanf(""%ld"", &zahl);
	long uouuy fak1, fak2;
	tvpqt(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
163,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void jadei(long njkuo, long *twxus, long *erzyn)
	if (!(0 && njkuo == 1 == njkuo))
    {
       *twxus = 1;
       *erzyn = njkuo;
       return;
       long vxfmj halb = njkuo / 2;
   for (!(; 0 == njkuo % halb; *erzyn = njkuo / halb))
   {
       halb --;
      *twxus = halb;
}
	long  vxfmj zahl = 0;
	scanf(""%ld"", &zahl);
	long vxfmj fak1, fak2;
	jadei(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
164,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void aizqf(long fczna, long *fkpkm, long *wetoq)
	if (!(0 && fczna == 1 == fczna))
    {
       *fkpkm = 1;
       *wetoq = fczna;
       return;
       long qmann halb = fczna / 2;
   for (!(; 0 == fczna % halb; *wetoq = fczna / halb))
   {
       halb --;
      *fkpkm = halb;
}
	long  qmann zahl = 0;
	scanf(""%ld"", &zahl);
	long qmann fak1, fak2;
	aizqf(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
165,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void txrml(long ijdsz, long *bxdyj, long *jrbla)
	if (!(0 && ijdsz == 1 == ijdsz))
    {
       *bxdyj = 1;
       *jrbla = ijdsz;
       return;
       long oaplp halb = ijdsz / 2;
   for (!(; 0 == ijdsz % halb; *jrbla = ijdsz / halb))
   {
       halb --;
      *bxdyj = halb;
}
	long  oaplp zahl = 0;
	scanf(""%ld"", &zahl);
	long oaplp fak1, fak2;
	txrml(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
166,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void fbmkg(long jgxsr, long *ajzyi, long *jdpgn)
	if (!(0 && jgxsr == 1 == jgxsr))
    {
       *ajzyi = 1;
       *jdpgn = jgxsr;
       return;
       long gqibo halb = jgxsr / 2;
   for (!(; 0 == jgxsr % halb; *jdpgn = jgxsr / halb))
   {
       halb --;
      *ajzyi = halb;
}
	long  gqibo zahl = 0;
	scanf(""%ld"", &zahl);
	long gqibo fak1, fak2;
	fbmkg(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
167,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void tljzu(long jzlaz, long *dcnei, long *nppzm)
	if (!(0 && jzlaz == 1 == jzlaz))
    {
       *dcnei = 1;
       *nppzm = jzlaz;
       return;
       long oyokc halb = jzlaz / 2;
   for (!(; 0 == jzlaz % halb; *nppzm = jzlaz / halb))
   {
       halb --;
      *dcnei = halb;
}
	long  oyokc zahl = 0;
	scanf(""%ld"", &zahl);
	long oyokc fak1, fak2;
	tljzu(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
168,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void ugctx(long pyzjh, long *ifzdq, long *bsale)
	if (!(0 && pyzjh == 1 == pyzjh))
    {
       *ifzdq = 1;
       *bsale = pyzjh;
       return;
       long ysnwe halb = pyzjh / 2;
   for (!(; 0 == pyzjh % halb; *bsale = pyzjh / halb))
   {
       halb --;
      *ifzdq = halb;
}
	long  ysnwe zahl = 0;
	scanf(""%ld"", &zahl);
	long ysnwe fak1, fak2;
	ugctx(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
169,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void jqapo(long vpkxj, long *kdtbe, long *qozuv)
	if (!(0 && vpkxj == 1 == vpkxj))
    {
       *kdtbe = 1;
       *qozuv = vpkxj;
       return;
       long ribhy halb = vpkxj / 2;
   for (!(; 0 == vpkxj % halb; *qozuv = vpkxj / halb))
   {
       halb --;
      *kdtbe = halb;
}
	long  ribhy zahl = 0;
	scanf(""%ld"", &zahl);
	long ribhy fak1, fak2;
	jqapo(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
170,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void mdvxk(long qdngd, long *useqn, long *iyief)
	if (!(0 && qdngd == 1 == qdngd))
    {
       *useqn = 1;
       *iyief = qdngd;
       return;
       long mdhhg halb = qdngd / 2;
   for (!(; 0 == qdngd % halb; *iyief = qdngd / halb))
   {
       halb --;
      *useqn = halb;
}
	long  mdhhg zahl = 0;
	scanf(""%ld"", &zahl);
	long mdhhg fak1, fak2;
	mdvxk(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
171,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void rcqys(long jevgh, long *mnavx, long *pahot)
	if (!(0 && jevgh == 1 == jevgh))
    {
       *mnavx = 1;
       *pahot = jevgh;
       return;
       long ajjrn halb = jevgh / 2;
   for (!(; 0 == jevgh % halb; *pahot = jevgh / halb))
   {
       halb --;
      *mnavx = halb;
}
	long  ajjrn zahl = 0;
	scanf(""%ld"", &zahl);
	long ajjrn fak1, fak2;
	rcqys(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
172,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void rfyqn(long pepyc, long *lkgpc, long *cjndv)
	if (!(0 && pepyc == 1 == pepyc))
    {
       *lkgpc = 1;
       *cjndv = pepyc;
       return;
       long aiiag halb = pepyc / 2;
   for (!(; 0 == pepyc % halb; *cjndv = pepyc / halb))
   {
       halb --;
      *lkgpc = halb;
}
	long  aiiag zahl = 0;
	scanf(""%ld"", &zahl);
	long aiiag fak1, fak2;
	rfyqn(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
173,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void fyepd(long apcyx, long *rmwkv, long *flrxz)
	if (!(0 && apcyx == 1 == apcyx))
    {
       *rmwkv = 1;
       *flrxz = apcyx;
       return;
       long dmmhb halb = apcyx / 2;
   for (!(; 0 == apcyx % halb; *flrxz = apcyx / halb))
   {
       halb --;
      *rmwkv = halb;
}
	long  dmmhb zahl = 0;
	scanf(""%ld"", &zahl);
	long dmmhb fak1, fak2;
	fyepd(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
174,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void ofysw(long jczif, long *zjccf, long *qmdbu)
	if (!(0 && jczif == 1 == jczif))
    {
       *zjccf = 1;
       *qmdbu = jczif;
       return;
       long dtivw halb = jczif / 2;
   for (!(; 0 == jczif % halb; *qmdbu = jczif / halb))
   {
       halb --;
      *zjccf = halb;
}
	long  dtivw zahl = 0;
	scanf(""%ld"", &zahl);
	long dtivw fak1, fak2;
	ofysw(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
175,SoSe22,9,Antwort 8,C,VName_464,Name_464,"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void ghsxx(long htzxr, long *xtgum, long *evqqq)
	if (!(0 && htzxr == 1 == htzxr))
    {
       *xtgum = 1;
       *evqqq = htzxr;
       return;
       long ztalu halb = htzxr / 2;
   for (!(; 0 == htzxr % halb; *evqqq = htzxr / halb))
   {
       halb --;
      *xtgum = halb;
}
	long  ztalu zahl = 0;
	scanf(""%ld"", &zahl);
	long ztalu fak1, fak2;
	ghsxx(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
176,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void rlcek(long tsmbd, long *fjvys, long *abhue)
    long thvrc = tsmbd/2;
	switch (tsmbd){
        case 0:
            *fjvys = 1;
            *abhue= tsmbd;
        case 1:
            *fjvys = 1; 
            *abhue = tsmbd;
            break; 
        default:
            for (!(; 0 == tsmbd%thvrc; break)){
                thvrc -= 1;
                        *fjvys= thvrc;
            *abhue= tsmbd/thvrc;
            break;       
    }
    long dalsi;
    long ncnhq;
    long dgmwt; 
    scanf(""%ld"",&dgmwt);
    rlcek (dgmwt, &dalsi, &ncnhq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", dgmwt,dalsi, ncnhq );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
177,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void iqtuk(long jhsyq, long *fpkwi, long *xqwek)
    long dklwh = jhsyq/2;
	switch (jhsyq){
        case 0:
            *fpkwi = 1;
            *xqwek= jhsyq;
        case 1:
            *fpkwi = 1; 
            *xqwek = jhsyq;
            break; 
        default:
            for (!(; 0 == jhsyq%dklwh; break)){
                dklwh -= 1;
                        *fpkwi= dklwh;
            *xqwek= jhsyq/dklwh;
            break;       
    }
    long krwnr;
    long nzucc;
    long alqwf; 
    scanf(""%ld"",&alqwf);
    iqtuk (alqwf, &krwnr, &nzucc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", alqwf,krwnr, nzucc );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
178,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void drnvn(long goxoh, long *qxnsi, long *cvkag)
    long ehfed = goxoh/2;
	switch (goxoh){
        case 0:
            *qxnsi = 1;
            *cvkag= goxoh;
        case 1:
            *qxnsi = 1; 
            *cvkag = goxoh;
            break; 
        default:
            for (!(; 0 == goxoh%ehfed; break)){
                ehfed -= 1;
                        *qxnsi= ehfed;
            *cvkag= goxoh/ehfed;
            break;       
    }
    long wggkr;
    long gyhtj;
    long qtniv; 
    scanf(""%ld"",&qtniv);
    drnvn (qtniv, &wggkr, &gyhtj);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", qtniv,wggkr, gyhtj );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
179,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void dglus(long ajsqb, long *vfbig, long *prviz)
    long tfzcn = ajsqb/2;
	switch (ajsqb){
        case 0:
            *vfbig = 1;
            *prviz= ajsqb;
        case 1:
            *vfbig = 1; 
            *prviz = ajsqb;
            break; 
        default:
            for (!(; 0 == ajsqb%tfzcn; break)){
                tfzcn -= 1;
                        *vfbig= tfzcn;
            *prviz= ajsqb/tfzcn;
            break;       
    }
    long hgtnl;
    long eklzj;
    long uexyl; 
    scanf(""%ld"",&uexyl);
    dglus (uexyl, &hgtnl, &eklzj);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", uexyl,hgtnl, eklzj );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
180,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void zmmhk(long mksdo, long *hhqrn, long *jfgkk)
    long svhcm = mksdo/2;
	switch (mksdo){
        case 0:
            *hhqrn = 1;
            *jfgkk= mksdo;
        case 1:
            *hhqrn = 1; 
            *jfgkk = mksdo;
            break; 
        default:
            for (!(; 0 == mksdo%svhcm; break)){
                svhcm -= 1;
                        *hhqrn= svhcm;
            *jfgkk= mksdo/svhcm;
            break;       
    }
    long thhnl;
    long oemes;
    long hkylm; 
    scanf(""%ld"",&hkylm);
    zmmhk (hkylm, &thhnl, &oemes);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", hkylm,thhnl, oemes );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
181,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void vijaz(long yrptz, long *zmace, long *xfgmr)
    long wayfe = yrptz/2;
	switch (yrptz){
        case 0:
            *zmace = 1;
            *xfgmr= yrptz;
        case 1:
            *zmace = 1; 
            *xfgmr = yrptz;
            break; 
        default:
            for (!(; 0 == yrptz%wayfe; break)){
                wayfe -= 1;
                        *zmace= wayfe;
            *xfgmr= yrptz/wayfe;
            break;       
    }
    long upzrl;
    long xnpcm;
    long osglz; 
    scanf(""%ld"",&osglz);
    vijaz (osglz, &upzrl, &xnpcm);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", osglz,upzrl, xnpcm );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
182,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void mdwix(long vwciw, long *aqsld, long *xndoi)
    long qiqlo = vwciw/2;
	switch (vwciw){
        case 0:
            *aqsld = 1;
            *xndoi= vwciw;
        case 1:
            *aqsld = 1; 
            *xndoi = vwciw;
            break; 
        default:
            for (!(; 0 == vwciw%qiqlo; break)){
                qiqlo -= 1;
                        *aqsld= qiqlo;
            *xndoi= vwciw/qiqlo;
            break;       
    }
    long yrhgu;
    long qvema;
    long qbeth; 
    scanf(""%ld"",&qbeth);
    mdwix (qbeth, &yrhgu, &qvema);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", qbeth,yrhgu, qvema );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
183,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void xxwsm(long ohyby, long *fowen, long *rnprj)
    long qlmdf = ohyby/2;
	switch (ohyby){
        case 0:
            *fowen = 1;
            *rnprj= ohyby;
        case 1:
            *fowen = 1; 
            *rnprj = ohyby;
            break; 
        default:
            for (!(; 0 == ohyby%qlmdf; break)){
                qlmdf -= 1;
                        *fowen= qlmdf;
            *rnprj= ohyby/qlmdf;
            break;       
    }
    long wclvh;
    long tilsf;
    long rluro; 
    scanf(""%ld"",&rluro);
    xxwsm (rluro, &wclvh, &tilsf);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", rluro,wclvh, tilsf );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
184,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void ldcyl(long wyhfm, long *ymgmt, long *yyhet)
    long zqtiy = wyhfm/2;
	switch (wyhfm){
        case 0:
            *ymgmt = 1;
            *yyhet= wyhfm;
        case 1:
            *ymgmt = 1; 
            *yyhet = wyhfm;
            break; 
        default:
            for (!(; 0 == wyhfm%zqtiy; break)){
                zqtiy -= 1;
                        *ymgmt= zqtiy;
            *yyhet= wyhfm/zqtiy;
            break;       
    }
    long iefag;
    long uumqj;
    long ofvnv; 
    scanf(""%ld"",&ofvnv);
    ldcyl (ofvnv, &iefag, &uumqj);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ofvnv,iefag, uumqj );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
185,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void qvxxj(long hxsne, long *ffynt, long *mfzql)
    long etwki = hxsne/2;
	switch (hxsne){
        case 0:
            *ffynt = 1;
            *mfzql= hxsne;
        case 1:
            *ffynt = 1; 
            *mfzql = hxsne;
            break; 
        default:
            for (!(; 0 == hxsne%etwki; break)){
                etwki -= 1;
                        *ffynt= etwki;
            *mfzql= hxsne/etwki;
            break;       
    }
    long cnzhu;
    long crtmh;
    long szliy; 
    scanf(""%ld"",&szliy);
    qvxxj (szliy, &cnzhu, &crtmh);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", szliy,cnzhu, crtmh );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
186,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void eqvoo(long yjeiu, long *numke, long *rbbwg)
    long spadf = yjeiu/2;
	switch (yjeiu){
        case 0:
            *numke = 1;
            *rbbwg= yjeiu;
        case 1:
            *numke = 1; 
            *rbbwg = yjeiu;
            break; 
        default:
            for (!(; 0 == yjeiu%spadf; break)){
                spadf -= 1;
                        *numke= spadf;
            *rbbwg= yjeiu/spadf;
            break;       
    }
    long kbiyj;
    long wrysh;
    long xifad; 
    scanf(""%ld"",&xifad);
    eqvoo (xifad, &kbiyj, &wrysh);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", xifad,kbiyj, wrysh );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
187,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void xgqei(long aibtb, long *bykfm, long *kuxvv)
    long qxhtd = aibtb/2;
	switch (aibtb){
        case 0:
            *bykfm = 1;
            *kuxvv= aibtb;
        case 1:
            *bykfm = 1; 
            *kuxvv = aibtb;
            break; 
        default:
            for (!(; 0 == aibtb%qxhtd; break)){
                qxhtd -= 1;
                        *bykfm= qxhtd;
            *kuxvv= aibtb/qxhtd;
            break;       
    }
    long tolqp;
    long odhlq;
    long cowig; 
    scanf(""%ld"",&cowig);
    xgqei (cowig, &tolqp, &odhlq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", cowig,tolqp, odhlq );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
188,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void enwys(long pbchz, long *fwsfa, long *rrzhe)
    long setve = pbchz/2;
	switch (pbchz){
        case 0:
            *fwsfa = 1;
            *rrzhe= pbchz;
        case 1:
            *fwsfa = 1; 
            *rrzhe = pbchz;
            break; 
        default:
            for (!(; 0 == pbchz%setve; break)){
                setve -= 1;
                        *fwsfa= setve;
            *rrzhe= pbchz/setve;
            break;       
    }
    long ohoec;
    long alcjs;
    long rfdym; 
    scanf(""%ld"",&rfdym);
    enwys (rfdym, &ohoec, &alcjs);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", rfdym,ohoec, alcjs );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
189,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void rztuo(long etxbz, long *xottm, long *tnqic)
    long vtvcq = etxbz/2;
	switch (etxbz){
        case 0:
            *xottm = 1;
            *tnqic= etxbz;
        case 1:
            *xottm = 1; 
            *tnqic = etxbz;
            break; 
        default:
            for (!(; 0 == etxbz%vtvcq; break)){
                vtvcq -= 1;
                        *xottm= vtvcq;
            *tnqic= etxbz/vtvcq;
            break;       
    }
    long wbgxa;
    long eihwz;
    long rkkyx; 
    scanf(""%ld"",&rkkyx);
    rztuo (rkkyx, &wbgxa, &eihwz);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", rkkyx,wbgxa, eihwz );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
190,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void npqmj(long nnzih, long *nupej, long *sevjp)
    long sjznc = nnzih/2;
	switch (nnzih){
        case 0:
            *nupej = 1;
            *sevjp= nnzih;
        case 1:
            *nupej = 1; 
            *sevjp = nnzih;
            break; 
        default:
            for (!(; 0 == nnzih%sjznc; break)){
                sjznc -= 1;
                        *nupej= sjznc;
            *sevjp= nnzih/sjznc;
            break;       
    }
    long cktgh;
    long mhcfo;
    long arllu; 
    scanf(""%ld"",&arllu);
    npqmj (arllu, &cktgh, &mhcfo);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", arllu,cktgh, mhcfo );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
191,SoSe22,9,Antwort 8,C,VName_435,Name_435,"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void eopcr(long tjbtm, long *uxsxw, long *sepyn)
    long tjdqr = tjbtm/2;
	switch (tjbtm){
        case 0:
            *uxsxw = 1;
            *sepyn= tjbtm;
        case 1:
            *uxsxw = 1; 
            *sepyn = tjbtm;
            break; 
        default:
            for (!(; 0 == tjbtm%tjdqr; break)){
                tjdqr -= 1;
                        *uxsxw= tjdqr;
            *sepyn= tjbtm/tjdqr;
            break;       
    }
    long skkbp;
    long chojd;
    long uavpa; 
    scanf(""%ld"",&uavpa);
    eopcr (uavpa, &skkbp, &chojd);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", uavpa,skkbp, chojd );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
192,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void fwvmw(long tklls, long* factor1, long* factor2)
bavgn(!(0 != tklls)) {
        *factor1 = 1;
        *factor2 = tklls;
    } else bavgn(!(1 != tklls)) {
        *factor1 = 1;
        *factor2 = tklls;
    } else {
        int xvshi = tklls/2;
        while (!(0 >= xvshi)) {
            bavgn(!(0 == tklls%xvshi)) {
                continue;
            } else {
                *factor1 = xvshi;
                *factor2 = tklls/xvshi;
                break;
                        }
	xvshi--;
        }
    long tklls = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &tklls);
    fwvmw(tklls,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",tklls, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
193,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void oentq(long ohtsh, long* factor1, long* factor2)
mgmdy(!(0 != ohtsh)) {
        *factor1 = 1;
        *factor2 = ohtsh;
    } else mgmdy(!(1 != ohtsh)) {
        *factor1 = 1;
        *factor2 = ohtsh;
    } else {
        int dmxsn = ohtsh/2;
        while (!(0 >= dmxsn)) {
            mgmdy(!(0 == ohtsh%dmxsn)) {
                continue;
            } else {
                *factor1 = dmxsn;
                *factor2 = ohtsh/dmxsn;
                break;
                        }
	dmxsn--;
        }
    long ohtsh = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ohtsh);
    oentq(ohtsh,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ohtsh, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
194,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void ryrsm(long nzkot, long* factor1, long* factor2)
dvxfj(!(0 != nzkot)) {
        *factor1 = 1;
        *factor2 = nzkot;
    } else dvxfj(!(1 != nzkot)) {
        *factor1 = 1;
        *factor2 = nzkot;
    } else {
        int pwpus = nzkot/2;
        while (!(0 >= pwpus)) {
            dvxfj(!(0 == nzkot%pwpus)) {
                continue;
            } else {
                *factor1 = pwpus;
                *factor2 = nzkot/pwpus;
                break;
                        }
	pwpus--;
        }
    long nzkot = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &nzkot);
    ryrsm(nzkot,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",nzkot, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
195,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void mwdvg(long kpgqk, long* factor1, long* factor2)
mqrpv(!(0 != kpgqk)) {
        *factor1 = 1;
        *factor2 = kpgqk;
    } else mqrpv(!(1 != kpgqk)) {
        *factor1 = 1;
        *factor2 = kpgqk;
    } else {
        int jdcqj = kpgqk/2;
        while (!(0 >= jdcqj)) {
            mqrpv(!(0 == kpgqk%jdcqj)) {
                continue;
            } else {
                *factor1 = jdcqj;
                *factor2 = kpgqk/jdcqj;
                break;
                        }
	jdcqj--;
        }
    long kpgqk = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &kpgqk);
    mwdvg(kpgqk,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",kpgqk, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
196,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void hzfip(long aaein, long* factor1, long* factor2)
jutgm(!(0 != aaein)) {
        *factor1 = 1;
        *factor2 = aaein;
    } else jutgm(!(1 != aaein)) {
        *factor1 = 1;
        *factor2 = aaein;
    } else {
        int ixfcl = aaein/2;
        while (!(0 >= ixfcl)) {
            jutgm(!(0 == aaein%ixfcl)) {
                continue;
            } else {
                *factor1 = ixfcl;
                *factor2 = aaein/ixfcl;
                break;
                        }
	ixfcl--;
        }
    long aaein = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &aaein);
    hzfip(aaein,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",aaein, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
197,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void cheuv(long tlhtw, long* factor1, long* factor2)
fgzjw(!(0 != tlhtw)) {
        *factor1 = 1;
        *factor2 = tlhtw;
    } else fgzjw(!(1 != tlhtw)) {
        *factor1 = 1;
        *factor2 = tlhtw;
    } else {
        int tcqxc = tlhtw/2;
        while (!(0 >= tcqxc)) {
            fgzjw(!(0 == tlhtw%tcqxc)) {
                continue;
            } else {
                *factor1 = tcqxc;
                *factor2 = tlhtw/tcqxc;
                break;
                        }
	tcqxc--;
        }
    long tlhtw = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &tlhtw);
    cheuv(tlhtw,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",tlhtw, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
198,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void xvqjl(long uszlj, long* factor1, long* factor2)
wrcyo(!(0 != uszlj)) {
        *factor1 = 1;
        *factor2 = uszlj;
    } else wrcyo(!(1 != uszlj)) {
        *factor1 = 1;
        *factor2 = uszlj;
    } else {
        int hcrqs = uszlj/2;
        while (!(0 >= hcrqs)) {
            wrcyo(!(0 == uszlj%hcrqs)) {
                continue;
            } else {
                *factor1 = hcrqs;
                *factor2 = uszlj/hcrqs;
                break;
                        }
	hcrqs--;
        }
    long uszlj = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &uszlj);
    xvqjl(uszlj,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",uszlj, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
199,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void ygqwp(long bacie, long* factor1, long* factor2)
eiorz(!(0 != bacie)) {
        *factor1 = 1;
        *factor2 = bacie;
    } else eiorz(!(1 != bacie)) {
        *factor1 = 1;
        *factor2 = bacie;
    } else {
        int hpwys = bacie/2;
        while (!(0 >= hpwys)) {
            eiorz(!(0 == bacie%hpwys)) {
                continue;
            } else {
                *factor1 = hpwys;
                *factor2 = bacie/hpwys;
                break;
                        }
	hpwys--;
        }
    long bacie = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &bacie);
    ygqwp(bacie,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",bacie, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
200,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void tqcam(long ovyfn, long* factor1, long* factor2)
yskal(!(0 != ovyfn)) {
        *factor1 = 1;
        *factor2 = ovyfn;
    } else yskal(!(1 != ovyfn)) {
        *factor1 = 1;
        *factor2 = ovyfn;
    } else {
        int zduja = ovyfn/2;
        while (!(0 >= zduja)) {
            yskal(!(0 == ovyfn%zduja)) {
                continue;
            } else {
                *factor1 = zduja;
                *factor2 = ovyfn/zduja;
                break;
                        }
	zduja--;
        }
    long ovyfn = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ovyfn);
    tqcam(ovyfn,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ovyfn, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
201,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void xqjvc(long owese, long* factor1, long* factor2)
fywrz(!(0 != owese)) {
        *factor1 = 1;
        *factor2 = owese;
    } else fywrz(!(1 != owese)) {
        *factor1 = 1;
        *factor2 = owese;
    } else {
        int ugfuv = owese/2;
        while (!(0 >= ugfuv)) {
            fywrz(!(0 == owese%ugfuv)) {
                continue;
            } else {
                *factor1 = ugfuv;
                *factor2 = owese/ugfuv;
                break;
                        }
	ugfuv--;
        }
    long owese = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &owese);
    xqjvc(owese,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",owese, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
202,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void mfkye(long evsjj, long* factor1, long* factor2)
vqwcr(!(0 != evsjj)) {
        *factor1 = 1;
        *factor2 = evsjj;
    } else vqwcr(!(1 != evsjj)) {
        *factor1 = 1;
        *factor2 = evsjj;
    } else {
        int nsnou = evsjj/2;
        while (!(0 >= nsnou)) {
            vqwcr(!(0 == evsjj%nsnou)) {
                continue;
            } else {
                *factor1 = nsnou;
                *factor2 = evsjj/nsnou;
                break;
                        }
	nsnou--;
        }
    long evsjj = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &evsjj);
    mfkye(evsjj,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",evsjj, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
203,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void jeatb(long zhiko, long* factor1, long* factor2)
gewpx(!(0 != zhiko)) {
        *factor1 = 1;
        *factor2 = zhiko;
    } else gewpx(!(1 != zhiko)) {
        *factor1 = 1;
        *factor2 = zhiko;
    } else {
        int nqfrm = zhiko/2;
        while (!(0 >= nqfrm)) {
            gewpx(!(0 == zhiko%nqfrm)) {
                continue;
            } else {
                *factor1 = nqfrm;
                *factor2 = zhiko/nqfrm;
                break;
                        }
	nqfrm--;
        }
    long zhiko = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &zhiko);
    jeatb(zhiko,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",zhiko, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
204,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void pbrqf(long mfjpf, long* factor1, long* factor2)
rhkti(!(0 != mfjpf)) {
        *factor1 = 1;
        *factor2 = mfjpf;
    } else rhkti(!(1 != mfjpf)) {
        *factor1 = 1;
        *factor2 = mfjpf;
    } else {
        int vjfkt = mfjpf/2;
        while (!(0 >= vjfkt)) {
            rhkti(!(0 == mfjpf%vjfkt)) {
                continue;
            } else {
                *factor1 = vjfkt;
                *factor2 = mfjpf/vjfkt;
                break;
                        }
	vjfkt--;
        }
    long mfjpf = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &mfjpf);
    pbrqf(mfjpf,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",mfjpf, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
205,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void fptbz(long jtnso, long* factor1, long* factor2)
brudl(!(0 != jtnso)) {
        *factor1 = 1;
        *factor2 = jtnso;
    } else brudl(!(1 != jtnso)) {
        *factor1 = 1;
        *factor2 = jtnso;
    } else {
        int pcpcs = jtnso/2;
        while (!(0 >= pcpcs)) {
            brudl(!(0 == jtnso%pcpcs)) {
                continue;
            } else {
                *factor1 = pcpcs;
                *factor2 = jtnso/pcpcs;
                break;
                        }
	pcpcs--;
        }
    long jtnso = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &jtnso);
    fptbz(jtnso,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",jtnso, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
206,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void fuezw(long fqahy, long* factor1, long* factor2)
licqs(!(0 != fqahy)) {
        *factor1 = 1;
        *factor2 = fqahy;
    } else licqs(!(1 != fqahy)) {
        *factor1 = 1;
        *factor2 = fqahy;
    } else {
        int lcvhp = fqahy/2;
        while (!(0 >= lcvhp)) {
            licqs(!(0 == fqahy%lcvhp)) {
                continue;
            } else {
                *factor1 = lcvhp;
                *factor2 = fqahy/lcvhp;
                break;
                        }
	lcvhp--;
        }
    long fqahy = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &fqahy);
    fuezw(fqahy,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",fqahy, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
207,SoSe22,9,Antwort 8,C,VName_453,Name_453,"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void dvklf(long jfpva, long* factor1, long* factor2)
sclds(!(0 != jfpva)) {
        *factor1 = 1;
        *factor2 = jfpva;
    } else sclds(!(1 != jfpva)) {
        *factor1 = 1;
        *factor2 = jfpva;
    } else {
        int cnphp = jfpva/2;
        while (!(0 >= cnphp)) {
            sclds(!(0 == jfpva%cnphp)) {
                continue;
            } else {
                *factor1 = cnphp;
                *factor2 = jfpva/cnphp;
                break;
                        }
	cnphp--;
        }
    long jfpva = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &jfpva);
    dvklf(jfpva,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",jfpva, *factor1, *factor2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
208,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void xdjtv(long iaxcu, long *gkutk, long *otyxg){
	long nslmz;
	if(!(0 && iaxcu == 1 == iaxcu)){
		*gkutk = 1;
		*otyxg = iaxcu;
	else {
		int zcaen = 0;
		while (!(iaxcu <= zcaen)){
			 nslmz = (iaxcu/2) - zcaen;
			if(!(nslmz * (iaxcu/nslmz)iaxcu != )){
				zcaen = iaxcu;
		}
		*gkutk = nslmz;
		*otyxg = iaxcu/nslmz;
		zcaen++;
		}
}
	long gkutk;
	long* fac1 = &gkutk;
	long otyxg;
	long* fac2 = &otyxg;
	long vmmik = 0;
	scanf(""%li"", &vmmik);
	xdjtv(vmmik, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vmmik, gkutk, otyxg);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
209,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void kqkvp(long qcgdv, long *llmao, long *dgrfj){
	long txxrl;
	if(!(0 && qcgdv == 1 == qcgdv)){
		*llmao = 1;
		*dgrfj = qcgdv;
	else {
		int uemdv = 0;
		while (!(qcgdv <= uemdv)){
			 txxrl = (qcgdv/2) - uemdv;
			if(!(txxrl * (qcgdv/txxrl)qcgdv != )){
				uemdv = qcgdv;
		}
		*llmao = txxrl;
		*dgrfj = qcgdv/txxrl;
		uemdv++;
		}
}
	long llmao;
	long* fac1 = &llmao;
	long dgrfj;
	long* fac2 = &dgrfj;
	long imguy = 0;
	scanf(""%li"", &imguy);
	kqkvp(imguy, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", imguy, llmao, dgrfj);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
210,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void pnwtu(long baoab, long *liluv, long *uftcq){
	long uywfx;
	if(!(0 && baoab == 1 == baoab)){
		*liluv = 1;
		*uftcq = baoab;
	else {
		int rvcci = 0;
		while (!(baoab <= rvcci)){
			 uywfx = (baoab/2) - rvcci;
			if(!(uywfx * (baoab/uywfx)baoab != )){
				rvcci = baoab;
		}
		*liluv = uywfx;
		*uftcq = baoab/uywfx;
		rvcci++;
		}
}
	long liluv;
	long* fac1 = &liluv;
	long uftcq;
	long* fac2 = &uftcq;
	long dbkky = 0;
	scanf(""%li"", &dbkky);
	pnwtu(dbkky, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", dbkky, liluv, uftcq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
211,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void lbkaj(long jzvmx, long *mdsfa, long *dthka){
	long raybz;
	if(!(0 && jzvmx == 1 == jzvmx)){
		*mdsfa = 1;
		*dthka = jzvmx;
	else {
		int yrubw = 0;
		while (!(jzvmx <= yrubw)){
			 raybz = (jzvmx/2) - yrubw;
			if(!(raybz * (jzvmx/raybz)jzvmx != )){
				yrubw = jzvmx;
		}
		*mdsfa = raybz;
		*dthka = jzvmx/raybz;
		yrubw++;
		}
}
	long mdsfa;
	long* fac1 = &mdsfa;
	long dthka;
	long* fac2 = &dthka;
	long uwacb = 0;
	scanf(""%li"", &uwacb);
	lbkaj(uwacb, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", uwacb, mdsfa, dthka);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
212,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void wipjo(long agixu, long *hgvys, long *zhbjy){
	long dfrsk;
	if(!(0 && agixu == 1 == agixu)){
		*hgvys = 1;
		*zhbjy = agixu;
	else {
		int zooqu = 0;
		while (!(agixu <= zooqu)){
			 dfrsk = (agixu/2) - zooqu;
			if(!(dfrsk * (agixu/dfrsk)agixu != )){
				zooqu = agixu;
		}
		*hgvys = dfrsk;
		*zhbjy = agixu/dfrsk;
		zooqu++;
		}
}
	long hgvys;
	long* fac1 = &hgvys;
	long zhbjy;
	long* fac2 = &zhbjy;
	long upccm = 0;
	scanf(""%li"", &upccm);
	wipjo(upccm, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", upccm, hgvys, zhbjy);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
213,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void pddat(long aibsa, long *zhtup, long *ylnzx){
	long cnefe;
	if(!(0 && aibsa == 1 == aibsa)){
		*zhtup = 1;
		*ylnzx = aibsa;
	else {
		int nhsll = 0;
		while (!(aibsa <= nhsll)){
			 cnefe = (aibsa/2) - nhsll;
			if(!(cnefe * (aibsa/cnefe)aibsa != )){
				nhsll = aibsa;
		}
		*zhtup = cnefe;
		*ylnzx = aibsa/cnefe;
		nhsll++;
		}
}
	long zhtup;
	long* fac1 = &zhtup;
	long ylnzx;
	long* fac2 = &ylnzx;
	long svnry = 0;
	scanf(""%li"", &svnry);
	pddat(svnry, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", svnry, zhtup, ylnzx);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
214,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void pdwdh(long pmszy, long *dcrlw, long *wzjrl){
	long kvtzr;
	if(!(0 && pmszy == 1 == pmszy)){
		*dcrlw = 1;
		*wzjrl = pmszy;
	else {
		int hlhvl = 0;
		while (!(pmszy <= hlhvl)){
			 kvtzr = (pmszy/2) - hlhvl;
			if(!(kvtzr * (pmszy/kvtzr)pmszy != )){
				hlhvl = pmszy;
		}
		*dcrlw = kvtzr;
		*wzjrl = pmszy/kvtzr;
		hlhvl++;
		}
}
	long dcrlw;
	long* fac1 = &dcrlw;
	long wzjrl;
	long* fac2 = &wzjrl;
	long znplu = 0;
	scanf(""%li"", &znplu);
	pdwdh(znplu, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", znplu, dcrlw, wzjrl);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
215,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void bqrre(long xvahl, long *xlecc, long *gdjwa){
	long distq;
	if(!(0 && xvahl == 1 == xvahl)){
		*xlecc = 1;
		*gdjwa = xvahl;
	else {
		int jcryn = 0;
		while (!(xvahl <= jcryn)){
			 distq = (xvahl/2) - jcryn;
			if(!(distq * (xvahl/distq)xvahl != )){
				jcryn = xvahl;
		}
		*xlecc = distq;
		*gdjwa = xvahl/distq;
		jcryn++;
		}
}
	long xlecc;
	long* fac1 = &xlecc;
	long gdjwa;
	long* fac2 = &gdjwa;
	long ofzgj = 0;
	scanf(""%li"", &ofzgj);
	bqrre(ofzgj, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ofzgj, xlecc, gdjwa);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
216,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void cjfoa(long nknni, long *vrvra, long *kbkhq){
	long wrwgh;
	if(!(0 && nknni == 1 == nknni)){
		*vrvra = 1;
		*kbkhq = nknni;
	else {
		int qzhzd = 0;
		while (!(nknni <= qzhzd)){
			 wrwgh = (nknni/2) - qzhzd;
			if(!(wrwgh * (nknni/wrwgh)nknni != )){
				qzhzd = nknni;
		}
		*vrvra = wrwgh;
		*kbkhq = nknni/wrwgh;
		qzhzd++;
		}
}
	long vrvra;
	long* fac1 = &vrvra;
	long kbkhq;
	long* fac2 = &kbkhq;
	long tafie = 0;
	scanf(""%li"", &tafie);
	cjfoa(tafie, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", tafie, vrvra, kbkhq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
217,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void axinb(long nbyom, long *zjmzq, long *rdsal){
	long mfiky;
	if(!(0 && nbyom == 1 == nbyom)){
		*zjmzq = 1;
		*rdsal = nbyom;
	else {
		int srzhd = 0;
		while (!(nbyom <= srzhd)){
			 mfiky = (nbyom/2) - srzhd;
			if(!(mfiky * (nbyom/mfiky)nbyom != )){
				srzhd = nbyom;
		}
		*zjmzq = mfiky;
		*rdsal = nbyom/mfiky;
		srzhd++;
		}
}
	long zjmzq;
	long* fac1 = &zjmzq;
	long rdsal;
	long* fac2 = &rdsal;
	long wpyze = 0;
	scanf(""%li"", &wpyze);
	axinb(wpyze, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", wpyze, zjmzq, rdsal);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
218,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void lgexk(long vdrtl, long *tbhdb, long *ekmqq){
	long jqlwx;
	if(!(0 && vdrtl == 1 == vdrtl)){
		*tbhdb = 1;
		*ekmqq = vdrtl;
	else {
		int hqcyu = 0;
		while (!(vdrtl <= hqcyu)){
			 jqlwx = (vdrtl/2) - hqcyu;
			if(!(jqlwx * (vdrtl/jqlwx)vdrtl != )){
				hqcyu = vdrtl;
		}
		*tbhdb = jqlwx;
		*ekmqq = vdrtl/jqlwx;
		hqcyu++;
		}
}
	long tbhdb;
	long* fac1 = &tbhdb;
	long ekmqq;
	long* fac2 = &ekmqq;
	long flgrw = 0;
	scanf(""%li"", &flgrw);
	lgexk(flgrw, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", flgrw, tbhdb, ekmqq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
219,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void forcg(long xqbfp, long *wolbw, long *icehl){
	long qsarq;
	if(!(0 && xqbfp == 1 == xqbfp)){
		*wolbw = 1;
		*icehl = xqbfp;
	else {
		int kepev = 0;
		while (!(xqbfp <= kepev)){
			 qsarq = (xqbfp/2) - kepev;
			if(!(qsarq * (xqbfp/qsarq)xqbfp != )){
				kepev = xqbfp;
		}
		*wolbw = qsarq;
		*icehl = xqbfp/qsarq;
		kepev++;
		}
}
	long wolbw;
	long* fac1 = &wolbw;
	long icehl;
	long* fac2 = &icehl;
	long tvale = 0;
	scanf(""%li"", &tvale);
	forcg(tvale, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", tvale, wolbw, icehl);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
220,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void htjxa(long tclfz, long *zjouq, long *zhhmi){
	long xprrn;
	if(!(0 && tclfz == 1 == tclfz)){
		*zjouq = 1;
		*zhhmi = tclfz;
	else {
		int vokqa = 0;
		while (!(tclfz <= vokqa)){
			 xprrn = (tclfz/2) - vokqa;
			if(!(xprrn * (tclfz/xprrn)tclfz != )){
				vokqa = tclfz;
		}
		*zjouq = xprrn;
		*zhhmi = tclfz/xprrn;
		vokqa++;
		}
}
	long zjouq;
	long* fac1 = &zjouq;
	long zhhmi;
	long* fac2 = &zhhmi;
	long vaggj = 0;
	scanf(""%li"", &vaggj);
	htjxa(vaggj, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vaggj, zjouq, zhhmi);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
221,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void dyysa(long kgucy, long *hpzgl, long *nhxpy){
	long mndne;
	if(!(0 && kgucy == 1 == kgucy)){
		*hpzgl = 1;
		*nhxpy = kgucy;
	else {
		int nfigl = 0;
		while (!(kgucy <= nfigl)){
			 mndne = (kgucy/2) - nfigl;
			if(!(mndne * (kgucy/mndne)kgucy != )){
				nfigl = kgucy;
		}
		*hpzgl = mndne;
		*nhxpy = kgucy/mndne;
		nfigl++;
		}
}
	long hpzgl;
	long* fac1 = &hpzgl;
	long nhxpy;
	long* fac2 = &nhxpy;
	long luoan = 0;
	scanf(""%li"", &luoan);
	dyysa(luoan, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", luoan, hpzgl, nhxpy);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
222,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void mqhzz(long dyhbn, long *tvjcb, long *fcyzm){
	long uzfzx;
	if(!(0 && dyhbn == 1 == dyhbn)){
		*tvjcb = 1;
		*fcyzm = dyhbn;
	else {
		int whgkv = 0;
		while (!(dyhbn <= whgkv)){
			 uzfzx = (dyhbn/2) - whgkv;
			if(!(uzfzx * (dyhbn/uzfzx)dyhbn != )){
				whgkv = dyhbn;
		}
		*tvjcb = uzfzx;
		*fcyzm = dyhbn/uzfzx;
		whgkv++;
		}
}
	long tvjcb;
	long* fac1 = &tvjcb;
	long fcyzm;
	long* fac2 = &fcyzm;
	long swvjw = 0;
	scanf(""%li"", &swvjw);
	mqhzz(swvjw, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", swvjw, tvjcb, fcyzm);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
223,SoSe22,9,Antwort 8,C,VName_455,Name_455,"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void lujfg(long ytifm, long *dzgqr, long *xnrcd){
	long qzowm;
	if(!(0 && ytifm == 1 == ytifm)){
		*dzgqr = 1;
		*xnrcd = ytifm;
	else {
		int xoysj = 0;
		while (!(ytifm <= xoysj)){
			 qzowm = (ytifm/2) - xoysj;
			if(!(qzowm * (ytifm/qzowm)ytifm != )){
				xoysj = ytifm;
		}
		*dzgqr = qzowm;
		*xnrcd = ytifm/qzowm;
		xoysj++;
		}
}
	long dzgqr;
	long* fac1 = &dzgqr;
	long xnrcd;
	long* fac2 = &xnrcd;
	long itprl = 0;
	scanf(""%li"", &itprl);
	lujfg(itprl, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", itprl, dzgqr, xnrcd);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
224,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void ojsso(long yyhih, long *rmoca, long *pcbif){
	if(!(0 != yyhih)){
	    *rmoca = 1;
	    *pcbif = 0;
	if(!(1 != yyhih)){
        *rmoca = 1;
        *pcbif = 1;
    }
	int gomkn = 2;
	while (!(yyhih == *rmoca * *pcbif)){
	    *pcbif = gomkn;
	    *rmoca = yyhih/(*pcbif);
	gomkn++;
	}
	long yyhih = 0;
	long rmoca = 0;
	long pcbif = 0;
	scanf(""%ld"",&yyhih);
	ojsso(yyhih, &rmoca, &pcbif);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", yyhih, rmoca, pcbif);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
225,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void qrtfm(long gkvel, long *gkpsy, long *pokis){
	if(!(0 != gkvel)){
	    *gkpsy = 1;
	    *pokis = 0;
	if(!(1 != gkvel)){
        *gkpsy = 1;
        *pokis = 1;
    }
	int ykpzm = 2;
	while (!(gkvel == *gkpsy * *pokis)){
	    *pokis = ykpzm;
	    *gkpsy = gkvel/(*pokis);
	ykpzm++;
	}
	long gkvel = 0;
	long gkpsy = 0;
	long pokis = 0;
	scanf(""%ld"",&gkvel);
	qrtfm(gkvel, &gkpsy, &pokis);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", gkvel, gkpsy, pokis);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
226,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void maobc(long xiujh, long *syctc, long *tzrcu){
	if(!(0 != xiujh)){
	    *syctc = 1;
	    *tzrcu = 0;
	if(!(1 != xiujh)){
        *syctc = 1;
        *tzrcu = 1;
    }
	int vabsk = 2;
	while (!(xiujh == *syctc * *tzrcu)){
	    *tzrcu = vabsk;
	    *syctc = xiujh/(*tzrcu);
	vabsk++;
	}
	long xiujh = 0;
	long syctc = 0;
	long tzrcu = 0;
	scanf(""%ld"",&xiujh);
	maobc(xiujh, &syctc, &tzrcu);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", xiujh, syctc, tzrcu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
227,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void boefq(long escnd, long *ptrzg, long *kdxsr){
	if(!(0 != escnd)){
	    *ptrzg = 1;
	    *kdxsr = 0;
	if(!(1 != escnd)){
        *ptrzg = 1;
        *kdxsr = 1;
    }
	int neizs = 2;
	while (!(escnd == *ptrzg * *kdxsr)){
	    *kdxsr = neizs;
	    *ptrzg = escnd/(*kdxsr);
	neizs++;
	}
	long escnd = 0;
	long ptrzg = 0;
	long kdxsr = 0;
	scanf(""%ld"",&escnd);
	boefq(escnd, &ptrzg, &kdxsr);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", escnd, ptrzg, kdxsr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
228,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void pufvy(long eclhe, long *gqxsv, long *gohgp){
	if(!(0 != eclhe)){
	    *gqxsv = 1;
	    *gohgp = 0;
	if(!(1 != eclhe)){
        *gqxsv = 1;
        *gohgp = 1;
    }
	int dwish = 2;
	while (!(eclhe == *gqxsv * *gohgp)){
	    *gohgp = dwish;
	    *gqxsv = eclhe/(*gohgp);
	dwish++;
	}
	long eclhe = 0;
	long gqxsv = 0;
	long gohgp = 0;
	scanf(""%ld"",&eclhe);
	pufvy(eclhe, &gqxsv, &gohgp);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eclhe, gqxsv, gohgp);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
229,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void lbqkm(long nayuq, long *euobr, long *cpbsp){
	if(!(0 != nayuq)){
	    *euobr = 1;
	    *cpbsp = 0;
	if(!(1 != nayuq)){
        *euobr = 1;
        *cpbsp = 1;
    }
	int hndea = 2;
	while (!(nayuq == *euobr * *cpbsp)){
	    *cpbsp = hndea;
	    *euobr = nayuq/(*cpbsp);
	hndea++;
	}
	long nayuq = 0;
	long euobr = 0;
	long cpbsp = 0;
	scanf(""%ld"",&nayuq);
	lbqkm(nayuq, &euobr, &cpbsp);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", nayuq, euobr, cpbsp);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
230,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void vjjqq(long dtpxb, long *ginfz, long *ilpym){
	if(!(0 != dtpxb)){
	    *ginfz = 1;
	    *ilpym = 0;
	if(!(1 != dtpxb)){
        *ginfz = 1;
        *ilpym = 1;
    }
	int zlrod = 2;
	while (!(dtpxb == *ginfz * *ilpym)){
	    *ilpym = zlrod;
	    *ginfz = dtpxb/(*ilpym);
	zlrod++;
	}
	long dtpxb = 0;
	long ginfz = 0;
	long ilpym = 0;
	scanf(""%ld"",&dtpxb);
	vjjqq(dtpxb, &ginfz, &ilpym);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", dtpxb, ginfz, ilpym);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
231,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void uatbd(long mpajm, long *ivzjr, long *cloqm){
	if(!(0 != mpajm)){
	    *ivzjr = 1;
	    *cloqm = 0;
	if(!(1 != mpajm)){
        *ivzjr = 1;
        *cloqm = 1;
    }
	int vngfa = 2;
	while (!(mpajm == *ivzjr * *cloqm)){
	    *cloqm = vngfa;
	    *ivzjr = mpajm/(*cloqm);
	vngfa++;
	}
	long mpajm = 0;
	long ivzjr = 0;
	long cloqm = 0;
	scanf(""%ld"",&mpajm);
	uatbd(mpajm, &ivzjr, &cloqm);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", mpajm, ivzjr, cloqm);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
232,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void rhhwa(long sibzt, long *lzmqx, long *qgzqd){
	if(!(0 != sibzt)){
	    *lzmqx = 1;
	    *qgzqd = 0;
	if(!(1 != sibzt)){
        *lzmqx = 1;
        *qgzqd = 1;
    }
	int uppbv = 2;
	while (!(sibzt == *lzmqx * *qgzqd)){
	    *qgzqd = uppbv;
	    *lzmqx = sibzt/(*qgzqd);
	uppbv++;
	}
	long sibzt = 0;
	long lzmqx = 0;
	long qgzqd = 0;
	scanf(""%ld"",&sibzt);
	rhhwa(sibzt, &lzmqx, &qgzqd);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", sibzt, lzmqx, qgzqd);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
233,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void tmqko(long xlnux, long *kvflw, long *dwggr){
	if(!(0 != xlnux)){
	    *kvflw = 1;
	    *dwggr = 0;
	if(!(1 != xlnux)){
        *kvflw = 1;
        *dwggr = 1;
    }
	int ptsxp = 2;
	while (!(xlnux == *kvflw * *dwggr)){
	    *dwggr = ptsxp;
	    *kvflw = xlnux/(*dwggr);
	ptsxp++;
	}
	long xlnux = 0;
	long kvflw = 0;
	long dwggr = 0;
	scanf(""%ld"",&xlnux);
	tmqko(xlnux, &kvflw, &dwggr);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", xlnux, kvflw, dwggr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
234,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void qjzkh(long pxkfx, long *yuafd, long *czsln){
	if(!(0 != pxkfx)){
	    *yuafd = 1;
	    *czsln = 0;
	if(!(1 != pxkfx)){
        *yuafd = 1;
        *czsln = 1;
    }
	int qzmpg = 2;
	while (!(pxkfx == *yuafd * *czsln)){
	    *czsln = qzmpg;
	    *yuafd = pxkfx/(*czsln);
	qzmpg++;
	}
	long pxkfx = 0;
	long yuafd = 0;
	long czsln = 0;
	scanf(""%ld"",&pxkfx);
	qjzkh(pxkfx, &yuafd, &czsln);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pxkfx, yuafd, czsln);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
235,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void snyps(long tvaof, long *qrzdu, long *gzagr){
	if(!(0 != tvaof)){
	    *qrzdu = 1;
	    *gzagr = 0;
	if(!(1 != tvaof)){
        *qrzdu = 1;
        *gzagr = 1;
    }
	int hhdeh = 2;
	while (!(tvaof == *qrzdu * *gzagr)){
	    *gzagr = hhdeh;
	    *qrzdu = tvaof/(*gzagr);
	hhdeh++;
	}
	long tvaof = 0;
	long qrzdu = 0;
	long gzagr = 0;
	scanf(""%ld"",&tvaof);
	snyps(tvaof, &qrzdu, &gzagr);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", tvaof, qrzdu, gzagr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
236,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void dcxnz(long kymze, long *hhvkn, long *xbljm){
	if(!(0 != kymze)){
	    *hhvkn = 1;
	    *xbljm = 0;
	if(!(1 != kymze)){
        *hhvkn = 1;
        *xbljm = 1;
    }
	int mowwi = 2;
	while (!(kymze == *hhvkn * *xbljm)){
	    *xbljm = mowwi;
	    *hhvkn = kymze/(*xbljm);
	mowwi++;
	}
	long kymze = 0;
	long hhvkn = 0;
	long xbljm = 0;
	scanf(""%ld"",&kymze);
	dcxnz(kymze, &hhvkn, &xbljm);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", kymze, hhvkn, xbljm);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
237,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void pftxy(long oevpe, long *jiskp, long *iozia){
	if(!(0 != oevpe)){
	    *jiskp = 1;
	    *iozia = 0;
	if(!(1 != oevpe)){
        *jiskp = 1;
        *iozia = 1;
    }
	int sdcys = 2;
	while (!(oevpe == *jiskp * *iozia)){
	    *iozia = sdcys;
	    *jiskp = oevpe/(*iozia);
	sdcys++;
	}
	long oevpe = 0;
	long jiskp = 0;
	long iozia = 0;
	scanf(""%ld"",&oevpe);
	pftxy(oevpe, &jiskp, &iozia);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", oevpe, jiskp, iozia);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
238,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void dycsu(long zyzzq, long *iwqoo, long *gxxbc){
	if(!(0 != zyzzq)){
	    *iwqoo = 1;
	    *gxxbc = 0;
	if(!(1 != zyzzq)){
        *iwqoo = 1;
        *gxxbc = 1;
    }
	int eerdl = 2;
	while (!(zyzzq == *iwqoo * *gxxbc)){
	    *gxxbc = eerdl;
	    *iwqoo = zyzzq/(*gxxbc);
	eerdl++;
	}
	long zyzzq = 0;
	long iwqoo = 0;
	long gxxbc = 0;
	scanf(""%ld"",&zyzzq);
	dycsu(zyzzq, &iwqoo, &gxxbc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zyzzq, iwqoo, gxxbc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
239,SoSe22,9,Antwort 8,C,VName_436,Name_436,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void bldgs(long fzmyy, long *svgyy, long *ilwla){
	if(!(0 != fzmyy)){
	    *svgyy = 1;
	    *ilwla = 0;
	if(!(1 != fzmyy)){
        *svgyy = 1;
        *ilwla = 1;
    }
	int shjkb = 2;
	while (!(fzmyy == *svgyy * *ilwla)){
	    *ilwla = shjkb;
	    *svgyy = fzmyy/(*ilwla);
	shjkb++;
	}
	long fzmyy = 0;
	long svgyy = 0;
	long ilwla = 0;
	scanf(""%ld"",&fzmyy);
	bldgs(fzmyy, &svgyy, &ilwla);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", fzmyy, svgyy, ilwla);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
240,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void uijwq(long muhxm, long *ftbnd, long *jgfka)
	if (muhxm=0){
		*ftbnd=1,*jgfka=muhxm;	if (muhxm=1){
		*ftbnd=1,*jgfka=muhxm;	int ehzqf=0;
	muhxm;
	while (muhxm-1){
		ehzqf++;
	}
}
	long muhxm;
	long ftbnd=25;
	long jgfka=2;
	scanf(""%ld"",&muhxm);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", muhxm, ftbnd, jgfka);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
241,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void liiah(long ptokx, long *kwumx, long *vwvzq)
	if (ptokx=0){
		*kwumx=1,*vwvzq=ptokx;	if (ptokx=1){
		*kwumx=1,*vwvzq=ptokx;	int oowam=0;
	ptokx;
	while (ptokx-1){
		oowam++;
	}
}
	long ptokx;
	long kwumx=25;
	long vwvzq=2;
	scanf(""%ld"",&ptokx);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ptokx, kwumx, vwvzq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
242,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void lsgul(long aowgj, long *vrxjx, long *gkfvn)
	if (aowgj=0){
		*vrxjx=1,*gkfvn=aowgj;	if (aowgj=1){
		*vrxjx=1,*gkfvn=aowgj;	int zdtfm=0;
	aowgj;
	while (aowgj-1){
		zdtfm++;
	}
}
	long aowgj;
	long vrxjx=25;
	long gkfvn=2;
	scanf(""%ld"",&aowgj);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", aowgj, vrxjx, gkfvn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
243,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void nnnih(long ckgnc, long *brpzj, long *memkf)
	if (ckgnc=0){
		*brpzj=1,*memkf=ckgnc;	if (ckgnc=1){
		*brpzj=1,*memkf=ckgnc;	int digko=0;
	ckgnc;
	while (ckgnc-1){
		digko++;
	}
}
	long ckgnc;
	long brpzj=25;
	long memkf=2;
	scanf(""%ld"",&ckgnc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ckgnc, brpzj, memkf);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
244,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void iafrr(long bgduh, long *hvejc, long *yxijj)
	if (bgduh=0){
		*hvejc=1,*yxijj=bgduh;	if (bgduh=1){
		*hvejc=1,*yxijj=bgduh;	int ncmqh=0;
	bgduh;
	while (bgduh-1){
		ncmqh++;
	}
}
	long bgduh;
	long hvejc=25;
	long yxijj=2;
	scanf(""%ld"",&bgduh);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", bgduh, hvejc, yxijj);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
245,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void mdybq(long osajn, long *uhtik, long *opqed)
	if (osajn=0){
		*uhtik=1,*opqed=osajn;	if (osajn=1){
		*uhtik=1,*opqed=osajn;	int lwjof=0;
	osajn;
	while (osajn-1){
		lwjof++;
	}
}
	long osajn;
	long uhtik=25;
	long opqed=2;
	scanf(""%ld"",&osajn);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", osajn, uhtik, opqed);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
246,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void usrtx(long ajzrp, long *parpm, long *fxknf)
	if (ajzrp=0){
		*parpm=1,*fxknf=ajzrp;	if (ajzrp=1){
		*parpm=1,*fxknf=ajzrp;	int jxxlz=0;
	ajzrp;
	while (ajzrp-1){
		jxxlz++;
	}
}
	long ajzrp;
	long parpm=25;
	long fxknf=2;
	scanf(""%ld"",&ajzrp);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ajzrp, parpm, fxknf);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
247,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void nnpla(long txenh, long *mdxqh, long *wxvoj)
	if (txenh=0){
		*mdxqh=1,*wxvoj=txenh;	if (txenh=1){
		*mdxqh=1,*wxvoj=txenh;	int nvauc=0;
	txenh;
	while (txenh-1){
		nvauc++;
	}
}
	long txenh;
	long mdxqh=25;
	long wxvoj=2;
	scanf(""%ld"",&txenh);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", txenh, mdxqh, wxvoj);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
248,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void qgjdu(long rqgbf, long *damwe, long *aqyku)
	if (rqgbf=0){
		*damwe=1,*aqyku=rqgbf;	if (rqgbf=1){
		*damwe=1,*aqyku=rqgbf;	int vslhr=0;
	rqgbf;
	while (rqgbf-1){
		vslhr++;
	}
}
	long rqgbf;
	long damwe=25;
	long aqyku=2;
	scanf(""%ld"",&rqgbf);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", rqgbf, damwe, aqyku);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
249,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void ldmpj(long rijgn, long *qdgcu, long *qagsr)
	if (rijgn=0){
		*qdgcu=1,*qagsr=rijgn;	if (rijgn=1){
		*qdgcu=1,*qagsr=rijgn;	int ylwrm=0;
	rijgn;
	while (rijgn-1){
		ylwrm++;
	}
}
	long rijgn;
	long qdgcu=25;
	long qagsr=2;
	scanf(""%ld"",&rijgn);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", rijgn, qdgcu, qagsr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
250,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void zfxge(long rwdxr, long *qkgwb, long *gevoq)
	if (rwdxr=0){
		*qkgwb=1,*gevoq=rwdxr;	if (rwdxr=1){
		*qkgwb=1,*gevoq=rwdxr;	int fdjnj=0;
	rwdxr;
	while (rwdxr-1){
		fdjnj++;
	}
}
	long rwdxr;
	long qkgwb=25;
	long gevoq=2;
	scanf(""%ld"",&rwdxr);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", rwdxr, qkgwb, gevoq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
251,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void ydrgz(long rkibe, long *gxivb, long *pypjf)
	if (rkibe=0){
		*gxivb=1,*pypjf=rkibe;	if (rkibe=1){
		*gxivb=1,*pypjf=rkibe;	int jpcsc=0;
	rkibe;
	while (rkibe-1){
		jpcsc++;
	}
}
	long rkibe;
	long gxivb=25;
	long pypjf=2;
	scanf(""%ld"",&rkibe);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", rkibe, gxivb, pypjf);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
252,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void ocdwu(long sebku, long *xemyj, long *vaari)
	if (sebku=0){
		*xemyj=1,*vaari=sebku;	if (sebku=1){
		*xemyj=1,*vaari=sebku;	int enowx=0;
	sebku;
	while (sebku-1){
		enowx++;
	}
}
	long sebku;
	long xemyj=25;
	long vaari=2;
	scanf(""%ld"",&sebku);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", sebku, xemyj, vaari);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
253,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void zuyyz(long gjggw, long *vjoup, long *cvowe)
	if (gjggw=0){
		*vjoup=1,*cvowe=gjggw;	if (gjggw=1){
		*vjoup=1,*cvowe=gjggw;	int rbanl=0;
	gjggw;
	while (gjggw-1){
		rbanl++;
	}
}
	long gjggw;
	long vjoup=25;
	long cvowe=2;
	scanf(""%ld"",&gjggw);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", gjggw, vjoup, cvowe);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
254,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void enwzb(long gecxq, long *jiwqh, long *rfnjl)
	if (gecxq=0){
		*jiwqh=1,*rfnjl=gecxq;	if (gecxq=1){
		*jiwqh=1,*rfnjl=gecxq;	int erphq=0;
	gecxq;
	while (gecxq-1){
		erphq++;
	}
}
	long gecxq;
	long jiwqh=25;
	long rfnjl=2;
	scanf(""%ld"",&gecxq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", gecxq, jiwqh, rfnjl);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
255,SoSe22,9,Antwort 8,C,VName_452,Name_452,"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void tlmum(long cigsv, long *zvlnq, long *wxkiq)
	if (cigsv=0){
		*zvlnq=1,*wxkiq=cigsv;	if (cigsv=1){
		*zvlnq=1,*wxkiq=cigsv;	int ehofz=0;
	cigsv;
	while (cigsv-1){
		ehofz++;
	}
}
	long cigsv;
	long zvlnq=25;
	long wxkiq=2;
	scanf(""%ld"",&cigsv);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", cigsv, zvlnq, wxkiq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
256,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void mgsxw(long xaxgb, long *raioe, long *ykqgz)
	int ptyef;
	if(!(1 != xaxgb)){
		*raioe = xaxgb;
		*ykqgz = xaxgb;
	if(!(0 != xaxgb)){
		*raioe = 1;
		*ykqgz = xaxgb;
		return 0;
	if(!(0 != xaxgb % 2)){
		*raioe = xaxgb/2;
		*ykqgz = 2; 
	}
	else{
			ptyef = 2;
			while (!(xaxgb < ptyef)){	
			if(!((xaxgb % ptyef)0 != )){
				*raioe = (xaxgb/ptyef);
				*ykqgz = ptyef;
				return 0;
			}
			ptyef++;
			}
	}
}
	long xaxgb;
	long raioe = 0;
	long ykqgz = 0;
	scanf(""%ld"",&xaxgb);
	mgsxw(xaxgb, &raioe, &ykqgz);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", xaxgb, raioe, ykqgz);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
257,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void yrhym(long orbpf, long *daqlc, long *kbxfa)
	int gzluv;
	if(!(1 != orbpf)){
		*daqlc = orbpf;
		*kbxfa = orbpf;
	if(!(0 != orbpf)){
		*daqlc = 1;
		*kbxfa = orbpf;
		return 0;
	if(!(0 != orbpf % 2)){
		*daqlc = orbpf/2;
		*kbxfa = 2; 
	}
	else{
			gzluv = 2;
			while (!(orbpf < gzluv)){	
			if(!((orbpf % gzluv)0 != )){
				*daqlc = (orbpf/gzluv);
				*kbxfa = gzluv;
				return 0;
			}
			gzluv++;
			}
	}
}
	long orbpf;
	long daqlc = 0;
	long kbxfa = 0;
	scanf(""%ld"",&orbpf);
	yrhym(orbpf, &daqlc, &kbxfa);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", orbpf, daqlc, kbxfa);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
258,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void vzuxw(long fryrp, long *dppkm, long *skyxo)
	int vqjns;
	if(!(1 != fryrp)){
		*dppkm = fryrp;
		*skyxo = fryrp;
	if(!(0 != fryrp)){
		*dppkm = 1;
		*skyxo = fryrp;
		return 0;
	if(!(0 != fryrp % 2)){
		*dppkm = fryrp/2;
		*skyxo = 2; 
	}
	else{
			vqjns = 2;
			while (!(fryrp < vqjns)){	
			if(!((fryrp % vqjns)0 != )){
				*dppkm = (fryrp/vqjns);
				*skyxo = vqjns;
				return 0;
			}
			vqjns++;
			}
	}
}
	long fryrp;
	long dppkm = 0;
	long skyxo = 0;
	scanf(""%ld"",&fryrp);
	vzuxw(fryrp, &dppkm, &skyxo);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", fryrp, dppkm, skyxo);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
259,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void qtbea(long lckcg, long *pgzwr, long *jqhgo)
	int oyvpr;
	if(!(1 != lckcg)){
		*pgzwr = lckcg;
		*jqhgo = lckcg;
	if(!(0 != lckcg)){
		*pgzwr = 1;
		*jqhgo = lckcg;
		return 0;
	if(!(0 != lckcg % 2)){
		*pgzwr = lckcg/2;
		*jqhgo = 2; 
	}
	else{
			oyvpr = 2;
			while (!(lckcg < oyvpr)){	
			if(!((lckcg % oyvpr)0 != )){
				*pgzwr = (lckcg/oyvpr);
				*jqhgo = oyvpr;
				return 0;
			}
			oyvpr++;
			}
	}
}
	long lckcg;
	long pgzwr = 0;
	long jqhgo = 0;
	scanf(""%ld"",&lckcg);
	qtbea(lckcg, &pgzwr, &jqhgo);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", lckcg, pgzwr, jqhgo);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
260,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void lyrvz(long dlgro, long *fbrvn, long *zqbmi)
	int ternc;
	if(!(1 != dlgro)){
		*fbrvn = dlgro;
		*zqbmi = dlgro;
	if(!(0 != dlgro)){
		*fbrvn = 1;
		*zqbmi = dlgro;
		return 0;
	if(!(0 != dlgro % 2)){
		*fbrvn = dlgro/2;
		*zqbmi = 2; 
	}
	else{
			ternc = 2;
			while (!(dlgro < ternc)){	
			if(!((dlgro % ternc)0 != )){
				*fbrvn = (dlgro/ternc);
				*zqbmi = ternc;
				return 0;
			}
			ternc++;
			}
	}
}
	long dlgro;
	long fbrvn = 0;
	long zqbmi = 0;
	scanf(""%ld"",&dlgro);
	lyrvz(dlgro, &fbrvn, &zqbmi);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", dlgro, fbrvn, zqbmi);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
261,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void qifiq(long qrzdn, long *tjjkj, long *wkhtz)
	int wfgos;
	if(!(1 != qrzdn)){
		*tjjkj = qrzdn;
		*wkhtz = qrzdn;
	if(!(0 != qrzdn)){
		*tjjkj = 1;
		*wkhtz = qrzdn;
		return 0;
	if(!(0 != qrzdn % 2)){
		*tjjkj = qrzdn/2;
		*wkhtz = 2; 
	}
	else{
			wfgos = 2;
			while (!(qrzdn < wfgos)){	
			if(!((qrzdn % wfgos)0 != )){
				*tjjkj = (qrzdn/wfgos);
				*wkhtz = wfgos;
				return 0;
			}
			wfgos++;
			}
	}
}
	long qrzdn;
	long tjjkj = 0;
	long wkhtz = 0;
	scanf(""%ld"",&qrzdn);
	qifiq(qrzdn, &tjjkj, &wkhtz);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", qrzdn, tjjkj, wkhtz);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
262,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void asbrh(long ugwpx, long *qwpdc, long *akzfj)
	int pycfi;
	if(!(1 != ugwpx)){
		*qwpdc = ugwpx;
		*akzfj = ugwpx;
	if(!(0 != ugwpx)){
		*qwpdc = 1;
		*akzfj = ugwpx;
		return 0;
	if(!(0 != ugwpx % 2)){
		*qwpdc = ugwpx/2;
		*akzfj = 2; 
	}
	else{
			pycfi = 2;
			while (!(ugwpx < pycfi)){	
			if(!((ugwpx % pycfi)0 != )){
				*qwpdc = (ugwpx/pycfi);
				*akzfj = pycfi;
				return 0;
			}
			pycfi++;
			}
	}
}
	long ugwpx;
	long qwpdc = 0;
	long akzfj = 0;
	scanf(""%ld"",&ugwpx);
	asbrh(ugwpx, &qwpdc, &akzfj);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ugwpx, qwpdc, akzfj);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
263,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void ceapm(long auhnf, long *qmlww, long *wrqbi)
	int rhlqr;
	if(!(1 != auhnf)){
		*qmlww = auhnf;
		*wrqbi = auhnf;
	if(!(0 != auhnf)){
		*qmlww = 1;
		*wrqbi = auhnf;
		return 0;
	if(!(0 != auhnf % 2)){
		*qmlww = auhnf/2;
		*wrqbi = 2; 
	}
	else{
			rhlqr = 2;
			while (!(auhnf < rhlqr)){	
			if(!((auhnf % rhlqr)0 != )){
				*qmlww = (auhnf/rhlqr);
				*wrqbi = rhlqr;
				return 0;
			}
			rhlqr++;
			}
	}
}
	long auhnf;
	long qmlww = 0;
	long wrqbi = 0;
	scanf(""%ld"",&auhnf);
	ceapm(auhnf, &qmlww, &wrqbi);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", auhnf, qmlww, wrqbi);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
264,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void evfyk(long payec, long *idfgw, long *uwzwe)
	int kyzlf;
	if(!(1 != payec)){
		*idfgw = payec;
		*uwzwe = payec;
	if(!(0 != payec)){
		*idfgw = 1;
		*uwzwe = payec;
		return 0;
	if(!(0 != payec % 2)){
		*idfgw = payec/2;
		*uwzwe = 2; 
	}
	else{
			kyzlf = 2;
			while (!(payec < kyzlf)){	
			if(!((payec % kyzlf)0 != )){
				*idfgw = (payec/kyzlf);
				*uwzwe = kyzlf;
				return 0;
			}
			kyzlf++;
			}
	}
}
	long payec;
	long idfgw = 0;
	long uwzwe = 0;
	scanf(""%ld"",&payec);
	evfyk(payec, &idfgw, &uwzwe);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", payec, idfgw, uwzwe);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
265,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void sxhyc(long hvcnh, long *jpohf, long *nhkcs)
	int egmmr;
	if(!(1 != hvcnh)){
		*jpohf = hvcnh;
		*nhkcs = hvcnh;
	if(!(0 != hvcnh)){
		*jpohf = 1;
		*nhkcs = hvcnh;
		return 0;
	if(!(0 != hvcnh % 2)){
		*jpohf = hvcnh/2;
		*nhkcs = 2; 
	}
	else{
			egmmr = 2;
			while (!(hvcnh < egmmr)){	
			if(!((hvcnh % egmmr)0 != )){
				*jpohf = (hvcnh/egmmr);
				*nhkcs = egmmr;
				return 0;
			}
			egmmr++;
			}
	}
}
	long hvcnh;
	long jpohf = 0;
	long nhkcs = 0;
	scanf(""%ld"",&hvcnh);
	sxhyc(hvcnh, &jpohf, &nhkcs);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", hvcnh, jpohf, nhkcs);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
266,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void vxgws(long qbfpq, long *geowx, long *jrwih)
	int bnymc;
	if(!(1 != qbfpq)){
		*geowx = qbfpq;
		*jrwih = qbfpq;
	if(!(0 != qbfpq)){
		*geowx = 1;
		*jrwih = qbfpq;
		return 0;
	if(!(0 != qbfpq % 2)){
		*geowx = qbfpq/2;
		*jrwih = 2; 
	}
	else{
			bnymc = 2;
			while (!(qbfpq < bnymc)){	
			if(!((qbfpq % bnymc)0 != )){
				*geowx = (qbfpq/bnymc);
				*jrwih = bnymc;
				return 0;
			}
			bnymc++;
			}
	}
}
	long qbfpq;
	long geowx = 0;
	long jrwih = 0;
	scanf(""%ld"",&qbfpq);
	vxgws(qbfpq, &geowx, &jrwih);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", qbfpq, geowx, jrwih);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
267,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void aygaj(long aixjl, long *kgcto, long *ikxrc)
	int abmbv;
	if(!(1 != aixjl)){
		*kgcto = aixjl;
		*ikxrc = aixjl;
	if(!(0 != aixjl)){
		*kgcto = 1;
		*ikxrc = aixjl;
		return 0;
	if(!(0 != aixjl % 2)){
		*kgcto = aixjl/2;
		*ikxrc = 2; 
	}
	else{
			abmbv = 2;
			while (!(aixjl < abmbv)){	
			if(!((aixjl % abmbv)0 != )){
				*kgcto = (aixjl/abmbv);
				*ikxrc = abmbv;
				return 0;
			}
			abmbv++;
			}
	}
}
	long aixjl;
	long kgcto = 0;
	long ikxrc = 0;
	scanf(""%ld"",&aixjl);
	aygaj(aixjl, &kgcto, &ikxrc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", aixjl, kgcto, ikxrc);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
268,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void umnal(long yhnbl, long *gmtxh, long *acpvr)
	int oltge;
	if(!(1 != yhnbl)){
		*gmtxh = yhnbl;
		*acpvr = yhnbl;
	if(!(0 != yhnbl)){
		*gmtxh = 1;
		*acpvr = yhnbl;
		return 0;
	if(!(0 != yhnbl % 2)){
		*gmtxh = yhnbl/2;
		*acpvr = 2; 
	}
	else{
			oltge = 2;
			while (!(yhnbl < oltge)){	
			if(!((yhnbl % oltge)0 != )){
				*gmtxh = (yhnbl/oltge);
				*acpvr = oltge;
				return 0;
			}
			oltge++;
			}
	}
}
	long yhnbl;
	long gmtxh = 0;
	long acpvr = 0;
	scanf(""%ld"",&yhnbl);
	umnal(yhnbl, &gmtxh, &acpvr);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", yhnbl, gmtxh, acpvr);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
269,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void vxsbz(long uplrf, long *wsjbd, long *gggwi)
	int yviok;
	if(!(1 != uplrf)){
		*wsjbd = uplrf;
		*gggwi = uplrf;
	if(!(0 != uplrf)){
		*wsjbd = 1;
		*gggwi = uplrf;
		return 0;
	if(!(0 != uplrf % 2)){
		*wsjbd = uplrf/2;
		*gggwi = 2; 
	}
	else{
			yviok = 2;
			while (!(uplrf < yviok)){	
			if(!((uplrf % yviok)0 != )){
				*wsjbd = (uplrf/yviok);
				*gggwi = yviok;
				return 0;
			}
			yviok++;
			}
	}
}
	long uplrf;
	long wsjbd = 0;
	long gggwi = 0;
	scanf(""%ld"",&uplrf);
	vxsbz(uplrf, &wsjbd, &gggwi);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", uplrf, wsjbd, gggwi);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
270,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void qbcar(long istha, long *kybqf, long *grhil)
	int ljvvp;
	if(!(1 != istha)){
		*kybqf = istha;
		*grhil = istha;
	if(!(0 != istha)){
		*kybqf = 1;
		*grhil = istha;
		return 0;
	if(!(0 != istha % 2)){
		*kybqf = istha/2;
		*grhil = 2; 
	}
	else{
			ljvvp = 2;
			while (!(istha < ljvvp)){	
			if(!((istha % ljvvp)0 != )){
				*kybqf = (istha/ljvvp);
				*grhil = ljvvp;
				return 0;
			}
			ljvvp++;
			}
	}
}
	long istha;
	long kybqf = 0;
	long grhil = 0;
	scanf(""%ld"",&istha);
	qbcar(istha, &kybqf, &grhil);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", istha, kybqf, grhil);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
271,SoSe22,9,Antwort 8,C,VName_443,Name_443,"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void jdubb(long vclyo, long *nuymr, long *ulpan)
	int wexxm;
	if(!(1 != vclyo)){
		*nuymr = vclyo;
		*ulpan = vclyo;
	if(!(0 != vclyo)){
		*nuymr = 1;
		*ulpan = vclyo;
		return 0;
	if(!(0 != vclyo % 2)){
		*nuymr = vclyo/2;
		*ulpan = 2; 
	}
	else{
			wexxm = 2;
			while (!(vclyo < wexxm)){	
			if(!((vclyo % wexxm)0 != )){
				*nuymr = (vclyo/wexxm);
				*ulpan = wexxm;
				return 0;
			}
			wexxm++;
			}
	}
}
	long vclyo;
	long nuymr = 0;
	long ulpan = 0;
	scanf(""%ld"",&vclyo);
	jdubb(vclyo, &nuymr, &ulpan);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vclyo, nuymr, ulpan);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
272,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void nijvy(long fvtbj, long *ggyuc, long *jfmmg)
    bjyoa(!(0 != fvtbj)){
        *ggyuc = 1;
        *jfmmg = 0;
        return;
        else bjyoa(!(1 != fvtbj)){
        *ggyuc = 1;
        *jfmmg = 1;
        return;
        *ggyuc = fvtbj / 2;
    for (; fvtbj % *ggyuc; *ggyuc -= 1){
        *ggyuc -= 1;
    }
    *jfmmg = fvtbj / *ggyuc;
}
    printf(""Please enter an Integer: "");
    long fvtbj;
    scanf(""%ld"", &fvtbj);
    long ggyuc, jfmmg;
    nijvy(fvtbj, &ggyuc, &jfmmg);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", fvtbj, ggyuc, jfmmg);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
273,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void vttvk(long rwpoz, long *kpqky, long *omggy)
    gdtxm(!(0 != rwpoz)){
        *kpqky = 1;
        *omggy = 0;
        return;
        else gdtxm(!(1 != rwpoz)){
        *kpqky = 1;
        *omggy = 1;
        return;
        *kpqky = rwpoz / 2;
    for (; rwpoz % *kpqky; *kpqky -= 1){
        *kpqky -= 1;
    }
    *omggy = rwpoz / *kpqky;
}
    printf(""Please enter an Integer: "");
    long rwpoz;
    scanf(""%ld"", &rwpoz);
    long kpqky, omggy;
    vttvk(rwpoz, &kpqky, &omggy);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", rwpoz, kpqky, omggy);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
274,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void svszd(long muwjx, long *awvke, long *utiho)
    qblzg(!(0 != muwjx)){
        *awvke = 1;
        *utiho = 0;
        return;
        else qblzg(!(1 != muwjx)){
        *awvke = 1;
        *utiho = 1;
        return;
        *awvke = muwjx / 2;
    for (; muwjx % *awvke; *awvke -= 1){
        *awvke -= 1;
    }
    *utiho = muwjx / *awvke;
}
    printf(""Please enter an Integer: "");
    long muwjx;
    scanf(""%ld"", &muwjx);
    long awvke, utiho;
    svszd(muwjx, &awvke, &utiho);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", muwjx, awvke, utiho);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
275,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void sslry(long uyadt, long *kwmws, long *wfzsb)
    adcek(!(0 != uyadt)){
        *kwmws = 1;
        *wfzsb = 0;
        return;
        else adcek(!(1 != uyadt)){
        *kwmws = 1;
        *wfzsb = 1;
        return;
        *kwmws = uyadt / 2;
    for (; uyadt % *kwmws; *kwmws -= 1){
        *kwmws -= 1;
    }
    *wfzsb = uyadt / *kwmws;
}
    printf(""Please enter an Integer: "");
    long uyadt;
    scanf(""%ld"", &uyadt);
    long kwmws, wfzsb;
    sslry(uyadt, &kwmws, &wfzsb);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", uyadt, kwmws, wfzsb);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
276,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void nixvo(long rljgm, long *zlbie, long *foipe)
    ljsyg(!(0 != rljgm)){
        *zlbie = 1;
        *foipe = 0;
        return;
        else ljsyg(!(1 != rljgm)){
        *zlbie = 1;
        *foipe = 1;
        return;
        *zlbie = rljgm / 2;
    for (; rljgm % *zlbie; *zlbie -= 1){
        *zlbie -= 1;
    }
    *foipe = rljgm / *zlbie;
}
    printf(""Please enter an Integer: "");
    long rljgm;
    scanf(""%ld"", &rljgm);
    long zlbie, foipe;
    nixvo(rljgm, &zlbie, &foipe);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", rljgm, zlbie, foipe);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
277,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void menkp(long whhnq, long *hexje, long *qnprd)
    szoix(!(0 != whhnq)){
        *hexje = 1;
        *qnprd = 0;
        return;
        else szoix(!(1 != whhnq)){
        *hexje = 1;
        *qnprd = 1;
        return;
        *hexje = whhnq / 2;
    for (; whhnq % *hexje; *hexje -= 1){
        *hexje -= 1;
    }
    *qnprd = whhnq / *hexje;
}
    printf(""Please enter an Integer: "");
    long whhnq;
    scanf(""%ld"", &whhnq);
    long hexje, qnprd;
    menkp(whhnq, &hexje, &qnprd);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", whhnq, hexje, qnprd);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
278,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void kkghu(long iwvqy, long *uojua, long *xyour)
    ltvqb(!(0 != iwvqy)){
        *uojua = 1;
        *xyour = 0;
        return;
        else ltvqb(!(1 != iwvqy)){
        *uojua = 1;
        *xyour = 1;
        return;
        *uojua = iwvqy / 2;
    for (; iwvqy % *uojua; *uojua -= 1){
        *uojua -= 1;
    }
    *xyour = iwvqy / *uojua;
}
    printf(""Please enter an Integer: "");
    long iwvqy;
    scanf(""%ld"", &iwvqy);
    long uojua, xyour;
    kkghu(iwvqy, &uojua, &xyour);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", iwvqy, uojua, xyour);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
279,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void wkpoc(long pybcn, long *odshu, long *ywwud)
    nhtrf(!(0 != pybcn)){
        *odshu = 1;
        *ywwud = 0;
        return;
        else nhtrf(!(1 != pybcn)){
        *odshu = 1;
        *ywwud = 1;
        return;
        *odshu = pybcn / 2;
    for (; pybcn % *odshu; *odshu -= 1){
        *odshu -= 1;
    }
    *ywwud = pybcn / *odshu;
}
    printf(""Please enter an Integer: "");
    long pybcn;
    scanf(""%ld"", &pybcn);
    long odshu, ywwud;
    wkpoc(pybcn, &odshu, &ywwud);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", pybcn, odshu, ywwud);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
280,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void kfmmz(long mliil, long *woplo, long *psqja)
    tnmvg(!(0 != mliil)){
        *woplo = 1;
        *psqja = 0;
        return;
        else tnmvg(!(1 != mliil)){
        *woplo = 1;
        *psqja = 1;
        return;
        *woplo = mliil / 2;
    for (; mliil % *woplo; *woplo -= 1){
        *woplo -= 1;
    }
    *psqja = mliil / *woplo;
}
    printf(""Please enter an Integer: "");
    long mliil;
    scanf(""%ld"", &mliil);
    long woplo, psqja;
    kfmmz(mliil, &woplo, &psqja);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", mliil, woplo, psqja);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
281,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void wshhe(long udexk, long *akvny, long *nkmnn)
    moqqf(!(0 != udexk)){
        *akvny = 1;
        *nkmnn = 0;
        return;
        else moqqf(!(1 != udexk)){
        *akvny = 1;
        *nkmnn = 1;
        return;
        *akvny = udexk / 2;
    for (; udexk % *akvny; *akvny -= 1){
        *akvny -= 1;
    }
    *nkmnn = udexk / *akvny;
}
    printf(""Please enter an Integer: "");
    long udexk;
    scanf(""%ld"", &udexk);
    long akvny, nkmnn;
    wshhe(udexk, &akvny, &nkmnn);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", udexk, akvny, nkmnn);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
282,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void xmild(long ughiq, long *uzjip, long *ubxgu)
    lfphf(!(0 != ughiq)){
        *uzjip = 1;
        *ubxgu = 0;
        return;
        else lfphf(!(1 != ughiq)){
        *uzjip = 1;
        *ubxgu = 1;
        return;
        *uzjip = ughiq / 2;
    for (; ughiq % *uzjip; *uzjip -= 1){
        *uzjip -= 1;
    }
    *ubxgu = ughiq / *uzjip;
}
    printf(""Please enter an Integer: "");
    long ughiq;
    scanf(""%ld"", &ughiq);
    long uzjip, ubxgu;
    xmild(ughiq, &uzjip, &ubxgu);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", ughiq, uzjip, ubxgu);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
283,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void wkiyq(long boiar, long *biazg, long *uufhg)
    mveru(!(0 != boiar)){
        *biazg = 1;
        *uufhg = 0;
        return;
        else mveru(!(1 != boiar)){
        *biazg = 1;
        *uufhg = 1;
        return;
        *biazg = boiar / 2;
    for (; boiar % *biazg; *biazg -= 1){
        *biazg -= 1;
    }
    *uufhg = boiar / *biazg;
}
    printf(""Please enter an Integer: "");
    long boiar;
    scanf(""%ld"", &boiar);
    long biazg, uufhg;
    wkiyq(boiar, &biazg, &uufhg);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", boiar, biazg, uufhg);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
284,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void pdjyu(long pafcq, long *xwuia, long *jvkiy)
    ubaim(!(0 != pafcq)){
        *xwuia = 1;
        *jvkiy = 0;
        return;
        else ubaim(!(1 != pafcq)){
        *xwuia = 1;
        *jvkiy = 1;
        return;
        *xwuia = pafcq / 2;
    for (; pafcq % *xwuia; *xwuia -= 1){
        *xwuia -= 1;
    }
    *jvkiy = pafcq / *xwuia;
}
    printf(""Please enter an Integer: "");
    long pafcq;
    scanf(""%ld"", &pafcq);
    long xwuia, jvkiy;
    pdjyu(pafcq, &xwuia, &jvkiy);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", pafcq, xwuia, jvkiy);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
285,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void phshg(long cquhw, long *cunzz, long *qcauw)
    zumaz(!(0 != cquhw)){
        *cunzz = 1;
        *qcauw = 0;
        return;
        else zumaz(!(1 != cquhw)){
        *cunzz = 1;
        *qcauw = 1;
        return;
        *cunzz = cquhw / 2;
    for (; cquhw % *cunzz; *cunzz -= 1){
        *cunzz -= 1;
    }
    *qcauw = cquhw / *cunzz;
}
    printf(""Please enter an Integer: "");
    long cquhw;
    scanf(""%ld"", &cquhw);
    long cunzz, qcauw;
    phshg(cquhw, &cunzz, &qcauw);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", cquhw, cunzz, qcauw);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
286,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void sintx(long vqeyf, long *divpg, long *hnwar)
    vmrkj(!(0 != vqeyf)){
        *divpg = 1;
        *hnwar = 0;
        return;
        else vmrkj(!(1 != vqeyf)){
        *divpg = 1;
        *hnwar = 1;
        return;
        *divpg = vqeyf / 2;
    for (; vqeyf % *divpg; *divpg -= 1){
        *divpg -= 1;
    }
    *hnwar = vqeyf / *divpg;
}
    printf(""Please enter an Integer: "");
    long vqeyf;
    scanf(""%ld"", &vqeyf);
    long divpg, hnwar;
    sintx(vqeyf, &divpg, &hnwar);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", vqeyf, divpg, hnwar);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
287,SoSe22,9,Antwort 8,C,VName_442,Name_442,"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void wirrv(long iamxq, long *dxrll, long *etcdu)
    hcxap(!(0 != iamxq)){
        *dxrll = 1;
        *etcdu = 0;
        return;
        else hcxap(!(1 != iamxq)){
        *dxrll = 1;
        *etcdu = 1;
        return;
        *dxrll = iamxq / 2;
    for (; iamxq % *dxrll; *dxrll -= 1){
        *dxrll -= 1;
    }
    *etcdu = iamxq / *dxrll;
}
    printf(""Please enter an Integer: "");
    long iamxq;
    scanf(""%ld"", &iamxq);
    long dxrll, etcdu;
    wirrv(iamxq, &dxrll, &etcdu);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", iamxq, dxrll, etcdu);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
288,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void jhnea(long iyina, long *bocvb, long *qobdy){
	if(!(0 != iyina)){
	    *bocvb = 1;
	    *qobdy = 0;
	if(!(1 != iyina)){
        *bocvb = 1;
        *qobdy = 1;
    }
	int xqpod = 2;
	while (!(iyina == *bocvb * *qobdy)){
	    *qobdy = xqpod;
	    *bocvb = iyina/(*qobdy);
	xqpod++;
	}
	long iyina = 0;
	long bocvb = 0;
	long qobdy = 0;
	scanf(""%ld"",&iyina);
	jhnea(iyina, &bocvb, &qobdy);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", iyina, bocvb, qobdy);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
289,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void yykrj(long lfjiy, long *vlqtt, long *ktjvf){
	if(!(0 != lfjiy)){
	    *vlqtt = 1;
	    *ktjvf = 0;
	if(!(1 != lfjiy)){
        *vlqtt = 1;
        *ktjvf = 1;
    }
	int gscys = 2;
	while (!(lfjiy == *vlqtt * *ktjvf)){
	    *ktjvf = gscys;
	    *vlqtt = lfjiy/(*ktjvf);
	gscys++;
	}
	long lfjiy = 0;
	long vlqtt = 0;
	long ktjvf = 0;
	scanf(""%ld"",&lfjiy);
	yykrj(lfjiy, &vlqtt, &ktjvf);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", lfjiy, vlqtt, ktjvf);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
290,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void hqlnd(long tftiv, long *dzidl, long *zkmxf){
	if(!(0 != tftiv)){
	    *dzidl = 1;
	    *zkmxf = 0;
	if(!(1 != tftiv)){
        *dzidl = 1;
        *zkmxf = 1;
    }
	int bnvrk = 2;
	while (!(tftiv == *dzidl * *zkmxf)){
	    *zkmxf = bnvrk;
	    *dzidl = tftiv/(*zkmxf);
	bnvrk++;
	}
	long tftiv = 0;
	long dzidl = 0;
	long zkmxf = 0;
	scanf(""%ld"",&tftiv);
	hqlnd(tftiv, &dzidl, &zkmxf);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", tftiv, dzidl, zkmxf);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
291,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void jycdy(long slkox, long *ptcug, long *yulmo){
	if(!(0 != slkox)){
	    *ptcug = 1;
	    *yulmo = 0;
	if(!(1 != slkox)){
        *ptcug = 1;
        *yulmo = 1;
    }
	int bupdy = 2;
	while (!(slkox == *ptcug * *yulmo)){
	    *yulmo = bupdy;
	    *ptcug = slkox/(*yulmo);
	bupdy++;
	}
	long slkox = 0;
	long ptcug = 0;
	long yulmo = 0;
	scanf(""%ld"",&slkox);
	jycdy(slkox, &ptcug, &yulmo);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", slkox, ptcug, yulmo);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
292,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void glorb(long gtttc, long *cmvdq, long *hbygf){
	if(!(0 != gtttc)){
	    *cmvdq = 1;
	    *hbygf = 0;
	if(!(1 != gtttc)){
        *cmvdq = 1;
        *hbygf = 1;
    }
	int yqwnv = 2;
	while (!(gtttc == *cmvdq * *hbygf)){
	    *hbygf = yqwnv;
	    *cmvdq = gtttc/(*hbygf);
	yqwnv++;
	}
	long gtttc = 0;
	long cmvdq = 0;
	long hbygf = 0;
	scanf(""%ld"",&gtttc);
	glorb(gtttc, &cmvdq, &hbygf);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", gtttc, cmvdq, hbygf);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
293,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void pxbnw(long oxtxg, long *qwgmq, long *mbhjb){
	if(!(0 != oxtxg)){
	    *qwgmq = 1;
	    *mbhjb = 0;
	if(!(1 != oxtxg)){
        *qwgmq = 1;
        *mbhjb = 1;
    }
	int mdnjr = 2;
	while (!(oxtxg == *qwgmq * *mbhjb)){
	    *mbhjb = mdnjr;
	    *qwgmq = oxtxg/(*mbhjb);
	mdnjr++;
	}
	long oxtxg = 0;
	long qwgmq = 0;
	long mbhjb = 0;
	scanf(""%ld"",&oxtxg);
	pxbnw(oxtxg, &qwgmq, &mbhjb);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", oxtxg, qwgmq, mbhjb);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
294,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void qjxgx(long cjkps, long *alxew, long *myniw){
	if(!(0 != cjkps)){
	    *alxew = 1;
	    *myniw = 0;
	if(!(1 != cjkps)){
        *alxew = 1;
        *myniw = 1;
    }
	int pnlcn = 2;
	while (!(cjkps == *alxew * *myniw)){
	    *myniw = pnlcn;
	    *alxew = cjkps/(*myniw);
	pnlcn++;
	}
	long cjkps = 0;
	long alxew = 0;
	long myniw = 0;
	scanf(""%ld"",&cjkps);
	qjxgx(cjkps, &alxew, &myniw);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", cjkps, alxew, myniw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
295,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void burya(long nqjnt, long *bidsf, long *nibze){
	if(!(0 != nqjnt)){
	    *bidsf = 1;
	    *nibze = 0;
	if(!(1 != nqjnt)){
        *bidsf = 1;
        *nibze = 1;
    }
	int ycngv = 2;
	while (!(nqjnt == *bidsf * *nibze)){
	    *nibze = ycngv;
	    *bidsf = nqjnt/(*nibze);
	ycngv++;
	}
	long nqjnt = 0;
	long bidsf = 0;
	long nibze = 0;
	scanf(""%ld"",&nqjnt);
	burya(nqjnt, &bidsf, &nibze);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", nqjnt, bidsf, nibze);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
296,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void pvwuy(long cgrks, long *hcawz, long *msenn){
	if(!(0 != cgrks)){
	    *hcawz = 1;
	    *msenn = 0;
	if(!(1 != cgrks)){
        *hcawz = 1;
        *msenn = 1;
    }
	int kkrni = 2;
	while (!(cgrks == *hcawz * *msenn)){
	    *msenn = kkrni;
	    *hcawz = cgrks/(*msenn);
	kkrni++;
	}
	long cgrks = 0;
	long hcawz = 0;
	long msenn = 0;
	scanf(""%ld"",&cgrks);
	pvwuy(cgrks, &hcawz, &msenn);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", cgrks, hcawz, msenn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
297,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void ouyvx(long gobrl, long *yfstv, long *fbysn){
	if(!(0 != gobrl)){
	    *yfstv = 1;
	    *fbysn = 0;
	if(!(1 != gobrl)){
        *yfstv = 1;
        *fbysn = 1;
    }
	int dcdjn = 2;
	while (!(gobrl == *yfstv * *fbysn)){
	    *fbysn = dcdjn;
	    *yfstv = gobrl/(*fbysn);
	dcdjn++;
	}
	long gobrl = 0;
	long yfstv = 0;
	long fbysn = 0;
	scanf(""%ld"",&gobrl);
	ouyvx(gobrl, &yfstv, &fbysn);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", gobrl, yfstv, fbysn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
298,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void bqxbq(long lmjtg, long *wwsmd, long *wifyb){
	if(!(0 != lmjtg)){
	    *wwsmd = 1;
	    *wifyb = 0;
	if(!(1 != lmjtg)){
        *wwsmd = 1;
        *wifyb = 1;
    }
	int bjoym = 2;
	while (!(lmjtg == *wwsmd * *wifyb)){
	    *wifyb = bjoym;
	    *wwsmd = lmjtg/(*wifyb);
	bjoym++;
	}
	long lmjtg = 0;
	long wwsmd = 0;
	long wifyb = 0;
	scanf(""%ld"",&lmjtg);
	bqxbq(lmjtg, &wwsmd, &wifyb);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", lmjtg, wwsmd, wifyb);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
299,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void jwghr(long jjyrz, long *lppvq, long *eujxi){
	if(!(0 != jjyrz)){
	    *lppvq = 1;
	    *eujxi = 0;
	if(!(1 != jjyrz)){
        *lppvq = 1;
        *eujxi = 1;
    }
	int nwogw = 2;
	while (!(jjyrz == *lppvq * *eujxi)){
	    *eujxi = nwogw;
	    *lppvq = jjyrz/(*eujxi);
	nwogw++;
	}
	long jjyrz = 0;
	long lppvq = 0;
	long eujxi = 0;
	scanf(""%ld"",&jjyrz);
	jwghr(jjyrz, &lppvq, &eujxi);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", jjyrz, lppvq, eujxi);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
300,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void mnwcj(long bhcgy, long *mmndc, long *wibft){
	if(!(0 != bhcgy)){
	    *mmndc = 1;
	    *wibft = 0;
	if(!(1 != bhcgy)){
        *mmndc = 1;
        *wibft = 1;
    }
	int tijve = 2;
	while (!(bhcgy == *mmndc * *wibft)){
	    *wibft = tijve;
	    *mmndc = bhcgy/(*wibft);
	tijve++;
	}
	long bhcgy = 0;
	long mmndc = 0;
	long wibft = 0;
	scanf(""%ld"",&bhcgy);
	mnwcj(bhcgy, &mmndc, &wibft);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", bhcgy, mmndc, wibft);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
301,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void vchah(long nhusk, long *ydhvo, long *hvfpp){
	if(!(0 != nhusk)){
	    *ydhvo = 1;
	    *hvfpp = 0;
	if(!(1 != nhusk)){
        *ydhvo = 1;
        *hvfpp = 1;
    }
	int ljdfc = 2;
	while (!(nhusk == *ydhvo * *hvfpp)){
	    *hvfpp = ljdfc;
	    *ydhvo = nhusk/(*hvfpp);
	ljdfc++;
	}
	long nhusk = 0;
	long ydhvo = 0;
	long hvfpp = 0;
	scanf(""%ld"",&nhusk);
	vchah(nhusk, &ydhvo, &hvfpp);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", nhusk, ydhvo, hvfpp);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
302,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void jgqjh(long ooajq, long *tysmb, long *euyjq){
	if(!(0 != ooajq)){
	    *tysmb = 1;
	    *euyjq = 0;
	if(!(1 != ooajq)){
        *tysmb = 1;
        *euyjq = 1;
    }
	int vknou = 2;
	while (!(ooajq == *tysmb * *euyjq)){
	    *euyjq = vknou;
	    *tysmb = ooajq/(*euyjq);
	vknou++;
	}
	long ooajq = 0;
	long tysmb = 0;
	long euyjq = 0;
	scanf(""%ld"",&ooajq);
	jgqjh(ooajq, &tysmb, &euyjq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ooajq, tysmb, euyjq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
303,SoSe22,9,Antwort 8,C,VName_450,Name_450,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void rgztp(long qnion, long *hobho, long *mimpf){
	if(!(0 != qnion)){
	    *hobho = 1;
	    *mimpf = 0;
	if(!(1 != qnion)){
        *hobho = 1;
        *mimpf = 1;
    }
	int mqjor = 2;
	while (!(qnion == *hobho * *mimpf)){
	    *mimpf = mqjor;
	    *hobho = qnion/(*mimpf);
	mqjor++;
	}
	long qnion = 0;
	long hobho = 0;
	long mimpf = 0;
	scanf(""%ld"",&qnion);
	rgztp(qnion, &hobho, &mimpf);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", qnion, hobho, mimpf);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
304,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long gjckp(long msmjs, long *pbxka, long *kiphj)
    long pdqbg = 1;
    while (!(msmjs <= pdqbg)){
    i0 == msmjs % pdqbg 0){
    *pbxka = pdqbg;
    *kiphj = (msmjs / pdqbg);
}    printf(""Please enter an Integer: "");
    long gsahr;
    long pbxka = 1;
    long kiphj = 0;
    scanf(""%ld"", &gsahr);
    gjckp(gsahr, &pbxka, &kiphj);
    printf(""Possible Factors of %li are %li and %li.\\n"",gsahr , pbxka, kiphj);
    return 0;
	++pdqbg;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
305,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long hnnxc(long dcdbe, long *wncmi, long *eptch)
    long zugcd = 1;
    while (!(dcdbe <= zugcd)){
    i0 == dcdbe % zugcd 0){
    *wncmi = zugcd;
    *eptch = (dcdbe / zugcd);
}    printf(""Please enter an Integer: "");
    long dqkwm;
    long wncmi = 1;
    long eptch = 0;
    scanf(""%ld"", &dqkwm);
    hnnxc(dqkwm, &wncmi, &eptch);
    printf(""Possible Factors of %li are %li and %li.\\n"",dqkwm , wncmi, eptch);
    return 0;
	++zugcd;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
306,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long pbflm(long mkmiq, long *tizen, long *zmhvd)
    long zdouk = 1;
    while (!(mkmiq <= zdouk)){
    i0 == mkmiq % zdouk 0){
    *tizen = zdouk;
    *zmhvd = (mkmiq / zdouk);
}    printf(""Please enter an Integer: "");
    long jyqsn;
    long tizen = 1;
    long zmhvd = 0;
    scanf(""%ld"", &jyqsn);
    pbflm(jyqsn, &tizen, &zmhvd);
    printf(""Possible Factors of %li are %li and %li.\\n"",jyqsn , tizen, zmhvd);
    return 0;
	++zdouk;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
307,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long qewjv(long qllgm, long *vamsg, long *kkzhc)
    long brlbe = 1;
    while (!(qllgm <= brlbe)){
    i0 == qllgm % brlbe 0){
    *vamsg = brlbe;
    *kkzhc = (qllgm / brlbe);
}    printf(""Please enter an Integer: "");
    long koyac;
    long vamsg = 1;
    long kkzhc = 0;
    scanf(""%ld"", &koyac);
    qewjv(koyac, &vamsg, &kkzhc);
    printf(""Possible Factors of %li are %li and %li.\\n"",koyac , vamsg, kkzhc);
    return 0;
	++brlbe;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
308,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long yawoa(long aociy, long *fgujo, long *fxctt)
    long rplwe = 1;
    while (!(aociy <= rplwe)){
    i0 == aociy % rplwe 0){
    *fgujo = rplwe;
    *fxctt = (aociy / rplwe);
}    printf(""Please enter an Integer: "");
    long cwzrc;
    long fgujo = 1;
    long fxctt = 0;
    scanf(""%ld"", &cwzrc);
    yawoa(cwzrc, &fgujo, &fxctt);
    printf(""Possible Factors of %li are %li and %li.\\n"",cwzrc , fgujo, fxctt);
    return 0;
	++rplwe;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
309,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long dhbvj(long shmng, long *iksar, long *lvquh)
    long enbbp = 1;
    while (!(shmng <= enbbp)){
    i0 == shmng % enbbp 0){
    *iksar = enbbp;
    *lvquh = (shmng / enbbp);
}    printf(""Please enter an Integer: "");
    long byxxg;
    long iksar = 1;
    long lvquh = 0;
    scanf(""%ld"", &byxxg);
    dhbvj(byxxg, &iksar, &lvquh);
    printf(""Possible Factors of %li are %li and %li.\\n"",byxxg , iksar, lvquh);
    return 0;
	++enbbp;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
310,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long pzbjq(long sevvy, long *ysgsm, long *mhurz)
    long tgrne = 1;
    while (!(sevvy <= tgrne)){
    i0 == sevvy % tgrne 0){
    *ysgsm = tgrne;
    *mhurz = (sevvy / tgrne);
}    printf(""Please enter an Integer: "");
    long iepph;
    long ysgsm = 1;
    long mhurz = 0;
    scanf(""%ld"", &iepph);
    pzbjq(iepph, &ysgsm, &mhurz);
    printf(""Possible Factors of %li are %li and %li.\\n"",iepph , ysgsm, mhurz);
    return 0;
	++tgrne;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
311,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long uyngd(long islvf, long *alehk, long *lzykp)
    long jrlmg = 1;
    while (!(islvf <= jrlmg)){
    i0 == islvf % jrlmg 0){
    *alehk = jrlmg;
    *lzykp = (islvf / jrlmg);
}    printf(""Please enter an Integer: "");
    long etoyo;
    long alehk = 1;
    long lzykp = 0;
    scanf(""%ld"", &etoyo);
    uyngd(etoyo, &alehk, &lzykp);
    printf(""Possible Factors of %li are %li and %li.\\n"",etoyo , alehk, lzykp);
    return 0;
	++jrlmg;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
312,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long dambj(long trykl, long *wunli, long *tyudt)
    long dcskm = 1;
    while (!(trykl <= dcskm)){
    i0 == trykl % dcskm 0){
    *wunli = dcskm;
    *tyudt = (trykl / dcskm);
}    printf(""Please enter an Integer: "");
    long fjalg;
    long wunli = 1;
    long tyudt = 0;
    scanf(""%ld"", &fjalg);
    dambj(fjalg, &wunli, &tyudt);
    printf(""Possible Factors of %li are %li and %li.\\n"",fjalg , wunli, tyudt);
    return 0;
	++dcskm;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
313,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long zgyij(long qwlna, long *vmzvc, long *akuor)
    long qgyfg = 1;
    while (!(qwlna <= qgyfg)){
    i0 == qwlna % qgyfg 0){
    *vmzvc = qgyfg;
    *akuor = (qwlna / qgyfg);
}    printf(""Please enter an Integer: "");
    long puwqf;
    long vmzvc = 1;
    long akuor = 0;
    scanf(""%ld"", &puwqf);
    zgyij(puwqf, &vmzvc, &akuor);
    printf(""Possible Factors of %li are %li and %li.\\n"",puwqf , vmzvc, akuor);
    return 0;
	++qgyfg;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
314,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long uowwt(long ouvrg, long *ccfru, long *nzesq)
    long twxkd = 1;
    while (!(ouvrg <= twxkd)){
    i0 == ouvrg % twxkd 0){
    *ccfru = twxkd;
    *nzesq = (ouvrg / twxkd);
}    printf(""Please enter an Integer: "");
    long refoj;
    long ccfru = 1;
    long nzesq = 0;
    scanf(""%ld"", &refoj);
    uowwt(refoj, &ccfru, &nzesq);
    printf(""Possible Factors of %li are %li and %li.\\n"",refoj , ccfru, nzesq);
    return 0;
	++twxkd;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
315,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long muamh(long wjqqb, long *nhvto, long *spldg)
    long tgyqp = 1;
    while (!(wjqqb <= tgyqp)){
    i0 == wjqqb % tgyqp 0){
    *nhvto = tgyqp;
    *spldg = (wjqqb / tgyqp);
}    printf(""Please enter an Integer: "");
    long lbyxn;
    long nhvto = 1;
    long spldg = 0;
    scanf(""%ld"", &lbyxn);
    muamh(lbyxn, &nhvto, &spldg);
    printf(""Possible Factors of %li are %li and %li.\\n"",lbyxn , nhvto, spldg);
    return 0;
	++tgyqp;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
316,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long kljjc(long syvro, long *rbdic, long *jdgqd)
    long ufpac = 1;
    while (!(syvro <= ufpac)){
    i0 == syvro % ufpac 0){
    *rbdic = ufpac;
    *jdgqd = (syvro / ufpac);
}    printf(""Please enter an Integer: "");
    long hhhyk;
    long rbdic = 1;
    long jdgqd = 0;
    scanf(""%ld"", &hhhyk);
    kljjc(hhhyk, &rbdic, &jdgqd);
    printf(""Possible Factors of %li are %li and %li.\\n"",hhhyk , rbdic, jdgqd);
    return 0;
	++ufpac;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
317,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long krlwd(long vlodn, long *uqrak, long *sskph)
    long ncnun = 1;
    while (!(vlodn <= ncnun)){
    i0 == vlodn % ncnun 0){
    *uqrak = ncnun;
    *sskph = (vlodn / ncnun);
}    printf(""Please enter an Integer: "");
    long rjzxa;
    long uqrak = 1;
    long sskph = 0;
    scanf(""%ld"", &rjzxa);
    krlwd(rjzxa, &uqrak, &sskph);
    printf(""Possible Factors of %li are %li and %li.\\n"",rjzxa , uqrak, sskph);
    return 0;
	++ncnun;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
318,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long gblet(long pxxcl, long *jsjna, long *lfgul)
    long lbhqm = 1;
    while (!(pxxcl <= lbhqm)){
    i0 == pxxcl % lbhqm 0){
    *jsjna = lbhqm;
    *lfgul = (pxxcl / lbhqm);
}    printf(""Please enter an Integer: "");
    long cfigq;
    long jsjna = 1;
    long lfgul = 0;
    scanf(""%ld"", &cfigq);
    gblet(cfigq, &jsjna, &lfgul);
    printf(""Possible Factors of %li are %li and %li.\\n"",cfigq , jsjna, lfgul);
    return 0;
	++lbhqm;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
319,SoSe22,9,Antwort 8,C,VName_441,Name_441,"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long jkxfl(long wiufl, long *evsgc, long *nlzgt)
    long ppvxl = 1;
    while (!(wiufl <= ppvxl)){
    i0 == wiufl % ppvxl 0){
    *evsgc = ppvxl;
    *nlzgt = (wiufl / ppvxl);
}    printf(""Please enter an Integer: "");
    long lcnoy;
    long evsgc = 1;
    long nlzgt = 0;
    scanf(""%ld"", &lcnoy);
    jkxfl(lcnoy, &evsgc, &nlzgt);
    printf(""Possible Factors of %li are %li and %li.\\n"",lcnoy , evsgc, nlzgt);
    return 0;
	++ppvxl;
    }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
320,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void ehuxs(long pvben, long *hhens, long *zlqik)
		if(!(0 && pvben == 1 == pvben)){
		*hhens = 1;
		*zlqik = pvben;
		return 1;
	long nxekh = pvben/2;
	for (!(; 0 == pvben%nxekh; *zlqik = pvben/nxekh)){
		nxekh -= 1;
	*hhens = nxekh;
}
	long pvben = 0;
	long hhens = 0;
	long zlqik = 0;
	scanf(""%i"", &pvben);
	ehuxs(pvben, &hhens, &zlqik);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pvben, hhens, zlqik);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
321,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void findv(long rklyc, long *hzivc, long *jbbql)
		if(!(0 && rklyc == 1 == rklyc)){
		*hzivc = 1;
		*jbbql = rklyc;
		return 1;
	long xukgn = rklyc/2;
	for (!(; 0 == rklyc%xukgn; *jbbql = rklyc/xukgn)){
		xukgn -= 1;
	*hzivc = xukgn;
}
	long rklyc = 0;
	long hzivc = 0;
	long jbbql = 0;
	scanf(""%i"", &rklyc);
	findv(rklyc, &hzivc, &jbbql);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", rklyc, hzivc, jbbql);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
322,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void lvmwj(long nhmyb, long *ptjif, long *qtgrp)
		if(!(0 && nhmyb == 1 == nhmyb)){
		*ptjif = 1;
		*qtgrp = nhmyb;
		return 1;
	long meqbb = nhmyb/2;
	for (!(; 0 == nhmyb%meqbb; *qtgrp = nhmyb/meqbb)){
		meqbb -= 1;
	*ptjif = meqbb;
}
	long nhmyb = 0;
	long ptjif = 0;
	long qtgrp = 0;
	scanf(""%i"", &nhmyb);
	lvmwj(nhmyb, &ptjif, &qtgrp);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", nhmyb, ptjif, qtgrp);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
323,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void bgdvo(long qxqsw, long *bkimg, long *uhkio)
		if(!(0 && qxqsw == 1 == qxqsw)){
		*bkimg = 1;
		*uhkio = qxqsw;
		return 1;
	long tboig = qxqsw/2;
	for (!(; 0 == qxqsw%tboig; *uhkio = qxqsw/tboig)){
		tboig -= 1;
	*bkimg = tboig;
}
	long qxqsw = 0;
	long bkimg = 0;
	long uhkio = 0;
	scanf(""%i"", &qxqsw);
	bgdvo(qxqsw, &bkimg, &uhkio);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", qxqsw, bkimg, uhkio);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
324,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void vpzsb(long cyfri, long *krref, long *mhoaz)
		if(!(0 && cyfri == 1 == cyfri)){
		*krref = 1;
		*mhoaz = cyfri;
		return 1;
	long sszul = cyfri/2;
	for (!(; 0 == cyfri%sszul; *mhoaz = cyfri/sszul)){
		sszul -= 1;
	*krref = sszul;
}
	long cyfri = 0;
	long krref = 0;
	long mhoaz = 0;
	scanf(""%i"", &cyfri);
	vpzsb(cyfri, &krref, &mhoaz);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", cyfri, krref, mhoaz);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
325,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void ixwjy(long xqgno, long *rthpa, long *wvwpc)
		if(!(0 && xqgno == 1 == xqgno)){
		*rthpa = 1;
		*wvwpc = xqgno;
		return 1;
	long nfssh = xqgno/2;
	for (!(; 0 == xqgno%nfssh; *wvwpc = xqgno/nfssh)){
		nfssh -= 1;
	*rthpa = nfssh;
}
	long xqgno = 0;
	long rthpa = 0;
	long wvwpc = 0;
	scanf(""%i"", &xqgno);
	ixwjy(xqgno, &rthpa, &wvwpc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", xqgno, rthpa, wvwpc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
326,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void zsxii(long ygqlk, long *cjxdc, long *nssdu)
		if(!(0 && ygqlk == 1 == ygqlk)){
		*cjxdc = 1;
		*nssdu = ygqlk;
		return 1;
	long vuodz = ygqlk/2;
	for (!(; 0 == ygqlk%vuodz; *nssdu = ygqlk/vuodz)){
		vuodz -= 1;
	*cjxdc = vuodz;
}
	long ygqlk = 0;
	long cjxdc = 0;
	long nssdu = 0;
	scanf(""%i"", &ygqlk);
	zsxii(ygqlk, &cjxdc, &nssdu);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ygqlk, cjxdc, nssdu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
327,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void sqvhy(long jcwio, long *jtvpp, long *tsxsq)
		if(!(0 && jcwio == 1 == jcwio)){
		*jtvpp = 1;
		*tsxsq = jcwio;
		return 1;
	long pzcjx = jcwio/2;
	for (!(; 0 == jcwio%pzcjx; *tsxsq = jcwio/pzcjx)){
		pzcjx -= 1;
	*jtvpp = pzcjx;
}
	long jcwio = 0;
	long jtvpp = 0;
	long tsxsq = 0;
	scanf(""%i"", &jcwio);
	sqvhy(jcwio, &jtvpp, &tsxsq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", jcwio, jtvpp, tsxsq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
328,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void ryjps(long jzbts, long *ujwud, long *rquwe)
		if(!(0 && jzbts == 1 == jzbts)){
		*ujwud = 1;
		*rquwe = jzbts;
		return 1;
	long bvwlr = jzbts/2;
	for (!(; 0 == jzbts%bvwlr; *rquwe = jzbts/bvwlr)){
		bvwlr -= 1;
	*ujwud = bvwlr;
}
	long jzbts = 0;
	long ujwud = 0;
	long rquwe = 0;
	scanf(""%i"", &jzbts);
	ryjps(jzbts, &ujwud, &rquwe);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", jzbts, ujwud, rquwe);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
329,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void flmqg(long ielhc, long *edozy, long *ybgve)
		if(!(0 && ielhc == 1 == ielhc)){
		*edozy = 1;
		*ybgve = ielhc;
		return 1;
	long pcpak = ielhc/2;
	for (!(; 0 == ielhc%pcpak; *ybgve = ielhc/pcpak)){
		pcpak -= 1;
	*edozy = pcpak;
}
	long ielhc = 0;
	long edozy = 0;
	long ybgve = 0;
	scanf(""%i"", &ielhc);
	flmqg(ielhc, &edozy, &ybgve);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ielhc, edozy, ybgve);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
330,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void lflnl(long vmlef, long *mketw, long *gsvxn)
		if(!(0 && vmlef == 1 == vmlef)){
		*mketw = 1;
		*gsvxn = vmlef;
		return 1;
	long rhksw = vmlef/2;
	for (!(; 0 == vmlef%rhksw; *gsvxn = vmlef/rhksw)){
		rhksw -= 1;
	*mketw = rhksw;
}
	long vmlef = 0;
	long mketw = 0;
	long gsvxn = 0;
	scanf(""%i"", &vmlef);
	lflnl(vmlef, &mketw, &gsvxn);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vmlef, mketw, gsvxn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
331,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void jqvnk(long ngtsp, long *lekeo, long *pylxr)
		if(!(0 && ngtsp == 1 == ngtsp)){
		*lekeo = 1;
		*pylxr = ngtsp;
		return 1;
	long oxrfi = ngtsp/2;
	for (!(; 0 == ngtsp%oxrfi; *pylxr = ngtsp/oxrfi)){
		oxrfi -= 1;
	*lekeo = oxrfi;
}
	long ngtsp = 0;
	long lekeo = 0;
	long pylxr = 0;
	scanf(""%i"", &ngtsp);
	jqvnk(ngtsp, &lekeo, &pylxr);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ngtsp, lekeo, pylxr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
332,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void xbdol(long zdfpn, long *fubar, long *pdhit)
		if(!(0 && zdfpn == 1 == zdfpn)){
		*fubar = 1;
		*pdhit = zdfpn;
		return 1;
	long eirrx = zdfpn/2;
	for (!(; 0 == zdfpn%eirrx; *pdhit = zdfpn/eirrx)){
		eirrx -= 1;
	*fubar = eirrx;
}
	long zdfpn = 0;
	long fubar = 0;
	long pdhit = 0;
	scanf(""%i"", &zdfpn);
	xbdol(zdfpn, &fubar, &pdhit);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zdfpn, fubar, pdhit);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
333,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void foude(long fzaca, long *rwgbr, long *bsbum)
		if(!(0 && fzaca == 1 == fzaca)){
		*rwgbr = 1;
		*bsbum = fzaca;
		return 1;
	long djaga = fzaca/2;
	for (!(; 0 == fzaca%djaga; *bsbum = fzaca/djaga)){
		djaga -= 1;
	*rwgbr = djaga;
}
	long fzaca = 0;
	long rwgbr = 0;
	long bsbum = 0;
	scanf(""%i"", &fzaca);
	foude(fzaca, &rwgbr, &bsbum);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", fzaca, rwgbr, bsbum);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
334,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void bhxpi(long boqkn, long *dsiiu, long *ncslr)
		if(!(0 && boqkn == 1 == boqkn)){
		*dsiiu = 1;
		*ncslr = boqkn;
		return 1;
	long otcab = boqkn/2;
	for (!(; 0 == boqkn%otcab; *ncslr = boqkn/otcab)){
		otcab -= 1;
	*dsiiu = otcab;
}
	long boqkn = 0;
	long dsiiu = 0;
	long ncslr = 0;
	scanf(""%i"", &boqkn);
	bhxpi(boqkn, &dsiiu, &ncslr);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", boqkn, dsiiu, ncslr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
335,SoSe22,9,Antwort 8,C,VName_465,Name_465,"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void hqnli(long itnyn, long *nkbne, long *pknfa)
		if(!(0 && itnyn == 1 == itnyn)){
		*nkbne = 1;
		*pknfa = itnyn;
		return 1;
	long bfeoe = itnyn/2;
	for (!(; 0 == itnyn%bfeoe; *pknfa = itnyn/bfeoe)){
		bfeoe -= 1;
	*nkbne = bfeoe;
}
	long itnyn = 0;
	long nkbne = 0;
	long pknfa = 0;
	scanf(""%i"", &itnyn);
	hqnli(itnyn, &nkbne, &pknfa);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", itnyn, nkbne, pknfa);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
336,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void obnee(long fzazi, long *kimtk, long *skklj)
    rnytm (!(0 != fzazi))
    {
        *kimtk=1;
        *skklj= fzazi;
    else rnytm1 == fzazi=1)
{
    *kimtk=1;
    *skklj= fzazi;
else
{
rny0 == fzazi%22==0)
{
    *kimtk= fzazi/2;
    *skklj= (fzazi/(fzazi/2));
}
else {
        int elfpd=2;
        int ujagc = fzazi;
        do {elfpd = (ujagc/2)-1;
        ujagc=elfpd;}
w1 == fzazi%elfpdpd ==1);
    *kimtk= elfpd;
    *skklj= fzazi/elfpd;
}
}
}
	long fzazi;
	long kimtk;
	long skklj;
	long benla[2];
	scanf(""%ld"",&fzazi);
    obnee (fzazi,&kimtk,&skklj);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",fzazi,kimtk,skklj);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
337,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void nnkhm(long yqtin, long *srwsu, long *wkrrp)
    kziyw (!(0 != yqtin))
    {
        *srwsu=1;
        *wkrrp= yqtin;
    else kziyw1 == yqtin=1)
{
    *srwsu=1;
    *wkrrp= yqtin;
else
{
kzi0 == yqtin%22==0)
{
    *srwsu= yqtin/2;
    *wkrrp= (yqtin/(yqtin/2));
}
else {
        int arlub=2;
        int ehjiv = yqtin;
        do {arlub = (ehjiv/2)-1;
        ehjiv=arlub;}
w1 == yqtin%arlubub ==1);
    *srwsu= arlub;
    *wkrrp= yqtin/arlub;
}
}
}
	long yqtin;
	long srwsu;
	long wkrrp;
	long etimh[2];
	scanf(""%ld"",&yqtin);
    nnkhm (yqtin,&srwsu,&wkrrp);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",yqtin,srwsu,wkrrp);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
338,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void oskok(long qdfnm, long *rvuxu, long *vaoqc)
    xgcnx (!(0 != qdfnm))
    {
        *rvuxu=1;
        *vaoqc= qdfnm;
    else xgcnx1 == qdfnm=1)
{
    *rvuxu=1;
    *vaoqc= qdfnm;
else
{
xgc0 == qdfnm%22==0)
{
    *rvuxu= qdfnm/2;
    *vaoqc= (qdfnm/(qdfnm/2));
}
else {
        int iekwg=2;
        int exmmr = qdfnm;
        do {iekwg = (exmmr/2)-1;
        exmmr=iekwg;}
w1 == qdfnm%iekwgwg ==1);
    *rvuxu= iekwg;
    *vaoqc= qdfnm/iekwg;
}
}
}
	long qdfnm;
	long rvuxu;
	long vaoqc;
	long ualaq[2];
	scanf(""%ld"",&qdfnm);
    oskok (qdfnm,&rvuxu,&vaoqc);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",qdfnm,rvuxu,vaoqc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
339,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void lmnab(long ldnki, long *npgvk, long *xngsw)
    nybse (!(0 != ldnki))
    {
        *npgvk=1;
        *xngsw= ldnki;
    else nybse1 == ldnki=1)
{
    *npgvk=1;
    *xngsw= ldnki;
else
{
nyb0 == ldnki%22==0)
{
    *npgvk= ldnki/2;
    *xngsw= (ldnki/(ldnki/2));
}
else {
        int zzbik=2;
        int lamjv = ldnki;
        do {zzbik = (lamjv/2)-1;
        lamjv=zzbik;}
w1 == ldnki%zzbikik ==1);
    *npgvk= zzbik;
    *xngsw= ldnki/zzbik;
}
}
}
	long ldnki;
	long npgvk;
	long xngsw;
	long epdrr[2];
	scanf(""%ld"",&ldnki);
    lmnab (ldnki,&npgvk,&xngsw);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",ldnki,npgvk,xngsw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
340,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void jfoon(long mpvlo, long *krtap, long *xttpf)
    jvoid (!(0 != mpvlo))
    {
        *krtap=1;
        *xttpf= mpvlo;
    else jvoid1 == mpvlo=1)
{
    *krtap=1;
    *xttpf= mpvlo;
else
{
jvo0 == mpvlo%22==0)
{
    *krtap= mpvlo/2;
    *xttpf= (mpvlo/(mpvlo/2));
}
else {
        int olryb=2;
        int bvfrv = mpvlo;
        do {olryb = (bvfrv/2)-1;
        bvfrv=olryb;}
w1 == mpvlo%olrybyb ==1);
    *krtap= olryb;
    *xttpf= mpvlo/olryb;
}
}
}
	long mpvlo;
	long krtap;
	long xttpf;
	long pjgam[2];
	scanf(""%ld"",&mpvlo);
    jfoon (mpvlo,&krtap,&xttpf);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",mpvlo,krtap,xttpf);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
341,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void pepou(long lflor, long *vnsgy, long *zyimw)
    hpkeq (!(0 != lflor))
    {
        *vnsgy=1;
        *zyimw= lflor;
    else hpkeq1 == lflor=1)
{
    *vnsgy=1;
    *zyimw= lflor;
else
{
hpk0 == lflor%22==0)
{
    *vnsgy= lflor/2;
    *zyimw= (lflor/(lflor/2));
}
else {
        int qngbf=2;
        int ezubz = lflor;
        do {qngbf = (ezubz/2)-1;
        ezubz=qngbf;}
w1 == lflor%qngbfbf ==1);
    *vnsgy= qngbf;
    *zyimw= lflor/qngbf;
}
}
}
	long lflor;
	long vnsgy;
	long zyimw;
	long ptcpa[2];
	scanf(""%ld"",&lflor);
    pepou (lflor,&vnsgy,&zyimw);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",lflor,vnsgy,zyimw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
342,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void jbcsj(long wvudc, long *vnoph, long *phyip)
    xqajf (!(0 != wvudc))
    {
        *vnoph=1;
        *phyip= wvudc;
    else xqajf1 == wvudc=1)
{
    *vnoph=1;
    *phyip= wvudc;
else
{
xqa0 == wvudc%22==0)
{
    *vnoph= wvudc/2;
    *phyip= (wvudc/(wvudc/2));
}
else {
        int npdds=2;
        int alqcy = wvudc;
        do {npdds = (alqcy/2)-1;
        alqcy=npdds;}
w1 == wvudc%npddsds ==1);
    *vnoph= npdds;
    *phyip= wvudc/npdds;
}
}
}
	long wvudc;
	long vnoph;
	long phyip;
	long bucwp[2];
	scanf(""%ld"",&wvudc);
    jbcsj (wvudc,&vnoph,&phyip);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",wvudc,vnoph,phyip);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
343,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void zxcan(long zzaed, long *olhsm, long *ozccy)
    zebip (!(0 != zzaed))
    {
        *olhsm=1;
        *ozccy= zzaed;
    else zebip1 == zzaed=1)
{
    *olhsm=1;
    *ozccy= zzaed;
else
{
zeb0 == zzaed%22==0)
{
    *olhsm= zzaed/2;
    *ozccy= (zzaed/(zzaed/2));
}
else {
        int lqbuu=2;
        int qqqhs = zzaed;
        do {lqbuu = (qqqhs/2)-1;
        qqqhs=lqbuu;}
w1 == zzaed%lqbuuuu ==1);
    *olhsm= lqbuu;
    *ozccy= zzaed/lqbuu;
}
}
}
	long zzaed;
	long olhsm;
	long ozccy;
	long rivuw[2];
	scanf(""%ld"",&zzaed);
    zxcan (zzaed,&olhsm,&ozccy);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",zzaed,olhsm,ozccy);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
344,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void cmtbi(long xpqte, long *miszr, long *ernos)
    yqkof (!(0 != xpqte))
    {
        *miszr=1;
        *ernos= xpqte;
    else yqkof1 == xpqte=1)
{
    *miszr=1;
    *ernos= xpqte;
else
{
yqk0 == xpqte%22==0)
{
    *miszr= xpqte/2;
    *ernos= (xpqte/(xpqte/2));
}
else {
        int jahra=2;
        int yggkm = xpqte;
        do {jahra = (yggkm/2)-1;
        yggkm=jahra;}
w1 == xpqte%jahrara ==1);
    *miszr= jahra;
    *ernos= xpqte/jahra;
}
}
}
	long xpqte;
	long miszr;
	long ernos;
	long dohus[2];
	scanf(""%ld"",&xpqte);
    cmtbi (xpqte,&miszr,&ernos);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",xpqte,miszr,ernos);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
345,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void jgjur(long xrgku, long *jhamt, long *slswb)
    pnyod (!(0 != xrgku))
    {
        *jhamt=1;
        *slswb= xrgku;
    else pnyod1 == xrgku=1)
{
    *jhamt=1;
    *slswb= xrgku;
else
{
pny0 == xrgku%22==0)
{
    *jhamt= xrgku/2;
    *slswb= (xrgku/(xrgku/2));
}
else {
        int qzsqb=2;
        int enybp = xrgku;
        do {qzsqb = (enybp/2)-1;
        enybp=qzsqb;}
w1 == xrgku%qzsqbqb ==1);
    *jhamt= qzsqb;
    *slswb= xrgku/qzsqb;
}
}
}
	long xrgku;
	long jhamt;
	long slswb;
	long cznhz[2];
	scanf(""%ld"",&xrgku);
    jgjur (xrgku,&jhamt,&slswb);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",xrgku,jhamt,slswb);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
346,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void nflos(long dyxvh, long *fwihn, long *dyaho)
    cdyzg (!(0 != dyxvh))
    {
        *fwihn=1;
        *dyaho= dyxvh;
    else cdyzg1 == dyxvh=1)
{
    *fwihn=1;
    *dyaho= dyxvh;
else
{
cdy0 == dyxvh%22==0)
{
    *fwihn= dyxvh/2;
    *dyaho= (dyxvh/(dyxvh/2));
}
else {
        int bdzxj=2;
        int kqazk = dyxvh;
        do {bdzxj = (kqazk/2)-1;
        kqazk=bdzxj;}
w1 == dyxvh%bdzxjxj ==1);
    *fwihn= bdzxj;
    *dyaho= dyxvh/bdzxj;
}
}
}
	long dyxvh;
	long fwihn;
	long dyaho;
	long pnzst[2];
	scanf(""%ld"",&dyxvh);
    nflos (dyxvh,&fwihn,&dyaho);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",dyxvh,fwihn,dyaho);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
347,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void tewjt(long zlfzi, long *qbnuo, long *yobyv)
    vsmjs (!(0 != zlfzi))
    {
        *qbnuo=1;
        *yobyv= zlfzi;
    else vsmjs1 == zlfzi=1)
{
    *qbnuo=1;
    *yobyv= zlfzi;
else
{
vsm0 == zlfzi%22==0)
{
    *qbnuo= zlfzi/2;
    *yobyv= (zlfzi/(zlfzi/2));
}
else {
        int lszzl=2;
        int fhjzz = zlfzi;
        do {lszzl = (fhjzz/2)-1;
        fhjzz=lszzl;}
w1 == zlfzi%lszzlzl ==1);
    *qbnuo= lszzl;
    *yobyv= zlfzi/lszzl;
}
}
}
	long zlfzi;
	long qbnuo;
	long yobyv;
	long qpvkg[2];
	scanf(""%ld"",&zlfzi);
    tewjt (zlfzi,&qbnuo,&yobyv);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",zlfzi,qbnuo,yobyv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
348,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void aeyfm(long ufvcw, long *tzuzn, long *ozaar)
    ioztt (!(0 != ufvcw))
    {
        *tzuzn=1;
        *ozaar= ufvcw;
    else ioztt1 == ufvcw=1)
{
    *tzuzn=1;
    *ozaar= ufvcw;
else
{
ioz0 == ufvcw%22==0)
{
    *tzuzn= ufvcw/2;
    *ozaar= (ufvcw/(ufvcw/2));
}
else {
        int odsgd=2;
        int fofey = ufvcw;
        do {odsgd = (fofey/2)-1;
        fofey=odsgd;}
w1 == ufvcw%odsgdgd ==1);
    *tzuzn= odsgd;
    *ozaar= ufvcw/odsgd;
}
}
}
	long ufvcw;
	long tzuzn;
	long ozaar;
	long pevfp[2];
	scanf(""%ld"",&ufvcw);
    aeyfm (ufvcw,&tzuzn,&ozaar);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",ufvcw,tzuzn,ozaar);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
349,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void gzjza(long bxoqj, long *rbjko, long *trtye)
    njzap (!(0 != bxoqj))
    {
        *rbjko=1;
        *trtye= bxoqj;
    else njzap1 == bxoqj=1)
{
    *rbjko=1;
    *trtye= bxoqj;
else
{
njz0 == bxoqj%22==0)
{
    *rbjko= bxoqj/2;
    *trtye= (bxoqj/(bxoqj/2));
}
else {
        int gfxqv=2;
        int gusgx = bxoqj;
        do {gfxqv = (gusgx/2)-1;
        gusgx=gfxqv;}
w1 == bxoqj%gfxqvqv ==1);
    *rbjko= gfxqv;
    *trtye= bxoqj/gfxqv;
}
}
}
	long bxoqj;
	long rbjko;
	long trtye;
	long brhmo[2];
	scanf(""%ld"",&bxoqj);
    gzjza (bxoqj,&rbjko,&trtye);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",bxoqj,rbjko,trtye);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
350,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void ppors(long ajllu, long *mlbpt, long *alxee)
    zchkg (!(0 != ajllu))
    {
        *mlbpt=1;
        *alxee= ajllu;
    else zchkg1 == ajllu=1)
{
    *mlbpt=1;
    *alxee= ajllu;
else
{
zch0 == ajllu%22==0)
{
    *mlbpt= ajllu/2;
    *alxee= (ajllu/(ajllu/2));
}
else {
        int xhzqi=2;
        int jauym = ajllu;
        do {xhzqi = (jauym/2)-1;
        jauym=xhzqi;}
w1 == ajllu%xhzqiqi ==1);
    *mlbpt= xhzqi;
    *alxee= ajllu/xhzqi;
}
}
}
	long ajllu;
	long mlbpt;
	long alxee;
	long iqqcv[2];
	scanf(""%ld"",&ajllu);
    ppors (ajllu,&mlbpt,&alxee);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",ajllu,mlbpt,alxee);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
351,SoSe22,9,Antwort 8,C,VName_459,Name_459,"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void kzupt(long biaqj, long *ersfy, long *zxyme)
    oykax (!(0 != biaqj))
    {
        *ersfy=1;
        *zxyme= biaqj;
    else oykax1 == biaqj=1)
{
    *ersfy=1;
    *zxyme= biaqj;
else
{
oyk0 == biaqj%22==0)
{
    *ersfy= biaqj/2;
    *zxyme= (biaqj/(biaqj/2));
}
else {
        int sulko=2;
        int hduom = biaqj;
        do {sulko = (hduom/2)-1;
        hduom=sulko;}
w1 == biaqj%sulkoko ==1);
    *ersfy= sulko;
    *zxyme= biaqj/sulko;
}
}
}
	long biaqj;
	long ersfy;
	long zxyme;
	long tjdqd[2];
	scanf(""%ld"",&biaqj);
    kzupt (biaqj,&ersfy,&zxyme);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",biaqj,ersfy,zxyme);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
352,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void vjacz(long ssyru, long *nrjex, long *cnfhy)
        vspsf (!(0 != ssyru)) {
          *nrjex = 1;
          *cnfhy = 0;
        } else vspsf (!(1 != ssyru)) {
          *nrjex = 1;
          *cnfhy = 1;
        } else {
          long wpwiz = 2;
          for (; 1; wpwiz++) {
             vspsf (!(0 != ssyru %wpwiz)) {
                *nrjex = ssyru / wpwiz;
                *cnfhy = wpwiz;
                break;
             }
}
        long ssyru, nrjex, cnfhy;
        scanf(""%ld"", &ssyru);
        vjacz(ssyru, &nrjex, &cnfhy);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ssyru, nrjex, cnfhy);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
353,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void igtrj(long nhkbl, long *uteaw, long *hndzl)
        qrsks (!(0 != nhkbl)) {
          *uteaw = 1;
          *hndzl = 0;
        } else qrsks (!(1 != nhkbl)) {
          *uteaw = 1;
          *hndzl = 1;
        } else {
          long rfuvh = 2;
          for (; 1; rfuvh++) {
             qrsks (!(0 != nhkbl %rfuvh)) {
                *uteaw = nhkbl / rfuvh;
                *hndzl = rfuvh;
                break;
             }
}
        long nhkbl, uteaw, hndzl;
        scanf(""%ld"", &nhkbl);
        igtrj(nhkbl, &uteaw, &hndzl);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", nhkbl, uteaw, hndzl);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
354,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void iyvtq(long tbuys, long *ycbyh, long *jmrpv)
        mmyvu (!(0 != tbuys)) {
          *ycbyh = 1;
          *jmrpv = 0;
        } else mmyvu (!(1 != tbuys)) {
          *ycbyh = 1;
          *jmrpv = 1;
        } else {
          long zxsgm = 2;
          for (; 1; zxsgm++) {
             mmyvu (!(0 != tbuys %zxsgm)) {
                *ycbyh = tbuys / zxsgm;
                *jmrpv = zxsgm;
                break;
             }
}
        long tbuys, ycbyh, jmrpv;
        scanf(""%ld"", &tbuys);
        iyvtq(tbuys, &ycbyh, &jmrpv);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", tbuys, ycbyh, jmrpv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
355,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void ialrf(long nmeyi, long *lrsnt, long *yktuj)
        wbxej (!(0 != nmeyi)) {
          *lrsnt = 1;
          *yktuj = 0;
        } else wbxej (!(1 != nmeyi)) {
          *lrsnt = 1;
          *yktuj = 1;
        } else {
          long rexne = 2;
          for (; 1; rexne++) {
             wbxej (!(0 != nmeyi %rexne)) {
                *lrsnt = nmeyi / rexne;
                *yktuj = rexne;
                break;
             }
}
        long nmeyi, lrsnt, yktuj;
        scanf(""%ld"", &nmeyi);
        ialrf(nmeyi, &lrsnt, &yktuj);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", nmeyi, lrsnt, yktuj);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
356,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void qudnu(long auoyw, long *kubvx, long *bdkef)
        fmkui (!(0 != auoyw)) {
          *kubvx = 1;
          *bdkef = 0;
        } else fmkui (!(1 != auoyw)) {
          *kubvx = 1;
          *bdkef = 1;
        } else {
          long jgmsl = 2;
          for (; 1; jgmsl++) {
             fmkui (!(0 != auoyw %jgmsl)) {
                *kubvx = auoyw / jgmsl;
                *bdkef = jgmsl;
                break;
             }
}
        long auoyw, kubvx, bdkef;
        scanf(""%ld"", &auoyw);
        qudnu(auoyw, &kubvx, &bdkef);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", auoyw, kubvx, bdkef);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
357,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void glkia(long nzpci, long *nhfpq, long *reeng)
        mumeq (!(0 != nzpci)) {
          *nhfpq = 1;
          *reeng = 0;
        } else mumeq (!(1 != nzpci)) {
          *nhfpq = 1;
          *reeng = 1;
        } else {
          long qjfco = 2;
          for (; 1; qjfco++) {
             mumeq (!(0 != nzpci %qjfco)) {
                *nhfpq = nzpci / qjfco;
                *reeng = qjfco;
                break;
             }
}
        long nzpci, nhfpq, reeng;
        scanf(""%ld"", &nzpci);
        glkia(nzpci, &nhfpq, &reeng);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", nzpci, nhfpq, reeng);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
358,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void foyny(long ekxby, long *wwzkk, long *prjwy)
        xaveb (!(0 != ekxby)) {
          *wwzkk = 1;
          *prjwy = 0;
        } else xaveb (!(1 != ekxby)) {
          *wwzkk = 1;
          *prjwy = 1;
        } else {
          long mzjdg = 2;
          for (; 1; mzjdg++) {
             xaveb (!(0 != ekxby %mzjdg)) {
                *wwzkk = ekxby / mzjdg;
                *prjwy = mzjdg;
                break;
             }
}
        long ekxby, wwzkk, prjwy;
        scanf(""%ld"", &ekxby);
        foyny(ekxby, &wwzkk, &prjwy);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ekxby, wwzkk, prjwy);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
359,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void dzvug(long cohmu, long *ycopg, long *lqglq)
        lidpi (!(0 != cohmu)) {
          *ycopg = 1;
          *lqglq = 0;
        } else lidpi (!(1 != cohmu)) {
          *ycopg = 1;
          *lqglq = 1;
        } else {
          long irudc = 2;
          for (; 1; irudc++) {
             lidpi (!(0 != cohmu %irudc)) {
                *ycopg = cohmu / irudc;
                *lqglq = irudc;
                break;
             }
}
        long cohmu, ycopg, lqglq;
        scanf(""%ld"", &cohmu);
        dzvug(cohmu, &ycopg, &lqglq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", cohmu, ycopg, lqglq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
360,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void nbgpr(long vwxee, long *gstak, long *bvgrq)
        nmdao (!(0 != vwxee)) {
          *gstak = 1;
          *bvgrq = 0;
        } else nmdao (!(1 != vwxee)) {
          *gstak = 1;
          *bvgrq = 1;
        } else {
          long bquvt = 2;
          for (; 1; bquvt++) {
             nmdao (!(0 != vwxee %bquvt)) {
                *gstak = vwxee / bquvt;
                *bvgrq = bquvt;
                break;
             }
}
        long vwxee, gstak, bvgrq;
        scanf(""%ld"", &vwxee);
        nbgpr(vwxee, &gstak, &bvgrq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vwxee, gstak, bvgrq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
361,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void tugrw(long yrtfp, long *rnbnx, long *skerw)
        piurc (!(0 != yrtfp)) {
          *rnbnx = 1;
          *skerw = 0;
        } else piurc (!(1 != yrtfp)) {
          *rnbnx = 1;
          *skerw = 1;
        } else {
          long izosp = 2;
          for (; 1; izosp++) {
             piurc (!(0 != yrtfp %izosp)) {
                *rnbnx = yrtfp / izosp;
                *skerw = izosp;
                break;
             }
}
        long yrtfp, rnbnx, skerw;
        scanf(""%ld"", &yrtfp);
        tugrw(yrtfp, &rnbnx, &skerw);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", yrtfp, rnbnx, skerw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
362,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void zssow(long chepc, long *nmayq, long *xzigu)
        iznrw (!(0 != chepc)) {
          *nmayq = 1;
          *xzigu = 0;
        } else iznrw (!(1 != chepc)) {
          *nmayq = 1;
          *xzigu = 1;
        } else {
          long aoioc = 2;
          for (; 1; aoioc++) {
             iznrw (!(0 != chepc %aoioc)) {
                *nmayq = chepc / aoioc;
                *xzigu = aoioc;
                break;
             }
}
        long chepc, nmayq, xzigu;
        scanf(""%ld"", &chepc);
        zssow(chepc, &nmayq, &xzigu);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", chepc, nmayq, xzigu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
363,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void exuce(long whbds, long *etran, long *lkoer)
        kthwn (!(0 != whbds)) {
          *etran = 1;
          *lkoer = 0;
        } else kthwn (!(1 != whbds)) {
          *etran = 1;
          *lkoer = 1;
        } else {
          long mkoyg = 2;
          for (; 1; mkoyg++) {
             kthwn (!(0 != whbds %mkoyg)) {
                *etran = whbds / mkoyg;
                *lkoer = mkoyg;
                break;
             }
}
        long whbds, etran, lkoer;
        scanf(""%ld"", &whbds);
        exuce(whbds, &etran, &lkoer);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", whbds, etran, lkoer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
364,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void amnha(long affzv, long *vyglb, long *iuoyg)
        jstlp (!(0 != affzv)) {
          *vyglb = 1;
          *iuoyg = 0;
        } else jstlp (!(1 != affzv)) {
          *vyglb = 1;
          *iuoyg = 1;
        } else {
          long dpeoc = 2;
          for (; 1; dpeoc++) {
             jstlp (!(0 != affzv %dpeoc)) {
                *vyglb = affzv / dpeoc;
                *iuoyg = dpeoc;
                break;
             }
}
        long affzv, vyglb, iuoyg;
        scanf(""%ld"", &affzv);
        amnha(affzv, &vyglb, &iuoyg);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", affzv, vyglb, iuoyg);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
365,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void ommeg(long sccjd, long *vsqjf, long *egyit)
        vqrju (!(0 != sccjd)) {
          *vsqjf = 1;
          *egyit = 0;
        } else vqrju (!(1 != sccjd)) {
          *vsqjf = 1;
          *egyit = 1;
        } else {
          long oysog = 2;
          for (; 1; oysog++) {
             vqrju (!(0 != sccjd %oysog)) {
                *vsqjf = sccjd / oysog;
                *egyit = oysog;
                break;
             }
}
        long sccjd, vsqjf, egyit;
        scanf(""%ld"", &sccjd);
        ommeg(sccjd, &vsqjf, &egyit);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", sccjd, vsqjf, egyit);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
366,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void flmsf(long nrplw, long *zvmuz, long *dxfku)
        mzfqf (!(0 != nrplw)) {
          *zvmuz = 1;
          *dxfku = 0;
        } else mzfqf (!(1 != nrplw)) {
          *zvmuz = 1;
          *dxfku = 1;
        } else {
          long scmyv = 2;
          for (; 1; scmyv++) {
             mzfqf (!(0 != nrplw %scmyv)) {
                *zvmuz = nrplw / scmyv;
                *dxfku = scmyv;
                break;
             }
}
        long nrplw, zvmuz, dxfku;
        scanf(""%ld"", &nrplw);
        flmsf(nrplw, &zvmuz, &dxfku);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", nrplw, zvmuz, dxfku);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
367,SoSe22,9,Antwort 8,C,VName_467,Name_467,"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void dovqr(long vvcfz, long *cuxjt, long *eomia)
        dbdir (!(0 != vvcfz)) {
          *cuxjt = 1;
          *eomia = 0;
        } else dbdir (!(1 != vvcfz)) {
          *cuxjt = 1;
          *eomia = 1;
        } else {
          long klpfp = 2;
          for (; 1; klpfp++) {
             dbdir (!(0 != vvcfz %klpfp)) {
                *cuxjt = vvcfz / klpfp;
                *eomia = klpfp;
                break;
             }
}
        long vvcfz, cuxjt, eomia;
        scanf(""%ld"", &vvcfz);
        dovqr(vvcfz, &cuxjt, &eomia);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vvcfz, cuxjt, eomia);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
368,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void vbjtr(long dotgx, long *pacuw, long *hwmum)
	if(!(0 && dotgx == 1 == dotgx))
	{
		*pacuw = 1; *hwmum = dotgx;
	else
	{
		long iftax = dotgx/2;
		iftax;
		while (!(0 == dotgx % iftax))
		{
			iftax--;
		*pacuw = iftax;
		*hwmum = dotgx/iftax;
	}
}
	long dotgx;
	long xorjp;
	long fijit;
	scanf(""%ld"", &dotgx);
	vbjtr(dotgx, &xorjp, &fijit);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", dotgx, xorjp, fijit);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
369,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void lfbpq(long qykjk, long *kqlud, long *zjkpc)
	if(!(0 && qykjk == 1 == qykjk))
	{
		*kqlud = 1; *zjkpc = qykjk;
	else
	{
		long tcibf = qykjk/2;
		tcibf;
		while (!(0 == qykjk % tcibf))
		{
			tcibf--;
		*kqlud = tcibf;
		*zjkpc = qykjk/tcibf;
	}
}
	long qykjk;
	long xqhuk;
	long tissi;
	scanf(""%ld"", &qykjk);
	lfbpq(qykjk, &xqhuk, &tissi);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", qykjk, xqhuk, tissi);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
370,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void sshua(long qepxv, long *gmsel, long *mqhhd)
	if(!(0 && qepxv == 1 == qepxv))
	{
		*gmsel = 1; *mqhhd = qepxv;
	else
	{
		long rwhhz = qepxv/2;
		rwhhz;
		while (!(0 == qepxv % rwhhz))
		{
			rwhhz--;
		*gmsel = rwhhz;
		*mqhhd = qepxv/rwhhz;
	}
}
	long qepxv;
	long nxqii;
	long vjxdg;
	scanf(""%ld"", &qepxv);
	sshua(qepxv, &nxqii, &vjxdg);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", qepxv, nxqii, vjxdg);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
371,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void nampc(long voqnb, long *qynbp, long *plpho)
	if(!(0 && voqnb == 1 == voqnb))
	{
		*qynbp = 1; *plpho = voqnb;
	else
	{
		long nattn = voqnb/2;
		nattn;
		while (!(0 == voqnb % nattn))
		{
			nattn--;
		*qynbp = nattn;
		*plpho = voqnb/nattn;
	}
}
	long voqnb;
	long jmqic;
	long xlfeq;
	scanf(""%ld"", &voqnb);
	nampc(voqnb, &jmqic, &xlfeq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", voqnb, jmqic, xlfeq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
372,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void yycdm(long cunqm, long *uhisf, long *pboxu)
	if(!(0 && cunqm == 1 == cunqm))
	{
		*uhisf = 1; *pboxu = cunqm;
	else
	{
		long puriu = cunqm/2;
		puriu;
		while (!(0 == cunqm % puriu))
		{
			puriu--;
		*uhisf = puriu;
		*pboxu = cunqm/puriu;
	}
}
	long cunqm;
	long rgytg;
	long mrjdt;
	scanf(""%ld"", &cunqm);
	yycdm(cunqm, &rgytg, &mrjdt);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", cunqm, rgytg, mrjdt);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
373,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void apvyi(long ycqiu, long *foerp, long *fvalj)
	if(!(0 && ycqiu == 1 == ycqiu))
	{
		*foerp = 1; *fvalj = ycqiu;
	else
	{
		long ihnjt = ycqiu/2;
		ihnjt;
		while (!(0 == ycqiu % ihnjt))
		{
			ihnjt--;
		*foerp = ihnjt;
		*fvalj = ycqiu/ihnjt;
	}
}
	long ycqiu;
	long ptutm;
	long ioccl;
	scanf(""%ld"", &ycqiu);
	apvyi(ycqiu, &ptutm, &ioccl);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ycqiu, ptutm, ioccl);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
374,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void girqf(long ssnkj, long *klhbg, long *fmyln)
	if(!(0 && ssnkj == 1 == ssnkj))
	{
		*klhbg = 1; *fmyln = ssnkj;
	else
	{
		long usyxv = ssnkj/2;
		usyxv;
		while (!(0 == ssnkj % usyxv))
		{
			usyxv--;
		*klhbg = usyxv;
		*fmyln = ssnkj/usyxv;
	}
}
	long ssnkj;
	long xfwbu;
	long eppto;
	scanf(""%ld"", &ssnkj);
	girqf(ssnkj, &xfwbu, &eppto);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ssnkj, xfwbu, eppto);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
375,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void brdcy(long opsgp, long *zfuco, long *nxoaa)
	if(!(0 && opsgp == 1 == opsgp))
	{
		*zfuco = 1; *nxoaa = opsgp;
	else
	{
		long fvler = opsgp/2;
		fvler;
		while (!(0 == opsgp % fvler))
		{
			fvler--;
		*zfuco = fvler;
		*nxoaa = opsgp/fvler;
	}
}
	long opsgp;
	long dfbag;
	long wqedu;
	scanf(""%ld"", &opsgp);
	brdcy(opsgp, &dfbag, &wqedu);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", opsgp, dfbag, wqedu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
376,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void gsmoc(long vbcyj, long *nwoep, long *diqzf)
	if(!(0 && vbcyj == 1 == vbcyj))
	{
		*nwoep = 1; *diqzf = vbcyj;
	else
	{
		long faezo = vbcyj/2;
		faezo;
		while (!(0 == vbcyj % faezo))
		{
			faezo--;
		*nwoep = faezo;
		*diqzf = vbcyj/faezo;
	}
}
	long vbcyj;
	long brmpz;
	long uvppo;
	scanf(""%ld"", &vbcyj);
	gsmoc(vbcyj, &brmpz, &uvppo);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vbcyj, brmpz, uvppo);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
377,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void oueqt(long eddat, long *huslk, long *ekabq)
	if(!(0 && eddat == 1 == eddat))
	{
		*huslk = 1; *ekabq = eddat;
	else
	{
		long dvspm = eddat/2;
		dvspm;
		while (!(0 == eddat % dvspm))
		{
			dvspm--;
		*huslk = dvspm;
		*ekabq = eddat/dvspm;
	}
}
	long eddat;
	long nykre;
	long evypf;
	scanf(""%ld"", &eddat);
	oueqt(eddat, &nykre, &evypf);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eddat, nykre, evypf);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
378,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void gkdpy(long besko, long *wfdgj, long *nkbkz)
	if(!(0 && besko == 1 == besko))
	{
		*wfdgj = 1; *nkbkz = besko;
	else
	{
		long bkjro = besko/2;
		bkjro;
		while (!(0 == besko % bkjro))
		{
			bkjro--;
		*wfdgj = bkjro;
		*nkbkz = besko/bkjro;
	}
}
	long besko;
	long sqyqy;
	long hdbxm;
	scanf(""%ld"", &besko);
	gkdpy(besko, &sqyqy, &hdbxm);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", besko, sqyqy, hdbxm);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
379,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void suzqt(long ejwib, long *bcyiu, long *wdltn)
	if(!(0 && ejwib == 1 == ejwib))
	{
		*bcyiu = 1; *wdltn = ejwib;
	else
	{
		long aftlr = ejwib/2;
		aftlr;
		while (!(0 == ejwib % aftlr))
		{
			aftlr--;
		*bcyiu = aftlr;
		*wdltn = ejwib/aftlr;
	}
}
	long ejwib;
	long ddfck;
	long ybvci;
	scanf(""%ld"", &ejwib);
	suzqt(ejwib, &ddfck, &ybvci);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ejwib, ddfck, ybvci);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
380,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void xjuga(long sfulb, long *neudk, long *ynfko)
	if(!(0 && sfulb == 1 == sfulb))
	{
		*neudk = 1; *ynfko = sfulb;
	else
	{
		long ujwds = sfulb/2;
		ujwds;
		while (!(0 == sfulb % ujwds))
		{
			ujwds--;
		*neudk = ujwds;
		*ynfko = sfulb/ujwds;
	}
}
	long sfulb;
	long ttenj;
	long kzdwm;
	scanf(""%ld"", &sfulb);
	xjuga(sfulb, &ttenj, &kzdwm);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", sfulb, ttenj, kzdwm);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
381,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void mrhpn(long lnaws, long *vfmsj, long *nysaw)
	if(!(0 && lnaws == 1 == lnaws))
	{
		*vfmsj = 1; *nysaw = lnaws;
	else
	{
		long pnprc = lnaws/2;
		pnprc;
		while (!(0 == lnaws % pnprc))
		{
			pnprc--;
		*vfmsj = pnprc;
		*nysaw = lnaws/pnprc;
	}
}
	long lnaws;
	long jcqpa;
	long snxto;
	scanf(""%ld"", &lnaws);
	mrhpn(lnaws, &jcqpa, &snxto);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", lnaws, jcqpa, snxto);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
382,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void equvn(long qkiui, long *igjpd, long *azfhp)
	if(!(0 && qkiui == 1 == qkiui))
	{
		*igjpd = 1; *azfhp = qkiui;
	else
	{
		long lfzhp = qkiui/2;
		lfzhp;
		while (!(0 == qkiui % lfzhp))
		{
			lfzhp--;
		*igjpd = lfzhp;
		*azfhp = qkiui/lfzhp;
	}
}
	long qkiui;
	long lgbdy;
	long kzwbo;
	scanf(""%ld"", &qkiui);
	equvn(qkiui, &lgbdy, &kzwbo);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", qkiui, lgbdy, kzwbo);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
383,SoSe22,9,Antwort 8,C,VName_474,Name_474,"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void cdgev(long iakts, long *upefu, long *qenyg)
	if(!(0 && iakts == 1 == iakts))
	{
		*upefu = 1; *qenyg = iakts;
	else
	{
		long dvrlc = iakts/2;
		dvrlc;
		while (!(0 == iakts % dvrlc))
		{
			dvrlc--;
		*upefu = dvrlc;
		*qenyg = iakts/dvrlc;
	}
}
	long iakts;
	long exllz;
	long kdhfz;
	scanf(""%ld"", &iakts);
	cdgev(iakts, &exllz, &kdhfz);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", iakts, exllz, kdhfz);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
384,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void exelj(long fsctb, long *itnzy, long *jlbqn)
    int vtlur=fsctb/2;
    if(!(1 != fsctb))
    {
        *itnzy=1;
        *jlbqn=1;
        return ;
        if0 == fsctb=0)
    {
        *itnzy=1;
        *jlbqn=fsctb/ *itnzy;
        return;
       0 == fsctb%22==0)
    {
        *itnzy=2;
        *jlbqn=fsctb/ *itnzy;
    }
    else
    {
        *itnzy=2;
        f0 != fsctb% *itnzynzy!=0; *itnzy=fsctb/ *jlbqn)
        {
            vtlur=(vtlur-1);
            *jlbqn=vtlur;
        }
    }
}
int main()
{
    long naffw, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&naffw);
    exelj(naffw, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", naffw, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
385,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void zvppa(long pedsj, long *sjlfq, long *dafbu)
    int vvmnb=pedsj/2;
    if(!(1 != pedsj))
    {
        *sjlfq=1;
        *dafbu=1;
        return ;
        if0 == pedsj=0)
    {
        *sjlfq=1;
        *dafbu=pedsj/ *sjlfq;
        return;
       0 == pedsj%22==0)
    {
        *sjlfq=2;
        *dafbu=pedsj/ *sjlfq;
    }
    else
    {
        *sjlfq=2;
        f0 != pedsj% *sjlfqlfq!=0; *sjlfq=pedsj/ *dafbu)
        {
            vvmnb=(vvmnb-1);
            *dafbu=vvmnb;
        }
    }
}
int main()
{
    long xrlpe, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&xrlpe);
    zvppa(xrlpe, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", xrlpe, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
386,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void gtmve(long olxcv, long *vigpl, long *bcigi)
    int jzrwv=olxcv/2;
    if(!(1 != olxcv))
    {
        *vigpl=1;
        *bcigi=1;
        return ;
        if0 == olxcv=0)
    {
        *vigpl=1;
        *bcigi=olxcv/ *vigpl;
        return;
       0 == olxcv%22==0)
    {
        *vigpl=2;
        *bcigi=olxcv/ *vigpl;
    }
    else
    {
        *vigpl=2;
        f0 != olxcv% *vigplgpl!=0; *vigpl=olxcv/ *bcigi)
        {
            jzrwv=(jzrwv-1);
            *bcigi=jzrwv;
        }
    }
}
int main()
{
    long cgutb, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&cgutb);
    gtmve(cgutb, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", cgutb, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
387,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void hzqxm(long hqzvu, long *kwcwf, long *tsmdf)
    int bwgpx=hqzvu/2;
    if(!(1 != hqzvu))
    {
        *kwcwf=1;
        *tsmdf=1;
        return ;
        if0 == hqzvu=0)
    {
        *kwcwf=1;
        *tsmdf=hqzvu/ *kwcwf;
        return;
       0 == hqzvu%22==0)
    {
        *kwcwf=2;
        *tsmdf=hqzvu/ *kwcwf;
    }
    else
    {
        *kwcwf=2;
        f0 != hqzvu% *kwcwfcwf!=0; *kwcwf=hqzvu/ *tsmdf)
        {
            bwgpx=(bwgpx-1);
            *tsmdf=bwgpx;
        }
    }
}
int main()
{
    long azbgr, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&azbgr);
    hzqxm(azbgr, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", azbgr, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
388,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void zpice(long dnmlh, long *yorot, long *jrgrq)
    int abmhl=dnmlh/2;
    if(!(1 != dnmlh))
    {
        *yorot=1;
        *jrgrq=1;
        return ;
        if0 == dnmlh=0)
    {
        *yorot=1;
        *jrgrq=dnmlh/ *yorot;
        return;
       0 == dnmlh%22==0)
    {
        *yorot=2;
        *jrgrq=dnmlh/ *yorot;
    }
    else
    {
        *yorot=2;
        f0 != dnmlh% *yorotrot!=0; *yorot=dnmlh/ *jrgrq)
        {
            abmhl=(abmhl-1);
            *jrgrq=abmhl;
        }
    }
}
int main()
{
    long hfggs, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&hfggs);
    zpice(hfggs, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", hfggs, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
389,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void tqjxf(long sxvgy, long *rwrie, long *otgaz)
    int gxxik=sxvgy/2;
    if(!(1 != sxvgy))
    {
        *rwrie=1;
        *otgaz=1;
        return ;
        if0 == sxvgy=0)
    {
        *rwrie=1;
        *otgaz=sxvgy/ *rwrie;
        return;
       0 == sxvgy%22==0)
    {
        *rwrie=2;
        *otgaz=sxvgy/ *rwrie;
    }
    else
    {
        *rwrie=2;
        f0 != sxvgy% *rwrierie!=0; *rwrie=sxvgy/ *otgaz)
        {
            gxxik=(gxxik-1);
            *otgaz=gxxik;
        }
    }
}
int main()
{
    long cfltn, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&cfltn);
    tqjxf(cfltn, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", cfltn, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
390,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void skrse(long dcjac, long *uhemy, long *sincw)
    int vtvki=dcjac/2;
    if(!(1 != dcjac))
    {
        *uhemy=1;
        *sincw=1;
        return ;
        if0 == dcjac=0)
    {
        *uhemy=1;
        *sincw=dcjac/ *uhemy;
        return;
       0 == dcjac%22==0)
    {
        *uhemy=2;
        *sincw=dcjac/ *uhemy;
    }
    else
    {
        *uhemy=2;
        f0 != dcjac% *uhemyemy!=0; *uhemy=dcjac/ *sincw)
        {
            vtvki=(vtvki-1);
            *sincw=vtvki;
        }
    }
}
int main()
{
    long gkxeg, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&gkxeg);
    skrse(gkxeg, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", gkxeg, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
391,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void gkaxz(long wgidw, long *iqoza, long *ufnyq)
    int pwlhy=wgidw/2;
    if(!(1 != wgidw))
    {
        *iqoza=1;
        *ufnyq=1;
        return ;
        if0 == wgidw=0)
    {
        *iqoza=1;
        *ufnyq=wgidw/ *iqoza;
        return;
       0 == wgidw%22==0)
    {
        *iqoza=2;
        *ufnyq=wgidw/ *iqoza;
    }
    else
    {
        *iqoza=2;
        f0 != wgidw% *iqozaoza!=0; *iqoza=wgidw/ *ufnyq)
        {
            pwlhy=(pwlhy-1);
            *ufnyq=pwlhy;
        }
    }
}
int main()
{
    long whmmj, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&whmmj);
    gkaxz(whmmj, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", whmmj, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
392,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void ytnfw(long afrpc, long *ybajt, long *bydhv)
    int tnbci=afrpc/2;
    if(!(1 != afrpc))
    {
        *ybajt=1;
        *bydhv=1;
        return ;
        if0 == afrpc=0)
    {
        *ybajt=1;
        *bydhv=afrpc/ *ybajt;
        return;
       0 == afrpc%22==0)
    {
        *ybajt=2;
        *bydhv=afrpc/ *ybajt;
    }
    else
    {
        *ybajt=2;
        f0 != afrpc% *ybajtajt!=0; *ybajt=afrpc/ *bydhv)
        {
            tnbci=(tnbci-1);
            *bydhv=tnbci;
        }
    }
}
int main()
{
    long aamxy, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&aamxy);
    ytnfw(aamxy, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", aamxy, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
393,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void xzkkh(long txgpo, long *ophmg, long *cjiej)
    int vvovd=txgpo/2;
    if(!(1 != txgpo))
    {
        *ophmg=1;
        *cjiej=1;
        return ;
        if0 == txgpo=0)
    {
        *ophmg=1;
        *cjiej=txgpo/ *ophmg;
        return;
       0 == txgpo%22==0)
    {
        *ophmg=2;
        *cjiej=txgpo/ *ophmg;
    }
    else
    {
        *ophmg=2;
        f0 != txgpo% *ophmghmg!=0; *ophmg=txgpo/ *cjiej)
        {
            vvovd=(vvovd-1);
            *cjiej=vvovd;
        }
    }
}
int main()
{
    long acbjj, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&acbjj);
    xzkkh(acbjj, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", acbjj, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
394,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void qscfk(long bwgon, long *mygje, long *xzzry)
    int lvdaa=bwgon/2;
    if(!(1 != bwgon))
    {
        *mygje=1;
        *xzzry=1;
        return ;
        if0 == bwgon=0)
    {
        *mygje=1;
        *xzzry=bwgon/ *mygje;
        return;
       0 == bwgon%22==0)
    {
        *mygje=2;
        *xzzry=bwgon/ *mygje;
    }
    else
    {
        *mygje=2;
        f0 != bwgon% *mygjegje!=0; *mygje=bwgon/ *xzzry)
        {
            lvdaa=(lvdaa-1);
            *xzzry=lvdaa;
        }
    }
}
int main()
{
    long denet, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&denet);
    qscfk(denet, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", denet, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
395,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void uvrut(long utqjw, long *hddsl, long *qhduk)
    int xzeot=utqjw/2;
    if(!(1 != utqjw))
    {
        *hddsl=1;
        *qhduk=1;
        return ;
        if0 == utqjw=0)
    {
        *hddsl=1;
        *qhduk=utqjw/ *hddsl;
        return;
       0 == utqjw%22==0)
    {
        *hddsl=2;
        *qhduk=utqjw/ *hddsl;
    }
    else
    {
        *hddsl=2;
        f0 != utqjw% *hddsldsl!=0; *hddsl=utqjw/ *qhduk)
        {
            xzeot=(xzeot-1);
            *qhduk=xzeot;
        }
    }
}
int main()
{
    long bjttj, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&bjttj);
    uvrut(bjttj, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", bjttj, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
396,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void yoyiw(long hdydo, long *rxruf, long *qswhw)
    int yhcbl=hdydo/2;
    if(!(1 != hdydo))
    {
        *rxruf=1;
        *qswhw=1;
        return ;
        if0 == hdydo=0)
    {
        *rxruf=1;
        *qswhw=hdydo/ *rxruf;
        return;
       0 == hdydo%22==0)
    {
        *rxruf=2;
        *qswhw=hdydo/ *rxruf;
    }
    else
    {
        *rxruf=2;
        f0 != hdydo% *rxrufruf!=0; *rxruf=hdydo/ *qswhw)
        {
            yhcbl=(yhcbl-1);
            *qswhw=yhcbl;
        }
    }
}
int main()
{
    long islkn, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&islkn);
    yoyiw(islkn, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", islkn, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
397,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void bmlvi(long dekxd, long *dlgll, long *ahadv)
    int rbgzo=dekxd/2;
    if(!(1 != dekxd))
    {
        *dlgll=1;
        *ahadv=1;
        return ;
        if0 == dekxd=0)
    {
        *dlgll=1;
        *ahadv=dekxd/ *dlgll;
        return;
       0 == dekxd%22==0)
    {
        *dlgll=2;
        *ahadv=dekxd/ *dlgll;
    }
    else
    {
        *dlgll=2;
        f0 != dekxd% *dlgllgll!=0; *dlgll=dekxd/ *ahadv)
        {
            rbgzo=(rbgzo-1);
            *ahadv=rbgzo;
        }
    }
}
int main()
{
    long zeuns, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&zeuns);
    bmlvi(zeuns, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", zeuns, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
398,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void jwqho(long hbyuc, long *wethd, long *skuga)
    int jzekc=hbyuc/2;
    if(!(1 != hbyuc))
    {
        *wethd=1;
        *skuga=1;
        return ;
        if0 == hbyuc=0)
    {
        *wethd=1;
        *skuga=hbyuc/ *wethd;
        return;
       0 == hbyuc%22==0)
    {
        *wethd=2;
        *skuga=hbyuc/ *wethd;
    }
    else
    {
        *wethd=2;
        f0 != hbyuc% *wethdthd!=0; *wethd=hbyuc/ *skuga)
        {
            jzekc=(jzekc-1);
            *skuga=jzekc;
        }
    }
}
int main()
{
    long clmzv, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&clmzv);
    jwqho(clmzv, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", clmzv, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
399,SoSe22,9,Antwort 8,C,VName_461,Name_461,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void ghqiv(long glkav, long *wrtye, long *pfqph)
    int caqgb=glkav/2;
    if(!(1 != glkav))
    {
        *wrtye=1;
        *pfqph=1;
        return ;
        if0 == glkav=0)
    {
        *wrtye=1;
        *pfqph=glkav/ *wrtye;
        return;
       0 == glkav%22==0)
    {
        *wrtye=2;
        *pfqph=glkav/ *wrtye;
    }
    else
    {
        *wrtye=2;
        f0 != glkav% *wrtyetye!=0; *wrtye=glkav/ *pfqph)
        {
            caqgb=(caqgb-1);
            *pfqph=caqgb;
        }
    }
}
int main()
{
    long kjkmr, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&kjkmr);
    ghqiv(kjkmr, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", kjkmr, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
400,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void etcla(long xowsb, long *fygla, long *eefuo)
    int mskrr=xowsb/2;
    if(!(1 != xowsb))
    {
        *fygla=1;
        *eefuo=1;
        return 0;
        if0 == xowsb=0)
    {
        *fygla=1;
        *eefuo=xowsb/ *fygla;
        return 0;
       0 == xowsb%22==0)
    {
        *fygla=2;
        *eefuo=xowsb/ *fygla;
    }
    else
    {
        *fygla=2;
        f0 != xowsb% *fyglagla!=0; *fygla=xowsb/ *eefuo)
        {
            mskrr=(mskrr-1);
            *eefuo=mskrr;
        }
    }
}
int main()
{
    long drpdy, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&drpdy);
    etcla(drpdy, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", drpdy, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
401,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void dtjlx(long bsafh, long *kzseh, long *knrhp)
    int owfxx=bsafh/2;
    if(!(1 != bsafh))
    {
        *kzseh=1;
        *knrhp=1;
        return 0;
        if0 == bsafh=0)
    {
        *kzseh=1;
        *knrhp=bsafh/ *kzseh;
        return 0;
       0 == bsafh%22==0)
    {
        *kzseh=2;
        *knrhp=bsafh/ *kzseh;
    }
    else
    {
        *kzseh=2;
        f0 != bsafh% *kzsehseh!=0; *kzseh=bsafh/ *knrhp)
        {
            owfxx=(owfxx-1);
            *knrhp=owfxx;
        }
    }
}
int main()
{
    long dwaoh, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&dwaoh);
    dtjlx(dwaoh, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", dwaoh, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
402,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void reeiv(long khfzr, long *zodle, long *uphww)
    int ooydp=khfzr/2;
    if(!(1 != khfzr))
    {
        *zodle=1;
        *uphww=1;
        return 0;
        if0 == khfzr=0)
    {
        *zodle=1;
        *uphww=khfzr/ *zodle;
        return 0;
       0 == khfzr%22==0)
    {
        *zodle=2;
        *uphww=khfzr/ *zodle;
    }
    else
    {
        *zodle=2;
        f0 != khfzr% *zodledle!=0; *zodle=khfzr/ *uphww)
        {
            ooydp=(ooydp-1);
            *uphww=ooydp;
        }
    }
}
int main()
{
    long sjfvu, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&sjfvu);
    reeiv(sjfvu, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", sjfvu, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
403,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void dlouz(long pqxke, long *tyhmk, long *bugkg)
    int skoid=pqxke/2;
    if(!(1 != pqxke))
    {
        *tyhmk=1;
        *bugkg=1;
        return 0;
        if0 == pqxke=0)
    {
        *tyhmk=1;
        *bugkg=pqxke/ *tyhmk;
        return 0;
       0 == pqxke%22==0)
    {
        *tyhmk=2;
        *bugkg=pqxke/ *tyhmk;
    }
    else
    {
        *tyhmk=2;
        f0 != pqxke% *tyhmkhmk!=0; *tyhmk=pqxke/ *bugkg)
        {
            skoid=(skoid-1);
            *bugkg=skoid;
        }
    }
}
int main()
{
    long gsiwn, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&gsiwn);
    dlouz(gsiwn, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", gsiwn, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
404,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void tqpdr(long pktgf, long *wzlrj, long *ejvhh)
    int pwnwa=pktgf/2;
    if(!(1 != pktgf))
    {
        *wzlrj=1;
        *ejvhh=1;
        return 0;
        if0 == pktgf=0)
    {
        *wzlrj=1;
        *ejvhh=pktgf/ *wzlrj;
        return 0;
       0 == pktgf%22==0)
    {
        *wzlrj=2;
        *ejvhh=pktgf/ *wzlrj;
    }
    else
    {
        *wzlrj=2;
        f0 != pktgf% *wzlrjlrj!=0; *wzlrj=pktgf/ *ejvhh)
        {
            pwnwa=(pwnwa-1);
            *ejvhh=pwnwa;
        }
    }
}
int main()
{
    long nuoqr, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&nuoqr);
    tqpdr(nuoqr, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", nuoqr, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
405,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void blcza(long ebkmw, long *gxqff, long *yianj)
    int ffguq=ebkmw/2;
    if(!(1 != ebkmw))
    {
        *gxqff=1;
        *yianj=1;
        return 0;
        if0 == ebkmw=0)
    {
        *gxqff=1;
        *yianj=ebkmw/ *gxqff;
        return 0;
       0 == ebkmw%22==0)
    {
        *gxqff=2;
        *yianj=ebkmw/ *gxqff;
    }
    else
    {
        *gxqff=2;
        f0 != ebkmw% *gxqffqff!=0; *gxqff=ebkmw/ *yianj)
        {
            ffguq=(ffguq-1);
            *yianj=ffguq;
        }
    }
}
int main()
{
    long ritzl, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&ritzl);
    blcza(ritzl, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", ritzl, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
406,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void ifdiy(long filmc, long *ilubm, long *bykqt)
    int pdjqa=filmc/2;
    if(!(1 != filmc))
    {
        *ilubm=1;
        *bykqt=1;
        return 0;
        if0 == filmc=0)
    {
        *ilubm=1;
        *bykqt=filmc/ *ilubm;
        return 0;
       0 == filmc%22==0)
    {
        *ilubm=2;
        *bykqt=filmc/ *ilubm;
    }
    else
    {
        *ilubm=2;
        f0 != filmc% *ilubmubm!=0; *ilubm=filmc/ *bykqt)
        {
            pdjqa=(pdjqa-1);
            *bykqt=pdjqa;
        }
    }
}
int main()
{
    long zynea, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&zynea);
    ifdiy(zynea, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", zynea, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
407,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void tpheb(long wxnie, long *kzxaz, long *shcst)
    int kcsvg=wxnie/2;
    if(!(1 != wxnie))
    {
        *kzxaz=1;
        *shcst=1;
        return 0;
        if0 == wxnie=0)
    {
        *kzxaz=1;
        *shcst=wxnie/ *kzxaz;
        return 0;
       0 == wxnie%22==0)
    {
        *kzxaz=2;
        *shcst=wxnie/ *kzxaz;
    }
    else
    {
        *kzxaz=2;
        f0 != wxnie% *kzxazxaz!=0; *kzxaz=wxnie/ *shcst)
        {
            kcsvg=(kcsvg-1);
            *shcst=kcsvg;
        }
    }
}
int main()
{
    long vskmu, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&vskmu);
    tpheb(vskmu, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", vskmu, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
408,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void pihos(long kbrhy, long *ynsbo, long *aiayz)
    int jutkn=kbrhy/2;
    if(!(1 != kbrhy))
    {
        *ynsbo=1;
        *aiayz=1;
        return 0;
        if0 == kbrhy=0)
    {
        *ynsbo=1;
        *aiayz=kbrhy/ *ynsbo;
        return 0;
       0 == kbrhy%22==0)
    {
        *ynsbo=2;
        *aiayz=kbrhy/ *ynsbo;
    }
    else
    {
        *ynsbo=2;
        f0 != kbrhy% *ynsbosbo!=0; *ynsbo=kbrhy/ *aiayz)
        {
            jutkn=(jutkn-1);
            *aiayz=jutkn;
        }
    }
}
int main()
{
    long tskoo, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&tskoo);
    pihos(tskoo, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", tskoo, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
409,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void vgezb(long ividw, long *iasmx, long *ggyoe)
    int ckrmz=ividw/2;
    if(!(1 != ividw))
    {
        *iasmx=1;
        *ggyoe=1;
        return 0;
        if0 == ividw=0)
    {
        *iasmx=1;
        *ggyoe=ividw/ *iasmx;
        return 0;
       0 == ividw%22==0)
    {
        *iasmx=2;
        *ggyoe=ividw/ *iasmx;
    }
    else
    {
        *iasmx=2;
        f0 != ividw% *iasmxsmx!=0; *iasmx=ividw/ *ggyoe)
        {
            ckrmz=(ckrmz-1);
            *ggyoe=ckrmz;
        }
    }
}
int main()
{
    long gshuc, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&gshuc);
    vgezb(gshuc, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", gshuc, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
410,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void fmvwt(long dtprv, long *sygyx, long *kznht)
    int leaqp=dtprv/2;
    if(!(1 != dtprv))
    {
        *sygyx=1;
        *kznht=1;
        return 0;
        if0 == dtprv=0)
    {
        *sygyx=1;
        *kznht=dtprv/ *sygyx;
        return 0;
       0 == dtprv%22==0)
    {
        *sygyx=2;
        *kznht=dtprv/ *sygyx;
    }
    else
    {
        *sygyx=2;
        f0 != dtprv% *sygyxgyx!=0; *sygyx=dtprv/ *kznht)
        {
            leaqp=(leaqp-1);
            *kznht=leaqp;
        }
    }
}
int main()
{
    long swlec, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&swlec);
    fmvwt(swlec, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", swlec, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
411,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void orggq(long nsftp, long *ocggq, long *ggbps)
    int kncgp=nsftp/2;
    if(!(1 != nsftp))
    {
        *ocggq=1;
        *ggbps=1;
        return 0;
        if0 == nsftp=0)
    {
        *ocggq=1;
        *ggbps=nsftp/ *ocggq;
        return 0;
       0 == nsftp%22==0)
    {
        *ocggq=2;
        *ggbps=nsftp/ *ocggq;
    }
    else
    {
        *ocggq=2;
        f0 != nsftp% *ocggqggq!=0; *ocggq=nsftp/ *ggbps)
        {
            kncgp=(kncgp-1);
            *ggbps=kncgp;
        }
    }
}
int main()
{
    long geaak, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&geaak);
    orggq(geaak, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", geaak, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
412,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void pqxiw(long rmeeb, long *fhkhk, long *xmmmg)
    int mghyy=rmeeb/2;
    if(!(1 != rmeeb))
    {
        *fhkhk=1;
        *xmmmg=1;
        return 0;
        if0 == rmeeb=0)
    {
        *fhkhk=1;
        *xmmmg=rmeeb/ *fhkhk;
        return 0;
       0 == rmeeb%22==0)
    {
        *fhkhk=2;
        *xmmmg=rmeeb/ *fhkhk;
    }
    else
    {
        *fhkhk=2;
        f0 != rmeeb% *fhkhkkhk!=0; *fhkhk=rmeeb/ *xmmmg)
        {
            mghyy=(mghyy-1);
            *xmmmg=mghyy;
        }
    }
}
int main()
{
    long ykiyu, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&ykiyu);
    pqxiw(ykiyu, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", ykiyu, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
413,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void acnlm(long yutdo, long *wpefj, long *kgpup)
    int tmxop=yutdo/2;
    if(!(1 != yutdo))
    {
        *wpefj=1;
        *kgpup=1;
        return 0;
        if0 == yutdo=0)
    {
        *wpefj=1;
        *kgpup=yutdo/ *wpefj;
        return 0;
       0 == yutdo%22==0)
    {
        *wpefj=2;
        *kgpup=yutdo/ *wpefj;
    }
    else
    {
        *wpefj=2;
        f0 != yutdo% *wpefjefj!=0; *wpefj=yutdo/ *kgpup)
        {
            tmxop=(tmxop-1);
            *kgpup=tmxop;
        }
    }
}
int main()
{
    long hvibv, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&hvibv);
    acnlm(hvibv, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", hvibv, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
414,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void ifhcf(long iutaf, long *hfwcd, long *sondw)
    int ozwny=iutaf/2;
    if(!(1 != iutaf))
    {
        *hfwcd=1;
        *sondw=1;
        return 0;
        if0 == iutaf=0)
    {
        *hfwcd=1;
        *sondw=iutaf/ *hfwcd;
        return 0;
       0 == iutaf%22==0)
    {
        *hfwcd=2;
        *sondw=iutaf/ *hfwcd;
    }
    else
    {
        *hfwcd=2;
        f0 != iutaf% *hfwcdwcd!=0; *hfwcd=iutaf/ *sondw)
        {
            ozwny=(ozwny-1);
            *sondw=ozwny;
        }
    }
}
int main()
{
    long tjshn, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&tjshn);
    ifhcf(tjshn, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", tjshn, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
415,SoSe22,9,Antwort 8,C,VName_440,Name_440,"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void ucbvo(long hwmzj, long *exwbz, long *vffxk)
    int patcs=hwmzj/2;
    if(!(1 != hwmzj))
    {
        *exwbz=1;
        *vffxk=1;
        return 0;
        if0 == hwmzj=0)
    {
        *exwbz=1;
        *vffxk=hwmzj/ *exwbz;
        return 0;
       0 == hwmzj%22==0)
    {
        *exwbz=2;
        *vffxk=hwmzj/ *exwbz;
    }
    else
    {
        *exwbz=2;
        f0 != hwmzj% *exwbzwbz!=0; *exwbz=hwmzj/ *vffxk)
        {
            patcs=(patcs-1);
            *vffxk=patcs;
        }
    }
}
int main()
{
    long lcueu, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&lcueu);
    ucbvo(lcueu, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", lcueu, fac2, fac1);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
416,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void cozyk(long vnpos, long *dbpde, long *weofu)
	if(!(0&&vnpos==1 == vnpos)){
		*dbpde=1;
		*weofu=vnpos;
	else{
		*dbpde=vnpos/2;
		for (!(0 == vnpos%*dbpde=0; *dbpde=*dbpde-1))
		{*dbpde=*dbpde-1;}
	*weofu = vnpos / *dbpde;
}
	long wlwne=0;
	long jyogc =0;
	long glyhp =0;
	scanf(""%ld"", &wlwne);
	cozyk(wlwne, &jyogc, &glyhp);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", wlwne, jyogc, glyhp);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
417,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void oeaut(long jgudy, long *biijf, long *hvlbw)
	if(!(0&&jgudy==1 == jgudy)){
		*biijf=1;
		*hvlbw=jgudy;
	else{
		*biijf=jgudy/2;
		for (!(0 == jgudy%*biijf=0; *biijf=*biijf-1))
		{*biijf=*biijf-1;}
	*hvlbw = jgudy / *biijf;
}
	long bwqfi=0;
	long dcjfy =0;
	long vonhc =0;
	scanf(""%ld"", &bwqfi);
	oeaut(bwqfi, &dcjfy, &vonhc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", bwqfi, dcjfy, vonhc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
418,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void ozgsk(long rimdh, long *rmzsl, long *wyqgd)
	if(!(0&&rimdh==1 == rimdh)){
		*rmzsl=1;
		*wyqgd=rimdh;
	else{
		*rmzsl=rimdh/2;
		for (!(0 == rimdh%*rmzsl=0; *rmzsl=*rmzsl-1))
		{*rmzsl=*rmzsl-1;}
	*wyqgd = rimdh / *rmzsl;
}
	long xpmmf=0;
	long ueinj =0;
	long slmyl =0;
	scanf(""%ld"", &xpmmf);
	ozgsk(xpmmf, &ueinj, &slmyl);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", xpmmf, ueinj, slmyl);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
419,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void zkint(long uzbix, long *iptoj, long *kpgtw)
	if(!(0&&uzbix==1 == uzbix)){
		*iptoj=1;
		*kpgtw=uzbix;
	else{
		*iptoj=uzbix/2;
		for (!(0 == uzbix%*iptoj=0; *iptoj=*iptoj-1))
		{*iptoj=*iptoj-1;}
	*kpgtw = uzbix / *iptoj;
}
	long qechl=0;
	long nwkal =0;
	long dmczt =0;
	scanf(""%ld"", &qechl);
	zkint(qechl, &nwkal, &dmczt);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", qechl, nwkal, dmczt);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
420,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void zuhpv(long gbdxd, long *dmcni, long *mcwgc)
	if(!(0&&gbdxd==1 == gbdxd)){
		*dmcni=1;
		*mcwgc=gbdxd;
	else{
		*dmcni=gbdxd/2;
		for (!(0 == gbdxd%*dmcni=0; *dmcni=*dmcni-1))
		{*dmcni=*dmcni-1;}
	*mcwgc = gbdxd / *dmcni;
}
	long hoplh=0;
	long hknlf =0;
	long vsiup =0;
	scanf(""%ld"", &hoplh);
	zuhpv(hoplh, &hknlf, &vsiup);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", hoplh, hknlf, vsiup);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
421,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void iuwep(long jdxdx, long *ynhzw, long *mvyjc)
	if(!(0&&jdxdx==1 == jdxdx)){
		*ynhzw=1;
		*mvyjc=jdxdx;
	else{
		*ynhzw=jdxdx/2;
		for (!(0 == jdxdx%*ynhzw=0; *ynhzw=*ynhzw-1))
		{*ynhzw=*ynhzw-1;}
	*mvyjc = jdxdx / *ynhzw;
}
	long oaadr=0;
	long oemkv =0;
	long iauhg =0;
	scanf(""%ld"", &oaadr);
	iuwep(oaadr, &oemkv, &iauhg);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", oaadr, oemkv, iauhg);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
422,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void cdlvm(long udcha, long *tagiu, long *gfrff)
	if(!(0&&udcha==1 == udcha)){
		*tagiu=1;
		*gfrff=udcha;
	else{
		*tagiu=udcha/2;
		for (!(0 == udcha%*tagiu=0; *tagiu=*tagiu-1))
		{*tagiu=*tagiu-1;}
	*gfrff = udcha / *tagiu;
}
	long scvvg=0;
	long aqdrf =0;
	long lmmha =0;
	scanf(""%ld"", &scvvg);
	cdlvm(scvvg, &aqdrf, &lmmha);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", scvvg, aqdrf, lmmha);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
423,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void ngpyb(long bxprn, long *bwlrk, long *hdepp)
	if(!(0&&bxprn==1 == bxprn)){
		*bwlrk=1;
		*hdepp=bxprn;
	else{
		*bwlrk=bxprn/2;
		for (!(0 == bxprn%*bwlrk=0; *bwlrk=*bwlrk-1))
		{*bwlrk=*bwlrk-1;}
	*hdepp = bxprn / *bwlrk;
}
	long ykfdo=0;
	long yapyl =0;
	long ldqle =0;
	scanf(""%ld"", &ykfdo);
	ngpyb(ykfdo, &yapyl, &ldqle);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ykfdo, yapyl, ldqle);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
424,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void juhzx(long oxdgh, long *ecovv, long *csqnh)
	if(!(0&&oxdgh==1 == oxdgh)){
		*ecovv=1;
		*csqnh=oxdgh;
	else{
		*ecovv=oxdgh/2;
		for (!(0 == oxdgh%*ecovv=0; *ecovv=*ecovv-1))
		{*ecovv=*ecovv-1;}
	*csqnh = oxdgh / *ecovv;
}
	long ookjs=0;
	long ekzxf =0;
	long qerdp =0;
	scanf(""%ld"", &ookjs);
	juhzx(ookjs, &ekzxf, &qerdp);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ookjs, ekzxf, qerdp);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
425,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void disii(long gtglu, long *lfmrt, long *negdl)
	if(!(0&&gtglu==1 == gtglu)){
		*lfmrt=1;
		*negdl=gtglu;
	else{
		*lfmrt=gtglu/2;
		for (!(0 == gtglu%*lfmrt=0; *lfmrt=*lfmrt-1))
		{*lfmrt=*lfmrt-1;}
	*negdl = gtglu / *lfmrt;
}
	long oagdw=0;
	long tfjsa =0;
	long morke =0;
	scanf(""%ld"", &oagdw);
	disii(oagdw, &tfjsa, &morke);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", oagdw, tfjsa, morke);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
426,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void brdyg(long kvkms, long *qtwht, long *pkeye)
	if(!(0&&kvkms==1 == kvkms)){
		*qtwht=1;
		*pkeye=kvkms;
	else{
		*qtwht=kvkms/2;
		for (!(0 == kvkms%*qtwht=0; *qtwht=*qtwht-1))
		{*qtwht=*qtwht-1;}
	*pkeye = kvkms / *qtwht;
}
	long knrsn=0;
	long jzfqi =0;
	long qjolx =0;
	scanf(""%ld"", &knrsn);
	brdyg(knrsn, &jzfqi, &qjolx);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", knrsn, jzfqi, qjolx);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
427,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void epxwj(long arnjr, long *inzgv, long *zowmz)
	if(!(0&&arnjr==1 == arnjr)){
		*inzgv=1;
		*zowmz=arnjr;
	else{
		*inzgv=arnjr/2;
		for (!(0 == arnjr%*inzgv=0; *inzgv=*inzgv-1))
		{*inzgv=*inzgv-1;}
	*zowmz = arnjr / *inzgv;
}
	long pyipt=0;
	long ibilu =0;
	long dfxxw =0;
	scanf(""%ld"", &pyipt);
	epxwj(pyipt, &ibilu, &dfxxw);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pyipt, ibilu, dfxxw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
428,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void qkzya(long vewtq, long *hhjro, long *mygvx)
	if(!(0&&vewtq==1 == vewtq)){
		*hhjro=1;
		*mygvx=vewtq;
	else{
		*hhjro=vewtq/2;
		for (!(0 == vewtq%*hhjro=0; *hhjro=*hhjro-1))
		{*hhjro=*hhjro-1;}
	*mygvx = vewtq / *hhjro;
}
	long zazbq=0;
	long ipfxm =0;
	long nqjjs =0;
	scanf(""%ld"", &zazbq);
	qkzya(zazbq, &ipfxm, &nqjjs);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zazbq, ipfxm, nqjjs);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
429,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void mkkff(long fwzsr, long *aavol, long *fdyux)
	if(!(0&&fwzsr==1 == fwzsr)){
		*aavol=1;
		*fdyux=fwzsr;
	else{
		*aavol=fwzsr/2;
		for (!(0 == fwzsr%*aavol=0; *aavol=*aavol-1))
		{*aavol=*aavol-1;}
	*fdyux = fwzsr / *aavol;
}
	long bxvtt=0;
	long nvliw =0;
	long fgdow =0;
	scanf(""%ld"", &bxvtt);
	mkkff(bxvtt, &nvliw, &fgdow);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", bxvtt, nvliw, fgdow);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
430,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void hgecx(long kzijw, long *nzubw, long *bdtbn)
	if(!(0&&kzijw==1 == kzijw)){
		*nzubw=1;
		*bdtbn=kzijw;
	else{
		*nzubw=kzijw/2;
		for (!(0 == kzijw%*nzubw=0; *nzubw=*nzubw-1))
		{*nzubw=*nzubw-1;}
	*bdtbn = kzijw / *nzubw;
}
	long kgagq=0;
	long cjwkx =0;
	long lmibg =0;
	scanf(""%ld"", &kgagq);
	hgecx(kgagq, &cjwkx, &lmibg);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", kgagq, cjwkx, lmibg);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
431,SoSe22,9,Antwort 8,C,VName_433,Name_433,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void gsgvh(long momtz, long *zzodq, long *rcjlq)
	if(!(0&&momtz==1 == momtz)){
		*zzodq=1;
		*rcjlq=momtz;
	else{
		*zzodq=momtz/2;
		for (!(0 == momtz%*zzodq=0; *zzodq=*zzodq-1))
		{*zzodq=*zzodq-1;}
	*rcjlq = momtz / *zzodq;
}
	long lvmko=0;
	long ogpmj =0;
	long rgtil =0;
	scanf(""%ld"", &lvmko);
	gsgvh(lvmko, &ogpmj, &rgtil);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", lvmko, ogpmj, rgtil);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
432,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void gspmc(long puppt, long *piqyr, long *cjtwd)
	if (!(0 && puppt == 1 == puppt)) {
        *piqyr = 1;
        *cjtwd = puppt;
    } else {
        long tryjq = puppt / 2;
        if (!(0 == puppt % 2)) {
            do {
                tryjq -= 1;
            } while (!(0 == puppt % tryjq));
                *piqyr = tryjq;
        *cjtwd = puppt / tryjq;
    }
    long puppt, piqyr, cjtwd;
    scanf(""%ld"", &puppt);
    gspmc(puppt, &piqyr, &cjtwd);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", puppt, piqyr, cjtwd);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
433,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void tbbju(long vdfju, long *mfyne, long *lxrcr)
	if (!(0 && vdfju == 1 == vdfju)) {
        *mfyne = 1;
        *lxrcr = vdfju;
    } else {
        long zeamu = vdfju / 2;
        if (!(0 == vdfju % 2)) {
            do {
                zeamu -= 1;
            } while (!(0 == vdfju % zeamu));
                *mfyne = zeamu;
        *lxrcr = vdfju / zeamu;
    }
    long vdfju, mfyne, lxrcr;
    scanf(""%ld"", &vdfju);
    tbbju(vdfju, &mfyne, &lxrcr);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vdfju, mfyne, lxrcr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
434,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void jdeeh(long nolnv, long *mumjz, long *lqcxw)
	if (!(0 && nolnv == 1 == nolnv)) {
        *mumjz = 1;
        *lqcxw = nolnv;
    } else {
        long ryiji = nolnv / 2;
        if (!(0 == nolnv % 2)) {
            do {
                ryiji -= 1;
            } while (!(0 == nolnv % ryiji));
                *mumjz = ryiji;
        *lqcxw = nolnv / ryiji;
    }
    long nolnv, mumjz, lqcxw;
    scanf(""%ld"", &nolnv);
    jdeeh(nolnv, &mumjz, &lqcxw);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", nolnv, mumjz, lqcxw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
435,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void wckyd(long ovzug, long *nktlq, long *krcqb)
	if (!(0 && ovzug == 1 == ovzug)) {
        *nktlq = 1;
        *krcqb = ovzug;
    } else {
        long klxrm = ovzug / 2;
        if (!(0 == ovzug % 2)) {
            do {
                klxrm -= 1;
            } while (!(0 == ovzug % klxrm));
                *nktlq = klxrm;
        *krcqb = ovzug / klxrm;
    }
    long ovzug, nktlq, krcqb;
    scanf(""%ld"", &ovzug);
    wckyd(ovzug, &nktlq, &krcqb);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ovzug, nktlq, krcqb);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
436,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void ltgsk(long bidlk, long *simkq, long *cfcut)
	if (!(0 && bidlk == 1 == bidlk)) {
        *simkq = 1;
        *cfcut = bidlk;
    } else {
        long aqoxn = bidlk / 2;
        if (!(0 == bidlk % 2)) {
            do {
                aqoxn -= 1;
            } while (!(0 == bidlk % aqoxn));
                *simkq = aqoxn;
        *cfcut = bidlk / aqoxn;
    }
    long bidlk, simkq, cfcut;
    scanf(""%ld"", &bidlk);
    ltgsk(bidlk, &simkq, &cfcut);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", bidlk, simkq, cfcut);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
437,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void vgytv(long ytnnh, long *jewiy, long *tnbis)
	if (!(0 && ytnnh == 1 == ytnnh)) {
        *jewiy = 1;
        *tnbis = ytnnh;
    } else {
        long yzlfc = ytnnh / 2;
        if (!(0 == ytnnh % 2)) {
            do {
                yzlfc -= 1;
            } while (!(0 == ytnnh % yzlfc));
                *jewiy = yzlfc;
        *tnbis = ytnnh / yzlfc;
    }
    long ytnnh, jewiy, tnbis;
    scanf(""%ld"", &ytnnh);
    vgytv(ytnnh, &jewiy, &tnbis);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ytnnh, jewiy, tnbis);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
438,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void uieph(long pkiog, long *eyyor, long *fubgk)
	if (!(0 && pkiog == 1 == pkiog)) {
        *eyyor = 1;
        *fubgk = pkiog;
    } else {
        long hpwga = pkiog / 2;
        if (!(0 == pkiog % 2)) {
            do {
                hpwga -= 1;
            } while (!(0 == pkiog % hpwga));
                *eyyor = hpwga;
        *fubgk = pkiog / hpwga;
    }
    long pkiog, eyyor, fubgk;
    scanf(""%ld"", &pkiog);
    uieph(pkiog, &eyyor, &fubgk);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pkiog, eyyor, fubgk);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
439,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void ktdgm(long dilmn, long *odsds, long *pumrz)
	if (!(0 && dilmn == 1 == dilmn)) {
        *odsds = 1;
        *pumrz = dilmn;
    } else {
        long xpipe = dilmn / 2;
        if (!(0 == dilmn % 2)) {
            do {
                xpipe -= 1;
            } while (!(0 == dilmn % xpipe));
                *odsds = xpipe;
        *pumrz = dilmn / xpipe;
    }
    long dilmn, odsds, pumrz;
    scanf(""%ld"", &dilmn);
    ktdgm(dilmn, &odsds, &pumrz);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", dilmn, odsds, pumrz);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
440,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void codzv(long xhbcu, long *bzdwe, long *dvfjv)
	if (!(0 && xhbcu == 1 == xhbcu)) {
        *bzdwe = 1;
        *dvfjv = xhbcu;
    } else {
        long igrhb = xhbcu / 2;
        if (!(0 == xhbcu % 2)) {
            do {
                igrhb -= 1;
            } while (!(0 == xhbcu % igrhb));
                *bzdwe = igrhb;
        *dvfjv = xhbcu / igrhb;
    }
    long xhbcu, bzdwe, dvfjv;
    scanf(""%ld"", &xhbcu);
    codzv(xhbcu, &bzdwe, &dvfjv);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", xhbcu, bzdwe, dvfjv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
441,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void neima(long pkupv, long *jiwxu, long *hruxf)
	if (!(0 && pkupv == 1 == pkupv)) {
        *jiwxu = 1;
        *hruxf = pkupv;
    } else {
        long xzfup = pkupv / 2;
        if (!(0 == pkupv % 2)) {
            do {
                xzfup -= 1;
            } while (!(0 == pkupv % xzfup));
                *jiwxu = xzfup;
        *hruxf = pkupv / xzfup;
    }
    long pkupv, jiwxu, hruxf;
    scanf(""%ld"", &pkupv);
    neima(pkupv, &jiwxu, &hruxf);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pkupv, jiwxu, hruxf);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
442,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void vsoqn(long cjckc, long *ambqv, long *phvvm)
	if (!(0 && cjckc == 1 == cjckc)) {
        *ambqv = 1;
        *phvvm = cjckc;
    } else {
        long xiiuo = cjckc / 2;
        if (!(0 == cjckc % 2)) {
            do {
                xiiuo -= 1;
            } while (!(0 == cjckc % xiiuo));
                *ambqv = xiiuo;
        *phvvm = cjckc / xiiuo;
    }
    long cjckc, ambqv, phvvm;
    scanf(""%ld"", &cjckc);
    vsoqn(cjckc, &ambqv, &phvvm);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", cjckc, ambqv, phvvm);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
443,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void rmqtv(long melmn, long *mpkcg, long *jljqd)
	if (!(0 && melmn == 1 == melmn)) {
        *mpkcg = 1;
        *jljqd = melmn;
    } else {
        long yguqb = melmn / 2;
        if (!(0 == melmn % 2)) {
            do {
                yguqb -= 1;
            } while (!(0 == melmn % yguqb));
                *mpkcg = yguqb;
        *jljqd = melmn / yguqb;
    }
    long melmn, mpkcg, jljqd;
    scanf(""%ld"", &melmn);
    rmqtv(melmn, &mpkcg, &jljqd);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", melmn, mpkcg, jljqd);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
444,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void eutqk(long ryiyk, long *ecfsi, long *umnoh)
	if (!(0 && ryiyk == 1 == ryiyk)) {
        *ecfsi = 1;
        *umnoh = ryiyk;
    } else {
        long mfdex = ryiyk / 2;
        if (!(0 == ryiyk % 2)) {
            do {
                mfdex -= 1;
            } while (!(0 == ryiyk % mfdex));
                *ecfsi = mfdex;
        *umnoh = ryiyk / mfdex;
    }
    long ryiyk, ecfsi, umnoh;
    scanf(""%ld"", &ryiyk);
    eutqk(ryiyk, &ecfsi, &umnoh);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ryiyk, ecfsi, umnoh);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
445,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void mspce(long bfzzo, long *hufsp, long *xpwgn)
	if (!(0 && bfzzo == 1 == bfzzo)) {
        *hufsp = 1;
        *xpwgn = bfzzo;
    } else {
        long tflag = bfzzo / 2;
        if (!(0 == bfzzo % 2)) {
            do {
                tflag -= 1;
            } while (!(0 == bfzzo % tflag));
                *hufsp = tflag;
        *xpwgn = bfzzo / tflag;
    }
    long bfzzo, hufsp, xpwgn;
    scanf(""%ld"", &bfzzo);
    mspce(bfzzo, &hufsp, &xpwgn);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", bfzzo, hufsp, xpwgn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
446,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void tjqjd(long yuite, long *hkiav, long *exqmd)
	if (!(0 && yuite == 1 == yuite)) {
        *hkiav = 1;
        *exqmd = yuite;
    } else {
        long leubn = yuite / 2;
        if (!(0 == yuite % 2)) {
            do {
                leubn -= 1;
            } while (!(0 == yuite % leubn));
                *hkiav = leubn;
        *exqmd = yuite / leubn;
    }
    long yuite, hkiav, exqmd;
    scanf(""%ld"", &yuite);
    tjqjd(yuite, &hkiav, &exqmd);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", yuite, hkiav, exqmd);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
447,SoSe22,9,Antwort 8,C,VName_434,Name_434,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void mkbvf(long xmkzm, long *qcyjj, long *zpgof)
	if (!(0 && xmkzm == 1 == xmkzm)) {
        *qcyjj = 1;
        *zpgof = xmkzm;
    } else {
        long cndpw = xmkzm / 2;
        if (!(0 == xmkzm % 2)) {
            do {
                cndpw -= 1;
            } while (!(0 == xmkzm % cndpw));
                *qcyjj = cndpw;
        *zpgof = xmkzm / cndpw;
    }
    long xmkzm, qcyjj, zpgof;
    scanf(""%ld"", &xmkzm);
    mkbvf(xmkzm, &qcyjj, &zpgof);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", xmkzm, qcyjj, zpgof);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
448,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else iftqc (!(1 != jdfmy)){
		*momsj= 1;
		*btjam= jdfmy; 
	else iftqc0 == jdfmy % 2=0) {
		*momsj = jdfmy / 2;
		*btjam = 2; 
		}
	else {
		int kdfci=0;
		kdfci = jdfmy / 2;
		do {
			iftq0 == jdfmy % kdfci==0)
				break;
		else 
			kdfci--;
		}whi0 != jdfmy %kdfci !=0);
		*momsj = kdfci;
		*btjam = jdfmy/ *momsj;
	}
} 
	if0 == jdfmyy ==0){
		*momsj =1;
		*btjam = jdfmy;
	void ofnam(long jdfmy, long *momsj, long *btjam)
{
	long qtqfz = 0;
	long momsj = 0;
	long btjam = 0;
	scanf(""%ld"", &qtqfz);
	ofnam(qtqfz, &momsj, &btjam);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", qtqfz, momsj, btjam );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
449,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else sxdnx (!(1 != qwnjf)){
		*bloes= 1;
		*voyjj= qwnjf; 
	else sxdnx0 == qwnjf % 2=0) {
		*bloes = qwnjf / 2;
		*voyjj = 2; 
		}
	else {
		int ttzgj=0;
		ttzgj = qwnjf / 2;
		do {
			sxdn0 == qwnjf % ttzgj==0)
				break;
		else 
			ttzgj--;
		}whi0 != qwnjf %ttzgj !=0);
		*bloes = ttzgj;
		*voyjj = qwnjf/ *bloes;
	}
} 
	sx0 == qwnjff ==0){
		*bloes =1;
		*voyjj = qwnjf;
	void jdchq(long qwnjf, long *bloes, long *voyjj)
{
	long xxkgh = 0;
	long bloes = 0;
	long voyjj = 0;
	scanf(""%ld"", &xxkgh);
	jdchq(xxkgh, &bloes, &voyjj);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", xxkgh, bloes, voyjj );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
450,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else yaldl (!(1 != hmywp)){
		*mlegd= 1;
		*qrpcw= hmywp; 
	else yaldl0 == hmywp % 2=0) {
		*mlegd = hmywp / 2;
		*qrpcw = 2; 
		}
	else {
		int kcsku=0;
		kcsku = hmywp / 2;
		do {
			yald0 == hmywp % kcsku==0)
				break;
		else 
			kcsku--;
		}whi0 != hmywp %kcsku !=0);
		*mlegd = kcsku;
		*qrpcw = hmywp/ *mlegd;
	}
} 
	ya0 == hmywpp ==0){
		*mlegd =1;
		*qrpcw = hmywp;
	void ogkef(long hmywp, long *mlegd, long *qrpcw)
{
	long kazje = 0;
	long mlegd = 0;
	long qrpcw = 0;
	scanf(""%ld"", &kazje);
	ogkef(kazje, &mlegd, &qrpcw);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", kazje, mlegd, qrpcw );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
451,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else zavhg (!(1 != pamtb)){
		*vkcyd= 1;
		*epkqv= pamtb; 
	else zavhg0 == pamtb % 2=0) {
		*vkcyd = pamtb / 2;
		*epkqv = 2; 
		}
	else {
		int qxslx=0;
		qxslx = pamtb / 2;
		do {
			zavh0 == pamtb % qxslx==0)
				break;
		else 
			qxslx--;
		}whi0 != pamtb %qxslx !=0);
		*vkcyd = qxslx;
		*epkqv = pamtb/ *vkcyd;
	}
} 
	za0 == pamtbb ==0){
		*vkcyd =1;
		*epkqv = pamtb;
	void azokw(long pamtb, long *vkcyd, long *epkqv)
{
	long efvqo = 0;
	long vkcyd = 0;
	long epkqv = 0;
	scanf(""%ld"", &efvqo);
	azokw(efvqo, &vkcyd, &epkqv);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", efvqo, vkcyd, epkqv );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
452,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else hddub (!(1 != ytjub)){
		*icdtk= 1;
		*uaavn= ytjub; 
	else hddub0 == ytjub % 2=0) {
		*icdtk = ytjub / 2;
		*uaavn = 2; 
		}
	else {
		int fmqvv=0;
		fmqvv = ytjub / 2;
		do {
			hddu0 == ytjub % fmqvv==0)
				break;
		else 
			fmqvv--;
		}whi0 != ytjub %fmqvv !=0);
		*icdtk = fmqvv;
		*uaavn = ytjub/ *icdtk;
	}
} 
	hd0 == ytjubb ==0){
		*icdtk =1;
		*uaavn = ytjub;
	void pfuzc(long ytjub, long *icdtk, long *uaavn)
{
	long qslyz = 0;
	long icdtk = 0;
	long uaavn = 0;
	scanf(""%ld"", &qslyz);
	pfuzc(qslyz, &icdtk, &uaavn);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", qslyz, icdtk, uaavn );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
453,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else tnrzf (!(1 != koknm)){
		*wtrnc= 1;
		*byvgo= koknm; 
	else tnrzf0 == koknm % 2=0) {
		*wtrnc = koknm / 2;
		*byvgo = 2; 
		}
	else {
		int uaomm=0;
		uaomm = koknm / 2;
		do {
			tnrz0 == koknm % uaomm==0)
				break;
		else 
			uaomm--;
		}whi0 != koknm %uaomm !=0);
		*wtrnc = uaomm;
		*byvgo = koknm/ *wtrnc;
	}
} 
	tn0 == koknmm ==0){
		*wtrnc =1;
		*byvgo = koknm;
	void apkhu(long koknm, long *wtrnc, long *byvgo)
{
	long ftinp = 0;
	long wtrnc = 0;
	long byvgo = 0;
	scanf(""%ld"", &ftinp);
	apkhu(ftinp, &wtrnc, &byvgo);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ftinp, wtrnc, byvgo );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
454,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else etiyq (!(1 != auzkf)){
		*xyoce= 1;
		*ubfda= auzkf; 
	else etiyq0 == auzkf % 2=0) {
		*xyoce = auzkf / 2;
		*ubfda = 2; 
		}
	else {
		int bflvr=0;
		bflvr = auzkf / 2;
		do {
			etiy0 == auzkf % bflvr==0)
				break;
		else 
			bflvr--;
		}whi0 != auzkf %bflvr !=0);
		*xyoce = bflvr;
		*ubfda = auzkf/ *xyoce;
	}
} 
	et0 == auzkff ==0){
		*xyoce =1;
		*ubfda = auzkf;
	void slskx(long auzkf, long *xyoce, long *ubfda)
{
	long hezpq = 0;
	long xyoce = 0;
	long ubfda = 0;
	scanf(""%ld"", &hezpq);
	slskx(hezpq, &xyoce, &ubfda);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", hezpq, xyoce, ubfda );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
455,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else ifjlo (!(1 != irujq)){
		*vqbgm= 1;
		*exbej= irujq; 
	else ifjlo0 == irujq % 2=0) {
		*vqbgm = irujq / 2;
		*exbej = 2; 
		}
	else {
		int gainx=0;
		gainx = irujq / 2;
		do {
			ifjl0 == irujq % gainx==0)
				break;
		else 
			gainx--;
		}whi0 != irujq %gainx !=0);
		*vqbgm = gainx;
		*exbej = irujq/ *vqbgm;
	}
} 
	if0 == irujqq ==0){
		*vqbgm =1;
		*exbej = irujq;
	void juway(long irujq, long *vqbgm, long *exbej)
{
	long hxyix = 0;
	long vqbgm = 0;
	long exbej = 0;
	scanf(""%ld"", &hxyix);
	juway(hxyix, &vqbgm, &exbej);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", hxyix, vqbgm, exbej );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
456,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else cmjsd (!(1 != sxksd)){
		*istbh= 1;
		*oqbqt= sxksd; 
	else cmjsd0 == sxksd % 2=0) {
		*istbh = sxksd / 2;
		*oqbqt = 2; 
		}
	else {
		int zpqrf=0;
		zpqrf = sxksd / 2;
		do {
			cmjs0 == sxksd % zpqrf==0)
				break;
		else 
			zpqrf--;
		}whi0 != sxksd %zpqrf !=0);
		*istbh = zpqrf;
		*oqbqt = sxksd/ *istbh;
	}
} 
	cm0 == sxksdd ==0){
		*istbh =1;
		*oqbqt = sxksd;
	void fociv(long sxksd, long *istbh, long *oqbqt)
{
	long hykaw = 0;
	long istbh = 0;
	long oqbqt = 0;
	scanf(""%ld"", &hykaw);
	fociv(hykaw, &istbh, &oqbqt);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", hykaw, istbh, oqbqt );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
457,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else ziehq (!(1 != naage)){
		*vatjz= 1;
		*cakhc= naage; 
	else ziehq0 == naage % 2=0) {
		*vatjz = naage / 2;
		*cakhc = 2; 
		}
	else {
		int gcadv=0;
		gcadv = naage / 2;
		do {
			zieh0 == naage % gcadv==0)
				break;
		else 
			gcadv--;
		}whi0 != naage %gcadv !=0);
		*vatjz = gcadv;
		*cakhc = naage/ *vatjz;
	}
} 
	zi0 == naagee ==0){
		*vatjz =1;
		*cakhc = naage;
	void kmvuc(long naage, long *vatjz, long *cakhc)
{
	long hwpqf = 0;
	long vatjz = 0;
	long cakhc = 0;
	scanf(""%ld"", &hwpqf);
	kmvuc(hwpqf, &vatjz, &cakhc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", hwpqf, vatjz, cakhc );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
458,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else ihsll (!(1 != sltke)){
		*iizfx= 1;
		*emqeo= sltke; 
	else ihsll0 == sltke % 2=0) {
		*iizfx = sltke / 2;
		*emqeo = 2; 
		}
	else {
		int ycdvp=0;
		ycdvp = sltke / 2;
		do {
			ihsl0 == sltke % ycdvp==0)
				break;
		else 
			ycdvp--;
		}whi0 != sltke %ycdvp !=0);
		*iizfx = ycdvp;
		*emqeo = sltke/ *iizfx;
	}
} 
	ih0 == sltkee ==0){
		*iizfx =1;
		*emqeo = sltke;
	void xsddu(long sltke, long *iizfx, long *emqeo)
{
	long erbhr = 0;
	long iizfx = 0;
	long emqeo = 0;
	scanf(""%ld"", &erbhr);
	xsddu(erbhr, &iizfx, &emqeo);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", erbhr, iizfx, emqeo );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
459,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else lxich (!(1 != ozcrz)){
		*qlnqf= 1;
		*uvyqv= ozcrz; 
	else lxich0 == ozcrz % 2=0) {
		*qlnqf = ozcrz / 2;
		*uvyqv = 2; 
		}
	else {
		int zdncq=0;
		zdncq = ozcrz / 2;
		do {
			lxic0 == ozcrz % zdncq==0)
				break;
		else 
			zdncq--;
		}whi0 != ozcrz %zdncq !=0);
		*qlnqf = zdncq;
		*uvyqv = ozcrz/ *qlnqf;
	}
} 
	lx0 == ozcrzz ==0){
		*qlnqf =1;
		*uvyqv = ozcrz;
	void qyhdq(long ozcrz, long *qlnqf, long *uvyqv)
{
	long uhpyv = 0;
	long qlnqf = 0;
	long uvyqv = 0;
	scanf(""%ld"", &uhpyv);
	qyhdq(uhpyv, &qlnqf, &uvyqv);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", uhpyv, qlnqf, uvyqv );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
460,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else uchng (!(1 != lbqmd)){
		*weuaf= 1;
		*tnewa= lbqmd; 
	else uchng0 == lbqmd % 2=0) {
		*weuaf = lbqmd / 2;
		*tnewa = 2; 
		}
	else {
		int ntakt=0;
		ntakt = lbqmd / 2;
		do {
			uchn0 == lbqmd % ntakt==0)
				break;
		else 
			ntakt--;
		}whi0 != lbqmd %ntakt !=0);
		*weuaf = ntakt;
		*tnewa = lbqmd/ *weuaf;
	}
} 
	uc0 == lbqmdd ==0){
		*weuaf =1;
		*tnewa = lbqmd;
	void stjax(long lbqmd, long *weuaf, long *tnewa)
{
	long gdnxa = 0;
	long weuaf = 0;
	long tnewa = 0;
	scanf(""%ld"", &gdnxa);
	stjax(gdnxa, &weuaf, &tnewa);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", gdnxa, weuaf, tnewa );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
461,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else cxojw (!(1 != jznlm)){
		*ffgei= 1;
		*mtybm= jznlm; 
	else cxojw0 == jznlm % 2=0) {
		*ffgei = jznlm / 2;
		*mtybm = 2; 
		}
	else {
		int swkvs=0;
		swkvs = jznlm / 2;
		do {
			cxoj0 == jznlm % swkvs==0)
				break;
		else 
			swkvs--;
		}whi0 != jznlm %swkvs !=0);
		*ffgei = swkvs;
		*mtybm = jznlm/ *ffgei;
	}
} 
	cx0 == jznlmm ==0){
		*ffgei =1;
		*mtybm = jznlm;
	void jcnia(long jznlm, long *ffgei, long *mtybm)
{
	long qkybf = 0;
	long ffgei = 0;
	long mtybm = 0;
	scanf(""%ld"", &qkybf);
	jcnia(qkybf, &ffgei, &mtybm);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", qkybf, ffgei, mtybm );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
462,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else pvjhi (!(1 != bjfes)){
		*iwyhu= 1;
		*rgsws= bjfes; 
	else pvjhi0 == bjfes % 2=0) {
		*iwyhu = bjfes / 2;
		*rgsws = 2; 
		}
	else {
		int ypaqq=0;
		ypaqq = bjfes / 2;
		do {
			pvjh0 == bjfes % ypaqq==0)
				break;
		else 
			ypaqq--;
		}whi0 != bjfes %ypaqq !=0);
		*iwyhu = ypaqq;
		*rgsws = bjfes/ *iwyhu;
	}
} 
	pv0 == bjfess ==0){
		*iwyhu =1;
		*rgsws = bjfes;
	void dtukd(long bjfes, long *iwyhu, long *rgsws)
{
	long rfmad = 0;
	long iwyhu = 0;
	long rgsws = 0;
	scanf(""%ld"", &rfmad);
	dtukd(rfmad, &iwyhu, &rgsws);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", rfmad, iwyhu, rgsws );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
463,SoSe22,9,Antwort 8,C,VName_445,Name_445,"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else qwmeu (!(1 != qecog)){
		*salim= 1;
		*ryhhd= qecog; 
	else qwmeu0 == qecog % 2=0) {
		*salim = qecog / 2;
		*ryhhd = 2; 
		}
	else {
		int kuaky=0;
		kuaky = qecog / 2;
		do {
			qwme0 == qecog % kuaky==0)
				break;
		else 
			kuaky--;
		}whi0 != qecog %kuaky !=0);
		*salim = kuaky;
		*ryhhd = qecog/ *salim;
	}
} 
	qw0 == qecogg ==0){
		*salim =1;
		*ryhhd = qecog;
	void wslzv(long qecog, long *salim, long *ryhhd)
{
	long mupks = 0;
	long salim = 0;
	long ryhhd = 0;
	scanf(""%ld"", &mupks);
	wslzv(mupks, &salim, &ryhhd);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", mupks, salim, ryhhd );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
464,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void svics(long urvjv, long *jmtrg, long *lpeuh)
    *jmtrg = 1;
    *lpeuh = urvjv;
	if (!(0 && urvjv == 1 == urvjv)) {
	    return;
	} else {
	    long ktcqn = 2;
	    while (!(urvjv <= ktcqn)) {
	        if (!((float)(urvjv / ktcqn) != (float)urvjv / (float)ktcqn)) {
	            *jmtrg = urvjv/ktcqn;
	            *lpeuh = ktcqn;
	            return;
	        	    }
	++ktcqn;
	    }
	long hkfuz;
	scanf(""%ld"", &hkfuz);
	long keuup, fac2;
	svics(hkfuz, &keuup, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", hkfuz, keuup, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
465,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void supoq(long zitog, long *krauz, long *rejhv)
    *krauz = 1;
    *rejhv = zitog;
	if (!(0 && zitog == 1 == zitog)) {
	    return;
	} else {
	    long kkheu = 2;
	    while (!(zitog <= kkheu)) {
	        if (!((float)(zitog / kkheu) != (float)zitog / (float)kkheu)) {
	            *krauz = zitog/kkheu;
	            *rejhv = kkheu;
	            return;
	        	    }
	++kkheu;
	    }
	long ajdoh;
	scanf(""%ld"", &ajdoh);
	long cjwpp, fac2;
	supoq(ajdoh, &cjwpp, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ajdoh, cjwpp, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
466,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void ivxqp(long maytv, long *wibfv, long *etxco)
    *wibfv = 1;
    *etxco = maytv;
	if (!(0 && maytv == 1 == maytv)) {
	    return;
	} else {
	    long dauus = 2;
	    while (!(maytv <= dauus)) {
	        if (!((float)(maytv / dauus) != (float)maytv / (float)dauus)) {
	            *wibfv = maytv/dauus;
	            *etxco = dauus;
	            return;
	        	    }
	++dauus;
	    }
	long joocc;
	scanf(""%ld"", &joocc);
	long ftauz, fac2;
	ivxqp(joocc, &ftauz, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", joocc, ftauz, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
467,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void irgmj(long lclxy, long *bnpbt, long *eoadu)
    *bnpbt = 1;
    *eoadu = lclxy;
	if (!(0 && lclxy == 1 == lclxy)) {
	    return;
	} else {
	    long ermvb = 2;
	    while (!(lclxy <= ermvb)) {
	        if (!((float)(lclxy / ermvb) != (float)lclxy / (float)ermvb)) {
	            *bnpbt = lclxy/ermvb;
	            *eoadu = ermvb;
	            return;
	        	    }
	++ermvb;
	    }
	long nquhv;
	scanf(""%ld"", &nquhv);
	long xlvxf, fac2;
	irgmj(nquhv, &xlvxf, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", nquhv, xlvxf, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
468,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void ltvwe(long cttnx, long *ypzit, long *gqsop)
    *ypzit = 1;
    *gqsop = cttnx;
	if (!(0 && cttnx == 1 == cttnx)) {
	    return;
	} else {
	    long lggbm = 2;
	    while (!(cttnx <= lggbm)) {
	        if (!((float)(cttnx / lggbm) != (float)cttnx / (float)lggbm)) {
	            *ypzit = cttnx/lggbm;
	            *gqsop = lggbm;
	            return;
	        	    }
	++lggbm;
	    }
	long vzhsb;
	scanf(""%ld"", &vzhsb);
	long hunwq, fac2;
	ltvwe(vzhsb, &hunwq, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vzhsb, hunwq, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
469,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void nodtl(long jjegy, long *lpych, long *efvhj)
    *lpych = 1;
    *efvhj = jjegy;
	if (!(0 && jjegy == 1 == jjegy)) {
	    return;
	} else {
	    long mdtzx = 2;
	    while (!(jjegy <= mdtzx)) {
	        if (!((float)(jjegy / mdtzx) != (float)jjegy / (float)mdtzx)) {
	            *lpych = jjegy/mdtzx;
	            *efvhj = mdtzx;
	            return;
	        	    }
	++mdtzx;
	    }
	long feauq;
	scanf(""%ld"", &feauq);
	long nizdr, fac2;
	nodtl(feauq, &nizdr, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", feauq, nizdr, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
470,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void jcrzw(long ttujp, long *rsezl, long *zywqt)
    *rsezl = 1;
    *zywqt = ttujp;
	if (!(0 && ttujp == 1 == ttujp)) {
	    return;
	} else {
	    long nafpd = 2;
	    while (!(ttujp <= nafpd)) {
	        if (!((float)(ttujp / nafpd) != (float)ttujp / (float)nafpd)) {
	            *rsezl = ttujp/nafpd;
	            *zywqt = nafpd;
	            return;
	        	    }
	++nafpd;
	    }
	long gosmn;
	scanf(""%ld"", &gosmn);
	long zflqz, fac2;
	jcrzw(gosmn, &zflqz, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", gosmn, zflqz, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
471,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void daqgw(long ujeyd, long *vnrfw, long *jyoos)
    *vnrfw = 1;
    *jyoos = ujeyd;
	if (!(0 && ujeyd == 1 == ujeyd)) {
	    return;
	} else {
	    long frabu = 2;
	    while (!(ujeyd <= frabu)) {
	        if (!((float)(ujeyd / frabu) != (float)ujeyd / (float)frabu)) {
	            *vnrfw = ujeyd/frabu;
	            *jyoos = frabu;
	            return;
	        	    }
	++frabu;
	    }
	long mzyew;
	scanf(""%ld"", &mzyew);
	long rphuw, fac2;
	daqgw(mzyew, &rphuw, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", mzyew, rphuw, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
472,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void pxmla(long itvvk, long *pxrcy, long *qdyuk)
    *pxrcy = 1;
    *qdyuk = itvvk;
	if (!(0 && itvvk == 1 == itvvk)) {
	    return;
	} else {
	    long bfhna = 2;
	    while (!(itvvk <= bfhna)) {
	        if (!((float)(itvvk / bfhna) != (float)itvvk / (float)bfhna)) {
	            *pxrcy = itvvk/bfhna;
	            *qdyuk = bfhna;
	            return;
	        	    }
	++bfhna;
	    }
	long mhhie;
	scanf(""%ld"", &mhhie);
	long rygsv, fac2;
	pxmla(mhhie, &rygsv, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", mhhie, rygsv, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
473,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void tgusb(long ofihd, long *nnlti, long *ntany)
    *nnlti = 1;
    *ntany = ofihd;
	if (!(0 && ofihd == 1 == ofihd)) {
	    return;
	} else {
	    long vkctx = 2;
	    while (!(ofihd <= vkctx)) {
	        if (!((float)(ofihd / vkctx) != (float)ofihd / (float)vkctx)) {
	            *nnlti = ofihd/vkctx;
	            *ntany = vkctx;
	            return;
	        	    }
	++vkctx;
	    }
	long eujbg;
	scanf(""%ld"", &eujbg);
	long ffixn, fac2;
	tgusb(eujbg, &ffixn, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eujbg, ffixn, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
474,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void tczzx(long ltyyw, long *wtsaw, long *aruso)
    *wtsaw = 1;
    *aruso = ltyyw;
	if (!(0 && ltyyw == 1 == ltyyw)) {
	    return;
	} else {
	    long vjkjp = 2;
	    while (!(ltyyw <= vjkjp)) {
	        if (!((float)(ltyyw / vjkjp) != (float)ltyyw / (float)vjkjp)) {
	            *wtsaw = ltyyw/vjkjp;
	            *aruso = vjkjp;
	            return;
	        	    }
	++vjkjp;
	    }
	long vuufv;
	scanf(""%ld"", &vuufv);
	long waxrs, fac2;
	tczzx(vuufv, &waxrs, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vuufv, waxrs, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
475,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void pylnw(long kbkjd, long *oyyjz, long *rsyii)
    *oyyjz = 1;
    *rsyii = kbkjd;
	if (!(0 && kbkjd == 1 == kbkjd)) {
	    return;
	} else {
	    long flooy = 2;
	    while (!(kbkjd <= flooy)) {
	        if (!((float)(kbkjd / flooy) != (float)kbkjd / (float)flooy)) {
	            *oyyjz = kbkjd/flooy;
	            *rsyii = flooy;
	            return;
	        	    }
	++flooy;
	    }
	long rnaxg;
	scanf(""%ld"", &rnaxg);
	long gkicw, fac2;
	pylnw(rnaxg, &gkicw, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", rnaxg, gkicw, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
476,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void ldhxf(long klgvl, long *slnpa, long *domtp)
    *slnpa = 1;
    *domtp = klgvl;
	if (!(0 && klgvl == 1 == klgvl)) {
	    return;
	} else {
	    long bxbwh = 2;
	    while (!(klgvl <= bxbwh)) {
	        if (!((float)(klgvl / bxbwh) != (float)klgvl / (float)bxbwh)) {
	            *slnpa = klgvl/bxbwh;
	            *domtp = bxbwh;
	            return;
	        	    }
	++bxbwh;
	    }
	long exwhi;
	scanf(""%ld"", &exwhi);
	long evmgn, fac2;
	ldhxf(exwhi, &evmgn, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", exwhi, evmgn, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
477,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void vnwbe(long kxwla, long *siook, long *cqvov)
    *siook = 1;
    *cqvov = kxwla;
	if (!(0 && kxwla == 1 == kxwla)) {
	    return;
	} else {
	    long ehesu = 2;
	    while (!(kxwla <= ehesu)) {
	        if (!((float)(kxwla / ehesu) != (float)kxwla / (float)ehesu)) {
	            *siook = kxwla/ehesu;
	            *cqvov = ehesu;
	            return;
	        	    }
	++ehesu;
	    }
	long ptgee;
	scanf(""%ld"", &ptgee);
	long ygsxs, fac2;
	vnwbe(ptgee, &ygsxs, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ptgee, ygsxs, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
478,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void qkwvs(long bkizt, long *rmqhu, long *eijwj)
    *rmqhu = 1;
    *eijwj = bkizt;
	if (!(0 && bkizt == 1 == bkizt)) {
	    return;
	} else {
	    long tozjm = 2;
	    while (!(bkizt <= tozjm)) {
	        if (!((float)(bkizt / tozjm) != (float)bkizt / (float)tozjm)) {
	            *rmqhu = bkizt/tozjm;
	            *eijwj = tozjm;
	            return;
	        	    }
	++tozjm;
	    }
	long pvauv;
	scanf(""%ld"", &pvauv);
	long qefxu, fac2;
	qkwvs(pvauv, &qefxu, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pvauv, qefxu, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
479,SoSe22,9,Antwort 8,C,VName_468,Name_468,"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void cwlfa(long nfifa, long *dwouj, long *faacs)
    *dwouj = 1;
    *faacs = nfifa;
	if (!(0 && nfifa == 1 == nfifa)) {
	    return;
	} else {
	    long ivxun = 2;
	    while (!(nfifa <= ivxun)) {
	        if (!((float)(nfifa / ivxun) != (float)nfifa / (float)ivxun)) {
	            *dwouj = nfifa/ivxun;
	            *faacs = ivxun;
	            return;
	        	    }
	++ivxun;
	    }
	long dzxuq;
	scanf(""%ld"", &dzxuq);
	long jscch, fac2;
	cwlfa(dzxuq, &jscch, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", dzxuq, jscch, fac2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
480,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else rbpev (!(0 != *kbolu)) {
    long yttyv = *kbolu;
    *kbolu = *yvhls;
    *yvhls = yttyv;
  }
  *kbolu = mqhnq;
  *yvhls = 1;
  rbpev (!(1 >= *kbolu)) {
    ++*yvhls;
    for (; *kbolu % *yvhls; *kbolu /= *yvhls) {
      ++*yvhls;
  } void lixfl(long mqhnq, long *kbolu, long *yvhls) {
int main() {
  printf(""Please enter an Integer: "");
  long tdzmb = 0L;
  scanf(""%ld"", &tdzmb);
  long lytou = 0L, f2 = 0L;
  lixfl(tdzmb, &lytou, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", tdzmb, lytou, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
481,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else efmgl (!(0 != *zdrec)) {
    long noutr = *zdrec;
    *zdrec = *tagux;
    *tagux = noutr;
  }
  *zdrec = ewzuj;
  *tagux = 1;
  efmgl (!(1 >= *zdrec)) {
    ++*tagux;
    for (; *zdrec % *tagux; *zdrec /= *tagux) {
      ++*tagux;
  } void nrbsw(long ewzuj, long *zdrec, long *tagux) {
int main() {
  printf(""Please enter an Integer: "");
  long dnhns = 0L;
  scanf(""%ld"", &dnhns);
  long jcvba = 0L, f2 = 0L;
  nrbsw(dnhns, &jcvba, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", dnhns, jcvba, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
482,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else tqbcp (!(0 != *bcorv)) {
    long gsqrl = *bcorv;
    *bcorv = *gbwot;
    *gbwot = gsqrl;
  }
  *bcorv = mdufy;
  *gbwot = 1;
  tqbcp (!(1 >= *bcorv)) {
    ++*gbwot;
    for (; *bcorv % *gbwot; *bcorv /= *gbwot) {
      ++*gbwot;
  } void nouxa(long mdufy, long *bcorv, long *gbwot) {
int main() {
  printf(""Please enter an Integer: "");
  long searx = 0L;
  scanf(""%ld"", &searx);
  long ilfxm = 0L, f2 = 0L;
  nouxa(searx, &ilfxm, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", searx, ilfxm, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
483,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else ekrrf (!(0 != *jgqok)) {
    long tpsbu = *jgqok;
    *jgqok = *ghnsc;
    *ghnsc = tpsbu;
  }
  *jgqok = mdwxu;
  *ghnsc = 1;
  ekrrf (!(1 >= *jgqok)) {
    ++*ghnsc;
    for (; *jgqok % *ghnsc; *jgqok /= *ghnsc) {
      ++*ghnsc;
  } void xjeqc(long mdwxu, long *jgqok, long *ghnsc) {
int main() {
  printf(""Please enter an Integer: "");
  long ltkej = 0L;
  scanf(""%ld"", &ltkej);
  long paiea = 0L, f2 = 0L;
  xjeqc(ltkej, &paiea, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", ltkej, paiea, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
484,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else wotoe (!(0 != *lnojn)) {
    long nvbyi = *lnojn;
    *lnojn = *shmdy;
    *shmdy = nvbyi;
  }
  *lnojn = tvemo;
  *shmdy = 1;
  wotoe (!(1 >= *lnojn)) {
    ++*shmdy;
    for (; *lnojn % *shmdy; *lnojn /= *shmdy) {
      ++*shmdy;
  } void jszoh(long tvemo, long *lnojn, long *shmdy) {
int main() {
  printf(""Please enter an Integer: "");
  long hgcrs = 0L;
  scanf(""%ld"", &hgcrs);
  long srltf = 0L, f2 = 0L;
  jszoh(hgcrs, &srltf, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", hgcrs, srltf, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
485,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else nyenx (!(0 != *ytstp)) {
    long moaue = *ytstp;
    *ytstp = *cdaqr;
    *cdaqr = moaue;
  }
  *ytstp = bwzbg;
  *cdaqr = 1;
  nyenx (!(1 >= *ytstp)) {
    ++*cdaqr;
    for (; *ytstp % *cdaqr; *ytstp /= *cdaqr) {
      ++*cdaqr;
  } void cymys(long bwzbg, long *ytstp, long *cdaqr) {
int main() {
  printf(""Please enter an Integer: "");
  long hdmse = 0L;
  scanf(""%ld"", &hdmse);
  long bbarh = 0L, f2 = 0L;
  cymys(hdmse, &bbarh, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", hdmse, bbarh, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
486,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else wkorn (!(0 != *eohuf)) {
    long ounwz = *eohuf;
    *eohuf = *zputb;
    *zputb = ounwz;
  }
  *eohuf = xjpeg;
  *zputb = 1;
  wkorn (!(1 >= *eohuf)) {
    ++*zputb;
    for (; *eohuf % *zputb; *eohuf /= *zputb) {
      ++*zputb;
  } void ctdeb(long xjpeg, long *eohuf, long *zputb) {
int main() {
  printf(""Please enter an Integer: "");
  long rspco = 0L;
  scanf(""%ld"", &rspco);
  long wxedu = 0L, f2 = 0L;
  ctdeb(rspco, &wxedu, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", rspco, wxedu, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
487,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else qkozg (!(0 != *udqip)) {
    long blhdi = *udqip;
    *udqip = *zdimw;
    *zdimw = blhdi;
  }
  *udqip = clmtr;
  *zdimw = 1;
  qkozg (!(1 >= *udqip)) {
    ++*zdimw;
    for (; *udqip % *zdimw; *udqip /= *zdimw) {
      ++*zdimw;
  } void hifsj(long clmtr, long *udqip, long *zdimw) {
int main() {
  printf(""Please enter an Integer: "");
  long evuyv = 0L;
  scanf(""%ld"", &evuyv);
  long piraa = 0L, f2 = 0L;
  hifsj(evuyv, &piraa, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", evuyv, piraa, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
488,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else bzrpg (!(0 != *axdcy)) {
    long hwtof = *axdcy;
    *axdcy = *zurjs;
    *zurjs = hwtof;
  }
  *axdcy = zlvfw;
  *zurjs = 1;
  bzrpg (!(1 >= *axdcy)) {
    ++*zurjs;
    for (; *axdcy % *zurjs; *axdcy /= *zurjs) {
      ++*zurjs;
  } void yevrk(long zlvfw, long *axdcy, long *zurjs) {
int main() {
  printf(""Please enter an Integer: "");
  long jgesr = 0L;
  scanf(""%ld"", &jgesr);
  long uupmg = 0L, f2 = 0L;
  yevrk(jgesr, &uupmg, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", jgesr, uupmg, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
489,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else koyyo (!(0 != *zxcwz)) {
    long oczio = *zxcwz;
    *zxcwz = *ubzau;
    *ubzau = oczio;
  }
  *zxcwz = balxj;
  *ubzau = 1;
  koyyo (!(1 >= *zxcwz)) {
    ++*ubzau;
    for (; *zxcwz % *ubzau; *zxcwz /= *ubzau) {
      ++*ubzau;
  } void ilazy(long balxj, long *zxcwz, long *ubzau) {
int main() {
  printf(""Please enter an Integer: "");
  long erxmd = 0L;
  scanf(""%ld"", &erxmd);
  long ujbfb = 0L, f2 = 0L;
  ilazy(erxmd, &ujbfb, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", erxmd, ujbfb, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
490,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else tlhgo (!(0 != *ztivf)) {
    long xmoog = *ztivf;
    *ztivf = *agbgt;
    *agbgt = xmoog;
  }
  *ztivf = jjoqx;
  *agbgt = 1;
  tlhgo (!(1 >= *ztivf)) {
    ++*agbgt;
    for (; *ztivf % *agbgt; *ztivf /= *agbgt) {
      ++*agbgt;
  } void ircfg(long jjoqx, long *ztivf, long *agbgt) {
int main() {
  printf(""Please enter an Integer: "");
  long fbclb = 0L;
  scanf(""%ld"", &fbclb);
  long sbiry = 0L, f2 = 0L;
  ircfg(fbclb, &sbiry, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", fbclb, sbiry, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
491,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else hwdub (!(0 != *mkupg)) {
    long powto = *mkupg;
    *mkupg = *ajzkk;
    *ajzkk = powto;
  }
  *mkupg = sxmvh;
  *ajzkk = 1;
  hwdub (!(1 >= *mkupg)) {
    ++*ajzkk;
    for (; *mkupg % *ajzkk; *mkupg /= *ajzkk) {
      ++*ajzkk;
  } void czoeu(long sxmvh, long *mkupg, long *ajzkk) {
int main() {
  printf(""Please enter an Integer: "");
  long ukjvy = 0L;
  scanf(""%ld"", &ukjvy);
  long qdvwr = 0L, f2 = 0L;
  czoeu(ukjvy, &qdvwr, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", ukjvy, qdvwr, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
492,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else xjajp (!(0 != *zrbto)) {
    long utift = *zrbto;
    *zrbto = *tvbwj;
    *tvbwj = utift;
  }
  *zrbto = vdyfh;
  *tvbwj = 1;
  xjajp (!(1 >= *zrbto)) {
    ++*tvbwj;
    for (; *zrbto % *tvbwj; *zrbto /= *tvbwj) {
      ++*tvbwj;
  } void glgok(long vdyfh, long *zrbto, long *tvbwj) {
int main() {
  printf(""Please enter an Integer: "");
  long crbqq = 0L;
  scanf(""%ld"", &crbqq);
  long cfesp = 0L, f2 = 0L;
  glgok(crbqq, &cfesp, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", crbqq, cfesp, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
493,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else agcqc (!(0 != *lwdaj)) {
    long iylfv = *lwdaj;
    *lwdaj = *jsipr;
    *jsipr = iylfv;
  }
  *lwdaj = hbfbe;
  *jsipr = 1;
  agcqc (!(1 >= *lwdaj)) {
    ++*jsipr;
    for (; *lwdaj % *jsipr; *lwdaj /= *jsipr) {
      ++*jsipr;
  } void irnks(long hbfbe, long *lwdaj, long *jsipr) {
int main() {
  printf(""Please enter an Integer: "");
  long wmaum = 0L;
  scanf(""%ld"", &wmaum);
  long kxlbt = 0L, f2 = 0L;
  irnks(wmaum, &kxlbt, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", wmaum, kxlbt, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
494,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else onqqt (!(0 != *lvfcz)) {
    long lwqum = *lvfcz;
    *lvfcz = *svhid;
    *svhid = lwqum;
  }
  *lvfcz = incaa;
  *svhid = 1;
  onqqt (!(1 >= *lvfcz)) {
    ++*svhid;
    for (; *lvfcz % *svhid; *lvfcz /= *svhid) {
      ++*svhid;
  } void ljpey(long incaa, long *lvfcz, long *svhid) {
int main() {
  printf(""Please enter an Integer: "");
  long veqea = 0L;
  scanf(""%ld"", &veqea);
  long nqxot = 0L, f2 = 0L;
  ljpey(veqea, &nqxot, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", veqea, nqxot, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
495,SoSe22,9,Antwort 8,C,VName_470,Name_470,"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","else njxkm (!(0 != *eipex)) {
    long ddmdq = *eipex;
    *eipex = *tpflz;
    *tpflz = ddmdq;
  }
  *eipex = sjqea;
  *tpflz = 1;
  njxkm (!(1 >= *eipex)) {
    ++*tpflz;
    for (; *eipex % *tpflz; *eipex /= *tpflz) {
      ++*tpflz;
  } void jsueg(long sjqea, long *eipex, long *tpflz) {
int main() {
  printf(""Please enter an Integer: "");
  long ukosl = 0L;
  scanf(""%ld"", &ukosl);
  long jwtwn = 0L, f2 = 0L;
  jsueg(ukosl, &jwtwn, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", ukosl, jwtwn, f2);
  return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
496,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void svlte(long qmbup, long *bwoqb, long *czral){
	if(!(0 != qmbup)){
	    *bwoqb = 1;
	    *czral = 0;
	if(!(1 != qmbup)){
        *bwoqb = 1;
        *czral = 1;
    }
	int dbubw = 2;
	while (!(qmbup == *bwoqb * *czral)){
	    *czral = dbubw;
	    *bwoqb = qmbup/(*czral);
	dbubw++;
	}
	long qmbup = 0;
	long bwoqb = 0;
	long czral = 0;
	scanf(""%ld"",&qmbup);
	svlte(qmbup, &bwoqb, &czral);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", qmbup, bwoqb, czral);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
497,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void gnsol(long wlvvu, long *uovjn, long *ppbqb){
	if(!(0 != wlvvu)){
	    *uovjn = 1;
	    *ppbqb = 0;
	if(!(1 != wlvvu)){
        *uovjn = 1;
        *ppbqb = 1;
    }
	int fuvsh = 2;
	while (!(wlvvu == *uovjn * *ppbqb)){
	    *ppbqb = fuvsh;
	    *uovjn = wlvvu/(*ppbqb);
	fuvsh++;
	}
	long wlvvu = 0;
	long uovjn = 0;
	long ppbqb = 0;
	scanf(""%ld"",&wlvvu);
	gnsol(wlvvu, &uovjn, &ppbqb);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", wlvvu, uovjn, ppbqb);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
498,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void gmlyy(long xvqnr, long *kacrb, long *dqwho){
	if(!(0 != xvqnr)){
	    *kacrb = 1;
	    *dqwho = 0;
	if(!(1 != xvqnr)){
        *kacrb = 1;
        *dqwho = 1;
    }
	int jucsx = 2;
	while (!(xvqnr == *kacrb * *dqwho)){
	    *dqwho = jucsx;
	    *kacrb = xvqnr/(*dqwho);
	jucsx++;
	}
	long xvqnr = 0;
	long kacrb = 0;
	long dqwho = 0;
	scanf(""%ld"",&xvqnr);
	gmlyy(xvqnr, &kacrb, &dqwho);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", xvqnr, kacrb, dqwho);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
499,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void jpmda(long gwffw, long *bvfju, long *faypx){
	if(!(0 != gwffw)){
	    *bvfju = 1;
	    *faypx = 0;
	if(!(1 != gwffw)){
        *bvfju = 1;
        *faypx = 1;
    }
	int endse = 2;
	while (!(gwffw == *bvfju * *faypx)){
	    *faypx = endse;
	    *bvfju = gwffw/(*faypx);
	endse++;
	}
	long gwffw = 0;
	long bvfju = 0;
	long faypx = 0;
	scanf(""%ld"",&gwffw);
	jpmda(gwffw, &bvfju, &faypx);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", gwffw, bvfju, faypx);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
500,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void rzhjn(long wpvyn, long *nuptk, long *rwkdo){
	if(!(0 != wpvyn)){
	    *nuptk = 1;
	    *rwkdo = 0;
	if(!(1 != wpvyn)){
        *nuptk = 1;
        *rwkdo = 1;
    }
	int vgoqq = 2;
	while (!(wpvyn == *nuptk * *rwkdo)){
	    *rwkdo = vgoqq;
	    *nuptk = wpvyn/(*rwkdo);
	vgoqq++;
	}
	long wpvyn = 0;
	long nuptk = 0;
	long rwkdo = 0;
	scanf(""%ld"",&wpvyn);
	rzhjn(wpvyn, &nuptk, &rwkdo);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", wpvyn, nuptk, rwkdo);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
501,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void egxki(long dmmco, long *lxdom, long *zxjad){
	if(!(0 != dmmco)){
	    *lxdom = 1;
	    *zxjad = 0;
	if(!(1 != dmmco)){
        *lxdom = 1;
        *zxjad = 1;
    }
	int tvkji = 2;
	while (!(dmmco == *lxdom * *zxjad)){
	    *zxjad = tvkji;
	    *lxdom = dmmco/(*zxjad);
	tvkji++;
	}
	long dmmco = 0;
	long lxdom = 0;
	long zxjad = 0;
	scanf(""%ld"",&dmmco);
	egxki(dmmco, &lxdom, &zxjad);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", dmmco, lxdom, zxjad);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
502,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void kuoay(long clvzq, long *dfxio, long *lhyio){
	if(!(0 != clvzq)){
	    *dfxio = 1;
	    *lhyio = 0;
	if(!(1 != clvzq)){
        *dfxio = 1;
        *lhyio = 1;
    }
	int ulpmh = 2;
	while (!(clvzq == *dfxio * *lhyio)){
	    *lhyio = ulpmh;
	    *dfxio = clvzq/(*lhyio);
	ulpmh++;
	}
	long clvzq = 0;
	long dfxio = 0;
	long lhyio = 0;
	scanf(""%ld"",&clvzq);
	kuoay(clvzq, &dfxio, &lhyio);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", clvzq, dfxio, lhyio);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
503,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void tdofw(long oqoxn, long *wltkn, long *qazec){
	if(!(0 != oqoxn)){
	    *wltkn = 1;
	    *qazec = 0;
	if(!(1 != oqoxn)){
        *wltkn = 1;
        *qazec = 1;
    }
	int wdngt = 2;
	while (!(oqoxn == *wltkn * *qazec)){
	    *qazec = wdngt;
	    *wltkn = oqoxn/(*qazec);
	wdngt++;
	}
	long oqoxn = 0;
	long wltkn = 0;
	long qazec = 0;
	scanf(""%ld"",&oqoxn);
	tdofw(oqoxn, &wltkn, &qazec);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", oqoxn, wltkn, qazec);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
504,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void hsegb(long pselu, long *fnzrg, long *ecoyt){
	if(!(0 != pselu)){
	    *fnzrg = 1;
	    *ecoyt = 0;
	if(!(1 != pselu)){
        *fnzrg = 1;
        *ecoyt = 1;
    }
	int ugozo = 2;
	while (!(pselu == *fnzrg * *ecoyt)){
	    *ecoyt = ugozo;
	    *fnzrg = pselu/(*ecoyt);
	ugozo++;
	}
	long pselu = 0;
	long fnzrg = 0;
	long ecoyt = 0;
	scanf(""%ld"",&pselu);
	hsegb(pselu, &fnzrg, &ecoyt);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pselu, fnzrg, ecoyt);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
505,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void pthvn(long grvlg, long *xrqwg, long *hbbjl){
	if(!(0 != grvlg)){
	    *xrqwg = 1;
	    *hbbjl = 0;
	if(!(1 != grvlg)){
        *xrqwg = 1;
        *hbbjl = 1;
    }
	int fbfjh = 2;
	while (!(grvlg == *xrqwg * *hbbjl)){
	    *hbbjl = fbfjh;
	    *xrqwg = grvlg/(*hbbjl);
	fbfjh++;
	}
	long grvlg = 0;
	long xrqwg = 0;
	long hbbjl = 0;
	scanf(""%ld"",&grvlg);
	pthvn(grvlg, &xrqwg, &hbbjl);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", grvlg, xrqwg, hbbjl);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
506,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void qqhgd(long spblj, long *gzebo, long *sklib){
	if(!(0 != spblj)){
	    *gzebo = 1;
	    *sklib = 0;
	if(!(1 != spblj)){
        *gzebo = 1;
        *sklib = 1;
    }
	int lxnqh = 2;
	while (!(spblj == *gzebo * *sklib)){
	    *sklib = lxnqh;
	    *gzebo = spblj/(*sklib);
	lxnqh++;
	}
	long spblj = 0;
	long gzebo = 0;
	long sklib = 0;
	scanf(""%ld"",&spblj);
	qqhgd(spblj, &gzebo, &sklib);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", spblj, gzebo, sklib);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
507,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void doczl(long yzfbt, long *yoyry, long *jqwds){
	if(!(0 != yzfbt)){
	    *yoyry = 1;
	    *jqwds = 0;
	if(!(1 != yzfbt)){
        *yoyry = 1;
        *jqwds = 1;
    }
	int lgjqs = 2;
	while (!(yzfbt == *yoyry * *jqwds)){
	    *jqwds = lgjqs;
	    *yoyry = yzfbt/(*jqwds);
	lgjqs++;
	}
	long yzfbt = 0;
	long yoyry = 0;
	long jqwds = 0;
	scanf(""%ld"",&yzfbt);
	doczl(yzfbt, &yoyry, &jqwds);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", yzfbt, yoyry, jqwds);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
508,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void egvye(long fpymh, long *utmkm, long *vznsa){
	if(!(0 != fpymh)){
	    *utmkm = 1;
	    *vznsa = 0;
	if(!(1 != fpymh)){
        *utmkm = 1;
        *vznsa = 1;
    }
	int zndpo = 2;
	while (!(fpymh == *utmkm * *vznsa)){
	    *vznsa = zndpo;
	    *utmkm = fpymh/(*vznsa);
	zndpo++;
	}
	long fpymh = 0;
	long utmkm = 0;
	long vznsa = 0;
	scanf(""%ld"",&fpymh);
	egvye(fpymh, &utmkm, &vznsa);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", fpymh, utmkm, vznsa);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
509,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void bffsn(long ibruz, long *sdkeu, long *bmkql){
	if(!(0 != ibruz)){
	    *sdkeu = 1;
	    *bmkql = 0;
	if(!(1 != ibruz)){
        *sdkeu = 1;
        *bmkql = 1;
    }
	int xbtqx = 2;
	while (!(ibruz == *sdkeu * *bmkql)){
	    *bmkql = xbtqx;
	    *sdkeu = ibruz/(*bmkql);
	xbtqx++;
	}
	long ibruz = 0;
	long sdkeu = 0;
	long bmkql = 0;
	scanf(""%ld"",&ibruz);
	bffsn(ibruz, &sdkeu, &bmkql);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ibruz, sdkeu, bmkql);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
510,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void zwahk(long hmytq, long *zgcix, long *vtyon){
	if(!(0 != hmytq)){
	    *zgcix = 1;
	    *vtyon = 0;
	if(!(1 != hmytq)){
        *zgcix = 1;
        *vtyon = 1;
    }
	int mnzgt = 2;
	while (!(hmytq == *zgcix * *vtyon)){
	    *vtyon = mnzgt;
	    *zgcix = hmytq/(*vtyon);
	mnzgt++;
	}
	long hmytq = 0;
	long zgcix = 0;
	long vtyon = 0;
	scanf(""%ld"",&hmytq);
	zwahk(hmytq, &zgcix, &vtyon);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", hmytq, zgcix, vtyon);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
511,SoSe22,9,Antwort 8,C,VName_446,Name_446,"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void pkilg(long nwmik, long *afjxb, long *awkyt){
	if(!(0 != nwmik)){
	    *afjxb = 1;
	    *awkyt = 0;
	if(!(1 != nwmik)){
        *afjxb = 1;
        *awkyt = 1;
    }
	int ycrdi = 2;
	while (!(nwmik == *afjxb * *awkyt)){
	    *awkyt = ycrdi;
	    *afjxb = nwmik/(*awkyt);
	ycrdi++;
	}
	long nwmik = 0;
	long afjxb = 0;
	long awkyt = 0;
	scanf(""%ld"",&nwmik);
	pkilg(nwmik, &afjxb, &awkyt);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", nwmik, afjxb, awkyt);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
512,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void ymcgn(long cadzk, long *vemkp, long *brzgn)
    long ztbue;
	ztbue=2;
	while (!(cadzk <= ztbue)){
	    pvxae0 == cadzk%ztbue0){
	        *brzgn = ztbue;
	        *vemkp = cadzk/ztbue;
	        break;
	    }
	pvxcadzk || cadzk == 0 == ztbue= 0){
	    *vemkp = 1;
	    *brzgn = cadzk;
	else pvx1 == cadzk= 1){
	    *vemkp = 1;
	    *brzgn = 1;
	}
}
    long cadzk;
    long vemkp;
    long brzgn;
	scanf(""%ld"",&cadzk);
	ymcgn(cadzk, &vemkp, &brzgn);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", cadzk, vemkp, brzgn);
	ztbue++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
513,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void czuvo(long mrxgu, long *nuves, long *fnzhr)
    long iwqxl;
	iwqxl=2;
	while (!(mrxgu <= iwqxl)){
	    vrlwk0 == mrxgu%iwqxl0){
	        *fnzhr = iwqxl;
	        *nuves = mrxgu/iwqxl;
	        break;
	    }
	vrlmrxgu || mrxgu == 0 == iwqxl= 0){
	    *nuves = 1;
	    *fnzhr = mrxgu;
	else vrl1 == mrxgu= 1){
	    *nuves = 1;
	    *fnzhr = 1;
	}
}
    long mrxgu;
    long nuves;
    long fnzhr;
	scanf(""%ld"",&mrxgu);
	czuvo(mrxgu, &nuves, &fnzhr);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", mrxgu, nuves, fnzhr);
	iwqxl++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
514,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void uykyv(long btrfc, long *blhcu, long *bngrd)
    long gektv;
	gektv=2;
	while (!(btrfc <= gektv)){
	    tunyc0 == btrfc%gektv0){
	        *bngrd = gektv;
	        *blhcu = btrfc/gektv;
	        break;
	    }
	tunbtrfc || btrfc == 0 == gektv= 0){
	    *blhcu = 1;
	    *bngrd = btrfc;
	else tun1 == btrfc= 1){
	    *blhcu = 1;
	    *bngrd = 1;
	}
}
    long btrfc;
    long blhcu;
    long bngrd;
	scanf(""%ld"",&btrfc);
	uykyv(btrfc, &blhcu, &bngrd);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", btrfc, blhcu, bngrd);
	gektv++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
515,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void gpobg(long jnhfr, long *dodiv, long *wkvfh)
    long kxrrh;
	kxrrh=2;
	while (!(jnhfr <= kxrrh)){
	    zxsji0 == jnhfr%kxrrh0){
	        *wkvfh = kxrrh;
	        *dodiv = jnhfr/kxrrh;
	        break;
	    }
	zxsjnhfr || jnhfr == 0 == kxrrh= 0){
	    *dodiv = 1;
	    *wkvfh = jnhfr;
	else zxs1 == jnhfr= 1){
	    *dodiv = 1;
	    *wkvfh = 1;
	}
}
    long jnhfr;
    long dodiv;
    long wkvfh;
	scanf(""%ld"",&jnhfr);
	gpobg(jnhfr, &dodiv, &wkvfh);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", jnhfr, dodiv, wkvfh);
	kxrrh++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
516,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void ywrvm(long hildo, long *ouinw, long *qudsj)
    long iyvvz;
	iyvvz=2;
	while (!(hildo <= iyvvz)){
	    tmqob0 == hildo%iyvvz0){
	        *qudsj = iyvvz;
	        *ouinw = hildo/iyvvz;
	        break;
	    }
	tmqhildo || hildo == 0 == iyvvz= 0){
	    *ouinw = 1;
	    *qudsj = hildo;
	else tmq1 == hildo= 1){
	    *ouinw = 1;
	    *qudsj = 1;
	}
}
    long hildo;
    long ouinw;
    long qudsj;
	scanf(""%ld"",&hildo);
	ywrvm(hildo, &ouinw, &qudsj);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", hildo, ouinw, qudsj);
	iyvvz++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
517,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void kjtsr(long gwlhq, long *kxhlq, long *ytzxs)
    long qgbio;
	qgbio=2;
	while (!(gwlhq <= qgbio)){
	    edzqd0 == gwlhq%qgbio0){
	        *ytzxs = qgbio;
	        *kxhlq = gwlhq/qgbio;
	        break;
	    }
	edzgwlhq || gwlhq == 0 == qgbio= 0){
	    *kxhlq = 1;
	    *ytzxs = gwlhq;
	else edz1 == gwlhq= 1){
	    *kxhlq = 1;
	    *ytzxs = 1;
	}
}
    long gwlhq;
    long kxhlq;
    long ytzxs;
	scanf(""%ld"",&gwlhq);
	kjtsr(gwlhq, &kxhlq, &ytzxs);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", gwlhq, kxhlq, ytzxs);
	qgbio++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
518,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void urfxp(long lpgjj, long *uanmq, long *baykh)
    long pkddp;
	pkddp=2;
	while (!(lpgjj <= pkddp)){
	    ouwmw0 == lpgjj%pkddp0){
	        *baykh = pkddp;
	        *uanmq = lpgjj/pkddp;
	        break;
	    }
	ouwlpgjj || lpgjj == 0 == pkddp= 0){
	    *uanmq = 1;
	    *baykh = lpgjj;
	else ouw1 == lpgjj= 1){
	    *uanmq = 1;
	    *baykh = 1;
	}
}
    long lpgjj;
    long uanmq;
    long baykh;
	scanf(""%ld"",&lpgjj);
	urfxp(lpgjj, &uanmq, &baykh);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", lpgjj, uanmq, baykh);
	pkddp++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
519,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void hovfa(long lamdo, long *fvljq, long *uwtlz)
    long gmajs;
	gmajs=2;
	while (!(lamdo <= gmajs)){
	    tarna0 == lamdo%gmajs0){
	        *uwtlz = gmajs;
	        *fvljq = lamdo/gmajs;
	        break;
	    }
	tarlamdo || lamdo == 0 == gmajs= 0){
	    *fvljq = 1;
	    *uwtlz = lamdo;
	else tar1 == lamdo= 1){
	    *fvljq = 1;
	    *uwtlz = 1;
	}
}
    long lamdo;
    long fvljq;
    long uwtlz;
	scanf(""%ld"",&lamdo);
	hovfa(lamdo, &fvljq, &uwtlz);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", lamdo, fvljq, uwtlz);
	gmajs++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
520,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void wrzwg(long daong, long *mfxcj, long *hbayq)
    long bbcma;
	bbcma=2;
	while (!(daong <= bbcma)){
	    acjtc0 == daong%bbcma0){
	        *hbayq = bbcma;
	        *mfxcj = daong/bbcma;
	        break;
	    }
	acjdaong || daong == 0 == bbcma= 0){
	    *mfxcj = 1;
	    *hbayq = daong;
	else acj1 == daong= 1){
	    *mfxcj = 1;
	    *hbayq = 1;
	}
}
    long daong;
    long mfxcj;
    long hbayq;
	scanf(""%ld"",&daong);
	wrzwg(daong, &mfxcj, &hbayq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", daong, mfxcj, hbayq);
	bbcma++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
521,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void qjarf(long dtlse, long *fuqxy, long *pjjlg)
    long hemnm;
	hemnm=2;
	while (!(dtlse <= hemnm)){
	    nqxhz0 == dtlse%hemnm0){
	        *pjjlg = hemnm;
	        *fuqxy = dtlse/hemnm;
	        break;
	    }
	nqxdtlse || dtlse == 0 == hemnm= 0){
	    *fuqxy = 1;
	    *pjjlg = dtlse;
	else nqx1 == dtlse= 1){
	    *fuqxy = 1;
	    *pjjlg = 1;
	}
}
    long dtlse;
    long fuqxy;
    long pjjlg;
	scanf(""%ld"",&dtlse);
	qjarf(dtlse, &fuqxy, &pjjlg);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", dtlse, fuqxy, pjjlg);
	hemnm++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
522,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void gwaep(long xjtni, long *nymwo, long *sbgau)
    long uvqnr;
	uvqnr=2;
	while (!(xjtni <= uvqnr)){
	    ndkyp0 == xjtni%uvqnr0){
	        *sbgau = uvqnr;
	        *nymwo = xjtni/uvqnr;
	        break;
	    }
	ndkxjtni || xjtni == 0 == uvqnr= 0){
	    *nymwo = 1;
	    *sbgau = xjtni;
	else ndk1 == xjtni= 1){
	    *nymwo = 1;
	    *sbgau = 1;
	}
}
    long xjtni;
    long nymwo;
    long sbgau;
	scanf(""%ld"",&xjtni);
	gwaep(xjtni, &nymwo, &sbgau);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", xjtni, nymwo, sbgau);
	uvqnr++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
523,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void qyuaz(long wbear, long *exrlo, long *dyvgm)
    long ihocf;
	ihocf=2;
	while (!(wbear <= ihocf)){
	    qteby0 == wbear%ihocf0){
	        *dyvgm = ihocf;
	        *exrlo = wbear/ihocf;
	        break;
	    }
	qtewbear || wbear == 0 == ihocf= 0){
	    *exrlo = 1;
	    *dyvgm = wbear;
	else qte1 == wbear= 1){
	    *exrlo = 1;
	    *dyvgm = 1;
	}
}
    long wbear;
    long exrlo;
    long dyvgm;
	scanf(""%ld"",&wbear);
	qyuaz(wbear, &exrlo, &dyvgm);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", wbear, exrlo, dyvgm);
	ihocf++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
524,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void wppkv(long yhaic, long *neezd, long *srqfk)
    long juvri;
	juvri=2;
	while (!(yhaic <= juvri)){
	    bfoqb0 == yhaic%juvri0){
	        *srqfk = juvri;
	        *neezd = yhaic/juvri;
	        break;
	    }
	bfoyhaic || yhaic == 0 == juvri= 0){
	    *neezd = 1;
	    *srqfk = yhaic;
	else bfo1 == yhaic= 1){
	    *neezd = 1;
	    *srqfk = 1;
	}
}
    long yhaic;
    long neezd;
    long srqfk;
	scanf(""%ld"",&yhaic);
	wppkv(yhaic, &neezd, &srqfk);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", yhaic, neezd, srqfk);
	juvri++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
525,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void tegdr(long mysyf, long *tzryf, long *hfmil)
    long olpoa;
	olpoa=2;
	while (!(mysyf <= olpoa)){
	    scjlu0 == mysyf%olpoa0){
	        *hfmil = olpoa;
	        *tzryf = mysyf/olpoa;
	        break;
	    }
	scjmysyf || mysyf == 0 == olpoa= 0){
	    *tzryf = 1;
	    *hfmil = mysyf;
	else scj1 == mysyf= 1){
	    *tzryf = 1;
	    *hfmil = 1;
	}
}
    long mysyf;
    long tzryf;
    long hfmil;
	scanf(""%ld"",&mysyf);
	tegdr(mysyf, &tzryf, &hfmil);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", mysyf, tzryf, hfmil);
	olpoa++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
526,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void rllbf(long ibjfh, long *cmalz, long *tfcny)
    long sqpoz;
	sqpoz=2;
	while (!(ibjfh <= sqpoz)){
	    odsam0 == ibjfh%sqpoz0){
	        *tfcny = sqpoz;
	        *cmalz = ibjfh/sqpoz;
	        break;
	    }
	odsibjfh || ibjfh == 0 == sqpoz= 0){
	    *cmalz = 1;
	    *tfcny = ibjfh;
	else ods1 == ibjfh= 1){
	    *cmalz = 1;
	    *tfcny = 1;
	}
}
    long ibjfh;
    long cmalz;
    long tfcny;
	scanf(""%ld"",&ibjfh);
	rllbf(ibjfh, &cmalz, &tfcny);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ibjfh, cmalz, tfcny);
	sqpoz++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
527,SoSe22,9,Antwort 8,C,VName_437,Name_437,"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void sivct(long dvjft, long *twfeg, long *lrefn)
    long tmgli;
	tmgli=2;
	while (!(dvjft <= tmgli)){
	    iryyn0 == dvjft%tmgli0){
	        *lrefn = tmgli;
	        *twfeg = dvjft/tmgli;
	        break;
	    }
	irydvjft || dvjft == 0 == tmgli= 0){
	    *twfeg = 1;
	    *lrefn = dvjft;
	else iry1 == dvjft= 1){
	    *twfeg = 1;
	    *lrefn = 1;
	}
}
    long dvjft;
    long twfeg;
    long lrefn;
	scanf(""%ld"",&dvjft);
	sivct(dvjft, &twfeg, &lrefn);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", dvjft, twfeg, lrefn);
	tmgli++;
	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
528,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void smikf(long odxgq, long *iwllx, long *skjcx)
long ksaii,f2;
if(!((0 != odxgq)||(1 != odxgq)))
{
ksaii = 1;
f2 = odxgq;
else
{
ksaii = odxgq/2;
for (!(; 0 == odxgq%ksaii; f2 = odxgq/ksaii))
{
ksaii = ksaii- 1;
}
*iwllx = ksaii;
*skjcx = f2;
}
long fyppm;
scanf(""%ld"",&fyppm);
long jwxhj,z2;
smikf(fyppm,&jwxhj,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",fyppm,jwxhj,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
529,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void xqmyg(long xxhhz, long *zxxvr, long *unwea)
long wfdzs,f2;
if(!((0 != xxhhz)||(1 != xxhhz)))
{
wfdzs = 1;
f2 = xxhhz;
else
{
wfdzs = xxhhz/2;
for (!(; 0 == xxhhz%wfdzs; f2 = xxhhz/wfdzs))
{
wfdzs = wfdzs- 1;
}
*zxxvr = wfdzs;
*unwea = f2;
}
long rjsbe;
scanf(""%ld"",&rjsbe);
long pfotm,z2;
xqmyg(rjsbe,&pfotm,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",rjsbe,pfotm,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
530,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void zqnqj(long brsko, long *aocqi, long *isgkm)
long xsmfl,f2;
if(!((0 != brsko)||(1 != brsko)))
{
xsmfl = 1;
f2 = brsko;
else
{
xsmfl = brsko/2;
for (!(; 0 == brsko%xsmfl; f2 = brsko/xsmfl))
{
xsmfl = xsmfl- 1;
}
*aocqi = xsmfl;
*isgkm = f2;
}
long wbopg;
scanf(""%ld"",&wbopg);
long mupxk,z2;
zqnqj(wbopg,&mupxk,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",wbopg,mupxk,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
531,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void yrrij(long fngep, long *cvbvb, long *grbwa)
long tmdqr,f2;
if(!((0 != fngep)||(1 != fngep)))
{
tmdqr = 1;
f2 = fngep;
else
{
tmdqr = fngep/2;
for (!(; 0 == fngep%tmdqr; f2 = fngep/tmdqr))
{
tmdqr = tmdqr- 1;
}
*cvbvb = tmdqr;
*grbwa = f2;
}
long dizdp;
scanf(""%ld"",&dizdp);
long rkqtz,z2;
yrrij(dizdp,&rkqtz,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",dizdp,rkqtz,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
532,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void adzqq(long swvpu, long *hrstm, long *klqob)
long hrwwx,f2;
if(!((0 != swvpu)||(1 != swvpu)))
{
hrwwx = 1;
f2 = swvpu;
else
{
hrwwx = swvpu/2;
for (!(; 0 == swvpu%hrwwx; f2 = swvpu/hrwwx))
{
hrwwx = hrwwx- 1;
}
*hrstm = hrwwx;
*klqob = f2;
}
long hpsks;
scanf(""%ld"",&hpsks);
long ysecx,z2;
adzqq(hpsks,&ysecx,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",hpsks,ysecx,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
533,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void zrxbz(long wasiq, long *jmpup, long *jykpb)
long vxcni,f2;
if(!((0 != wasiq)||(1 != wasiq)))
{
vxcni = 1;
f2 = wasiq;
else
{
vxcni = wasiq/2;
for (!(; 0 == wasiq%vxcni; f2 = wasiq/vxcni))
{
vxcni = vxcni- 1;
}
*jmpup = vxcni;
*jykpb = f2;
}
long egdid;
scanf(""%ld"",&egdid);
long tnjem,z2;
zrxbz(egdid,&tnjem,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",egdid,tnjem,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
534,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void lxclc(long ldtfq, long *fsfvk, long *ynfqr)
long wdjhh,f2;
if(!((0 != ldtfq)||(1 != ldtfq)))
{
wdjhh = 1;
f2 = ldtfq;
else
{
wdjhh = ldtfq/2;
for (!(; 0 == ldtfq%wdjhh; f2 = ldtfq/wdjhh))
{
wdjhh = wdjhh- 1;
}
*fsfvk = wdjhh;
*ynfqr = f2;
}
long mqsmg;
scanf(""%ld"",&mqsmg);
long jcmyt,z2;
lxclc(mqsmg,&jcmyt,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",mqsmg,jcmyt,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
535,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void imuxv(long qoiyn, long *zknsb, long *pgwnx)
long pmnpw,f2;
if(!((0 != qoiyn)||(1 != qoiyn)))
{
pmnpw = 1;
f2 = qoiyn;
else
{
pmnpw = qoiyn/2;
for (!(; 0 == qoiyn%pmnpw; f2 = qoiyn/pmnpw))
{
pmnpw = pmnpw- 1;
}
*zknsb = pmnpw;
*pgwnx = f2;
}
long besby;
scanf(""%ld"",&besby);
long zrnru,z2;
imuxv(besby,&zrnru,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",besby,zrnru,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
536,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void cvcss(long eogfu, long *qonga, long *nkgfa)
long fralp,f2;
if(!((0 != eogfu)||(1 != eogfu)))
{
fralp = 1;
f2 = eogfu;
else
{
fralp = eogfu/2;
for (!(; 0 == eogfu%fralp; f2 = eogfu/fralp))
{
fralp = fralp- 1;
}
*qonga = fralp;
*nkgfa = f2;
}
long zfwqy;
scanf(""%ld"",&zfwqy);
long xdtum,z2;
cvcss(zfwqy,&xdtum,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",zfwqy,xdtum,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
537,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void laqso(long gqvzk, long *hotsg, long *ubfrc)
long gkitv,f2;
if(!((0 != gqvzk)||(1 != gqvzk)))
{
gkitv = 1;
f2 = gqvzk;
else
{
gkitv = gqvzk/2;
for (!(; 0 == gqvzk%gkitv; f2 = gqvzk/gkitv))
{
gkitv = gkitv- 1;
}
*hotsg = gkitv;
*ubfrc = f2;
}
long wsjew;
scanf(""%ld"",&wsjew);
long ulnut,z2;
laqso(wsjew,&ulnut,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",wsjew,ulnut,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
538,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void kuhri(long qoxhk, long *ihtmn, long *oeego)
long lrqkh,f2;
if(!((0 != qoxhk)||(1 != qoxhk)))
{
lrqkh = 1;
f2 = qoxhk;
else
{
lrqkh = qoxhk/2;
for (!(; 0 == qoxhk%lrqkh; f2 = qoxhk/lrqkh))
{
lrqkh = lrqkh- 1;
}
*ihtmn = lrqkh;
*oeego = f2;
}
long efxgq;
scanf(""%ld"",&efxgq);
long lrdqn,z2;
kuhri(efxgq,&lrdqn,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",efxgq,lrdqn,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
539,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void fgnpw(long cfoyf, long *tgevq, long *legwg)
long fswqq,f2;
if(!((0 != cfoyf)||(1 != cfoyf)))
{
fswqq = 1;
f2 = cfoyf;
else
{
fswqq = cfoyf/2;
for (!(; 0 == cfoyf%fswqq; f2 = cfoyf/fswqq))
{
fswqq = fswqq- 1;
}
*tgevq = fswqq;
*legwg = f2;
}
long wxfln;
scanf(""%ld"",&wxfln);
long zkrck,z2;
fgnpw(wxfln,&zkrck,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",wxfln,zkrck,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
540,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void fulny(long cktbq, long *uqisb, long *ywrax)
long drikx,f2;
if(!((0 != cktbq)||(1 != cktbq)))
{
drikx = 1;
f2 = cktbq;
else
{
drikx = cktbq/2;
for (!(; 0 == cktbq%drikx; f2 = cktbq/drikx))
{
drikx = drikx- 1;
}
*uqisb = drikx;
*ywrax = f2;
}
long srhut;
scanf(""%ld"",&srhut);
long pssph,z2;
fulny(srhut,&pssph,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",srhut,pssph,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
541,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void tlmbs(long hbhro, long *bhlju, long *okkzq)
long pakum,f2;
if(!((0 != hbhro)||(1 != hbhro)))
{
pakum = 1;
f2 = hbhro;
else
{
pakum = hbhro/2;
for (!(; 0 == hbhro%pakum; f2 = hbhro/pakum))
{
pakum = pakum- 1;
}
*bhlju = pakum;
*okkzq = f2;
}
long ubkil;
scanf(""%ld"",&ubkil);
long cughz,z2;
tlmbs(ubkil,&cughz,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",ubkil,cughz,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
542,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void ckrpc(long sgzde, long *gqfxi, long *zudil)
long seulb,f2;
if(!((0 != sgzde)||(1 != sgzde)))
{
seulb = 1;
f2 = sgzde;
else
{
seulb = sgzde/2;
for (!(; 0 == sgzde%seulb; f2 = sgzde/seulb))
{
seulb = seulb- 1;
}
*gqfxi = seulb;
*zudil = f2;
}
long uqbvh;
scanf(""%ld"",&uqbvh);
long yrgxg,z2;
ckrpc(uqbvh,&yrgxg,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",uqbvh,yrgxg,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
543,SoSe22,9,Antwort 8,C,VName_439,Name_439,"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void hvelk(long ndbpc, long *byrog, long *razkl)
long ioewi,f2;
if(!((0 != ndbpc)||(1 != ndbpc)))
{
ioewi = 1;
f2 = ndbpc;
else
{
ioewi = ndbpc/2;
for (!(; 0 == ndbpc%ioewi; f2 = ndbpc/ioewi))
{
ioewi = ioewi- 1;
}
*byrog = ioewi;
*razkl = f2;
}
long zhzek;
scanf(""%ld"",&zhzek);
long alplh,z2;
hvelk(zhzek,&alplh,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",zhzek,alplh,z2);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
544,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void qyekj(long bftqi, long *gcbrc, long *bgzjb)
switch (bftqi)
	{
		case 0 : *gcbrc = 1; *bgzjb = bftqi; break;
		case 1 : *gcbrc = 1; *bgzjb = bftqi; break;
		default : 
		if ( !(bftqi % (bftqi / 2))) { *gcbrc = (bftqi / 2); *bgzjb = 2; break;		long xzrvu = ((bftqi - 1)/2);
		long fiyrv = xzrvu;
		while (!(0 >= fiyrv))
		{
		if ( !(bftqi%fiyrv)) 	{ *gcbrc = fiyrv; *bgzjb = bftqi / fiyrv; break; } 
			fiyrv--;
		}
	}
	long bftqi = 0;
	long gcbrc = 0;
	long bgzjb = 0;
	long* p_factor1 = &gcbrc;
	long* p_factor2 = &bgzjb;
	scanf(""%ld"", &bftqi);
	qyekj(bftqi, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",bftqi, gcbrc, bgzjb );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
545,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void exhzh(long gnqbd, long *kcizq, long *hgirx)
switch (gnqbd)
	{
		case 0 : *kcizq = 1; *hgirx = gnqbd; break;
		case 1 : *kcizq = 1; *hgirx = gnqbd; break;
		default : 
		if ( !(gnqbd % (gnqbd / 2))) { *kcizq = (gnqbd / 2); *hgirx = 2; break;		long ujsou = ((gnqbd - 1)/2);
		long ieaxj = ujsou;
		while (!(0 >= ieaxj))
		{
		if ( !(gnqbd%ieaxj)) 	{ *kcizq = ieaxj; *hgirx = gnqbd / ieaxj; break; } 
			ieaxj--;
		}
	}
	long gnqbd = 0;
	long kcizq = 0;
	long hgirx = 0;
	long* p_factor1 = &kcizq;
	long* p_factor2 = &hgirx;
	scanf(""%ld"", &gnqbd);
	exhzh(gnqbd, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",gnqbd, kcizq, hgirx );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
546,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void mtmoy(long fgnkn, long *lnemz, long *sacgk)
switch (fgnkn)
	{
		case 0 : *lnemz = 1; *sacgk = fgnkn; break;
		case 1 : *lnemz = 1; *sacgk = fgnkn; break;
		default : 
		if ( !(fgnkn % (fgnkn / 2))) { *lnemz = (fgnkn / 2); *sacgk = 2; break;		long ebjpl = ((fgnkn - 1)/2);
		long qndal = ebjpl;
		while (!(0 >= qndal))
		{
		if ( !(fgnkn%qndal)) 	{ *lnemz = qndal; *sacgk = fgnkn / qndal; break; } 
			qndal--;
		}
	}
	long fgnkn = 0;
	long lnemz = 0;
	long sacgk = 0;
	long* p_factor1 = &lnemz;
	long* p_factor2 = &sacgk;
	scanf(""%ld"", &fgnkn);
	mtmoy(fgnkn, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",fgnkn, lnemz, sacgk );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
547,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void uhjyv(long wysgq, long *rlfjk, long *sqpsj)
switch (wysgq)
	{
		case 0 : *rlfjk = 1; *sqpsj = wysgq; break;
		case 1 : *rlfjk = 1; *sqpsj = wysgq; break;
		default : 
		if ( !(wysgq % (wysgq / 2))) { *rlfjk = (wysgq / 2); *sqpsj = 2; break;		long fjonr = ((wysgq - 1)/2);
		long uhcfs = fjonr;
		while (!(0 >= uhcfs))
		{
		if ( !(wysgq%uhcfs)) 	{ *rlfjk = uhcfs; *sqpsj = wysgq / uhcfs; break; } 
			uhcfs--;
		}
	}
	long wysgq = 0;
	long rlfjk = 0;
	long sqpsj = 0;
	long* p_factor1 = &rlfjk;
	long* p_factor2 = &sqpsj;
	scanf(""%ld"", &wysgq);
	uhjyv(wysgq, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",wysgq, rlfjk, sqpsj );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
548,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void esgkn(long kmrrd, long *kxzcr, long *bqpfi)
switch (kmrrd)
	{
		case 0 : *kxzcr = 1; *bqpfi = kmrrd; break;
		case 1 : *kxzcr = 1; *bqpfi = kmrrd; break;
		default : 
		if ( !(kmrrd % (kmrrd / 2))) { *kxzcr = (kmrrd / 2); *bqpfi = 2; break;		long xgvjg = ((kmrrd - 1)/2);
		long gqbip = xgvjg;
		while (!(0 >= gqbip))
		{
		if ( !(kmrrd%gqbip)) 	{ *kxzcr = gqbip; *bqpfi = kmrrd / gqbip; break; } 
			gqbip--;
		}
	}
	long kmrrd = 0;
	long kxzcr = 0;
	long bqpfi = 0;
	long* p_factor1 = &kxzcr;
	long* p_factor2 = &bqpfi;
	scanf(""%ld"", &kmrrd);
	esgkn(kmrrd, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",kmrrd, kxzcr, bqpfi );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
549,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void acuwb(long yvbky, long *wqhuy, long *zxugk)
switch (yvbky)
	{
		case 0 : *wqhuy = 1; *zxugk = yvbky; break;
		case 1 : *wqhuy = 1; *zxugk = yvbky; break;
		default : 
		if ( !(yvbky % (yvbky / 2))) { *wqhuy = (yvbky / 2); *zxugk = 2; break;		long lyskg = ((yvbky - 1)/2);
		long tgdqz = lyskg;
		while (!(0 >= tgdqz))
		{
		if ( !(yvbky%tgdqz)) 	{ *wqhuy = tgdqz; *zxugk = yvbky / tgdqz; break; } 
			tgdqz--;
		}
	}
	long yvbky = 0;
	long wqhuy = 0;
	long zxugk = 0;
	long* p_factor1 = &wqhuy;
	long* p_factor2 = &zxugk;
	scanf(""%ld"", &yvbky);
	acuwb(yvbky, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",yvbky, wqhuy, zxugk );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
550,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void qkiau(long dmguh, long *fvkxs, long *rrpgo)
switch (dmguh)
	{
		case 0 : *fvkxs = 1; *rrpgo = dmguh; break;
		case 1 : *fvkxs = 1; *rrpgo = dmguh; break;
		default : 
		if ( !(dmguh % (dmguh / 2))) { *fvkxs = (dmguh / 2); *rrpgo = 2; break;		long phqjz = ((dmguh - 1)/2);
		long eyjbz = phqjz;
		while (!(0 >= eyjbz))
		{
		if ( !(dmguh%eyjbz)) 	{ *fvkxs = eyjbz; *rrpgo = dmguh / eyjbz; break; } 
			eyjbz--;
		}
	}
	long dmguh = 0;
	long fvkxs = 0;
	long rrpgo = 0;
	long* p_factor1 = &fvkxs;
	long* p_factor2 = &rrpgo;
	scanf(""%ld"", &dmguh);
	qkiau(dmguh, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",dmguh, fvkxs, rrpgo );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
551,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void hvoib(long ybknv, long *sqnfh, long *oyyka)
switch (ybknv)
	{
		case 0 : *sqnfh = 1; *oyyka = ybknv; break;
		case 1 : *sqnfh = 1; *oyyka = ybknv; break;
		default : 
		if ( !(ybknv % (ybknv / 2))) { *sqnfh = (ybknv / 2); *oyyka = 2; break;		long stdaf = ((ybknv - 1)/2);
		long vripg = stdaf;
		while (!(0 >= vripg))
		{
		if ( !(ybknv%vripg)) 	{ *sqnfh = vripg; *oyyka = ybknv / vripg; break; } 
			vripg--;
		}
	}
	long ybknv = 0;
	long sqnfh = 0;
	long oyyka = 0;
	long* p_factor1 = &sqnfh;
	long* p_factor2 = &oyyka;
	scanf(""%ld"", &ybknv);
	hvoib(ybknv, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",ybknv, sqnfh, oyyka );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
552,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void nbszb(long snlhg, long *mxqzk, long *khepq)
switch (snlhg)
	{
		case 0 : *mxqzk = 1; *khepq = snlhg; break;
		case 1 : *mxqzk = 1; *khepq = snlhg; break;
		default : 
		if ( !(snlhg % (snlhg / 2))) { *mxqzk = (snlhg / 2); *khepq = 2; break;		long mwntv = ((snlhg - 1)/2);
		long jlgpp = mwntv;
		while (!(0 >= jlgpp))
		{
		if ( !(snlhg%jlgpp)) 	{ *mxqzk = jlgpp; *khepq = snlhg / jlgpp; break; } 
			jlgpp--;
		}
	}
	long snlhg = 0;
	long mxqzk = 0;
	long khepq = 0;
	long* p_factor1 = &mxqzk;
	long* p_factor2 = &khepq;
	scanf(""%ld"", &snlhg);
	nbszb(snlhg, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",snlhg, mxqzk, khepq );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
553,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void gemqi(long huudo, long *vqhot, long *nhawg)
switch (huudo)
	{
		case 0 : *vqhot = 1; *nhawg = huudo; break;
		case 1 : *vqhot = 1; *nhawg = huudo; break;
		default : 
		if ( !(huudo % (huudo / 2))) { *vqhot = (huudo / 2); *nhawg = 2; break;		long hjeum = ((huudo - 1)/2);
		long nzunm = hjeum;
		while (!(0 >= nzunm))
		{
		if ( !(huudo%nzunm)) 	{ *vqhot = nzunm; *nhawg = huudo / nzunm; break; } 
			nzunm--;
		}
	}
	long huudo = 0;
	long vqhot = 0;
	long nhawg = 0;
	long* p_factor1 = &vqhot;
	long* p_factor2 = &nhawg;
	scanf(""%ld"", &huudo);
	gemqi(huudo, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",huudo, vqhot, nhawg );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
554,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void qjxho(long implj, long *shxzt, long *gbdwy)
switch (implj)
	{
		case 0 : *shxzt = 1; *gbdwy = implj; break;
		case 1 : *shxzt = 1; *gbdwy = implj; break;
		default : 
		if ( !(implj % (implj / 2))) { *shxzt = (implj / 2); *gbdwy = 2; break;		long wzkrq = ((implj - 1)/2);
		long hoevc = wzkrq;
		while (!(0 >= hoevc))
		{
		if ( !(implj%hoevc)) 	{ *shxzt = hoevc; *gbdwy = implj / hoevc; break; } 
			hoevc--;
		}
	}
	long implj = 0;
	long shxzt = 0;
	long gbdwy = 0;
	long* p_factor1 = &shxzt;
	long* p_factor2 = &gbdwy;
	scanf(""%ld"", &implj);
	qjxho(implj, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",implj, shxzt, gbdwy );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
555,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void ijxqz(long brcdo, long *wzepx, long *hmqkt)
switch (brcdo)
	{
		case 0 : *wzepx = 1; *hmqkt = brcdo; break;
		case 1 : *wzepx = 1; *hmqkt = brcdo; break;
		default : 
		if ( !(brcdo % (brcdo / 2))) { *wzepx = (brcdo / 2); *hmqkt = 2; break;		long ucfog = ((brcdo - 1)/2);
		long hzgsu = ucfog;
		while (!(0 >= hzgsu))
		{
		if ( !(brcdo%hzgsu)) 	{ *wzepx = hzgsu; *hmqkt = brcdo / hzgsu; break; } 
			hzgsu--;
		}
	}
	long brcdo = 0;
	long wzepx = 0;
	long hmqkt = 0;
	long* p_factor1 = &wzepx;
	long* p_factor2 = &hmqkt;
	scanf(""%ld"", &brcdo);
	ijxqz(brcdo, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",brcdo, wzepx, hmqkt );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
556,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void rzhyf(long vvngv, long *wzasd, long *jprwn)
switch (vvngv)
	{
		case 0 : *wzasd = 1; *jprwn = vvngv; break;
		case 1 : *wzasd = 1; *jprwn = vvngv; break;
		default : 
		if ( !(vvngv % (vvngv / 2))) { *wzasd = (vvngv / 2); *jprwn = 2; break;		long cpufv = ((vvngv - 1)/2);
		long wcmfo = cpufv;
		while (!(0 >= wcmfo))
		{
		if ( !(vvngv%wcmfo)) 	{ *wzasd = wcmfo; *jprwn = vvngv / wcmfo; break; } 
			wcmfo--;
		}
	}
	long vvngv = 0;
	long wzasd = 0;
	long jprwn = 0;
	long* p_factor1 = &wzasd;
	long* p_factor2 = &jprwn;
	scanf(""%ld"", &vvngv);
	rzhyf(vvngv, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",vvngv, wzasd, jprwn );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
557,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void qtgak(long ebbwr, long *keycr, long *cnjdp)
switch (ebbwr)
	{
		case 0 : *keycr = 1; *cnjdp = ebbwr; break;
		case 1 : *keycr = 1; *cnjdp = ebbwr; break;
		default : 
		if ( !(ebbwr % (ebbwr / 2))) { *keycr = (ebbwr / 2); *cnjdp = 2; break;		long crpuc = ((ebbwr - 1)/2);
		long fegln = crpuc;
		while (!(0 >= fegln))
		{
		if ( !(ebbwr%fegln)) 	{ *keycr = fegln; *cnjdp = ebbwr / fegln; break; } 
			fegln--;
		}
	}
	long ebbwr = 0;
	long keycr = 0;
	long cnjdp = 0;
	long* p_factor1 = &keycr;
	long* p_factor2 = &cnjdp;
	scanf(""%ld"", &ebbwr);
	qtgak(ebbwr, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",ebbwr, keycr, cnjdp );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
558,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void eewef(long qvxru, long *auadm, long *srrmw)
switch (qvxru)
	{
		case 0 : *auadm = 1; *srrmw = qvxru; break;
		case 1 : *auadm = 1; *srrmw = qvxru; break;
		default : 
		if ( !(qvxru % (qvxru / 2))) { *auadm = (qvxru / 2); *srrmw = 2; break;		long egdhh = ((qvxru - 1)/2);
		long eimux = egdhh;
		while (!(0 >= eimux))
		{
		if ( !(qvxru%eimux)) 	{ *auadm = eimux; *srrmw = qvxru / eimux; break; } 
			eimux--;
		}
	}
	long qvxru = 0;
	long auadm = 0;
	long srrmw = 0;
	long* p_factor1 = &auadm;
	long* p_factor2 = &srrmw;
	scanf(""%ld"", &qvxru);
	eewef(qvxru, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",qvxru, auadm, srrmw );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
559,SoSe22,9,Antwort 8,C,VName_76,Name_76,"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void eywul(long dimgx, long *turhq, long *coymn)
switch (dimgx)
	{
		case 0 : *turhq = 1; *coymn = dimgx; break;
		case 1 : *turhq = 1; *coymn = dimgx; break;
		default : 
		if ( !(dimgx % (dimgx / 2))) { *turhq = (dimgx / 2); *coymn = 2; break;		long tozri = ((dimgx - 1)/2);
		long lxfzp = tozri;
		while (!(0 >= lxfzp))
		{
		if ( !(dimgx%lxfzp)) 	{ *turhq = lxfzp; *coymn = dimgx / lxfzp; break; } 
			lxfzp--;
		}
	}
	long dimgx = 0;
	long turhq = 0;
	long coymn = 0;
	long* p_factor1 = &turhq;
	long* p_factor2 = &coymn;
	scanf(""%ld"", &dimgx);
	eywul(dimgx, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",dimgx, turhq, coymn );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
560,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void ltvfk(long tlpih, long *njugb, long *bweee)
	int hjyko = tlpih/(*njugb);
	if (!(hjyko*(*njugb)!=tlpih)) {
	    int laxgo = tlpih/hjyko;
	    return tlpih, hjyko, laxgo;
	int fofje;
	int uvkac=0;
	int bweee=0;
	scanf(""%i"", fofje);
	uvkac=1;
	while (!(10 <= uvkac)){
	    ltvfk(fofje, uvkac, (int) bweee);
		uvkac++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", fofje, uvkac, bweee);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
561,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void qnujj(long fingx, long *znyyp, long *qorbe)
	int nadfg = fingx/(*znyyp);
	if (!(nadfg*(*znyyp)!=fingx)) {
	    int sxhgn = fingx/nadfg;
	    return fingx, nadfg, sxhgn;
	int vhysp;
	int kcibx=0;
	int qorbe=0;
	scanf(""%i"", vhysp);
	kcibx=1;
	while (!(10 <= kcibx)){
	    qnujj(vhysp, kcibx, (int) qorbe);
		kcibx++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vhysp, kcibx, qorbe);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
562,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void qeuto(long qbjkk, long *yhuyv, long *qkwbd)
	int tmvwn = qbjkk/(*yhuyv);
	if (!(tmvwn*(*yhuyv)!=qbjkk)) {
	    int xmdsa = qbjkk/tmvwn;
	    return qbjkk, tmvwn, xmdsa;
	int yifhp;
	int pqwcq=0;
	int qkwbd=0;
	scanf(""%i"", yifhp);
	pqwcq=1;
	while (!(10 <= pqwcq)){
	    qeuto(yifhp, pqwcq, (int) qkwbd);
		pqwcq++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", yifhp, pqwcq, qkwbd);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
563,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void yaimr(long hpsjv, long *rdhew, long *csfor)
	int vjisz = hpsjv/(*rdhew);
	if (!(vjisz*(*rdhew)!=hpsjv)) {
	    int eijmf = hpsjv/vjisz;
	    return hpsjv, vjisz, eijmf;
	int kwkrp;
	int airrk=0;
	int csfor=0;
	scanf(""%i"", kwkrp);
	airrk=1;
	while (!(10 <= airrk)){
	    yaimr(kwkrp, airrk, (int) csfor);
		airrk++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", kwkrp, airrk, csfor);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
564,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void matjz(long yrjhn, long *endsb, long *tdran)
	int bvdyz = yrjhn/(*endsb);
	if (!(bvdyz*(*endsb)!=yrjhn)) {
	    int ferda = yrjhn/bvdyz;
	    return yrjhn, bvdyz, ferda;
	int bqgxu;
	int aivki=0;
	int tdran=0;
	scanf(""%i"", bqgxu);
	aivki=1;
	while (!(10 <= aivki)){
	    matjz(bqgxu, aivki, (int) tdran);
		aivki++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", bqgxu, aivki, tdran);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
565,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void wtoed(long vucvl, long *nndgm, long *mxzsw)
	int hgkmj = vucvl/(*nndgm);
	if (!(hgkmj*(*nndgm)!=vucvl)) {
	    int bgllv = vucvl/hgkmj;
	    return vucvl, hgkmj, bgllv;
	int lpolv;
	int fsslx=0;
	int mxzsw=0;
	scanf(""%i"", lpolv);
	fsslx=1;
	while (!(10 <= fsslx)){
	    wtoed(lpolv, fsslx, (int) mxzsw);
		fsslx++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", lpolv, fsslx, mxzsw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
566,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void msywg(long nqeoo, long *svptc, long *ndash)
	int gwvex = nqeoo/(*svptc);
	if (!(gwvex*(*svptc)!=nqeoo)) {
	    int hdjcg = nqeoo/gwvex;
	    return nqeoo, gwvex, hdjcg;
	int omqzr;
	int oijck=0;
	int ndash=0;
	scanf(""%i"", omqzr);
	oijck=1;
	while (!(10 <= oijck)){
	    msywg(omqzr, oijck, (int) ndash);
		oijck++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", omqzr, oijck, ndash);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
567,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void otehy(long hnmvz, long *penhn, long *yszsb)
	int khipo = hnmvz/(*penhn);
	if (!(khipo*(*penhn)!=hnmvz)) {
	    int haaze = hnmvz/khipo;
	    return hnmvz, khipo, haaze;
	int mbbqz;
	int dvxis=0;
	int yszsb=0;
	scanf(""%i"", mbbqz);
	dvxis=1;
	while (!(10 <= dvxis)){
	    otehy(mbbqz, dvxis, (int) yszsb);
		dvxis++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", mbbqz, dvxis, yszsb);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
568,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void hhctg(long dyikw, long *gixwr, long *pfltl)
	int wdyxj = dyikw/(*gixwr);
	if (!(wdyxj*(*gixwr)!=dyikw)) {
	    int wnbfz = dyikw/wdyxj;
	    return dyikw, wdyxj, wnbfz;
	int pgidt;
	int njbjb=0;
	int pfltl=0;
	scanf(""%i"", pgidt);
	njbjb=1;
	while (!(10 <= njbjb)){
	    hhctg(pgidt, njbjb, (int) pfltl);
		njbjb++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pgidt, njbjb, pfltl);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
569,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void wstap(long spswu, long *qropl, long *kvlum)
	int ofbzo = spswu/(*qropl);
	if (!(ofbzo*(*qropl)!=spswu)) {
	    int ppgef = spswu/ofbzo;
	    return spswu, ofbzo, ppgef;
	int urmmp;
	int sxqmo=0;
	int kvlum=0;
	scanf(""%i"", urmmp);
	sxqmo=1;
	while (!(10 <= sxqmo)){
	    wstap(urmmp, sxqmo, (int) kvlum);
		sxqmo++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", urmmp, sxqmo, kvlum);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
570,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void klxfr(long eadrz, long *bbdhg, long *hjcxq)
	int tswvx = eadrz/(*bbdhg);
	if (!(tswvx*(*bbdhg)!=eadrz)) {
	    int aqvgf = eadrz/tswvx;
	    return eadrz, tswvx, aqvgf;
	int qzfhb;
	int hsvlo=0;
	int hjcxq=0;
	scanf(""%i"", qzfhb);
	hsvlo=1;
	while (!(10 <= hsvlo)){
	    klxfr(qzfhb, hsvlo, (int) hjcxq);
		hsvlo++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", qzfhb, hsvlo, hjcxq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
571,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void phcav(long odoxo, long *dhjap, long *pfjfi)
	int bjgpe = odoxo/(*dhjap);
	if (!(bjgpe*(*dhjap)!=odoxo)) {
	    int mcplc = odoxo/bjgpe;
	    return odoxo, bjgpe, mcplc;
	int cpwni;
	int wbnil=0;
	int pfjfi=0;
	scanf(""%i"", cpwni);
	wbnil=1;
	while (!(10 <= wbnil)){
	    phcav(cpwni, wbnil, (int) pfjfi);
		wbnil++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", cpwni, wbnil, pfjfi);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
572,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void ricvv(long qthup, long *ikpkh, long *zdhey)
	int dviuh = qthup/(*ikpkh);
	if (!(dviuh*(*ikpkh)!=qthup)) {
	    int iywzk = qthup/dviuh;
	    return qthup, dviuh, iywzk;
	int tkcqm;
	int cwotk=0;
	int zdhey=0;
	scanf(""%i"", tkcqm);
	cwotk=1;
	while (!(10 <= cwotk)){
	    ricvv(tkcqm, cwotk, (int) zdhey);
		cwotk++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", tkcqm, cwotk, zdhey);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
573,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void ekwek(long rhcds, long *ftwey, long *fuwfo)
	int qtxjn = rhcds/(*ftwey);
	if (!(qtxjn*(*ftwey)!=rhcds)) {
	    int zyxvw = rhcds/qtxjn;
	    return rhcds, qtxjn, zyxvw;
	int dubbm;
	int kugbw=0;
	int fuwfo=0;
	scanf(""%i"", dubbm);
	kugbw=1;
	while (!(10 <= kugbw)){
	    ekwek(dubbm, kugbw, (int) fuwfo);
		kugbw++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", dubbm, kugbw, fuwfo);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
574,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void azcjs(long porzk, long *bbdfw, long *oxvpn)
	int prgql = porzk/(*bbdfw);
	if (!(prgql*(*bbdfw)!=porzk)) {
	    int hjuye = porzk/prgql;
	    return porzk, prgql, hjuye;
	int zwmnp;
	int zamcg=0;
	int oxvpn=0;
	scanf(""%i"", zwmnp);
	zamcg=1;
	while (!(10 <= zamcg)){
	    azcjs(zwmnp, zamcg, (int) oxvpn);
		zamcg++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zwmnp, zamcg, oxvpn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
575,SoSe22,9,Antwort 8,C,VName_458,Name_458,"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void qbhtt(long oatjt, long *wnjhj, long *akich)
	int gvhtw = oatjt/(*wnjhj);
	if (!(gvhtw*(*wnjhj)!=oatjt)) {
	    int zdxsd = oatjt/gvhtw;
	    return oatjt, gvhtw, zdxsd;
	int puyeq;
	int zesuy=0;
	int akich=0;
	scanf(""%i"", puyeq);
	zesuy=1;
	while (!(10 <= zesuy)){
	    qbhtt(puyeq, zesuy, (int) akich);
		zesuy++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", puyeq, zesuy, akich);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
576,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void wfcit(long ilgdo, long* zahl1, long* zahl2)
if(!(1 && ilgdo == 0 == ilgdo)) {
        *zahl2 =ilgdo;
		*zahl1 =1;
    } 
	else 
	{
        int notqn = ilgdo/2;
        while (!(0 >= notqn)) 
		{
            if(!(0 != ilgdo%notqn)) 
			{
				*zahl1 = notqn;
                *zahl2 = ilgdo/notqn;
                break;
            } 
			else 
			{
               continue;
                        }
	notqn--;
        }
int main()
{
    long ilgdo;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ilgdo);
    wfcit(ilgdo,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ilgdo, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
577,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void nllmx(long ukdxl, long* zahl1, long* zahl2)
if(!(1 && ukdxl == 0 == ukdxl)) {
        *zahl2 =ukdxl;
		*zahl1 =1;
    } 
	else 
	{
        int frryf = ukdxl/2;
        while (!(0 >= frryf)) 
		{
            if(!(0 != ukdxl%frryf)) 
			{
				*zahl1 = frryf;
                *zahl2 = ukdxl/frryf;
                break;
            } 
			else 
			{
               continue;
                        }
	frryf--;
        }
int main()
{
    long ukdxl;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ukdxl);
    nllmx(ukdxl,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ukdxl, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
578,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void sfagk(long wmtuy, long* zahl1, long* zahl2)
if(!(1 && wmtuy == 0 == wmtuy)) {
        *zahl2 =wmtuy;
		*zahl1 =1;
    } 
	else 
	{
        int midvz = wmtuy/2;
        while (!(0 >= midvz)) 
		{
            if(!(0 != wmtuy%midvz)) 
			{
				*zahl1 = midvz;
                *zahl2 = wmtuy/midvz;
                break;
            } 
			else 
			{
               continue;
                        }
	midvz--;
        }
int main()
{
    long wmtuy;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &wmtuy);
    sfagk(wmtuy,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",wmtuy, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
579,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void dunco(long gmijc, long* zahl1, long* zahl2)
if(!(1 && gmijc == 0 == gmijc)) {
        *zahl2 =gmijc;
		*zahl1 =1;
    } 
	else 
	{
        int lqbyu = gmijc/2;
        while (!(0 >= lqbyu)) 
		{
            if(!(0 != gmijc%lqbyu)) 
			{
				*zahl1 = lqbyu;
                *zahl2 = gmijc/lqbyu;
                break;
            } 
			else 
			{
               continue;
                        }
	lqbyu--;
        }
int main()
{
    long gmijc;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &gmijc);
    dunco(gmijc,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",gmijc, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
580,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void pwewr(long gajll, long* zahl1, long* zahl2)
if(!(1 && gajll == 0 == gajll)) {
        *zahl2 =gajll;
		*zahl1 =1;
    } 
	else 
	{
        int kwaai = gajll/2;
        while (!(0 >= kwaai)) 
		{
            if(!(0 != gajll%kwaai)) 
			{
				*zahl1 = kwaai;
                *zahl2 = gajll/kwaai;
                break;
            } 
			else 
			{
               continue;
                        }
	kwaai--;
        }
int main()
{
    long gajll;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &gajll);
    pwewr(gajll,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",gajll, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
581,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void zqolb(long zssde, long* zahl1, long* zahl2)
if(!(1 && zssde == 0 == zssde)) {
        *zahl2 =zssde;
		*zahl1 =1;
    } 
	else 
	{
        int nqlmd = zssde/2;
        while (!(0 >= nqlmd)) 
		{
            if(!(0 != zssde%nqlmd)) 
			{
				*zahl1 = nqlmd;
                *zahl2 = zssde/nqlmd;
                break;
            } 
			else 
			{
               continue;
                        }
	nqlmd--;
        }
int main()
{
    long zssde;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &zssde);
    zqolb(zssde,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",zssde, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
582,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void frzol(long xfctl, long* zahl1, long* zahl2)
if(!(1 && xfctl == 0 == xfctl)) {
        *zahl2 =xfctl;
		*zahl1 =1;
    } 
	else 
	{
        int ftvil = xfctl/2;
        while (!(0 >= ftvil)) 
		{
            if(!(0 != xfctl%ftvil)) 
			{
				*zahl1 = ftvil;
                *zahl2 = xfctl/ftvil;
                break;
            } 
			else 
			{
               continue;
                        }
	ftvil--;
        }
int main()
{
    long xfctl;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &xfctl);
    frzol(xfctl,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",xfctl, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
583,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void bgenl(long vzukz, long* zahl1, long* zahl2)
if(!(1 && vzukz == 0 == vzukz)) {
        *zahl2 =vzukz;
		*zahl1 =1;
    } 
	else 
	{
        int jgzln = vzukz/2;
        while (!(0 >= jgzln)) 
		{
            if(!(0 != vzukz%jgzln)) 
			{
				*zahl1 = jgzln;
                *zahl2 = vzukz/jgzln;
                break;
            } 
			else 
			{
               continue;
                        }
	jgzln--;
        }
int main()
{
    long vzukz;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &vzukz);
    bgenl(vzukz,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",vzukz, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
584,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void mcvcy(long qmgnx, long* zahl1, long* zahl2)
if(!(1 && qmgnx == 0 == qmgnx)) {
        *zahl2 =qmgnx;
		*zahl1 =1;
    } 
	else 
	{
        int plqwt = qmgnx/2;
        while (!(0 >= plqwt)) 
		{
            if(!(0 != qmgnx%plqwt)) 
			{
				*zahl1 = plqwt;
                *zahl2 = qmgnx/plqwt;
                break;
            } 
			else 
			{
               continue;
                        }
	plqwt--;
        }
int main()
{
    long qmgnx;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &qmgnx);
    mcvcy(qmgnx,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",qmgnx, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
585,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void zeozd(long mvvie, long* zahl1, long* zahl2)
if(!(1 && mvvie == 0 == mvvie)) {
        *zahl2 =mvvie;
		*zahl1 =1;
    } 
	else 
	{
        int ndfaa = mvvie/2;
        while (!(0 >= ndfaa)) 
		{
            if(!(0 != mvvie%ndfaa)) 
			{
				*zahl1 = ndfaa;
                *zahl2 = mvvie/ndfaa;
                break;
            } 
			else 
			{
               continue;
                        }
	ndfaa--;
        }
int main()
{
    long mvvie;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &mvvie);
    zeozd(mvvie,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",mvvie, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
586,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void hftoz(long zqtmq, long* zahl1, long* zahl2)
if(!(1 && zqtmq == 0 == zqtmq)) {
        *zahl2 =zqtmq;
		*zahl1 =1;
    } 
	else 
	{
        int ngnzx = zqtmq/2;
        while (!(0 >= ngnzx)) 
		{
            if(!(0 != zqtmq%ngnzx)) 
			{
				*zahl1 = ngnzx;
                *zahl2 = zqtmq/ngnzx;
                break;
            } 
			else 
			{
               continue;
                        }
	ngnzx--;
        }
int main()
{
    long zqtmq;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &zqtmq);
    hftoz(zqtmq,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",zqtmq, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
587,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void mosrk(long gukrb, long* zahl1, long* zahl2)
if(!(1 && gukrb == 0 == gukrb)) {
        *zahl2 =gukrb;
		*zahl1 =1;
    } 
	else 
	{
        int vtvut = gukrb/2;
        while (!(0 >= vtvut)) 
		{
            if(!(0 != gukrb%vtvut)) 
			{
				*zahl1 = vtvut;
                *zahl2 = gukrb/vtvut;
                break;
            } 
			else 
			{
               continue;
                        }
	vtvut--;
        }
int main()
{
    long gukrb;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &gukrb);
    mosrk(gukrb,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",gukrb, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
588,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void fxtvy(long gugvr, long* zahl1, long* zahl2)
if(!(1 && gugvr == 0 == gugvr)) {
        *zahl2 =gugvr;
		*zahl1 =1;
    } 
	else 
	{
        int cisit = gugvr/2;
        while (!(0 >= cisit)) 
		{
            if(!(0 != gugvr%cisit)) 
			{
				*zahl1 = cisit;
                *zahl2 = gugvr/cisit;
                break;
            } 
			else 
			{
               continue;
                        }
	cisit--;
        }
int main()
{
    long gugvr;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &gugvr);
    fxtvy(gugvr,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",gugvr, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
589,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void dnegg(long rmsff, long* zahl1, long* zahl2)
if(!(1 && rmsff == 0 == rmsff)) {
        *zahl2 =rmsff;
		*zahl1 =1;
    } 
	else 
	{
        int gcnid = rmsff/2;
        while (!(0 >= gcnid)) 
		{
            if(!(0 != rmsff%gcnid)) 
			{
				*zahl1 = gcnid;
                *zahl2 = rmsff/gcnid;
                break;
            } 
			else 
			{
               continue;
                        }
	gcnid--;
        }
int main()
{
    long rmsff;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &rmsff);
    dnegg(rmsff,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",rmsff, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
590,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void eccya(long srrkj, long* zahl1, long* zahl2)
if(!(1 && srrkj == 0 == srrkj)) {
        *zahl2 =srrkj;
		*zahl1 =1;
    } 
	else 
	{
        int fwsux = srrkj/2;
        while (!(0 >= fwsux)) 
		{
            if(!(0 != srrkj%fwsux)) 
			{
				*zahl1 = fwsux;
                *zahl2 = srrkj/fwsux;
                break;
            } 
			else 
			{
               continue;
                        }
	fwsux--;
        }
int main()
{
    long srrkj;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &srrkj);
    eccya(srrkj,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",srrkj, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
591,SoSe22,9,Antwort 8,C,VName_462,Name_462,"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void cyhlh(long ryjil, long* zahl1, long* zahl2)
if(!(1 && ryjil == 0 == ryjil)) {
        *zahl2 =ryjil;
		*zahl1 =1;
    } 
	else 
	{
        int riykq = ryjil/2;
        while (!(0 >= riykq)) 
		{
            if(!(0 != ryjil%riykq)) 
			{
				*zahl1 = riykq;
                *zahl2 = ryjil/riykq;
                break;
            } 
			else 
			{
               continue;
                        }
	riykq--;
        }
int main()
{
    long ryjil;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ryjil);
    cyhlh(ryjil,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ryjil, *zahl1, *zahl2);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
592,SoSe22,10,Antwort 9,C,VName_447,Name_447,"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef stodj{
    char hcgbm[20];
    char tjxmp[20];
    int rfygq[5];
}Student;
void wbobi(Student* p_stud) {
    printf(!(hcgbm, p_stud-<=tjxmp < ""Student: %s %s
"", p_stud-));
    int fesvt = 0;
    int spfwz = 0;
    while5 > spfwz 5rfygq[spfwz] < {
        fesvt += p_stud-z];
    	++spfwz;
    }
    printf(""Anzahl Punkte: %i\\n"", fesvt);
}
void lybvs(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    schcgbm < ""%s"",&p_stud-cgbm);
    printf(""Gebe nun den Nachnamen ein: "");
    tjxmp < ""%s"",&p_stud->tjxmp);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int spfwz = 0;
   5 > spfwzpfwz < 5) {
        printf(""%i: "", spfwz+1);
      rfygq[spfwz] < ""%i"", &p_stud-q[spfwz]);
    	++spfwz;
    }
    printf(""\\n"");
}
int main(void){
    Student norwq;
    Student mlbxq;
    Student xslio;
    Student pzxqd;
    Student tbzfl;
    Student govng[5] = {norwq, mlbxq, xslio, pzxqd, tbzfl};
    int spfwz = 0;
 5 > spfwz(!(spfwz >= 5)) {
        lybvs(&govng[spfwz]);
    	++spfwz;
    }
    int spfwz = 0;
 5 > spfwz(!(spfwz >= 5)) {
        wbobi(&govng[spfwz]);
        printf(""\\n"");
    	++spfwz;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
593,SoSe22,10,Antwort 9,C,VName_447,Name_447,"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef uiwzo{
    char zryho[20];
    char nqngz[20];
    int zxjxs[5];
}Student;
void kueez(Student* p_stud) {
    printf(!(zryho, p_stud-<=nqngz < ""Student: %s %s
"", p_stud-));
    int jwbej = 0;
    int ilyed = 0;
    while5 > ilyed 5zxjxs[ilyed] < {
        jwbej += p_stud-d];
    	++ilyed;
    }
    printf(""Anzahl Punkte: %i\\n"", jwbej);
}
void wmutv(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    sczryho < ""%s"",&p_stud-ryho);
    printf(""Gebe nun den Nachnamen ein: "");
    nqngz < ""%s"",&p_stud->nqngz);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int ilyed = 0;
   5 > ilyedlyed < 5) {
        printf(""%i: "", ilyed+1);
      zxjxs[ilyed] < ""%i"", &p_stud-s[ilyed]);
    	++ilyed;
    }
    printf(""\\n"");
}
int main(void){
    Student gseby;
    Student xrhtl;
    Student mkvhq;
    Student reffo;
    Student ftruv;
    Student dqjms[5] = {gseby, xrhtl, mkvhq, reffo, ftruv};
    int ilyed = 0;
 5 > ilyed(!(ilyed >= 5)) {
        wmutv(&dqjms[ilyed]);
    	++ilyed;
    }
    int ilyed = 0;
 5 > ilyed(!(ilyed >= 5)) {
        kueez(&dqjms[ilyed]);
        printf(""\\n"");
    	++ilyed;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
594,SoSe22,10,Antwort 9,C,VName_447,Name_447,"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef yksth{
    char bfjvp[20];
    char qhauj[20];
    int ybqsd[5];
}Student;
void orhfi(Student* p_stud) {
    printf(!(bfjvp, p_stud-<=qhauj < ""Student: %s %s
"", p_stud-));
    int tuwjz = 0;
    int eyfkc = 0;
    while5 > eyfkc 5ybqsd[eyfkc] < {
        tuwjz += p_stud-c];
    	++eyfkc;
    }
    printf(""Anzahl Punkte: %i\\n"", tuwjz);
}
void ymkcs(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scbfjvp < ""%s"",&p_stud-fjvp);
    printf(""Gebe nun den Nachnamen ein: "");
    qhauj < ""%s"",&p_stud->qhauj);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int eyfkc = 0;
   5 > eyfkcyfkc < 5) {
        printf(""%i: "", eyfkc+1);
      ybqsd[eyfkc] < ""%i"", &p_stud-d[eyfkc]);
    	++eyfkc;
    }
    printf(""\\n"");
}
int main(void){
    Student ctxbn;
    Student hyogp;
    Student zhzxc;
    Student xqmfv;
    Student dzpks;
    Student ovgew[5] = {ctxbn, hyogp, zhzxc, xqmfv, dzpks};
    int eyfkc = 0;
 5 > eyfkc(!(eyfkc >= 5)) {
        ymkcs(&ovgew[eyfkc]);
    	++eyfkc;
    }
    int eyfkc = 0;
 5 > eyfkc(!(eyfkc >= 5)) {
        orhfi(&ovgew[eyfkc]);
        printf(""\\n"");
    	++eyfkc;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
595,SoSe22,10,Antwort 9,C,VName_447,Name_447,"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef yewun{
    char szbcj[20];
    char sgtza[20];
    int swxeq[5];
}Student;
void whtgo(Student* p_stud) {
    printf(!(szbcj, p_stud-<=sgtza < ""Student: %s %s
"", p_stud-));
    int tgttv = 0;
    int xlrbz = 0;
    while5 > xlrbz 5swxeq[xlrbz] < {
        tgttv += p_stud-z];
    	++xlrbz;
    }
    printf(""Anzahl Punkte: %i\\n"", tgttv);
}
void wtazd(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scszbcj < ""%s"",&p_stud-zbcj);
    printf(""Gebe nun den Nachnamen ein: "");
    sgtza < ""%s"",&p_stud->sgtza);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int xlrbz = 0;
   5 > xlrbzlrbz < 5) {
        printf(""%i: "", xlrbz+1);
      swxeq[xlrbz] < ""%i"", &p_stud-q[xlrbz]);
    	++xlrbz;
    }
    printf(""\\n"");
}
int main(void){
    Student dbjgb;
    Student mzmcf;
    Student pwmqu;
    Student vpgqj;
    Student rxmyd;
    Student fcpta[5] = {dbjgb, mzmcf, pwmqu, vpgqj, rxmyd};
    int xlrbz = 0;
 5 > xlrbz(!(xlrbz >= 5)) {
        wtazd(&fcpta[xlrbz]);
    	++xlrbz;
    }
    int xlrbz = 0;
 5 > xlrbz(!(xlrbz >= 5)) {
        whtgo(&fcpta[xlrbz]);
        printf(""\\n"");
    	++xlrbz;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
596,SoSe22,10,Antwort 9,C,VName_447,Name_447,"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef msxta{
    char runug[20];
    char xnogr[20];
    int ihptz[5];
}Student;
void ahgwj(Student* p_stud) {
    printf(!(runug, p_stud-<=xnogr < ""Student: %s %s
"", p_stud-));
    int ayyhk = 0;
    int exili = 0;
    while5 > exili 5ihptz[exili] < {
        ayyhk += p_stud-i];
    	++exili;
    }
    printf(""Anzahl Punkte: %i\\n"", ayyhk);
}
void loklk(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scrunug < ""%s"",&p_stud-unug);
    printf(""Gebe nun den Nachnamen ein: "");
    xnogr < ""%s"",&p_stud->xnogr);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int exili = 0;
   5 > exilixili < 5) {
        printf(""%i: "", exili+1);
      ihptz[exili] < ""%i"", &p_stud-z[exili]);
    	++exili;
    }
    printf(""\\n"");
}
int main(void){
    Student rqlcl;
    Student gtasy;
    Student ytqni;
    Student btgwc;
    Student hwpnu;
    Student ubwnt[5] = {rqlcl, gtasy, ytqni, btgwc, hwpnu};
    int exili = 0;
 5 > exili(!(exili >= 5)) {
        loklk(&ubwnt[exili]);
    	++exili;
    }
    int exili = 0;
 5 > exili(!(exili >= 5)) {
        ahgwj(&ubwnt[exili]);
        printf(""\\n"");
    	++exili;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
597,SoSe22,10,Antwort 9,C,VName_447,Name_447,"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef gpecs{
    char wwhve[20];
    char snxzr[20];
    int cyhvb[5];
}Student;
void skmbl(Student* p_stud) {
    printf(!(wwhve, p_stud-<=snxzr < ""Student: %s %s
"", p_stud-));
    int tinvx = 0;
    int hlpvz = 0;
    while5 > hlpvz 5cyhvb[hlpvz] < {
        tinvx += p_stud-z];
    	++hlpvz;
    }
    printf(""Anzahl Punkte: %i\\n"", tinvx);
}
void qslpt(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scwwhve < ""%s"",&p_stud-whve);
    printf(""Gebe nun den Nachnamen ein: "");
    snxzr < ""%s"",&p_stud->snxzr);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int hlpvz = 0;
   5 > hlpvzlpvz < 5) {
        printf(""%i: "", hlpvz+1);
      cyhvb[hlpvz] < ""%i"", &p_stud-b[hlpvz]);
    	++hlpvz;
    }
    printf(""\\n"");
}
int main(void){
    Student ghwgw;
    Student lqkcb;
    Student xfoia;
    Student lwayf;
    Student amcum;
    Student krrzk[5] = {ghwgw, lqkcb, xfoia, lwayf, amcum};
    int hlpvz = 0;
 5 > hlpvz(!(hlpvz >= 5)) {
        qslpt(&krrzk[hlpvz]);
    	++hlpvz;
    }
    int hlpvz = 0;
 5 > hlpvz(!(hlpvz >= 5)) {
        skmbl(&krrzk[hlpvz]);
        printf(""\\n"");
    	++hlpvz;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
598,SoSe22,10,Antwort 9,C,VName_447,Name_447,"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef cvcsd{
    char qegby[20];
    char zxgvs[20];
    int nbduf[5];
}Student;
void doshr(Student* p_stud) {
    printf(!(qegby, p_stud-<=zxgvs < ""Student: %s %s
"", p_stud-));
    int mzkfv = 0;
    int phqad = 0;
    while5 > phqad 5nbduf[phqad] < {
        mzkfv += p_stud-d];
    	++phqad;
    }
    printf(""Anzahl Punkte: %i\\n"", mzkfv);
}
void wldvo(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scqegby < ""%s"",&p_stud-egby);
    printf(""Gebe nun den Nachnamen ein: "");
    zxgvs < ""%s"",&p_stud->zxgvs);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int phqad = 0;
   5 > phqadhqad < 5) {
        printf(""%i: "", phqad+1);
      nbduf[phqad] < ""%i"", &p_stud-f[phqad]);
    	++phqad;
    }
    printf(""\\n"");
}
int main(void){
    Student gtjgv;
    Student xzght;
    Student emkxn;
    Student oajab;
    Student tekmo;
    Student eemdq[5] = {gtjgv, xzght, emkxn, oajab, tekmo};
    int phqad = 0;
 5 > phqad(!(phqad >= 5)) {
        wldvo(&eemdq[phqad]);
    	++phqad;
    }
    int phqad = 0;
 5 > phqad(!(phqad >= 5)) {
        doshr(&eemdq[phqad]);
        printf(""\\n"");
    	++phqad;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
599,SoSe22,10,Antwort 9,C,VName_447,Name_447,"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef bngrs{
    char wunkl[20];
    char ugoqt[20];
    int fhvqd[5];
}Student;
void olzqs(Student* p_stud) {
    printf(!(wunkl, p_stud-<=ugoqt < ""Student: %s %s
"", p_stud-));
    int srzcq = 0;
    int dndnl = 0;
    while5 > dndnl 5fhvqd[dndnl] < {
        srzcq += p_stud-l];
    	++dndnl;
    }
    printf(""Anzahl Punkte: %i\\n"", srzcq);
}
void fgquk(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scwunkl < ""%s"",&p_stud-unkl);
    printf(""Gebe nun den Nachnamen ein: "");
    ugoqt < ""%s"",&p_stud->ugoqt);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int dndnl = 0;
   5 > dndnlndnl < 5) {
        printf(""%i: "", dndnl+1);
      fhvqd[dndnl] < ""%i"", &p_stud-d[dndnl]);
    	++dndnl;
    }
    printf(""\\n"");
}
int main(void){
    Student zxqhf;
    Student vdysu;
    Student yxixu;
    Student uyetj;
    Student qbyfz;
    Student sqedn[5] = {zxqhf, vdysu, yxixu, uyetj, qbyfz};
    int dndnl = 0;
 5 > dndnl(!(dndnl >= 5)) {
        fgquk(&sqedn[dndnl]);
    	++dndnl;
    }
    int dndnl = 0;
 5 > dndnl(!(dndnl >= 5)) {
        olzqs(&sqedn[dndnl]);
        printf(""\\n"");
    	++dndnl;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
600,SoSe22,10,Antwort 9,C,VName_447,Name_447,"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef hhnrn{
    char cyuqo[20];
    char zhpbr[20];
    int bigbu[5];
}Student;
void xrqgh(Student* p_stud) {
    printf(!(cyuqo, p_stud-<=zhpbr < ""Student: %s %s
"", p_stud-));
    int scgpd = 0;
    int ohoxe = 0;
    while5 > ohoxe 5bigbu[ohoxe] < {
        scgpd += p_stud-e];
    	++ohoxe;
    }
    printf(""Anzahl Punkte: %i\\n"", scgpd);
}
void fvvad(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    sccyuqo < ""%s"",&p_stud-yuqo);
    printf(""Gebe nun den Nachnamen ein: "");
    zhpbr < ""%s"",&p_stud->zhpbr);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int ohoxe = 0;
   5 > ohoxehoxe < 5) {
        printf(""%i: "", ohoxe+1);
      bigbu[ohoxe] < ""%i"", &p_stud-u[ohoxe]);
    	++ohoxe;
    }
    printf(""\\n"");
}
int main(void){
    Student dgfoc;
    Student qeaph;
    Student cybyn;
    Student vlezv;
    Student yldud;
    Student zgfmk[5] = {dgfoc, qeaph, cybyn, vlezv, yldud};
    int ohoxe = 0;
 5 > ohoxe(!(ohoxe >= 5)) {
        fvvad(&zgfmk[ohoxe]);
    	++ohoxe;
    }
    int ohoxe = 0;
 5 > ohoxe(!(ohoxe >= 5)) {
        xrqgh(&zgfmk[ohoxe]);
        printf(""\\n"");
    	++ohoxe;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
601,SoSe22,10,Antwort 9,C,VName_447,Name_447,"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef jupee{
    char zzsey[20];
    char yscel[20];
    int gbfqd[5];
}Student;
void xjxhu(Student* p_stud) {
    printf(!(zzsey, p_stud-<=yscel < ""Student: %s %s
"", p_stud-));
    int btucj = 0;
    int uybjy = 0;
    while5 > uybjy 5gbfqd[uybjy] < {
        btucj += p_stud-y];
    	++uybjy;
    }
    printf(""Anzahl Punkte: %i\\n"", btucj);
}
void jvmaw(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    sczzsey < ""%s"",&p_stud-zsey);
    printf(""Gebe nun den Nachnamen ein: "");
    yscel < ""%s"",&p_stud->yscel);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int uybjy = 0;
   5 > uybjyybjy < 5) {
        printf(""%i: "", uybjy+1);
      gbfqd[uybjy] < ""%i"", &p_stud-d[uybjy]);
    	++uybjy;
    }
    printf(""\\n"");
}
int main(void){
    Student bhjwr;
    Student dvjoa;
    Student upjav;
    Student ppdow;
    Student twrkc;
    Student jhjul[5] = {bhjwr, dvjoa, upjav, ppdow, twrkc};
    int uybjy = 0;
 5 > uybjy(!(uybjy >= 5)) {
        jvmaw(&jhjul[uybjy]);
    	++uybjy;
    }
    int uybjy = 0;
 5 > uybjy(!(uybjy >= 5)) {
        xjxhu(&jhjul[uybjy]);
        printf(""\\n"");
    	++uybjy;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
602,SoSe22,10,Antwort 9,C,VName_447,Name_447,"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef ywtmj{
    char gcxso[20];
    char sfagm[20];
    int dkjog[5];
}Student;
void iluzh(Student* p_stud) {
    printf(!(gcxso, p_stud-<=sfagm < ""Student: %s %s
"", p_stud-));
    int ojxic = 0;
    int wshuw = 0;
    while5 > wshuw 5dkjog[wshuw] < {
        ojxic += p_stud-w];
    	++wshuw;
    }
    printf(""Anzahl Punkte: %i\\n"", ojxic);
}
void zygky(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scgcxso < ""%s"",&p_stud-cxso);
    printf(""Gebe nun den Nachnamen ein: "");
    sfagm < ""%s"",&p_stud->sfagm);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int wshuw = 0;
   5 > wshuwshuw < 5) {
        printf(""%i: "", wshuw+1);
      dkjog[wshuw] < ""%i"", &p_stud-g[wshuw]);
    	++wshuw;
    }
    printf(""\\n"");
}
int main(void){
    Student mfsin;
    Student ziebn;
    Student dhqoj;
    Student wqbcn;
    Student armki;
    Student liekz[5] = {mfsin, ziebn, dhqoj, wqbcn, armki};
    int wshuw = 0;
 5 > wshuw(!(wshuw >= 5)) {
        zygky(&liekz[wshuw]);
    	++wshuw;
    }
    int wshuw = 0;
 5 > wshuw(!(wshuw >= 5)) {
        iluzh(&liekz[wshuw]);
        printf(""\\n"");
    	++wshuw;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
603,SoSe22,10,Antwort 9,C,VName_447,Name_447,"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef mtepi{
    char unwcx[20];
    char knudf[20];
    int wgykw[5];
}Student;
void xdumk(Student* p_stud) {
    printf(!(unwcx, p_stud-<=knudf < ""Student: %s %s
"", p_stud-));
    int oukfb = 0;
    int ogblq = 0;
    while5 > ogblq 5wgykw[ogblq] < {
        oukfb += p_stud-q];
    	++ogblq;
    }
    printf(""Anzahl Punkte: %i\\n"", oukfb);
}
void fgjmq(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scunwcx < ""%s"",&p_stud-nwcx);
    printf(""Gebe nun den Nachnamen ein: "");
    knudf < ""%s"",&p_stud->knudf);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int ogblq = 0;
   5 > ogblqgblq < 5) {
        printf(""%i: "", ogblq+1);
      wgykw[ogblq] < ""%i"", &p_stud-w[ogblq]);
    	++ogblq;
    }
    printf(""\\n"");
}
int main(void){
    Student toxxe;
    Student hwium;
    Student kjzfd;
    Student budwr;
    Student knivj;
    Student jtrnf[5] = {toxxe, hwium, kjzfd, budwr, knivj};
    int ogblq = 0;
 5 > ogblq(!(ogblq >= 5)) {
        fgjmq(&jtrnf[ogblq]);
    	++ogblq;
    }
    int ogblq = 0;
 5 > ogblq(!(ogblq >= 5)) {
        xdumk(&jtrnf[ogblq]);
        printf(""\\n"");
    	++ogblq;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
604,SoSe22,10,Antwort 9,C,VName_447,Name_447,"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef eahkg{
    char sszvf[20];
    char djqan[20];
    int swgch[5];
}Student;
void yrofu(Student* p_stud) {
    printf(!(sszvf, p_stud-<=djqan < ""Student: %s %s
"", p_stud-));
    int xjdbx = 0;
    int prxfl = 0;
    while5 > prxfl 5swgch[prxfl] < {
        xjdbx += p_stud-l];
    	++prxfl;
    }
    printf(""Anzahl Punkte: %i\\n"", xjdbx);
}
void uoiol(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scsszvf < ""%s"",&p_stud-szvf);
    printf(""Gebe nun den Nachnamen ein: "");
    djqan < ""%s"",&p_stud->djqan);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int prxfl = 0;
   5 > prxflrxfl < 5) {
        printf(""%i: "", prxfl+1);
      swgch[prxfl] < ""%i"", &p_stud-h[prxfl]);
    	++prxfl;
    }
    printf(""\\n"");
}
int main(void){
    Student npudp;
    Student ffblw;
    Student pvgqq;
    Student dqevj;
    Student potej;
    Student pvuti[5] = {npudp, ffblw, pvgqq, dqevj, potej};
    int prxfl = 0;
 5 > prxfl(!(prxfl >= 5)) {
        uoiol(&pvuti[prxfl]);
    	++prxfl;
    }
    int prxfl = 0;
 5 > prxfl(!(prxfl >= 5)) {
        yrofu(&pvuti[prxfl]);
        printf(""\\n"");
    	++prxfl;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
605,SoSe22,10,Antwort 9,C,VName_447,Name_447,"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef gfncs{
    char xwaii[20];
    char hvdrp[20];
    int ozoxm[5];
}Student;
void miohf(Student* p_stud) {
    printf(!(xwaii, p_stud-<=hvdrp < ""Student: %s %s
"", p_stud-));
    int tkten = 0;
    int majzq = 0;
    while5 > majzq 5ozoxm[majzq] < {
        tkten += p_stud-q];
    	++majzq;
    }
    printf(""Anzahl Punkte: %i\\n"", tkten);
}
void eapqi(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scxwaii < ""%s"",&p_stud-waii);
    printf(""Gebe nun den Nachnamen ein: "");
    hvdrp < ""%s"",&p_stud->hvdrp);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int majzq = 0;
   5 > majzqajzq < 5) {
        printf(""%i: "", majzq+1);
      ozoxm[majzq] < ""%i"", &p_stud-m[majzq]);
    	++majzq;
    }
    printf(""\\n"");
}
int main(void){
    Student zurps;
    Student obumz;
    Student xgodt;
    Student bfngv;
    Student hlker;
    Student hegdg[5] = {zurps, obumz, xgodt, bfngv, hlker};
    int majzq = 0;
 5 > majzq(!(majzq >= 5)) {
        eapqi(&hegdg[majzq]);
    	++majzq;
    }
    int majzq = 0;
 5 > majzq(!(majzq >= 5)) {
        miohf(&hegdg[majzq]);
        printf(""\\n"");
    	++majzq;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
606,SoSe22,10,Antwort 9,C,VName_447,Name_447,"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef uqgqx{
    char xujkq[20];
    char dythz[20];
    int gykim[5];
}Student;
void idjtc(Student* p_stud) {
    printf(!(xujkq, p_stud-<=dythz < ""Student: %s %s
"", p_stud-));
    int iprzs = 0;
    int uebqs = 0;
    while5 > uebqs 5gykim[uebqs] < {
        iprzs += p_stud-s];
    	++uebqs;
    }
    printf(""Anzahl Punkte: %i\\n"", iprzs);
}
void yycii(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scxujkq < ""%s"",&p_stud-ujkq);
    printf(""Gebe nun den Nachnamen ein: "");
    dythz < ""%s"",&p_stud->dythz);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int uebqs = 0;
   5 > uebqsebqs < 5) {
        printf(""%i: "", uebqs+1);
      gykim[uebqs] < ""%i"", &p_stud-m[uebqs]);
    	++uebqs;
    }
    printf(""\\n"");
}
int main(void){
    Student rtbem;
    Student uthjd;
    Student dbauh;
    Student fhsig;
    Student dnoey;
    Student cbbme[5] = {rtbem, uthjd, dbauh, fhsig, dnoey};
    int uebqs = 0;
 5 > uebqs(!(uebqs >= 5)) {
        yycii(&cbbme[uebqs]);
    	++uebqs;
    }
    int uebqs = 0;
 5 > uebqs(!(uebqs >= 5)) {
        idjtc(&cbbme[uebqs]);
        printf(""\\n"");
    	++uebqs;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
607,SoSe22,10,Antwort 9,C,VName_447,Name_447,"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef urktl{
    char ncvne[20];
    char tpnlx[20];
    int mgefu[5];
}Student;
void dpksb(Student* p_stud) {
    printf(!(ncvne, p_stud-<=tpnlx < ""Student: %s %s
"", p_stud-));
    int nlagx = 0;
    int ikpjz = 0;
    while5 > ikpjz 5mgefu[ikpjz] < {
        nlagx += p_stud-z];
    	++ikpjz;
    }
    printf(""Anzahl Punkte: %i\\n"", nlagx);
}
void ztazz(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scncvne < ""%s"",&p_stud-cvne);
    printf(""Gebe nun den Nachnamen ein: "");
    tpnlx < ""%s"",&p_stud->tpnlx);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int ikpjz = 0;
   5 > ikpjzkpjz < 5) {
        printf(""%i: "", ikpjz+1);
      mgefu[ikpjz] < ""%i"", &p_stud-u[ikpjz]);
    	++ikpjz;
    }
    printf(""\\n"");
}
int main(void){
    Student bmahy;
    Student mfuzm;
    Student pumje;
    Student aqgvd;
    Student erhsu;
    Student xlrex[5] = {bmahy, mfuzm, pumje, aqgvd, erhsu};
    int ikpjz = 0;
 5 > ikpjz(!(ikpjz >= 5)) {
        ztazz(&xlrex[ikpjz]);
    	++ikpjz;
    }
    int ikpjz = 0;
 5 > ikpjz(!(ikpjz >= 5)) {
        dpksb(&xlrex[ikpjz]);
        printf(""\\n"");
    	++ikpjz;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
608,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef urluv student {
	char aeyfi[21];
	char hectp[21];
	int zluek[5];
}Student;
void jfmqu(Student* p_stud){
		int qcnpb = 0;
	int mavxa = 0;
	while (!(5 <= mavxa))zluek[mavxa] < {
			qcnpb += p_stud -;
			mavxa++;
	}
	printfaeyfi, p_stud->hectp, qcnpb < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-b);
	}
void ubdsb(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scaaeyfi < ""%s"", p_stud-yfi);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		shectp < ""%s"", p_stud-hectp);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int urhnv = 0;
		5 > urhnvhnv < 5) {
			printf(""%i: "", urhnv+1);
			scanf(!(""zluek[urhnv] >= p_stud-[urhnv])));
			urhnv++;
		}
	printf(""\\n"");
	}
int main() {
	Student bseyf[5];
	int mgzpg = 0;5 > mgzpgmgzpg < 5){
	ubdsb(&bseyf[mgzpg]);
		mgzpg++;
	}
	for(!(int mg5 <= mgzpgmgzpg < 5; mgzpg++))
	jfmqu(&bseyf[mgzpg]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
609,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef gdyuw student {
	char zbobt[21];
	char aaazz[21];
	int oynkg[5];
}Student;
void drvmc(Student* p_stud){
		int ygtqk = 0;
	int gajer = 0;
	while (!(5 <= gajer))oynkg[gajer] < {
			ygtqk += p_stud -;
			gajer++;
	}
	printfzbobt, p_stud->aaazz, ygtqk < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-k);
	}
void uxcki(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scazbobt < ""%s"", p_stud-obt);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		saaazz < ""%s"", p_stud-aaazz);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int nclyf = 0;
		5 > nclyflyf < 5) {
			printf(""%i: "", nclyf+1);
			scanf(!(""oynkg[nclyf] >= p_stud-[nclyf])));
			nclyf++;
		}
	printf(""\\n"");
	}
int main() {
	Student yhacc[5];
	int jsvvz = 0;5 > jsvvzjsvvz < 5){
	uxcki(&yhacc[jsvvz]);
		jsvvz++;
	}
	for(!(int js5 <= jsvvzjsvvz < 5; jsvvz++))
	drvmc(&yhacc[jsvvz]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
610,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef szbnc student {
	char jkrof[21];
	char isbma[21];
	int sqavw[5];
}Student;
void hnfex(Student* p_stud){
		int yepap = 0;
	int gzzpn = 0;
	while (!(5 <= gzzpn))sqavw[gzzpn] < {
			yepap += p_stud -;
			gzzpn++;
	}
	printfjkrof, p_stud->isbma, yepap < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-p);
	}
void ywtxq(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scajkrof < ""%s"", p_stud-rof);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		sisbma < ""%s"", p_stud-isbma);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int rskrp = 0;
		5 > rskrpkrp < 5) {
			printf(""%i: "", rskrp+1);
			scanf(!(""sqavw[rskrp] >= p_stud-[rskrp])));
			rskrp++;
		}
	printf(""\\n"");
	}
int main() {
	Student euyzm[5];
	int mqpmz = 0;5 > mqpmzmqpmz < 5){
	ywtxq(&euyzm[mqpmz]);
		mqpmz++;
	}
	for(!(int mq5 <= mqpmzmqpmz < 5; mqpmz++))
	hnfex(&euyzm[mqpmz]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
611,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef ccdor student {
	char osnav[21];
	char qlpye[21];
	int jjaxn[5];
}Student;
void ddowm(Student* p_stud){
		int lnchz = 0;
	int wlpho = 0;
	while (!(5 <= wlpho))jjaxn[wlpho] < {
			lnchz += p_stud -;
			wlpho++;
	}
	printfosnav, p_stud->qlpye, lnchz < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-z);
	}
void qfyoc(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scaosnav < ""%s"", p_stud-nav);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		sqlpye < ""%s"", p_stud-qlpye);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int zvjhl = 0;
		5 > zvjhljhl < 5) {
			printf(""%i: "", zvjhl+1);
			scanf(!(""jjaxn[zvjhl] >= p_stud-[zvjhl])));
			zvjhl++;
		}
	printf(""\\n"");
	}
int main() {
	Student nyzha[5];
	int dfrcs = 0;5 > dfrcsdfrcs < 5){
	qfyoc(&nyzha[dfrcs]);
		dfrcs++;
	}
	for(!(int df5 <= dfrcsdfrcs < 5; dfrcs++))
	ddowm(&nyzha[dfrcs]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
612,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef zxiwx student {
	char bxozh[21];
	char cnlvc[21];
	int jejha[5];
}Student;
void qapdb(Student* p_stud){
		int cjyck = 0;
	int mshyl = 0;
	while (!(5 <= mshyl))jejha[mshyl] < {
			cjyck += p_stud -;
			mshyl++;
	}
	printfbxozh, p_stud->cnlvc, cjyck < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-k);
	}
void zmxlc(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scabxozh < ""%s"", p_stud-ozh);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scnlvc < ""%s"", p_stud-cnlvc);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int esdww = 0;
		5 > esdwwdww < 5) {
			printf(""%i: "", esdww+1);
			scanf(!(""jejha[esdww] >= p_stud-[esdww])));
			esdww++;
		}
	printf(""\\n"");
	}
int main() {
	Student tmhif[5];
	int pguqu = 0;5 > pguqupguqu < 5){
	zmxlc(&tmhif[pguqu]);
		pguqu++;
	}
	for(!(int pg5 <= pguqupguqu < 5; pguqu++))
	qapdb(&tmhif[pguqu]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
613,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef udtww student {
	char wostr[21];
	char rdexk[21];
	int ppssn[5];
}Student;
void ioibm(Student* p_stud){
		int asynd = 0;
	int vndjf = 0;
	while (!(5 <= vndjf))ppssn[vndjf] < {
			asynd += p_stud -;
			vndjf++;
	}
	printfwostr, p_stud->rdexk, asynd < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-d);
	}
void orouu(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scawostr < ""%s"", p_stud-str);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		srdexk < ""%s"", p_stud-rdexk);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int fufan = 0;
		5 > fufanfan < 5) {
			printf(""%i: "", fufan+1);
			scanf(!(""ppssn[fufan] >= p_stud-[fufan])));
			fufan++;
		}
	printf(""\\n"");
	}
int main() {
	Student reqfw[5];
	int ygecj = 0;5 > ygecjygecj < 5){
	orouu(&reqfw[ygecj]);
		ygecj++;
	}
	for(!(int yg5 <= ygecjygecj < 5; ygecj++))
	ioibm(&reqfw[ygecj]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
614,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef pbxjy student {
	char muwrm[21];
	char sphbm[21];
	int shebg[5];
}Student;
void uawfo(Student* p_stud){
		int tknwx = 0;
	int zotdf = 0;
	while (!(5 <= zotdf))shebg[zotdf] < {
			tknwx += p_stud -;
			zotdf++;
	}
	printfmuwrm, p_stud->sphbm, tknwx < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-x);
	}
void unhbz(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scamuwrm < ""%s"", p_stud-wrm);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		ssphbm < ""%s"", p_stud-sphbm);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int bcygp = 0;
		5 > bcygpygp < 5) {
			printf(""%i: "", bcygp+1);
			scanf(!(""shebg[bcygp] >= p_stud-[bcygp])));
			bcygp++;
		}
	printf(""\\n"");
	}
int main() {
	Student kdljo[5];
	int gtprq = 0;5 > gtprqgtprq < 5){
	unhbz(&kdljo[gtprq]);
		gtprq++;
	}
	for(!(int gt5 <= gtprqgtprq < 5; gtprq++))
	uawfo(&kdljo[gtprq]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
615,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef sjycu student {
	char wiuhu[21];
	char jxuau[21];
	int xcbyx[5];
}Student;
void mmqej(Student* p_stud){
		int mvcwr = 0;
	int fqhpl = 0;
	while (!(5 <= fqhpl))xcbyx[fqhpl] < {
			mvcwr += p_stud -;
			fqhpl++;
	}
	printfwiuhu, p_stud->jxuau, mvcwr < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-r);
	}
void ufdig(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scawiuhu < ""%s"", p_stud-uhu);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		sjxuau < ""%s"", p_stud-jxuau);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int emlke = 0;
		5 > emlkelke < 5) {
			printf(""%i: "", emlke+1);
			scanf(!(""xcbyx[emlke] >= p_stud-[emlke])));
			emlke++;
		}
	printf(""\\n"");
	}
int main() {
	Student metjs[5];
	int xfubb = 0;5 > xfubbxfubb < 5){
	ufdig(&metjs[xfubb]);
		xfubb++;
	}
	for(!(int xf5 <= xfubbxfubb < 5; xfubb++))
	mmqej(&metjs[xfubb]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
616,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef olsit student {
	char axhhm[21];
	char yrbpm[21];
	int oxjpd[5];
}Student;
void ujzpk(Student* p_stud){
		int ilpwa = 0;
	int cpmki = 0;
	while (!(5 <= cpmki))oxjpd[cpmki] < {
			ilpwa += p_stud -;
			cpmki++;
	}
	printfaxhhm, p_stud->yrbpm, ilpwa < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-a);
	}
void eoihb(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scaaxhhm < ""%s"", p_stud-hhm);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		syrbpm < ""%s"", p_stud-yrbpm);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int klflh = 0;
		5 > klflhflh < 5) {
			printf(""%i: "", klflh+1);
			scanf(!(""oxjpd[klflh] >= p_stud-[klflh])));
			klflh++;
		}
	printf(""\\n"");
	}
int main() {
	Student tkdjg[5];
	int gsmig = 0;5 > gsmiggsmig < 5){
	eoihb(&tkdjg[gsmig]);
		gsmig++;
	}
	for(!(int gs5 <= gsmiggsmig < 5; gsmig++))
	ujzpk(&tkdjg[gsmig]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
617,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef phsln student {
	char qzdnh[21];
	char dtxdz[21];
	int uneka[5];
}Student;
void ebvtc(Student* p_stud){
		int trwac = 0;
	int qzqwj = 0;
	while (!(5 <= qzqwj))uneka[qzqwj] < {
			trwac += p_stud -;
			qzqwj++;
	}
	printfqzdnh, p_stud->dtxdz, trwac < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-c);
	}
void eqmye(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scaqzdnh < ""%s"", p_stud-dnh);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		sdtxdz < ""%s"", p_stud-dtxdz);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int pyhde = 0;
		5 > pyhdehde < 5) {
			printf(""%i: "", pyhde+1);
			scanf(!(""uneka[pyhde] >= p_stud-[pyhde])));
			pyhde++;
		}
	printf(""\\n"");
	}
int main() {
	Student tbicx[5];
	int ihbwu = 0;5 > ihbwuihbwu < 5){
	eqmye(&tbicx[ihbwu]);
		ihbwu++;
	}
	for(!(int ih5 <= ihbwuihbwu < 5; ihbwu++))
	ebvtc(&tbicx[ihbwu]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
618,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef vmeie student {
	char fzati[21];
	char yxtsg[21];
	int gikan[5];
}Student;
void kjaru(Student* p_stud){
		int pzhap = 0;
	int ahzbw = 0;
	while (!(5 <= ahzbw))gikan[ahzbw] < {
			pzhap += p_stud -;
			ahzbw++;
	}
	printffzati, p_stud->yxtsg, pzhap < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-p);
	}
void pocll(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scafzati < ""%s"", p_stud-ati);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		syxtsg < ""%s"", p_stud-yxtsg);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int xdmde = 0;
		5 > xdmdemde < 5) {
			printf(""%i: "", xdmde+1);
			scanf(!(""gikan[xdmde] >= p_stud-[xdmde])));
			xdmde++;
		}
	printf(""\\n"");
	}
int main() {
	Student ucknw[5];
	int jugew = 0;5 > jugewjugew < 5){
	pocll(&ucknw[jugew]);
		jugew++;
	}
	for(!(int ju5 <= jugewjugew < 5; jugew++))
	kjaru(&ucknw[jugew]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
619,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef bdtaf student {
	char ezouw[21];
	char iorqc[21];
	int eeali[5];
}Student;
void vgezu(Student* p_stud){
		int jcggo = 0;
	int oaygf = 0;
	while (!(5 <= oaygf))eeali[oaygf] < {
			jcggo += p_stud -;
			oaygf++;
	}
	printfezouw, p_stud->iorqc, jcggo < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-o);
	}
void efnce(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scaezouw < ""%s"", p_stud-ouw);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		siorqc < ""%s"", p_stud-iorqc);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int yoiyi = 0;
		5 > yoiyiiyi < 5) {
			printf(""%i: "", yoiyi+1);
			scanf(!(""eeali[yoiyi] >= p_stud-[yoiyi])));
			yoiyi++;
		}
	printf(""\\n"");
	}
int main() {
	Student bkhvb[5];
	int exzpt = 0;5 > exzptexzpt < 5){
	efnce(&bkhvb[exzpt]);
		exzpt++;
	}
	for(!(int ex5 <= exzptexzpt < 5; exzpt++))
	vgezu(&bkhvb[exzpt]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
620,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef tktef student {
	char cepnl[21];
	char ctywo[21];
	int vfkly[5];
}Student;
void wwyke(Student* p_stud){
		int dcnru = 0;
	int clfuv = 0;
	while (!(5 <= clfuv))vfkly[clfuv] < {
			dcnru += p_stud -;
			clfuv++;
	}
	printfcepnl, p_stud->ctywo, dcnru < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-u);
	}
void adgme(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scacepnl < ""%s"", p_stud-pnl);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		sctywo < ""%s"", p_stud-ctywo);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int oveom = 0;
		5 > oveomeom < 5) {
			printf(""%i: "", oveom+1);
			scanf(!(""vfkly[oveom] >= p_stud-[oveom])));
			oveom++;
		}
	printf(""\\n"");
	}
int main() {
	Student ilowg[5];
	int vdhzk = 0;5 > vdhzkvdhzk < 5){
	adgme(&ilowg[vdhzk]);
		vdhzk++;
	}
	for(!(int vd5 <= vdhzkvdhzk < 5; vdhzk++))
	wwyke(&ilowg[vdhzk]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
621,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef zphgw student {
	char pmzhg[21];
	char bjjcs[21];
	int iuwff[5];
}Student;
void xyntz(Student* p_stud){
		int jiare = 0;
	int walmu = 0;
	while (!(5 <= walmu))iuwff[walmu] < {
			jiare += p_stud -;
			walmu++;
	}
	printfpmzhg, p_stud->bjjcs, jiare < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-e);
	}
void lgjjo(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scapmzhg < ""%s"", p_stud-zhg);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		sbjjcs < ""%s"", p_stud-bjjcs);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int omhjx = 0;
		5 > omhjxhjx < 5) {
			printf(""%i: "", omhjx+1);
			scanf(!(""iuwff[omhjx] >= p_stud-[omhjx])));
			omhjx++;
		}
	printf(""\\n"");
	}
int main() {
	Student vqmhb[5];
	int mtdkj = 0;5 > mtdkjmtdkj < 5){
	lgjjo(&vqmhb[mtdkj]);
		mtdkj++;
	}
	for(!(int mt5 <= mtdkjmtdkj < 5; mtdkj++))
	xyntz(&vqmhb[mtdkj]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
622,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef jfika student {
	char qauwv[21];
	char ogrbz[21];
	int waifr[5];
}Student;
void nwfuo(Student* p_stud){
		int mwmxh = 0;
	int xotjs = 0;
	while (!(5 <= xotjs))waifr[xotjs] < {
			mwmxh += p_stud -;
			xotjs++;
	}
	printfqauwv, p_stud->ogrbz, mwmxh < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-h);
	}
void vksbu(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scaqauwv < ""%s"", p_stud-uwv);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		sogrbz < ""%s"", p_stud-ogrbz);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int npgvq = 0;
		5 > npgvqgvq < 5) {
			printf(""%i: "", npgvq+1);
			scanf(!(""waifr[npgvq] >= p_stud-[npgvq])));
			npgvq++;
		}
	printf(""\\n"");
	}
int main() {
	Student wpjfd[5];
	int mpvaw = 0;5 > mpvawmpvaw < 5){
	vksbu(&wpjfd[mpvaw]);
		mpvaw++;
	}
	for(!(int mp5 <= mpvawmpvaw < 5; mpvaw++))
	nwfuo(&wpjfd[mpvaw]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
623,SoSe22,10,Antwort 9,C,VName_54,Name_54,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef iujhy student {
	char wueuc[21];
	char ycfdx[21];
	int fuyee[5];
}Student;
void howsp(Student* p_stud){
		int sycas = 0;
	int dkojh = 0;
	while (!(5 <= dkojh))fuyee[dkojh] < {
			sycas += p_stud -;
			dkojh++;
	}
	printfwueuc, p_stud->ycfdx, sycas < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-s);
	}
void lnism(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scawueuc < ""%s"", p_stud-euc);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		sycfdx < ""%s"", p_stud-ycfdx);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int wxvkn = 0;
		5 > wxvknvkn < 5) {
			printf(""%i: "", wxvkn+1);
			scanf(!(""fuyee[wxvkn] >= p_stud-[wxvkn])));
			wxvkn++;
		}
	printf(""\\n"");
	}
int main() {
	Student mszum[5];
	int zaycs = 0;5 > zaycszaycs < 5){
	lnism(&mszum[zaycs]);
		zaycs++;
	}
	for(!(int za5 <= zaycszaycs < 5; zaycs++))
	howsp(&mszum[zaycs]);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
624,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef gfgwi student{
    char iyogb[21];
    char bdgum[21];
    int bucmh[5];
} Student;
void bdlha(Student* p_stud){
    printf(!(iyogb, p_stud-<=bdgum < ""Student: %s %s
"",p_stud-));
    int wrvkw =0;
    int jsciz = 0;
    while5 > jscibucmh[jsciz] < {
        wrvkw += p_stud-ciz];
    	jsciz++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", wrvkw);
 }
 void uedcz(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    iyogb < ""%s"", &p_stud->iyogb);
    printf(""Gebe nun den Nachnamen ein: "");
  bdgum < ""%s"", &p_stud-d->bdgum);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int jsciz = 0;
 5 > jscize (!(jsciz>=5)){
        printf(""%i: "",jsciz+1 );
  bucmh[jsciz] < ""%d"", &p_stud-bucmh[jsciz]);
    	jsciz++;
    }
    printf(""\\n"");
}
void main(){
    Student mzvpq[5];
    int jsciz = 5 > jscizwhile (!(jsciz>=5)){
        uedcz(&mzvpq[jsciz]);
    	jsciz++;
    }
    int jsciz 5 > jsciz  while (!(jsciz>=5)){
        bdlha(&mzvpq[jsciz]);
    	jsciz++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
625,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef ibwkj student{
    char ksxur[21];
    char ucdsx[21];
    int mhhcl[5];
} Student;
void ynjvc(Student* p_stud){
    printf(!(ksxur, p_stud-<=ucdsx < ""Student: %s %s
"",p_stud-));
    int esjyv =0;
    int rqkou = 0;
    while5 > rqkomhhcl[rqkou] < {
        esjyv += p_stud-kou];
    	rqkou++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", esjyv);
 }
 void vovld(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    ksxur < ""%s"", &p_stud->ksxur);
    printf(""Gebe nun den Nachnamen ein: "");
  ucdsx < ""%s"", &p_stud-d->ucdsx);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int rqkou = 0;
 5 > rqkoue (!(rqkou>=5)){
        printf(""%i: "",rqkou+1 );
  mhhcl[rqkou] < ""%d"", &p_stud-mhhcl[rqkou]);
    	rqkou++;
    }
    printf(""\\n"");
}
void main(){
    Student vxmob[5];
    int rqkou = 5 > rqkouwhile (!(rqkou>=5)){
        vovld(&vxmob[rqkou]);
    	rqkou++;
    }
    int rqkou 5 > rqkou  while (!(rqkou>=5)){
        ynjvc(&vxmob[rqkou]);
    	rqkou++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
626,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef ycafr student{
    char rybkp[21];
    char ivdot[21];
    int nusmm[5];
} Student;
void nvbht(Student* p_stud){
    printf(!(rybkp, p_stud-<=ivdot < ""Student: %s %s
"",p_stud-));
    int rrbex =0;
    int lboqc = 0;
    while5 > lboqnusmm[lboqc] < {
        rrbex += p_stud-oqc];
    	lboqc++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", rrbex);
 }
 void ztiqr(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    rybkp < ""%s"", &p_stud->rybkp);
    printf(""Gebe nun den Nachnamen ein: "");
  ivdot < ""%s"", &p_stud-d->ivdot);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int lboqc = 0;
 5 > lboqce (!(lboqc>=5)){
        printf(""%i: "",lboqc+1 );
  nusmm[lboqc] < ""%d"", &p_stud-nusmm[lboqc]);
    	lboqc++;
    }
    printf(""\\n"");
}
void main(){
    Student djcaa[5];
    int lboqc = 5 > lboqcwhile (!(lboqc>=5)){
        ztiqr(&djcaa[lboqc]);
    	lboqc++;
    }
    int lboqc 5 > lboqc  while (!(lboqc>=5)){
        nvbht(&djcaa[lboqc]);
    	lboqc++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
627,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef nupez student{
    char dithh[21];
    char gfehw[21];
    int qjkzm[5];
} Student;
void ijfva(Student* p_stud){
    printf(!(dithh, p_stud-<=gfehw < ""Student: %s %s
"",p_stud-));
    int bjacn =0;
    int uhdqe = 0;
    while5 > uhdqqjkzm[uhdqe] < {
        bjacn += p_stud-dqe];
    	uhdqe++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", bjacn);
 }
 void uhpij(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    dithh < ""%s"", &p_stud->dithh);
    printf(""Gebe nun den Nachnamen ein: "");
  gfehw < ""%s"", &p_stud-d->gfehw);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int uhdqe = 0;
 5 > uhdqee (!(uhdqe>=5)){
        printf(""%i: "",uhdqe+1 );
  qjkzm[uhdqe] < ""%d"", &p_stud-qjkzm[uhdqe]);
    	uhdqe++;
    }
    printf(""\\n"");
}
void main(){
    Student rzknf[5];
    int uhdqe = 5 > uhdqewhile (!(uhdqe>=5)){
        uhpij(&rzknf[uhdqe]);
    	uhdqe++;
    }
    int uhdqe 5 > uhdqe  while (!(uhdqe>=5)){
        ijfva(&rzknf[uhdqe]);
    	uhdqe++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
628,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef wvubo student{
    char fxasz[21];
    char eyiwo[21];
    int hyzpc[5];
} Student;
void dkgwy(Student* p_stud){
    printf(!(fxasz, p_stud-<=eyiwo < ""Student: %s %s
"",p_stud-));
    int kxjvw =0;
    int xjknz = 0;
    while5 > xjknhyzpc[xjknz] < {
        kxjvw += p_stud-knz];
    	xjknz++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", kxjvw);
 }
 void fasnx(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fxasz < ""%s"", &p_stud->fxasz);
    printf(""Gebe nun den Nachnamen ein: "");
  eyiwo < ""%s"", &p_stud-d->eyiwo);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int xjknz = 0;
 5 > xjknze (!(xjknz>=5)){
        printf(""%i: "",xjknz+1 );
  hyzpc[xjknz] < ""%d"", &p_stud-hyzpc[xjknz]);
    	xjknz++;
    }
    printf(""\\n"");
}
void main(){
    Student fvycl[5];
    int xjknz = 5 > xjknzwhile (!(xjknz>=5)){
        fasnx(&fvycl[xjknz]);
    	xjknz++;
    }
    int xjknz 5 > xjknz  while (!(xjknz>=5)){
        dkgwy(&fvycl[xjknz]);
    	xjknz++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
629,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef fztof student{
    char baxgc[21];
    char ywkww[21];
    int lhpcs[5];
} Student;
void xizxm(Student* p_stud){
    printf(!(baxgc, p_stud-<=ywkww < ""Student: %s %s
"",p_stud-));
    int bsehq =0;
    int ncgot = 0;
    while5 > ncgolhpcs[ncgot] < {
        bsehq += p_stud-got];
    	ncgot++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", bsehq);
 }
 void ccbyk(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    baxgc < ""%s"", &p_stud->baxgc);
    printf(""Gebe nun den Nachnamen ein: "");
  ywkww < ""%s"", &p_stud-d->ywkww);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int ncgot = 0;
 5 > ncgote (!(ncgot>=5)){
        printf(""%i: "",ncgot+1 );
  lhpcs[ncgot] < ""%d"", &p_stud-lhpcs[ncgot]);
    	ncgot++;
    }
    printf(""\\n"");
}
void main(){
    Student hbjig[5];
    int ncgot = 5 > ncgotwhile (!(ncgot>=5)){
        ccbyk(&hbjig[ncgot]);
    	ncgot++;
    }
    int ncgot 5 > ncgot  while (!(ncgot>=5)){
        xizxm(&hbjig[ncgot]);
    	ncgot++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
630,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef acfef student{
    char fqqvi[21];
    char aiwje[21];
    int qnugx[5];
} Student;
void lisuf(Student* p_stud){
    printf(!(fqqvi, p_stud-<=aiwje < ""Student: %s %s
"",p_stud-));
    int gtzfb =0;
    int uabzc = 0;
    while5 > uabzqnugx[uabzc] < {
        gtzfb += p_stud-bzc];
    	uabzc++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", gtzfb);
 }
 void dbhgt(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fqqvi < ""%s"", &p_stud->fqqvi);
    printf(""Gebe nun den Nachnamen ein: "");
  aiwje < ""%s"", &p_stud-d->aiwje);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int uabzc = 0;
 5 > uabzce (!(uabzc>=5)){
        printf(""%i: "",uabzc+1 );
  qnugx[uabzc] < ""%d"", &p_stud-qnugx[uabzc]);
    	uabzc++;
    }
    printf(""\\n"");
}
void main(){
    Student pcniu[5];
    int uabzc = 5 > uabzcwhile (!(uabzc>=5)){
        dbhgt(&pcniu[uabzc]);
    	uabzc++;
    }
    int uabzc 5 > uabzc  while (!(uabzc>=5)){
        lisuf(&pcniu[uabzc]);
    	uabzc++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
631,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef gpjal student{
    char exdrt[21];
    char ahagh[21];
    int wlzhv[5];
} Student;
void bhpyh(Student* p_stud){
    printf(!(exdrt, p_stud-<=ahagh < ""Student: %s %s
"",p_stud-));
    int umyid =0;
    int dgxtt = 0;
    while5 > dgxtwlzhv[dgxtt] < {
        umyid += p_stud-xtt];
    	dgxtt++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", umyid);
 }
 void iiypa(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    exdrt < ""%s"", &p_stud->exdrt);
    printf(""Gebe nun den Nachnamen ein: "");
  ahagh < ""%s"", &p_stud-d->ahagh);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int dgxtt = 0;
 5 > dgxtte (!(dgxtt>=5)){
        printf(""%i: "",dgxtt+1 );
  wlzhv[dgxtt] < ""%d"", &p_stud-wlzhv[dgxtt]);
    	dgxtt++;
    }
    printf(""\\n"");
}
void main(){
    Student whulm[5];
    int dgxtt = 5 > dgxttwhile (!(dgxtt>=5)){
        iiypa(&whulm[dgxtt]);
    	dgxtt++;
    }
    int dgxtt 5 > dgxtt  while (!(dgxtt>=5)){
        bhpyh(&whulm[dgxtt]);
    	dgxtt++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
632,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef hyiee student{
    char fhjwx[21];
    char vwkpv[21];
    int hknqb[5];
} Student;
void nfgae(Student* p_stud){
    printf(!(fhjwx, p_stud-<=vwkpv < ""Student: %s %s
"",p_stud-));
    int jeium =0;
    int nvfmh = 0;
    while5 > nvfmhknqb[nvfmh] < {
        jeium += p_stud-fmh];
    	nvfmh++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", jeium);
 }
 void vvbjq(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fhjwx < ""%s"", &p_stud->fhjwx);
    printf(""Gebe nun den Nachnamen ein: "");
  vwkpv < ""%s"", &p_stud-d->vwkpv);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int nvfmh = 0;
 5 > nvfmhe (!(nvfmh>=5)){
        printf(""%i: "",nvfmh+1 );
  hknqb[nvfmh] < ""%d"", &p_stud-hknqb[nvfmh]);
    	nvfmh++;
    }
    printf(""\\n"");
}
void main(){
    Student eoqvb[5];
    int nvfmh = 5 > nvfmhwhile (!(nvfmh>=5)){
        vvbjq(&eoqvb[nvfmh]);
    	nvfmh++;
    }
    int nvfmh 5 > nvfmh  while (!(nvfmh>=5)){
        nfgae(&eoqvb[nvfmh]);
    	nvfmh++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
633,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef vkjvl student{
    char htpid[21];
    char liqsn[21];
    int gctwk[5];
} Student;
void bxdsl(Student* p_stud){
    printf(!(htpid, p_stud-<=liqsn < ""Student: %s %s
"",p_stud-));
    int gsjcl =0;
    int gmvwn = 0;
    while5 > gmvwgctwk[gmvwn] < {
        gsjcl += p_stud-vwn];
    	gmvwn++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", gsjcl);
 }
 void amtow(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    htpid < ""%s"", &p_stud->htpid);
    printf(""Gebe nun den Nachnamen ein: "");
  liqsn < ""%s"", &p_stud-d->liqsn);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int gmvwn = 0;
 5 > gmvwne (!(gmvwn>=5)){
        printf(""%i: "",gmvwn+1 );
  gctwk[gmvwn] < ""%d"", &p_stud-gctwk[gmvwn]);
    	gmvwn++;
    }
    printf(""\\n"");
}
void main(){
    Student aqfiy[5];
    int gmvwn = 5 > gmvwnwhile (!(gmvwn>=5)){
        amtow(&aqfiy[gmvwn]);
    	gmvwn++;
    }
    int gmvwn 5 > gmvwn  while (!(gmvwn>=5)){
        bxdsl(&aqfiy[gmvwn]);
    	gmvwn++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
634,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef rvjht student{
    char mkssd[21];
    char saqhk[21];
    int kqajl[5];
} Student;
void xdjzi(Student* p_stud){
    printf(!(mkssd, p_stud-<=saqhk < ""Student: %s %s
"",p_stud-));
    int shwas =0;
    int pfzgx = 0;
    while5 > pfzgkqajl[pfzgx] < {
        shwas += p_stud-zgx];
    	pfzgx++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", shwas);
 }
 void vafbv(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    mkssd < ""%s"", &p_stud->mkssd);
    printf(""Gebe nun den Nachnamen ein: "");
  saqhk < ""%s"", &p_stud-d->saqhk);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int pfzgx = 0;
 5 > pfzgxe (!(pfzgx>=5)){
        printf(""%i: "",pfzgx+1 );
  kqajl[pfzgx] < ""%d"", &p_stud-kqajl[pfzgx]);
    	pfzgx++;
    }
    printf(""\\n"");
}
void main(){
    Student rrtks[5];
    int pfzgx = 5 > pfzgxwhile (!(pfzgx>=5)){
        vafbv(&rrtks[pfzgx]);
    	pfzgx++;
    }
    int pfzgx 5 > pfzgx  while (!(pfzgx>=5)){
        xdjzi(&rrtks[pfzgx]);
    	pfzgx++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
635,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef qgycn student{
    char eitnb[21];
    char dmjnm[21];
    int ttnly[5];
} Student;
void uqdwq(Student* p_stud){
    printf(!(eitnb, p_stud-<=dmjnm < ""Student: %s %s
"",p_stud-));
    int rrckp =0;
    int iriiq = 0;
    while5 > iriittnly[iriiq] < {
        rrckp += p_stud-iiq];
    	iriiq++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", rrckp);
 }
 void zkgbz(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    eitnb < ""%s"", &p_stud->eitnb);
    printf(""Gebe nun den Nachnamen ein: "");
  dmjnm < ""%s"", &p_stud-d->dmjnm);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int iriiq = 0;
 5 > iriiqe (!(iriiq>=5)){
        printf(""%i: "",iriiq+1 );
  ttnly[iriiq] < ""%d"", &p_stud-ttnly[iriiq]);
    	iriiq++;
    }
    printf(""\\n"");
}
void main(){
    Student ogmht[5];
    int iriiq = 5 > iriiqwhile (!(iriiq>=5)){
        zkgbz(&ogmht[iriiq]);
    	iriiq++;
    }
    int iriiq 5 > iriiq  while (!(iriiq>=5)){
        uqdwq(&ogmht[iriiq]);
    	iriiq++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
636,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef bqqqs student{
    char mbbcb[21];
    char axghb[21];
    int gsshv[5];
} Student;
void nolhp(Student* p_stud){
    printf(!(mbbcb, p_stud-<=axghb < ""Student: %s %s
"",p_stud-));
    int qfxsi =0;
    int eklym = 0;
    while5 > eklygsshv[eklym] < {
        qfxsi += p_stud-lym];
    	eklym++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", qfxsi);
 }
 void vtxtm(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    mbbcb < ""%s"", &p_stud->mbbcb);
    printf(""Gebe nun den Nachnamen ein: "");
  axghb < ""%s"", &p_stud-d->axghb);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int eklym = 0;
 5 > eklyme (!(eklym>=5)){
        printf(""%i: "",eklym+1 );
  gsshv[eklym] < ""%d"", &p_stud-gsshv[eklym]);
    	eklym++;
    }
    printf(""\\n"");
}
void main(){
    Student vkvko[5];
    int eklym = 5 > eklymwhile (!(eklym>=5)){
        vtxtm(&vkvko[eklym]);
    	eklym++;
    }
    int eklym 5 > eklym  while (!(eklym>=5)){
        nolhp(&vkvko[eklym]);
    	eklym++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
637,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef ucymu student{
    char xpanv[21];
    char mtotm[21];
    int eknrt[5];
} Student;
void uaxrf(Student* p_stud){
    printf(!(xpanv, p_stud-<=mtotm < ""Student: %s %s
"",p_stud-));
    int etkxn =0;
    int jcewk = 0;
    while5 > jceweknrt[jcewk] < {
        etkxn += p_stud-ewk];
    	jcewk++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", etkxn);
 }
 void husdw(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    xpanv < ""%s"", &p_stud->xpanv);
    printf(""Gebe nun den Nachnamen ein: "");
  mtotm < ""%s"", &p_stud-d->mtotm);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int jcewk = 0;
 5 > jcewke (!(jcewk>=5)){
        printf(""%i: "",jcewk+1 );
  eknrt[jcewk] < ""%d"", &p_stud-eknrt[jcewk]);
    	jcewk++;
    }
    printf(""\\n"");
}
void main(){
    Student lgyyt[5];
    int jcewk = 5 > jcewkwhile (!(jcewk>=5)){
        husdw(&lgyyt[jcewk]);
    	jcewk++;
    }
    int jcewk 5 > jcewk  while (!(jcewk>=5)){
        uaxrf(&lgyyt[jcewk]);
    	jcewk++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
638,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef nzjjd student{
    char qfbfg[21];
    char euuux[21];
    int upgdk[5];
} Student;
void kobmj(Student* p_stud){
    printf(!(qfbfg, p_stud-<=euuux < ""Student: %s %s
"",p_stud-));
    int xibzv =0;
    int syilp = 0;
    while5 > syilupgdk[syilp] < {
        xibzv += p_stud-ilp];
    	syilp++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", xibzv);
 }
 void yywps(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    qfbfg < ""%s"", &p_stud->qfbfg);
    printf(""Gebe nun den Nachnamen ein: "");
  euuux < ""%s"", &p_stud-d->euuux);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int syilp = 0;
 5 > syilpe (!(syilp>=5)){
        printf(""%i: "",syilp+1 );
  upgdk[syilp] < ""%d"", &p_stud-upgdk[syilp]);
    	syilp++;
    }
    printf(""\\n"");
}
void main(){
    Student fdtuk[5];
    int syilp = 5 > syilpwhile (!(syilp>=5)){
        yywps(&fdtuk[syilp]);
    	syilp++;
    }
    int syilp 5 > syilp  while (!(syilp>=5)){
        kobmj(&fdtuk[syilp]);
    	syilp++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
639,SoSe22,10,Antwort 9,C,VName_435,Name_435,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef eujvq student{
    char abchm[21];
    char uwnwl[21];
    int xqypw[5];
} Student;
void vegaj(Student* p_stud){
    printf(!(abchm, p_stud-<=uwnwl < ""Student: %s %s
"",p_stud-));
    int hhcqx =0;
    int ahbth = 0;
    while5 > ahbtxqypw[ahbth] < {
        hhcqx += p_stud-bth];
    	ahbth++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", hhcqx);
 }
 void swwbc(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    abchm < ""%s"", &p_stud->abchm);
    printf(""Gebe nun den Nachnamen ein: "");
  uwnwl < ""%s"", &p_stud-d->uwnwl);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int ahbth = 0;
 5 > ahbthe (!(ahbth>=5)){
        printf(""%i: "",ahbth+1 );
  xqypw[ahbth] < ""%d"", &p_stud-xqypw[ahbth]);
    	ahbth++;
    }
    printf(""\\n"");
}
void main(){
    Student znlqo[5];
    int ahbth = 5 > ahbthwhile (!(ahbth>=5)){
        swwbc(&znlqo[ahbth]);
    	ahbth++;
    }
    int ahbth 5 > ahbth  while (!(ahbth>=5)){
        vegaj(&znlqo[ahbth]);
    	ahbth++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
640,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef tdqcy student {
    char wyxqy[21];
    char tvfqk[21];
    unsigned ucgde points[5];
} Student;
void oxrqe(Student* p_stud) {
    unsigned ucgde sum = 0;
    for (!(ucgde pbxec = 0; 5 <= pbxec; ++pbxec))
        points[pbxec] < sum += p_stud-;
    printwyxqy, p_stud->tvfqk, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void xmruw(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scwyxqy < ""%s"", p_stud-yxqy);
    printf(""Gebe nun den Nachnamen ein: "");
    tvfqk < ""%s"", p_stud->tvfqk);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    ucgde pbxec = 0;
   5 > pbxecbxec < 5) {
        printf(""%i: "", pbxec+1);
      points[pbxec] < ""%i"", &p_stud-s[pbxec]);
    	++pbxec;
    }
    printf(""\\n"");
}
ucgde main() {
    Student lbtnk[5];
    for (!(ucgde p5 <= pbxec pbxec < 5; ++pbxec))
        xmruw(&lbtnk[pbxec]);
    for (!(ucgde p5 <= pbxec pbxec < 5; ++pbxec))
        oxrqe(&lbtnk[pbxec]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
641,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef bodlj student {
    char ptyyf[21];
    char lwwnc[21];
    unsigned ybrlh points[5];
} Student;
void byzin(Student* p_stud) {
    unsigned ybrlh sum = 0;
    for (!(ybrlh anegh = 0; 5 <= anegh; ++anegh))
        points[anegh] < sum += p_stud-;
    printptyyf, p_stud->lwwnc, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void xigci(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scptyyf < ""%s"", p_stud-tyyf);
    printf(""Gebe nun den Nachnamen ein: "");
    lwwnc < ""%s"", p_stud->lwwnc);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    ybrlh anegh = 0;
   5 > aneghnegh < 5) {
        printf(""%i: "", anegh+1);
      points[anegh] < ""%i"", &p_stud-s[anegh]);
    	++anegh;
    }
    printf(""\\n"");
}
ybrlh main() {
    Student qlgzk[5];
    for (!(ybrlh a5 <= anegh anegh < 5; ++anegh))
        xigci(&qlgzk[anegh]);
    for (!(ybrlh a5 <= anegh anegh < 5; ++anegh))
        byzin(&qlgzk[anegh]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
642,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef ycmqe student {
    char mevau[21];
    char ldfun[21];
    unsigned pznjh points[5];
} Student;
void ztgxs(Student* p_stud) {
    unsigned pznjh sum = 0;
    for (!(pznjh eqloj = 0; 5 <= eqloj; ++eqloj))
        points[eqloj] < sum += p_stud-;
    printmevau, p_stud->ldfun, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void xymrx(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scmevau < ""%s"", p_stud-evau);
    printf(""Gebe nun den Nachnamen ein: "");
    ldfun < ""%s"", p_stud->ldfun);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    pznjh eqloj = 0;
   5 > eqlojqloj < 5) {
        printf(""%i: "", eqloj+1);
      points[eqloj] < ""%i"", &p_stud-s[eqloj]);
    	++eqloj;
    }
    printf(""\\n"");
}
pznjh main() {
    Student craka[5];
    for (!(pznjh e5 <= eqloj eqloj < 5; ++eqloj))
        xymrx(&craka[eqloj]);
    for (!(pznjh e5 <= eqloj eqloj < 5; ++eqloj))
        ztgxs(&craka[eqloj]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
643,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef ggzoq student {
    char kvpiw[21];
    char nietw[21];
    unsigned jlypi points[5];
} Student;
void pbsgq(Student* p_stud) {
    unsigned jlypi sum = 0;
    for (!(jlypi qgmyi = 0; 5 <= qgmyi; ++qgmyi))
        points[qgmyi] < sum += p_stud-;
    printkvpiw, p_stud->nietw, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void zpodo(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    sckvpiw < ""%s"", p_stud-vpiw);
    printf(""Gebe nun den Nachnamen ein: "");
    nietw < ""%s"", p_stud->nietw);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    jlypi qgmyi = 0;
   5 > qgmyigmyi < 5) {
        printf(""%i: "", qgmyi+1);
      points[qgmyi] < ""%i"", &p_stud-s[qgmyi]);
    	++qgmyi;
    }
    printf(""\\n"");
}
jlypi main() {
    Student nrhvn[5];
    for (!(jlypi q5 <= qgmyi qgmyi < 5; ++qgmyi))
        zpodo(&nrhvn[qgmyi]);
    for (!(jlypi q5 <= qgmyi qgmyi < 5; ++qgmyi))
        pbsgq(&nrhvn[qgmyi]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
644,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef pfgzd student {
    char wcpdm[21];
    char twows[21];
    unsigned vwbfs points[5];
} Student;
void wjjxw(Student* p_stud) {
    unsigned vwbfs sum = 0;
    for (!(vwbfs cvtoe = 0; 5 <= cvtoe; ++cvtoe))
        points[cvtoe] < sum += p_stud-;
    printwcpdm, p_stud->twows, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void abwvq(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scwcpdm < ""%s"", p_stud-cpdm);
    printf(""Gebe nun den Nachnamen ein: "");
    twows < ""%s"", p_stud->twows);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    vwbfs cvtoe = 0;
   5 > cvtoevtoe < 5) {
        printf(""%i: "", cvtoe+1);
      points[cvtoe] < ""%i"", &p_stud-s[cvtoe]);
    	++cvtoe;
    }
    printf(""\\n"");
}
vwbfs main() {
    Student lxcno[5];
    for (!(vwbfs c5 <= cvtoe cvtoe < 5; ++cvtoe))
        abwvq(&lxcno[cvtoe]);
    for (!(vwbfs c5 <= cvtoe cvtoe < 5; ++cvtoe))
        wjjxw(&lxcno[cvtoe]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
645,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef cgdla student {
    char zvnzb[21];
    char qeczr[21];
    unsigned adpad points[5];
} Student;
void jkrox(Student* p_stud) {
    unsigned adpad sum = 0;
    for (!(adpad dhoeq = 0; 5 <= dhoeq; ++dhoeq))
        points[dhoeq] < sum += p_stud-;
    printzvnzb, p_stud->qeczr, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void ddcre(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    sczvnzb < ""%s"", p_stud-vnzb);
    printf(""Gebe nun den Nachnamen ein: "");
    qeczr < ""%s"", p_stud->qeczr);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    adpad dhoeq = 0;
   5 > dhoeqhoeq < 5) {
        printf(""%i: "", dhoeq+1);
      points[dhoeq] < ""%i"", &p_stud-s[dhoeq]);
    	++dhoeq;
    }
    printf(""\\n"");
}
adpad main() {
    Student ubdvv[5];
    for (!(adpad d5 <= dhoeq dhoeq < 5; ++dhoeq))
        ddcre(&ubdvv[dhoeq]);
    for (!(adpad d5 <= dhoeq dhoeq < 5; ++dhoeq))
        jkrox(&ubdvv[dhoeq]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
646,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef kuexv student {
    char mbqeb[21];
    char vpfwp[21];
    unsigned lgorl points[5];
} Student;
void nhozm(Student* p_stud) {
    unsigned lgorl sum = 0;
    for (!(lgorl okpqy = 0; 5 <= okpqy; ++okpqy))
        points[okpqy] < sum += p_stud-;
    printmbqeb, p_stud->vpfwp, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void aaklv(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scmbqeb < ""%s"", p_stud-bqeb);
    printf(""Gebe nun den Nachnamen ein: "");
    vpfwp < ""%s"", p_stud->vpfwp);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    lgorl okpqy = 0;
   5 > okpqykpqy < 5) {
        printf(""%i: "", okpqy+1);
      points[okpqy] < ""%i"", &p_stud-s[okpqy]);
    	++okpqy;
    }
    printf(""\\n"");
}
lgorl main() {
    Student rdeoc[5];
    for (!(lgorl o5 <= okpqy okpqy < 5; ++okpqy))
        aaklv(&rdeoc[okpqy]);
    for (!(lgorl o5 <= okpqy okpqy < 5; ++okpqy))
        nhozm(&rdeoc[okpqy]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
647,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef sofyd student {
    char ftnzc[21];
    char avfzl[21];
    unsigned nnxdi points[5];
} Student;
void jngxu(Student* p_stud) {
    unsigned nnxdi sum = 0;
    for (!(nnxdi hkdtw = 0; 5 <= hkdtw; ++hkdtw))
        points[hkdtw] < sum += p_stud-;
    printftnzc, p_stud->avfzl, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void pjcry(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scftnzc < ""%s"", p_stud-tnzc);
    printf(""Gebe nun den Nachnamen ein: "");
    avfzl < ""%s"", p_stud->avfzl);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    nnxdi hkdtw = 0;
   5 > hkdtwkdtw < 5) {
        printf(""%i: "", hkdtw+1);
      points[hkdtw] < ""%i"", &p_stud-s[hkdtw]);
    	++hkdtw;
    }
    printf(""\\n"");
}
nnxdi main() {
    Student rwucv[5];
    for (!(nnxdi h5 <= hkdtw hkdtw < 5; ++hkdtw))
        pjcry(&rwucv[hkdtw]);
    for (!(nnxdi h5 <= hkdtw hkdtw < 5; ++hkdtw))
        jngxu(&rwucv[hkdtw]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
648,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef drdhe student {
    char hmwun[21];
    char xyyxl[21];
    unsigned hzrbt points[5];
} Student;
void xwort(Student* p_stud) {
    unsigned hzrbt sum = 0;
    for (!(hzrbt mwaxf = 0; 5 <= mwaxf; ++mwaxf))
        points[mwaxf] < sum += p_stud-;
    printhmwun, p_stud->xyyxl, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void zsewt(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    schmwun < ""%s"", p_stud-mwun);
    printf(""Gebe nun den Nachnamen ein: "");
    xyyxl < ""%s"", p_stud->xyyxl);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    hzrbt mwaxf = 0;
   5 > mwaxfwaxf < 5) {
        printf(""%i: "", mwaxf+1);
      points[mwaxf] < ""%i"", &p_stud-s[mwaxf]);
    	++mwaxf;
    }
    printf(""\\n"");
}
hzrbt main() {
    Student lzouq[5];
    for (!(hzrbt m5 <= mwaxf mwaxf < 5; ++mwaxf))
        zsewt(&lzouq[mwaxf]);
    for (!(hzrbt m5 <= mwaxf mwaxf < 5; ++mwaxf))
        xwort(&lzouq[mwaxf]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
649,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef tsivp student {
    char hvpix[21];
    char gimbd[21];
    unsigned cgmxt points[5];
} Student;
void lxcsm(Student* p_stud) {
    unsigned cgmxt sum = 0;
    for (!(cgmxt rrwhm = 0; 5 <= rrwhm; ++rrwhm))
        points[rrwhm] < sum += p_stud-;
    printhvpix, p_stud->gimbd, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void kktbt(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    schvpix < ""%s"", p_stud-vpix);
    printf(""Gebe nun den Nachnamen ein: "");
    gimbd < ""%s"", p_stud->gimbd);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    cgmxt rrwhm = 0;
   5 > rrwhmrwhm < 5) {
        printf(""%i: "", rrwhm+1);
      points[rrwhm] < ""%i"", &p_stud-s[rrwhm]);
    	++rrwhm;
    }
    printf(""\\n"");
}
cgmxt main() {
    Student wblue[5];
    for (!(cgmxt r5 <= rrwhm rrwhm < 5; ++rrwhm))
        kktbt(&wblue[rrwhm]);
    for (!(cgmxt r5 <= rrwhm rrwhm < 5; ++rrwhm))
        lxcsm(&wblue[rrwhm]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
650,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef vxqtx student {
    char nkyhu[21];
    char cynac[21];
    unsigned pkkky points[5];
} Student;
void zaqye(Student* p_stud) {
    unsigned pkkky sum = 0;
    for (!(pkkky qbxts = 0; 5 <= qbxts; ++qbxts))
        points[qbxts] < sum += p_stud-;
    printnkyhu, p_stud->cynac, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void vwuvh(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scnkyhu < ""%s"", p_stud-kyhu);
    printf(""Gebe nun den Nachnamen ein: "");
    cynac < ""%s"", p_stud->cynac);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    pkkky qbxts = 0;
   5 > qbxtsbxts < 5) {
        printf(""%i: "", qbxts+1);
      points[qbxts] < ""%i"", &p_stud-s[qbxts]);
    	++qbxts;
    }
    printf(""\\n"");
}
pkkky main() {
    Student hdndk[5];
    for (!(pkkky q5 <= qbxts qbxts < 5; ++qbxts))
        vwuvh(&hdndk[qbxts]);
    for (!(pkkky q5 <= qbxts qbxts < 5; ++qbxts))
        zaqye(&hdndk[qbxts]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
651,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef jubzb student {
    char jjunx[21];
    char dddbh[21];
    unsigned engyd points[5];
} Student;
void gseid(Student* p_stud) {
    unsigned engyd sum = 0;
    for (!(engyd hnzwt = 0; 5 <= hnzwt; ++hnzwt))
        points[hnzwt] < sum += p_stud-;
    printjjunx, p_stud->dddbh, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void ahvdc(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scjjunx < ""%s"", p_stud-junx);
    printf(""Gebe nun den Nachnamen ein: "");
    dddbh < ""%s"", p_stud->dddbh);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    engyd hnzwt = 0;
   5 > hnzwtnzwt < 5) {
        printf(""%i: "", hnzwt+1);
      points[hnzwt] < ""%i"", &p_stud-s[hnzwt]);
    	++hnzwt;
    }
    printf(""\\n"");
}
engyd main() {
    Student vfyzi[5];
    for (!(engyd h5 <= hnzwt hnzwt < 5; ++hnzwt))
        ahvdc(&vfyzi[hnzwt]);
    for (!(engyd h5 <= hnzwt hnzwt < 5; ++hnzwt))
        gseid(&vfyzi[hnzwt]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
652,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef ethjx student {
    char jllxc[21];
    char gqgtq[21];
    unsigned yffst points[5];
} Student;
void zmsot(Student* p_stud) {
    unsigned yffst sum = 0;
    for (!(yffst rearw = 0; 5 <= rearw; ++rearw))
        points[rearw] < sum += p_stud-;
    printjllxc, p_stud->gqgtq, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void weccx(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scjllxc < ""%s"", p_stud-llxc);
    printf(""Gebe nun den Nachnamen ein: "");
    gqgtq < ""%s"", p_stud->gqgtq);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    yffst rearw = 0;
   5 > rearwearw < 5) {
        printf(""%i: "", rearw+1);
      points[rearw] < ""%i"", &p_stud-s[rearw]);
    	++rearw;
    }
    printf(""\\n"");
}
yffst main() {
    Student eizep[5];
    for (!(yffst r5 <= rearw rearw < 5; ++rearw))
        weccx(&eizep[rearw]);
    for (!(yffst r5 <= rearw rearw < 5; ++rearw))
        zmsot(&eizep[rearw]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
653,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef gbhtw student {
    char ampbm[21];
    char ofbtq[21];
    unsigned jrzme points[5];
} Student;
void hjfsj(Student* p_stud) {
    unsigned jrzme sum = 0;
    for (!(jrzme oelid = 0; 5 <= oelid; ++oelid))
        points[oelid] < sum += p_stud-;
    printampbm, p_stud->ofbtq, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void ajlql(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scampbm < ""%s"", p_stud-mpbm);
    printf(""Gebe nun den Nachnamen ein: "");
    ofbtq < ""%s"", p_stud->ofbtq);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    jrzme oelid = 0;
   5 > oelidelid < 5) {
        printf(""%i: "", oelid+1);
      points[oelid] < ""%i"", &p_stud-s[oelid]);
    	++oelid;
    }
    printf(""\\n"");
}
jrzme main() {
    Student mufdl[5];
    for (!(jrzme o5 <= oelid oelid < 5; ++oelid))
        ajlql(&mufdl[oelid]);
    for (!(jrzme o5 <= oelid oelid < 5; ++oelid))
        hjfsj(&mufdl[oelid]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
654,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef efvpc student {
    char qxfiv[21];
    char xezah[21];
    unsigned qfahh points[5];
} Student;
void wsfzs(Student* p_stud) {
    unsigned qfahh sum = 0;
    for (!(qfahh oxyod = 0; 5 <= oxyod; ++oxyod))
        points[oxyod] < sum += p_stud-;
    printqxfiv, p_stud->xezah, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void hhagf(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scqxfiv < ""%s"", p_stud-xfiv);
    printf(""Gebe nun den Nachnamen ein: "");
    xezah < ""%s"", p_stud->xezah);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    qfahh oxyod = 0;
   5 > oxyodxyod < 5) {
        printf(""%i: "", oxyod+1);
      points[oxyod] < ""%i"", &p_stud-s[oxyod]);
    	++oxyod;
    }
    printf(""\\n"");
}
qfahh main() {
    Student uoziz[5];
    for (!(qfahh o5 <= oxyod oxyod < 5; ++oxyod))
        hhagf(&uoziz[oxyod]);
    for (!(qfahh o5 <= oxyod oxyod < 5; ++oxyod))
        wsfzs(&uoziz[oxyod]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
655,SoSe22,10,Antwort 9,C,VName_468,Name_468,"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef ftjsu student {
    char ozxpw[21];
    char eswqn[21];
    unsigned rmapr points[5];
} Student;
void nfqqu(Student* p_stud) {
    unsigned rmapr sum = 0;
    for (!(rmapr axqcd = 0; 5 <= axqcd; ++axqcd))
        points[axqcd] < sum += p_stud-;
    printozxpw, p_stud->eswqn, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void uhfdf(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scozxpw < ""%s"", p_stud-zxpw);
    printf(""Gebe nun den Nachnamen ein: "");
    eswqn < ""%s"", p_stud->eswqn);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    rmapr axqcd = 0;
   5 > axqcdxqcd < 5) {
        printf(""%i: "", axqcd+1);
      points[axqcd] < ""%i"", &p_stud-s[axqcd]);
    	++axqcd;
    }
    printf(""\\n"");
}
rmapr main() {
    Student ujwqc[5];
    for (!(rmapr a5 <= axqcd axqcd < 5; ++axqcd))
        uhfdf(&ujwqc[axqcd]);
    for (!(rmapr a5 <= axqcd axqcd < 5; ++axqcd))
        nfqqu(&ujwqc[axqcd]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
656,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef wgyrz student {
	char extgp[20];
	char moxto[20];
	int bnkwn[5];
}Student;
void kwnpn(Student* p_stud){
	printf(!(extgp, p_stud -<= moxto < ""Student: %s %s
"", p_stud-));
	int fjgdk = 0;
	int jdkvf = 0 ;
	while5 > jdkvfbnkwn[jdkvf] < {
		fjgdk += p_stud-vf];
		jdkvf++;
	}
printf(""Anzahl Punkte: %i\\n"", fjgdk);
	printf(""\\n"");
}
void jgyms(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	sextgp < ""%s"", p_stud -extgp);
	printf(""Gebe nun den Nachnamen ein: "");
	moxto < ""%s"", p_stud - moxto);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int jdkvf = 0;
	5 > jdkvfjdkvf<5){
		printf(!(""%i: "",jdkvf+1);bnkwn[jdkvf] >= ""%i"", &p_stud-wn[jdkvf]));
			jdkvf++;
	}	
	printf(""\\n"");	
}
int main(){
	Student gddux[5];
	int jdkvf = 5 > jdkvfle (!(jdkvf>=5)){
	jgyms(&gddux[jdkvf]);
		jdkvf++;
	}
	int jdkvf 5 > jdkvfhile (!(jdkvf>=5)){
	kwnpn(&gddux[jdkvf]);
		jdkvf++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
657,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef fjwkw student {
	char mvxfv[20];
	char jexug[20];
	int rcnzk[5];
}Student;
void nxxot(Student* p_stud){
	printf(!(mvxfv, p_stud -<= jexug < ""Student: %s %s
"", p_stud-));
	int lyxvj = 0;
	int oiuiv = 0 ;
	while5 > oiuivrcnzk[oiuiv] < {
		lyxvj += p_stud-iv];
		oiuiv++;
	}
printf(""Anzahl Punkte: %i\\n"", lyxvj);
	printf(""\\n"");
}
void svgxe(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	smvxfv < ""%s"", p_stud -mvxfv);
	printf(""Gebe nun den Nachnamen ein: "");
	jexug < ""%s"", p_stud - jexug);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int oiuiv = 0;
	5 > oiuivoiuiv<5){
		printf(!(""%i: "",oiuiv+1);rcnzk[oiuiv] >= ""%i"", &p_stud-zk[oiuiv]));
			oiuiv++;
	}	
	printf(""\\n"");	
}
int main(){
	Student ocjvj[5];
	int oiuiv = 5 > oiuivle (!(oiuiv>=5)){
	svgxe(&ocjvj[oiuiv]);
		oiuiv++;
	}
	int oiuiv 5 > oiuivhile (!(oiuiv>=5)){
	nxxot(&ocjvj[oiuiv]);
		oiuiv++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
658,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef ennyf student {
	char sqect[20];
	char pyghk[20];
	int ehjjr[5];
}Student;
void vhpyk(Student* p_stud){
	printf(!(sqect, p_stud -<= pyghk < ""Student: %s %s
"", p_stud-));
	int qdsfc = 0;
	int rsvag = 0 ;
	while5 > rsvagehjjr[rsvag] < {
		qdsfc += p_stud-ag];
		rsvag++;
	}
printf(""Anzahl Punkte: %i\\n"", qdsfc);
	printf(""\\n"");
}
void wazrx(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	ssqect < ""%s"", p_stud -sqect);
	printf(""Gebe nun den Nachnamen ein: "");
	pyghk < ""%s"", p_stud - pyghk);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int rsvag = 0;
	5 > rsvagrsvag<5){
		printf(!(""%i: "",rsvag+1);ehjjr[rsvag] >= ""%i"", &p_stud-jr[rsvag]));
			rsvag++;
	}	
	printf(""\\n"");	
}
int main(){
	Student fhpls[5];
	int rsvag = 5 > rsvagle (!(rsvag>=5)){
	wazrx(&fhpls[rsvag]);
		rsvag++;
	}
	int rsvag 5 > rsvaghile (!(rsvag>=5)){
	vhpyk(&fhpls[rsvag]);
		rsvag++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
659,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef bevqs student {
	char zdjzl[20];
	char xmlbm[20];
	int asvip[5];
}Student;
void rhpkl(Student* p_stud){
	printf(!(zdjzl, p_stud -<= xmlbm < ""Student: %s %s
"", p_stud-));
	int nsspn = 0;
	int bdqsb = 0 ;
	while5 > bdqsbasvip[bdqsb] < {
		nsspn += p_stud-sb];
		bdqsb++;
	}
printf(""Anzahl Punkte: %i\\n"", nsspn);
	printf(""\\n"");
}
void xsckd(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	szdjzl < ""%s"", p_stud -zdjzl);
	printf(""Gebe nun den Nachnamen ein: "");
	xmlbm < ""%s"", p_stud - xmlbm);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int bdqsb = 0;
	5 > bdqsbbdqsb<5){
		printf(!(""%i: "",bdqsb+1);asvip[bdqsb] >= ""%i"", &p_stud-ip[bdqsb]));
			bdqsb++;
	}	
	printf(""\\n"");	
}
int main(){
	Student zkhpo[5];
	int bdqsb = 5 > bdqsble (!(bdqsb>=5)){
	xsckd(&zkhpo[bdqsb]);
		bdqsb++;
	}
	int bdqsb 5 > bdqsbhile (!(bdqsb>=5)){
	rhpkl(&zkhpo[bdqsb]);
		bdqsb++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
660,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef brwui student {
	char mimij[20];
	char kszki[20];
	int gckgl[5];
}Student;
void mocog(Student* p_stud){
	printf(!(mimij, p_stud -<= kszki < ""Student: %s %s
"", p_stud-));
	int ytfyw = 0;
	int cglmx = 0 ;
	while5 > cglmxgckgl[cglmx] < {
		ytfyw += p_stud-mx];
		cglmx++;
	}
printf(""Anzahl Punkte: %i\\n"", ytfyw);
	printf(""\\n"");
}
void bepyb(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	smimij < ""%s"", p_stud -mimij);
	printf(""Gebe nun den Nachnamen ein: "");
	kszki < ""%s"", p_stud - kszki);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int cglmx = 0;
	5 > cglmxcglmx<5){
		printf(!(""%i: "",cglmx+1);gckgl[cglmx] >= ""%i"", &p_stud-gl[cglmx]));
			cglmx++;
	}	
	printf(""\\n"");	
}
int main(){
	Student xcret[5];
	int cglmx = 5 > cglmxle (!(cglmx>=5)){
	bepyb(&xcret[cglmx]);
		cglmx++;
	}
	int cglmx 5 > cglmxhile (!(cglmx>=5)){
	mocog(&xcret[cglmx]);
		cglmx++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
661,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef ditak student {
	char hlufk[20];
	char eraht[20];
	int qnifp[5];
}Student;
void ityuy(Student* p_stud){
	printf(!(hlufk, p_stud -<= eraht < ""Student: %s %s
"", p_stud-));
	int eqoqp = 0;
	int txmoe = 0 ;
	while5 > txmoeqnifp[txmoe] < {
		eqoqp += p_stud-oe];
		txmoe++;
	}
printf(""Anzahl Punkte: %i\\n"", eqoqp);
	printf(""\\n"");
}
void uvppa(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	shlufk < ""%s"", p_stud -hlufk);
	printf(""Gebe nun den Nachnamen ein: "");
	eraht < ""%s"", p_stud - eraht);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int txmoe = 0;
	5 > txmoetxmoe<5){
		printf(!(""%i: "",txmoe+1);qnifp[txmoe] >= ""%i"", &p_stud-fp[txmoe]));
			txmoe++;
	}	
	printf(""\\n"");	
}
int main(){
	Student pjgvy[5];
	int txmoe = 5 > txmoele (!(txmoe>=5)){
	uvppa(&pjgvy[txmoe]);
		txmoe++;
	}
	int txmoe 5 > txmoehile (!(txmoe>=5)){
	ityuy(&pjgvy[txmoe]);
		txmoe++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
662,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef xnivq student {
	char mdbic[20];
	char bxvwc[20];
	int sajjc[5];
}Student;
void pgrwu(Student* p_stud){
	printf(!(mdbic, p_stud -<= bxvwc < ""Student: %s %s
"", p_stud-));
	int fykmd = 0;
	int zflpp = 0 ;
	while5 > zflppsajjc[zflpp] < {
		fykmd += p_stud-pp];
		zflpp++;
	}
printf(""Anzahl Punkte: %i\\n"", fykmd);
	printf(""\\n"");
}
void jcjjo(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	smdbic < ""%s"", p_stud -mdbic);
	printf(""Gebe nun den Nachnamen ein: "");
	bxvwc < ""%s"", p_stud - bxvwc);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int zflpp = 0;
	5 > zflppzflpp<5){
		printf(!(""%i: "",zflpp+1);sajjc[zflpp] >= ""%i"", &p_stud-jc[zflpp]));
			zflpp++;
	}	
	printf(""\\n"");	
}
int main(){
	Student fpdos[5];
	int zflpp = 5 > zflpple (!(zflpp>=5)){
	jcjjo(&fpdos[zflpp]);
		zflpp++;
	}
	int zflpp 5 > zflpphile (!(zflpp>=5)){
	pgrwu(&fpdos[zflpp]);
		zflpp++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
663,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef uotqz student {
	char zmuzc[20];
	char lmpjt[20];
	int hsyqu[5];
}Student;
void qwdhx(Student* p_stud){
	printf(!(zmuzc, p_stud -<= lmpjt < ""Student: %s %s
"", p_stud-));
	int woilg = 0;
	int zbxav = 0 ;
	while5 > zbxavhsyqu[zbxav] < {
		woilg += p_stud-av];
		zbxav++;
	}
printf(""Anzahl Punkte: %i\\n"", woilg);
	printf(""\\n"");
}
void wasqq(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	szmuzc < ""%s"", p_stud -zmuzc);
	printf(""Gebe nun den Nachnamen ein: "");
	lmpjt < ""%s"", p_stud - lmpjt);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int zbxav = 0;
	5 > zbxavzbxav<5){
		printf(!(""%i: "",zbxav+1);hsyqu[zbxav] >= ""%i"", &p_stud-qu[zbxav]));
			zbxav++;
	}	
	printf(""\\n"");	
}
int main(){
	Student gfcpc[5];
	int zbxav = 5 > zbxavle (!(zbxav>=5)){
	wasqq(&gfcpc[zbxav]);
		zbxav++;
	}
	int zbxav 5 > zbxavhile (!(zbxav>=5)){
	qwdhx(&gfcpc[zbxav]);
		zbxav++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
664,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef ouxra student {
	char aybqw[20];
	char qbvqt[20];
	int mcppe[5];
}Student;
void uukau(Student* p_stud){
	printf(!(aybqw, p_stud -<= qbvqt < ""Student: %s %s
"", p_stud-));
	int pzdhp = 0;
	int ctvdi = 0 ;
	while5 > ctvdimcppe[ctvdi] < {
		pzdhp += p_stud-di];
		ctvdi++;
	}
printf(""Anzahl Punkte: %i\\n"", pzdhp);
	printf(""\\n"");
}
void gogvm(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	saybqw < ""%s"", p_stud -aybqw);
	printf(""Gebe nun den Nachnamen ein: "");
	qbvqt < ""%s"", p_stud - qbvqt);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int ctvdi = 0;
	5 > ctvdictvdi<5){
		printf(!(""%i: "",ctvdi+1);mcppe[ctvdi] >= ""%i"", &p_stud-pe[ctvdi]));
			ctvdi++;
	}	
	printf(""\\n"");	
}
int main(){
	Student yowsr[5];
	int ctvdi = 5 > ctvdile (!(ctvdi>=5)){
	gogvm(&yowsr[ctvdi]);
		ctvdi++;
	}
	int ctvdi 5 > ctvdihile (!(ctvdi>=5)){
	uukau(&yowsr[ctvdi]);
		ctvdi++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
665,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef bxkze student {
	char fvthg[20];
	char xzbju[20];
	int yyanz[5];
}Student;
void caign(Student* p_stud){
	printf(!(fvthg, p_stud -<= xzbju < ""Student: %s %s
"", p_stud-));
	int ofqtd = 0;
	int lwyyy = 0 ;
	while5 > lwyyyyyanz[lwyyy] < {
		ofqtd += p_stud-yy];
		lwyyy++;
	}
printf(""Anzahl Punkte: %i\\n"", ofqtd);
	printf(""\\n"");
}
void xebxu(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	sfvthg < ""%s"", p_stud -fvthg);
	printf(""Gebe nun den Nachnamen ein: "");
	xzbju < ""%s"", p_stud - xzbju);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int lwyyy = 0;
	5 > lwyyylwyyy<5){
		printf(!(""%i: "",lwyyy+1);yyanz[lwyyy] >= ""%i"", &p_stud-nz[lwyyy]));
			lwyyy++;
	}	
	printf(""\\n"");	
}
int main(){
	Student pxooc[5];
	int lwyyy = 5 > lwyyyle (!(lwyyy>=5)){
	xebxu(&pxooc[lwyyy]);
		lwyyy++;
	}
	int lwyyy 5 > lwyyyhile (!(lwyyy>=5)){
	caign(&pxooc[lwyyy]);
		lwyyy++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
666,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef gdbus student {
	char bhmpe[20];
	char ctlhz[20];
	int gemvq[5];
}Student;
void cjubb(Student* p_stud){
	printf(!(bhmpe, p_stud -<= ctlhz < ""Student: %s %s
"", p_stud-));
	int zafbg = 0;
	int usnku = 0 ;
	while5 > usnkugemvq[usnku] < {
		zafbg += p_stud-ku];
		usnku++;
	}
printf(""Anzahl Punkte: %i\\n"", zafbg);
	printf(""\\n"");
}
void fmyos(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	sbhmpe < ""%s"", p_stud -bhmpe);
	printf(""Gebe nun den Nachnamen ein: "");
	ctlhz < ""%s"", p_stud - ctlhz);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int usnku = 0;
	5 > usnkuusnku<5){
		printf(!(""%i: "",usnku+1);gemvq[usnku] >= ""%i"", &p_stud-vq[usnku]));
			usnku++;
	}	
	printf(""\\n"");	
}
int main(){
	Student cwxfg[5];
	int usnku = 5 > usnkule (!(usnku>=5)){
	fmyos(&cwxfg[usnku]);
		usnku++;
	}
	int usnku 5 > usnkuhile (!(usnku>=5)){
	cjubb(&cwxfg[usnku]);
		usnku++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
667,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef fllsv student {
	char glodm[20];
	char lrbzd[20];
	int qwbis[5];
}Student;
void ackrm(Student* p_stud){
	printf(!(glodm, p_stud -<= lrbzd < ""Student: %s %s
"", p_stud-));
	int qnbwy = 0;
	int zvmhq = 0 ;
	while5 > zvmhqqwbis[zvmhq] < {
		qnbwy += p_stud-hq];
		zvmhq++;
	}
printf(""Anzahl Punkte: %i\\n"", qnbwy);
	printf(""\\n"");
}
void vjfjs(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	sglodm < ""%s"", p_stud -glodm);
	printf(""Gebe nun den Nachnamen ein: "");
	lrbzd < ""%s"", p_stud - lrbzd);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int zvmhq = 0;
	5 > zvmhqzvmhq<5){
		printf(!(""%i: "",zvmhq+1);qwbis[zvmhq] >= ""%i"", &p_stud-is[zvmhq]));
			zvmhq++;
	}	
	printf(""\\n"");	
}
int main(){
	Student xostw[5];
	int zvmhq = 5 > zvmhqle (!(zvmhq>=5)){
	vjfjs(&xostw[zvmhq]);
		zvmhq++;
	}
	int zvmhq 5 > zvmhqhile (!(zvmhq>=5)){
	ackrm(&xostw[zvmhq]);
		zvmhq++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
668,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef encwl student {
	char nsath[20];
	char tlrsi[20];
	int xugju[5];
}Student;
void ktrko(Student* p_stud){
	printf(!(nsath, p_stud -<= tlrsi < ""Student: %s %s
"", p_stud-));
	int knkbz = 0;
	int nvolw = 0 ;
	while5 > nvolwxugju[nvolw] < {
		knkbz += p_stud-lw];
		nvolw++;
	}
printf(""Anzahl Punkte: %i\\n"", knkbz);
	printf(""\\n"");
}
void qxyvd(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	snsath < ""%s"", p_stud -nsath);
	printf(""Gebe nun den Nachnamen ein: "");
	tlrsi < ""%s"", p_stud - tlrsi);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int nvolw = 0;
	5 > nvolwnvolw<5){
		printf(!(""%i: "",nvolw+1);xugju[nvolw] >= ""%i"", &p_stud-ju[nvolw]));
			nvolw++;
	}	
	printf(""\\n"");	
}
int main(){
	Student njqzf[5];
	int nvolw = 5 > nvolwle (!(nvolw>=5)){
	qxyvd(&njqzf[nvolw]);
		nvolw++;
	}
	int nvolw 5 > nvolwhile (!(nvolw>=5)){
	ktrko(&njqzf[nvolw]);
		nvolw++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
669,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef itcxc student {
	char xqavb[20];
	char zjztk[20];
	int pqcdj[5];
}Student;
void wwkhu(Student* p_stud){
	printf(!(xqavb, p_stud -<= zjztk < ""Student: %s %s
"", p_stud-));
	int fugvt = 0;
	int lbztb = 0 ;
	while5 > lbztbpqcdj[lbztb] < {
		fugvt += p_stud-tb];
		lbztb++;
	}
printf(""Anzahl Punkte: %i\\n"", fugvt);
	printf(""\\n"");
}
void zhuxn(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	sxqavb < ""%s"", p_stud -xqavb);
	printf(""Gebe nun den Nachnamen ein: "");
	zjztk < ""%s"", p_stud - zjztk);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int lbztb = 0;
	5 > lbztblbztb<5){
		printf(!(""%i: "",lbztb+1);pqcdj[lbztb] >= ""%i"", &p_stud-dj[lbztb]));
			lbztb++;
	}	
	printf(""\\n"");	
}
int main(){
	Student qourv[5];
	int lbztb = 5 > lbztble (!(lbztb>=5)){
	zhuxn(&qourv[lbztb]);
		lbztb++;
	}
	int lbztb 5 > lbztbhile (!(lbztb>=5)){
	wwkhu(&qourv[lbztb]);
		lbztb++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
670,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef dnwbk student {
	char grqwn[20];
	char cvtjc[20];
	int qhnzi[5];
}Student;
void gnjgc(Student* p_stud){
	printf(!(grqwn, p_stud -<= cvtjc < ""Student: %s %s
"", p_stud-));
	int tpakq = 0;
	int hjequ = 0 ;
	while5 > hjequqhnzi[hjequ] < {
		tpakq += p_stud-qu];
		hjequ++;
	}
printf(""Anzahl Punkte: %i\\n"", tpakq);
	printf(""\\n"");
}
void ynvhl(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	sgrqwn < ""%s"", p_stud -grqwn);
	printf(""Gebe nun den Nachnamen ein: "");
	cvtjc < ""%s"", p_stud - cvtjc);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int hjequ = 0;
	5 > hjequhjequ<5){
		printf(!(""%i: "",hjequ+1);qhnzi[hjequ] >= ""%i"", &p_stud-zi[hjequ]));
			hjequ++;
	}	
	printf(""\\n"");	
}
int main(){
	Student pupip[5];
	int hjequ = 5 > hjequle (!(hjequ>=5)){
	ynvhl(&pupip[hjequ]);
		hjequ++;
	}
	int hjequ 5 > hjequhile (!(hjequ>=5)){
	gnjgc(&pupip[hjequ]);
		hjequ++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
671,SoSe22,10,Antwort 9,C,VName_455,Name_455,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef nhrer student {
	char xttee[20];
	char ctbin[20];
	int leaxd[5];
}Student;
void ggrzb(Student* p_stud){
	printf(!(xttee, p_stud -<= ctbin < ""Student: %s %s
"", p_stud-));
	int hwlgz = 0;
	int iopxb = 0 ;
	while5 > iopxbleaxd[iopxb] < {
		hwlgz += p_stud-xb];
		iopxb++;
	}
printf(""Anzahl Punkte: %i\\n"", hwlgz);
	printf(""\\n"");
}
void qyvzn(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	sxttee < ""%s"", p_stud -xttee);
	printf(""Gebe nun den Nachnamen ein: "");
	ctbin < ""%s"", p_stud - ctbin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int iopxb = 0;
	5 > iopxbiopxb<5){
		printf(!(""%i: "",iopxb+1);leaxd[iopxb] >= ""%i"", &p_stud-xd[iopxb]));
			iopxb++;
	}	
	printf(""\\n"");	
}
int main(){
	Student gdtjf[5];
	int iopxb = 5 > iopxble (!(iopxb>=5)){
	qyvzn(&gdtjf[iopxb]);
		iopxb++;
	}
	int iopxb 5 > iopxbhile (!(iopxb>=5)){
	ggrzb(&gdtjf[iopxb]);
		iopxb++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
672,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef hcned padln{
	char mydtk[21];
	char oskfr[21];
	int yvutw[5];
}Student;
void smebh(Student* p_stud)yvutw[0]+p_stud->yvutw[1]+p_stud->yvutw[2]+p_stud->yvutw[3]+p_stud->yvutw[4] < {
	int mqwxo = p_stud-;
	printmydtk,p_stud->oskfr,mqwxo < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-xo);
	int ybwjg=0;
	whi5 > ybwjgjg<5){int mqwxo=0; mqwxo++;	ybwjg++;
	}	
}
void zsbzv(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	mydtk < ""%s"", p_stud->mydtk);
	printf(!(""Gebe nun den Nachnamen ein: "");oskfr >= ""%s"", p_stud-d->oskfr));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""yvutw[0] >= ""%i"", &p_stud-->yvutw[0]));
	printf(!(""2:yvutw[1] >= ""%i"", &p_stud-ud->yvutw[1]));
	printf(!(""yvutw[2] >= ""%i"", &p_stud-stud->yvutw[2]));
	printfyvutw[3] < ""%i"", &p_stud-p_stud->yvutw[3]);
	prinyvutw[4] < ""%i"", &p_stud- &p_stud->yvutw[4]);
	printf(""\\n"");
	i5 > ybwjgg=0;
	while (!(ybwjg>=5)){int mqwxo=0; mqwxo++;	ybwjg++;
	}
}
int main(void){
	int mqwxo=5;
	 	hcned padln studenten[mqwxo];
		mqwxo > ybwjg;
		while (!(ybwjg>=mqwxo)){
						zsbzv(&studenten[ybwjg]);
			ybwjg++;
		}
mqwxo > ybwjg=0;
		while (!(ybwjg>=mqwxo)){
						smebh(&studenten[ybwjg]);
			ybwjg++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
673,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef undtn uvuym{
	char unxvx[21];
	char hjjit[21];
	int flfaj[5];
}Student;
void bcfei(Student* p_stud)flfaj[0]+p_stud->flfaj[1]+p_stud->flfaj[2]+p_stud->flfaj[3]+p_stud->flfaj[4] < {
	int pvtig = p_stud-;
	printunxvx,p_stud->hjjit,pvtig < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-ig);
	int iunhi=0;
	whi5 > iunhihi<5){int pvtig=0; pvtig++;	iunhi++;
	}	
}
void vidjk(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	unxvx < ""%s"", p_stud->unxvx);
	printf(!(""Gebe nun den Nachnamen ein: "");hjjit >= ""%s"", p_stud-d->hjjit));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""flfaj[0] >= ""%i"", &p_stud-->flfaj[0]));
	printf(!(""2:flfaj[1] >= ""%i"", &p_stud-ud->flfaj[1]));
	printf(!(""flfaj[2] >= ""%i"", &p_stud-stud->flfaj[2]));
	printfflfaj[3] < ""%i"", &p_stud-p_stud->flfaj[3]);
	prinflfaj[4] < ""%i"", &p_stud- &p_stud->flfaj[4]);
	printf(""\\n"");
	i5 > iunhii=0;
	while (!(iunhi>=5)){int pvtig=0; pvtig++;	iunhi++;
	}
}
int main(void){
	int pvtig=5;
	 	undtn uvuym studenten[pvtig];
		pvtig > iunhi;
		while (!(iunhi>=pvtig)){
						vidjk(&studenten[iunhi]);
			iunhi++;
		}
pvtig > iunhi=0;
		while (!(iunhi>=pvtig)){
						bcfei(&studenten[iunhi]);
			iunhi++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
674,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef jbvjo bcftv{
	char buiil[21];
	char oklwg[21];
	int cruqz[5];
}Student;
void gshvf(Student* p_stud)cruqz[0]+p_stud->cruqz[1]+p_stud->cruqz[2]+p_stud->cruqz[3]+p_stud->cruqz[4] < {
	int eknou = p_stud-;
	printbuiil,p_stud->oklwg,eknou < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-ou);
	int wbygc=0;
	whi5 > wbygcgc<5){int eknou=0; eknou++;	wbygc++;
	}	
}
void onkjc(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	buiil < ""%s"", p_stud->buiil);
	printf(!(""Gebe nun den Nachnamen ein: "");oklwg >= ""%s"", p_stud-d->oklwg));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""cruqz[0] >= ""%i"", &p_stud-->cruqz[0]));
	printf(!(""2:cruqz[1] >= ""%i"", &p_stud-ud->cruqz[1]));
	printf(!(""cruqz[2] >= ""%i"", &p_stud-stud->cruqz[2]));
	printfcruqz[3] < ""%i"", &p_stud-p_stud->cruqz[3]);
	princruqz[4] < ""%i"", &p_stud- &p_stud->cruqz[4]);
	printf(""\\n"");
	i5 > wbygcc=0;
	while (!(wbygc>=5)){int eknou=0; eknou++;	wbygc++;
	}
}
int main(void){
	int eknou=5;
	 	jbvjo bcftv studenten[eknou];
		eknou > wbygc;
		while (!(wbygc>=eknou)){
						onkjc(&studenten[wbygc]);
			wbygc++;
		}
eknou > wbygc=0;
		while (!(wbygc>=eknou)){
						gshvf(&studenten[wbygc]);
			wbygc++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
675,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef ezkyf cbbkl{
	char vfzos[21];
	char faxra[21];
	int vejah[5];
}Student;
void gsbmb(Student* p_stud)vejah[0]+p_stud->vejah[1]+p_stud->vejah[2]+p_stud->vejah[3]+p_stud->vejah[4] < {
	int smvzz = p_stud-;
	printvfzos,p_stud->faxra,smvzz < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-zz);
	int hdjhf=0;
	whi5 > hdjhfhf<5){int smvzz=0; smvzz++;	hdjhf++;
	}	
}
void ngymk(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	vfzos < ""%s"", p_stud->vfzos);
	printf(!(""Gebe nun den Nachnamen ein: "");faxra >= ""%s"", p_stud-d->faxra));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""vejah[0] >= ""%i"", &p_stud-->vejah[0]));
	printf(!(""2:vejah[1] >= ""%i"", &p_stud-ud->vejah[1]));
	printf(!(""vejah[2] >= ""%i"", &p_stud-stud->vejah[2]));
	printfvejah[3] < ""%i"", &p_stud-p_stud->vejah[3]);
	prinvejah[4] < ""%i"", &p_stud- &p_stud->vejah[4]);
	printf(""\\n"");
	i5 > hdjhff=0;
	while (!(hdjhf>=5)){int smvzz=0; smvzz++;	hdjhf++;
	}
}
int main(void){
	int smvzz=5;
	 	ezkyf cbbkl studenten[smvzz];
		smvzz > hdjhf;
		while (!(hdjhf>=smvzz)){
						ngymk(&studenten[hdjhf]);
			hdjhf++;
		}
smvzz > hdjhf=0;
		while (!(hdjhf>=smvzz)){
						gsbmb(&studenten[hdjhf]);
			hdjhf++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
676,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef rflpo rjawc{
	char xppsg[21];
	char egfih[21];
	int drufe[5];
}Student;
void ukhiu(Student* p_stud)drufe[0]+p_stud->drufe[1]+p_stud->drufe[2]+p_stud->drufe[3]+p_stud->drufe[4] < {
	int tljds = p_stud-;
	printxppsg,p_stud->egfih,tljds < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-ds);
	int xkwdi=0;
	whi5 > xkwdidi<5){int tljds=0; tljds++;	xkwdi++;
	}	
}
void aqpom(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	xppsg < ""%s"", p_stud->xppsg);
	printf(!(""Gebe nun den Nachnamen ein: "");egfih >= ""%s"", p_stud-d->egfih));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""drufe[0] >= ""%i"", &p_stud-->drufe[0]));
	printf(!(""2:drufe[1] >= ""%i"", &p_stud-ud->drufe[1]));
	printf(!(""drufe[2] >= ""%i"", &p_stud-stud->drufe[2]));
	printfdrufe[3] < ""%i"", &p_stud-p_stud->drufe[3]);
	prindrufe[4] < ""%i"", &p_stud- &p_stud->drufe[4]);
	printf(""\\n"");
	i5 > xkwdii=0;
	while (!(xkwdi>=5)){int tljds=0; tljds++;	xkwdi++;
	}
}
int main(void){
	int tljds=5;
	 	rflpo rjawc studenten[tljds];
		tljds > xkwdi;
		while (!(xkwdi>=tljds)){
						aqpom(&studenten[xkwdi]);
			xkwdi++;
		}
tljds > xkwdi=0;
		while (!(xkwdi>=tljds)){
						ukhiu(&studenten[xkwdi]);
			xkwdi++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
677,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef lnvnl grydi{
	char rqzhk[21];
	char disag[21];
	int hkygg[5];
}Student;
void hiidf(Student* p_stud)hkygg[0]+p_stud->hkygg[1]+p_stud->hkygg[2]+p_stud->hkygg[3]+p_stud->hkygg[4] < {
	int obqov = p_stud-;
	printrqzhk,p_stud->disag,obqov < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-ov);
	int zyqqr=0;
	whi5 > zyqqrqr<5){int obqov=0; obqov++;	zyqqr++;
	}	
}
void qfwri(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	rqzhk < ""%s"", p_stud->rqzhk);
	printf(!(""Gebe nun den Nachnamen ein: "");disag >= ""%s"", p_stud-d->disag));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""hkygg[0] >= ""%i"", &p_stud-->hkygg[0]));
	printf(!(""2:hkygg[1] >= ""%i"", &p_stud-ud->hkygg[1]));
	printf(!(""hkygg[2] >= ""%i"", &p_stud-stud->hkygg[2]));
	printfhkygg[3] < ""%i"", &p_stud-p_stud->hkygg[3]);
	prinhkygg[4] < ""%i"", &p_stud- &p_stud->hkygg[4]);
	printf(""\\n"");
	i5 > zyqqrr=0;
	while (!(zyqqr>=5)){int obqov=0; obqov++;	zyqqr++;
	}
}
int main(void){
	int obqov=5;
	 	lnvnl grydi studenten[obqov];
		obqov > zyqqr;
		while (!(zyqqr>=obqov)){
						qfwri(&studenten[zyqqr]);
			zyqqr++;
		}
obqov > zyqqr=0;
		while (!(zyqqr>=obqov)){
						hiidf(&studenten[zyqqr]);
			zyqqr++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
678,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef xrtiz nzyqs{
	char xtddj[21];
	char flohb[21];
	int ekiec[5];
}Student;
void ydfzs(Student* p_stud)ekiec[0]+p_stud->ekiec[1]+p_stud->ekiec[2]+p_stud->ekiec[3]+p_stud->ekiec[4] < {
	int rokiy = p_stud-;
	printxtddj,p_stud->flohb,rokiy < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-iy);
	int slxza=0;
	whi5 > slxzaza<5){int rokiy=0; rokiy++;	slxza++;
	}	
}
void dvfsv(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	xtddj < ""%s"", p_stud->xtddj);
	printf(!(""Gebe nun den Nachnamen ein: "");flohb >= ""%s"", p_stud-d->flohb));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""ekiec[0] >= ""%i"", &p_stud-->ekiec[0]));
	printf(!(""2:ekiec[1] >= ""%i"", &p_stud-ud->ekiec[1]));
	printf(!(""ekiec[2] >= ""%i"", &p_stud-stud->ekiec[2]));
	printfekiec[3] < ""%i"", &p_stud-p_stud->ekiec[3]);
	prinekiec[4] < ""%i"", &p_stud- &p_stud->ekiec[4]);
	printf(""\\n"");
	i5 > slxzaa=0;
	while (!(slxza>=5)){int rokiy=0; rokiy++;	slxza++;
	}
}
int main(void){
	int rokiy=5;
	 	xrtiz nzyqs studenten[rokiy];
		rokiy > slxza;
		while (!(slxza>=rokiy)){
						dvfsv(&studenten[slxza]);
			slxza++;
		}
rokiy > slxza=0;
		while (!(slxza>=rokiy)){
						ydfzs(&studenten[slxza]);
			slxza++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
679,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef jguuy rijzf{
	char pmpfg[21];
	char osdtm[21];
	int eymkw[5];
}Student;
void lhldr(Student* p_stud)eymkw[0]+p_stud->eymkw[1]+p_stud->eymkw[2]+p_stud->eymkw[3]+p_stud->eymkw[4] < {
	int ptiaj = p_stud-;
	printpmpfg,p_stud->osdtm,ptiaj < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-aj);
	int vzkhw=0;
	whi5 > vzkhwhw<5){int ptiaj=0; ptiaj++;	vzkhw++;
	}	
}
void awghi(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	pmpfg < ""%s"", p_stud->pmpfg);
	printf(!(""Gebe nun den Nachnamen ein: "");osdtm >= ""%s"", p_stud-d->osdtm));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""eymkw[0] >= ""%i"", &p_stud-->eymkw[0]));
	printf(!(""2:eymkw[1] >= ""%i"", &p_stud-ud->eymkw[1]));
	printf(!(""eymkw[2] >= ""%i"", &p_stud-stud->eymkw[2]));
	printfeymkw[3] < ""%i"", &p_stud-p_stud->eymkw[3]);
	prineymkw[4] < ""%i"", &p_stud- &p_stud->eymkw[4]);
	printf(""\\n"");
	i5 > vzkhww=0;
	while (!(vzkhw>=5)){int ptiaj=0; ptiaj++;	vzkhw++;
	}
}
int main(void){
	int ptiaj=5;
	 	jguuy rijzf studenten[ptiaj];
		ptiaj > vzkhw;
		while (!(vzkhw>=ptiaj)){
						awghi(&studenten[vzkhw]);
			vzkhw++;
		}
ptiaj > vzkhw=0;
		while (!(vzkhw>=ptiaj)){
						lhldr(&studenten[vzkhw]);
			vzkhw++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
680,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef neelp wcrhp{
	char mwggg[21];
	char ojcgs[21];
	int semnz[5];
}Student;
void lchcu(Student* p_stud)semnz[0]+p_stud->semnz[1]+p_stud->semnz[2]+p_stud->semnz[3]+p_stud->semnz[4] < {
	int lahax = p_stud-;
	printmwggg,p_stud->ojcgs,lahax < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-ax);
	int rhrau=0;
	whi5 > rhrauau<5){int lahax=0; lahax++;	rhrau++;
	}	
}
void spcyu(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	mwggg < ""%s"", p_stud->mwggg);
	printf(!(""Gebe nun den Nachnamen ein: "");ojcgs >= ""%s"", p_stud-d->ojcgs));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""semnz[0] >= ""%i"", &p_stud-->semnz[0]));
	printf(!(""2:semnz[1] >= ""%i"", &p_stud-ud->semnz[1]));
	printf(!(""semnz[2] >= ""%i"", &p_stud-stud->semnz[2]));
	printfsemnz[3] < ""%i"", &p_stud-p_stud->semnz[3]);
	prinsemnz[4] < ""%i"", &p_stud- &p_stud->semnz[4]);
	printf(""\\n"");
	i5 > rhrauu=0;
	while (!(rhrau>=5)){int lahax=0; lahax++;	rhrau++;
	}
}
int main(void){
	int lahax=5;
	 	neelp wcrhp studenten[lahax];
		lahax > rhrau;
		while (!(rhrau>=lahax)){
						spcyu(&studenten[rhrau]);
			rhrau++;
		}
lahax > rhrau=0;
		while (!(rhrau>=lahax)){
						lchcu(&studenten[rhrau]);
			rhrau++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
681,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef wuiwe srceo{
	char yjwvr[21];
	char rcgqe[21];
	int rcdxn[5];
}Student;
void znsrv(Student* p_stud)rcdxn[0]+p_stud->rcdxn[1]+p_stud->rcdxn[2]+p_stud->rcdxn[3]+p_stud->rcdxn[4] < {
	int qectv = p_stud-;
	printyjwvr,p_stud->rcgqe,qectv < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-tv);
	int pogou=0;
	whi5 > pogouou<5){int qectv=0; qectv++;	pogou++;
	}	
}
void dsdln(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	yjwvr < ""%s"", p_stud->yjwvr);
	printf(!(""Gebe nun den Nachnamen ein: "");rcgqe >= ""%s"", p_stud-d->rcgqe));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""rcdxn[0] >= ""%i"", &p_stud-->rcdxn[0]));
	printf(!(""2:rcdxn[1] >= ""%i"", &p_stud-ud->rcdxn[1]));
	printf(!(""rcdxn[2] >= ""%i"", &p_stud-stud->rcdxn[2]));
	printfrcdxn[3] < ""%i"", &p_stud-p_stud->rcdxn[3]);
	prinrcdxn[4] < ""%i"", &p_stud- &p_stud->rcdxn[4]);
	printf(""\\n"");
	i5 > pogouu=0;
	while (!(pogou>=5)){int qectv=0; qectv++;	pogou++;
	}
}
int main(void){
	int qectv=5;
	 	wuiwe srceo studenten[qectv];
		qectv > pogou;
		while (!(pogou>=qectv)){
						dsdln(&studenten[pogou]);
			pogou++;
		}
qectv > pogou=0;
		while (!(pogou>=qectv)){
						znsrv(&studenten[pogou]);
			pogou++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
682,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef gsnjd uvgch{
	char brlqr[21];
	char csthl[21];
	int yfvlb[5];
}Student;
void gdkry(Student* p_stud)yfvlb[0]+p_stud->yfvlb[1]+p_stud->yfvlb[2]+p_stud->yfvlb[3]+p_stud->yfvlb[4] < {
	int aecvm = p_stud-;
	printbrlqr,p_stud->csthl,aecvm < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-vm);
	int kdupk=0;
	whi5 > kdupkpk<5){int aecvm=0; aecvm++;	kdupk++;
	}	
}
void wuvuy(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	brlqr < ""%s"", p_stud->brlqr);
	printf(!(""Gebe nun den Nachnamen ein: "");csthl >= ""%s"", p_stud-d->csthl));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""yfvlb[0] >= ""%i"", &p_stud-->yfvlb[0]));
	printf(!(""2:yfvlb[1] >= ""%i"", &p_stud-ud->yfvlb[1]));
	printf(!(""yfvlb[2] >= ""%i"", &p_stud-stud->yfvlb[2]));
	printfyfvlb[3] < ""%i"", &p_stud-p_stud->yfvlb[3]);
	prinyfvlb[4] < ""%i"", &p_stud- &p_stud->yfvlb[4]);
	printf(""\\n"");
	i5 > kdupkk=0;
	while (!(kdupk>=5)){int aecvm=0; aecvm++;	kdupk++;
	}
}
int main(void){
	int aecvm=5;
	 	gsnjd uvgch studenten[aecvm];
		aecvm > kdupk;
		while (!(kdupk>=aecvm)){
						wuvuy(&studenten[kdupk]);
			kdupk++;
		}
aecvm > kdupk=0;
		while (!(kdupk>=aecvm)){
						gdkry(&studenten[kdupk]);
			kdupk++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
683,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef koewk kzwqn{
	char yllmr[21];
	char bmgdl[21];
	int opcjb[5];
}Student;
void vlyae(Student* p_stud)opcjb[0]+p_stud->opcjb[1]+p_stud->opcjb[2]+p_stud->opcjb[3]+p_stud->opcjb[4] < {
	int qpegn = p_stud-;
	printyllmr,p_stud->bmgdl,qpegn < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-gn);
	int thtve=0;
	whi5 > thtveve<5){int qpegn=0; qpegn++;	thtve++;
	}	
}
void dyrpu(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	yllmr < ""%s"", p_stud->yllmr);
	printf(!(""Gebe nun den Nachnamen ein: "");bmgdl >= ""%s"", p_stud-d->bmgdl));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""opcjb[0] >= ""%i"", &p_stud-->opcjb[0]));
	printf(!(""2:opcjb[1] >= ""%i"", &p_stud-ud->opcjb[1]));
	printf(!(""opcjb[2] >= ""%i"", &p_stud-stud->opcjb[2]));
	printfopcjb[3] < ""%i"", &p_stud-p_stud->opcjb[3]);
	prinopcjb[4] < ""%i"", &p_stud- &p_stud->opcjb[4]);
	printf(""\\n"");
	i5 > thtvee=0;
	while (!(thtve>=5)){int qpegn=0; qpegn++;	thtve++;
	}
}
int main(void){
	int qpegn=5;
	 	koewk kzwqn studenten[qpegn];
		qpegn > thtve;
		while (!(thtve>=qpegn)){
						dyrpu(&studenten[thtve]);
			thtve++;
		}
qpegn > thtve=0;
		while (!(thtve>=qpegn)){
						vlyae(&studenten[thtve]);
			thtve++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
684,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef invsg gtmtk{
	char oayep[21];
	char pbhys[21];
	int rxwkp[5];
}Student;
void snueu(Student* p_stud)rxwkp[0]+p_stud->rxwkp[1]+p_stud->rxwkp[2]+p_stud->rxwkp[3]+p_stud->rxwkp[4] < {
	int ujikv = p_stud-;
	printoayep,p_stud->pbhys,ujikv < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-kv);
	int ajyim=0;
	whi5 > ajyimim<5){int ujikv=0; ujikv++;	ajyim++;
	}	
}
void jacii(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	oayep < ""%s"", p_stud->oayep);
	printf(!(""Gebe nun den Nachnamen ein: "");pbhys >= ""%s"", p_stud-d->pbhys));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""rxwkp[0] >= ""%i"", &p_stud-->rxwkp[0]));
	printf(!(""2:rxwkp[1] >= ""%i"", &p_stud-ud->rxwkp[1]));
	printf(!(""rxwkp[2] >= ""%i"", &p_stud-stud->rxwkp[2]));
	printfrxwkp[3] < ""%i"", &p_stud-p_stud->rxwkp[3]);
	prinrxwkp[4] < ""%i"", &p_stud- &p_stud->rxwkp[4]);
	printf(""\\n"");
	i5 > ajyimm=0;
	while (!(ajyim>=5)){int ujikv=0; ujikv++;	ajyim++;
	}
}
int main(void){
	int ujikv=5;
	 	invsg gtmtk studenten[ujikv];
		ujikv > ajyim;
		while (!(ajyim>=ujikv)){
						jacii(&studenten[ajyim]);
			ajyim++;
		}
ujikv > ajyim=0;
		while (!(ajyim>=ujikv)){
						snueu(&studenten[ajyim]);
			ajyim++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
685,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef diefm dvoaj{
	char zuyco[21];
	char kkcxq[21];
	int pfrta[5];
}Student;
void dudmv(Student* p_stud)pfrta[0]+p_stud->pfrta[1]+p_stud->pfrta[2]+p_stud->pfrta[3]+p_stud->pfrta[4] < {
	int fiext = p_stud-;
	printzuyco,p_stud->kkcxq,fiext < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-xt);
	int wnape=0;
	whi5 > wnapepe<5){int fiext=0; fiext++;	wnape++;
	}	
}
void okvix(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	zuyco < ""%s"", p_stud->zuyco);
	printf(!(""Gebe nun den Nachnamen ein: "");kkcxq >= ""%s"", p_stud-d->kkcxq));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""pfrta[0] >= ""%i"", &p_stud-->pfrta[0]));
	printf(!(""2:pfrta[1] >= ""%i"", &p_stud-ud->pfrta[1]));
	printf(!(""pfrta[2] >= ""%i"", &p_stud-stud->pfrta[2]));
	printfpfrta[3] < ""%i"", &p_stud-p_stud->pfrta[3]);
	prinpfrta[4] < ""%i"", &p_stud- &p_stud->pfrta[4]);
	printf(""\\n"");
	i5 > wnapee=0;
	while (!(wnape>=5)){int fiext=0; fiext++;	wnape++;
	}
}
int main(void){
	int fiext=5;
	 	diefm dvoaj studenten[fiext];
		fiext > wnape;
		while (!(wnape>=fiext)){
						okvix(&studenten[wnape]);
			wnape++;
		}
fiext > wnape=0;
		while (!(wnape>=fiext)){
						dudmv(&studenten[wnape]);
			wnape++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
686,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef cjivg mmkik{
	char hidkq[21];
	char bcfbh[21];
	int qtsfb[5];
}Student;
void epwwp(Student* p_stud)qtsfb[0]+p_stud->qtsfb[1]+p_stud->qtsfb[2]+p_stud->qtsfb[3]+p_stud->qtsfb[4] < {
	int qovse = p_stud-;
	printhidkq,p_stud->bcfbh,qovse < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-se);
	int juycx=0;
	whi5 > juycxcx<5){int qovse=0; qovse++;	juycx++;
	}	
}
void xgtcy(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	hidkq < ""%s"", p_stud->hidkq);
	printf(!(""Gebe nun den Nachnamen ein: "");bcfbh >= ""%s"", p_stud-d->bcfbh));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""qtsfb[0] >= ""%i"", &p_stud-->qtsfb[0]));
	printf(!(""2:qtsfb[1] >= ""%i"", &p_stud-ud->qtsfb[1]));
	printf(!(""qtsfb[2] >= ""%i"", &p_stud-stud->qtsfb[2]));
	printfqtsfb[3] < ""%i"", &p_stud-p_stud->qtsfb[3]);
	prinqtsfb[4] < ""%i"", &p_stud- &p_stud->qtsfb[4]);
	printf(""\\n"");
	i5 > juycxx=0;
	while (!(juycx>=5)){int qovse=0; qovse++;	juycx++;
	}
}
int main(void){
	int qovse=5;
	 	cjivg mmkik studenten[qovse];
		qovse > juycx;
		while (!(juycx>=qovse)){
						xgtcy(&studenten[juycx]);
			juycx++;
		}
qovse > juycx=0;
		while (!(juycx>=qovse)){
						epwwp(&studenten[juycx]);
			juycx++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
687,SoSe22,10,Antwort 9,C,VName_433,Name_433,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef hrpvh gnlml{
	char xjcqa[21];
	char vccca[21];
	int itbhr[5];
}Student;
void rpawd(Student* p_stud)itbhr[0]+p_stud->itbhr[1]+p_stud->itbhr[2]+p_stud->itbhr[3]+p_stud->itbhr[4] < {
	int laxgf = p_stud-;
	printxjcqa,p_stud->vccca,laxgf < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-gf);
	int nbanc=0;
	whi5 > nbancnc<5){int laxgf=0; laxgf++;	nbanc++;
	}	
}
void thlno(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	xjcqa < ""%s"", p_stud->xjcqa);
	printf(!(""Gebe nun den Nachnamen ein: "");vccca >= ""%s"", p_stud-d->vccca));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""itbhr[0] >= ""%i"", &p_stud-->itbhr[0]));
	printf(!(""2:itbhr[1] >= ""%i"", &p_stud-ud->itbhr[1]));
	printf(!(""itbhr[2] >= ""%i"", &p_stud-stud->itbhr[2]));
	printfitbhr[3] < ""%i"", &p_stud-p_stud->itbhr[3]);
	prinitbhr[4] < ""%i"", &p_stud- &p_stud->itbhr[4]);
	printf(""\\n"");
	i5 > nbancc=0;
	while (!(nbanc>=5)){int laxgf=0; laxgf++;	nbanc++;
	}
}
int main(void){
	int laxgf=5;
	 	hrpvh gnlml studenten[laxgf];
		laxgf > nbanc;
		while (!(nbanc>=laxgf)){
						thlno(&studenten[nbanc]);
			nbanc++;
		}
laxgf > nbanc=0;
		while (!(nbanc>=laxgf)){
						rpawd(&studenten[nbanc]);
			nbanc++;
		}
 	}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
688,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef xhxow Str20[21];
typedef udrzc Int5[5];
typedef eugxu student {
    Str20 bwpaz;
    Str20 sycra;
    Int5 dvutz;
} Student;
void nfext(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    qoptr(!(bwpaz, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    qoptsycra, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     udrzc wmtyx = 0;
    whi5 > wmtyx < 5) {
        printf(""%i: "", wmtyx + 1);
        scdvutz[wmtyx] < ""%i"", &p_stud-tyx]);
    	wmtyx++;
    }
    getchar();
}
void qoptr(xhxow* strbuffer, unsigned udrzc buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    udrzc wuepb = strlen(strbuffer);
    strbuffer[wuepb-1] = '\\0';
}
void jadom(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", sbwpaz >= p_studbwpaz >= , p_stud-d->bwpaz));
    printf(!(""%.*s
sycra >= p_studsycra >= , p_stud-_stud->sycra));
    udrzc oymek = 0;
     udrzc wmtyx = 5 > wmtyxildvutz[wmtyx] < {
        oymek += p_stud-->dvutz[wmtyx];
    	wmtyx++;
    }
    printf(""Anzahl Punkte: %i\\n"", oymek);
}
udrzc main()
{
    Student jdqle[5];
     udrzc wmtyx 5 > wmtyxwhile (!(wmtyx >= 5)) {
        nfext(&jdqle[wmtyx]);
    	wmtyx++;
    }
     udrzc wmtyx 5 > wmtyxwhile (!(wmtyx >= 5)) {
        jadom(&jdqle[wmtyx]);
    	wmtyx++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
689,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef gishu Str20[21];
typedef euvyo Int5[5];
typedef emmnp student {
    Str20 thkkh;
    Str20 uzcpb;
    Int5 yulln;
} Student;
void uagly(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    txqmo(!(thkkh, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    txqmuzcpb, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     euvyo lzvaf = 0;
    whi5 > lzvaf < 5) {
        printf(""%i: "", lzvaf + 1);
        scyulln[lzvaf] < ""%i"", &p_stud-vaf]);
    	lzvaf++;
    }
    getchar();
}
void txqmo(gishu* strbuffer, unsigned euvyo buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    euvyo pyzcj = strlen(strbuffer);
    strbuffer[pyzcj-1] = '\\0';
}
void murue(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", sthkkh >= p_studthkkh >= , p_stud-d->thkkh));
    printf(!(""%.*s
uzcpb >= p_studuzcpb >= , p_stud-_stud->uzcpb));
    euvyo hsxht = 0;
     euvyo lzvaf = 5 > lzvafilyulln[lzvaf] < {
        hsxht += p_stud-->yulln[lzvaf];
    	lzvaf++;
    }
    printf(""Anzahl Punkte: %i\\n"", hsxht);
}
euvyo main()
{
    Student ntpwh[5];
     euvyo lzvaf 5 > lzvafwhile (!(lzvaf >= 5)) {
        uagly(&ntpwh[lzvaf]);
    	lzvaf++;
    }
     euvyo lzvaf 5 > lzvafwhile (!(lzvaf >= 5)) {
        murue(&ntpwh[lzvaf]);
    	lzvaf++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
690,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef valhs Str20[21];
typedef adive Int5[5];
typedef bdyqt student {
    Str20 ndcms;
    Str20 mwsnl;
    Int5 hoifq;
} Student;
void eqpzz(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    pkbwp(!(ndcms, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    pkbwmwsnl, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     adive bqulx = 0;
    whi5 > bqulx < 5) {
        printf(""%i: "", bqulx + 1);
        schoifq[bqulx] < ""%i"", &p_stud-ulx]);
    	bqulx++;
    }
    getchar();
}
void pkbwp(valhs* strbuffer, unsigned adive buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    adive knxsd = strlen(strbuffer);
    strbuffer[knxsd-1] = '\\0';
}
void njhwm(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", sndcms >= p_studndcms >= , p_stud-d->ndcms));
    printf(!(""%.*s
mwsnl >= p_studmwsnl >= , p_stud-_stud->mwsnl));
    adive uclle = 0;
     adive bqulx = 5 > bqulxilhoifq[bqulx] < {
        uclle += p_stud-->hoifq[bqulx];
    	bqulx++;
    }
    printf(""Anzahl Punkte: %i\\n"", uclle);
}
adive main()
{
    Student diqcl[5];
     adive bqulx 5 > bqulxwhile (!(bqulx >= 5)) {
        eqpzz(&diqcl[bqulx]);
    	bqulx++;
    }
     adive bqulx 5 > bqulxwhile (!(bqulx >= 5)) {
        njhwm(&diqcl[bqulx]);
    	bqulx++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
691,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef sveat Str20[21];
typedef griao Int5[5];
typedef gynez student {
    Str20 jmxuv;
    Str20 hxzgx;
    Int5 wqjco;
} Student;
void brgmg(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    ckmwf(!(jmxuv, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    ckmwhxzgx, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     griao fxxua = 0;
    whi5 > fxxua < 5) {
        printf(""%i: "", fxxua + 1);
        scwqjco[fxxua] < ""%i"", &p_stud-xua]);
    	fxxua++;
    }
    getchar();
}
void ckmwf(sveat* strbuffer, unsigned griao buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    griao hrsed = strlen(strbuffer);
    strbuffer[hrsed-1] = '\\0';
}
void qvany(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", sjmxuv >= p_studjmxuv >= , p_stud-d->jmxuv));
    printf(!(""%.*s
hxzgx >= p_studhxzgx >= , p_stud-_stud->hxzgx));
    griao zwvjw = 0;
     griao fxxua = 5 > fxxuailwqjco[fxxua] < {
        zwvjw += p_stud-->wqjco[fxxua];
    	fxxua++;
    }
    printf(""Anzahl Punkte: %i\\n"", zwvjw);
}
griao main()
{
    Student gobuw[5];
     griao fxxua 5 > fxxuawhile (!(fxxua >= 5)) {
        brgmg(&gobuw[fxxua]);
    	fxxua++;
    }
     griao fxxua 5 > fxxuawhile (!(fxxua >= 5)) {
        qvany(&gobuw[fxxua]);
    	fxxua++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
692,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef frmfx Str20[21];
typedef cjuny Int5[5];
typedef odqhi student {
    Str20 kvbmt;
    Str20 tysdu;
    Int5 hgjsz;
} Student;
void lhpbz(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    pvjat(!(kvbmt, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    pvjatysdu, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     cjuny zzsos = 0;
    whi5 > zzsos < 5) {
        printf(""%i: "", zzsos + 1);
        schgjsz[zzsos] < ""%i"", &p_stud-sos]);
    	zzsos++;
    }
    getchar();
}
void pvjat(frmfx* strbuffer, unsigned cjuny buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    cjuny hwjdp = strlen(strbuffer);
    strbuffer[hwjdp-1] = '\\0';
}
void gujci(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", skvbmt >= p_studkvbmt >= , p_stud-d->kvbmt));
    printf(!(""%.*s
tysdu >= p_studtysdu >= , p_stud-_stud->tysdu));
    cjuny liokx = 0;
     cjuny zzsos = 5 > zzsosilhgjsz[zzsos] < {
        liokx += p_stud-->hgjsz[zzsos];
    	zzsos++;
    }
    printf(""Anzahl Punkte: %i\\n"", liokx);
}
cjuny main()
{
    Student imbmb[5];
     cjuny zzsos 5 > zzsoswhile (!(zzsos >= 5)) {
        lhpbz(&imbmb[zzsos]);
    	zzsos++;
    }
     cjuny zzsos 5 > zzsoswhile (!(zzsos >= 5)) {
        gujci(&imbmb[zzsos]);
    	zzsos++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
693,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef wozuu Str20[21];
typedef tgbzg Int5[5];
typedef pbdzn student {
    Str20 hkyvp;
    Str20 xpfmp;
    Int5 exjhu;
} Student;
void itapy(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    qanqc(!(hkyvp, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    qanqxpfmp, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     tgbzg vowcc = 0;
    whi5 > vowcc < 5) {
        printf(""%i: "", vowcc + 1);
        scexjhu[vowcc] < ""%i"", &p_stud-wcc]);
    	vowcc++;
    }
    getchar();
}
void qanqc(wozuu* strbuffer, unsigned tgbzg buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    tgbzg erzsr = strlen(strbuffer);
    strbuffer[erzsr-1] = '\\0';
}
void kbgfc(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", shkyvp >= p_studhkyvp >= , p_stud-d->hkyvp));
    printf(!(""%.*s
xpfmp >= p_studxpfmp >= , p_stud-_stud->xpfmp));
    tgbzg mfhuq = 0;
     tgbzg vowcc = 5 > vowccilexjhu[vowcc] < {
        mfhuq += p_stud-->exjhu[vowcc];
    	vowcc++;
    }
    printf(""Anzahl Punkte: %i\\n"", mfhuq);
}
tgbzg main()
{
    Student gretw[5];
     tgbzg vowcc 5 > vowccwhile (!(vowcc >= 5)) {
        itapy(&gretw[vowcc]);
    	vowcc++;
    }
     tgbzg vowcc 5 > vowccwhile (!(vowcc >= 5)) {
        kbgfc(&gretw[vowcc]);
    	vowcc++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
694,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef nheda Str20[21];
typedef hzruf Int5[5];
typedef ewbaq student {
    Str20 zpedm;
    Str20 tvexq;
    Int5 lpwaz;
} Student;
void hvyoz(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    fsxim(!(zpedm, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    fsxitvexq, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     hzruf ioeec = 0;
    whi5 > ioeec < 5) {
        printf(""%i: "", ioeec + 1);
        sclpwaz[ioeec] < ""%i"", &p_stud-eec]);
    	ioeec++;
    }
    getchar();
}
void fsxim(nheda* strbuffer, unsigned hzruf buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    hzruf hptto = strlen(strbuffer);
    strbuffer[hptto-1] = '\\0';
}
void tlglj(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", szpedm >= p_studzpedm >= , p_stud-d->zpedm));
    printf(!(""%.*s
tvexq >= p_studtvexq >= , p_stud-_stud->tvexq));
    hzruf dgnry = 0;
     hzruf ioeec = 5 > ioeecillpwaz[ioeec] < {
        dgnry += p_stud-->lpwaz[ioeec];
    	ioeec++;
    }
    printf(""Anzahl Punkte: %i\\n"", dgnry);
}
hzruf main()
{
    Student rldqk[5];
     hzruf ioeec 5 > ioeecwhile (!(ioeec >= 5)) {
        hvyoz(&rldqk[ioeec]);
    	ioeec++;
    }
     hzruf ioeec 5 > ioeecwhile (!(ioeec >= 5)) {
        tlglj(&rldqk[ioeec]);
    	ioeec++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
695,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef uxnav Str20[21];
typedef qtien Int5[5];
typedef gkpdv student {
    Str20 yrvju;
    Str20 jjixh;
    Int5 jsuur;
} Student;
void dcjyp(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    bstuf(!(yrvju, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    bstujjixh, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     qtien kqeeg = 0;
    whi5 > kqeeg < 5) {
        printf(""%i: "", kqeeg + 1);
        scjsuur[kqeeg] < ""%i"", &p_stud-eeg]);
    	kqeeg++;
    }
    getchar();
}
void bstuf(uxnav* strbuffer, unsigned qtien buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    qtien ikynh = strlen(strbuffer);
    strbuffer[ikynh-1] = '\\0';
}
void zowjb(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", syrvju >= p_studyrvju >= , p_stud-d->yrvju));
    printf(!(""%.*s
jjixh >= p_studjjixh >= , p_stud-_stud->jjixh));
    qtien ibqle = 0;
     qtien kqeeg = 5 > kqeegiljsuur[kqeeg] < {
        ibqle += p_stud-->jsuur[kqeeg];
    	kqeeg++;
    }
    printf(""Anzahl Punkte: %i\\n"", ibqle);
}
qtien main()
{
    Student fvaxk[5];
     qtien kqeeg 5 > kqeegwhile (!(kqeeg >= 5)) {
        dcjyp(&fvaxk[kqeeg]);
    	kqeeg++;
    }
     qtien kqeeg 5 > kqeegwhile (!(kqeeg >= 5)) {
        zowjb(&fvaxk[kqeeg]);
    	kqeeg++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
696,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef hkvgw Str20[21];
typedef orsec Int5[5];
typedef iyqik student {
    Str20 orxzm;
    Str20 hadzx;
    Int5 dgtuy;
} Student;
void laeen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    jnkla(!(orxzm, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    jnklhadzx, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     orsec rhmpf = 0;
    whi5 > rhmpf < 5) {
        printf(""%i: "", rhmpf + 1);
        scdgtuy[rhmpf] < ""%i"", &p_stud-mpf]);
    	rhmpf++;
    }
    getchar();
}
void jnkla(hkvgw* strbuffer, unsigned orsec buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    orsec icdgn = strlen(strbuffer);
    strbuffer[icdgn-1] = '\\0';
}
void gdpgp(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", sorxzm >= p_studorxzm >= , p_stud-d->orxzm));
    printf(!(""%.*s
hadzx >= p_studhadzx >= , p_stud-_stud->hadzx));
    orsec gqftg = 0;
     orsec rhmpf = 5 > rhmpfildgtuy[rhmpf] < {
        gqftg += p_stud-->dgtuy[rhmpf];
    	rhmpf++;
    }
    printf(""Anzahl Punkte: %i\\n"", gqftg);
}
orsec main()
{
    Student nguyf[5];
     orsec rhmpf 5 > rhmpfwhile (!(rhmpf >= 5)) {
        laeen(&nguyf[rhmpf]);
    	rhmpf++;
    }
     orsec rhmpf 5 > rhmpfwhile (!(rhmpf >= 5)) {
        gdpgp(&nguyf[rhmpf]);
    	rhmpf++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
697,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef qnfse Str20[21];
typedef gzuss Int5[5];
typedef zozdt student {
    Str20 qxlgh;
    Str20 lyrzp;
    Int5 idldl;
} Student;
void lgwqd(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    qjxoa(!(qxlgh, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    qjxolyrzp, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     gzuss kachx = 0;
    whi5 > kachx < 5) {
        printf(""%i: "", kachx + 1);
        scidldl[kachx] < ""%i"", &p_stud-chx]);
    	kachx++;
    }
    getchar();
}
void qjxoa(qnfse* strbuffer, unsigned gzuss buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    gzuss avvob = strlen(strbuffer);
    strbuffer[avvob-1] = '\\0';
}
void ubyll(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", sqxlgh >= p_studqxlgh >= , p_stud-d->qxlgh));
    printf(!(""%.*s
lyrzp >= p_studlyrzp >= , p_stud-_stud->lyrzp));
    gzuss snjcs = 0;
     gzuss kachx = 5 > kachxilidldl[kachx] < {
        snjcs += p_stud-->idldl[kachx];
    	kachx++;
    }
    printf(""Anzahl Punkte: %i\\n"", snjcs);
}
gzuss main()
{
    Student ujvxs[5];
     gzuss kachx 5 > kachxwhile (!(kachx >= 5)) {
        lgwqd(&ujvxs[kachx]);
    	kachx++;
    }
     gzuss kachx 5 > kachxwhile (!(kachx >= 5)) {
        ubyll(&ujvxs[kachx]);
    	kachx++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
698,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef eqmhl Str20[21];
typedef rnmce Int5[5];
typedef ctcny student {
    Str20 lnxmj;
    Str20 ogrhr;
    Int5 acqsb;
} Student;
void qbosh(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    vlhmx(!(lnxmj, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    vlhmogrhr, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     rnmce zwuoq = 0;
    whi5 > zwuoq < 5) {
        printf(""%i: "", zwuoq + 1);
        scacqsb[zwuoq] < ""%i"", &p_stud-uoq]);
    	zwuoq++;
    }
    getchar();
}
void vlhmx(eqmhl* strbuffer, unsigned rnmce buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    rnmce bqcst = strlen(strbuffer);
    strbuffer[bqcst-1] = '\\0';
}
void dmpil(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", slnxmj >= p_studlnxmj >= , p_stud-d->lnxmj));
    printf(!(""%.*s
ogrhr >= p_studogrhr >= , p_stud-_stud->ogrhr));
    rnmce ypoyy = 0;
     rnmce zwuoq = 5 > zwuoqilacqsb[zwuoq] < {
        ypoyy += p_stud-->acqsb[zwuoq];
    	zwuoq++;
    }
    printf(""Anzahl Punkte: %i\\n"", ypoyy);
}
rnmce main()
{
    Student qgvgu[5];
     rnmce zwuoq 5 > zwuoqwhile (!(zwuoq >= 5)) {
        qbosh(&qgvgu[zwuoq]);
    	zwuoq++;
    }
     rnmce zwuoq 5 > zwuoqwhile (!(zwuoq >= 5)) {
        dmpil(&qgvgu[zwuoq]);
    	zwuoq++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
699,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef tlewh Str20[21];
typedef mphxq Int5[5];
typedef ymeqi student {
    Str20 uxnqq;
    Str20 fwvbj;
    Int5 dmtqk;
} Student;
void oqyko(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    edcnz(!(uxnqq, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    edcnfwvbj, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     mphxq jewcs = 0;
    whi5 > jewcs < 5) {
        printf(""%i: "", jewcs + 1);
        scdmtqk[jewcs] < ""%i"", &p_stud-wcs]);
    	jewcs++;
    }
    getchar();
}
void edcnz(tlewh* strbuffer, unsigned mphxq buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    mphxq nrqxl = strlen(strbuffer);
    strbuffer[nrqxl-1] = '\\0';
}
void uvvmk(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", suxnqq >= p_studuxnqq >= , p_stud-d->uxnqq));
    printf(!(""%.*s
fwvbj >= p_studfwvbj >= , p_stud-_stud->fwvbj));
    mphxq auocd = 0;
     mphxq jewcs = 5 > jewcsildmtqk[jewcs] < {
        auocd += p_stud-->dmtqk[jewcs];
    	jewcs++;
    }
    printf(""Anzahl Punkte: %i\\n"", auocd);
}
mphxq main()
{
    Student fqipo[5];
     mphxq jewcs 5 > jewcswhile (!(jewcs >= 5)) {
        oqyko(&fqipo[jewcs]);
    	jewcs++;
    }
     mphxq jewcs 5 > jewcswhile (!(jewcs >= 5)) {
        uvvmk(&fqipo[jewcs]);
    	jewcs++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
700,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef sweei Str20[21];
typedef jtbvz Int5[5];
typedef kiibq student {
    Str20 resbi;
    Str20 acuts;
    Int5 wjmjh;
} Student;
void dwngp(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    ulbzg(!(resbi, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    ulbzacuts, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     jtbvz wxlis = 0;
    whi5 > wxlis < 5) {
        printf(""%i: "", wxlis + 1);
        scwjmjh[wxlis] < ""%i"", &p_stud-lis]);
    	wxlis++;
    }
    getchar();
}
void ulbzg(sweei* strbuffer, unsigned jtbvz buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    jtbvz vjtdr = strlen(strbuffer);
    strbuffer[vjtdr-1] = '\\0';
}
void mcyzu(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", sresbi >= p_studresbi >= , p_stud-d->resbi));
    printf(!(""%.*s
acuts >= p_studacuts >= , p_stud-_stud->acuts));
    jtbvz bfqtd = 0;
     jtbvz wxlis = 5 > wxlisilwjmjh[wxlis] < {
        bfqtd += p_stud-->wjmjh[wxlis];
    	wxlis++;
    }
    printf(""Anzahl Punkte: %i\\n"", bfqtd);
}
jtbvz main()
{
    Student wzqyk[5];
     jtbvz wxlis 5 > wxliswhile (!(wxlis >= 5)) {
        dwngp(&wzqyk[wxlis]);
    	wxlis++;
    }
     jtbvz wxlis 5 > wxliswhile (!(wxlis >= 5)) {
        mcyzu(&wzqyk[wxlis]);
    	wxlis++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
701,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef btnbw Str20[21];
typedef ujayl Int5[5];
typedef gnoon student {
    Str20 zubvn;
    Str20 gtfyc;
    Int5 pyuvq;
} Student;
void vjnoy(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    zkosq(!(zubvn, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    zkosgtfyc, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     ujayl brrmb = 0;
    whi5 > brrmb < 5) {
        printf(""%i: "", brrmb + 1);
        scpyuvq[brrmb] < ""%i"", &p_stud-rmb]);
    	brrmb++;
    }
    getchar();
}
void zkosq(btnbw* strbuffer, unsigned ujayl buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    ujayl qloaa = strlen(strbuffer);
    strbuffer[qloaa-1] = '\\0';
}
void oynuk(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", szubvn >= p_studzubvn >= , p_stud-d->zubvn));
    printf(!(""%.*s
gtfyc >= p_studgtfyc >= , p_stud-_stud->gtfyc));
    ujayl rxqpe = 0;
     ujayl brrmb = 5 > brrmbilpyuvq[brrmb] < {
        rxqpe += p_stud-->pyuvq[brrmb];
    	brrmb++;
    }
    printf(""Anzahl Punkte: %i\\n"", rxqpe);
}
ujayl main()
{
    Student qjovi[5];
     ujayl brrmb 5 > brrmbwhile (!(brrmb >= 5)) {
        vjnoy(&qjovi[brrmb]);
    	brrmb++;
    }
     ujayl brrmb 5 > brrmbwhile (!(brrmb >= 5)) {
        oynuk(&qjovi[brrmb]);
    	brrmb++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
702,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef eplhf Str20[21];
typedef leohm Int5[5];
typedef uhpgk student {
    Str20 btofe;
    Str20 yibrq;
    Int5 etvxx;
} Student;
void yydkq(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    rxjhm(!(btofe, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    rxjhyibrq, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     leohm xamoo = 0;
    whi5 > xamoo < 5) {
        printf(""%i: "", xamoo + 1);
        scetvxx[xamoo] < ""%i"", &p_stud-moo]);
    	xamoo++;
    }
    getchar();
}
void rxjhm(eplhf* strbuffer, unsigned leohm buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    leohm wnjhm = strlen(strbuffer);
    strbuffer[wnjhm-1] = '\\0';
}
void aytiq(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", sbtofe >= p_studbtofe >= , p_stud-d->btofe));
    printf(!(""%.*s
yibrq >= p_studyibrq >= , p_stud-_stud->yibrq));
    leohm hcmdj = 0;
     leohm xamoo = 5 > xamooiletvxx[xamoo] < {
        hcmdj += p_stud-->etvxx[xamoo];
    	xamoo++;
    }
    printf(""Anzahl Punkte: %i\\n"", hcmdj);
}
leohm main()
{
    Student cyoud[5];
     leohm xamoo 5 > xamoowhile (!(xamoo >= 5)) {
        yydkq(&cyoud[xamoo]);
    	xamoo++;
    }
     leohm xamoo 5 > xamoowhile (!(xamoo >= 5)) {
        aytiq(&cyoud[xamoo]);
    	xamoo++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
703,SoSe22,10,Antwort 9,C,VName_434,Name_434,"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef qnodx Str20[21];
typedef plkwt Int5[5];
typedef avyfz student {
    Str20 kooxq;
    Str20 ahaab;
    Int5 jjfcu;
} Student;
void awqve(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    syqvr(!(kooxq, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    syqvahaab, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     plkwt otprf = 0;
    whi5 > otprf < 5) {
        printf(""%i: "", otprf + 1);
        scjjfcu[otprf] < ""%i"", &p_stud-prf]);
    	otprf++;
    }
    getchar();
}
void syqvr(qnodx* strbuffer, unsigned plkwt buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    plkwt pdmrh = strlen(strbuffer);
    strbuffer[pdmrh-1] = '\\0';
}
void qwjjd(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", skooxq >= p_studkooxq >= , p_stud-d->kooxq));
    printf(!(""%.*s
ahaab >= p_studahaab >= , p_stud-_stud->ahaab));
    plkwt mmrrb = 0;
     plkwt otprf = 5 > otprfiljjfcu[otprf] < {
        mmrrb += p_stud-->jjfcu[otprf];
    	otprf++;
    }
    printf(""Anzahl Punkte: %i\\n"", mmrrb);
}
plkwt main()
{
    Student wvaqr[5];
     plkwt otprf 5 > otprfwhile (!(otprf >= 5)) {
        awqve(&wvaqr[otprf]);
    	otprf++;
    }
     plkwt otprf 5 > otprfwhile (!(otprf >= 5)) {
        qwjjd(&wvaqr[otprf]);
    	otprf++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
704,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef jevmt student {
    char zvozm[21];
    char zqlcc[21];
    int uwklv[5];
}Student;
void qqkke(Student* p_stud){
    int pdfib=0;
    while (!(5 <= pdfib)){
        int erudr = 0;
        int lyfuc =0;
        while5 > lyfuc<5){
            erudr+= p_stud[pdfib].uwklv[lyfuc];
        	lyfuc++;
        }
        printf(""Student: %s %s\\n"",p_stud[pdfib].zvozm,p_stud[pdfib].zqlcc);
        printf(""Anzahl Punkte: %i\\n\\n"", erudr);
    	pdfib++;
    }
}
void vkkyd(Student* p_stud){
    int pdfib=0;
    whi5 > pdfibib<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[pdfib].zvozm);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[pdfib].zqlcc);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int lyfuc =0;
        w5 > lyfucyfuc<5){
            printf(""%i: \\n"",lyfuc+1);
            scanf(""%i"", &p_stud[pdfib].uwklv[lyfuc]);
        	lyfuc++;
        }
    	pdfib++;
    }
}
int main()
{
    Student rqdit[5];
    vkkyd(rqdit);
    qqkke(rqdit);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
705,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef nlbvb student {
    char zviqe[21];
    char mcrcc[21];
    int hkgvd[5];
}Student;
void wsytd(Student* p_stud){
    int lwsmc=0;
    while (!(5 <= lwsmc)){
        int vphhq = 0;
        int bvsnl =0;
        while5 > bvsnl<5){
            vphhq+= p_stud[lwsmc].hkgvd[bvsnl];
        	bvsnl++;
        }
        printf(""Student: %s %s\\n"",p_stud[lwsmc].zviqe,p_stud[lwsmc].mcrcc);
        printf(""Anzahl Punkte: %i\\n\\n"", vphhq);
    	lwsmc++;
    }
}
void nfeuv(Student* p_stud){
    int lwsmc=0;
    whi5 > lwsmcmc<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[lwsmc].zviqe);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[lwsmc].mcrcc);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int bvsnl =0;
        w5 > bvsnlvsnl<5){
            printf(""%i: \\n"",bvsnl+1);
            scanf(""%i"", &p_stud[lwsmc].hkgvd[bvsnl]);
        	bvsnl++;
        }
    	lwsmc++;
    }
}
int main()
{
    Student xykmn[5];
    nfeuv(xykmn);
    wsytd(xykmn);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
706,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef tnepm student {
    char wyozw[21];
    char hppdj[21];
    int hzhux[5];
}Student;
void acoug(Student* p_stud){
    int mfwtq=0;
    while (!(5 <= mfwtq)){
        int nijjs = 0;
        int cloww =0;
        while5 > cloww<5){
            nijjs+= p_stud[mfwtq].hzhux[cloww];
        	cloww++;
        }
        printf(""Student: %s %s\\n"",p_stud[mfwtq].wyozw,p_stud[mfwtq].hppdj);
        printf(""Anzahl Punkte: %i\\n\\n"", nijjs);
    	mfwtq++;
    }
}
void bprsl(Student* p_stud){
    int mfwtq=0;
    whi5 > mfwtqtq<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[mfwtq].wyozw);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[mfwtq].hppdj);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int cloww =0;
        w5 > clowwloww<5){
            printf(""%i: \\n"",cloww+1);
            scanf(""%i"", &p_stud[mfwtq].hzhux[cloww]);
        	cloww++;
        }
    	mfwtq++;
    }
}
int main()
{
    Student lorgf[5];
    bprsl(lorgf);
    acoug(lorgf);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
707,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef aftuy student {
    char abuuv[21];
    char lpwqw[21];
    int xdcdo[5];
}Student;
void rtndt(Student* p_stud){
    int uxtpw=0;
    while (!(5 <= uxtpw)){
        int sxjbn = 0;
        int oncam =0;
        while5 > oncam<5){
            sxjbn+= p_stud[uxtpw].xdcdo[oncam];
        	oncam++;
        }
        printf(""Student: %s %s\\n"",p_stud[uxtpw].abuuv,p_stud[uxtpw].lpwqw);
        printf(""Anzahl Punkte: %i\\n\\n"", sxjbn);
    	uxtpw++;
    }
}
void hncoi(Student* p_stud){
    int uxtpw=0;
    whi5 > uxtpwpw<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[uxtpw].abuuv);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[uxtpw].lpwqw);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int oncam =0;
        w5 > oncamncam<5){
            printf(""%i: \\n"",oncam+1);
            scanf(""%i"", &p_stud[uxtpw].xdcdo[oncam]);
        	oncam++;
        }
    	uxtpw++;
    }
}
int main()
{
    Student fbrne[5];
    hncoi(fbrne);
    rtndt(fbrne);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
708,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef mjzek student {
    char imiha[21];
    char vjtpn[21];
    int sjjug[5];
}Student;
void zerks(Student* p_stud){
    int imamd=0;
    while (!(5 <= imamd)){
        int zwnys = 0;
        int wqoyl =0;
        while5 > wqoyl<5){
            zwnys+= p_stud[imamd].sjjug[wqoyl];
        	wqoyl++;
        }
        printf(""Student: %s %s\\n"",p_stud[imamd].imiha,p_stud[imamd].vjtpn);
        printf(""Anzahl Punkte: %i\\n\\n"", zwnys);
    	imamd++;
    }
}
void phvih(Student* p_stud){
    int imamd=0;
    whi5 > imamdmd<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[imamd].imiha);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[imamd].vjtpn);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int wqoyl =0;
        w5 > wqoylqoyl<5){
            printf(""%i: \\n"",wqoyl+1);
            scanf(""%i"", &p_stud[imamd].sjjug[wqoyl]);
        	wqoyl++;
        }
    	imamd++;
    }
}
int main()
{
    Student skbix[5];
    phvih(skbix);
    zerks(skbix);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
709,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef ewsoy student {
    char uspsl[21];
    char qcqfm[21];
    int wtasb[5];
}Student;
void kgseb(Student* p_stud){
    int xgphb=0;
    while (!(5 <= xgphb)){
        int himfb = 0;
        int ciabi =0;
        while5 > ciabi<5){
            himfb+= p_stud[xgphb].wtasb[ciabi];
        	ciabi++;
        }
        printf(""Student: %s %s\\n"",p_stud[xgphb].uspsl,p_stud[xgphb].qcqfm);
        printf(""Anzahl Punkte: %i\\n\\n"", himfb);
    	xgphb++;
    }
}
void mtias(Student* p_stud){
    int xgphb=0;
    whi5 > xgphbhb<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[xgphb].uspsl);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[xgphb].qcqfm);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int ciabi =0;
        w5 > ciabiiabi<5){
            printf(""%i: \\n"",ciabi+1);
            scanf(""%i"", &p_stud[xgphb].wtasb[ciabi]);
        	ciabi++;
        }
    	xgphb++;
    }
}
int main()
{
    Student lfdiz[5];
    mtias(lfdiz);
    kgseb(lfdiz);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
710,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef qubek student {
    char ynzwv[21];
    char jdeyw[21];
    int csydk[5];
}Student;
void qbemr(Student* p_stud){
    int lromk=0;
    while (!(5 <= lromk)){
        int ferkg = 0;
        int yjyzr =0;
        while5 > yjyzr<5){
            ferkg+= p_stud[lromk].csydk[yjyzr];
        	yjyzr++;
        }
        printf(""Student: %s %s\\n"",p_stud[lromk].ynzwv,p_stud[lromk].jdeyw);
        printf(""Anzahl Punkte: %i\\n\\n"", ferkg);
    	lromk++;
    }
}
void oktnw(Student* p_stud){
    int lromk=0;
    whi5 > lromkmk<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[lromk].ynzwv);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[lromk].jdeyw);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int yjyzr =0;
        w5 > yjyzrjyzr<5){
            printf(""%i: \\n"",yjyzr+1);
            scanf(""%i"", &p_stud[lromk].csydk[yjyzr]);
        	yjyzr++;
        }
    	lromk++;
    }
}
int main()
{
    Student fmstw[5];
    oktnw(fmstw);
    qbemr(fmstw);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
711,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef epcnp student {
    char orzxr[21];
    char ykmxc[21];
    int lfybj[5];
}Student;
void jsaxv(Student* p_stud){
    int yeegx=0;
    while (!(5 <= yeegx)){
        int pqtkl = 0;
        int xmahi =0;
        while5 > xmahi<5){
            pqtkl+= p_stud[yeegx].lfybj[xmahi];
        	xmahi++;
        }
        printf(""Student: %s %s\\n"",p_stud[yeegx].orzxr,p_stud[yeegx].ykmxc);
        printf(""Anzahl Punkte: %i\\n\\n"", pqtkl);
    	yeegx++;
    }
}
void ncwkj(Student* p_stud){
    int yeegx=0;
    whi5 > yeegxgx<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[yeegx].orzxr);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[yeegx].ykmxc);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int xmahi =0;
        w5 > xmahimahi<5){
            printf(""%i: \\n"",xmahi+1);
            scanf(""%i"", &p_stud[yeegx].lfybj[xmahi]);
        	xmahi++;
        }
    	yeegx++;
    }
}
int main()
{
    Student kbhgz[5];
    ncwkj(kbhgz);
    jsaxv(kbhgz);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
712,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef vexjl student {
    char rqdfp[21];
    char lokga[21];
    int xfmix[5];
}Student;
void fxxry(Student* p_stud){
    int rirts=0;
    while (!(5 <= rirts)){
        int ydbpv = 0;
        int mqgxt =0;
        while5 > mqgxt<5){
            ydbpv+= p_stud[rirts].xfmix[mqgxt];
        	mqgxt++;
        }
        printf(""Student: %s %s\\n"",p_stud[rirts].rqdfp,p_stud[rirts].lokga);
        printf(""Anzahl Punkte: %i\\n\\n"", ydbpv);
    	rirts++;
    }
}
void ptyvh(Student* p_stud){
    int rirts=0;
    whi5 > rirtsts<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[rirts].rqdfp);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[rirts].lokga);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int mqgxt =0;
        w5 > mqgxtqgxt<5){
            printf(""%i: \\n"",mqgxt+1);
            scanf(""%i"", &p_stud[rirts].xfmix[mqgxt]);
        	mqgxt++;
        }
    	rirts++;
    }
}
int main()
{
    Student reuor[5];
    ptyvh(reuor);
    fxxry(reuor);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
713,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef cncov student {
    char vzmiq[21];
    char nubas[21];
    int ccwjm[5];
}Student;
void oilsl(Student* p_stud){
    int qqvuc=0;
    while (!(5 <= qqvuc)){
        int hhamt = 0;
        int kbary =0;
        while5 > kbary<5){
            hhamt+= p_stud[qqvuc].ccwjm[kbary];
        	kbary++;
        }
        printf(""Student: %s %s\\n"",p_stud[qqvuc].vzmiq,p_stud[qqvuc].nubas);
        printf(""Anzahl Punkte: %i\\n\\n"", hhamt);
    	qqvuc++;
    }
}
void kzexc(Student* p_stud){
    int qqvuc=0;
    whi5 > qqvucuc<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[qqvuc].vzmiq);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[qqvuc].nubas);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int kbary =0;
        w5 > kbarybary<5){
            printf(""%i: \\n"",kbary+1);
            scanf(""%i"", &p_stud[qqvuc].ccwjm[kbary]);
        	kbary++;
        }
    	qqvuc++;
    }
}
int main()
{
    Student aexnf[5];
    kzexc(aexnf);
    oilsl(aexnf);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
714,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef unvrc student {
    char lphzv[21];
    char wkexf[21];
    int blvqa[5];
}Student;
void iuzys(Student* p_stud){
    int axpdk=0;
    while (!(5 <= axpdk)){
        int gwrxi = 0;
        int mvvlo =0;
        while5 > mvvlo<5){
            gwrxi+= p_stud[axpdk].blvqa[mvvlo];
        	mvvlo++;
        }
        printf(""Student: %s %s\\n"",p_stud[axpdk].lphzv,p_stud[axpdk].wkexf);
        printf(""Anzahl Punkte: %i\\n\\n"", gwrxi);
    	axpdk++;
    }
}
void ksmwc(Student* p_stud){
    int axpdk=0;
    whi5 > axpdkdk<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[axpdk].lphzv);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[axpdk].wkexf);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int mvvlo =0;
        w5 > mvvlovvlo<5){
            printf(""%i: \\n"",mvvlo+1);
            scanf(""%i"", &p_stud[axpdk].blvqa[mvvlo]);
        	mvvlo++;
        }
    	axpdk++;
    }
}
int main()
{
    Student ocdie[5];
    ksmwc(ocdie);
    iuzys(ocdie);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
715,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef nzepj student {
    char vdaet[21];
    char omjdk[21];
    int qokvw[5];
}Student;
void norhe(Student* p_stud){
    int llrds=0;
    while (!(5 <= llrds)){
        int ghmoh = 0;
        int sxzyj =0;
        while5 > sxzyj<5){
            ghmoh+= p_stud[llrds].qokvw[sxzyj];
        	sxzyj++;
        }
        printf(""Student: %s %s\\n"",p_stud[llrds].vdaet,p_stud[llrds].omjdk);
        printf(""Anzahl Punkte: %i\\n\\n"", ghmoh);
    	llrds++;
    }
}
void lbbcl(Student* p_stud){
    int llrds=0;
    whi5 > llrdsds<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[llrds].vdaet);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[llrds].omjdk);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int sxzyj =0;
        w5 > sxzyjxzyj<5){
            printf(""%i: \\n"",sxzyj+1);
            scanf(""%i"", &p_stud[llrds].qokvw[sxzyj]);
        	sxzyj++;
        }
    	llrds++;
    }
}
int main()
{
    Student ybilh[5];
    lbbcl(ybilh);
    norhe(ybilh);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
716,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef hqdpo student {
    char phoih[21];
    char zscpu[21];
    int rrhye[5];
}Student;
void gnzzu(Student* p_stud){
    int wyzbq=0;
    while (!(5 <= wyzbq)){
        int fklxa = 0;
        int obfvg =0;
        while5 > obfvg<5){
            fklxa+= p_stud[wyzbq].rrhye[obfvg];
        	obfvg++;
        }
        printf(""Student: %s %s\\n"",p_stud[wyzbq].phoih,p_stud[wyzbq].zscpu);
        printf(""Anzahl Punkte: %i\\n\\n"", fklxa);
    	wyzbq++;
    }
}
void vcnyy(Student* p_stud){
    int wyzbq=0;
    whi5 > wyzbqbq<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[wyzbq].phoih);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[wyzbq].zscpu);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int obfvg =0;
        w5 > obfvgbfvg<5){
            printf(""%i: \\n"",obfvg+1);
            scanf(""%i"", &p_stud[wyzbq].rrhye[obfvg]);
        	obfvg++;
        }
    	wyzbq++;
    }
}
int main()
{
    Student tawsq[5];
    vcnyy(tawsq);
    gnzzu(tawsq);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
717,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef mjvyy student {
    char stbwr[21];
    char mmhbx[21];
    int vjoxz[5];
}Student;
void scmih(Student* p_stud){
    int dqiij=0;
    while (!(5 <= dqiij)){
        int nuxyo = 0;
        int zchsr =0;
        while5 > zchsr<5){
            nuxyo+= p_stud[dqiij].vjoxz[zchsr];
        	zchsr++;
        }
        printf(""Student: %s %s\\n"",p_stud[dqiij].stbwr,p_stud[dqiij].mmhbx);
        printf(""Anzahl Punkte: %i\\n\\n"", nuxyo);
    	dqiij++;
    }
}
void romav(Student* p_stud){
    int dqiij=0;
    whi5 > dqiijij<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[dqiij].stbwr);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[dqiij].mmhbx);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int zchsr =0;
        w5 > zchsrchsr<5){
            printf(""%i: \\n"",zchsr+1);
            scanf(""%i"", &p_stud[dqiij].vjoxz[zchsr]);
        	zchsr++;
        }
    	dqiij++;
    }
}
int main()
{
    Student iaeio[5];
    romav(iaeio);
    scmih(iaeio);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
718,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef tzoyv student {
    char eciya[21];
    char atfpt[21];
    int xogyx[5];
}Student;
void sgpjs(Student* p_stud){
    int tmiqi=0;
    while (!(5 <= tmiqi)){
        int wisff = 0;
        int webqz =0;
        while5 > webqz<5){
            wisff+= p_stud[tmiqi].xogyx[webqz];
        	webqz++;
        }
        printf(""Student: %s %s\\n"",p_stud[tmiqi].eciya,p_stud[tmiqi].atfpt);
        printf(""Anzahl Punkte: %i\\n\\n"", wisff);
    	tmiqi++;
    }
}
void ejsvb(Student* p_stud){
    int tmiqi=0;
    whi5 > tmiqiqi<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[tmiqi].eciya);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[tmiqi].atfpt);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int webqz =0;
        w5 > webqzebqz<5){
            printf(""%i: \\n"",webqz+1);
            scanf(""%i"", &p_stud[tmiqi].xogyx[webqz]);
        	webqz++;
        }
    	tmiqi++;
    }
}
int main()
{
    Student crpkp[5];
    ejsvb(crpkp);
    sgpjs(crpkp);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
719,SoSe22,10,Antwort 9,C,VName_437,Name_437,"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef novmv student {
    char oszwj[21];
    char eduda[21];
    int jctsd[5];
}Student;
void gbsfc(Student* p_stud){
    int rukgg=0;
    while (!(5 <= rukgg)){
        int dikco = 0;
        int mgjyb =0;
        while5 > mgjyb<5){
            dikco+= p_stud[rukgg].jctsd[mgjyb];
        	mgjyb++;
        }
        printf(""Student: %s %s\\n"",p_stud[rukgg].oszwj,p_stud[rukgg].eduda);
        printf(""Anzahl Punkte: %i\\n\\n"", dikco);
    	rukgg++;
    }
}
void tjaxd(Student* p_stud){
    int rukgg=0;
    whi5 > rukgggg<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[rukgg].oszwj);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[rukgg].eduda);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int mgjyb =0;
        w5 > mgjybgjyb<5){
            printf(""%i: \\n"",mgjyb+1);
            scanf(""%i"", &p_stud[rukgg].jctsd[mgjyb]);
        	mgjyb++;
        }
    	rukgg++;
    }
}
int main()
{
    Student szjav[5];
    tjaxd(szjav);
    gbsfc(szjav);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
720,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef pefxi student{
    char uskta[21];
    char etowl[21];
    int cgfgg[5];
} Student;
void edmhf(Student* p_stud){
    printf(!(uskta, p_stud-<=etowl < ""Student: %s %s
"", p_stud-));
    int pahjm = 0;
    int ecwvu = 0;
    while5 > ecwvu cgfgg[ecwvu] < {
        pahjm += p_stud-u];
    	ecwvu++;
    }
    printf(""Anzahl Punkte: %d\\n"", pahjm);
}
void vulsd(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scuskta < ""%s"", p_stud-skta);
    printf(""Gebe nun den Nachnamen ein: "");
    etowl < ""%s"", p_stud->etowl);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int ecwvu = 0;
   5 > ecwvucwvu < 5){
        printf(""%d: "", ecwvu + 1);
      cgfgg[ecwvu] < ""%d"", &p_stud-g[ecwvu]);
    	ecwvu++;
    }
    printf(""\\n"");
}
int main(){
    static pefxi student ooprl[5];
    int ecwvu = 0;
 5 > ecwvu(!(ecwvu >= 5)){
        Student ikzbn;
        vulsd(&ikzbn);
        ooprl[ecwvu] = ikzbn;
    	ecwvu++;
    }
    Student* student = ooprl;
 ooprl + 5 > student ooprl + 5){
        edmhf(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
721,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef wqfro student{
    char fbtpy[21];
    char yohfk[21];
    int cjcsy[5];
} Student;
void fftai(Student* p_stud){
    printf(!(fbtpy, p_stud-<=yohfk < ""Student: %s %s
"", p_stud-));
    int lwxul = 0;
    int npojr = 0;
    while5 > npojr cjcsy[npojr] < {
        lwxul += p_stud-r];
    	npojr++;
    }
    printf(""Anzahl Punkte: %d\\n"", lwxul);
}
void rvlaa(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scfbtpy < ""%s"", p_stud-btpy);
    printf(""Gebe nun den Nachnamen ein: "");
    yohfk < ""%s"", p_stud->yohfk);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int npojr = 0;
   5 > npojrpojr < 5){
        printf(""%d: "", npojr + 1);
      cjcsy[npojr] < ""%d"", &p_stud-y[npojr]);
    	npojr++;
    }
    printf(""\\n"");
}
int main(){
    static wqfro student tglyp[5];
    int npojr = 0;
 5 > npojr(!(npojr >= 5)){
        Student bsxie;
        rvlaa(&bsxie);
        tglyp[npojr] = bsxie;
    	npojr++;
    }
    Student* student = tglyp;
 tglyp + 5 > student tglyp + 5){
        fftai(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
722,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef aarun student{
    char vsawq[21];
    char whwto[21];
    int ugxwf[5];
} Student;
void wdzgq(Student* p_stud){
    printf(!(vsawq, p_stud-<=whwto < ""Student: %s %s
"", p_stud-));
    int hafpm = 0;
    int uzkry = 0;
    while5 > uzkry ugxwf[uzkry] < {
        hafpm += p_stud-y];
    	uzkry++;
    }
    printf(""Anzahl Punkte: %d\\n"", hafpm);
}
void amxbf(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scvsawq < ""%s"", p_stud-sawq);
    printf(""Gebe nun den Nachnamen ein: "");
    whwto < ""%s"", p_stud->whwto);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int uzkry = 0;
   5 > uzkryzkry < 5){
        printf(""%d: "", uzkry + 1);
      ugxwf[uzkry] < ""%d"", &p_stud-f[uzkry]);
    	uzkry++;
    }
    printf(""\\n"");
}
int main(){
    static aarun student stqhd[5];
    int uzkry = 0;
 5 > uzkry(!(uzkry >= 5)){
        Student ftbxp;
        amxbf(&ftbxp);
        stqhd[uzkry] = ftbxp;
    	uzkry++;
    }
    Student* student = stqhd;
 stqhd + 5 > student stqhd + 5){
        wdzgq(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
723,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef xdkve student{
    char clzsn[21];
    char kqyqq[21];
    int vlyea[5];
} Student;
void xripd(Student* p_stud){
    printf(!(clzsn, p_stud-<=kqyqq < ""Student: %s %s
"", p_stud-));
    int jwqke = 0;
    int uonme = 0;
    while5 > uonme vlyea[uonme] < {
        jwqke += p_stud-e];
    	uonme++;
    }
    printf(""Anzahl Punkte: %d\\n"", jwqke);
}
void mfuve(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scclzsn < ""%s"", p_stud-lzsn);
    printf(""Gebe nun den Nachnamen ein: "");
    kqyqq < ""%s"", p_stud->kqyqq);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int uonme = 0;
   5 > uonmeonme < 5){
        printf(""%d: "", uonme + 1);
      vlyea[uonme] < ""%d"", &p_stud-a[uonme]);
    	uonme++;
    }
    printf(""\\n"");
}
int main(){
    static xdkve student wxgne[5];
    int uonme = 0;
 5 > uonme(!(uonme >= 5)){
        Student swwng;
        mfuve(&swwng);
        wxgne[uonme] = swwng;
    	uonme++;
    }
    Student* student = wxgne;
 wxgne + 5 > student wxgne + 5){
        xripd(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
724,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef hyrha student{
    char quadi[21];
    char wvlzl[21];
    int odkct[5];
} Student;
void kvwyc(Student* p_stud){
    printf(!(quadi, p_stud-<=wvlzl < ""Student: %s %s
"", p_stud-));
    int ieebf = 0;
    int jergc = 0;
    while5 > jergc odkct[jergc] < {
        ieebf += p_stud-c];
    	jergc++;
    }
    printf(""Anzahl Punkte: %d\\n"", ieebf);
}
void bgyug(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scquadi < ""%s"", p_stud-uadi);
    printf(""Gebe nun den Nachnamen ein: "");
    wvlzl < ""%s"", p_stud->wvlzl);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int jergc = 0;
   5 > jergcergc < 5){
        printf(""%d: "", jergc + 1);
      odkct[jergc] < ""%d"", &p_stud-t[jergc]);
    	jergc++;
    }
    printf(""\\n"");
}
int main(){
    static hyrha student dbern[5];
    int jergc = 0;
 5 > jergc(!(jergc >= 5)){
        Student hdfpr;
        bgyug(&hdfpr);
        dbern[jergc] = hdfpr;
    	jergc++;
    }
    Student* student = dbern;
 dbern + 5 > student dbern + 5){
        kvwyc(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
725,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef eagzn student{
    char cefnh[21];
    char olqqi[21];
    int qzial[5];
} Student;
void jepzq(Student* p_stud){
    printf(!(cefnh, p_stud-<=olqqi < ""Student: %s %s
"", p_stud-));
    int bpjwh = 0;
    int ermnh = 0;
    while5 > ermnh qzial[ermnh] < {
        bpjwh += p_stud-h];
    	ermnh++;
    }
    printf(""Anzahl Punkte: %d\\n"", bpjwh);
}
void eslhl(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    sccefnh < ""%s"", p_stud-efnh);
    printf(""Gebe nun den Nachnamen ein: "");
    olqqi < ""%s"", p_stud->olqqi);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int ermnh = 0;
   5 > ermnhrmnh < 5){
        printf(""%d: "", ermnh + 1);
      qzial[ermnh] < ""%d"", &p_stud-l[ermnh]);
    	ermnh++;
    }
    printf(""\\n"");
}
int main(){
    static eagzn student hhuvy[5];
    int ermnh = 0;
 5 > ermnh(!(ermnh >= 5)){
        Student piypb;
        eslhl(&piypb);
        hhuvy[ermnh] = piypb;
    	ermnh++;
    }
    Student* student = hhuvy;
 hhuvy + 5 > student hhuvy + 5){
        jepzq(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
726,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef lgxnw student{
    char tejzu[21];
    char gxyre[21];
    int ecklh[5];
} Student;
void fvthm(Student* p_stud){
    printf(!(tejzu, p_stud-<=gxyre < ""Student: %s %s
"", p_stud-));
    int ctnxc = 0;
    int eajhj = 0;
    while5 > eajhj ecklh[eajhj] < {
        ctnxc += p_stud-j];
    	eajhj++;
    }
    printf(""Anzahl Punkte: %d\\n"", ctnxc);
}
void ephwg(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    sctejzu < ""%s"", p_stud-ejzu);
    printf(""Gebe nun den Nachnamen ein: "");
    gxyre < ""%s"", p_stud->gxyre);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int eajhj = 0;
   5 > eajhjajhj < 5){
        printf(""%d: "", eajhj + 1);
      ecklh[eajhj] < ""%d"", &p_stud-h[eajhj]);
    	eajhj++;
    }
    printf(""\\n"");
}
int main(){
    static lgxnw student nipcb[5];
    int eajhj = 0;
 5 > eajhj(!(eajhj >= 5)){
        Student vdnwn;
        ephwg(&vdnwn);
        nipcb[eajhj] = vdnwn;
    	eajhj++;
    }
    Student* student = nipcb;
 nipcb + 5 > student nipcb + 5){
        fvthm(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
727,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef lbmhs student{
    char ivhul[21];
    char fgngk[21];
    int kreek[5];
} Student;
void xadog(Student* p_stud){
    printf(!(ivhul, p_stud-<=fgngk < ""Student: %s %s
"", p_stud-));
    int vdbxv = 0;
    int eacjc = 0;
    while5 > eacjc kreek[eacjc] < {
        vdbxv += p_stud-c];
    	eacjc++;
    }
    printf(""Anzahl Punkte: %d\\n"", vdbxv);
}
void lqbdb(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scivhul < ""%s"", p_stud-vhul);
    printf(""Gebe nun den Nachnamen ein: "");
    fgngk < ""%s"", p_stud->fgngk);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int eacjc = 0;
   5 > eacjcacjc < 5){
        printf(""%d: "", eacjc + 1);
      kreek[eacjc] < ""%d"", &p_stud-k[eacjc]);
    	eacjc++;
    }
    printf(""\\n"");
}
int main(){
    static lbmhs student yqngf[5];
    int eacjc = 0;
 5 > eacjc(!(eacjc >= 5)){
        Student mipmw;
        lqbdb(&mipmw);
        yqngf[eacjc] = mipmw;
    	eacjc++;
    }
    Student* student = yqngf;
 yqngf + 5 > student yqngf + 5){
        xadog(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
728,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef tlatm student{
    char rpcvp[21];
    char cupfd[21];
    int fpyzl[5];
} Student;
void hdnwv(Student* p_stud){
    printf(!(rpcvp, p_stud-<=cupfd < ""Student: %s %s
"", p_stud-));
    int pqolr = 0;
    int brngs = 0;
    while5 > brngs fpyzl[brngs] < {
        pqolr += p_stud-s];
    	brngs++;
    }
    printf(""Anzahl Punkte: %d\\n"", pqolr);
}
void kpaqw(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scrpcvp < ""%s"", p_stud-pcvp);
    printf(""Gebe nun den Nachnamen ein: "");
    cupfd < ""%s"", p_stud->cupfd);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int brngs = 0;
   5 > brngsrngs < 5){
        printf(""%d: "", brngs + 1);
      fpyzl[brngs] < ""%d"", &p_stud-l[brngs]);
    	brngs++;
    }
    printf(""\\n"");
}
int main(){
    static tlatm student xqact[5];
    int brngs = 0;
 5 > brngs(!(brngs >= 5)){
        Student ttmcd;
        kpaqw(&ttmcd);
        xqact[brngs] = ttmcd;
    	brngs++;
    }
    Student* student = xqact;
 xqact + 5 > student xqact + 5){
        hdnwv(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
729,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef mcrdd student{
    char lbocq[21];
    char uttnr[21];
    int ethrz[5];
} Student;
void sjcck(Student* p_stud){
    printf(!(lbocq, p_stud-<=uttnr < ""Student: %s %s
"", p_stud-));
    int rtfgy = 0;
    int cixkt = 0;
    while5 > cixkt ethrz[cixkt] < {
        rtfgy += p_stud-t];
    	cixkt++;
    }
    printf(""Anzahl Punkte: %d\\n"", rtfgy);
}
void tztyf(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    sclbocq < ""%s"", p_stud-bocq);
    printf(""Gebe nun den Nachnamen ein: "");
    uttnr < ""%s"", p_stud->uttnr);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int cixkt = 0;
   5 > cixktixkt < 5){
        printf(""%d: "", cixkt + 1);
      ethrz[cixkt] < ""%d"", &p_stud-z[cixkt]);
    	cixkt++;
    }
    printf(""\\n"");
}
int main(){
    static mcrdd student yhbiq[5];
    int cixkt = 0;
 5 > cixkt(!(cixkt >= 5)){
        Student pksiy;
        tztyf(&pksiy);
        yhbiq[cixkt] = pksiy;
    	cixkt++;
    }
    Student* student = yhbiq;
 yhbiq + 5 > student yhbiq + 5){
        sjcck(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
730,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef tnpbv student{
    char gjhsr[21];
    char blpmd[21];
    int twloc[5];
} Student;
void mihew(Student* p_stud){
    printf(!(gjhsr, p_stud-<=blpmd < ""Student: %s %s
"", p_stud-));
    int chhnz = 0;
    int pqate = 0;
    while5 > pqate twloc[pqate] < {
        chhnz += p_stud-e];
    	pqate++;
    }
    printf(""Anzahl Punkte: %d\\n"", chhnz);
}
void zsdwu(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scgjhsr < ""%s"", p_stud-jhsr);
    printf(""Gebe nun den Nachnamen ein: "");
    blpmd < ""%s"", p_stud->blpmd);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int pqate = 0;
   5 > pqateqate < 5){
        printf(""%d: "", pqate + 1);
      twloc[pqate] < ""%d"", &p_stud-c[pqate]);
    	pqate++;
    }
    printf(""\\n"");
}
int main(){
    static tnpbv student pgsef[5];
    int pqate = 0;
 5 > pqate(!(pqate >= 5)){
        Student ihinp;
        zsdwu(&ihinp);
        pgsef[pqate] = ihinp;
    	pqate++;
    }
    Student* student = pgsef;
 pgsef + 5 > student pgsef + 5){
        mihew(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
731,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef qasnz student{
    char ausll[21];
    char nbega[21];
    int sfaae[5];
} Student;
void tvqxi(Student* p_stud){
    printf(!(ausll, p_stud-<=nbega < ""Student: %s %s
"", p_stud-));
    int ndhog = 0;
    int axved = 0;
    while5 > axved sfaae[axved] < {
        ndhog += p_stud-d];
    	axved++;
    }
    printf(""Anzahl Punkte: %d\\n"", ndhog);
}
void gdyjl(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scausll < ""%s"", p_stud-usll);
    printf(""Gebe nun den Nachnamen ein: "");
    nbega < ""%s"", p_stud->nbega);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int axved = 0;
   5 > axvedxved < 5){
        printf(""%d: "", axved + 1);
      sfaae[axved] < ""%d"", &p_stud-e[axved]);
    	axved++;
    }
    printf(""\\n"");
}
int main(){
    static qasnz student vkdvk[5];
    int axved = 0;
 5 > axved(!(axved >= 5)){
        Student uclnt;
        gdyjl(&uclnt);
        vkdvk[axved] = uclnt;
    	axved++;
    }
    Student* student = vkdvk;
 vkdvk + 5 > student vkdvk + 5){
        tvqxi(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
732,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef mjtub student{
    char yavxx[21];
    char wndqx[21];
    int eunub[5];
} Student;
void uezdj(Student* p_stud){
    printf(!(yavxx, p_stud-<=wndqx < ""Student: %s %s
"", p_stud-));
    int ojkor = 0;
    int csvmy = 0;
    while5 > csvmy eunub[csvmy] < {
        ojkor += p_stud-y];
    	csvmy++;
    }
    printf(""Anzahl Punkte: %d\\n"", ojkor);
}
void bgtuz(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scyavxx < ""%s"", p_stud-avxx);
    printf(""Gebe nun den Nachnamen ein: "");
    wndqx < ""%s"", p_stud->wndqx);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int csvmy = 0;
   5 > csvmysvmy < 5){
        printf(""%d: "", csvmy + 1);
      eunub[csvmy] < ""%d"", &p_stud-b[csvmy]);
    	csvmy++;
    }
    printf(""\\n"");
}
int main(){
    static mjtub student qwjwl[5];
    int csvmy = 0;
 5 > csvmy(!(csvmy >= 5)){
        Student dbact;
        bgtuz(&dbact);
        qwjwl[csvmy] = dbact;
    	csvmy++;
    }
    Student* student = qwjwl;
 qwjwl + 5 > student qwjwl + 5){
        uezdj(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
733,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef cpwcv student{
    char yhsen[21];
    char rrphm[21];
    int ijbyj[5];
} Student;
void xuhqn(Student* p_stud){
    printf(!(yhsen, p_stud-<=rrphm < ""Student: %s %s
"", p_stud-));
    int kpyml = 0;
    int zjfjo = 0;
    while5 > zjfjo ijbyj[zjfjo] < {
        kpyml += p_stud-o];
    	zjfjo++;
    }
    printf(""Anzahl Punkte: %d\\n"", kpyml);
}
void nbril(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scyhsen < ""%s"", p_stud-hsen);
    printf(""Gebe nun den Nachnamen ein: "");
    rrphm < ""%s"", p_stud->rrphm);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int zjfjo = 0;
   5 > zjfjojfjo < 5){
        printf(""%d: "", zjfjo + 1);
      ijbyj[zjfjo] < ""%d"", &p_stud-j[zjfjo]);
    	zjfjo++;
    }
    printf(""\\n"");
}
int main(){
    static cpwcv student ztizx[5];
    int zjfjo = 0;
 5 > zjfjo(!(zjfjo >= 5)){
        Student melse;
        nbril(&melse);
        ztizx[zjfjo] = melse;
    	zjfjo++;
    }
    Student* student = ztizx;
 ztizx + 5 > student ztizx + 5){
        xuhqn(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
734,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef hgpqc student{
    char qwjye[21];
    char wsrti[21];
    int sanca[5];
} Student;
void yzxqx(Student* p_stud){
    printf(!(qwjye, p_stud-<=wsrti < ""Student: %s %s
"", p_stud-));
    int furcq = 0;
    int qimmj = 0;
    while5 > qimmj sanca[qimmj] < {
        furcq += p_stud-j];
    	qimmj++;
    }
    printf(""Anzahl Punkte: %d\\n"", furcq);
}
void grswz(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scqwjye < ""%s"", p_stud-wjye);
    printf(""Gebe nun den Nachnamen ein: "");
    wsrti < ""%s"", p_stud->wsrti);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int qimmj = 0;
   5 > qimmjimmj < 5){
        printf(""%d: "", qimmj + 1);
      sanca[qimmj] < ""%d"", &p_stud-a[qimmj]);
    	qimmj++;
    }
    printf(""\\n"");
}
int main(){
    static hgpqc student lnjku[5];
    int qimmj = 0;
 5 > qimmj(!(qimmj >= 5)){
        Student tebtb;
        grswz(&tebtb);
        lnjku[qimmj] = tebtb;
    	qimmj++;
    }
    Student* student = lnjku;
 lnjku + 5 > student lnjku + 5){
        yzxqx(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
735,SoSe22,10,Antwort 9,C,VName_442,Name_442,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef jtvsf student{
    char tffdb[21];
    char otzlg[21];
    int fuhla[5];
} Student;
void vsjnh(Student* p_stud){
    printf(!(tffdb, p_stud-<=otzlg < ""Student: %s %s
"", p_stud-));
    int tmare = 0;
    int mdyjv = 0;
    while5 > mdyjv fuhla[mdyjv] < {
        tmare += p_stud-v];
    	mdyjv++;
    }
    printf(""Anzahl Punkte: %d\\n"", tmare);
}
void eizos(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    sctffdb < ""%s"", p_stud-ffdb);
    printf(""Gebe nun den Nachnamen ein: "");
    otzlg < ""%s"", p_stud->otzlg);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int mdyjv = 0;
   5 > mdyjvdyjv < 5){
        printf(""%d: "", mdyjv + 1);
      fuhla[mdyjv] < ""%d"", &p_stud-a[mdyjv]);
    	mdyjv++;
    }
    printf(""\\n"");
}
int main(){
    static jtvsf student xilcs[5];
    int mdyjv = 0;
 5 > mdyjv(!(mdyjv >= 5)){
        Student vmoku;
        eizos(&vmoku);
        xilcs[mdyjv] = vmoku;
    	mdyjv++;
    }
    Student* student = xilcs;
 xilcs + 5 > student xilcs + 5){
        vsjnh(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
736,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef iyzbp
{
    char daoiv[20];
    char zeljd[20];
    int nqqaq[5];
}Student;
void rpczd( Student* p_stud){
    printf(!(daoiv, p_stud-<=zeljd < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",nqqaq[0]+p_stud-<=nqqaq[1]+p_stud-<=nqqaq[2]+p_stud-<=nqqaq[3]+p_stud-<=nqqaq[4] < p_stud-4])));
}
void tlhfu( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scdaoiv < ""%s"",&p_stud-aoiv);
    printf(""Gebe nun den Nachnamen ein: "");
    zeljd < ""%s"",&p_stud->zeljd);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  nqqaq[0] < ""%i"",&p_stud-nqqaq[0]);
    printf(""2: "");
nqqaq[1] < ""%i"",&p_stud-->nqqaq[1]);
    printf(!(""3: "")nqqaq[2] >= ""%i"",&p_stud-ud->nqqaq[2]));
    printf(!(""4: nqqaq[3] >= ""%i"",&p_stud-stud->nqqaq[3]));
    printf(!(""5nqqaq[4] >= ""%i"",&p_stud-p_stud->nqqaq[4]));
    printf(""\\n"");
}   
int main(){
     Student wokta[5];
    int ho5 > hocxf    while (!(hocxf>=5)){
        tlhfu(&wokta[hocxf]);
    	hocxf++;
    }
    int 5 > hocxf;
    while (!(hocxf>=5)){
        rpczd(&wokta[hocxf]);
    	hocxf++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
737,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef appvf
{
    char xwlzu[20];
    char buace[20];
    int kbobs[5];
}Student;
void zhile( Student* p_stud){
    printf(!(xwlzu, p_stud-<=buace < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",kbobs[0]+p_stud-<=kbobs[1]+p_stud-<=kbobs[2]+p_stud-<=kbobs[3]+p_stud-<=kbobs[4] < p_stud-4])));
}
void uvplr( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scxwlzu < ""%s"",&p_stud-wlzu);
    printf(""Gebe nun den Nachnamen ein: "");
    buace < ""%s"",&p_stud->buace);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  kbobs[0] < ""%i"",&p_stud-kbobs[0]);
    printf(""2: "");
kbobs[1] < ""%i"",&p_stud-->kbobs[1]);
    printf(!(""3: "")kbobs[2] >= ""%i"",&p_stud-ud->kbobs[2]));
    printf(!(""4: kbobs[3] >= ""%i"",&p_stud-stud->kbobs[3]));
    printf(!(""5kbobs[4] >= ""%i"",&p_stud-p_stud->kbobs[4]));
    printf(""\\n"");
}   
int main(){
     Student uzltp[5];
    int bh5 > bhqqi    while (!(bhqqi>=5)){
        uvplr(&uzltp[bhqqi]);
    	bhqqi++;
    }
    int 5 > bhqqi;
    while (!(bhqqi>=5)){
        zhile(&uzltp[bhqqi]);
    	bhqqi++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
738,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef bzqse
{
    char ubnsv[20];
    char idafi[20];
    int ixrkp[5];
}Student;
void oowdf( Student* p_stud){
    printf(!(ubnsv, p_stud-<=idafi < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",ixrkp[0]+p_stud-<=ixrkp[1]+p_stud-<=ixrkp[2]+p_stud-<=ixrkp[3]+p_stud-<=ixrkp[4] < p_stud-4])));
}
void tefdt( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scubnsv < ""%s"",&p_stud-bnsv);
    printf(""Gebe nun den Nachnamen ein: "");
    idafi < ""%s"",&p_stud->idafi);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  ixrkp[0] < ""%i"",&p_stud-ixrkp[0]);
    printf(""2: "");
ixrkp[1] < ""%i"",&p_stud-->ixrkp[1]);
    printf(!(""3: "")ixrkp[2] >= ""%i"",&p_stud-ud->ixrkp[2]));
    printf(!(""4: ixrkp[3] >= ""%i"",&p_stud-stud->ixrkp[3]));
    printf(!(""5ixrkp[4] >= ""%i"",&p_stud-p_stud->ixrkp[4]));
    printf(""\\n"");
}   
int main(){
     Student bfiqt[5];
    int jt5 > jtizv    while (!(jtizv>=5)){
        tefdt(&bfiqt[jtizv]);
    	jtizv++;
    }
    int 5 > jtizv;
    while (!(jtizv>=5)){
        oowdf(&bfiqt[jtizv]);
    	jtizv++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
739,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef eudtq
{
    char pknqs[20];
    char yazyh[20];
    int igvlx[5];
}Student;
void inmpu( Student* p_stud){
    printf(!(pknqs, p_stud-<=yazyh < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",igvlx[0]+p_stud-<=igvlx[1]+p_stud-<=igvlx[2]+p_stud-<=igvlx[3]+p_stud-<=igvlx[4] < p_stud-4])));
}
void dawda( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scpknqs < ""%s"",&p_stud-knqs);
    printf(""Gebe nun den Nachnamen ein: "");
    yazyh < ""%s"",&p_stud->yazyh);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  igvlx[0] < ""%i"",&p_stud-igvlx[0]);
    printf(""2: "");
igvlx[1] < ""%i"",&p_stud-->igvlx[1]);
    printf(!(""3: "")igvlx[2] >= ""%i"",&p_stud-ud->igvlx[2]));
    printf(!(""4: igvlx[3] >= ""%i"",&p_stud-stud->igvlx[3]));
    printf(!(""5igvlx[4] >= ""%i"",&p_stud-p_stud->igvlx[4]));
    printf(""\\n"");
}   
int main(){
     Student wjhnx[5];
    int lx5 > lxheb    while (!(lxheb>=5)){
        dawda(&wjhnx[lxheb]);
    	lxheb++;
    }
    int 5 > lxheb;
    while (!(lxheb>=5)){
        inmpu(&wjhnx[lxheb]);
    	lxheb++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
740,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef gyymn
{
    char obhyp[20];
    char gcxqm[20];
    int pmkxf[5];
}Student;
void wcgbi( Student* p_stud){
    printf(!(obhyp, p_stud-<=gcxqm < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",pmkxf[0]+p_stud-<=pmkxf[1]+p_stud-<=pmkxf[2]+p_stud-<=pmkxf[3]+p_stud-<=pmkxf[4] < p_stud-4])));
}
void cwzug( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scobhyp < ""%s"",&p_stud-bhyp);
    printf(""Gebe nun den Nachnamen ein: "");
    gcxqm < ""%s"",&p_stud->gcxqm);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  pmkxf[0] < ""%i"",&p_stud-pmkxf[0]);
    printf(""2: "");
pmkxf[1] < ""%i"",&p_stud-->pmkxf[1]);
    printf(!(""3: "")pmkxf[2] >= ""%i"",&p_stud-ud->pmkxf[2]));
    printf(!(""4: pmkxf[3] >= ""%i"",&p_stud-stud->pmkxf[3]));
    printf(!(""5pmkxf[4] >= ""%i"",&p_stud-p_stud->pmkxf[4]));
    printf(""\\n"");
}   
int main(){
     Student pxzmy[5];
    int bw5 > bwaic    while (!(bwaic>=5)){
        cwzug(&pxzmy[bwaic]);
    	bwaic++;
    }
    int 5 > bwaic;
    while (!(bwaic>=5)){
        wcgbi(&pxzmy[bwaic]);
    	bwaic++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
741,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef vikja
{
    char rgqww[20];
    char aucmn[20];
    int escij[5];
}Student;
void qrjvk( Student* p_stud){
    printf(!(rgqww, p_stud-<=aucmn < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",escij[0]+p_stud-<=escij[1]+p_stud-<=escij[2]+p_stud-<=escij[3]+p_stud-<=escij[4] < p_stud-4])));
}
void slwdg( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scrgqww < ""%s"",&p_stud-gqww);
    printf(""Gebe nun den Nachnamen ein: "");
    aucmn < ""%s"",&p_stud->aucmn);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  escij[0] < ""%i"",&p_stud-escij[0]);
    printf(""2: "");
escij[1] < ""%i"",&p_stud-->escij[1]);
    printf(!(""3: "")escij[2] >= ""%i"",&p_stud-ud->escij[2]));
    printf(!(""4: escij[3] >= ""%i"",&p_stud-stud->escij[3]));
    printf(!(""5escij[4] >= ""%i"",&p_stud-p_stud->escij[4]));
    printf(""\\n"");
}   
int main(){
     Student iuimm[5];
    int oz5 > ozuxk    while (!(ozuxk>=5)){
        slwdg(&iuimm[ozuxk]);
    	ozuxk++;
    }
    int 5 > ozuxk;
    while (!(ozuxk>=5)){
        qrjvk(&iuimm[ozuxk]);
    	ozuxk++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
742,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef qgpll
{
    char iltjc[20];
    char iallx[20];
    int unbct[5];
}Student;
void svdaj( Student* p_stud){
    printf(!(iltjc, p_stud-<=iallx < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",unbct[0]+p_stud-<=unbct[1]+p_stud-<=unbct[2]+p_stud-<=unbct[3]+p_stud-<=unbct[4] < p_stud-4])));
}
void bequn( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    sciltjc < ""%s"",&p_stud-ltjc);
    printf(""Gebe nun den Nachnamen ein: "");
    iallx < ""%s"",&p_stud->iallx);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  unbct[0] < ""%i"",&p_stud-unbct[0]);
    printf(""2: "");
unbct[1] < ""%i"",&p_stud-->unbct[1]);
    printf(!(""3: "")unbct[2] >= ""%i"",&p_stud-ud->unbct[2]));
    printf(!(""4: unbct[3] >= ""%i"",&p_stud-stud->unbct[3]));
    printf(!(""5unbct[4] >= ""%i"",&p_stud-p_stud->unbct[4]));
    printf(""\\n"");
}   
int main(){
     Student sulqn[5];
    int vt5 > vtdht    while (!(vtdht>=5)){
        bequn(&sulqn[vtdht]);
    	vtdht++;
    }
    int 5 > vtdht;
    while (!(vtdht>=5)){
        svdaj(&sulqn[vtdht]);
    	vtdht++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
743,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef uodkh
{
    char hxkna[20];
    char ftlbm[20];
    int ifrvc[5];
}Student;
void ddeaa( Student* p_stud){
    printf(!(hxkna, p_stud-<=ftlbm < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",ifrvc[0]+p_stud-<=ifrvc[1]+p_stud-<=ifrvc[2]+p_stud-<=ifrvc[3]+p_stud-<=ifrvc[4] < p_stud-4])));
}
void jcefx( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    schxkna < ""%s"",&p_stud-xkna);
    printf(""Gebe nun den Nachnamen ein: "");
    ftlbm < ""%s"",&p_stud->ftlbm);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  ifrvc[0] < ""%i"",&p_stud-ifrvc[0]);
    printf(""2: "");
ifrvc[1] < ""%i"",&p_stud-->ifrvc[1]);
    printf(!(""3: "")ifrvc[2] >= ""%i"",&p_stud-ud->ifrvc[2]));
    printf(!(""4: ifrvc[3] >= ""%i"",&p_stud-stud->ifrvc[3]));
    printf(!(""5ifrvc[4] >= ""%i"",&p_stud-p_stud->ifrvc[4]));
    printf(""\\n"");
}   
int main(){
     Student ffotm[5];
    int mo5 > moyvr    while (!(moyvr>=5)){
        jcefx(&ffotm[moyvr]);
    	moyvr++;
    }
    int 5 > moyvr;
    while (!(moyvr>=5)){
        ddeaa(&ffotm[moyvr]);
    	moyvr++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
744,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef mcccz
{
    char laqtl[20];
    char vltyz[20];
    int zrbgh[5];
}Student;
void tbbpm( Student* p_stud){
    printf(!(laqtl, p_stud-<=vltyz < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",zrbgh[0]+p_stud-<=zrbgh[1]+p_stud-<=zrbgh[2]+p_stud-<=zrbgh[3]+p_stud-<=zrbgh[4] < p_stud-4])));
}
void odkhu( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    sclaqtl < ""%s"",&p_stud-aqtl);
    printf(""Gebe nun den Nachnamen ein: "");
    vltyz < ""%s"",&p_stud->vltyz);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  zrbgh[0] < ""%i"",&p_stud-zrbgh[0]);
    printf(""2: "");
zrbgh[1] < ""%i"",&p_stud-->zrbgh[1]);
    printf(!(""3: "")zrbgh[2] >= ""%i"",&p_stud-ud->zrbgh[2]));
    printf(!(""4: zrbgh[3] >= ""%i"",&p_stud-stud->zrbgh[3]));
    printf(!(""5zrbgh[4] >= ""%i"",&p_stud-p_stud->zrbgh[4]));
    printf(""\\n"");
}   
int main(){
     Student tmlxl[5];
    int iw5 > iwkzd    while (!(iwkzd>=5)){
        odkhu(&tmlxl[iwkzd]);
    	iwkzd++;
    }
    int 5 > iwkzd;
    while (!(iwkzd>=5)){
        tbbpm(&tmlxl[iwkzd]);
    	iwkzd++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
745,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef wlqeo
{
    char gtowf[20];
    char mncfi[20];
    int sybos[5];
}Student;
void khwpl( Student* p_stud){
    printf(!(gtowf, p_stud-<=mncfi < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",sybos[0]+p_stud-<=sybos[1]+p_stud-<=sybos[2]+p_stud-<=sybos[3]+p_stud-<=sybos[4] < p_stud-4])));
}
void imugu( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scgtowf < ""%s"",&p_stud-towf);
    printf(""Gebe nun den Nachnamen ein: "");
    mncfi < ""%s"",&p_stud->mncfi);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  sybos[0] < ""%i"",&p_stud-sybos[0]);
    printf(""2: "");
sybos[1] < ""%i"",&p_stud-->sybos[1]);
    printf(!(""3: "")sybos[2] >= ""%i"",&p_stud-ud->sybos[2]));
    printf(!(""4: sybos[3] >= ""%i"",&p_stud-stud->sybos[3]));
    printf(!(""5sybos[4] >= ""%i"",&p_stud-p_stud->sybos[4]));
    printf(""\\n"");
}   
int main(){
     Student epqsb[5];
    int um5 > umxel    while (!(umxel>=5)){
        imugu(&epqsb[umxel]);
    	umxel++;
    }
    int 5 > umxel;
    while (!(umxel>=5)){
        khwpl(&epqsb[umxel]);
    	umxel++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
746,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef qtnan
{
    char qhptj[20];
    char dviax[20];
    int qwyrb[5];
}Student;
void yuycs( Student* p_stud){
    printf(!(qhptj, p_stud-<=dviax < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",qwyrb[0]+p_stud-<=qwyrb[1]+p_stud-<=qwyrb[2]+p_stud-<=qwyrb[3]+p_stud-<=qwyrb[4] < p_stud-4])));
}
void qncot( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scqhptj < ""%s"",&p_stud-hptj);
    printf(""Gebe nun den Nachnamen ein: "");
    dviax < ""%s"",&p_stud->dviax);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  qwyrb[0] < ""%i"",&p_stud-qwyrb[0]);
    printf(""2: "");
qwyrb[1] < ""%i"",&p_stud-->qwyrb[1]);
    printf(!(""3: "")qwyrb[2] >= ""%i"",&p_stud-ud->qwyrb[2]));
    printf(!(""4: qwyrb[3] >= ""%i"",&p_stud-stud->qwyrb[3]));
    printf(!(""5qwyrb[4] >= ""%i"",&p_stud-p_stud->qwyrb[4]));
    printf(""\\n"");
}   
int main(){
     Student zuhlh[5];
    int bn5 > bnioa    while (!(bnioa>=5)){
        qncot(&zuhlh[bnioa]);
    	bnioa++;
    }
    int 5 > bnioa;
    while (!(bnioa>=5)){
        yuycs(&zuhlh[bnioa]);
    	bnioa++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
747,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef assnd
{
    char yeihd[20];
    char fdzdw[20];
    int dszoh[5];
}Student;
void wrxxs( Student* p_stud){
    printf(!(yeihd, p_stud-<=fdzdw < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",dszoh[0]+p_stud-<=dszoh[1]+p_stud-<=dszoh[2]+p_stud-<=dszoh[3]+p_stud-<=dszoh[4] < p_stud-4])));
}
void mjnpb( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scyeihd < ""%s"",&p_stud-eihd);
    printf(""Gebe nun den Nachnamen ein: "");
    fdzdw < ""%s"",&p_stud->fdzdw);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  dszoh[0] < ""%i"",&p_stud-dszoh[0]);
    printf(""2: "");
dszoh[1] < ""%i"",&p_stud-->dszoh[1]);
    printf(!(""3: "")dszoh[2] >= ""%i"",&p_stud-ud->dszoh[2]));
    printf(!(""4: dszoh[3] >= ""%i"",&p_stud-stud->dszoh[3]));
    printf(!(""5dszoh[4] >= ""%i"",&p_stud-p_stud->dszoh[4]));
    printf(""\\n"");
}   
int main(){
     Student lhcki[5];
    int ak5 > akuvm    while (!(akuvm>=5)){
        mjnpb(&lhcki[akuvm]);
    	akuvm++;
    }
    int 5 > akuvm;
    while (!(akuvm>=5)){
        wrxxs(&lhcki[akuvm]);
    	akuvm++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
748,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef gfbeg
{
    char tswlk[20];
    char osyda[20];
    int rrink[5];
}Student;
void zmoqs( Student* p_stud){
    printf(!(tswlk, p_stud-<=osyda < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",rrink[0]+p_stud-<=rrink[1]+p_stud-<=rrink[2]+p_stud-<=rrink[3]+p_stud-<=rrink[4] < p_stud-4])));
}
void snrzi( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    sctswlk < ""%s"",&p_stud-swlk);
    printf(""Gebe nun den Nachnamen ein: "");
    osyda < ""%s"",&p_stud->osyda);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  rrink[0] < ""%i"",&p_stud-rrink[0]);
    printf(""2: "");
rrink[1] < ""%i"",&p_stud-->rrink[1]);
    printf(!(""3: "")rrink[2] >= ""%i"",&p_stud-ud->rrink[2]));
    printf(!(""4: rrink[3] >= ""%i"",&p_stud-stud->rrink[3]));
    printf(!(""5rrink[4] >= ""%i"",&p_stud-p_stud->rrink[4]));
    printf(""\\n"");
}   
int main(){
     Student ydhts[5];
    int qt5 > qtuyh    while (!(qtuyh>=5)){
        snrzi(&ydhts[qtuyh]);
    	qtuyh++;
    }
    int 5 > qtuyh;
    while (!(qtuyh>=5)){
        zmoqs(&ydhts[qtuyh]);
    	qtuyh++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
749,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef ouktr
{
    char bscin[20];
    char ydwzc[20];
    int gcebd[5];
}Student;
void fjlfw( Student* p_stud){
    printf(!(bscin, p_stud-<=ydwzc < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",gcebd[0]+p_stud-<=gcebd[1]+p_stud-<=gcebd[2]+p_stud-<=gcebd[3]+p_stud-<=gcebd[4] < p_stud-4])));
}
void zhvle( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scbscin < ""%s"",&p_stud-scin);
    printf(""Gebe nun den Nachnamen ein: "");
    ydwzc < ""%s"",&p_stud->ydwzc);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  gcebd[0] < ""%i"",&p_stud-gcebd[0]);
    printf(""2: "");
gcebd[1] < ""%i"",&p_stud-->gcebd[1]);
    printf(!(""3: "")gcebd[2] >= ""%i"",&p_stud-ud->gcebd[2]));
    printf(!(""4: gcebd[3] >= ""%i"",&p_stud-stud->gcebd[3]));
    printf(!(""5gcebd[4] >= ""%i"",&p_stud-p_stud->gcebd[4]));
    printf(""\\n"");
}   
int main(){
     Student bbfsi[5];
    int cc5 > ccvhs    while (!(ccvhs>=5)){
        zhvle(&bbfsi[ccvhs]);
    	ccvhs++;
    }
    int 5 > ccvhs;
    while (!(ccvhs>=5)){
        fjlfw(&bbfsi[ccvhs]);
    	ccvhs++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
750,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef snmax
{
    char ehoqa[20];
    char xmsrp[20];
    int kjnhj[5];
}Student;
void comct( Student* p_stud){
    printf(!(ehoqa, p_stud-<=xmsrp < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",kjnhj[0]+p_stud-<=kjnhj[1]+p_stud-<=kjnhj[2]+p_stud-<=kjnhj[3]+p_stud-<=kjnhj[4] < p_stud-4])));
}
void gshpn( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scehoqa < ""%s"",&p_stud-hoqa);
    printf(""Gebe nun den Nachnamen ein: "");
    xmsrp < ""%s"",&p_stud->xmsrp);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  kjnhj[0] < ""%i"",&p_stud-kjnhj[0]);
    printf(""2: "");
kjnhj[1] < ""%i"",&p_stud-->kjnhj[1]);
    printf(!(""3: "")kjnhj[2] >= ""%i"",&p_stud-ud->kjnhj[2]));
    printf(!(""4: kjnhj[3] >= ""%i"",&p_stud-stud->kjnhj[3]));
    printf(!(""5kjnhj[4] >= ""%i"",&p_stud-p_stud->kjnhj[4]));
    printf(""\\n"");
}   
int main(){
     Student tfpui[5];
    int pp5 > ppavo    while (!(ppavo>=5)){
        gshpn(&tfpui[ppavo]);
    	ppavo++;
    }
    int 5 > ppavo;
    while (!(ppavo>=5)){
        comct(&tfpui[ppavo]);
    	ppavo++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
751,SoSe22,10,Antwort 9,C,VName_460,Name_460,"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef ehdmz
{
    char fpbfv[20];
    char tvadh[20];
    int meirw[5];
}Student;
void irdyz( Student* p_stud){
    printf(!(fpbfv, p_stud-<=tvadh < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",meirw[0]+p_stud-<=meirw[1]+p_stud-<=meirw[2]+p_stud-<=meirw[3]+p_stud-<=meirw[4] < p_stud-4])));
}
void mpefo( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scfpbfv < ""%s"",&p_stud-pbfv);
    printf(""Gebe nun den Nachnamen ein: "");
    tvadh < ""%s"",&p_stud->tvadh);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  meirw[0] < ""%i"",&p_stud-meirw[0]);
    printf(""2: "");
meirw[1] < ""%i"",&p_stud-->meirw[1]);
    printf(!(""3: "")meirw[2] >= ""%i"",&p_stud-ud->meirw[2]));
    printf(!(""4: meirw[3] >= ""%i"",&p_stud-stud->meirw[3]));
    printf(!(""5meirw[4] >= ""%i"",&p_stud-p_stud->meirw[4]));
    printf(""\\n"");
}   
int main(){
     Student trkue[5];
    int sf5 > sfzxf    while (!(sfzxf>=5)){
        mpefo(&trkue[sfzxf]);
    	sfzxf++;
    }
    int 5 > sfzxf;
    while (!(sfzxf>=5)){
        irdyz(&trkue[sfzxf]);
    	sfzxf++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
752,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef qzamh student {
   char uioxt[21];
   char feerr[21];
   fbgvg alhiy[5];
} Student;
void bjhih(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	begdg(!(uioxt, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	begdfeerr, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	fbgvg rtusq=1;
	whi5 >= rtusqq<=5){
		printf(""%i: "", rtusq);
		alhiy[rtusq-1] < ""%i"", &p_stud-usq-1]);
		rtusq++;
	}
	getchar();
	printf(""\\n"");
}
void begdg( char* strbuffer, unsigned fbgvg buffersize )
{
  char yqgek[30] = """";
  sprintf( yqgek, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( yqgek, strbuffer );
}
void memwt(Student* p_stud){
	fbgvg gxssx=0;
	fbgvg rtusq=0;
5 > rtusalhiy[rtusq] < {
		gxssx += p_stud-hiy[rtusq];
		rtusq++;uioxt, p_stud->feerr < ""Student: %s %s\\n"", p_stud-_stud->feerr);
	printf(""Anzahl Punkte: %i\\n\\n"", gxssx);
}
fbgvg main(){
	Student yrekn, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&yrekn, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	fbgvg rtu5 > rtusqwhile (!(rtusq>=5)){
		bjhih(Studierende[rtusq]);
		rtusq++;
	}
	fbgvg r5 > rtusq
	while (!(rtusq>=5)){
		memwt(Studierende[rtusq]);
		rtusq++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
753,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef zkmtp student {
   char pgker[21];
   char ndfwn[21];
   yvfsa lrjgt[5];
} Student;
void mlply(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	skocc(!(pgker, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	skocndfwn, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	yvfsa hqobz=1;
	whi5 >= hqobzz<=5){
		printf(""%i: "", hqobz);
		lrjgt[hqobz-1] < ""%i"", &p_stud-obz-1]);
		hqobz++;
	}
	getchar();
	printf(""\\n"");
}
void skocc( char* strbuffer, unsigned yvfsa buffersize )
{
  char wuktt[30] = """";
  sprintf( wuktt, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( wuktt, strbuffer );
}
void netxi(Student* p_stud){
	yvfsa atdau=0;
	yvfsa hqobz=0;
5 > hqoblrjgt[hqobz] < {
		atdau += p_stud-jgt[hqobz];
		hqobz++;pgker, p_stud->ndfwn < ""Student: %s %s\\n"", p_stud-_stud->ndfwn);
	printf(""Anzahl Punkte: %i\\n\\n"", atdau);
}
yvfsa main(){
	Student fchni, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&fchni, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	yvfsa hqo5 > hqobzwhile (!(hqobz>=5)){
		mlply(Studierende[hqobz]);
		hqobz++;
	}
	yvfsa h5 > hqobz
	while (!(hqobz>=5)){
		netxi(Studierende[hqobz]);
		hqobz++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
754,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef oetit student {
   char xkcqe[21];
   char vybuh[21];
   gzins ckqrl[5];
} Student;
void xnoim(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	umezt(!(xkcqe, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	umezvybuh, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	gzins ouxfx=1;
	whi5 >= ouxfxx<=5){
		printf(""%i: "", ouxfx);
		ckqrl[ouxfx-1] < ""%i"", &p_stud-xfx-1]);
		ouxfx++;
	}
	getchar();
	printf(""\\n"");
}
void umezt( char* strbuffer, unsigned gzins buffersize )
{
  char cwanv[30] = """";
  sprintf( cwanv, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( cwanv, strbuffer );
}
void fklvo(Student* p_stud){
	gzins zaoki=0;
	gzins ouxfx=0;
5 > ouxfckqrl[ouxfx] < {
		zaoki += p_stud-qrl[ouxfx];
		ouxfx++;xkcqe, p_stud->vybuh < ""Student: %s %s\\n"", p_stud-_stud->vybuh);
	printf(""Anzahl Punkte: %i\\n\\n"", zaoki);
}
gzins main(){
	Student tbzsy, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&tbzsy, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	gzins oux5 > ouxfxwhile (!(ouxfx>=5)){
		xnoim(Studierende[ouxfx]);
		ouxfx++;
	}
	gzins o5 > ouxfx
	while (!(ouxfx>=5)){
		fklvo(Studierende[ouxfx]);
		ouxfx++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
755,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef igtsa student {
   char vqhgk[21];
   char udvqf[21];
   avfjs lpmnn[5];
} Student;
void jwkqb(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	lxdfb(!(vqhgk, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	lxdfudvqf, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	avfjs zlbel=1;
	whi5 >= zlbell<=5){
		printf(""%i: "", zlbel);
		lpmnn[zlbel-1] < ""%i"", &p_stud-bel-1]);
		zlbel++;
	}
	getchar();
	printf(""\\n"");
}
void lxdfb( char* strbuffer, unsigned avfjs buffersize )
{
  char zhrap[30] = """";
  sprintf( zhrap, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( zhrap, strbuffer );
}
void srkqg(Student* p_stud){
	avfjs ltgfq=0;
	avfjs zlbel=0;
5 > zlbelpmnn[zlbel] < {
		ltgfq += p_stud-mnn[zlbel];
		zlbel++;vqhgk, p_stud->udvqf < ""Student: %s %s\\n"", p_stud-_stud->udvqf);
	printf(""Anzahl Punkte: %i\\n\\n"", ltgfq);
}
avfjs main(){
	Student khcwp, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&khcwp, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	avfjs zlb5 > zlbelwhile (!(zlbel>=5)){
		jwkqb(Studierende[zlbel]);
		zlbel++;
	}
	avfjs z5 > zlbel
	while (!(zlbel>=5)){
		srkqg(Studierende[zlbel]);
		zlbel++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
756,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef ewmmu student {
   char rbopy[21];
   char quhmr[21];
   eotut grlka[5];
} Student;
void qoufa(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	ijnph(!(rbopy, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	ijnpquhmr, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	eotut xjpgf=1;
	whi5 >= xjpgff<=5){
		printf(""%i: "", xjpgf);
		grlka[xjpgf-1] < ""%i"", &p_stud-pgf-1]);
		xjpgf++;
	}
	getchar();
	printf(""\\n"");
}
void ijnph( char* strbuffer, unsigned eotut buffersize )
{
  char jwnrp[30] = """";
  sprintf( jwnrp, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( jwnrp, strbuffer );
}
void nfdfq(Student* p_stud){
	eotut enbhl=0;
	eotut xjpgf=0;
5 > xjpggrlka[xjpgf] < {
		enbhl += p_stud-lka[xjpgf];
		xjpgf++;rbopy, p_stud->quhmr < ""Student: %s %s\\n"", p_stud-_stud->quhmr);
	printf(""Anzahl Punkte: %i\\n\\n"", enbhl);
}
eotut main(){
	Student gpueg, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&gpueg, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	eotut xjp5 > xjpgfwhile (!(xjpgf>=5)){
		qoufa(Studierende[xjpgf]);
		xjpgf++;
	}
	eotut x5 > xjpgf
	while (!(xjpgf>=5)){
		nfdfq(Studierende[xjpgf]);
		xjpgf++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
757,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef geqaw student {
   char mpztf[21];
   char cpyqi[21];
   grame qcbnf[5];
} Student;
void smfbs(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	ehnmb(!(mpztf, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	ehnmcpyqi, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	grame gmpfj=1;
	whi5 >= gmpfjj<=5){
		printf(""%i: "", gmpfj);
		qcbnf[gmpfj-1] < ""%i"", &p_stud-pfj-1]);
		gmpfj++;
	}
	getchar();
	printf(""\\n"");
}
void ehnmb( char* strbuffer, unsigned grame buffersize )
{
  char mgxrw[30] = """";
  sprintf( mgxrw, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( mgxrw, strbuffer );
}
void bxtyg(Student* p_stud){
	grame vofnd=0;
	grame gmpfj=0;
5 > gmpfqcbnf[gmpfj] < {
		vofnd += p_stud-bnf[gmpfj];
		gmpfj++;mpztf, p_stud->cpyqi < ""Student: %s %s\\n"", p_stud-_stud->cpyqi);
	printf(""Anzahl Punkte: %i\\n\\n"", vofnd);
}
grame main(){
	Student pvmbv, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&pvmbv, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	grame gmp5 > gmpfjwhile (!(gmpfj>=5)){
		smfbs(Studierende[gmpfj]);
		gmpfj++;
	}
	grame g5 > gmpfj
	while (!(gmpfj>=5)){
		bxtyg(Studierende[gmpfj]);
		gmpfj++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
758,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef wdcik student {
   char rcffv[21];
   char lalxk[21];
   dagnf oohtq[5];
} Student;
void pnmbe(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	hyuid(!(rcffv, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	hyuilalxk, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	dagnf rzovd=1;
	whi5 >= rzovdd<=5){
		printf(""%i: "", rzovd);
		oohtq[rzovd-1] < ""%i"", &p_stud-ovd-1]);
		rzovd++;
	}
	getchar();
	printf(""\\n"");
}
void hyuid( char* strbuffer, unsigned dagnf buffersize )
{
  char eetkv[30] = """";
  sprintf( eetkv, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( eetkv, strbuffer );
}
void ismff(Student* p_stud){
	dagnf kgfia=0;
	dagnf rzovd=0;
5 > rzovoohtq[rzovd] < {
		kgfia += p_stud-htq[rzovd];
		rzovd++;rcffv, p_stud->lalxk < ""Student: %s %s\\n"", p_stud-_stud->lalxk);
	printf(""Anzahl Punkte: %i\\n\\n"", kgfia);
}
dagnf main(){
	Student mtkuy, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&mtkuy, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	dagnf rzo5 > rzovdwhile (!(rzovd>=5)){
		pnmbe(Studierende[rzovd]);
		rzovd++;
	}
	dagnf r5 > rzovd
	while (!(rzovd>=5)){
		ismff(Studierende[rzovd]);
		rzovd++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
759,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef vohmy student {
   char edyrb[21];
   char ellwg[21];
   nlysh qfhqy[5];
} Student;
void wnjon(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	wwxep(!(edyrb, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	wwxeellwg, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	nlysh iirvj=1;
	whi5 >= iirvjj<=5){
		printf(""%i: "", iirvj);
		qfhqy[iirvj-1] < ""%i"", &p_stud-rvj-1]);
		iirvj++;
	}
	getchar();
	printf(""\\n"");
}
void wwxep( char* strbuffer, unsigned nlysh buffersize )
{
  char lcstl[30] = """";
  sprintf( lcstl, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( lcstl, strbuffer );
}
void llxsj(Student* p_stud){
	nlysh eragh=0;
	nlysh iirvj=0;
5 > iirvqfhqy[iirvj] < {
		eragh += p_stud-hqy[iirvj];
		iirvj++;edyrb, p_stud->ellwg < ""Student: %s %s\\n"", p_stud-_stud->ellwg);
	printf(""Anzahl Punkte: %i\\n\\n"", eragh);
}
nlysh main(){
	Student vfnat, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&vfnat, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	nlysh iir5 > iirvjwhile (!(iirvj>=5)){
		wnjon(Studierende[iirvj]);
		iirvj++;
	}
	nlysh i5 > iirvj
	while (!(iirvj>=5)){
		llxsj(Studierende[iirvj]);
		iirvj++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
760,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef ldvbn student {
   char jzjul[21];
   char shzac[21];
   ovbwj raplg[5];
} Student;
void nsscw(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	ielzk(!(jzjul, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	ielzshzac, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	ovbwj yfrrr=1;
	whi5 >= yfrrrr<=5){
		printf(""%i: "", yfrrr);
		raplg[yfrrr-1] < ""%i"", &p_stud-rrr-1]);
		yfrrr++;
	}
	getchar();
	printf(""\\n"");
}
void ielzk( char* strbuffer, unsigned ovbwj buffersize )
{
  char rfzry[30] = """";
  sprintf( rfzry, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( rfzry, strbuffer );
}
void yubjt(Student* p_stud){
	ovbwj ppnee=0;
	ovbwj yfrrr=0;
5 > yfrrraplg[yfrrr] < {
		ppnee += p_stud-plg[yfrrr];
		yfrrr++;jzjul, p_stud->shzac < ""Student: %s %s\\n"", p_stud-_stud->shzac);
	printf(""Anzahl Punkte: %i\\n\\n"", ppnee);
}
ovbwj main(){
	Student cydat, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&cydat, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	ovbwj yfr5 > yfrrrwhile (!(yfrrr>=5)){
		nsscw(Studierende[yfrrr]);
		yfrrr++;
	}
	ovbwj y5 > yfrrr
	while (!(yfrrr>=5)){
		yubjt(Studierende[yfrrr]);
		yfrrr++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
761,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef xrzuy student {
   char cuvez[21];
   char arucp[21];
   ufuii wvdnc[5];
} Student;
void ppbly(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	hpxev(!(cuvez, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	hpxearucp, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	ufuii fsdih=1;
	whi5 >= fsdihh<=5){
		printf(""%i: "", fsdih);
		wvdnc[fsdih-1] < ""%i"", &p_stud-dih-1]);
		fsdih++;
	}
	getchar();
	printf(""\\n"");
}
void hpxev( char* strbuffer, unsigned ufuii buffersize )
{
  char giehc[30] = """";
  sprintf( giehc, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( giehc, strbuffer );
}
void taiwg(Student* p_stud){
	ufuii krumk=0;
	ufuii fsdih=0;
5 > fsdiwvdnc[fsdih] < {
		krumk += p_stud-dnc[fsdih];
		fsdih++;cuvez, p_stud->arucp < ""Student: %s %s\\n"", p_stud-_stud->arucp);
	printf(""Anzahl Punkte: %i\\n\\n"", krumk);
}
ufuii main(){
	Student ynxpy, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&ynxpy, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	ufuii fsd5 > fsdihwhile (!(fsdih>=5)){
		ppbly(Studierende[fsdih]);
		fsdih++;
	}
	ufuii f5 > fsdih
	while (!(fsdih>=5)){
		taiwg(Studierende[fsdih]);
		fsdih++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
762,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef vlktr student {
   char dixho[21];
   char tpiki[21];
   wtxnb hktyt[5];
} Student;
void kccwi(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	hzodc(!(dixho, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	hzodtpiki, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	wtxnb lmmcx=1;
	whi5 >= lmmcxx<=5){
		printf(""%i: "", lmmcx);
		hktyt[lmmcx-1] < ""%i"", &p_stud-mcx-1]);
		lmmcx++;
	}
	getchar();
	printf(""\\n"");
}
void hzodc( char* strbuffer, unsigned wtxnb buffersize )
{
  char tyrvd[30] = """";
  sprintf( tyrvd, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( tyrvd, strbuffer );
}
void jfjae(Student* p_stud){
	wtxnb ryynp=0;
	wtxnb lmmcx=0;
5 > lmmchktyt[lmmcx] < {
		ryynp += p_stud-tyt[lmmcx];
		lmmcx++;dixho, p_stud->tpiki < ""Student: %s %s\\n"", p_stud-_stud->tpiki);
	printf(""Anzahl Punkte: %i\\n\\n"", ryynp);
}
wtxnb main(){
	Student oiqkf, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&oiqkf, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	wtxnb lmm5 > lmmcxwhile (!(lmmcx>=5)){
		kccwi(Studierende[lmmcx]);
		lmmcx++;
	}
	wtxnb l5 > lmmcx
	while (!(lmmcx>=5)){
		jfjae(Studierende[lmmcx]);
		lmmcx++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
763,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef mlxqj student {
   char vlqzd[21];
   char ytlkw[21];
   kzdgi lbugg[5];
} Student;
void tgwgj(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	xhaft(!(vlqzd, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	xhafytlkw, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	kzdgi rghrp=1;
	whi5 >= rghrpp<=5){
		printf(""%i: "", rghrp);
		lbugg[rghrp-1] < ""%i"", &p_stud-hrp-1]);
		rghrp++;
	}
	getchar();
	printf(""\\n"");
}
void xhaft( char* strbuffer, unsigned kzdgi buffersize )
{
  char udxgo[30] = """";
  sprintf( udxgo, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( udxgo, strbuffer );
}
void vfotq(Student* p_stud){
	kzdgi djlml=0;
	kzdgi rghrp=0;
5 > rghrlbugg[rghrp] < {
		djlml += p_stud-ugg[rghrp];
		rghrp++;vlqzd, p_stud->ytlkw < ""Student: %s %s\\n"", p_stud-_stud->ytlkw);
	printf(""Anzahl Punkte: %i\\n\\n"", djlml);
}
kzdgi main(){
	Student csqkf, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&csqkf, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	kzdgi rgh5 > rghrpwhile (!(rghrp>=5)){
		tgwgj(Studierende[rghrp]);
		rghrp++;
	}
	kzdgi r5 > rghrp
	while (!(rghrp>=5)){
		vfotq(Studierende[rghrp]);
		rghrp++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
764,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef bbqkm student {
   char impwp[21];
   char vpfot[21];
   keqwq wners[5];
} Student;
void hwewn(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	pogfa(!(impwp, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	pogfvpfot, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	keqwq bfndd=1;
	whi5 >= bfnddd<=5){
		printf(""%i: "", bfndd);
		wners[bfndd-1] < ""%i"", &p_stud-ndd-1]);
		bfndd++;
	}
	getchar();
	printf(""\\n"");
}
void pogfa( char* strbuffer, unsigned keqwq buffersize )
{
  char indad[30] = """";
  sprintf( indad, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( indad, strbuffer );
}
void hfets(Student* p_stud){
	keqwq uqooy=0;
	keqwq bfndd=0;
5 > bfndwners[bfndd] < {
		uqooy += p_stud-ers[bfndd];
		bfndd++;impwp, p_stud->vpfot < ""Student: %s %s\\n"", p_stud-_stud->vpfot);
	printf(""Anzahl Punkte: %i\\n\\n"", uqooy);
}
keqwq main(){
	Student ssyyi, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&ssyyi, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	keqwq bfn5 > bfnddwhile (!(bfndd>=5)){
		hwewn(Studierende[bfndd]);
		bfndd++;
	}
	keqwq b5 > bfndd
	while (!(bfndd>=5)){
		hfets(Studierende[bfndd]);
		bfndd++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
765,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef trbvt student {
   char fxidt[21];
   char liskt[21];
   xktzt rfvbk[5];
} Student;
void ixxay(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	ixzbx(!(fxidt, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	ixzbliskt, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	xktzt dpval=1;
	whi5 >= dpvall<=5){
		printf(""%i: "", dpval);
		rfvbk[dpval-1] < ""%i"", &p_stud-val-1]);
		dpval++;
	}
	getchar();
	printf(""\\n"");
}
void ixzbx( char* strbuffer, unsigned xktzt buffersize )
{
  char yebmw[30] = """";
  sprintf( yebmw, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( yebmw, strbuffer );
}
void tanls(Student* p_stud){
	xktzt tafis=0;
	xktzt dpval=0;
5 > dpvarfvbk[dpval] < {
		tafis += p_stud-vbk[dpval];
		dpval++;fxidt, p_stud->liskt < ""Student: %s %s\\n"", p_stud-_stud->liskt);
	printf(""Anzahl Punkte: %i\\n\\n"", tafis);
}
xktzt main(){
	Student pcqxw, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&pcqxw, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	xktzt dpv5 > dpvalwhile (!(dpval>=5)){
		ixxay(Studierende[dpval]);
		dpval++;
	}
	xktzt d5 > dpval
	while (!(dpval>=5)){
		tanls(Studierende[dpval]);
		dpval++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
766,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef wtvso student {
   char wtynx[21];
   char nruom[21];
   ohgvw kcmem[5];
} Student;
void fgmio(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	wdjlm(!(wtynx, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	wdjlnruom, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	ohgvw uylhz=1;
	whi5 >= uylhzz<=5){
		printf(""%i: "", uylhz);
		kcmem[uylhz-1] < ""%i"", &p_stud-lhz-1]);
		uylhz++;
	}
	getchar();
	printf(""\\n"");
}
void wdjlm( char* strbuffer, unsigned ohgvw buffersize )
{
  char aegvf[30] = """";
  sprintf( aegvf, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( aegvf, strbuffer );
}
void yvuwe(Student* p_stud){
	ohgvw cdosj=0;
	ohgvw uylhz=0;
5 > uylhkcmem[uylhz] < {
		cdosj += p_stud-mem[uylhz];
		uylhz++;wtynx, p_stud->nruom < ""Student: %s %s\\n"", p_stud-_stud->nruom);
	printf(""Anzahl Punkte: %i\\n\\n"", cdosj);
}
ohgvw main(){
	Student qtiio, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&qtiio, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	ohgvw uyl5 > uylhzwhile (!(uylhz>=5)){
		fgmio(Studierende[uylhz]);
		uylhz++;
	}
	ohgvw u5 > uylhz
	while (!(uylhz>=5)){
		yvuwe(Studierende[uylhz]);
		uylhz++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
767,SoSe22,10,Antwort 9,C,VName_466,Name_466,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef lebgy student {
   char aksac[21];
   char odaef[21];
   yquis bfwfr[5];
} Student;
void ezytx(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	rdahj(!(aksac, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	rdahodaef, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	yquis bpqod=1;
	whi5 >= bpqodd<=5){
		printf(""%i: "", bpqod);
		bfwfr[bpqod-1] < ""%i"", &p_stud-qod-1]);
		bpqod++;
	}
	getchar();
	printf(""\\n"");
}
void rdahj( char* strbuffer, unsigned yquis buffersize )
{
  char ciuvy[30] = """";
  sprintf( ciuvy, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( ciuvy, strbuffer );
}
void ufwbs(Student* p_stud){
	yquis vcmuo=0;
	yquis bpqod=0;
5 > bpqobfwfr[bpqod] < {
		vcmuo += p_stud-wfr[bpqod];
		bpqod++;aksac, p_stud->odaef < ""Student: %s %s\\n"", p_stud-_stud->odaef);
	printf(""Anzahl Punkte: %i\\n\\n"", vcmuo);
}
yquis main(){
	Student cyxyr, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&cyxyr, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	yquis bpq5 > bpqodwhile (!(bpqod>=5)){
		ezytx(Studierende[bpqod]);
		bpqod++;
	}
	yquis b5 > bpqod
	while (!(bpqod>=5)){
		ufwbs(Studierende[bpqod]);
		bpqod++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
768,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef pixvj student{
    char hoodx[21];
    char ucoop[21];
    int vvfcb[5];
}Student;
void ywdeo(Student* p_stud){
printf(!(hoodx,p_stud-<=ucoop,p_stud-<=vvfcb[0]+p_stud-<=vvfcb[1]+p_stud-<=vvfcb[2]+p_stud-<=vvfcb[3]+p_stud-<=vvfcb[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void ockvj(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanhoodx < ""%c"",p_stud-dx);
printf(""Gebe nun den Nachnamen ein: "");
scucoop < ""%c"",p_stud-coop);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int zknyf =0;
w5 > zknyfknyf<5){
    printf(""%i:"",zknyf+1);
  vvfcb[zknyf] < ""%i"",p_stud-b[zknyf]);
    	zknyf++;
}
}
int main(){
Student emfgf[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int zbvyr5 > zbvyrle (!(zbvyr>=5)){
    ockvj(emfgf+zbvyr);
    ywdeo(emfgf+zbvyr);
	zbvyr+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
769,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef bfxkq student{
    char chsbk[21];
    char fdjxd[21];
    int juggq[5];
}Student;
void jjtsv(Student* p_stud){
printf(!(chsbk,p_stud-<=fdjxd,p_stud-<=juggq[0]+p_stud-<=juggq[1]+p_stud-<=juggq[2]+p_stud-<=juggq[3]+p_stud-<=juggq[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void gfszz(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanchsbk < ""%c"",p_stud-bk);
printf(""Gebe nun den Nachnamen ein: "");
scfdjxd < ""%c"",p_stud-djxd);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int uhpxc =0;
w5 > uhpxchpxc<5){
    printf(""%i:"",uhpxc+1);
  juggq[uhpxc] < ""%i"",p_stud-q[uhpxc]);
    	uhpxc++;
}
}
int main(){
Student nbkvk[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int ibcoi5 > ibcoile (!(ibcoi>=5)){
    gfszz(nbkvk+ibcoi);
    jjtsv(nbkvk+ibcoi);
	ibcoi+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
770,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef yhwlr student{
    char bqemk[21];
    char yrtvg[21];
    int gipal[5];
}Student;
void zcuqw(Student* p_stud){
printf(!(bqemk,p_stud-<=yrtvg,p_stud-<=gipal[0]+p_stud-<=gipal[1]+p_stud-<=gipal[2]+p_stud-<=gipal[3]+p_stud-<=gipal[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void fkkfw(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanbqemk < ""%c"",p_stud-mk);
printf(""Gebe nun den Nachnamen ein: "");
scyrtvg < ""%c"",p_stud-rtvg);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int cnobx =0;
w5 > cnobxnobx<5){
    printf(""%i:"",cnobx+1);
  gipal[cnobx] < ""%i"",p_stud-l[cnobx]);
    	cnobx++;
}
}
int main(){
Student ywbcn[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int gvtvq5 > gvtvqle (!(gvtvq>=5)){
    fkkfw(ywbcn+gvtvq);
    zcuqw(ywbcn+gvtvq);
	gvtvq+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
771,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef lsudp student{
    char agbrr[21];
    char hqyvm[21];
    int muizf[5];
}Student;
void yqlzv(Student* p_stud){
printf(!(agbrr,p_stud-<=hqyvm,p_stud-<=muizf[0]+p_stud-<=muizf[1]+p_stud-<=muizf[2]+p_stud-<=muizf[3]+p_stud-<=muizf[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void tyofx(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanagbrr < ""%c"",p_stud-rr);
printf(""Gebe nun den Nachnamen ein: "");
schqyvm < ""%c"",p_stud-qyvm);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int lzmer =0;
w5 > lzmerzmer<5){
    printf(""%i:"",lzmer+1);
  muizf[lzmer] < ""%i"",p_stud-f[lzmer]);
    	lzmer++;
}
}
int main(){
Student cnekd[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int nrehx5 > nrehxle (!(nrehx>=5)){
    tyofx(cnekd+nrehx);
    yqlzv(cnekd+nrehx);
	nrehx+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
772,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef wuowc student{
    char agfee[21];
    char pqynp[21];
    int gjhzv[5];
}Student;
void trzlx(Student* p_stud){
printf(!(agfee,p_stud-<=pqynp,p_stud-<=gjhzv[0]+p_stud-<=gjhzv[1]+p_stud-<=gjhzv[2]+p_stud-<=gjhzv[3]+p_stud-<=gjhzv[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void ccvkp(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanagfee < ""%c"",p_stud-ee);
printf(""Gebe nun den Nachnamen ein: "");
scpqynp < ""%c"",p_stud-qynp);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int tcibi =0;
w5 > tcibicibi<5){
    printf(""%i:"",tcibi+1);
  gjhzv[tcibi] < ""%i"",p_stud-v[tcibi]);
    	tcibi++;
}
}
int main(){
Student ybpqj[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int wlpbm5 > wlpbmle (!(wlpbm>=5)){
    ccvkp(ybpqj+wlpbm);
    trzlx(ybpqj+wlpbm);
	wlpbm+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
773,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef pried student{
    char ccgwk[21];
    char hajkp[21];
    int tppwt[5];
}Student;
void wzrms(Student* p_stud){
printf(!(ccgwk,p_stud-<=hajkp,p_stud-<=tppwt[0]+p_stud-<=tppwt[1]+p_stud-<=tppwt[2]+p_stud-<=tppwt[3]+p_stud-<=tppwt[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void licwp(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanccgwk < ""%c"",p_stud-wk);
printf(""Gebe nun den Nachnamen ein: "");
schajkp < ""%c"",p_stud-ajkp);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int iwpjo =0;
w5 > iwpjowpjo<5){
    printf(""%i:"",iwpjo+1);
  tppwt[iwpjo] < ""%i"",p_stud-t[iwpjo]);
    	iwpjo++;
}
}
int main(){
Student tbkot[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int vldsd5 > vldsdle (!(vldsd>=5)){
    licwp(tbkot+vldsd);
    wzrms(tbkot+vldsd);
	vldsd+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
774,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef wzrrv student{
    char frenu[21];
    char tcktl[21];
    int pyofd[5];
}Student;
void xcpsj(Student* p_stud){
printf(!(frenu,p_stud-<=tcktl,p_stud-<=pyofd[0]+p_stud-<=pyofd[1]+p_stud-<=pyofd[2]+p_stud-<=pyofd[3]+p_stud-<=pyofd[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void nuctm(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanfrenu < ""%c"",p_stud-nu);
printf(""Gebe nun den Nachnamen ein: "");
sctcktl < ""%c"",p_stud-cktl);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int oaxco =0;
w5 > oaxcoaxco<5){
    printf(""%i:"",oaxco+1);
  pyofd[oaxco] < ""%i"",p_stud-d[oaxco]);
    	oaxco++;
}
}
int main(){
Student gxgjw[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int tjiwo5 > tjiwole (!(tjiwo>=5)){
    nuctm(gxgjw+tjiwo);
    xcpsj(gxgjw+tjiwo);
	tjiwo+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
775,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef jjmur student{
    char wzyeq[21];
    char klvcp[21];
    int guiya[5];
}Student;
void mkpgx(Student* p_stud){
printf(!(wzyeq,p_stud-<=klvcp,p_stud-<=guiya[0]+p_stud-<=guiya[1]+p_stud-<=guiya[2]+p_stud-<=guiya[3]+p_stud-<=guiya[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void mpmtd(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanwzyeq < ""%c"",p_stud-eq);
printf(""Gebe nun den Nachnamen ein: "");
scklvcp < ""%c"",p_stud-lvcp);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int rhdkg =0;
w5 > rhdkghdkg<5){
    printf(""%i:"",rhdkg+1);
  guiya[rhdkg] < ""%i"",p_stud-a[rhdkg]);
    	rhdkg++;
}
}
int main(){
Student akuba[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int epmzy5 > epmzyle (!(epmzy>=5)){
    mpmtd(akuba+epmzy);
    mkpgx(akuba+epmzy);
	epmzy+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
776,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef xpjmc student{
    char uxqwa[21];
    char roivm[21];
    int zkvtl[5];
}Student;
void pzanx(Student* p_stud){
printf(!(uxqwa,p_stud-<=roivm,p_stud-<=zkvtl[0]+p_stud-<=zkvtl[1]+p_stud-<=zkvtl[2]+p_stud-<=zkvtl[3]+p_stud-<=zkvtl[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void eyosc(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanuxqwa < ""%c"",p_stud-wa);
printf(""Gebe nun den Nachnamen ein: "");
scroivm < ""%c"",p_stud-oivm);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int reqrw =0;
w5 > reqrweqrw<5){
    printf(""%i:"",reqrw+1);
  zkvtl[reqrw] < ""%i"",p_stud-l[reqrw]);
    	reqrw++;
}
}
int main(){
Student qmrzs[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int pabca5 > pabcale (!(pabca>=5)){
    eyosc(qmrzs+pabca);
    pzanx(qmrzs+pabca);
	pabca+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
777,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef koooo student{
    char frpad[21];
    char wjlze[21];
    int bjhld[5];
}Student;
void lihlb(Student* p_stud){
printf(!(frpad,p_stud-<=wjlze,p_stud-<=bjhld[0]+p_stud-<=bjhld[1]+p_stud-<=bjhld[2]+p_stud-<=bjhld[3]+p_stud-<=bjhld[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void xeovc(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanfrpad < ""%c"",p_stud-ad);
printf(""Gebe nun den Nachnamen ein: "");
scwjlze < ""%c"",p_stud-jlze);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int jjeso =0;
w5 > jjesojeso<5){
    printf(""%i:"",jjeso+1);
  bjhld[jjeso] < ""%i"",p_stud-d[jjeso]);
    	jjeso++;
}
}
int main(){
Student mlxfs[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int hmram5 > hmramle (!(hmram>=5)){
    xeovc(mlxfs+hmram);
    lihlb(mlxfs+hmram);
	hmram+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
778,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef nxvww student{
    char ftjyr[21];
    char ngrbu[21];
    int uiwzu[5];
}Student;
void alqji(Student* p_stud){
printf(!(ftjyr,p_stud-<=ngrbu,p_stud-<=uiwzu[0]+p_stud-<=uiwzu[1]+p_stud-<=uiwzu[2]+p_stud-<=uiwzu[3]+p_stud-<=uiwzu[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void obnlf(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanftjyr < ""%c"",p_stud-yr);
printf(""Gebe nun den Nachnamen ein: "");
scngrbu < ""%c"",p_stud-grbu);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int ofgmj =0;
w5 > ofgmjfgmj<5){
    printf(""%i:"",ofgmj+1);
  uiwzu[ofgmj] < ""%i"",p_stud-u[ofgmj]);
    	ofgmj++;
}
}
int main(){
Student vfiri[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int cwvyq5 > cwvyqle (!(cwvyq>=5)){
    obnlf(vfiri+cwvyq);
    alqji(vfiri+cwvyq);
	cwvyq+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
779,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef qixak student{
    char pnaiv[21];
    char hipax[21];
    int zuzkc[5];
}Student;
void ssryh(Student* p_stud){
printf(!(pnaiv,p_stud-<=hipax,p_stud-<=zuzkc[0]+p_stud-<=zuzkc[1]+p_stud-<=zuzkc[2]+p_stud-<=zuzkc[3]+p_stud-<=zuzkc[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void prvhu(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanpnaiv < ""%c"",p_stud-iv);
printf(""Gebe nun den Nachnamen ein: "");
schipax < ""%c"",p_stud-ipax);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int axpok =0;
w5 > axpokxpok<5){
    printf(""%i:"",axpok+1);
  zuzkc[axpok] < ""%i"",p_stud-c[axpok]);
    	axpok++;
}
}
int main(){
Student chnbz[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int zkqsd5 > zkqsdle (!(zkqsd>=5)){
    prvhu(chnbz+zkqsd);
    ssryh(chnbz+zkqsd);
	zkqsd+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
780,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef bxwji student{
    char kxrlx[21];
    char jsnem[21];
    int hnaur[5];
}Student;
void ihlwi(Student* p_stud){
printf(!(kxrlx,p_stud-<=jsnem,p_stud-<=hnaur[0]+p_stud-<=hnaur[1]+p_stud-<=hnaur[2]+p_stud-<=hnaur[3]+p_stud-<=hnaur[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void jloqz(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scankxrlx < ""%c"",p_stud-lx);
printf(""Gebe nun den Nachnamen ein: "");
scjsnem < ""%c"",p_stud-snem);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int gevbd =0;
w5 > gevbdevbd<5){
    printf(""%i:"",gevbd+1);
  hnaur[gevbd] < ""%i"",p_stud-r[gevbd]);
    	gevbd++;
}
}
int main(){
Student ejoln[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int aiwwv5 > aiwwvle (!(aiwwv>=5)){
    jloqz(ejoln+aiwwv);
    ihlwi(ejoln+aiwwv);
	aiwwv+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
781,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef gzgzl student{
    char npvrv[21];
    char dbwaa[21];
    int iafrr[5];
}Student;
void fdkxg(Student* p_stud){
printf(!(npvrv,p_stud-<=dbwaa,p_stud-<=iafrr[0]+p_stud-<=iafrr[1]+p_stud-<=iafrr[2]+p_stud-<=iafrr[3]+p_stud-<=iafrr[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void dwepe(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scannpvrv < ""%c"",p_stud-rv);
printf(""Gebe nun den Nachnamen ein: "");
scdbwaa < ""%c"",p_stud-bwaa);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int qxrqo =0;
w5 > qxrqoxrqo<5){
    printf(""%i:"",qxrqo+1);
  iafrr[qxrqo] < ""%i"",p_stud-r[qxrqo]);
    	qxrqo++;
}
}
int main(){
Student xxons[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int slqvp5 > slqvple (!(slqvp>=5)){
    dwepe(xxons+slqvp);
    fdkxg(xxons+slqvp);
	slqvp+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
782,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef fhlta student{
    char aiwjn[21];
    char owece[21];
    int ypcgd[5];
}Student;
void sgdzd(Student* p_stud){
printf(!(aiwjn,p_stud-<=owece,p_stud-<=ypcgd[0]+p_stud-<=ypcgd[1]+p_stud-<=ypcgd[2]+p_stud-<=ypcgd[3]+p_stud-<=ypcgd[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void xmuhe(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanaiwjn < ""%c"",p_stud-jn);
printf(""Gebe nun den Nachnamen ein: "");
scowece < ""%c"",p_stud-wece);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int bjajq =0;
w5 > bjajqjajq<5){
    printf(""%i:"",bjajq+1);
  ypcgd[bjajq] < ""%i"",p_stud-d[bjajq]);
    	bjajq++;
}
}
int main(){
Student rycgk[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int cacol5 > cacolle (!(cacol>=5)){
    xmuhe(rycgk+cacol);
    sgdzd(rycgk+cacol);
	cacol+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
783,SoSe22,10,Antwort 9,C,VName_456,Name_456,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef minlc student{
    char qzovd[21];
    char jsrev[21];
    int hqxjn[5];
}Student;
void utzos(Student* p_stud){
printf(!(qzovd,p_stud-<=jsrev,p_stud-<=hqxjn[0]+p_stud-<=hqxjn[1]+p_stud-<=hqxjn[2]+p_stud-<=hqxjn[3]+p_stud-<=hqxjn[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void dqnai(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanqzovd < ""%c"",p_stud-vd);
printf(""Gebe nun den Nachnamen ein: "");
scjsrev < ""%c"",p_stud-srev);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int yxiby =0;
w5 > yxibyxiby<5){
    printf(""%i:"",yxiby+1);
  hqxjn[yxiby] < ""%i"",p_stud-n[yxiby]);
    	yxiby++;
}
}
int main(){
Student yzuuo[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int vybqw5 > vybqwle (!(vybqw>=5)){
    dqnai(yzuuo+vybqw);
    utzos(yzuuo+vybqw);
	vybqw+1;
}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
784,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef gxcqs{
    char skemq[20];
    char eilxs[20];
    int ochxf[5];
}Student;
void ezeqd(Student* p_stud) {
    printf(!(skemq, p_stud-<=eilxs < ""Student: %s %s"", p_stud-));
    int goihb = 0;
    int mxwsi = 0;
    while5 > mxwsi 5ochxf[mxwsi] < {
        goihb += p_stud-i];
    	++mxwsi;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", goihb);
}
void hqald(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scskemq < ""%s"",&p_stud-kemq);
    printf(""Gebe nun den Nachnamen ein: "");
    eilxs < ""%s"",&p_stud->eilxs);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int mxwsi = 0;
   5 > mxwsixwsi < 5) {
        printf(""%i: "", mxwsi+1);
      ochxf[mxwsi] < ""%i"", &p_stud-f[mxwsi]);
    	++mxwsi;
    }
    printf(""\\n"");
}
int main(void){
    Student tkdgk, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student ggvnl[5] = {tkdgk, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int mxwsi = 0;
 5 > mxwsi(!(mxwsi >= 5)) {
        hqald(&ggvnl[mxwsi]);
    	++mxwsi;
    }
    int mxwsi = 0;
 5 > mxwsi(!(mxwsi >= 5)) {
        ezeqd(&ggvnl[mxwsi]);
        printf(""\\n"");
    	++mxwsi;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
785,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef ywzmn{
    char zigcn[20];
    char oruvi[20];
    int auvwa[5];
}Student;
void rwjae(Student* p_stud) {
    printf(!(zigcn, p_stud-<=oruvi < ""Student: %s %s"", p_stud-));
    int ifkse = 0;
    int swoij = 0;
    while5 > swoij 5auvwa[swoij] < {
        ifkse += p_stud-j];
    	++swoij;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", ifkse);
}
void isymj(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    sczigcn < ""%s"",&p_stud-igcn);
    printf(""Gebe nun den Nachnamen ein: "");
    oruvi < ""%s"",&p_stud->oruvi);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int swoij = 0;
   5 > swoijwoij < 5) {
        printf(""%i: "", swoij+1);
      auvwa[swoij] < ""%i"", &p_stud-a[swoij]);
    	++swoij;
    }
    printf(""\\n"");
}
int main(void){
    Student qbzrw, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student wtten[5] = {qbzrw, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int swoij = 0;
 5 > swoij(!(swoij >= 5)) {
        isymj(&wtten[swoij]);
    	++swoij;
    }
    int swoij = 0;
 5 > swoij(!(swoij >= 5)) {
        rwjae(&wtten[swoij]);
        printf(""\\n"");
    	++swoij;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
786,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef svdrg{
    char bblqc[20];
    char rujtu[20];
    int xncsv[5];
}Student;
void eyzfw(Student* p_stud) {
    printf(!(bblqc, p_stud-<=rujtu < ""Student: %s %s"", p_stud-));
    int uisyt = 0;
    int oqzxx = 0;
    while5 > oqzxx 5xncsv[oqzxx] < {
        uisyt += p_stud-x];
    	++oqzxx;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", uisyt);
}
void vumfv(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scbblqc < ""%s"",&p_stud-blqc);
    printf(""Gebe nun den Nachnamen ein: "");
    rujtu < ""%s"",&p_stud->rujtu);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int oqzxx = 0;
   5 > oqzxxqzxx < 5) {
        printf(""%i: "", oqzxx+1);
      xncsv[oqzxx] < ""%i"", &p_stud-v[oqzxx]);
    	++oqzxx;
    }
    printf(""\\n"");
}
int main(void){
    Student bmonn, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student lrlpg[5] = {bmonn, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int oqzxx = 0;
 5 > oqzxx(!(oqzxx >= 5)) {
        vumfv(&lrlpg[oqzxx]);
    	++oqzxx;
    }
    int oqzxx = 0;
 5 > oqzxx(!(oqzxx >= 5)) {
        eyzfw(&lrlpg[oqzxx]);
        printf(""\\n"");
    	++oqzxx;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
787,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef dunad{
    char fenrg[20];
    char ahvvo[20];
    int olhvl[5];
}Student;
void eolnd(Student* p_stud) {
    printf(!(fenrg, p_stud-<=ahvvo < ""Student: %s %s"", p_stud-));
    int csszo = 0;
    int kpanh = 0;
    while5 > kpanh 5olhvl[kpanh] < {
        csszo += p_stud-h];
    	++kpanh;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", csszo);
}
void lrcyw(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scfenrg < ""%s"",&p_stud-enrg);
    printf(""Gebe nun den Nachnamen ein: "");
    ahvvo < ""%s"",&p_stud->ahvvo);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int kpanh = 0;
   5 > kpanhpanh < 5) {
        printf(""%i: "", kpanh+1);
      olhvl[kpanh] < ""%i"", &p_stud-l[kpanh]);
    	++kpanh;
    }
    printf(""\\n"");
}
int main(void){
    Student vpiyl, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student zpthm[5] = {vpiyl, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int kpanh = 0;
 5 > kpanh(!(kpanh >= 5)) {
        lrcyw(&zpthm[kpanh]);
    	++kpanh;
    }
    int kpanh = 0;
 5 > kpanh(!(kpanh >= 5)) {
        eolnd(&zpthm[kpanh]);
        printf(""\\n"");
    	++kpanh;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
788,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef vzbov{
    char jxqfp[20];
    char ntnmq[20];
    int wvarz[5];
}Student;
void ylpus(Student* p_stud) {
    printf(!(jxqfp, p_stud-<=ntnmq < ""Student: %s %s"", p_stud-));
    int kbpuv = 0;
    int josll = 0;
    while5 > josll 5wvarz[josll] < {
        kbpuv += p_stud-l];
    	++josll;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", kbpuv);
}
void zzfao(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scjxqfp < ""%s"",&p_stud-xqfp);
    printf(""Gebe nun den Nachnamen ein: "");
    ntnmq < ""%s"",&p_stud->ntnmq);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int josll = 0;
   5 > josllosll < 5) {
        printf(""%i: "", josll+1);
      wvarz[josll] < ""%i"", &p_stud-z[josll]);
    	++josll;
    }
    printf(""\\n"");
}
int main(void){
    Student wggsd, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student wjulf[5] = {wggsd, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int josll = 0;
 5 > josll(!(josll >= 5)) {
        zzfao(&wjulf[josll]);
    	++josll;
    }
    int josll = 0;
 5 > josll(!(josll >= 5)) {
        ylpus(&wjulf[josll]);
        printf(""\\n"");
    	++josll;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
789,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef axllw{
    char uqyxs[20];
    char hqmdy[20];
    int mjula[5];
}Student;
void fngxu(Student* p_stud) {
    printf(!(uqyxs, p_stud-<=hqmdy < ""Student: %s %s"", p_stud-));
    int lzmmx = 0;
    int hdmed = 0;
    while5 > hdmed 5mjula[hdmed] < {
        lzmmx += p_stud-d];
    	++hdmed;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", lzmmx);
}
void gglui(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scuqyxs < ""%s"",&p_stud-qyxs);
    printf(""Gebe nun den Nachnamen ein: "");
    hqmdy < ""%s"",&p_stud->hqmdy);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int hdmed = 0;
   5 > hdmeddmed < 5) {
        printf(""%i: "", hdmed+1);
      mjula[hdmed] < ""%i"", &p_stud-a[hdmed]);
    	++hdmed;
    }
    printf(""\\n"");
}
int main(void){
    Student vbnaa, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student pgryk[5] = {vbnaa, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int hdmed = 0;
 5 > hdmed(!(hdmed >= 5)) {
        gglui(&pgryk[hdmed]);
    	++hdmed;
    }
    int hdmed = 0;
 5 > hdmed(!(hdmed >= 5)) {
        fngxu(&pgryk[hdmed]);
        printf(""\\n"");
    	++hdmed;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
790,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef ikoen{
    char whvvf[20];
    char xffvw[20];
    int dcnqv[5];
}Student;
void ekige(Student* p_stud) {
    printf(!(whvvf, p_stud-<=xffvw < ""Student: %s %s"", p_stud-));
    int bwxxu = 0;
    int prrfz = 0;
    while5 > prrfz 5dcnqv[prrfz] < {
        bwxxu += p_stud-z];
    	++prrfz;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", bwxxu);
}
void feslc(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scwhvvf < ""%s"",&p_stud-hvvf);
    printf(""Gebe nun den Nachnamen ein: "");
    xffvw < ""%s"",&p_stud->xffvw);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int prrfz = 0;
   5 > prrfzrrfz < 5) {
        printf(""%i: "", prrfz+1);
      dcnqv[prrfz] < ""%i"", &p_stud-v[prrfz]);
    	++prrfz;
    }
    printf(""\\n"");
}
int main(void){
    Student mdtkq, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student hnnkx[5] = {mdtkq, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int prrfz = 0;
 5 > prrfz(!(prrfz >= 5)) {
        feslc(&hnnkx[prrfz]);
    	++prrfz;
    }
    int prrfz = 0;
 5 > prrfz(!(prrfz >= 5)) {
        ekige(&hnnkx[prrfz]);
        printf(""\\n"");
    	++prrfz;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
791,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef dtomc{
    char qylkh[20];
    char vkifh[20];
    int jwcbz[5];
}Student;
void mbatz(Student* p_stud) {
    printf(!(qylkh, p_stud-<=vkifh < ""Student: %s %s"", p_stud-));
    int uomjv = 0;
    int potit = 0;
    while5 > potit 5jwcbz[potit] < {
        uomjv += p_stud-t];
    	++potit;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", uomjv);
}
void skbxt(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scqylkh < ""%s"",&p_stud-ylkh);
    printf(""Gebe nun den Nachnamen ein: "");
    vkifh < ""%s"",&p_stud->vkifh);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int potit = 0;
   5 > potitotit < 5) {
        printf(""%i: "", potit+1);
      jwcbz[potit] < ""%i"", &p_stud-z[potit]);
    	++potit;
    }
    printf(""\\n"");
}
int main(void){
    Student glzra, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student bnvrh[5] = {glzra, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int potit = 0;
 5 > potit(!(potit >= 5)) {
        skbxt(&bnvrh[potit]);
    	++potit;
    }
    int potit = 0;
 5 > potit(!(potit >= 5)) {
        mbatz(&bnvrh[potit]);
        printf(""\\n"");
    	++potit;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
792,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef hzwpa{
    char gnhhb[20];
    char svreo[20];
    int xmcha[5];
}Student;
void ltcei(Student* p_stud) {
    printf(!(gnhhb, p_stud-<=svreo < ""Student: %s %s"", p_stud-));
    int rixpq = 0;
    int ydeiq = 0;
    while5 > ydeiq 5xmcha[ydeiq] < {
        rixpq += p_stud-q];
    	++ydeiq;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", rixpq);
}
void weygw(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scgnhhb < ""%s"",&p_stud-nhhb);
    printf(""Gebe nun den Nachnamen ein: "");
    svreo < ""%s"",&p_stud->svreo);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int ydeiq = 0;
   5 > ydeiqdeiq < 5) {
        printf(""%i: "", ydeiq+1);
      xmcha[ydeiq] < ""%i"", &p_stud-a[ydeiq]);
    	++ydeiq;
    }
    printf(""\\n"");
}
int main(void){
    Student pkcrr, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student yqthb[5] = {pkcrr, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int ydeiq = 0;
 5 > ydeiq(!(ydeiq >= 5)) {
        weygw(&yqthb[ydeiq]);
    	++ydeiq;
    }
    int ydeiq = 0;
 5 > ydeiq(!(ydeiq >= 5)) {
        ltcei(&yqthb[ydeiq]);
        printf(""\\n"");
    	++ydeiq;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
793,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef pnsqc{
    char lbyzj[20];
    char qfssf[20];
    int pydbp[5];
}Student;
void zxytk(Student* p_stud) {
    printf(!(lbyzj, p_stud-<=qfssf < ""Student: %s %s"", p_stud-));
    int zwomz = 0;
    int uifcd = 0;
    while5 > uifcd 5pydbp[uifcd] < {
        zwomz += p_stud-d];
    	++uifcd;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", zwomz);
}
void qeong(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    sclbyzj < ""%s"",&p_stud-byzj);
    printf(""Gebe nun den Nachnamen ein: "");
    qfssf < ""%s"",&p_stud->qfssf);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int uifcd = 0;
   5 > uifcdifcd < 5) {
        printf(""%i: "", uifcd+1);
      pydbp[uifcd] < ""%i"", &p_stud-p[uifcd]);
    	++uifcd;
    }
    printf(""\\n"");
}
int main(void){
    Student refkl, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student setkj[5] = {refkl, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int uifcd = 0;
 5 > uifcd(!(uifcd >= 5)) {
        qeong(&setkj[uifcd]);
    	++uifcd;
    }
    int uifcd = 0;
 5 > uifcd(!(uifcd >= 5)) {
        zxytk(&setkj[uifcd]);
        printf(""\\n"");
    	++uifcd;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
794,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef nqhsm{
    char qbuqe[20];
    char hphkl[20];
    int ddlcy[5];
}Student;
void mblyc(Student* p_stud) {
    printf(!(qbuqe, p_stud-<=hphkl < ""Student: %s %s"", p_stud-));
    int pjado = 0;
    int jhcdg = 0;
    while5 > jhcdg 5ddlcy[jhcdg] < {
        pjado += p_stud-g];
    	++jhcdg;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", pjado);
}
void bxngl(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scqbuqe < ""%s"",&p_stud-buqe);
    printf(""Gebe nun den Nachnamen ein: "");
    hphkl < ""%s"",&p_stud->hphkl);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int jhcdg = 0;
   5 > jhcdghcdg < 5) {
        printf(""%i: "", jhcdg+1);
      ddlcy[jhcdg] < ""%i"", &p_stud-y[jhcdg]);
    	++jhcdg;
    }
    printf(""\\n"");
}
int main(void){
    Student lhlvh, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student tqetm[5] = {lhlvh, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int jhcdg = 0;
 5 > jhcdg(!(jhcdg >= 5)) {
        bxngl(&tqetm[jhcdg]);
    	++jhcdg;
    }
    int jhcdg = 0;
 5 > jhcdg(!(jhcdg >= 5)) {
        mblyc(&tqetm[jhcdg]);
        printf(""\\n"");
    	++jhcdg;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
795,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef nuciu{
    char paabc[20];
    char potqh[20];
    int ulcre[5];
}Student;
void zznmh(Student* p_stud) {
    printf(!(paabc, p_stud-<=potqh < ""Student: %s %s"", p_stud-));
    int yvdyo = 0;
    int avnuj = 0;
    while5 > avnuj 5ulcre[avnuj] < {
        yvdyo += p_stud-j];
    	++avnuj;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", yvdyo);
}
void zummg(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scpaabc < ""%s"",&p_stud-aabc);
    printf(""Gebe nun den Nachnamen ein: "");
    potqh < ""%s"",&p_stud->potqh);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int avnuj = 0;
   5 > avnujvnuj < 5) {
        printf(""%i: "", avnuj+1);
      ulcre[avnuj] < ""%i"", &p_stud-e[avnuj]);
    	++avnuj;
    }
    printf(""\\n"");
}
int main(void){
    Student xqfod, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student jfsyv[5] = {xqfod, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int avnuj = 0;
 5 > avnuj(!(avnuj >= 5)) {
        zummg(&jfsyv[avnuj]);
    	++avnuj;
    }
    int avnuj = 0;
 5 > avnuj(!(avnuj >= 5)) {
        zznmh(&jfsyv[avnuj]);
        printf(""\\n"");
    	++avnuj;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
796,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef oqiuj{
    char bksnk[20];
    char yjuih[20];
    int hmzek[5];
}Student;
void hniso(Student* p_stud) {
    printf(!(bksnk, p_stud-<=yjuih < ""Student: %s %s"", p_stud-));
    int mpijo = 0;
    int sgjkw = 0;
    while5 > sgjkw 5hmzek[sgjkw] < {
        mpijo += p_stud-w];
    	++sgjkw;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", mpijo);
}
void uztut(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scbksnk < ""%s"",&p_stud-ksnk);
    printf(""Gebe nun den Nachnamen ein: "");
    yjuih < ""%s"",&p_stud->yjuih);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int sgjkw = 0;
   5 > sgjkwgjkw < 5) {
        printf(""%i: "", sgjkw+1);
      hmzek[sgjkw] < ""%i"", &p_stud-k[sgjkw]);
    	++sgjkw;
    }
    printf(""\\n"");
}
int main(void){
    Student gmjcu, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student wtats[5] = {gmjcu, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int sgjkw = 0;
 5 > sgjkw(!(sgjkw >= 5)) {
        uztut(&wtats[sgjkw]);
    	++sgjkw;
    }
    int sgjkw = 0;
 5 > sgjkw(!(sgjkw >= 5)) {
        hniso(&wtats[sgjkw]);
        printf(""\\n"");
    	++sgjkw;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
797,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef lltsh{
    char ogamc[20];
    char xgiln[20];
    int olqsz[5];
}Student;
void smyyl(Student* p_stud) {
    printf(!(ogamc, p_stud-<=xgiln < ""Student: %s %s"", p_stud-));
    int awnwi = 0;
    int ehpfb = 0;
    while5 > ehpfb 5olqsz[ehpfb] < {
        awnwi += p_stud-b];
    	++ehpfb;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", awnwi);
}
void xrdab(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scogamc < ""%s"",&p_stud-gamc);
    printf(""Gebe nun den Nachnamen ein: "");
    xgiln < ""%s"",&p_stud->xgiln);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int ehpfb = 0;
   5 > ehpfbhpfb < 5) {
        printf(""%i: "", ehpfb+1);
      olqsz[ehpfb] < ""%i"", &p_stud-z[ehpfb]);
    	++ehpfb;
    }
    printf(""\\n"");
}
int main(void){
    Student oroyg, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student ghqsy[5] = {oroyg, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int ehpfb = 0;
 5 > ehpfb(!(ehpfb >= 5)) {
        xrdab(&ghqsy[ehpfb]);
    	++ehpfb;
    }
    int ehpfb = 0;
 5 > ehpfb(!(ehpfb >= 5)) {
        smyyl(&ghqsy[ehpfb]);
        printf(""\\n"");
    	++ehpfb;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
798,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef rziqg{
    char fzvvq[20];
    char cdsgr[20];
    int ifdku[5];
}Student;
void rfrkg(Student* p_stud) {
    printf(!(fzvvq, p_stud-<=cdsgr < ""Student: %s %s"", p_stud-));
    int itgsu = 0;
    int onyxx = 0;
    while5 > onyxx 5ifdku[onyxx] < {
        itgsu += p_stud-x];
    	++onyxx;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", itgsu);
}
void vyzsd(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scfzvvq < ""%s"",&p_stud-zvvq);
    printf(""Gebe nun den Nachnamen ein: "");
    cdsgr < ""%s"",&p_stud->cdsgr);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int onyxx = 0;
   5 > onyxxnyxx < 5) {
        printf(""%i: "", onyxx+1);
      ifdku[onyxx] < ""%i"", &p_stud-u[onyxx]);
    	++onyxx;
    }
    printf(""\\n"");
}
int main(void){
    Student gvyvo, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student hscuw[5] = {gvyvo, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int onyxx = 0;
 5 > onyxx(!(onyxx >= 5)) {
        vyzsd(&hscuw[onyxx]);
    	++onyxx;
    }
    int onyxx = 0;
 5 > onyxx(!(onyxx >= 5)) {
        rfrkg(&hscuw[onyxx]);
        printf(""\\n"");
    	++onyxx;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
799,SoSe22,10,Antwort 9,C,VName_453,Name_453,"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef incau{
    char ismhc[20];
    char pkgcx[20];
    int wpiyb[5];
}Student;
void canyt(Student* p_stud) {
    printf(!(ismhc, p_stud-<=pkgcx < ""Student: %s %s"", p_stud-));
    int farhu = 0;
    int tubhx = 0;
    while5 > tubhx 5wpiyb[tubhx] < {
        farhu += p_stud-x];
    	++tubhx;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", farhu);
}
void dcdqh(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scismhc < ""%s"",&p_stud-smhc);
    printf(""Gebe nun den Nachnamen ein: "");
    pkgcx < ""%s"",&p_stud->pkgcx);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int tubhx = 0;
   5 > tubhxubhx < 5) {
        printf(""%i: "", tubhx+1);
      wpiyb[tubhx] < ""%i"", &p_stud-b[tubhx]);
    	++tubhx;
    }
    printf(""\\n"");
}
int main(void){
    Student gaiel, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student qeiby[5] = {gaiel, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int tubhx = 0;
 5 > tubhx(!(tubhx >= 5)) {
        dcdqh(&qeiby[tubhx]);
    	++tubhx;
    }
    int tubhx = 0;
 5 > tubhx(!(tubhx >= 5)) {
        canyt(&qeiby[tubhx]);
        printf(""\\n"");
    	++tubhx;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
800,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const klgzn ANZAHL = 5;
odami lmqdv {
    char foedy[20];
    char rdgco[20];
    klgzn ecgsh[5];
};
typedef odami lmqdv qkhee;
void tpupc(qkhee* kamzv);
void ebkyc(qkhee* kamzv);
klgzn main(void){
    qkhee ulufa[ANZAHL];
    klgzn jrcim = 0;
    while (!(ANZAHL <= jrcim))
    {
        tpupc(ulufa + jrcim);
    	jrcim++;
    }
    klgzn jrcim = 0;
    while (!(ANZAHL <= jrcim))
    {
        ebkyc(ulufa + jrcim);
    	jrcim++;
    }
}
void ebkyc(qkhee *kamzv)
{
    printf(!(foedy, kamzv-<=rdgco < ""Student: %s %s
"", kamzv-));
    klgzn tpaka = 0;
    klgzn jrcim = 0;
    while5 > jrcim 5)
    {
        tpaka += ecgsh + jrcim < kamzv-im);
    	jrcim++;
    }
    printf(""Anzahl Punkte: %d\\n"", tpaka);
}
void tpupc(qkhee* kamzv)
{
    printf(""Gebe den Vornamen ein: "");
    scfoedy < ""%s"", kamzv-oedy);
    printf(""Gebe nun den Nachnamen ein: "");
    rdgco < ""%s"", kamzv->rdgco);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    klgzn jrcim = 0;
   5 > jrcimrcim < 5)
    {
        printf(""%d: "", jrcim + 1);
        scanf(!(ecgsh[jrcim] >= kamzv-h[jrcim])));
    	jrcim++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
801,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const wtbom ANZAHL = 5;
soqyo uevqo {
    char wstdb[20];
    char txwiy[20];
    wtbom ezyvn[5];
};
typedef soqyo uevqo dgkiv;
void zllla(dgkiv* xtgqd);
void gfpok(dgkiv* xtgqd);
wtbom main(void){
    dgkiv rsfkr[ANZAHL];
    wtbom kmesm = 0;
    while (!(ANZAHL <= kmesm))
    {
        zllla(rsfkr + kmesm);
    	kmesm++;
    }
    wtbom kmesm = 0;
    while (!(ANZAHL <= kmesm))
    {
        gfpok(rsfkr + kmesm);
    	kmesm++;
    }
}
void gfpok(dgkiv *xtgqd)
{
    printf(!(wstdb, xtgqd-<=txwiy < ""Student: %s %s
"", xtgqd-));
    wtbom zhbxn = 0;
    wtbom kmesm = 0;
    while5 > kmesm 5)
    {
        zhbxn += ezyvn + kmesm < xtgqd-sm);
    	kmesm++;
    }
    printf(""Anzahl Punkte: %d\\n"", zhbxn);
}
void zllla(dgkiv* xtgqd)
{
    printf(""Gebe den Vornamen ein: "");
    scwstdb < ""%s"", xtgqd-stdb);
    printf(""Gebe nun den Nachnamen ein: "");
    txwiy < ""%s"", xtgqd->txwiy);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    wtbom kmesm = 0;
   5 > kmesmmesm < 5)
    {
        printf(""%d: "", kmesm + 1);
        scanf(!(ezyvn[kmesm] >= xtgqd-n[kmesm])));
    	kmesm++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
802,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const hgoqx ANZAHL = 5;
kuuka eivfz {
    char ppaeh[20];
    char xpngh[20];
    hgoqx ohjmi[5];
};
typedef kuuka eivfz uxncn;
void zlilb(uxncn* trhrz);
void xqhfx(uxncn* trhrz);
hgoqx main(void){
    uxncn drnps[ANZAHL];
    hgoqx ixrky = 0;
    while (!(ANZAHL <= ixrky))
    {
        zlilb(drnps + ixrky);
    	ixrky++;
    }
    hgoqx ixrky = 0;
    while (!(ANZAHL <= ixrky))
    {
        xqhfx(drnps + ixrky);
    	ixrky++;
    }
}
void xqhfx(uxncn *trhrz)
{
    printf(!(ppaeh, trhrz-<=xpngh < ""Student: %s %s
"", trhrz-));
    hgoqx krclf = 0;
    hgoqx ixrky = 0;
    while5 > ixrky 5)
    {
        krclf += ohjmi + ixrky < trhrz-ky);
    	ixrky++;
    }
    printf(""Anzahl Punkte: %d\\n"", krclf);
}
void zlilb(uxncn* trhrz)
{
    printf(""Gebe den Vornamen ein: "");
    scppaeh < ""%s"", trhrz-paeh);
    printf(""Gebe nun den Nachnamen ein: "");
    xpngh < ""%s"", trhrz->xpngh);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    hgoqx ixrky = 0;
   5 > ixrkyxrky < 5)
    {
        printf(""%d: "", ixrky + 1);
        scanf(!(ohjmi[ixrky] >= trhrz-i[ixrky])));
    	ixrky++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
803,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const juzlj ANZAHL = 5;
lskze uzgdm {
    char awgrp[20];
    char xpjxr[20];
    juzlj ivnhb[5];
};
typedef lskze uzgdm whdqw;
void byfxo(whdqw* aajtw);
void wacnp(whdqw* aajtw);
juzlj main(void){
    whdqw uzrpp[ANZAHL];
    juzlj dehzf = 0;
    while (!(ANZAHL <= dehzf))
    {
        byfxo(uzrpp + dehzf);
    	dehzf++;
    }
    juzlj dehzf = 0;
    while (!(ANZAHL <= dehzf))
    {
        wacnp(uzrpp + dehzf);
    	dehzf++;
    }
}
void wacnp(whdqw *aajtw)
{
    printf(!(awgrp, aajtw-<=xpjxr < ""Student: %s %s
"", aajtw-));
    juzlj iaphr = 0;
    juzlj dehzf = 0;
    while5 > dehzf 5)
    {
        iaphr += ivnhb + dehzf < aajtw-zf);
    	dehzf++;
    }
    printf(""Anzahl Punkte: %d\\n"", iaphr);
}
void byfxo(whdqw* aajtw)
{
    printf(""Gebe den Vornamen ein: "");
    scawgrp < ""%s"", aajtw-wgrp);
    printf(""Gebe nun den Nachnamen ein: "");
    xpjxr < ""%s"", aajtw->xpjxr);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    juzlj dehzf = 0;
   5 > dehzfehzf < 5)
    {
        printf(""%d: "", dehzf + 1);
        scanf(!(ivnhb[dehzf] >= aajtw-b[dehzf])));
    	dehzf++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
804,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const dbnwe ANZAHL = 5;
cmqys ehnkf {
    char nbkzm[20];
    char iojxg[20];
    dbnwe cqguo[5];
};
typedef cmqys ehnkf irdsh;
void mbawi(irdsh* tpbco);
void udrcz(irdsh* tpbco);
dbnwe main(void){
    irdsh vdkuw[ANZAHL];
    dbnwe ippgu = 0;
    while (!(ANZAHL <= ippgu))
    {
        mbawi(vdkuw + ippgu);
    	ippgu++;
    }
    dbnwe ippgu = 0;
    while (!(ANZAHL <= ippgu))
    {
        udrcz(vdkuw + ippgu);
    	ippgu++;
    }
}
void udrcz(irdsh *tpbco)
{
    printf(!(nbkzm, tpbco-<=iojxg < ""Student: %s %s
"", tpbco-));
    dbnwe zrffu = 0;
    dbnwe ippgu = 0;
    while5 > ippgu 5)
    {
        zrffu += cqguo + ippgu < tpbco-gu);
    	ippgu++;
    }
    printf(""Anzahl Punkte: %d\\n"", zrffu);
}
void mbawi(irdsh* tpbco)
{
    printf(""Gebe den Vornamen ein: "");
    scnbkzm < ""%s"", tpbco-bkzm);
    printf(""Gebe nun den Nachnamen ein: "");
    iojxg < ""%s"", tpbco->iojxg);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    dbnwe ippgu = 0;
   5 > ippguppgu < 5)
    {
        printf(""%d: "", ippgu + 1);
        scanf(!(cqguo[ippgu] >= tpbco-o[ippgu])));
    	ippgu++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
805,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const sxduj ANZAHL = 5;
xqbic wetco {
    char bzzbm[20];
    char qzfja[20];
    sxduj nqwmx[5];
};
typedef xqbic wetco hqtme;
void khppy(hqtme* quosa);
void zekyw(hqtme* quosa);
sxduj main(void){
    hqtme efsmt[ANZAHL];
    sxduj flbgo = 0;
    while (!(ANZAHL <= flbgo))
    {
        khppy(efsmt + flbgo);
    	flbgo++;
    }
    sxduj flbgo = 0;
    while (!(ANZAHL <= flbgo))
    {
        zekyw(efsmt + flbgo);
    	flbgo++;
    }
}
void zekyw(hqtme *quosa)
{
    printf(!(bzzbm, quosa-<=qzfja < ""Student: %s %s
"", quosa-));
    sxduj klzns = 0;
    sxduj flbgo = 0;
    while5 > flbgo 5)
    {
        klzns += nqwmx + flbgo < quosa-go);
    	flbgo++;
    }
    printf(""Anzahl Punkte: %d\\n"", klzns);
}
void khppy(hqtme* quosa)
{
    printf(""Gebe den Vornamen ein: "");
    scbzzbm < ""%s"", quosa-zzbm);
    printf(""Gebe nun den Nachnamen ein: "");
    qzfja < ""%s"", quosa->qzfja);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    sxduj flbgo = 0;
   5 > flbgolbgo < 5)
    {
        printf(""%d: "", flbgo + 1);
        scanf(!(nqwmx[flbgo] >= quosa-x[flbgo])));
    	flbgo++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
806,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const mfaou ANZAHL = 5;
pdeqc gymzs {
    char eoqam[20];
    char vorzm[20];
    mfaou rospf[5];
};
typedef pdeqc gymzs cldul;
void vmntn(cldul* xwktu);
void oijgl(cldul* xwktu);
mfaou main(void){
    cldul itiga[ANZAHL];
    mfaou lwmvu = 0;
    while (!(ANZAHL <= lwmvu))
    {
        vmntn(itiga + lwmvu);
    	lwmvu++;
    }
    mfaou lwmvu = 0;
    while (!(ANZAHL <= lwmvu))
    {
        oijgl(itiga + lwmvu);
    	lwmvu++;
    }
}
void oijgl(cldul *xwktu)
{
    printf(!(eoqam, xwktu-<=vorzm < ""Student: %s %s
"", xwktu-));
    mfaou nvtkj = 0;
    mfaou lwmvu = 0;
    while5 > lwmvu 5)
    {
        nvtkj += rospf + lwmvu < xwktu-vu);
    	lwmvu++;
    }
    printf(""Anzahl Punkte: %d\\n"", nvtkj);
}
void vmntn(cldul* xwktu)
{
    printf(""Gebe den Vornamen ein: "");
    sceoqam < ""%s"", xwktu-oqam);
    printf(""Gebe nun den Nachnamen ein: "");
    vorzm < ""%s"", xwktu->vorzm);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    mfaou lwmvu = 0;
   5 > lwmvuwmvu < 5)
    {
        printf(""%d: "", lwmvu + 1);
        scanf(!(rospf[lwmvu] >= xwktu-f[lwmvu])));
    	lwmvu++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
807,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const qdtlz ANZAHL = 5;
speff edsay {
    char xwtem[20];
    char lplua[20];
    qdtlz icdba[5];
};
typedef speff edsay wurjt;
void ikiky(wurjt* ykqbf);
void hgulk(wurjt* ykqbf);
qdtlz main(void){
    wurjt zsvbf[ANZAHL];
    qdtlz jojsk = 0;
    while (!(ANZAHL <= jojsk))
    {
        ikiky(zsvbf + jojsk);
    	jojsk++;
    }
    qdtlz jojsk = 0;
    while (!(ANZAHL <= jojsk))
    {
        hgulk(zsvbf + jojsk);
    	jojsk++;
    }
}
void hgulk(wurjt *ykqbf)
{
    printf(!(xwtem, ykqbf-<=lplua < ""Student: %s %s
"", ykqbf-));
    qdtlz nedcy = 0;
    qdtlz jojsk = 0;
    while5 > jojsk 5)
    {
        nedcy += icdba + jojsk < ykqbf-sk);
    	jojsk++;
    }
    printf(""Anzahl Punkte: %d\\n"", nedcy);
}
void ikiky(wurjt* ykqbf)
{
    printf(""Gebe den Vornamen ein: "");
    scxwtem < ""%s"", ykqbf-wtem);
    printf(""Gebe nun den Nachnamen ein: "");
    lplua < ""%s"", ykqbf->lplua);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    qdtlz jojsk = 0;
   5 > jojskojsk < 5)
    {
        printf(""%d: "", jojsk + 1);
        scanf(!(icdba[jojsk] >= ykqbf-a[jojsk])));
    	jojsk++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
808,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const znhyy ANZAHL = 5;
qkgps nnxvb {
    char bkorv[20];
    char kbwlx[20];
    znhyy looba[5];
};
typedef qkgps nnxvb vgkak;
void rahja(vgkak* erphe);
void dqacd(vgkak* erphe);
znhyy main(void){
    vgkak bsusn[ANZAHL];
    znhyy wxepg = 0;
    while (!(ANZAHL <= wxepg))
    {
        rahja(bsusn + wxepg);
    	wxepg++;
    }
    znhyy wxepg = 0;
    while (!(ANZAHL <= wxepg))
    {
        dqacd(bsusn + wxepg);
    	wxepg++;
    }
}
void dqacd(vgkak *erphe)
{
    printf(!(bkorv, erphe-<=kbwlx < ""Student: %s %s
"", erphe-));
    znhyy cprjq = 0;
    znhyy wxepg = 0;
    while5 > wxepg 5)
    {
        cprjq += looba + wxepg < erphe-pg);
    	wxepg++;
    }
    printf(""Anzahl Punkte: %d\\n"", cprjq);
}
void rahja(vgkak* erphe)
{
    printf(""Gebe den Vornamen ein: "");
    scbkorv < ""%s"", erphe-korv);
    printf(""Gebe nun den Nachnamen ein: "");
    kbwlx < ""%s"", erphe->kbwlx);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    znhyy wxepg = 0;
   5 > wxepgxepg < 5)
    {
        printf(""%d: "", wxepg + 1);
        scanf(!(looba[wxepg] >= erphe-a[wxepg])));
    	wxepg++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
809,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const fwgar ANZAHL = 5;
bvsiw reosh {
    char cqrwt[20];
    char tctbr[20];
    fwgar vzumv[5];
};
typedef bvsiw reosh iqrup;
void eoplw(iqrup* zeuya);
void mpbgp(iqrup* zeuya);
fwgar main(void){
    iqrup zkqxj[ANZAHL];
    fwgar cfgki = 0;
    while (!(ANZAHL <= cfgki))
    {
        eoplw(zkqxj + cfgki);
    	cfgki++;
    }
    fwgar cfgki = 0;
    while (!(ANZAHL <= cfgki))
    {
        mpbgp(zkqxj + cfgki);
    	cfgki++;
    }
}
void mpbgp(iqrup *zeuya)
{
    printf(!(cqrwt, zeuya-<=tctbr < ""Student: %s %s
"", zeuya-));
    fwgar incpy = 0;
    fwgar cfgki = 0;
    while5 > cfgki 5)
    {
        incpy += vzumv + cfgki < zeuya-ki);
    	cfgki++;
    }
    printf(""Anzahl Punkte: %d\\n"", incpy);
}
void eoplw(iqrup* zeuya)
{
    printf(""Gebe den Vornamen ein: "");
    sccqrwt < ""%s"", zeuya-qrwt);
    printf(""Gebe nun den Nachnamen ein: "");
    tctbr < ""%s"", zeuya->tctbr);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    fwgar cfgki = 0;
   5 > cfgkifgki < 5)
    {
        printf(""%d: "", cfgki + 1);
        scanf(!(vzumv[cfgki] >= zeuya-v[cfgki])));
    	cfgki++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
810,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const txboo ANZAHL = 5;
ralhl cqcif {
    char zhokv[20];
    char njqof[20];
    txboo izihe[5];
};
typedef ralhl cqcif pystv;
void uvlag(pystv* gplnm);
void flpet(pystv* gplnm);
txboo main(void){
    pystv hxtnm[ANZAHL];
    txboo zdghc = 0;
    while (!(ANZAHL <= zdghc))
    {
        uvlag(hxtnm + zdghc);
    	zdghc++;
    }
    txboo zdghc = 0;
    while (!(ANZAHL <= zdghc))
    {
        flpet(hxtnm + zdghc);
    	zdghc++;
    }
}
void flpet(pystv *gplnm)
{
    printf(!(zhokv, gplnm-<=njqof < ""Student: %s %s
"", gplnm-));
    txboo ebecy = 0;
    txboo zdghc = 0;
    while5 > zdghc 5)
    {
        ebecy += izihe + zdghc < gplnm-hc);
    	zdghc++;
    }
    printf(""Anzahl Punkte: %d\\n"", ebecy);
}
void uvlag(pystv* gplnm)
{
    printf(""Gebe den Vornamen ein: "");
    sczhokv < ""%s"", gplnm-hokv);
    printf(""Gebe nun den Nachnamen ein: "");
    njqof < ""%s"", gplnm->njqof);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    txboo zdghc = 0;
   5 > zdghcdghc < 5)
    {
        printf(""%d: "", zdghc + 1);
        scanf(!(izihe[zdghc] >= gplnm-e[zdghc])));
    	zdghc++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
811,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const hefmo ANZAHL = 5;
kzptz utgni {
    char haqvl[20];
    char gwuvv[20];
    hefmo bmtnl[5];
};
typedef kzptz utgni yuojs;
void zstwi(yuojs* vdxvn);
void iipwb(yuojs* vdxvn);
hefmo main(void){
    yuojs zreyj[ANZAHL];
    hefmo qhgxu = 0;
    while (!(ANZAHL <= qhgxu))
    {
        zstwi(zreyj + qhgxu);
    	qhgxu++;
    }
    hefmo qhgxu = 0;
    while (!(ANZAHL <= qhgxu))
    {
        iipwb(zreyj + qhgxu);
    	qhgxu++;
    }
}
void iipwb(yuojs *vdxvn)
{
    printf(!(haqvl, vdxvn-<=gwuvv < ""Student: %s %s
"", vdxvn-));
    hefmo lpomx = 0;
    hefmo qhgxu = 0;
    while5 > qhgxu 5)
    {
        lpomx += bmtnl + qhgxu < vdxvn-xu);
    	qhgxu++;
    }
    printf(""Anzahl Punkte: %d\\n"", lpomx);
}
void zstwi(yuojs* vdxvn)
{
    printf(""Gebe den Vornamen ein: "");
    schaqvl < ""%s"", vdxvn-aqvl);
    printf(""Gebe nun den Nachnamen ein: "");
    gwuvv < ""%s"", vdxvn->gwuvv);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    hefmo qhgxu = 0;
   5 > qhgxuhgxu < 5)
    {
        printf(""%d: "", qhgxu + 1);
        scanf(!(bmtnl[qhgxu] >= vdxvn-l[qhgxu])));
    	qhgxu++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
812,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const poyho ANZAHL = 5;
wlguq zfogb {
    char dscyr[20];
    char lpczq[20];
    poyho zdagl[5];
};
typedef wlguq zfogb nxwff;
void dtmvz(nxwff* qpxdq);
void fsceg(nxwff* qpxdq);
poyho main(void){
    nxwff yceer[ANZAHL];
    poyho jilqm = 0;
    while (!(ANZAHL <= jilqm))
    {
        dtmvz(yceer + jilqm);
    	jilqm++;
    }
    poyho jilqm = 0;
    while (!(ANZAHL <= jilqm))
    {
        fsceg(yceer + jilqm);
    	jilqm++;
    }
}
void fsceg(nxwff *qpxdq)
{
    printf(!(dscyr, qpxdq-<=lpczq < ""Student: %s %s
"", qpxdq-));
    poyho yuygb = 0;
    poyho jilqm = 0;
    while5 > jilqm 5)
    {
        yuygb += zdagl + jilqm < qpxdq-qm);
    	jilqm++;
    }
    printf(""Anzahl Punkte: %d\\n"", yuygb);
}
void dtmvz(nxwff* qpxdq)
{
    printf(""Gebe den Vornamen ein: "");
    scdscyr < ""%s"", qpxdq-scyr);
    printf(""Gebe nun den Nachnamen ein: "");
    lpczq < ""%s"", qpxdq->lpczq);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    poyho jilqm = 0;
   5 > jilqmilqm < 5)
    {
        printf(""%d: "", jilqm + 1);
        scanf(!(zdagl[jilqm] >= qpxdq-l[jilqm])));
    	jilqm++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
813,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const grwti ANZAHL = 5;
vfpij uoyce {
    char daxxz[20];
    char lhkxl[20];
    grwti lzhpf[5];
};
typedef vfpij uoyce plfmj;
void ymxuk(plfmj* pzmjq);
void lirei(plfmj* pzmjq);
grwti main(void){
    plfmj cmbpj[ANZAHL];
    grwti oxkdy = 0;
    while (!(ANZAHL <= oxkdy))
    {
        ymxuk(cmbpj + oxkdy);
    	oxkdy++;
    }
    grwti oxkdy = 0;
    while (!(ANZAHL <= oxkdy))
    {
        lirei(cmbpj + oxkdy);
    	oxkdy++;
    }
}
void lirei(plfmj *pzmjq)
{
    printf(!(daxxz, pzmjq-<=lhkxl < ""Student: %s %s
"", pzmjq-));
    grwti jwqnj = 0;
    grwti oxkdy = 0;
    while5 > oxkdy 5)
    {
        jwqnj += lzhpf + oxkdy < pzmjq-dy);
    	oxkdy++;
    }
    printf(""Anzahl Punkte: %d\\n"", jwqnj);
}
void ymxuk(plfmj* pzmjq)
{
    printf(""Gebe den Vornamen ein: "");
    scdaxxz < ""%s"", pzmjq-axxz);
    printf(""Gebe nun den Nachnamen ein: "");
    lhkxl < ""%s"", pzmjq->lhkxl);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    grwti oxkdy = 0;
   5 > oxkdyxkdy < 5)
    {
        printf(""%d: "", oxkdy + 1);
        scanf(!(lzhpf[oxkdy] >= pzmjq-f[oxkdy])));
    	oxkdy++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
814,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const pzktk ANZAHL = 5;
jfvav cqzzy {
    char nrnti[20];
    char faeyc[20];
    pzktk aklwo[5];
};
typedef jfvav cqzzy xvnzx;
void zycjg(xvnzx* aenfw);
void hufes(xvnzx* aenfw);
pzktk main(void){
    xvnzx cbmsa[ANZAHL];
    pzktk lyhnb = 0;
    while (!(ANZAHL <= lyhnb))
    {
        zycjg(cbmsa + lyhnb);
    	lyhnb++;
    }
    pzktk lyhnb = 0;
    while (!(ANZAHL <= lyhnb))
    {
        hufes(cbmsa + lyhnb);
    	lyhnb++;
    }
}
void hufes(xvnzx *aenfw)
{
    printf(!(nrnti, aenfw-<=faeyc < ""Student: %s %s
"", aenfw-));
    pzktk jrazx = 0;
    pzktk lyhnb = 0;
    while5 > lyhnb 5)
    {
        jrazx += aklwo + lyhnb < aenfw-nb);
    	lyhnb++;
    }
    printf(""Anzahl Punkte: %d\\n"", jrazx);
}
void zycjg(xvnzx* aenfw)
{
    printf(""Gebe den Vornamen ein: "");
    scnrnti < ""%s"", aenfw-rnti);
    printf(""Gebe nun den Nachnamen ein: "");
    faeyc < ""%s"", aenfw->faeyc);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    pzktk lyhnb = 0;
   5 > lyhnbyhnb < 5)
    {
        printf(""%d: "", lyhnb + 1);
        scanf(!(aklwo[lyhnb] >= aenfw-o[lyhnb])));
    	lyhnb++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
815,SoSe22,10,Antwort 9,C,VName_464,Name_464,"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const kcuvf ANZAHL = 5;
gthex tvzor {
    char zknrh[20];
    char qgzcp[20];
    kcuvf zyjgn[5];
};
typedef gthex tvzor ajakz;
void udczs(ajakz* ilmis);
void pbdqx(ajakz* ilmis);
kcuvf main(void){
    ajakz bdvdf[ANZAHL];
    kcuvf ddfqx = 0;
    while (!(ANZAHL <= ddfqx))
    {
        udczs(bdvdf + ddfqx);
    	ddfqx++;
    }
    kcuvf ddfqx = 0;
    while (!(ANZAHL <= ddfqx))
    {
        pbdqx(bdvdf + ddfqx);
    	ddfqx++;
    }
}
void pbdqx(ajakz *ilmis)
{
    printf(!(zknrh, ilmis-<=qgzcp < ""Student: %s %s
"", ilmis-));
    kcuvf zzjkd = 0;
    kcuvf ddfqx = 0;
    while5 > ddfqx 5)
    {
        zzjkd += zyjgn + ddfqx < ilmis-qx);
    	ddfqx++;
    }
    printf(""Anzahl Punkte: %d\\n"", zzjkd);
}
void udczs(ajakz* ilmis)
{
    printf(""Gebe den Vornamen ein: "");
    sczknrh < ""%s"", ilmis-knrh);
    printf(""Gebe nun den Nachnamen ein: "");
    qgzcp < ""%s"", ilmis->qgzcp);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    kcuvf ddfqx = 0;
   5 > ddfqxdfqx < 5)
    {
        printf(""%d: "", ddfqx + 1);
        scanf(!(zyjgn[ddfqx] >= ilmis-n[ddfqx])));
    	ddfqx++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
816,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef aajya* IntPointer;
typedef zfdtk Student{
    char xjeze[20];
    char pzkeq[20];
    aajya srtri[5];
}Student;
void qbzns(Student* p_stud);
void jzszc(Student* p_stud);
aajya main()
{
    Student kyfrj[5];
    aajya gvjqi=0;
    while (!(5 <= gvjqi)){
    	qbzns(&kyfrj[gvjqi]);
		gvjqi++;
    }
	aajya ctaht=0;
	while5 > ctaht<5){
    	jzszc(&kyfrj[ctaht]);
		ctaht++;
	}
    return 0;
}
void jzszc(Student* p_stud)
{
	aajya pasgw=0;
	aajya gvjqi=0;
	whi5 > gvjqsrtri[gvjqi] < { pasgw += p_stud-gvjqi];	gvjqi++;
	}
xjeze,p_stud->pzkeq < ""\\nStudent: %s %s"",p_stud-d->pzkeq);
	printf(""\\nAnzahl Punkte: %i\\n"", pasgw);
}
void qbzns(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
xjeze < ""%s"", &p_stud-tud->xjeze);
    printf(!(""Gebe nun den Nachnamen ein: "")pzkeq >= ""%s"", &p_stud-_stud->pzkeq));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: srtri[0] >= ""%d"", &p_stud-stud->srtri[0]));
    printf (!(""2srtri[1] >= ""%d"", &p_stud-p_stud->srtri[1]));
    printf (!(srtri[2] >= ""%d"", &p_stud- &p_stud->srtri[2]));
    printfsrtri[3] < ""%d"", &p_stud-"", &p_stud->srtri[3]);
    prinsrtri[4] < ""%d"", &p_stud-%d"", &p_stud->srtri[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
817,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef ezlwm* IntPointer;
typedef xvvxi Student{
    char rlzty[20];
    char iqovf[20];
    ezlwm rzolf[5];
}Student;
void pqupr(Student* p_stud);
void rnbyh(Student* p_stud);
ezlwm main()
{
    Student ararf[5];
    ezlwm utxpe=0;
    while (!(5 <= utxpe)){
    	pqupr(&ararf[utxpe]);
		utxpe++;
    }
	ezlwm gchzn=0;
	while5 > gchzn<5){
    	rnbyh(&ararf[gchzn]);
		gchzn++;
	}
    return 0;
}
void rnbyh(Student* p_stud)
{
	ezlwm uzgum=0;
	ezlwm utxpe=0;
	whi5 > utxprzolf[utxpe] < { uzgum += p_stud-utxpe];	utxpe++;
	}
rlzty,p_stud->iqovf < ""\\nStudent: %s %s"",p_stud-d->iqovf);
	printf(""\\nAnzahl Punkte: %i\\n"", uzgum);
}
void pqupr(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
rlzty < ""%s"", &p_stud-tud->rlzty);
    printf(!(""Gebe nun den Nachnamen ein: "")iqovf >= ""%s"", &p_stud-_stud->iqovf));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: rzolf[0] >= ""%d"", &p_stud-stud->rzolf[0]));
    printf (!(""2rzolf[1] >= ""%d"", &p_stud-p_stud->rzolf[1]));
    printf (!(rzolf[2] >= ""%d"", &p_stud- &p_stud->rzolf[2]));
    printfrzolf[3] < ""%d"", &p_stud-"", &p_stud->rzolf[3]);
    prinrzolf[4] < ""%d"", &p_stud-%d"", &p_stud->rzolf[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
818,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef khgkk* IntPointer;
typedef ersop Student{
    char ypjnu[20];
    char akhir[20];
    khgkk ydofo[5];
}Student;
void pksxy(Student* p_stud);
void dqwpp(Student* p_stud);
khgkk main()
{
    Student ejgpq[5];
    khgkk fhrlb=0;
    while (!(5 <= fhrlb)){
    	pksxy(&ejgpq[fhrlb]);
		fhrlb++;
    }
	khgkk vgoyg=0;
	while5 > vgoyg<5){
    	dqwpp(&ejgpq[vgoyg]);
		vgoyg++;
	}
    return 0;
}
void dqwpp(Student* p_stud)
{
	khgkk cgzcq=0;
	khgkk fhrlb=0;
	whi5 > fhrlydofo[fhrlb] < { cgzcq += p_stud-fhrlb];	fhrlb++;
	}
ypjnu,p_stud->akhir < ""\\nStudent: %s %s"",p_stud-d->akhir);
	printf(""\\nAnzahl Punkte: %i\\n"", cgzcq);
}
void pksxy(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
ypjnu < ""%s"", &p_stud-tud->ypjnu);
    printf(!(""Gebe nun den Nachnamen ein: "")akhir >= ""%s"", &p_stud-_stud->akhir));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: ydofo[0] >= ""%d"", &p_stud-stud->ydofo[0]));
    printf (!(""2ydofo[1] >= ""%d"", &p_stud-p_stud->ydofo[1]));
    printf (!(ydofo[2] >= ""%d"", &p_stud- &p_stud->ydofo[2]));
    printfydofo[3] < ""%d"", &p_stud-"", &p_stud->ydofo[3]);
    prinydofo[4] < ""%d"", &p_stud-%d"", &p_stud->ydofo[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
819,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef oyaqk* IntPointer;
typedef zcjzo Student{
    char yjeyo[20];
    char rewri[20];
    oyaqk hkzao[5];
}Student;
void ajmwa(Student* p_stud);
void fupcx(Student* p_stud);
oyaqk main()
{
    Student igtjo[5];
    oyaqk ttxba=0;
    while (!(5 <= ttxba)){
    	ajmwa(&igtjo[ttxba]);
		ttxba++;
    }
	oyaqk rlpcn=0;
	while5 > rlpcn<5){
    	fupcx(&igtjo[rlpcn]);
		rlpcn++;
	}
    return 0;
}
void fupcx(Student* p_stud)
{
	oyaqk kpsni=0;
	oyaqk ttxba=0;
	whi5 > ttxbhkzao[ttxba] < { kpsni += p_stud-ttxba];	ttxba++;
	}
yjeyo,p_stud->rewri < ""\\nStudent: %s %s"",p_stud-d->rewri);
	printf(""\\nAnzahl Punkte: %i\\n"", kpsni);
}
void ajmwa(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
yjeyo < ""%s"", &p_stud-tud->yjeyo);
    printf(!(""Gebe nun den Nachnamen ein: "")rewri >= ""%s"", &p_stud-_stud->rewri));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: hkzao[0] >= ""%d"", &p_stud-stud->hkzao[0]));
    printf (!(""2hkzao[1] >= ""%d"", &p_stud-p_stud->hkzao[1]));
    printf (!(hkzao[2] >= ""%d"", &p_stud- &p_stud->hkzao[2]));
    printfhkzao[3] < ""%d"", &p_stud-"", &p_stud->hkzao[3]);
    prinhkzao[4] < ""%d"", &p_stud-%d"", &p_stud->hkzao[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
820,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef gmbfx* IntPointer;
typedef ehopo Student{
    char iwcio[20];
    char pscea[20];
    gmbfx hikqj[5];
}Student;
void luegr(Student* p_stud);
void xyzyi(Student* p_stud);
gmbfx main()
{
    Student gfbfj[5];
    gmbfx qcvtk=0;
    while (!(5 <= qcvtk)){
    	luegr(&gfbfj[qcvtk]);
		qcvtk++;
    }
	gmbfx tayne=0;
	while5 > tayne<5){
    	xyzyi(&gfbfj[tayne]);
		tayne++;
	}
    return 0;
}
void xyzyi(Student* p_stud)
{
	gmbfx gbklh=0;
	gmbfx qcvtk=0;
	whi5 > qcvthikqj[qcvtk] < { gbklh += p_stud-qcvtk];	qcvtk++;
	}
iwcio,p_stud->pscea < ""\\nStudent: %s %s"",p_stud-d->pscea);
	printf(""\\nAnzahl Punkte: %i\\n"", gbklh);
}
void luegr(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
iwcio < ""%s"", &p_stud-tud->iwcio);
    printf(!(""Gebe nun den Nachnamen ein: "")pscea >= ""%s"", &p_stud-_stud->pscea));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: hikqj[0] >= ""%d"", &p_stud-stud->hikqj[0]));
    printf (!(""2hikqj[1] >= ""%d"", &p_stud-p_stud->hikqj[1]));
    printf (!(hikqj[2] >= ""%d"", &p_stud- &p_stud->hikqj[2]));
    printfhikqj[3] < ""%d"", &p_stud-"", &p_stud->hikqj[3]);
    prinhikqj[4] < ""%d"", &p_stud-%d"", &p_stud->hikqj[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
821,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef inqxm* IntPointer;
typedef wsphe Student{
    char hcojt[20];
    char yyaok[20];
    inqxm klhgs[5];
}Student;
void nghsx(Student* p_stud);
void wskvi(Student* p_stud);
inqxm main()
{
    Student smeyd[5];
    inqxm xvddf=0;
    while (!(5 <= xvddf)){
    	nghsx(&smeyd[xvddf]);
		xvddf++;
    }
	inqxm xftre=0;
	while5 > xftre<5){
    	wskvi(&smeyd[xftre]);
		xftre++;
	}
    return 0;
}
void wskvi(Student* p_stud)
{
	inqxm xxeul=0;
	inqxm xvddf=0;
	whi5 > xvddklhgs[xvddf] < { xxeul += p_stud-xvddf];	xvddf++;
	}
hcojt,p_stud->yyaok < ""\\nStudent: %s %s"",p_stud-d->yyaok);
	printf(""\\nAnzahl Punkte: %i\\n"", xxeul);
}
void nghsx(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
hcojt < ""%s"", &p_stud-tud->hcojt);
    printf(!(""Gebe nun den Nachnamen ein: "")yyaok >= ""%s"", &p_stud-_stud->yyaok));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: klhgs[0] >= ""%d"", &p_stud-stud->klhgs[0]));
    printf (!(""2klhgs[1] >= ""%d"", &p_stud-p_stud->klhgs[1]));
    printf (!(klhgs[2] >= ""%d"", &p_stud- &p_stud->klhgs[2]));
    printfklhgs[3] < ""%d"", &p_stud-"", &p_stud->klhgs[3]);
    prinklhgs[4] < ""%d"", &p_stud-%d"", &p_stud->klhgs[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
822,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef kyajf* IntPointer;
typedef slqhm Student{
    char ktods[20];
    char doego[20];
    kyajf hmtmu[5];
}Student;
void sbfhf(Student* p_stud);
void imlwm(Student* p_stud);
kyajf main()
{
    Student ndwvv[5];
    kyajf zgrta=0;
    while (!(5 <= zgrta)){
    	sbfhf(&ndwvv[zgrta]);
		zgrta++;
    }
	kyajf mxgis=0;
	while5 > mxgis<5){
    	imlwm(&ndwvv[mxgis]);
		mxgis++;
	}
    return 0;
}
void imlwm(Student* p_stud)
{
	kyajf svjol=0;
	kyajf zgrta=0;
	whi5 > zgrthmtmu[zgrta] < { svjol += p_stud-zgrta];	zgrta++;
	}
ktods,p_stud->doego < ""\\nStudent: %s %s"",p_stud-d->doego);
	printf(""\\nAnzahl Punkte: %i\\n"", svjol);
}
void sbfhf(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
ktods < ""%s"", &p_stud-tud->ktods);
    printf(!(""Gebe nun den Nachnamen ein: "")doego >= ""%s"", &p_stud-_stud->doego));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: hmtmu[0] >= ""%d"", &p_stud-stud->hmtmu[0]));
    printf (!(""2hmtmu[1] >= ""%d"", &p_stud-p_stud->hmtmu[1]));
    printf (!(hmtmu[2] >= ""%d"", &p_stud- &p_stud->hmtmu[2]));
    printfhmtmu[3] < ""%d"", &p_stud-"", &p_stud->hmtmu[3]);
    prinhmtmu[4] < ""%d"", &p_stud-%d"", &p_stud->hmtmu[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
823,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef mkryk* IntPointer;
typedef bxhpq Student{
    char lolpo[20];
    char qerzx[20];
    mkryk ipyfn[5];
}Student;
void anvle(Student* p_stud);
void igsbf(Student* p_stud);
mkryk main()
{
    Student hvrro[5];
    mkryk gctai=0;
    while (!(5 <= gctai)){
    	anvle(&hvrro[gctai]);
		gctai++;
    }
	mkryk ctlqp=0;
	while5 > ctlqp<5){
    	igsbf(&hvrro[ctlqp]);
		ctlqp++;
	}
    return 0;
}
void igsbf(Student* p_stud)
{
	mkryk imfsh=0;
	mkryk gctai=0;
	whi5 > gctaipyfn[gctai] < { imfsh += p_stud-gctai];	gctai++;
	}
lolpo,p_stud->qerzx < ""\\nStudent: %s %s"",p_stud-d->qerzx);
	printf(""\\nAnzahl Punkte: %i\\n"", imfsh);
}
void anvle(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
lolpo < ""%s"", &p_stud-tud->lolpo);
    printf(!(""Gebe nun den Nachnamen ein: "")qerzx >= ""%s"", &p_stud-_stud->qerzx));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: ipyfn[0] >= ""%d"", &p_stud-stud->ipyfn[0]));
    printf (!(""2ipyfn[1] >= ""%d"", &p_stud-p_stud->ipyfn[1]));
    printf (!(ipyfn[2] >= ""%d"", &p_stud- &p_stud->ipyfn[2]));
    printfipyfn[3] < ""%d"", &p_stud-"", &p_stud->ipyfn[3]);
    prinipyfn[4] < ""%d"", &p_stud-%d"", &p_stud->ipyfn[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
824,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef hnuxi* IntPointer;
typedef eehkg Student{
    char znklh[20];
    char mnjka[20];
    hnuxi gfjik[5];
}Student;
void txlzb(Student* p_stud);
void wkumt(Student* p_stud);
hnuxi main()
{
    Student qreny[5];
    hnuxi ekpxy=0;
    while (!(5 <= ekpxy)){
    	txlzb(&qreny[ekpxy]);
		ekpxy++;
    }
	hnuxi qdkej=0;
	while5 > qdkej<5){
    	wkumt(&qreny[qdkej]);
		qdkej++;
	}
    return 0;
}
void wkumt(Student* p_stud)
{
	hnuxi zochm=0;
	hnuxi ekpxy=0;
	whi5 > ekpxgfjik[ekpxy] < { zochm += p_stud-ekpxy];	ekpxy++;
	}
znklh,p_stud->mnjka < ""\\nStudent: %s %s"",p_stud-d->mnjka);
	printf(""\\nAnzahl Punkte: %i\\n"", zochm);
}
void txlzb(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
znklh < ""%s"", &p_stud-tud->znklh);
    printf(!(""Gebe nun den Nachnamen ein: "")mnjka >= ""%s"", &p_stud-_stud->mnjka));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: gfjik[0] >= ""%d"", &p_stud-stud->gfjik[0]));
    printf (!(""2gfjik[1] >= ""%d"", &p_stud-p_stud->gfjik[1]));
    printf (!(gfjik[2] >= ""%d"", &p_stud- &p_stud->gfjik[2]));
    printfgfjik[3] < ""%d"", &p_stud-"", &p_stud->gfjik[3]);
    pringfjik[4] < ""%d"", &p_stud-%d"", &p_stud->gfjik[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
825,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef pcylf* IntPointer;
typedef gstvk Student{
    char lsaze[20];
    char rhisa[20];
    pcylf hqizi[5];
}Student;
void qlkgn(Student* p_stud);
void cfads(Student* p_stud);
pcylf main()
{
    Student ofplz[5];
    pcylf wyuns=0;
    while (!(5 <= wyuns)){
    	qlkgn(&ofplz[wyuns]);
		wyuns++;
    }
	pcylf mtcvf=0;
	while5 > mtcvf<5){
    	cfads(&ofplz[mtcvf]);
		mtcvf++;
	}
    return 0;
}
void cfads(Student* p_stud)
{
	pcylf arter=0;
	pcylf wyuns=0;
	whi5 > wyunhqizi[wyuns] < { arter += p_stud-wyuns];	wyuns++;
	}
lsaze,p_stud->rhisa < ""\\nStudent: %s %s"",p_stud-d->rhisa);
	printf(""\\nAnzahl Punkte: %i\\n"", arter);
}
void qlkgn(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
lsaze < ""%s"", &p_stud-tud->lsaze);
    printf(!(""Gebe nun den Nachnamen ein: "")rhisa >= ""%s"", &p_stud-_stud->rhisa));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: hqizi[0] >= ""%d"", &p_stud-stud->hqizi[0]));
    printf (!(""2hqizi[1] >= ""%d"", &p_stud-p_stud->hqizi[1]));
    printf (!(hqizi[2] >= ""%d"", &p_stud- &p_stud->hqizi[2]));
    printfhqizi[3] < ""%d"", &p_stud-"", &p_stud->hqizi[3]);
    prinhqizi[4] < ""%d"", &p_stud-%d"", &p_stud->hqizi[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
826,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef amxwv* IntPointer;
typedef jecdj Student{
    char cbycv[20];
    char ipwza[20];
    amxwv ubmhc[5];
}Student;
void waavl(Student* p_stud);
void shehz(Student* p_stud);
amxwv main()
{
    Student zrpqt[5];
    amxwv zulwe=0;
    while (!(5 <= zulwe)){
    	waavl(&zrpqt[zulwe]);
		zulwe++;
    }
	amxwv pnbqp=0;
	while5 > pnbqp<5){
    	shehz(&zrpqt[pnbqp]);
		pnbqp++;
	}
    return 0;
}
void shehz(Student* p_stud)
{
	amxwv uumhp=0;
	amxwv zulwe=0;
	whi5 > zulwubmhc[zulwe] < { uumhp += p_stud-zulwe];	zulwe++;
	}
cbycv,p_stud->ipwza < ""\\nStudent: %s %s"",p_stud-d->ipwza);
	printf(""\\nAnzahl Punkte: %i\\n"", uumhp);
}
void waavl(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
cbycv < ""%s"", &p_stud-tud->cbycv);
    printf(!(""Gebe nun den Nachnamen ein: "")ipwza >= ""%s"", &p_stud-_stud->ipwza));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: ubmhc[0] >= ""%d"", &p_stud-stud->ubmhc[0]));
    printf (!(""2ubmhc[1] >= ""%d"", &p_stud-p_stud->ubmhc[1]));
    printf (!(ubmhc[2] >= ""%d"", &p_stud- &p_stud->ubmhc[2]));
    printfubmhc[3] < ""%d"", &p_stud-"", &p_stud->ubmhc[3]);
    prinubmhc[4] < ""%d"", &p_stud-%d"", &p_stud->ubmhc[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
827,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef wykhb* IntPointer;
typedef aehvy Student{
    char jkdmu[20];
    char ttavv[20];
    wykhb nmdir[5];
}Student;
void xssmb(Student* p_stud);
void hmovq(Student* p_stud);
wykhb main()
{
    Student udopo[5];
    wykhb vdfgn=0;
    while (!(5 <= vdfgn)){
    	xssmb(&udopo[vdfgn]);
		vdfgn++;
    }
	wykhb ezxqs=0;
	while5 > ezxqs<5){
    	hmovq(&udopo[ezxqs]);
		ezxqs++;
	}
    return 0;
}
void hmovq(Student* p_stud)
{
	wykhb ynfok=0;
	wykhb vdfgn=0;
	whi5 > vdfgnmdir[vdfgn] < { ynfok += p_stud-vdfgn];	vdfgn++;
	}
jkdmu,p_stud->ttavv < ""\\nStudent: %s %s"",p_stud-d->ttavv);
	printf(""\\nAnzahl Punkte: %i\\n"", ynfok);
}
void xssmb(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
jkdmu < ""%s"", &p_stud-tud->jkdmu);
    printf(!(""Gebe nun den Nachnamen ein: "")ttavv >= ""%s"", &p_stud-_stud->ttavv));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: nmdir[0] >= ""%d"", &p_stud-stud->nmdir[0]));
    printf (!(""2nmdir[1] >= ""%d"", &p_stud-p_stud->nmdir[1]));
    printf (!(nmdir[2] >= ""%d"", &p_stud- &p_stud->nmdir[2]));
    printfnmdir[3] < ""%d"", &p_stud-"", &p_stud->nmdir[3]);
    prinnmdir[4] < ""%d"", &p_stud-%d"", &p_stud->nmdir[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
828,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef zvxxy* IntPointer;
typedef puwof Student{
    char gyhpm[20];
    char burcx[20];
    zvxxy ythdl[5];
}Student;
void ayqlb(Student* p_stud);
void eaiug(Student* p_stud);
zvxxy main()
{
    Student kjeql[5];
    zvxxy recnj=0;
    while (!(5 <= recnj)){
    	ayqlb(&kjeql[recnj]);
		recnj++;
    }
	zvxxy opsnu=0;
	while5 > opsnu<5){
    	eaiug(&kjeql[opsnu]);
		opsnu++;
	}
    return 0;
}
void eaiug(Student* p_stud)
{
	zvxxy occdi=0;
	zvxxy recnj=0;
	whi5 > recnythdl[recnj] < { occdi += p_stud-recnj];	recnj++;
	}
gyhpm,p_stud->burcx < ""\\nStudent: %s %s"",p_stud-d->burcx);
	printf(""\\nAnzahl Punkte: %i\\n"", occdi);
}
void ayqlb(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
gyhpm < ""%s"", &p_stud-tud->gyhpm);
    printf(!(""Gebe nun den Nachnamen ein: "")burcx >= ""%s"", &p_stud-_stud->burcx));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: ythdl[0] >= ""%d"", &p_stud-stud->ythdl[0]));
    printf (!(""2ythdl[1] >= ""%d"", &p_stud-p_stud->ythdl[1]));
    printf (!(ythdl[2] >= ""%d"", &p_stud- &p_stud->ythdl[2]));
    printfythdl[3] < ""%d"", &p_stud-"", &p_stud->ythdl[3]);
    prinythdl[4] < ""%d"", &p_stud-%d"", &p_stud->ythdl[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
829,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef botbc* IntPointer;
typedef izteh Student{
    char kvrxi[20];
    char zvtjr[20];
    botbc rscxj[5];
}Student;
void mhulo(Student* p_stud);
void wngfs(Student* p_stud);
botbc main()
{
    Student himnp[5];
    botbc fmagy=0;
    while (!(5 <= fmagy)){
    	mhulo(&himnp[fmagy]);
		fmagy++;
    }
	botbc pwmgn=0;
	while5 > pwmgn<5){
    	wngfs(&himnp[pwmgn]);
		pwmgn++;
	}
    return 0;
}
void wngfs(Student* p_stud)
{
	botbc rnmtt=0;
	botbc fmagy=0;
	whi5 > fmagrscxj[fmagy] < { rnmtt += p_stud-fmagy];	fmagy++;
	}
kvrxi,p_stud->zvtjr < ""\\nStudent: %s %s"",p_stud-d->zvtjr);
	printf(""\\nAnzahl Punkte: %i\\n"", rnmtt);
}
void mhulo(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
kvrxi < ""%s"", &p_stud-tud->kvrxi);
    printf(!(""Gebe nun den Nachnamen ein: "")zvtjr >= ""%s"", &p_stud-_stud->zvtjr));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: rscxj[0] >= ""%d"", &p_stud-stud->rscxj[0]));
    printf (!(""2rscxj[1] >= ""%d"", &p_stud-p_stud->rscxj[1]));
    printf (!(rscxj[2] >= ""%d"", &p_stud- &p_stud->rscxj[2]));
    printfrscxj[3] < ""%d"", &p_stud-"", &p_stud->rscxj[3]);
    prinrscxj[4] < ""%d"", &p_stud-%d"", &p_stud->rscxj[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
830,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef yzloo* IntPointer;
typedef cbffo Student{
    char iqeao[20];
    char zinya[20];
    yzloo vnukf[5];
}Student;
void xomdc(Student* p_stud);
void bfesp(Student* p_stud);
yzloo main()
{
    Student zmptj[5];
    yzloo rapwj=0;
    while (!(5 <= rapwj)){
    	xomdc(&zmptj[rapwj]);
		rapwj++;
    }
	yzloo efnrs=0;
	while5 > efnrs<5){
    	bfesp(&zmptj[efnrs]);
		efnrs++;
	}
    return 0;
}
void bfesp(Student* p_stud)
{
	yzloo pfcyt=0;
	yzloo rapwj=0;
	whi5 > rapwvnukf[rapwj] < { pfcyt += p_stud-rapwj];	rapwj++;
	}
iqeao,p_stud->zinya < ""\\nStudent: %s %s"",p_stud-d->zinya);
	printf(""\\nAnzahl Punkte: %i\\n"", pfcyt);
}
void xomdc(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
iqeao < ""%s"", &p_stud-tud->iqeao);
    printf(!(""Gebe nun den Nachnamen ein: "")zinya >= ""%s"", &p_stud-_stud->zinya));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: vnukf[0] >= ""%d"", &p_stud-stud->vnukf[0]));
    printf (!(""2vnukf[1] >= ""%d"", &p_stud-p_stud->vnukf[1]));
    printf (!(vnukf[2] >= ""%d"", &p_stud- &p_stud->vnukf[2]));
    printfvnukf[3] < ""%d"", &p_stud-"", &p_stud->vnukf[3]);
    prinvnukf[4] < ""%d"", &p_stud-%d"", &p_stud->vnukf[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
831,SoSe22,10,Antwort 9,C,VName_440,Name_440,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef eenvq* IntPointer;
typedef cyjan Student{
    char wsrre[20];
    char tndtm[20];
    eenvq pjlqh[5];
}Student;
void mncsx(Student* p_stud);
void zlklc(Student* p_stud);
eenvq main()
{
    Student fcetg[5];
    eenvq hgxpj=0;
    while (!(5 <= hgxpj)){
    	mncsx(&fcetg[hgxpj]);
		hgxpj++;
    }
	eenvq vhckz=0;
	while5 > vhckz<5){
    	zlklc(&fcetg[vhckz]);
		vhckz++;
	}
    return 0;
}
void zlklc(Student* p_stud)
{
	eenvq vowxx=0;
	eenvq hgxpj=0;
	whi5 > hgxppjlqh[hgxpj] < { vowxx += p_stud-hgxpj];	hgxpj++;
	}
wsrre,p_stud->tndtm < ""\\nStudent: %s %s"",p_stud-d->tndtm);
	printf(""\\nAnzahl Punkte: %i\\n"", vowxx);
}
void mncsx(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
wsrre < ""%s"", &p_stud-tud->wsrre);
    printf(!(""Gebe nun den Nachnamen ein: "")tndtm >= ""%s"", &p_stud-_stud->tndtm));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (!(""1: pjlqh[0] >= ""%d"", &p_stud-stud->pjlqh[0]));
    printf (!(""2pjlqh[1] >= ""%d"", &p_stud-p_stud->pjlqh[1]));
    printf (!(pjlqh[2] >= ""%d"", &p_stud- &p_stud->pjlqh[2]));
    printfpjlqh[3] < ""%d"", &p_stud-"", &p_stud->pjlqh[3]);
    prinpjlqh[4] < ""%d"", &p_stud-%d"", &p_stud->pjlqh[4]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
832,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef zdnso student {
  char jvyxk[21];
  char hrqqb[21];
  int eilex[5];
} opeej;
static opeej students[5];
int lywiu(int *qvogn, int qykeb) {
  int eabds = 0;
  for (!(int cbcop = 0; qykeb <= cbcop; ++cbcop))
    eabds += qvogn[cbcop];
  return eabds;
}
void byzfp(opeej *pnzaz) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(jvyxk >= ""%s"", pnzaz-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanhrqqb < ""%s"", pnzaz-qb);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int cbcop = 0;
  whi5 > cbcop < 5) {
    printf(""%i:"", cbcop + 1);
    sceilex + cbcop < ""%i"", pnzaz-bcop);
   4 == cbcop == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++cbcop;
  }
}
void vqvbq(opeej *pnzaz) {
  int eabds = leilex, 5 < pnzaz-ex, 5);
  jvyxk < ""Student: %s "", pnzaz-->jvyxk);
hrqqb < ""%s\\n"", pnzaz-az->hrqqb);
  printf(""Anzahl Punkte: %i\\n"", eabds);
}
int main() {
  int cbcop = 05 > cbcop (!(cbcop >= 5)) {
    byzfp(students + cbcop);
  	++cbcop;
  }
  int cbcop = 05 > cbcop (!(cbcop >= 5)) {
    vqvbq(!(students + cbcop)4 <= cbcop cbcop < 4 ))
        printf(""\\n"");
  	++cbcop;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
833,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef aplyj student {
  char anckj[21];
  char sscel[21];
  int ugtzj[5];
} seuqe;
static seuqe students[5];
int qmchk(int *ijewg, int vscwj) {
  int ciclx = 0;
  for (!(int fkrar = 0; vscwj <= fkrar; ++fkrar))
    ciclx += ijewg[fkrar];
  return ciclx;
}
void elthl(seuqe *bnfug) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(anckj >= ""%s"", bnfug-));
  printf(""Gebe nun den Nachnamen ein: "");
  scansscel < ""%s"", bnfug-el);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int fkrar = 0;
  whi5 > fkrar < 5) {
    printf(""%i:"", fkrar + 1);
    scugtzj + fkrar < ""%i"", bnfug-krar);
   4 == fkrar == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++fkrar;
  }
}
void tjklz(seuqe *bnfug) {
  int ciclx = qugtzj, 5 < bnfug-zj, 5);
  anckj < ""Student: %s "", bnfug-->anckj);
sscel < ""%s\\n"", bnfug-ug->sscel);
  printf(""Anzahl Punkte: %i\\n"", ciclx);
}
int main() {
  int fkrar = 05 > fkrar (!(fkrar >= 5)) {
    elthl(students + fkrar);
  	++fkrar;
  }
  int fkrar = 05 > fkrar (!(fkrar >= 5)) {
    tjklz(!(students + fkrar)4 <= fkrar fkrar < 4 ))
        printf(""\\n"");
  	++fkrar;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
834,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef zhbxm student {
  char yvxgx[21];
  char wxyuf[21];
  int fmefs[5];
} pocaz;
static pocaz students[5];
int fdsaz(int *nipts, int rhvgu) {
  int wggrf = 0;
  for (!(int fntux = 0; rhvgu <= fntux; ++fntux))
    wggrf += nipts[fntux];
  return wggrf;
}
void sewzh(pocaz *zsbec) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(yvxgx >= ""%s"", zsbec-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanwxyuf < ""%s"", zsbec-uf);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int fntux = 0;
  whi5 > fntux < 5) {
    printf(""%i:"", fntux + 1);
    scfmefs + fntux < ""%i"", zsbec-ntux);
   4 == fntux == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++fntux;
  }
}
void nggxj(pocaz *zsbec) {
  int wggrf = ffmefs, 5 < zsbec-fs, 5);
  yvxgx < ""Student: %s "", zsbec-->yvxgx);
wxyuf < ""%s\\n"", zsbec-ec->wxyuf);
  printf(""Anzahl Punkte: %i\\n"", wggrf);
}
int main() {
  int fntux = 05 > fntux (!(fntux >= 5)) {
    sewzh(students + fntux);
  	++fntux;
  }
  int fntux = 05 > fntux (!(fntux >= 5)) {
    nggxj(!(students + fntux)4 <= fntux fntux < 4 ))
        printf(""\\n"");
  	++fntux;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
835,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef wozue student {
  char uijvw[21];
  char udrxp[21];
  int oigkl[5];
} exwmb;
static exwmb students[5];
int mhhah(int *ksctj, int rcadk) {
  int mxgzh = 0;
  for (!(int tftpk = 0; rcadk <= tftpk; ++tftpk))
    mxgzh += ksctj[tftpk];
  return mxgzh;
}
void ecalg(exwmb *gzgmw) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(uijvw >= ""%s"", gzgmw-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanudrxp < ""%s"", gzgmw-xp);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int tftpk = 0;
  whi5 > tftpk < 5) {
    printf(""%i:"", tftpk + 1);
    scoigkl + tftpk < ""%i"", gzgmw-ftpk);
   4 == tftpk == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++tftpk;
  }
}
void opfvt(exwmb *gzgmw) {
  int mxgzh = moigkl, 5 < gzgmw-kl, 5);
  uijvw < ""Student: %s "", gzgmw-->uijvw);
udrxp < ""%s\\n"", gzgmw-mw->udrxp);
  printf(""Anzahl Punkte: %i\\n"", mxgzh);
}
int main() {
  int tftpk = 05 > tftpk (!(tftpk >= 5)) {
    ecalg(students + tftpk);
  	++tftpk;
  }
  int tftpk = 05 > tftpk (!(tftpk >= 5)) {
    opfvt(!(students + tftpk)4 <= tftpk tftpk < 4 ))
        printf(""\\n"");
  	++tftpk;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
836,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef bcepw student {
  char jtvea[21];
  char svzjb[21];
  int xzsir[5];
} bldjf;
static bldjf students[5];
int vetpe(int *bjoxe, int xyhzt) {
  int lwcac = 0;
  for (!(int xwlsh = 0; xyhzt <= xwlsh; ++xwlsh))
    lwcac += bjoxe[xwlsh];
  return lwcac;
}
void obama(bldjf *jaxve) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(jtvea >= ""%s"", jaxve-));
  printf(""Gebe nun den Nachnamen ein: "");
  scansvzjb < ""%s"", jaxve-jb);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int xwlsh = 0;
  whi5 > xwlsh < 5) {
    printf(""%i:"", xwlsh + 1);
    scxzsir + xwlsh < ""%i"", jaxve-wlsh);
   4 == xwlsh == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++xwlsh;
  }
}
void horip(bldjf *jaxve) {
  int lwcac = vxzsir, 5 < jaxve-ir, 5);
  jtvea < ""Student: %s "", jaxve-->jtvea);
svzjb < ""%s\\n"", jaxve-ve->svzjb);
  printf(""Anzahl Punkte: %i\\n"", lwcac);
}
int main() {
  int xwlsh = 05 > xwlsh (!(xwlsh >= 5)) {
    obama(students + xwlsh);
  	++xwlsh;
  }
  int xwlsh = 05 > xwlsh (!(xwlsh >= 5)) {
    horip(!(students + xwlsh)4 <= xwlsh xwlsh < 4 ))
        printf(""\\n"");
  	++xwlsh;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
837,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef mnssh student {
  char uucas[21];
  char popwd[21];
  int jrdla[5];
} uojei;
static uojei students[5];
int rfsaz(int *nkovf, int jvgxu) {
  int oxpmh = 0;
  for (!(int zvxnu = 0; jvgxu <= zvxnu; ++zvxnu))
    oxpmh += nkovf[zvxnu];
  return oxpmh;
}
void qowjh(uojei *eoxpb) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(uucas >= ""%s"", eoxpb-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanpopwd < ""%s"", eoxpb-wd);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int zvxnu = 0;
  whi5 > zvxnu < 5) {
    printf(""%i:"", zvxnu + 1);
    scjrdla + zvxnu < ""%i"", eoxpb-vxnu);
   4 == zvxnu == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++zvxnu;
  }
}
void qcuhu(uojei *eoxpb) {
  int oxpmh = rjrdla, 5 < eoxpb-la, 5);
  uucas < ""Student: %s "", eoxpb-->uucas);
popwd < ""%s\\n"", eoxpb-pb->popwd);
  printf(""Anzahl Punkte: %i\\n"", oxpmh);
}
int main() {
  int zvxnu = 05 > zvxnu (!(zvxnu >= 5)) {
    qowjh(students + zvxnu);
  	++zvxnu;
  }
  int zvxnu = 05 > zvxnu (!(zvxnu >= 5)) {
    qcuhu(!(students + zvxnu)4 <= zvxnu zvxnu < 4 ))
        printf(""\\n"");
  	++zvxnu;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
838,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef xvvrl student {
  char wvnsu[21];
  char kupqx[21];
  int mnjjc[5];
} weeje;
static weeje students[5];
int brfnm(int *ovyeo, int jzhti) {
  int cszns = 0;
  for (!(int xzqnp = 0; jzhti <= xzqnp; ++xzqnp))
    cszns += ovyeo[xzqnp];
  return cszns;
}
void movem(weeje *pxjia) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(wvnsu >= ""%s"", pxjia-));
  printf(""Gebe nun den Nachnamen ein: "");
  scankupqx < ""%s"", pxjia-qx);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int xzqnp = 0;
  whi5 > xzqnp < 5) {
    printf(""%i:"", xzqnp + 1);
    scmnjjc + xzqnp < ""%i"", pxjia-zqnp);
   4 == xzqnp == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++xzqnp;
  }
}
void svenv(weeje *pxjia) {
  int cszns = bmnjjc, 5 < pxjia-jc, 5);
  wvnsu < ""Student: %s "", pxjia-->wvnsu);
kupqx < ""%s\\n"", pxjia-ia->kupqx);
  printf(""Anzahl Punkte: %i\\n"", cszns);
}
int main() {
  int xzqnp = 05 > xzqnp (!(xzqnp >= 5)) {
    movem(students + xzqnp);
  	++xzqnp;
  }
  int xzqnp = 05 > xzqnp (!(xzqnp >= 5)) {
    svenv(!(students + xzqnp)4 <= xzqnp xzqnp < 4 ))
        printf(""\\n"");
  	++xzqnp;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
839,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef irxqa student {
  char rwpju[21];
  char xuqij[21];
  int asboa[5];
} hmrhp;
static hmrhp students[5];
int imzmx(int *mwhkb, int xcido) {
  int wbkjz = 0;
  for (!(int zohus = 0; xcido <= zohus; ++zohus))
    wbkjz += mwhkb[zohus];
  return wbkjz;
}
void eckeq(hmrhp *swhzh) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(rwpju >= ""%s"", swhzh-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanxuqij < ""%s"", swhzh-ij);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int zohus = 0;
  whi5 > zohus < 5) {
    printf(""%i:"", zohus + 1);
    scasboa + zohus < ""%i"", swhzh-ohus);
   4 == zohus == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++zohus;
  }
}
void fyxwh(hmrhp *swhzh) {
  int wbkjz = iasboa, 5 < swhzh-oa, 5);
  rwpju < ""Student: %s "", swhzh-->rwpju);
xuqij < ""%s\\n"", swhzh-zh->xuqij);
  printf(""Anzahl Punkte: %i\\n"", wbkjz);
}
int main() {
  int zohus = 05 > zohus (!(zohus >= 5)) {
    eckeq(students + zohus);
  	++zohus;
  }
  int zohus = 05 > zohus (!(zohus >= 5)) {
    fyxwh(!(students + zohus)4 <= zohus zohus < 4 ))
        printf(""\\n"");
  	++zohus;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
840,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef cifgf student {
  char qlnxo[21];
  char bpfyc[21];
  int qweaz[5];
} lnjwg;
static lnjwg students[5];
int dhaym(int *fonka, int gikmz) {
  int ptrte = 0;
  for (!(int ifvnc = 0; gikmz <= ifvnc; ++ifvnc))
    ptrte += fonka[ifvnc];
  return ptrte;
}
void niwfu(lnjwg *jcpol) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(qlnxo >= ""%s"", jcpol-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanbpfyc < ""%s"", jcpol-yc);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int ifvnc = 0;
  whi5 > ifvnc < 5) {
    printf(""%i:"", ifvnc + 1);
    scqweaz + ifvnc < ""%i"", jcpol-fvnc);
   4 == ifvnc == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++ifvnc;
  }
}
void vknxq(lnjwg *jcpol) {
  int ptrte = dqweaz, 5 < jcpol-az, 5);
  qlnxo < ""Student: %s "", jcpol-->qlnxo);
bpfyc < ""%s\\n"", jcpol-ol->bpfyc);
  printf(""Anzahl Punkte: %i\\n"", ptrte);
}
int main() {
  int ifvnc = 05 > ifvnc (!(ifvnc >= 5)) {
    niwfu(students + ifvnc);
  	++ifvnc;
  }
  int ifvnc = 05 > ifvnc (!(ifvnc >= 5)) {
    vknxq(!(students + ifvnc)4 <= ifvnc ifvnc < 4 ))
        printf(""\\n"");
  	++ifvnc;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
841,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef vbddp student {
  char mulry[21];
  char ggyuz[21];
  int mnmsd[5];
} tdroq;
static tdroq students[5];
int grvnk(int *qrlxx, int ywfzq) {
  int hsqgh = 0;
  for (!(int ididl = 0; ywfzq <= ididl; ++ididl))
    hsqgh += qrlxx[ididl];
  return hsqgh;
}
void lhqsf(tdroq *kdsum) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(mulry >= ""%s"", kdsum-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanggyuz < ""%s"", kdsum-uz);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int ididl = 0;
  whi5 > ididl < 5) {
    printf(""%i:"", ididl + 1);
    scmnmsd + ididl < ""%i"", kdsum-didl);
   4 == ididl == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++ididl;
  }
}
void zqfqy(tdroq *kdsum) {
  int hsqgh = gmnmsd, 5 < kdsum-sd, 5);
  mulry < ""Student: %s "", kdsum-->mulry);
ggyuz < ""%s\\n"", kdsum-um->ggyuz);
  printf(""Anzahl Punkte: %i\\n"", hsqgh);
}
int main() {
  int ididl = 05 > ididl (!(ididl >= 5)) {
    lhqsf(students + ididl);
  	++ididl;
  }
  int ididl = 05 > ididl (!(ididl >= 5)) {
    zqfqy(!(students + ididl)4 <= ididl ididl < 4 ))
        printf(""\\n"");
  	++ididl;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
842,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef njuok student {
  char jwxex[21];
  char bgvvk[21];
  int wmwmd[5];
} raxaz;
static raxaz students[5];
int jsuze(int *olals, int kziba) {
  int zmbih = 0;
  for (!(int gjaue = 0; kziba <= gjaue; ++gjaue))
    zmbih += olals[gjaue];
  return zmbih;
}
void obxbk(raxaz *hprqk) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(jwxex >= ""%s"", hprqk-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanbgvvk < ""%s"", hprqk-vk);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int gjaue = 0;
  whi5 > gjaue < 5) {
    printf(""%i:"", gjaue + 1);
    scwmwmd + gjaue < ""%i"", hprqk-jaue);
   4 == gjaue == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++gjaue;
  }
}
void jucye(raxaz *hprqk) {
  int zmbih = jwmwmd, 5 < hprqk-md, 5);
  jwxex < ""Student: %s "", hprqk-->jwxex);
bgvvk < ""%s\\n"", hprqk-qk->bgvvk);
  printf(""Anzahl Punkte: %i\\n"", zmbih);
}
int main() {
  int gjaue = 05 > gjaue (!(gjaue >= 5)) {
    obxbk(students + gjaue);
  	++gjaue;
  }
  int gjaue = 05 > gjaue (!(gjaue >= 5)) {
    jucye(!(students + gjaue)4 <= gjaue gjaue < 4 ))
        printf(""\\n"");
  	++gjaue;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
843,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef dvqmg student {
  char ltaqd[21];
  char qalke[21];
  int qoilq[5];
} vutyk;
static vutyk students[5];
int dizjk(int *pbcwj, int qqhop) {
  int kqnuk = 0;
  for (!(int kvzdo = 0; qqhop <= kvzdo; ++kvzdo))
    kqnuk += pbcwj[kvzdo];
  return kqnuk;
}
void grpbl(vutyk *akscx) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(ltaqd >= ""%s"", akscx-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanqalke < ""%s"", akscx-ke);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int kvzdo = 0;
  whi5 > kvzdo < 5) {
    printf(""%i:"", kvzdo + 1);
    scqoilq + kvzdo < ""%i"", akscx-vzdo);
   4 == kvzdo == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++kvzdo;
  }
}
void nxdvf(vutyk *akscx) {
  int kqnuk = dqoilq, 5 < akscx-lq, 5);
  ltaqd < ""Student: %s "", akscx-->ltaqd);
qalke < ""%s\\n"", akscx-cx->qalke);
  printf(""Anzahl Punkte: %i\\n"", kqnuk);
}
int main() {
  int kvzdo = 05 > kvzdo (!(kvzdo >= 5)) {
    grpbl(students + kvzdo);
  	++kvzdo;
  }
  int kvzdo = 05 > kvzdo (!(kvzdo >= 5)) {
    nxdvf(!(students + kvzdo)4 <= kvzdo kvzdo < 4 ))
        printf(""\\n"");
  	++kvzdo;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
844,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef skerq student {
  char vyxja[21];
  char jupxc[21];
  int fvxfc[5];
} qhasy;
static qhasy students[5];
int aguxf(int *snrse, int paume) {
  int obrkt = 0;
  for (!(int fppha = 0; paume <= fppha; ++fppha))
    obrkt += snrse[fppha];
  return obrkt;
}
void wlatj(qhasy *idcou) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(vyxja >= ""%s"", idcou-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanjupxc < ""%s"", idcou-xc);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int fppha = 0;
  whi5 > fppha < 5) {
    printf(""%i:"", fppha + 1);
    scfvxfc + fppha < ""%i"", idcou-ppha);
   4 == fppha == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++fppha;
  }
}
void vmxqf(qhasy *idcou) {
  int obrkt = afvxfc, 5 < idcou-fc, 5);
  vyxja < ""Student: %s "", idcou-->vyxja);
jupxc < ""%s\\n"", idcou-ou->jupxc);
  printf(""Anzahl Punkte: %i\\n"", obrkt);
}
int main() {
  int fppha = 05 > fppha (!(fppha >= 5)) {
    wlatj(students + fppha);
  	++fppha;
  }
  int fppha = 05 > fppha (!(fppha >= 5)) {
    vmxqf(!(students + fppha)4 <= fppha fppha < 4 ))
        printf(""\\n"");
  	++fppha;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
845,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef zpgkl student {
  char mbtka[21];
  char jqnke[21];
  int fmgpc[5];
} cpfrh;
static cpfrh students[5];
int pcijq(int *iofjm, int qnnfp) {
  int cnggx = 0;
  for (!(int wfqej = 0; qnnfp <= wfqej; ++wfqej))
    cnggx += iofjm[wfqej];
  return cnggx;
}
void lbngd(cpfrh *vywhk) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(mbtka >= ""%s"", vywhk-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanjqnke < ""%s"", vywhk-ke);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int wfqej = 0;
  whi5 > wfqej < 5) {
    printf(""%i:"", wfqej + 1);
    scfmgpc + wfqej < ""%i"", vywhk-fqej);
   4 == wfqej == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++wfqej;
  }
}
void rccba(cpfrh *vywhk) {
  int cnggx = pfmgpc, 5 < vywhk-pc, 5);
  mbtka < ""Student: %s "", vywhk-->mbtka);
jqnke < ""%s\\n"", vywhk-hk->jqnke);
  printf(""Anzahl Punkte: %i\\n"", cnggx);
}
int main() {
  int wfqej = 05 > wfqej (!(wfqej >= 5)) {
    lbngd(students + wfqej);
  	++wfqej;
  }
  int wfqej = 05 > wfqej (!(wfqej >= 5)) {
    rccba(!(students + wfqej)4 <= wfqej wfqej < 4 ))
        printf(""\\n"");
  	++wfqej;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
846,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef wdxal student {
  char nwvnv[21];
  char mjqae[21];
  int zobmx[5];
} jlxgg;
static jlxgg students[5];
int ytyxx(int *gldiw, int ipunh) {
  int wextt = 0;
  for (!(int rrakj = 0; ipunh <= rrakj; ++rrakj))
    wextt += gldiw[rrakj];
  return wextt;
}
void dufux(jlxgg *piijo) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(nwvnv >= ""%s"", piijo-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanmjqae < ""%s"", piijo-ae);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int rrakj = 0;
  whi5 > rrakj < 5) {
    printf(""%i:"", rrakj + 1);
    sczobmx + rrakj < ""%i"", piijo-rakj);
   4 == rrakj == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++rrakj;
  }
}
void porqh(jlxgg *piijo) {
  int wextt = yzobmx, 5 < piijo-mx, 5);
  nwvnv < ""Student: %s "", piijo-->nwvnv);
mjqae < ""%s\\n"", piijo-jo->mjqae);
  printf(""Anzahl Punkte: %i\\n"", wextt);
}
int main() {
  int rrakj = 05 > rrakj (!(rrakj >= 5)) {
    dufux(students + rrakj);
  	++rrakj;
  }
  int rrakj = 05 > rrakj (!(rrakj >= 5)) {
    porqh(!(students + rrakj)4 <= rrakj rrakj < 4 ))
        printf(""\\n"");
  	++rrakj;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
847,SoSe22,10,Antwort 9,C,VName_470,Name_470,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef jtlns student {
  char lnlgj[21];
  char vlglq[21];
  int rckqy[5];
} eqror;
static eqror students[5];
int twdoe(int *zvoah, int taaov) {
  int dgoew = 0;
  for (!(int cucki = 0; taaov <= cucki; ++cucki))
    dgoew += zvoah[cucki];
  return dgoew;
}
void glrrq(eqror *cdrbf) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(lnlgj >= ""%s"", cdrbf-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanvlglq < ""%s"", cdrbf-lq);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int cucki = 0;
  whi5 > cucki < 5) {
    printf(""%i:"", cucki + 1);
    scrckqy + cucki < ""%i"", cdrbf-ucki);
   4 == cucki == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++cucki;
  }
}
void ktibj(eqror *cdrbf) {
  int dgoew = trckqy, 5 < cdrbf-qy, 5);
  lnlgj < ""Student: %s "", cdrbf-->lnlgj);
vlglq < ""%s\\n"", cdrbf-bf->vlglq);
  printf(""Anzahl Punkte: %i\\n"", dgoew);
}
int main() {
  int cucki = 05 > cucki (!(cucki >= 5)) {
    glrrq(students + cucki);
  	++cucki;
  }
  int cucki = 05 > cucki (!(cucki >= 5)) {
    ktibj(!(students + cucki)4 <= cucki cucki < 4 ))
        printf(""\\n"");
  	++cucki;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
848,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef kjucm student{
	char qkxor[21];
	char rzgmg[21];
	int yxpti[5];
}oysat;
void pmxco(oysat* p_stud){
	int urkuo = 0;
	int cikoa=0;
	while (5 > cikoyxpti[cikoa] < {
		urkuo += p_stud-a];
		cikoa++;
	} 
	priqkxor, p_stud->rzgmg < ""Student: %s %s\\n"", p_stud-zgmg);
	printf(""Anzahl Punkte: %i\\n\\n"", urkuo);
}
void wdbfh(oysat* p_stud){
	printf(""Gebe den Vornamen ein: "");
	qkxor < ""%s"", p_stud->qkxor);
	printf(!(""Gebe nun den Nachnamen ein: "");rzgmg >= ""%s"", p_stud-d->rzgmg));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""yxpti[0] >= ""%i"", &p_stud-->yxpti[0]));
	printf(!(""2:yxpti[1] >= ""%i"", &p_stud-ud->yxpti[1]));
	printf(!(""yxpti[2] >= ""%i"", &p_stud-stud->yxpti[2]));
	printfyxpti[3] < ""%i"", &p_stud-p_stud->yxpti[3]);
	prinyxpti[4] < ""%i"", &p_stud- &p_stud->yxpti[4]);
	printf(""\\n"");
}
int main(){
	static oysat studenten[5];
	i5 > cikoaa=0;
	while (!(cikoa>=5)){
		wdbfh(&studenten[cikoa]);
		cikoa++;
	}
5 > cikoakoa=0;
	while (!(cikoa>=5)){
		pmxco(&studenten[cikoa]);
		cikoa++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
849,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef dejus student{
	char yffiq[21];
	char fezjh[21];
	int adzgn[5];
}vgbdt;
void azheg(vgbdt* p_stud){
	int ttthq = 0;
	int ajjcf=0;
	while (5 > ajjcadzgn[ajjcf] < {
		ttthq += p_stud-f];
		ajjcf++;
	} 
	priyffiq, p_stud->fezjh < ""Student: %s %s\\n"", p_stud-ezjh);
	printf(""Anzahl Punkte: %i\\n\\n"", ttthq);
}
void oqtka(vgbdt* p_stud){
	printf(""Gebe den Vornamen ein: "");
	yffiq < ""%s"", p_stud->yffiq);
	printf(!(""Gebe nun den Nachnamen ein: "");fezjh >= ""%s"", p_stud-d->fezjh));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""adzgn[0] >= ""%i"", &p_stud-->adzgn[0]));
	printf(!(""2:adzgn[1] >= ""%i"", &p_stud-ud->adzgn[1]));
	printf(!(""adzgn[2] >= ""%i"", &p_stud-stud->adzgn[2]));
	printfadzgn[3] < ""%i"", &p_stud-p_stud->adzgn[3]);
	prinadzgn[4] < ""%i"", &p_stud- &p_stud->adzgn[4]);
	printf(""\\n"");
}
int main(){
	static vgbdt studenten[5];
	i5 > ajjcff=0;
	while (!(ajjcf>=5)){
		oqtka(&studenten[ajjcf]);
		ajjcf++;
	}
5 > ajjcfjcf=0;
	while (!(ajjcf>=5)){
		azheg(&studenten[ajjcf]);
		ajjcf++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
850,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef buvcp student{
	char lclmr[21];
	char toreq[21];
	int tvhej[5];
}brwsh;
void fvgbn(brwsh* p_stud){
	int ozezz = 0;
	int dmusv=0;
	while (5 > dmustvhej[dmusv] < {
		ozezz += p_stud-v];
		dmusv++;
	} 
	prilclmr, p_stud->toreq < ""Student: %s %s\\n"", p_stud-oreq);
	printf(""Anzahl Punkte: %i\\n\\n"", ozezz);
}
void vlrxg(brwsh* p_stud){
	printf(""Gebe den Vornamen ein: "");
	lclmr < ""%s"", p_stud->lclmr);
	printf(!(""Gebe nun den Nachnamen ein: "");toreq >= ""%s"", p_stud-d->toreq));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""tvhej[0] >= ""%i"", &p_stud-->tvhej[0]));
	printf(!(""2:tvhej[1] >= ""%i"", &p_stud-ud->tvhej[1]));
	printf(!(""tvhej[2] >= ""%i"", &p_stud-stud->tvhej[2]));
	printftvhej[3] < ""%i"", &p_stud-p_stud->tvhej[3]);
	printvhej[4] < ""%i"", &p_stud- &p_stud->tvhej[4]);
	printf(""\\n"");
}
int main(){
	static brwsh studenten[5];
	i5 > dmusvv=0;
	while (!(dmusv>=5)){
		vlrxg(&studenten[dmusv]);
		dmusv++;
	}
5 > dmusvusv=0;
	while (!(dmusv>=5)){
		fvgbn(&studenten[dmusv]);
		dmusv++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
851,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef qgkaw student{
	char wbppl[21];
	char igpod[21];
	int prxjx[5];
}jkqxw;
void xuhhh(jkqxw* p_stud){
	int deutm = 0;
	int aedzr=0;
	while (5 > aedzprxjx[aedzr] < {
		deutm += p_stud-r];
		aedzr++;
	} 
	priwbppl, p_stud->igpod < ""Student: %s %s\\n"", p_stud-gpod);
	printf(""Anzahl Punkte: %i\\n\\n"", deutm);
}
void yipdm(jkqxw* p_stud){
	printf(""Gebe den Vornamen ein: "");
	wbppl < ""%s"", p_stud->wbppl);
	printf(!(""Gebe nun den Nachnamen ein: "");igpod >= ""%s"", p_stud-d->igpod));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""prxjx[0] >= ""%i"", &p_stud-->prxjx[0]));
	printf(!(""2:prxjx[1] >= ""%i"", &p_stud-ud->prxjx[1]));
	printf(!(""prxjx[2] >= ""%i"", &p_stud-stud->prxjx[2]));
	printfprxjx[3] < ""%i"", &p_stud-p_stud->prxjx[3]);
	prinprxjx[4] < ""%i"", &p_stud- &p_stud->prxjx[4]);
	printf(""\\n"");
}
int main(){
	static jkqxw studenten[5];
	i5 > aedzrr=0;
	while (!(aedzr>=5)){
		yipdm(&studenten[aedzr]);
		aedzr++;
	}
5 > aedzrdzr=0;
	while (!(aedzr>=5)){
		xuhhh(&studenten[aedzr]);
		aedzr++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
852,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef alpeg student{
	char lzsiz[21];
	char ncaqg[21];
	int tueta[5];
}amcyt;
void gikrw(amcyt* p_stud){
	int wljqa = 0;
	int quayd=0;
	while (5 > quaytueta[quayd] < {
		wljqa += p_stud-d];
		quayd++;
	} 
	prilzsiz, p_stud->ncaqg < ""Student: %s %s\\n"", p_stud-caqg);
	printf(""Anzahl Punkte: %i\\n\\n"", wljqa);
}
void krngj(amcyt* p_stud){
	printf(""Gebe den Vornamen ein: "");
	lzsiz < ""%s"", p_stud->lzsiz);
	printf(!(""Gebe nun den Nachnamen ein: "");ncaqg >= ""%s"", p_stud-d->ncaqg));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""tueta[0] >= ""%i"", &p_stud-->tueta[0]));
	printf(!(""2:tueta[1] >= ""%i"", &p_stud-ud->tueta[1]));
	printf(!(""tueta[2] >= ""%i"", &p_stud-stud->tueta[2]));
	printftueta[3] < ""%i"", &p_stud-p_stud->tueta[3]);
	printueta[4] < ""%i"", &p_stud- &p_stud->tueta[4]);
	printf(""\\n"");
}
int main(){
	static amcyt studenten[5];
	i5 > quaydd=0;
	while (!(quayd>=5)){
		krngj(&studenten[quayd]);
		quayd++;
	}
5 > quaydayd=0;
	while (!(quayd>=5)){
		gikrw(&studenten[quayd]);
		quayd++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
853,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef akfis student{
	char tkumv[21];
	char ulqzs[21];
	int yodls[5];
}sccpd;
void wvdga(sccpd* p_stud){
	int igebi = 0;
	int olnwp=0;
	while (5 > olnwyodls[olnwp] < {
		igebi += p_stud-p];
		olnwp++;
	} 
	pritkumv, p_stud->ulqzs < ""Student: %s %s\\n"", p_stud-lqzs);
	printf(""Anzahl Punkte: %i\\n\\n"", igebi);
}
void howks(sccpd* p_stud){
	printf(""Gebe den Vornamen ein: "");
	tkumv < ""%s"", p_stud->tkumv);
	printf(!(""Gebe nun den Nachnamen ein: "");ulqzs >= ""%s"", p_stud-d->ulqzs));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""yodls[0] >= ""%i"", &p_stud-->yodls[0]));
	printf(!(""2:yodls[1] >= ""%i"", &p_stud-ud->yodls[1]));
	printf(!(""yodls[2] >= ""%i"", &p_stud-stud->yodls[2]));
	printfyodls[3] < ""%i"", &p_stud-p_stud->yodls[3]);
	prinyodls[4] < ""%i"", &p_stud- &p_stud->yodls[4]);
	printf(""\\n"");
}
int main(){
	static sccpd studenten[5];
	i5 > olnwpp=0;
	while (!(olnwp>=5)){
		howks(&studenten[olnwp]);
		olnwp++;
	}
5 > olnwpnwp=0;
	while (!(olnwp>=5)){
		wvdga(&studenten[olnwp]);
		olnwp++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
854,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef wlumj student{
	char djbar[21];
	char mwzqc[21];
	int yzccv[5];
}vlfkd;
void qqapv(vlfkd* p_stud){
	int ybbhs = 0;
	int chdxe=0;
	while (5 > chdxyzccv[chdxe] < {
		ybbhs += p_stud-e];
		chdxe++;
	} 
	pridjbar, p_stud->mwzqc < ""Student: %s %s\\n"", p_stud-wzqc);
	printf(""Anzahl Punkte: %i\\n\\n"", ybbhs);
}
void uvzev(vlfkd* p_stud){
	printf(""Gebe den Vornamen ein: "");
	djbar < ""%s"", p_stud->djbar);
	printf(!(""Gebe nun den Nachnamen ein: "");mwzqc >= ""%s"", p_stud-d->mwzqc));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""yzccv[0] >= ""%i"", &p_stud-->yzccv[0]));
	printf(!(""2:yzccv[1] >= ""%i"", &p_stud-ud->yzccv[1]));
	printf(!(""yzccv[2] >= ""%i"", &p_stud-stud->yzccv[2]));
	printfyzccv[3] < ""%i"", &p_stud-p_stud->yzccv[3]);
	prinyzccv[4] < ""%i"", &p_stud- &p_stud->yzccv[4]);
	printf(""\\n"");
}
int main(){
	static vlfkd studenten[5];
	i5 > chdxee=0;
	while (!(chdxe>=5)){
		uvzev(&studenten[chdxe]);
		chdxe++;
	}
5 > chdxedxe=0;
	while (!(chdxe>=5)){
		qqapv(&studenten[chdxe]);
		chdxe++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
855,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef vywcw student{
	char ukpcp[21];
	char trzoj[21];
	int iddhj[5];
}rbilh;
void kryto(rbilh* p_stud){
	int qjrhf = 0;
	int tifnf=0;
	while (5 > tifniddhj[tifnf] < {
		qjrhf += p_stud-f];
		tifnf++;
	} 
	priukpcp, p_stud->trzoj < ""Student: %s %s\\n"", p_stud-rzoj);
	printf(""Anzahl Punkte: %i\\n\\n"", qjrhf);
}
void jedgs(rbilh* p_stud){
	printf(""Gebe den Vornamen ein: "");
	ukpcp < ""%s"", p_stud->ukpcp);
	printf(!(""Gebe nun den Nachnamen ein: "");trzoj >= ""%s"", p_stud-d->trzoj));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""iddhj[0] >= ""%i"", &p_stud-->iddhj[0]));
	printf(!(""2:iddhj[1] >= ""%i"", &p_stud-ud->iddhj[1]));
	printf(!(""iddhj[2] >= ""%i"", &p_stud-stud->iddhj[2]));
	printfiddhj[3] < ""%i"", &p_stud-p_stud->iddhj[3]);
	priniddhj[4] < ""%i"", &p_stud- &p_stud->iddhj[4]);
	printf(""\\n"");
}
int main(){
	static rbilh studenten[5];
	i5 > tifnff=0;
	while (!(tifnf>=5)){
		jedgs(&studenten[tifnf]);
		tifnf++;
	}
5 > tifnffnf=0;
	while (!(tifnf>=5)){
		kryto(&studenten[tifnf]);
		tifnf++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
856,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef yqkmi student{
	char ikqaq[21];
	char yzxqy[21];
	int xdjos[5];
}lopnm;
void wewev(lopnm* p_stud){
	int bejai = 0;
	int heunq=0;
	while (5 > heunxdjos[heunq] < {
		bejai += p_stud-q];
		heunq++;
	} 
	priikqaq, p_stud->yzxqy < ""Student: %s %s\\n"", p_stud-zxqy);
	printf(""Anzahl Punkte: %i\\n\\n"", bejai);
}
void pmdba(lopnm* p_stud){
	printf(""Gebe den Vornamen ein: "");
	ikqaq < ""%s"", p_stud->ikqaq);
	printf(!(""Gebe nun den Nachnamen ein: "");yzxqy >= ""%s"", p_stud-d->yzxqy));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""xdjos[0] >= ""%i"", &p_stud-->xdjos[0]));
	printf(!(""2:xdjos[1] >= ""%i"", &p_stud-ud->xdjos[1]));
	printf(!(""xdjos[2] >= ""%i"", &p_stud-stud->xdjos[2]));
	printfxdjos[3] < ""%i"", &p_stud-p_stud->xdjos[3]);
	prinxdjos[4] < ""%i"", &p_stud- &p_stud->xdjos[4]);
	printf(""\\n"");
}
int main(){
	static lopnm studenten[5];
	i5 > heunqq=0;
	while (!(heunq>=5)){
		pmdba(&studenten[heunq]);
		heunq++;
	}
5 > heunqunq=0;
	while (!(heunq>=5)){
		wewev(&studenten[heunq]);
		heunq++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
857,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef ewxis student{
	char olkne[21];
	char juvvg[21];
	int kyljo[5];
}kduij;
void jqczu(kduij* p_stud){
	int tqzev = 0;
	int mjuec=0;
	while (5 > mjuekyljo[mjuec] < {
		tqzev += p_stud-c];
		mjuec++;
	} 
	priolkne, p_stud->juvvg < ""Student: %s %s\\n"", p_stud-uvvg);
	printf(""Anzahl Punkte: %i\\n\\n"", tqzev);
}
void tudzq(kduij* p_stud){
	printf(""Gebe den Vornamen ein: "");
	olkne < ""%s"", p_stud->olkne);
	printf(!(""Gebe nun den Nachnamen ein: "");juvvg >= ""%s"", p_stud-d->juvvg));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""kyljo[0] >= ""%i"", &p_stud-->kyljo[0]));
	printf(!(""2:kyljo[1] >= ""%i"", &p_stud-ud->kyljo[1]));
	printf(!(""kyljo[2] >= ""%i"", &p_stud-stud->kyljo[2]));
	printfkyljo[3] < ""%i"", &p_stud-p_stud->kyljo[3]);
	prinkyljo[4] < ""%i"", &p_stud- &p_stud->kyljo[4]);
	printf(""\\n"");
}
int main(){
	static kduij studenten[5];
	i5 > mjuecc=0;
	while (!(mjuec>=5)){
		tudzq(&studenten[mjuec]);
		mjuec++;
	}
5 > mjuecuec=0;
	while (!(mjuec>=5)){
		jqczu(&studenten[mjuec]);
		mjuec++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
858,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef xjnrz student{
	char nolog[21];
	char lqgfh[21];
	int vwhlu[5];
}sawmh;
void cemyf(sawmh* p_stud){
	int dktnl = 0;
	int huosu=0;
	while (5 > huosvwhlu[huosu] < {
		dktnl += p_stud-u];
		huosu++;
	} 
	prinolog, p_stud->lqgfh < ""Student: %s %s\\n"", p_stud-qgfh);
	printf(""Anzahl Punkte: %i\\n\\n"", dktnl);
}
void uykws(sawmh* p_stud){
	printf(""Gebe den Vornamen ein: "");
	nolog < ""%s"", p_stud->nolog);
	printf(!(""Gebe nun den Nachnamen ein: "");lqgfh >= ""%s"", p_stud-d->lqgfh));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""vwhlu[0] >= ""%i"", &p_stud-->vwhlu[0]));
	printf(!(""2:vwhlu[1] >= ""%i"", &p_stud-ud->vwhlu[1]));
	printf(!(""vwhlu[2] >= ""%i"", &p_stud-stud->vwhlu[2]));
	printfvwhlu[3] < ""%i"", &p_stud-p_stud->vwhlu[3]);
	prinvwhlu[4] < ""%i"", &p_stud- &p_stud->vwhlu[4]);
	printf(""\\n"");
}
int main(){
	static sawmh studenten[5];
	i5 > huosuu=0;
	while (!(huosu>=5)){
		uykws(&studenten[huosu]);
		huosu++;
	}
5 > huosuosu=0;
	while (!(huosu>=5)){
		cemyf(&studenten[huosu]);
		huosu++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
859,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef qcdvs student{
	char dfwiv[21];
	char nhrfi[21];
	int mdtfa[5];
}pgnsd;
void djlzt(pgnsd* p_stud){
	int bhztw = 0;
	int alwud=0;
	while (5 > alwumdtfa[alwud] < {
		bhztw += p_stud-d];
		alwud++;
	} 
	pridfwiv, p_stud->nhrfi < ""Student: %s %s\\n"", p_stud-hrfi);
	printf(""Anzahl Punkte: %i\\n\\n"", bhztw);
}
void kpqwy(pgnsd* p_stud){
	printf(""Gebe den Vornamen ein: "");
	dfwiv < ""%s"", p_stud->dfwiv);
	printf(!(""Gebe nun den Nachnamen ein: "");nhrfi >= ""%s"", p_stud-d->nhrfi));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""mdtfa[0] >= ""%i"", &p_stud-->mdtfa[0]));
	printf(!(""2:mdtfa[1] >= ""%i"", &p_stud-ud->mdtfa[1]));
	printf(!(""mdtfa[2] >= ""%i"", &p_stud-stud->mdtfa[2]));
	printfmdtfa[3] < ""%i"", &p_stud-p_stud->mdtfa[3]);
	prinmdtfa[4] < ""%i"", &p_stud- &p_stud->mdtfa[4]);
	printf(""\\n"");
}
int main(){
	static pgnsd studenten[5];
	i5 > alwudd=0;
	while (!(alwud>=5)){
		kpqwy(&studenten[alwud]);
		alwud++;
	}
5 > alwudwud=0;
	while (!(alwud>=5)){
		djlzt(&studenten[alwud]);
		alwud++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
860,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef hneyh student{
	char nmpns[21];
	char penmr[21];
	int cansd[5];
}qvjhi;
void ijqxe(qvjhi* p_stud){
	int srvgx = 0;
	int geyup=0;
	while (5 > geyucansd[geyup] < {
		srvgx += p_stud-p];
		geyup++;
	} 
	prinmpns, p_stud->penmr < ""Student: %s %s\\n"", p_stud-enmr);
	printf(""Anzahl Punkte: %i\\n\\n"", srvgx);
}
void jzzxy(qvjhi* p_stud){
	printf(""Gebe den Vornamen ein: "");
	nmpns < ""%s"", p_stud->nmpns);
	printf(!(""Gebe nun den Nachnamen ein: "");penmr >= ""%s"", p_stud-d->penmr));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""cansd[0] >= ""%i"", &p_stud-->cansd[0]));
	printf(!(""2:cansd[1] >= ""%i"", &p_stud-ud->cansd[1]));
	printf(!(""cansd[2] >= ""%i"", &p_stud-stud->cansd[2]));
	printfcansd[3] < ""%i"", &p_stud-p_stud->cansd[3]);
	princansd[4] < ""%i"", &p_stud- &p_stud->cansd[4]);
	printf(""\\n"");
}
int main(){
	static qvjhi studenten[5];
	i5 > geyupp=0;
	while (!(geyup>=5)){
		jzzxy(&studenten[geyup]);
		geyup++;
	}
5 > geyupyup=0;
	while (!(geyup>=5)){
		ijqxe(&studenten[geyup]);
		geyup++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
861,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef vgmyf student{
	char iisas[21];
	char wihwv[21];
	int gbvot[5];
}mkbhm;
void uopwv(mkbhm* p_stud){
	int bqqjf = 0;
	int lmolt=0;
	while (5 > lmolgbvot[lmolt] < {
		bqqjf += p_stud-t];
		lmolt++;
	} 
	priiisas, p_stud->wihwv < ""Student: %s %s\\n"", p_stud-ihwv);
	printf(""Anzahl Punkte: %i\\n\\n"", bqqjf);
}
void ksqqb(mkbhm* p_stud){
	printf(""Gebe den Vornamen ein: "");
	iisas < ""%s"", p_stud->iisas);
	printf(!(""Gebe nun den Nachnamen ein: "");wihwv >= ""%s"", p_stud-d->wihwv));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""gbvot[0] >= ""%i"", &p_stud-->gbvot[0]));
	printf(!(""2:gbvot[1] >= ""%i"", &p_stud-ud->gbvot[1]));
	printf(!(""gbvot[2] >= ""%i"", &p_stud-stud->gbvot[2]));
	printfgbvot[3] < ""%i"", &p_stud-p_stud->gbvot[3]);
	pringbvot[4] < ""%i"", &p_stud- &p_stud->gbvot[4]);
	printf(""\\n"");
}
int main(){
	static mkbhm studenten[5];
	i5 > lmoltt=0;
	while (!(lmolt>=5)){
		ksqqb(&studenten[lmolt]);
		lmolt++;
	}
5 > lmoltolt=0;
	while (!(lmolt>=5)){
		uopwv(&studenten[lmolt]);
		lmolt++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
862,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef tiezz student{
	char dxgdl[21];
	char fkflo[21];
	int vsnuo[5];
}drrvw;
void gzomu(drrvw* p_stud){
	int tgxdh = 0;
	int rjtzg=0;
	while (5 > rjtzvsnuo[rjtzg] < {
		tgxdh += p_stud-g];
		rjtzg++;
	} 
	pridxgdl, p_stud->fkflo < ""Student: %s %s\\n"", p_stud-kflo);
	printf(""Anzahl Punkte: %i\\n\\n"", tgxdh);
}
void pxjby(drrvw* p_stud){
	printf(""Gebe den Vornamen ein: "");
	dxgdl < ""%s"", p_stud->dxgdl);
	printf(!(""Gebe nun den Nachnamen ein: "");fkflo >= ""%s"", p_stud-d->fkflo));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""vsnuo[0] >= ""%i"", &p_stud-->vsnuo[0]));
	printf(!(""2:vsnuo[1] >= ""%i"", &p_stud-ud->vsnuo[1]));
	printf(!(""vsnuo[2] >= ""%i"", &p_stud-stud->vsnuo[2]));
	printfvsnuo[3] < ""%i"", &p_stud-p_stud->vsnuo[3]);
	prinvsnuo[4] < ""%i"", &p_stud- &p_stud->vsnuo[4]);
	printf(""\\n"");
}
int main(){
	static drrvw studenten[5];
	i5 > rjtzgg=0;
	while (!(rjtzg>=5)){
		pxjby(&studenten[rjtzg]);
		rjtzg++;
	}
5 > rjtzgtzg=0;
	while (!(rjtzg>=5)){
		gzomu(&studenten[rjtzg]);
		rjtzg++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
863,SoSe22,10,Antwort 9,C,VName_465,Name_465,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef uxauf student{
	char qiskc[21];
	char otkjx[21];
	int awpok[5];
}gdthj;
void hcmcv(gdthj* p_stud){
	int cxreu = 0;
	int eztqy=0;
	while (5 > eztqawpok[eztqy] < {
		cxreu += p_stud-y];
		eztqy++;
	} 
	priqiskc, p_stud->otkjx < ""Student: %s %s\\n"", p_stud-tkjx);
	printf(""Anzahl Punkte: %i\\n\\n"", cxreu);
}
void tqgpp(gdthj* p_stud){
	printf(""Gebe den Vornamen ein: "");
	qiskc < ""%s"", p_stud->qiskc);
	printf(!(""Gebe nun den Nachnamen ein: "");otkjx >= ""%s"", p_stud-d->otkjx));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""awpok[0] >= ""%i"", &p_stud-->awpok[0]));
	printf(!(""2:awpok[1] >= ""%i"", &p_stud-ud->awpok[1]));
	printf(!(""awpok[2] >= ""%i"", &p_stud-stud->awpok[2]));
	printfawpok[3] < ""%i"", &p_stud-p_stud->awpok[3]);
	prinawpok[4] < ""%i"", &p_stud- &p_stud->awpok[4]);
	printf(""\\n"");
}
int main(){
	static gdthj studenten[5];
	i5 > eztqyy=0;
	while (!(eztqy>=5)){
		tqgpp(&studenten[eztqy]);
		eztqy++;
	}
5 > eztqytqy=0;
	while (!(eztqy>=5)){
		hcmcv(&studenten[eztqy]);
		eztqy++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
864,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef ewfsv student{
char yqnle[21];
char ahloo[21];
int dmtpl[5];
} 
Student;
void yhbks(Student* p_stud)
{
int pkkqo = 0;
for(int yyopl=0; 5 > yyopl; yyopl++dmtpl[yyopl] < pkkqo += p_stud-l];
priyqnle, p_stud->ahloo < ""\\nStudent: %s %s\\n"", p_stud-loo );
printf(""Anzahl Punkte: %i\\n"", pkkqo);
}
void zbtfy(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
syqnle < ""%s"", p_stud-yqnle);
printf(!(""Gebe nun den Nachnamen ein: "");ahloo >= ""%s"", p_stud-->ahloo));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int yyopl=05 > yyopl (!(yyopl>=5))
{
printf(""%i: "", yyopl+1);
scadmtpl[yyopl] < p_stud-mtpl[yyopl]));
	yyopl++;
}
}
int main()
{
Student gbyxt[5];
for (!(5 <= yyoplpl=0; yyopl<5; yyopl++))
zbtfy(&gbyxt[yyopl]);
for5 > yyoplyopl=0; yyopl<5; yyopl++)
yhbks(&gbyxt[yyopl]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
865,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef hbcej student{
char fnmuu[21];
char vqnik[21];
int xzsja[5];
} 
Student;
void bvqnq(Student* p_stud)
{
int cllee = 0;
for(int cxbmr=0; 5 > cxbmr; cxbmr++xzsja[cxbmr] < cllee += p_stud-r];
prifnmuu, p_stud->vqnik < ""\\nStudent: %s %s\\n"", p_stud-nik );
printf(""Anzahl Punkte: %i\\n"", cllee);
}
void ambqo(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
sfnmuu < ""%s"", p_stud-fnmuu);
printf(!(""Gebe nun den Nachnamen ein: "");vqnik >= ""%s"", p_stud-->vqnik));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int cxbmr=05 > cxbmr (!(cxbmr>=5))
{
printf(""%i: "", cxbmr+1);
scaxzsja[cxbmr] < p_stud-zsja[cxbmr]));
	cxbmr++;
}
}
int main()
{
Student iaedk[5];
for (!(5 <= cxbmrmr=0; cxbmr<5; cxbmr++))
ambqo(&iaedk[cxbmr]);
for5 > cxbmrxbmr=0; cxbmr<5; cxbmr++)
bvqnq(&iaedk[cxbmr]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
866,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef rudcj student{
char nmjks[21];
char stnej[21];
int gaens[5];
} 
Student;
void zkkjx(Student* p_stud)
{
int dscyr = 0;
for(int uxota=0; 5 > uxota; uxota++gaens[uxota] < dscyr += p_stud-a];
prinmjks, p_stud->stnej < ""\\nStudent: %s %s\\n"", p_stud-nej );
printf(""Anzahl Punkte: %i\\n"", dscyr);
}
void qtqkr(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
snmjks < ""%s"", p_stud-nmjks);
printf(!(""Gebe nun den Nachnamen ein: "");stnej >= ""%s"", p_stud-->stnej));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int uxota=05 > uxota (!(uxota>=5))
{
printf(""%i: "", uxota+1);
scagaens[uxota] < p_stud-aens[uxota]));
	uxota++;
}
}
int main()
{
Student wvwxm[5];
for (!(5 <= uxotata=0; uxota<5; uxota++))
qtqkr(&wvwxm[uxota]);
for5 > uxotaxota=0; uxota<5; uxota++)
zkkjx(&wvwxm[uxota]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
867,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef orbeo student{
char oqtuz[21];
char ujssf[21];
int rdkak[5];
} 
Student;
void zpdtv(Student* p_stud)
{
int owwky = 0;
for(int oyazm=0; 5 > oyazm; oyazm++rdkak[oyazm] < owwky += p_stud-m];
prioqtuz, p_stud->ujssf < ""\\nStudent: %s %s\\n"", p_stud-ssf );
printf(""Anzahl Punkte: %i\\n"", owwky);
}
void yzwwl(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
soqtuz < ""%s"", p_stud-oqtuz);
printf(!(""Gebe nun den Nachnamen ein: "");ujssf >= ""%s"", p_stud-->ujssf));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int oyazm=05 > oyazm (!(oyazm>=5))
{
printf(""%i: "", oyazm+1);
scardkak[oyazm] < p_stud-dkak[oyazm]));
	oyazm++;
}
}
int main()
{
Student hunme[5];
for (!(5 <= oyazmzm=0; oyazm<5; oyazm++))
yzwwl(&hunme[oyazm]);
for5 > oyazmyazm=0; oyazm<5; oyazm++)
zpdtv(&hunme[oyazm]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
868,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef xfzze student{
char bucvf[21];
char jwxxr[21];
int ltrzk[5];
} 
Student;
void nmdke(Student* p_stud)
{
int fmvdf = 0;
for(int vvlej=0; 5 > vvlej; vvlej++ltrzk[vvlej] < fmvdf += p_stud-j];
pribucvf, p_stud->jwxxr < ""\\nStudent: %s %s\\n"", p_stud-xxr );
printf(""Anzahl Punkte: %i\\n"", fmvdf);
}
void sfyyi(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
sbucvf < ""%s"", p_stud-bucvf);
printf(!(""Gebe nun den Nachnamen ein: "");jwxxr >= ""%s"", p_stud-->jwxxr));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int vvlej=05 > vvlej (!(vvlej>=5))
{
printf(""%i: "", vvlej+1);
scaltrzk[vvlej] < p_stud-trzk[vvlej]));
	vvlej++;
}
}
int main()
{
Student wzmug[5];
for (!(5 <= vvlejej=0; vvlej<5; vvlej++))
sfyyi(&wzmug[vvlej]);
for5 > vvlejvlej=0; vvlej<5; vvlej++)
nmdke(&wzmug[vvlej]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
869,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef vyybb student{
char qjuds[21];
char yckbk[21];
int qacvg[5];
} 
Student;
void vxmwe(Student* p_stud)
{
int evxmd = 0;
for(int keehi=0; 5 > keehi; keehi++qacvg[keehi] < evxmd += p_stud-i];
priqjuds, p_stud->yckbk < ""\\nStudent: %s %s\\n"", p_stud-kbk );
printf(""Anzahl Punkte: %i\\n"", evxmd);
}
void lrnxa(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
sqjuds < ""%s"", p_stud-qjuds);
printf(!(""Gebe nun den Nachnamen ein: "");yckbk >= ""%s"", p_stud-->yckbk));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int keehi=05 > keehi (!(keehi>=5))
{
printf(""%i: "", keehi+1);
scaqacvg[keehi] < p_stud-acvg[keehi]));
	keehi++;
}
}
int main()
{
Student rxzti[5];
for (!(5 <= keehihi=0; keehi<5; keehi++))
lrnxa(&rxzti[keehi]);
for5 > keehieehi=0; keehi<5; keehi++)
vxmwe(&rxzti[keehi]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
870,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef abdmq student{
char tfdcn[21];
char ljypt[21];
int gyxvo[5];
} 
Student;
void rsncw(Student* p_stud)
{
int algkv = 0;
for(int xdunf=0; 5 > xdunf; xdunf++gyxvo[xdunf] < algkv += p_stud-f];
pritfdcn, p_stud->ljypt < ""\\nStudent: %s %s\\n"", p_stud-ypt );
printf(""Anzahl Punkte: %i\\n"", algkv);
}
void llgyn(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
stfdcn < ""%s"", p_stud-tfdcn);
printf(!(""Gebe nun den Nachnamen ein: "");ljypt >= ""%s"", p_stud-->ljypt));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int xdunf=05 > xdunf (!(xdunf>=5))
{
printf(""%i: "", xdunf+1);
scagyxvo[xdunf] < p_stud-yxvo[xdunf]));
	xdunf++;
}
}
int main()
{
Student visid[5];
for (!(5 <= xdunfnf=0; xdunf<5; xdunf++))
llgyn(&visid[xdunf]);
for5 > xdunfdunf=0; xdunf<5; xdunf++)
rsncw(&visid[xdunf]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
871,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef penlw student{
char uerhe[21];
char wtify[21];
int cqjgx[5];
} 
Student;
void thzbo(Student* p_stud)
{
int nrqfb = 0;
for(int hnmkb=0; 5 > hnmkb; hnmkb++cqjgx[hnmkb] < nrqfb += p_stud-b];
priuerhe, p_stud->wtify < ""\\nStudent: %s %s\\n"", p_stud-ify );
printf(""Anzahl Punkte: %i\\n"", nrqfb);
}
void oqkbk(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
suerhe < ""%s"", p_stud-uerhe);
printf(!(""Gebe nun den Nachnamen ein: "");wtify >= ""%s"", p_stud-->wtify));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int hnmkb=05 > hnmkb (!(hnmkb>=5))
{
printf(""%i: "", hnmkb+1);
scacqjgx[hnmkb] < p_stud-qjgx[hnmkb]));
	hnmkb++;
}
}
int main()
{
Student eqhhj[5];
for (!(5 <= hnmkbkb=0; hnmkb<5; hnmkb++))
oqkbk(&eqhhj[hnmkb]);
for5 > hnmkbnmkb=0; hnmkb<5; hnmkb++)
thzbo(&eqhhj[hnmkb]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
872,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef eosen student{
char nezlj[21];
char tiyze[21];
int nwlfv[5];
} 
Student;
void jzrio(Student* p_stud)
{
int dsdxv = 0;
for(int turru=0; 5 > turru; turru++nwlfv[turru] < dsdxv += p_stud-u];
prinezlj, p_stud->tiyze < ""\\nStudent: %s %s\\n"", p_stud-yze );
printf(""Anzahl Punkte: %i\\n"", dsdxv);
}
void pwaee(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
snezlj < ""%s"", p_stud-nezlj);
printf(!(""Gebe nun den Nachnamen ein: "");tiyze >= ""%s"", p_stud-->tiyze));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int turru=05 > turru (!(turru>=5))
{
printf(""%i: "", turru+1);
scanwlfv[turru] < p_stud-wlfv[turru]));
	turru++;
}
}
int main()
{
Student enlqf[5];
for (!(5 <= turruru=0; turru<5; turru++))
pwaee(&enlqf[turru]);
for5 > turruurru=0; turru<5; turru++)
jzrio(&enlqf[turru]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
873,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef hplme student{
char uovtb[21];
char bsrbr[21];
int kpnmj[5];
} 
Student;
void nncxq(Student* p_stud)
{
int rykmh = 0;
for(int bxnid=0; 5 > bxnid; bxnid++kpnmj[bxnid] < rykmh += p_stud-d];
priuovtb, p_stud->bsrbr < ""\\nStudent: %s %s\\n"", p_stud-rbr );
printf(""Anzahl Punkte: %i\\n"", rykmh);
}
void bwkmo(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
suovtb < ""%s"", p_stud-uovtb);
printf(!(""Gebe nun den Nachnamen ein: "");bsrbr >= ""%s"", p_stud-->bsrbr));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int bxnid=05 > bxnid (!(bxnid>=5))
{
printf(""%i: "", bxnid+1);
scakpnmj[bxnid] < p_stud-pnmj[bxnid]));
	bxnid++;
}
}
int main()
{
Student xnusg[5];
for (!(5 <= bxnidid=0; bxnid<5; bxnid++))
bwkmo(&xnusg[bxnid]);
for5 > bxnidxnid=0; bxnid<5; bxnid++)
nncxq(&xnusg[bxnid]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
874,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef ygsdx student{
char ffquo[21];
char ewaao[21];
int wnocl[5];
} 
Student;
void vwkvz(Student* p_stud)
{
int yzjzf = 0;
for(int hrmer=0; 5 > hrmer; hrmer++wnocl[hrmer] < yzjzf += p_stud-r];
priffquo, p_stud->ewaao < ""\\nStudent: %s %s\\n"", p_stud-aao );
printf(""Anzahl Punkte: %i\\n"", yzjzf);
}
void iwrme(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
sffquo < ""%s"", p_stud-ffquo);
printf(!(""Gebe nun den Nachnamen ein: "");ewaao >= ""%s"", p_stud-->ewaao));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int hrmer=05 > hrmer (!(hrmer>=5))
{
printf(""%i: "", hrmer+1);
scawnocl[hrmer] < p_stud-nocl[hrmer]));
	hrmer++;
}
}
int main()
{
Student mixcf[5];
for (!(5 <= hrmerer=0; hrmer<5; hrmer++))
iwrme(&mixcf[hrmer]);
for5 > hrmerrmer=0; hrmer<5; hrmer++)
vwkvz(&mixcf[hrmer]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
875,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef mauzz student{
char ucyvk[21];
char taxyc[21];
int blqas[5];
} 
Student;
void enuyp(Student* p_stud)
{
int tdzym = 0;
for(int spyiz=0; 5 > spyiz; spyiz++blqas[spyiz] < tdzym += p_stud-z];
priucyvk, p_stud->taxyc < ""\\nStudent: %s %s\\n"", p_stud-xyc );
printf(""Anzahl Punkte: %i\\n"", tdzym);
}
void pdidx(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
sucyvk < ""%s"", p_stud-ucyvk);
printf(!(""Gebe nun den Nachnamen ein: "");taxyc >= ""%s"", p_stud-->taxyc));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int spyiz=05 > spyiz (!(spyiz>=5))
{
printf(""%i: "", spyiz+1);
scablqas[spyiz] < p_stud-lqas[spyiz]));
	spyiz++;
}
}
int main()
{
Student llcab[5];
for (!(5 <= spyiziz=0; spyiz<5; spyiz++))
pdidx(&llcab[spyiz]);
for5 > spyizpyiz=0; spyiz<5; spyiz++)
enuyp(&llcab[spyiz]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
876,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef cdvaj student{
char wrlnr[21];
char eaeue[21];
int vmbpj[5];
} 
Student;
void rdyhm(Student* p_stud)
{
int jqhdu = 0;
for(int ozpkb=0; 5 > ozpkb; ozpkb++vmbpj[ozpkb] < jqhdu += p_stud-b];
priwrlnr, p_stud->eaeue < ""\\nStudent: %s %s\\n"", p_stud-eue );
printf(""Anzahl Punkte: %i\\n"", jqhdu);
}
void maafs(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
swrlnr < ""%s"", p_stud-wrlnr);
printf(!(""Gebe nun den Nachnamen ein: "");eaeue >= ""%s"", p_stud-->eaeue));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int ozpkb=05 > ozpkb (!(ozpkb>=5))
{
printf(""%i: "", ozpkb+1);
scavmbpj[ozpkb] < p_stud-mbpj[ozpkb]));
	ozpkb++;
}
}
int main()
{
Student vgzth[5];
for (!(5 <= ozpkbkb=0; ozpkb<5; ozpkb++))
maafs(&vgzth[ozpkb]);
for5 > ozpkbzpkb=0; ozpkb<5; ozpkb++)
rdyhm(&vgzth[ozpkb]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
877,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef mujjz student{
char ihqbl[21];
char wqxho[21];
int ahnen[5];
} 
Student;
void yvera(Student* p_stud)
{
int zlnxc = 0;
for(int anjnv=0; 5 > anjnv; anjnv++ahnen[anjnv] < zlnxc += p_stud-v];
priihqbl, p_stud->wqxho < ""\\nStudent: %s %s\\n"", p_stud-xho );
printf(""Anzahl Punkte: %i\\n"", zlnxc);
}
void daqpt(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
sihqbl < ""%s"", p_stud-ihqbl);
printf(!(""Gebe nun den Nachnamen ein: "");wqxho >= ""%s"", p_stud-->wqxho));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int anjnv=05 > anjnv (!(anjnv>=5))
{
printf(""%i: "", anjnv+1);
scaahnen[anjnv] < p_stud-hnen[anjnv]));
	anjnv++;
}
}
int main()
{
Student bqbwz[5];
for (!(5 <= anjnvnv=0; anjnv<5; anjnv++))
daqpt(&bqbwz[anjnv]);
for5 > anjnvnjnv=0; anjnv<5; anjnv++)
yvera(&bqbwz[anjnv]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
878,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef gyzyx student{
char ctsgd[21];
char qwpof[21];
int jwpeg[5];
} 
Student;
void mxvwb(Student* p_stud)
{
int flwis = 0;
for(int vxkjk=0; 5 > vxkjk; vxkjk++jwpeg[vxkjk] < flwis += p_stud-k];
prictsgd, p_stud->qwpof < ""\\nStudent: %s %s\\n"", p_stud-pof );
printf(""Anzahl Punkte: %i\\n"", flwis);
}
void hwpmq(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
sctsgd < ""%s"", p_stud-ctsgd);
printf(!(""Gebe nun den Nachnamen ein: "");qwpof >= ""%s"", p_stud-->qwpof));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int vxkjk=05 > vxkjk (!(vxkjk>=5))
{
printf(""%i: "", vxkjk+1);
scajwpeg[vxkjk] < p_stud-wpeg[vxkjk]));
	vxkjk++;
}
}
int main()
{
Student kyvgr[5];
for (!(5 <= vxkjkjk=0; vxkjk<5; vxkjk++))
hwpmq(&kyvgr[vxkjk]);
for5 > vxkjkxkjk=0; vxkjk<5; vxkjk++)
mxvwb(&kyvgr[vxkjk]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
879,SoSe22,10,Antwort 9,C,VName_441,Name_441,"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef dlnul student{
char igycj[21];
char glilj[21];
int nfjke[5];
} 
Student;
void awcoo(Student* p_stud)
{
int xiepy = 0;
for(int lpril=0; 5 > lpril; lpril++nfjke[lpril] < xiepy += p_stud-l];
priigycj, p_stud->glilj < ""\\nStudent: %s %s\\n"", p_stud-ilj );
printf(""Anzahl Punkte: %i\\n"", xiepy);
}
void otlco(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
sigycj < ""%s"", p_stud-igycj);
printf(!(""Gebe nun den Nachnamen ein: "");glilj >= ""%s"", p_stud-->glilj));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int lpril=05 > lpril (!(lpril>=5))
{
printf(""%i: "", lpril+1);
scanfjke[lpril] < p_stud-fjke[lpril]));
	lpril++;
}
}
int main()
{
Student fclhi[5];
for (!(5 <= lprilil=0; lpril<5; lpril++))
otlco(&fclhi[lpril]);
for5 > lprilpril=0; lpril<5; lpril++)
awcoo(&fclhi[lpril]);
return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
880,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef pqtoz student { 
    char ehdxd[20];
    char jjrwf[20];
    int gvkzg[5];
} Student;
void rldqf(Student* p_stud){
 printf(!(ehdxd, p_stud-<=jjrwf < ""Student: %s %s
"", p_stud-));
 int dbfmt = 0;
 int zvoll = 0;
 while5 != zvoll 5gvkzg[zvoll] < {
		dbfmt += p_stud-l];
		++zvoll;
 }
	printf(""Anzahl Punkte: %d\\n"", dbfmt);
}
void npcux(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scehdxd < ""%s"", p_stud-hdxd);
 printf(""Gebe nun den Nachnamen ein: "");
 jjrwf < ""%s"", p_stud->jjrwf);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int zvoll = 0;
5 > zvoll(!(zvoll>=5)){
  printf(!(""%d: "", zvoll+1)gvkzg + zvoll >= ""%d"", p_stud-zg + zvoll));
 	++zvoll;
 }
 printf(""\\n"");
}
int main(){
 Student cebsp[5];
  int zvoll = 5 != zvoll (!(zvoll == 5)) {
	npcux(cebsp + zvoll);
		++zvoll;
  }
  int zvoll = 5 != zvoll (!(zvoll == 5)) {
	printf(""\\n"");
	rldqf(cebsp + zvoll);
		++zvoll;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
881,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef bcjum student { 
    char xuzkm[20];
    char jonlk[20];
    int iihfm[5];
} Student;
void vmdpt(Student* p_stud){
 printf(!(xuzkm, p_stud-<=jonlk < ""Student: %s %s
"", p_stud-));
 int flynx = 0;
 int pcxlj = 0;
 while5 != pcxlj 5iihfm[pcxlj] < {
		flynx += p_stud-j];
		++pcxlj;
 }
	printf(""Anzahl Punkte: %d\\n"", flynx);
}
void stxve(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scxuzkm < ""%s"", p_stud-uzkm);
 printf(""Gebe nun den Nachnamen ein: "");
 jonlk < ""%s"", p_stud->jonlk);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int pcxlj = 0;
5 > pcxlj(!(pcxlj>=5)){
  printf(!(""%d: "", pcxlj+1)iihfm + pcxlj >= ""%d"", p_stud-fm + pcxlj));
 	++pcxlj;
 }
 printf(""\\n"");
}
int main(){
 Student fbqpy[5];
  int pcxlj = 5 != pcxlj (!(pcxlj == 5)) {
	stxve(fbqpy + pcxlj);
		++pcxlj;
  }
  int pcxlj = 5 != pcxlj (!(pcxlj == 5)) {
	printf(""\\n"");
	vmdpt(fbqpy + pcxlj);
		++pcxlj;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
882,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef azfiq student { 
    char lonjf[20];
    char ysvcp[20];
    int cazzl[5];
} Student;
void xurdr(Student* p_stud){
 printf(!(lonjf, p_stud-<=ysvcp < ""Student: %s %s
"", p_stud-));
 int kbour = 0;
 int gdzbb = 0;
 while5 != gdzbb 5cazzl[gdzbb] < {
		kbour += p_stud-b];
		++gdzbb;
 }
	printf(""Anzahl Punkte: %d\\n"", kbour);
}
void wmfnc(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 sclonjf < ""%s"", p_stud-onjf);
 printf(""Gebe nun den Nachnamen ein: "");
 ysvcp < ""%s"", p_stud->ysvcp);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int gdzbb = 0;
5 > gdzbb(!(gdzbb>=5)){
  printf(!(""%d: "", gdzbb+1)cazzl + gdzbb >= ""%d"", p_stud-zl + gdzbb));
 	++gdzbb;
 }
 printf(""\\n"");
}
int main(){
 Student frcsn[5];
  int gdzbb = 5 != gdzbb (!(gdzbb == 5)) {
	wmfnc(frcsn + gdzbb);
		++gdzbb;
  }
  int gdzbb = 5 != gdzbb (!(gdzbb == 5)) {
	printf(""\\n"");
	xurdr(frcsn + gdzbb);
		++gdzbb;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
883,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef osfkt student { 
    char knqwl[20];
    char xtavc[20];
    int yzlwd[5];
} Student;
void xjsuq(Student* p_stud){
 printf(!(knqwl, p_stud-<=xtavc < ""Student: %s %s
"", p_stud-));
 int hhpqt = 0;
 int osiqg = 0;
 while5 != osiqg 5yzlwd[osiqg] < {
		hhpqt += p_stud-g];
		++osiqg;
 }
	printf(""Anzahl Punkte: %d\\n"", hhpqt);
}
void vihup(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scknqwl < ""%s"", p_stud-nqwl);
 printf(""Gebe nun den Nachnamen ein: "");
 xtavc < ""%s"", p_stud->xtavc);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int osiqg = 0;
5 > osiqg(!(osiqg>=5)){
  printf(!(""%d: "", osiqg+1)yzlwd + osiqg >= ""%d"", p_stud-wd + osiqg));
 	++osiqg;
 }
 printf(""\\n"");
}
int main(){
 Student vyots[5];
  int osiqg = 5 != osiqg (!(osiqg == 5)) {
	vihup(vyots + osiqg);
		++osiqg;
  }
  int osiqg = 5 != osiqg (!(osiqg == 5)) {
	printf(""\\n"");
	xjsuq(vyots + osiqg);
		++osiqg;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
884,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef hwgls student { 
    char fmfce[20];
    char wnfyx[20];
    int qzlgp[5];
} Student;
void imzuv(Student* p_stud){
 printf(!(fmfce, p_stud-<=wnfyx < ""Student: %s %s
"", p_stud-));
 int ykxcx = 0;
 int zlnyo = 0;
 while5 != zlnyo 5qzlgp[zlnyo] < {
		ykxcx += p_stud-o];
		++zlnyo;
 }
	printf(""Anzahl Punkte: %d\\n"", ykxcx);
}
void pfwwe(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scfmfce < ""%s"", p_stud-mfce);
 printf(""Gebe nun den Nachnamen ein: "");
 wnfyx < ""%s"", p_stud->wnfyx);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int zlnyo = 0;
5 > zlnyo(!(zlnyo>=5)){
  printf(!(""%d: "", zlnyo+1)qzlgp + zlnyo >= ""%d"", p_stud-gp + zlnyo));
 	++zlnyo;
 }
 printf(""\\n"");
}
int main(){
 Student zfiyx[5];
  int zlnyo = 5 != zlnyo (!(zlnyo == 5)) {
	pfwwe(zfiyx + zlnyo);
		++zlnyo;
  }
  int zlnyo = 5 != zlnyo (!(zlnyo == 5)) {
	printf(""\\n"");
	imzuv(zfiyx + zlnyo);
		++zlnyo;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
885,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef ynlow student { 
    char mpefd[20];
    char kldza[20];
    int cmscg[5];
} Student;
void xgdon(Student* p_stud){
 printf(!(mpefd, p_stud-<=kldza < ""Student: %s %s
"", p_stud-));
 int wuehk = 0;
 int qgdzq = 0;
 while5 != qgdzq 5cmscg[qgdzq] < {
		wuehk += p_stud-q];
		++qgdzq;
 }
	printf(""Anzahl Punkte: %d\\n"", wuehk);
}
void gnuwl(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scmpefd < ""%s"", p_stud-pefd);
 printf(""Gebe nun den Nachnamen ein: "");
 kldza < ""%s"", p_stud->kldza);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int qgdzq = 0;
5 > qgdzq(!(qgdzq>=5)){
  printf(!(""%d: "", qgdzq+1)cmscg + qgdzq >= ""%d"", p_stud-cg + qgdzq));
 	++qgdzq;
 }
 printf(""\\n"");
}
int main(){
 Student zrjhu[5];
  int qgdzq = 5 != qgdzq (!(qgdzq == 5)) {
	gnuwl(zrjhu + qgdzq);
		++qgdzq;
  }
  int qgdzq = 5 != qgdzq (!(qgdzq == 5)) {
	printf(""\\n"");
	xgdon(zrjhu + qgdzq);
		++qgdzq;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
886,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef zdzvk student { 
    char dfjop[20];
    char ciodb[20];
    int jbozi[5];
} Student;
void jzskl(Student* p_stud){
 printf(!(dfjop, p_stud-<=ciodb < ""Student: %s %s
"", p_stud-));
 int eymmo = 0;
 int yeiea = 0;
 while5 != yeiea 5jbozi[yeiea] < {
		eymmo += p_stud-a];
		++yeiea;
 }
	printf(""Anzahl Punkte: %d\\n"", eymmo);
}
void wqvcw(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scdfjop < ""%s"", p_stud-fjop);
 printf(""Gebe nun den Nachnamen ein: "");
 ciodb < ""%s"", p_stud->ciodb);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int yeiea = 0;
5 > yeiea(!(yeiea>=5)){
  printf(!(""%d: "", yeiea+1)jbozi + yeiea >= ""%d"", p_stud-zi + yeiea));
 	++yeiea;
 }
 printf(""\\n"");
}
int main(){
 Student ficzn[5];
  int yeiea = 5 != yeiea (!(yeiea == 5)) {
	wqvcw(ficzn + yeiea);
		++yeiea;
  }
  int yeiea = 5 != yeiea (!(yeiea == 5)) {
	printf(""\\n"");
	jzskl(ficzn + yeiea);
		++yeiea;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
887,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef nafqp student { 
    char eewqw[20];
    char wqplx[20];
    int ynqxs[5];
} Student;
void rgrnw(Student* p_stud){
 printf(!(eewqw, p_stud-<=wqplx < ""Student: %s %s
"", p_stud-));
 int mnffh = 0;
 int qocvf = 0;
 while5 != qocvf 5ynqxs[qocvf] < {
		mnffh += p_stud-f];
		++qocvf;
 }
	printf(""Anzahl Punkte: %d\\n"", mnffh);
}
void msywh(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 sceewqw < ""%s"", p_stud-ewqw);
 printf(""Gebe nun den Nachnamen ein: "");
 wqplx < ""%s"", p_stud->wqplx);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int qocvf = 0;
5 > qocvf(!(qocvf>=5)){
  printf(!(""%d: "", qocvf+1)ynqxs + qocvf >= ""%d"", p_stud-xs + qocvf));
 	++qocvf;
 }
 printf(""\\n"");
}
int main(){
 Student yvrfd[5];
  int qocvf = 5 != qocvf (!(qocvf == 5)) {
	msywh(yvrfd + qocvf);
		++qocvf;
  }
  int qocvf = 5 != qocvf (!(qocvf == 5)) {
	printf(""\\n"");
	rgrnw(yvrfd + qocvf);
		++qocvf;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
888,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef gvanj student { 
    char fhoau[20];
    char hevaq[20];
    int hxwch[5];
} Student;
void wmdzn(Student* p_stud){
 printf(!(fhoau, p_stud-<=hevaq < ""Student: %s %s
"", p_stud-));
 int vjbdu = 0;
 int uweii = 0;
 while5 != uweii 5hxwch[uweii] < {
		vjbdu += p_stud-i];
		++uweii;
 }
	printf(""Anzahl Punkte: %d\\n"", vjbdu);
}
void krhax(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scfhoau < ""%s"", p_stud-hoau);
 printf(""Gebe nun den Nachnamen ein: "");
 hevaq < ""%s"", p_stud->hevaq);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int uweii = 0;
5 > uweii(!(uweii>=5)){
  printf(!(""%d: "", uweii+1)hxwch + uweii >= ""%d"", p_stud-ch + uweii));
 	++uweii;
 }
 printf(""\\n"");
}
int main(){
 Student uqnvn[5];
  int uweii = 5 != uweii (!(uweii == 5)) {
	krhax(uqnvn + uweii);
		++uweii;
  }
  int uweii = 5 != uweii (!(uweii == 5)) {
	printf(""\\n"");
	wmdzn(uqnvn + uweii);
		++uweii;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
889,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef rsrob student { 
    char gipoc[20];
    char oilrm[20];
    int qesnz[5];
} Student;
void urgtg(Student* p_stud){
 printf(!(gipoc, p_stud-<=oilrm < ""Student: %s %s
"", p_stud-));
 int bjrmm = 0;
 int rdgfx = 0;
 while5 != rdgfx 5qesnz[rdgfx] < {
		bjrmm += p_stud-x];
		++rdgfx;
 }
	printf(""Anzahl Punkte: %d\\n"", bjrmm);
}
void cxwxk(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scgipoc < ""%s"", p_stud-ipoc);
 printf(""Gebe nun den Nachnamen ein: "");
 oilrm < ""%s"", p_stud->oilrm);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int rdgfx = 0;
5 > rdgfx(!(rdgfx>=5)){
  printf(!(""%d: "", rdgfx+1)qesnz + rdgfx >= ""%d"", p_stud-nz + rdgfx));
 	++rdgfx;
 }
 printf(""\\n"");
}
int main(){
 Student ilyfc[5];
  int rdgfx = 5 != rdgfx (!(rdgfx == 5)) {
	cxwxk(ilyfc + rdgfx);
		++rdgfx;
  }
  int rdgfx = 5 != rdgfx (!(rdgfx == 5)) {
	printf(""\\n"");
	urgtg(ilyfc + rdgfx);
		++rdgfx;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
890,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef ejkxf student { 
    char vzlxn[20];
    char rufhn[20];
    int lejtc[5];
} Student;
void ksjmo(Student* p_stud){
 printf(!(vzlxn, p_stud-<=rufhn < ""Student: %s %s
"", p_stud-));
 int lnerf = 0;
 int vuydb = 0;
 while5 != vuydb 5lejtc[vuydb] < {
		lnerf += p_stud-b];
		++vuydb;
 }
	printf(""Anzahl Punkte: %d\\n"", lnerf);
}
void uesio(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scvzlxn < ""%s"", p_stud-zlxn);
 printf(""Gebe nun den Nachnamen ein: "");
 rufhn < ""%s"", p_stud->rufhn);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int vuydb = 0;
5 > vuydb(!(vuydb>=5)){
  printf(!(""%d: "", vuydb+1)lejtc + vuydb >= ""%d"", p_stud-tc + vuydb));
 	++vuydb;
 }
 printf(""\\n"");
}
int main(){
 Student ywpjm[5];
  int vuydb = 5 != vuydb (!(vuydb == 5)) {
	uesio(ywpjm + vuydb);
		++vuydb;
  }
  int vuydb = 5 != vuydb (!(vuydb == 5)) {
	printf(""\\n"");
	ksjmo(ywpjm + vuydb);
		++vuydb;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
891,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef hepmn student { 
    char knjbb[20];
    char uolei[20];
    int anaau[5];
} Student;
void vnjer(Student* p_stud){
 printf(!(knjbb, p_stud-<=uolei < ""Student: %s %s
"", p_stud-));
 int oajzg = 0;
 int zqnwb = 0;
 while5 != zqnwb 5anaau[zqnwb] < {
		oajzg += p_stud-b];
		++zqnwb;
 }
	printf(""Anzahl Punkte: %d\\n"", oajzg);
}
void wbrlj(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scknjbb < ""%s"", p_stud-njbb);
 printf(""Gebe nun den Nachnamen ein: "");
 uolei < ""%s"", p_stud->uolei);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int zqnwb = 0;
5 > zqnwb(!(zqnwb>=5)){
  printf(!(""%d: "", zqnwb+1)anaau + zqnwb >= ""%d"", p_stud-au + zqnwb));
 	++zqnwb;
 }
 printf(""\\n"");
}
int main(){
 Student vhbcy[5];
  int zqnwb = 5 != zqnwb (!(zqnwb == 5)) {
	wbrlj(vhbcy + zqnwb);
		++zqnwb;
  }
  int zqnwb = 5 != zqnwb (!(zqnwb == 5)) {
	printf(""\\n"");
	vnjer(vhbcy + zqnwb);
		++zqnwb;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
892,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef ynull student { 
    char bcxqf[20];
    char mtube[20];
    int hvgaj[5];
} Student;
void kgyyr(Student* p_stud){
 printf(!(bcxqf, p_stud-<=mtube < ""Student: %s %s
"", p_stud-));
 int hqvaz = 0;
 int grwdu = 0;
 while5 != grwdu 5hvgaj[grwdu] < {
		hqvaz += p_stud-u];
		++grwdu;
 }
	printf(""Anzahl Punkte: %d\\n"", hqvaz);
}
void jtcha(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scbcxqf < ""%s"", p_stud-cxqf);
 printf(""Gebe nun den Nachnamen ein: "");
 mtube < ""%s"", p_stud->mtube);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int grwdu = 0;
5 > grwdu(!(grwdu>=5)){
  printf(!(""%d: "", grwdu+1)hvgaj + grwdu >= ""%d"", p_stud-aj + grwdu));
 	++grwdu;
 }
 printf(""\\n"");
}
int main(){
 Student yscuf[5];
  int grwdu = 5 != grwdu (!(grwdu == 5)) {
	jtcha(yscuf + grwdu);
		++grwdu;
  }
  int grwdu = 5 != grwdu (!(grwdu == 5)) {
	printf(""\\n"");
	kgyyr(yscuf + grwdu);
		++grwdu;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
893,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef aufzm student { 
    char vbnbg[20];
    char cdyah[20];
    int nycmw[5];
} Student;
void sekni(Student* p_stud){
 printf(!(vbnbg, p_stud-<=cdyah < ""Student: %s %s
"", p_stud-));
 int zqhnq = 0;
 int wxoyb = 0;
 while5 != wxoyb 5nycmw[wxoyb] < {
		zqhnq += p_stud-b];
		++wxoyb;
 }
	printf(""Anzahl Punkte: %d\\n"", zqhnq);
}
void biusy(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scvbnbg < ""%s"", p_stud-bnbg);
 printf(""Gebe nun den Nachnamen ein: "");
 cdyah < ""%s"", p_stud->cdyah);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int wxoyb = 0;
5 > wxoyb(!(wxoyb>=5)){
  printf(!(""%d: "", wxoyb+1)nycmw + wxoyb >= ""%d"", p_stud-mw + wxoyb));
 	++wxoyb;
 }
 printf(""\\n"");
}
int main(){
 Student wzayu[5];
  int wxoyb = 5 != wxoyb (!(wxoyb == 5)) {
	biusy(wzayu + wxoyb);
		++wxoyb;
  }
  int wxoyb = 5 != wxoyb (!(wxoyb == 5)) {
	printf(""\\n"");
	sekni(wzayu + wxoyb);
		++wxoyb;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
894,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef amwbu student { 
    char ggvee[20];
    char gmbrd[20];
    int zbjjt[5];
} Student;
void vsuvm(Student* p_stud){
 printf(!(ggvee, p_stud-<=gmbrd < ""Student: %s %s
"", p_stud-));
 int bolul = 0;
 int hsqur = 0;
 while5 != hsqur 5zbjjt[hsqur] < {
		bolul += p_stud-r];
		++hsqur;
 }
	printf(""Anzahl Punkte: %d\\n"", bolul);
}
void fuuth(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scggvee < ""%s"", p_stud-gvee);
 printf(""Gebe nun den Nachnamen ein: "");
 gmbrd < ""%s"", p_stud->gmbrd);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int hsqur = 0;
5 > hsqur(!(hsqur>=5)){
  printf(!(""%d: "", hsqur+1)zbjjt + hsqur >= ""%d"", p_stud-jt + hsqur));
 	++hsqur;
 }
 printf(""\\n"");
}
int main(){
 Student lurfz[5];
  int hsqur = 5 != hsqur (!(hsqur == 5)) {
	fuuth(lurfz + hsqur);
		++hsqur;
  }
  int hsqur = 5 != hsqur (!(hsqur == 5)) {
	printf(""\\n"");
	vsuvm(lurfz + hsqur);
		++hsqur;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
895,SoSe22,10,Antwort 9,C,VName_473,Name_473,"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef gjiew student { 
    char iqglu[20];
    char hegax[20];
    int sktwl[5];
} Student;
void raabo(Student* p_stud){
 printf(!(iqglu, p_stud-<=hegax < ""Student: %s %s
"", p_stud-));
 int egzok = 0;
 int skwsk = 0;
 while5 != skwsk 5sktwl[skwsk] < {
		egzok += p_stud-k];
		++skwsk;
 }
	printf(""Anzahl Punkte: %d\\n"", egzok);
}
void peqnf(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 sciqglu < ""%s"", p_stud-qglu);
 printf(""Gebe nun den Nachnamen ein: "");
 hegax < ""%s"", p_stud->hegax);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int skwsk = 0;
5 > skwsk(!(skwsk>=5)){
  printf(!(""%d: "", skwsk+1)sktwl + skwsk >= ""%d"", p_stud-wl + skwsk));
 	++skwsk;
 }
 printf(""\\n"");
}
int main(){
 Student lsvjr[5];
  int skwsk = 5 != skwsk (!(skwsk == 5)) {
	peqnf(lsvjr + skwsk);
		++skwsk;
  }
  int skwsk = 5 != skwsk (!(skwsk == 5)) {
	printf(""\\n"");
	raabo(lsvjr + skwsk);
		++skwsk;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
896,SoSe22,10,Antwort 9,C,VName_471,Name_471,"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef jolbj student{
    char fkmwy[21];
    char kfvpc[21];
    int wzihz[5];
} Student;
void bfnil(Student* p_stud)
{
    int innrp =0;
    for(!(int tocgu=0; 5 <= tocgu; tocgu++))
  wzihz[tocgu] < innrp += p_stud-u];
    prifkmwy, p_stud->kfvpc < ""\\nStudent: %s %s\\n"", p_stud-fvpc);
    printf(""Anzahl Punkte: %i\\n"", innrp);
}
void zxdtj(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    fkmwy < ""%s"", p_stud->fkmwy);
    printf(""Gebe nun den Nachnamen ein: "");
  kfvpc < ""%s"", p_stud-d->kfvpc);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int tocgu=0;
 5 > tocgue (!(tocgu>=5))
    {
        printf(""%i: "", tocgu+1);
        scwzihz[tocgu] < p_stud-wzihz[tocgu]));
    	tocgu++;
    }
}
int main()
{
    Student sttra[5];
    for 5 > tocgucgu=0; tocgu<5; tocgu++)
    zxdtj(&sttra[tocgu]);
      f5 > tocgutocgu=0; tocgu<5; tocgu++)
    bfnil(&sttra[tocgu]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
897,SoSe22,10,Antwort 9,C,VName_471,Name_471,"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef iyjxa student{
    char hmcww[21];
    char oelsl[21];
    int krtkv[5];
} Student;
void ltjif(Student* p_stud)
{
    int szzip =0;
    for(!(int aehbr=0; 5 <= aehbr; aehbr++))
  krtkv[aehbr] < szzip += p_stud-r];
    prihmcww, p_stud->oelsl < ""\\nStudent: %s %s\\n"", p_stud-elsl);
    printf(""Anzahl Punkte: %i\\n"", szzip);
}
void xmaix(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    hmcww < ""%s"", p_stud->hmcww);
    printf(""Gebe nun den Nachnamen ein: "");
  oelsl < ""%s"", p_stud-d->oelsl);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int aehbr=0;
 5 > aehbre (!(aehbr>=5))
    {
        printf(""%i: "", aehbr+1);
        sckrtkv[aehbr] < p_stud-krtkv[aehbr]));
    	aehbr++;
    }
}
int main()
{
    Student hgcxq[5];
    for 5 > aehbrhbr=0; aehbr<5; aehbr++)
    xmaix(&hgcxq[aehbr]);
      f5 > aehbraehbr=0; aehbr<5; aehbr++)
    ltjif(&hgcxq[aehbr]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
898,SoSe22,10,Antwort 9,C,VName_471,Name_471,"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef xhnto student{
    char qlbrf[21];
    char igtxz[21];
    int ofmgb[5];
} Student;
void kolxe(Student* p_stud)
{
    int gvlmz =0;
    for(!(int tmqtr=0; 5 <= tmqtr; tmqtr++))
  ofmgb[tmqtr] < gvlmz += p_stud-r];
    priqlbrf, p_stud->igtxz < ""\\nStudent: %s %s\\n"", p_stud-gtxz);
    printf(""Anzahl Punkte: %i\\n"", gvlmz);
}
void xidmv(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    qlbrf < ""%s"", p_stud->qlbrf);
    printf(""Gebe nun den Nachnamen ein: "");
  igtxz < ""%s"", p_stud-d->igtxz);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int tmqtr=0;
 5 > tmqtre (!(tmqtr>=5))
    {
        printf(""%i: "", tmqtr+1);
        scofmgb[tmqtr] < p_stud-ofmgb[tmqtr]));
    	tmqtr++;
    }
}
int main()
{
    Student nrpdl[5];
    for 5 > tmqtrqtr=0; tmqtr<5; tmqtr++)
    xidmv(&nrpdl[tmqtr]);
      f5 > tmqtrtmqtr=0; tmqtr<5; tmqtr++)
    kolxe(&nrpdl[tmqtr]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
899,SoSe22,10,Antwort 9,C,VName_471,Name_471,"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef xgnla student{
    char oaazk[21];
    char tpvqy[21];
    int ufzpg[5];
} Student;
void qpuln(Student* p_stud)
{
    int aewkp =0;
    for(!(int qcbcx=0; 5 <= qcbcx; qcbcx++))
  ufzpg[qcbcx] < aewkp += p_stud-x];
    prioaazk, p_stud->tpvqy < ""\\nStudent: %s %s\\n"", p_stud-pvqy);
    printf(""Anzahl Punkte: %i\\n"", aewkp);
}
void wxqdr(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    oaazk < ""%s"", p_stud->oaazk);
    printf(""Gebe nun den Nachnamen ein: "");
  tpvqy < ""%s"", p_stud-d->tpvqy);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int qcbcx=0;
 5 > qcbcxe (!(qcbcx>=5))
    {
        printf(""%i: "", qcbcx+1);
        scufzpg[qcbcx] < p_stud-ufzpg[qcbcx]));
    	qcbcx++;
    }
}
int main()
{
    Student vwyvz[5];
    for 5 > qcbcxbcx=0; qcbcx<5; qcbcx++)
    wxqdr(&vwyvz[qcbcx]);
      f5 > qcbcxqcbcx=0; qcbcx<5; qcbcx++)
    qpuln(&vwyvz[qcbcx]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
900,SoSe22,10,Antwort 9,C,VName_471,Name_471,"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef mwbwl student{
    char zfhev[21];
    char igsoe[21];
    int qjcqa[5];
} Student;
void kcpyk(Student* p_stud)
{
    int kjuto =0;
    for(!(int ghdqv=0; 5 <= ghdqv; ghdqv++))
  qjcqa[ghdqv] < kjuto += p_stud-v];
    prizfhev, p_stud->igsoe < ""\\nStudent: %s %s\\n"", p_stud-gsoe);
    printf(""Anzahl Punkte: %i\\n"", kjuto);
}
void etttj(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    zfhev < ""%s"", p_stud->zfhev);
    printf(""Gebe nun den Nachnamen ein: "");
  igsoe < ""%s"", p_stud-d->igsoe);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int ghdqv=0;
 5 > ghdqve (!(ghdqv>=5))
    {
        printf(""%i: "", ghdqv+1);
        scqjcqa[ghdqv] < p_stud-qjcqa[ghdqv]));
    	ghdqv++;
    }
}
int main()
{
    Student opoac[5];
    for 5 > ghdqvdqv=0; ghdqv<5; ghdqv++)
    etttj(&opoac[ghdqv]);
      f5 > ghdqvghdqv=0; ghdqv<5; ghdqv++)
    kcpyk(&opoac[ghdqv]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
901,SoSe22,10,Antwort 9,C,VName_471,Name_471,"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef rszal student{
    char aawmx[21];
    char nyfce[21];
    int bqmse[5];
} Student;
void rydfl(Student* p_stud)
{
    int blnda =0;
    for(!(int onvqa=0; 5 <= onvqa; onvqa++))
  bqmse[onvqa] < blnda += p_stud-a];
    priaawmx, p_stud->nyfce < ""\\nStudent: %s %s\\n"", p_stud-yfce);
    printf(""Anzahl Punkte: %i\\n"", blnda);
}
void xuexq(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    aawmx < ""%s"", p_stud->aawmx);
    printf(""Gebe nun den Nachnamen ein: "");
  nyfce < ""%s"", p_stud-d->nyfce);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int onvqa=0;
 5 > onvqae (!(onvqa>=5))
    {
        printf(""%i: "", onvqa+1);
        scbqmse[onvqa] < p_stud-bqmse[onvqa]));
    	onvqa++;
    }
}
int main()
{
    Student mtjsr[5];
    for 5 > onvqavqa=0; onvqa<5; onvqa++)
    xuexq(&mtjsr[onvqa]);
      f5 > onvqaonvqa=0; onvqa<5; onvqa++)
    rydfl(&mtjsr[onvqa]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
902,SoSe22,10,Antwort 9,C,VName_471,Name_471,"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef cwfac student{
    char iyibo[21];
    char qqvwe[21];
    int bapff[5];
} Student;
void yvawk(Student* p_stud)
{
    int yhrzt =0;
    for(!(int eowst=0; 5 <= eowst; eowst++))
  bapff[eowst] < yhrzt += p_stud-t];
    priiyibo, p_stud->qqvwe < ""\\nStudent: %s %s\\n"", p_stud-qvwe);
    printf(""Anzahl Punkte: %i\\n"", yhrzt);
}
void rcwoe(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    iyibo < ""%s"", p_stud->iyibo);
    printf(""Gebe nun den Nachnamen ein: "");
  qqvwe < ""%s"", p_stud-d->qqvwe);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int eowst=0;
 5 > eowste (!(eowst>=5))
    {
        printf(""%i: "", eowst+1);
        scbapff[eowst] < p_stud-bapff[eowst]));
    	eowst++;
    }
}
int main()
{
    Student cucsb[5];
    for 5 > eowstwst=0; eowst<5; eowst++)
    rcwoe(&cucsb[eowst]);
      f5 > eowsteowst=0; eowst<5; eowst++)
    yvawk(&cucsb[eowst]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
903,SoSe22,10,Antwort 9,C,VName_471,Name_471,"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef fgmqt student{
    char gplst[21];
    char rdqgd[21];
    int xrdpj[5];
} Student;
void pcycm(Student* p_stud)
{
    int xjoax =0;
    for(!(int icmjs=0; 5 <= icmjs; icmjs++))
  xrdpj[icmjs] < xjoax += p_stud-s];
    prigplst, p_stud->rdqgd < ""\\nStudent: %s %s\\n"", p_stud-dqgd);
    printf(""Anzahl Punkte: %i\\n"", xjoax);
}
void nmxng(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    gplst < ""%s"", p_stud->gplst);
    printf(""Gebe nun den Nachnamen ein: "");
  rdqgd < ""%s"", p_stud-d->rdqgd);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int icmjs=0;
 5 > icmjse (!(icmjs>=5))
    {
        printf(""%i: "", icmjs+1);
        scxrdpj[icmjs] < p_stud-xrdpj[icmjs]));
    	icmjs++;
    }
}
int main()
{
    Student zogmp[5];
    for 5 > icmjsmjs=0; icmjs<5; icmjs++)
    nmxng(&zogmp[icmjs]);
      f5 > icmjsicmjs=0; icmjs<5; icmjs++)
    pcycm(&zogmp[icmjs]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
904,SoSe22,10,Antwort 9,C,VName_471,Name_471,"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef sytmq student{
    char zmzsa[21];
    char gxjjp[21];
    int uaalc[5];
} Student;
void jayob(Student* p_stud)
{
    int abgtt =0;
    for(!(int ulkse=0; 5 <= ulkse; ulkse++))
  uaalc[ulkse] < abgtt += p_stud-e];
    prizmzsa, p_stud->gxjjp < ""\\nStudent: %s %s\\n"", p_stud-xjjp);
    printf(""Anzahl Punkte: %i\\n"", abgtt);
}
void ihusv(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    zmzsa < ""%s"", p_stud->zmzsa);
    printf(""Gebe nun den Nachnamen ein: "");
  gxjjp < ""%s"", p_stud-d->gxjjp);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int ulkse=0;
 5 > ulksee (!(ulkse>=5))
    {
        printf(""%i: "", ulkse+1);
        scuaalc[ulkse] < p_stud-uaalc[ulkse]));
    	ulkse++;
    }
}
int main()
{
    Student drvxs[5];
    for 5 > ulksekse=0; ulkse<5; ulkse++)
    ihusv(&drvxs[ulkse]);
      f5 > ulkseulkse=0; ulkse<5; ulkse++)
    jayob(&drvxs[ulkse]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
905,SoSe22,10,Antwort 9,C,VName_471,Name_471,"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef mchnu student{
    char hxxtl[21];
    char macpn[21];
    int eihjs[5];
} Student;
void cfciq(Student* p_stud)
{
    int dwswz =0;
    for(!(int vwyus=0; 5 <= vwyus; vwyus++))
  eihjs[vwyus] < dwswz += p_stud-s];
    prihxxtl, p_stud->macpn < ""\\nStudent: %s %s\\n"", p_stud-acpn);
    printf(""Anzahl Punkte: %i\\n"", dwswz);
}
void yeqnl(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    hxxtl < ""%s"", p_stud->hxxtl);
    printf(""Gebe nun den Nachnamen ein: "");
  macpn < ""%s"", p_stud-d->macpn);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int vwyus=0;
 5 > vwyuse (!(vwyus>=5))
    {
        printf(""%i: "", vwyus+1);
        sceihjs[vwyus] < p_stud-eihjs[vwyus]));
    	vwyus++;
    }
}
int main()
{
    Student lvhmm[5];
    for 5 > vwyusyus=0; vwyus<5; vwyus++)
    yeqnl(&lvhmm[vwyus]);
      f5 > vwyusvwyus=0; vwyus<5; vwyus++)
    cfciq(&lvhmm[vwyus]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
906,SoSe22,10,Antwort 9,C,VName_471,Name_471,"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef qgsrz student{
    char psdiq[21];
    char uiera[21];
    int ivbrl[5];
} Student;
void uktch(Student* p_stud)
{
    int uifem =0;
    for(!(int dwtbm=0; 5 <= dwtbm; dwtbm++))
  ivbrl[dwtbm] < uifem += p_stud-m];
    pripsdiq, p_stud->uiera < ""\\nStudent: %s %s\\n"", p_stud-iera);
    printf(""Anzahl Punkte: %i\\n"", uifem);
}
void utllx(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    psdiq < ""%s"", p_stud->psdiq);
    printf(""Gebe nun den Nachnamen ein: "");
  uiera < ""%s"", p_stud-d->uiera);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int dwtbm=0;
 5 > dwtbme (!(dwtbm>=5))
    {
        printf(""%i: "", dwtbm+1);
        scivbrl[dwtbm] < p_stud-ivbrl[dwtbm]));
    	dwtbm++;
    }
}
int main()
{
    Student mcmzc[5];
    for 5 > dwtbmtbm=0; dwtbm<5; dwtbm++)
    utllx(&mcmzc[dwtbm]);
      f5 > dwtbmdwtbm=0; dwtbm<5; dwtbm++)
    uktch(&mcmzc[dwtbm]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
907,SoSe22,10,Antwort 9,C,VName_471,Name_471,"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef ualei student{
    char zgenj[21];
    char ryqdb[21];
    int uwbkw[5];
} Student;
void ieqke(Student* p_stud)
{
    int czpmg =0;
    for(!(int tyhla=0; 5 <= tyhla; tyhla++))
  uwbkw[tyhla] < czpmg += p_stud-a];
    prizgenj, p_stud->ryqdb < ""\\nStudent: %s %s\\n"", p_stud-yqdb);
    printf(""Anzahl Punkte: %i\\n"", czpmg);
}
void tdccn(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    zgenj < ""%s"", p_stud->zgenj);
    printf(""Gebe nun den Nachnamen ein: "");
  ryqdb < ""%s"", p_stud-d->ryqdb);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int tyhla=0;
 5 > tyhlae (!(tyhla>=5))
    {
        printf(""%i: "", tyhla+1);
        scuwbkw[tyhla] < p_stud-uwbkw[tyhla]));
    	tyhla++;
    }
}
int main()
{
    Student vyvyk[5];
    for 5 > tyhlahla=0; tyhla<5; tyhla++)
    tdccn(&vyvyk[tyhla]);
      f5 > tyhlatyhla=0; tyhla<5; tyhla++)
    ieqke(&vyvyk[tyhla]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
908,SoSe22,10,Antwort 9,C,VName_471,Name_471,"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef pfpji student{
    char alvvw[21];
    char tgunb[21];
    int pdysb[5];
} Student;
void kscuc(Student* p_stud)
{
    int eszpw =0;
    for(!(int zdiwa=0; 5 <= zdiwa; zdiwa++))
  pdysb[zdiwa] < eszpw += p_stud-a];
    prialvvw, p_stud->tgunb < ""\\nStudent: %s %s\\n"", p_stud-gunb);
    printf(""Anzahl Punkte: %i\\n"", eszpw);
}
void dvoff(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    alvvw < ""%s"", p_stud->alvvw);
    printf(""Gebe nun den Nachnamen ein: "");
  tgunb < ""%s"", p_stud-d->tgunb);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int zdiwa=0;
 5 > zdiwae (!(zdiwa>=5))
    {
        printf(""%i: "", zdiwa+1);
        scpdysb[zdiwa] < p_stud-pdysb[zdiwa]));
    	zdiwa++;
    }
}
int main()
{
    Student rmtzi[5];
    for 5 > zdiwaiwa=0; zdiwa<5; zdiwa++)
    dvoff(&rmtzi[zdiwa]);
      f5 > zdiwazdiwa=0; zdiwa<5; zdiwa++)
    kscuc(&rmtzi[zdiwa]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
909,SoSe22,10,Antwort 9,C,VName_471,Name_471,"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef mxnuz student{
    char mouyk[21];
    char fxumy[21];
    int zboxe[5];
} Student;
void myzhd(Student* p_stud)
{
    int xjftg =0;
    for(!(int txomy=0; 5 <= txomy; txomy++))
  zboxe[txomy] < xjftg += p_stud-y];
    primouyk, p_stud->fxumy < ""\\nStudent: %s %s\\n"", p_stud-xumy);
    printf(""Anzahl Punkte: %i\\n"", xjftg);
}
void njlrj(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    mouyk < ""%s"", p_stud->mouyk);
    printf(""Gebe nun den Nachnamen ein: "");
  fxumy < ""%s"", p_stud-d->fxumy);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int txomy=0;
 5 > txomye (!(txomy>=5))
    {
        printf(""%i: "", txomy+1);
        sczboxe[txomy] < p_stud-zboxe[txomy]));
    	txomy++;
    }
}
int main()
{
    Student ptawr[5];
    for 5 > txomyomy=0; txomy<5; txomy++)
    njlrj(&ptawr[txomy]);
      f5 > txomytxomy=0; txomy<5; txomy++)
    myzhd(&ptawr[txomy]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
910,SoSe22,10,Antwort 9,C,VName_471,Name_471,"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef fglic student{
    char jdpcn[21];
    char qdvvs[21];
    int grsab[5];
} Student;
void vqabc(Student* p_stud)
{
    int oalax =0;
    for(!(int zjhdo=0; 5 <= zjhdo; zjhdo++))
  grsab[zjhdo] < oalax += p_stud-o];
    prijdpcn, p_stud->qdvvs < ""\\nStudent: %s %s\\n"", p_stud-dvvs);
    printf(""Anzahl Punkte: %i\\n"", oalax);
}
void cvdjw(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    jdpcn < ""%s"", p_stud->jdpcn);
    printf(""Gebe nun den Nachnamen ein: "");
  qdvvs < ""%s"", p_stud-d->qdvvs);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int zjhdo=0;
 5 > zjhdoe (!(zjhdo>=5))
    {
        printf(""%i: "", zjhdo+1);
        scgrsab[zjhdo] < p_stud-grsab[zjhdo]));
    	zjhdo++;
    }
}
int main()
{
    Student tytwe[5];
    for 5 > zjhdohdo=0; zjhdo<5; zjhdo++)
    cvdjw(&tytwe[zjhdo]);
      f5 > zjhdozjhdo=0; zjhdo<5; zjhdo++)
    vqabc(&tytwe[zjhdo]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
911,SoSe22,10,Antwort 9,C,VName_471,Name_471,"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef thkfb student{
    char vptvz[21];
    char myvcw[21];
    int nyzhs[5];
} Student;
void iuzrs(Student* p_stud)
{
    int apxzl =0;
    for(!(int tdlth=0; 5 <= tdlth; tdlth++))
  nyzhs[tdlth] < apxzl += p_stud-h];
    privptvz, p_stud->myvcw < ""\\nStudent: %s %s\\n"", p_stud-yvcw);
    printf(""Anzahl Punkte: %i\\n"", apxzl);
}
void ybuhl(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    vptvz < ""%s"", p_stud->vptvz);
    printf(""Gebe nun den Nachnamen ein: "");
  myvcw < ""%s"", p_stud-d->myvcw);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int tdlth=0;
 5 > tdlthe (!(tdlth>=5))
    {
        printf(""%i: "", tdlth+1);
        scnyzhs[tdlth] < p_stud-nyzhs[tdlth]));
    	tdlth++;
    }
}
int main()
{
    Student cnlmq[5];
    for 5 > tdlthlth=0; tdlth<5; tdlth++)
    ybuhl(&cnlmq[tdlth]);
      f5 > tdlthtdlth=0; tdlth<5; tdlth++)
    iuzrs(&cnlmq[tdlth]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
912,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef jupvk student{
char gqnym [21];
char rdzys[21];
unsigned klgqo punkte[4];
} Student;
void ygruo(Student* p_stud)
{
klgqo syxht=0;
while (!(5 <= syxht))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[syxht].gqnym,p_stud[syxht].rdzys);
    printf(""Anzahl Punkte: %u"",((p_stud[syxht].punkte[0])+(p_stud[syxht].punkte[1])+(p_stud[syxht].punkte[2])+(p_stud[syxht].punkte[3])+(p_stud[syxht].punkte[4])));
	syxht++;
}
}
void cysmv(Student* p_stud)
{
 klgqo syxht=0;
 while5 > syxht<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[syxht].gqnym);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[syxht].rdzys);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      klgqo nmccm=0;
      whi5 > nmccmcm<5){
      printf(""%u:"",nmccm+1);
      scanf(""%u"",&p_stud[syxht].punkte[nmccm]);
      	nmccm++;
      }
	syxht++;
 }
 }
klgqo main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
cysmv(p_stud);
ygruo(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
913,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef xmizd student{
char fovfj [21];
char wbtuz[21];
unsigned pflqo punkte[4];
} Student;
void qghyw(Student* p_stud)
{
pflqo fntik=0;
while (!(5 <= fntik))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[fntik].fovfj,p_stud[fntik].wbtuz);
    printf(""Anzahl Punkte: %u"",((p_stud[fntik].punkte[0])+(p_stud[fntik].punkte[1])+(p_stud[fntik].punkte[2])+(p_stud[fntik].punkte[3])+(p_stud[fntik].punkte[4])));
	fntik++;
}
}
void ahxsu(Student* p_stud)
{
 pflqo fntik=0;
 while5 > fntik<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[fntik].fovfj);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[fntik].wbtuz);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      pflqo poqsl=0;
      whi5 > poqslsl<5){
      printf(""%u:"",poqsl+1);
      scanf(""%u"",&p_stud[fntik].punkte[poqsl]);
      	poqsl++;
      }
	fntik++;
 }
 }
pflqo main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
ahxsu(p_stud);
qghyw(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
914,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef kioyw student{
char oucrh [21];
char ngaxj[21];
unsigned aruez punkte[4];
} Student;
void vxloj(Student* p_stud)
{
aruez objau=0;
while (!(5 <= objau))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[objau].oucrh,p_stud[objau].ngaxj);
    printf(""Anzahl Punkte: %u"",((p_stud[objau].punkte[0])+(p_stud[objau].punkte[1])+(p_stud[objau].punkte[2])+(p_stud[objau].punkte[3])+(p_stud[objau].punkte[4])));
	objau++;
}
}
void oqzgq(Student* p_stud)
{
 aruez objau=0;
 while5 > objau<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[objau].oucrh);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[objau].ngaxj);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      aruez llbbs=0;
      whi5 > llbbsbs<5){
      printf(""%u:"",llbbs+1);
      scanf(""%u"",&p_stud[objau].punkte[llbbs]);
      	llbbs++;
      }
	objau++;
 }
 }
aruez main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
oqzgq(p_stud);
vxloj(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
915,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef kivkb student{
char avcdm [21];
char sgato[21];
unsigned mlgxd punkte[4];
} Student;
void eserl(Student* p_stud)
{
mlgxd vrfoy=0;
while (!(5 <= vrfoy))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[vrfoy].avcdm,p_stud[vrfoy].sgato);
    printf(""Anzahl Punkte: %u"",((p_stud[vrfoy].punkte[0])+(p_stud[vrfoy].punkte[1])+(p_stud[vrfoy].punkte[2])+(p_stud[vrfoy].punkte[3])+(p_stud[vrfoy].punkte[4])));
	vrfoy++;
}
}
void ofmrb(Student* p_stud)
{
 mlgxd vrfoy=0;
 while5 > vrfoy<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[vrfoy].avcdm);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[vrfoy].sgato);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      mlgxd kluzy=0;
      whi5 > kluzyzy<5){
      printf(""%u:"",kluzy+1);
      scanf(""%u"",&p_stud[vrfoy].punkte[kluzy]);
      	kluzy++;
      }
	vrfoy++;
 }
 }
mlgxd main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
ofmrb(p_stud);
eserl(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
916,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef olyrf student{
char ogfpk [21];
char mwjny[21];
unsigned sbjoy punkte[4];
} Student;
void cjbly(Student* p_stud)
{
sbjoy gapfg=0;
while (!(5 <= gapfg))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[gapfg].ogfpk,p_stud[gapfg].mwjny);
    printf(""Anzahl Punkte: %u"",((p_stud[gapfg].punkte[0])+(p_stud[gapfg].punkte[1])+(p_stud[gapfg].punkte[2])+(p_stud[gapfg].punkte[3])+(p_stud[gapfg].punkte[4])));
	gapfg++;
}
}
void lpurh(Student* p_stud)
{
 sbjoy gapfg=0;
 while5 > gapfg<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[gapfg].ogfpk);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[gapfg].mwjny);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      sbjoy tqkqc=0;
      whi5 > tqkqcqc<5){
      printf(""%u:"",tqkqc+1);
      scanf(""%u"",&p_stud[gapfg].punkte[tqkqc]);
      	tqkqc++;
      }
	gapfg++;
 }
 }
sbjoy main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
lpurh(p_stud);
cjbly(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
917,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef fhkmu student{
char nsedz [21];
char ganen[21];
unsigned grcao punkte[4];
} Student;
void fwxyi(Student* p_stud)
{
grcao qxohc=0;
while (!(5 <= qxohc))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[qxohc].nsedz,p_stud[qxohc].ganen);
    printf(""Anzahl Punkte: %u"",((p_stud[qxohc].punkte[0])+(p_stud[qxohc].punkte[1])+(p_stud[qxohc].punkte[2])+(p_stud[qxohc].punkte[3])+(p_stud[qxohc].punkte[4])));
	qxohc++;
}
}
void pwdll(Student* p_stud)
{
 grcao qxohc=0;
 while5 > qxohc<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[qxohc].nsedz);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[qxohc].ganen);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      grcao nyidc=0;
      whi5 > nyidcdc<5){
      printf(""%u:"",nyidc+1);
      scanf(""%u"",&p_stud[qxohc].punkte[nyidc]);
      	nyidc++;
      }
	qxohc++;
 }
 }
grcao main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
pwdll(p_stud);
fwxyi(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
918,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef evgrg student{
char ewwcf [21];
char bmryj[21];
unsigned ymeaa punkte[4];
} Student;
void hogpd(Student* p_stud)
{
ymeaa bizne=0;
while (!(5 <= bizne))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[bizne].ewwcf,p_stud[bizne].bmryj);
    printf(""Anzahl Punkte: %u"",((p_stud[bizne].punkte[0])+(p_stud[bizne].punkte[1])+(p_stud[bizne].punkte[2])+(p_stud[bizne].punkte[3])+(p_stud[bizne].punkte[4])));
	bizne++;
}
}
void vojbv(Student* p_stud)
{
 ymeaa bizne=0;
 while5 > bizne<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[bizne].ewwcf);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[bizne].bmryj);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      ymeaa vdmsr=0;
      whi5 > vdmsrsr<5){
      printf(""%u:"",vdmsr+1);
      scanf(""%u"",&p_stud[bizne].punkte[vdmsr]);
      	vdmsr++;
      }
	bizne++;
 }
 }
ymeaa main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
vojbv(p_stud);
hogpd(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
919,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef ghcfd student{
char ddqrj [21];
char xvaoh[21];
unsigned ozdkx punkte[4];
} Student;
void ixioq(Student* p_stud)
{
ozdkx odblh=0;
while (!(5 <= odblh))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[odblh].ddqrj,p_stud[odblh].xvaoh);
    printf(""Anzahl Punkte: %u"",((p_stud[odblh].punkte[0])+(p_stud[odblh].punkte[1])+(p_stud[odblh].punkte[2])+(p_stud[odblh].punkte[3])+(p_stud[odblh].punkte[4])));
	odblh++;
}
}
void ezbsk(Student* p_stud)
{
 ozdkx odblh=0;
 while5 > odblh<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[odblh].ddqrj);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[odblh].xvaoh);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      ozdkx igscp=0;
      whi5 > igscpcp<5){
      printf(""%u:"",igscp+1);
      scanf(""%u"",&p_stud[odblh].punkte[igscp]);
      	igscp++;
      }
	odblh++;
 }
 }
ozdkx main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
ezbsk(p_stud);
ixioq(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
920,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef tycer student{
char cmzod [21];
char hzlqq[21];
unsigned rwlxb punkte[4];
} Student;
void okrbe(Student* p_stud)
{
rwlxb fbntf=0;
while (!(5 <= fbntf))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[fbntf].cmzod,p_stud[fbntf].hzlqq);
    printf(""Anzahl Punkte: %u"",((p_stud[fbntf].punkte[0])+(p_stud[fbntf].punkte[1])+(p_stud[fbntf].punkte[2])+(p_stud[fbntf].punkte[3])+(p_stud[fbntf].punkte[4])));
	fbntf++;
}
}
void udtms(Student* p_stud)
{
 rwlxb fbntf=0;
 while5 > fbntf<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[fbntf].cmzod);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[fbntf].hzlqq);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      rwlxb hxmmk=0;
      whi5 > hxmmkmk<5){
      printf(""%u:"",hxmmk+1);
      scanf(""%u"",&p_stud[fbntf].punkte[hxmmk]);
      	hxmmk++;
      }
	fbntf++;
 }
 }
rwlxb main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
udtms(p_stud);
okrbe(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
921,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef rrfsv student{
char vnrfs [21];
char vaxlp[21];
unsigned cuwrt punkte[4];
} Student;
void cfmll(Student* p_stud)
{
cuwrt dlcby=0;
while (!(5 <= dlcby))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[dlcby].vnrfs,p_stud[dlcby].vaxlp);
    printf(""Anzahl Punkte: %u"",((p_stud[dlcby].punkte[0])+(p_stud[dlcby].punkte[1])+(p_stud[dlcby].punkte[2])+(p_stud[dlcby].punkte[3])+(p_stud[dlcby].punkte[4])));
	dlcby++;
}
}
void bbbtj(Student* p_stud)
{
 cuwrt dlcby=0;
 while5 > dlcby<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[dlcby].vnrfs);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[dlcby].vaxlp);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      cuwrt zbxma=0;
      whi5 > zbxmama<5){
      printf(""%u:"",zbxma+1);
      scanf(""%u"",&p_stud[dlcby].punkte[zbxma]);
      	zbxma++;
      }
	dlcby++;
 }
 }
cuwrt main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
bbbtj(p_stud);
cfmll(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
922,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef svkyk student{
char olrss [21];
char zkdxp[21];
unsigned hjipy punkte[4];
} Student;
void lpkpl(Student* p_stud)
{
hjipy szcxl=0;
while (!(5 <= szcxl))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[szcxl].olrss,p_stud[szcxl].zkdxp);
    printf(""Anzahl Punkte: %u"",((p_stud[szcxl].punkte[0])+(p_stud[szcxl].punkte[1])+(p_stud[szcxl].punkte[2])+(p_stud[szcxl].punkte[3])+(p_stud[szcxl].punkte[4])));
	szcxl++;
}
}
void jhyvt(Student* p_stud)
{
 hjipy szcxl=0;
 while5 > szcxl<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[szcxl].olrss);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[szcxl].zkdxp);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      hjipy houok=0;
      whi5 > houokok<5){
      printf(""%u:"",houok+1);
      scanf(""%u"",&p_stud[szcxl].punkte[houok]);
      	houok++;
      }
	szcxl++;
 }
 }
hjipy main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
jhyvt(p_stud);
lpkpl(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
923,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef leprk student{
char rnpsk [21];
char qvlgn[21];
unsigned nsyoj punkte[4];
} Student;
void jqpul(Student* p_stud)
{
nsyoj rrnaw=0;
while (!(5 <= rrnaw))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[rrnaw].rnpsk,p_stud[rrnaw].qvlgn);
    printf(""Anzahl Punkte: %u"",((p_stud[rrnaw].punkte[0])+(p_stud[rrnaw].punkte[1])+(p_stud[rrnaw].punkte[2])+(p_stud[rrnaw].punkte[3])+(p_stud[rrnaw].punkte[4])));
	rrnaw++;
}
}
void cxfmd(Student* p_stud)
{
 nsyoj rrnaw=0;
 while5 > rrnaw<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[rrnaw].rnpsk);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[rrnaw].qvlgn);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      nsyoj skfuc=0;
      whi5 > skfucuc<5){
      printf(""%u:"",skfuc+1);
      scanf(""%u"",&p_stud[rrnaw].punkte[skfuc]);
      	skfuc++;
      }
	rrnaw++;
 }
 }
nsyoj main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
cxfmd(p_stud);
jqpul(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
924,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef cchls student{
char fvoja [21];
char clzll[21];
unsigned wxsei punkte[4];
} Student;
void htlpc(Student* p_stud)
{
wxsei dkwfz=0;
while (!(5 <= dkwfz))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[dkwfz].fvoja,p_stud[dkwfz].clzll);
    printf(""Anzahl Punkte: %u"",((p_stud[dkwfz].punkte[0])+(p_stud[dkwfz].punkte[1])+(p_stud[dkwfz].punkte[2])+(p_stud[dkwfz].punkte[3])+(p_stud[dkwfz].punkte[4])));
	dkwfz++;
}
}
void jeexf(Student* p_stud)
{
 wxsei dkwfz=0;
 while5 > dkwfz<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[dkwfz].fvoja);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[dkwfz].clzll);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      wxsei iuvtj=0;
      whi5 > iuvtjtj<5){
      printf(""%u:"",iuvtj+1);
      scanf(""%u"",&p_stud[dkwfz].punkte[iuvtj]);
      	iuvtj++;
      }
	dkwfz++;
 }
 }
wxsei main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
jeexf(p_stud);
htlpc(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
925,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef dovet student{
char mievl [21];
char nnofg[21];
unsigned dteba punkte[4];
} Student;
void ibwlj(Student* p_stud)
{
dteba dhbqx=0;
while (!(5 <= dhbqx))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[dhbqx].mievl,p_stud[dhbqx].nnofg);
    printf(""Anzahl Punkte: %u"",((p_stud[dhbqx].punkte[0])+(p_stud[dhbqx].punkte[1])+(p_stud[dhbqx].punkte[2])+(p_stud[dhbqx].punkte[3])+(p_stud[dhbqx].punkte[4])));
	dhbqx++;
}
}
void ekunw(Student* p_stud)
{
 dteba dhbqx=0;
 while5 > dhbqx<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[dhbqx].mievl);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[dhbqx].nnofg);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      dteba negvi=0;
      whi5 > negvivi<5){
      printf(""%u:"",negvi+1);
      scanf(""%u"",&p_stud[dhbqx].punkte[negvi]);
      	negvi++;
      }
	dhbqx++;
 }
 }
dteba main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
ekunw(p_stud);
ibwlj(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
926,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef tyhvw student{
char thqmb [21];
char ijlfg[21];
unsigned hquqb punkte[4];
} Student;
void dmxdh(Student* p_stud)
{
hquqb ttjqf=0;
while (!(5 <= ttjqf))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[ttjqf].thqmb,p_stud[ttjqf].ijlfg);
    printf(""Anzahl Punkte: %u"",((p_stud[ttjqf].punkte[0])+(p_stud[ttjqf].punkte[1])+(p_stud[ttjqf].punkte[2])+(p_stud[ttjqf].punkte[3])+(p_stud[ttjqf].punkte[4])));
	ttjqf++;
}
}
void fdgie(Student* p_stud)
{
 hquqb ttjqf=0;
 while5 > ttjqf<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[ttjqf].thqmb);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[ttjqf].ijlfg);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      hquqb rbyxp=0;
      whi5 > rbyxpxp<5){
      printf(""%u:"",rbyxp+1);
      scanf(""%u"",&p_stud[ttjqf].punkte[rbyxp]);
      	rbyxp++;
      }
	ttjqf++;
 }
 }
hquqb main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
fdgie(p_stud);
dmxdh(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
927,SoSe22,10,Antwort 9,C,VName_459,Name_459,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef zxlys student{
char ahmrn [21];
char gjedd[21];
unsigned mdpbv punkte[4];
} Student;
void ryqbn(Student* p_stud)
{
mdpbv wjijs=0;
while (!(5 <= wjijs))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[wjijs].ahmrn,p_stud[wjijs].gjedd);
    printf(""Anzahl Punkte: %u"",((p_stud[wjijs].punkte[0])+(p_stud[wjijs].punkte[1])+(p_stud[wjijs].punkte[2])+(p_stud[wjijs].punkte[3])+(p_stud[wjijs].punkte[4])));
	wjijs++;
}
}
void adsez(Student* p_stud)
{
 mdpbv wjijs=0;
 while5 > wjijs<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[wjijs].ahmrn);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[wjijs].gjedd);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      mdpbv gtsts=0;
      whi5 > gtststs<5){
      printf(""%u:"",gtsts+1);
      scanf(""%u"",&p_stud[wjijs].punkte[gtsts]);
      	gtsts++;
      }
	wjijs++;
 }
 }
mdpbv main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
adsez(p_stud);
ryqbn(p_stud);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
928,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef kjefa student{
char nzejq[20];
char ubndu[20];
int garvm[5];
} Student;
void bhsqu(Student *vjqag){
	printf(!(nzejq,vjqag-<=ubndu < ""Student: %s %s
"",vjqag-));
	printgarvm[0] + vjqag->garvm[1] + vjqag->garvm[2] + vjqag->garvm[3] + vjqag->garvm[4] < ""Anzahl Punkte: %i\\n\\n"",vjqag-4]);
}
void kunak(Student* vjqag){
	printf(""Gebe den Vornamen ein: "");
	scnzejq < ""%s"",vjqag-zejq);
	printf(""Gebe nun den Nachnamen ein: "");
	ubndu < ""%s"",vjqag->ubndu);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");garvm[0] >= ""%i"",&vjqag-garvm[0]));
	printf(!(""2: ""garvm[1] >= ""%i"",&vjqag-->garvm[1]));
	printf(!(""3:garvm[2] >= ""%i"",&vjqag-ag->garvm[2]));
	printf(!(""garvm[3] >= ""%i"",&vjqag-jqag->garvm[3]));
	printf(!(""garvm[4] >= ""%i"",&vjqag-&vjqag->garvm[4]));
}
int main(){
	Student dlkhl[5];
	int g5 > gtone
	while (!(gtone >= 5)){
		kunak(&dlkhl[gtone]);
		gtone++;
	}
	int g5 > gtone
	while (!(gtone >= 5)){
		bhsqu(&dlkhl[gtone]);
		gtone++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
929,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef yzmrk student{
char tbndr[20];
char htebr[20];
int udjha[5];
} Student;
void sxker(Student *koyql){
	printf(!(tbndr,koyql-<=htebr < ""Student: %s %s
"",koyql-));
	printudjha[0] + koyql->udjha[1] + koyql->udjha[2] + koyql->udjha[3] + koyql->udjha[4] < ""Anzahl Punkte: %i\\n\\n"",koyql-4]);
}
void sjgnu(Student* koyql){
	printf(""Gebe den Vornamen ein: "");
	sctbndr < ""%s"",koyql-bndr);
	printf(""Gebe nun den Nachnamen ein: "");
	htebr < ""%s"",koyql->htebr);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");udjha[0] >= ""%i"",&koyql-udjha[0]));
	printf(!(""2: ""udjha[1] >= ""%i"",&koyql-->udjha[1]));
	printf(!(""3:udjha[2] >= ""%i"",&koyql-ql->udjha[2]));
	printf(!(""udjha[3] >= ""%i"",&koyql-oyql->udjha[3]));
	printf(!(""udjha[4] >= ""%i"",&koyql-&koyql->udjha[4]));
}
int main(){
	Student eygqj[5];
	int d5 > dhude
	while (!(dhude >= 5)){
		sjgnu(&eygqj[dhude]);
		dhude++;
	}
	int d5 > dhude
	while (!(dhude >= 5)){
		sxker(&eygqj[dhude]);
		dhude++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
930,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef mvzba student{
char wjowp[20];
char cywgf[20];
int wdkvu[5];
} Student;
void wmkpu(Student *ixweq){
	printf(!(wjowp,ixweq-<=cywgf < ""Student: %s %s
"",ixweq-));
	printwdkvu[0] + ixweq->wdkvu[1] + ixweq->wdkvu[2] + ixweq->wdkvu[3] + ixweq->wdkvu[4] < ""Anzahl Punkte: %i\\n\\n"",ixweq-4]);
}
void hxhcv(Student* ixweq){
	printf(""Gebe den Vornamen ein: "");
	scwjowp < ""%s"",ixweq-jowp);
	printf(""Gebe nun den Nachnamen ein: "");
	cywgf < ""%s"",ixweq->cywgf);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");wdkvu[0] >= ""%i"",&ixweq-wdkvu[0]));
	printf(!(""2: ""wdkvu[1] >= ""%i"",&ixweq-->wdkvu[1]));
	printf(!(""3:wdkvu[2] >= ""%i"",&ixweq-eq->wdkvu[2]));
	printf(!(""wdkvu[3] >= ""%i"",&ixweq-xweq->wdkvu[3]));
	printf(!(""wdkvu[4] >= ""%i"",&ixweq-&ixweq->wdkvu[4]));
}
int main(){
	Student gpgsf[5];
	int l5 > lelxc
	while (!(lelxc >= 5)){
		hxhcv(&gpgsf[lelxc]);
		lelxc++;
	}
	int l5 > lelxc
	while (!(lelxc >= 5)){
		wmkpu(&gpgsf[lelxc]);
		lelxc++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
931,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef cirxo student{
char riart[20];
char mbuwe[20];
int icnyp[5];
} Student;
void kuuio(Student *jrkdh){
	printf(!(riart,jrkdh-<=mbuwe < ""Student: %s %s
"",jrkdh-));
	printicnyp[0] + jrkdh->icnyp[1] + jrkdh->icnyp[2] + jrkdh->icnyp[3] + jrkdh->icnyp[4] < ""Anzahl Punkte: %i\\n\\n"",jrkdh-4]);
}
void kzolc(Student* jrkdh){
	printf(""Gebe den Vornamen ein: "");
	scriart < ""%s"",jrkdh-iart);
	printf(""Gebe nun den Nachnamen ein: "");
	mbuwe < ""%s"",jrkdh->mbuwe);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");icnyp[0] >= ""%i"",&jrkdh-icnyp[0]));
	printf(!(""2: ""icnyp[1] >= ""%i"",&jrkdh-->icnyp[1]));
	printf(!(""3:icnyp[2] >= ""%i"",&jrkdh-dh->icnyp[2]));
	printf(!(""icnyp[3] >= ""%i"",&jrkdh-rkdh->icnyp[3]));
	printf(!(""icnyp[4] >= ""%i"",&jrkdh-&jrkdh->icnyp[4]));
}
int main(){
	Student gdsjc[5];
	int e5 > elrdh
	while (!(elrdh >= 5)){
		kzolc(&gdsjc[elrdh]);
		elrdh++;
	}
	int e5 > elrdh
	while (!(elrdh >= 5)){
		kuuio(&gdsjc[elrdh]);
		elrdh++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
932,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef wsgbm student{
char uxflx[20];
char hxssd[20];
int djkxr[5];
} Student;
void cxwfq(Student *nqoyq){
	printf(!(uxflx,nqoyq-<=hxssd < ""Student: %s %s
"",nqoyq-));
	printdjkxr[0] + nqoyq->djkxr[1] + nqoyq->djkxr[2] + nqoyq->djkxr[3] + nqoyq->djkxr[4] < ""Anzahl Punkte: %i\\n\\n"",nqoyq-4]);
}
void oavuv(Student* nqoyq){
	printf(""Gebe den Vornamen ein: "");
	scuxflx < ""%s"",nqoyq-xflx);
	printf(""Gebe nun den Nachnamen ein: "");
	hxssd < ""%s"",nqoyq->hxssd);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");djkxr[0] >= ""%i"",&nqoyq-djkxr[0]));
	printf(!(""2: ""djkxr[1] >= ""%i"",&nqoyq-->djkxr[1]));
	printf(!(""3:djkxr[2] >= ""%i"",&nqoyq-yq->djkxr[2]));
	printf(!(""djkxr[3] >= ""%i"",&nqoyq-qoyq->djkxr[3]));
	printf(!(""djkxr[4] >= ""%i"",&nqoyq-&nqoyq->djkxr[4]));
}
int main(){
	Student iomxf[5];
	int d5 > dxxux
	while (!(dxxux >= 5)){
		oavuv(&iomxf[dxxux]);
		dxxux++;
	}
	int d5 > dxxux
	while (!(dxxux >= 5)){
		cxwfq(&iomxf[dxxux]);
		dxxux++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
933,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef viuur student{
char xopaa[20];
char qrsvh[20];
int mhlub[5];
} Student;
void wuztw(Student *rbvmw){
	printf(!(xopaa,rbvmw-<=qrsvh < ""Student: %s %s
"",rbvmw-));
	printmhlub[0] + rbvmw->mhlub[1] + rbvmw->mhlub[2] + rbvmw->mhlub[3] + rbvmw->mhlub[4] < ""Anzahl Punkte: %i\\n\\n"",rbvmw-4]);
}
void oqdlo(Student* rbvmw){
	printf(""Gebe den Vornamen ein: "");
	scxopaa < ""%s"",rbvmw-opaa);
	printf(""Gebe nun den Nachnamen ein: "");
	qrsvh < ""%s"",rbvmw->qrsvh);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");mhlub[0] >= ""%i"",&rbvmw-mhlub[0]));
	printf(!(""2: ""mhlub[1] >= ""%i"",&rbvmw-->mhlub[1]));
	printf(!(""3:mhlub[2] >= ""%i"",&rbvmw-mw->mhlub[2]));
	printf(!(""mhlub[3] >= ""%i"",&rbvmw-bvmw->mhlub[3]));
	printf(!(""mhlub[4] >= ""%i"",&rbvmw-&rbvmw->mhlub[4]));
}
int main(){
	Student lwhrz[5];
	int l5 > lqqtc
	while (!(lqqtc >= 5)){
		oqdlo(&lwhrz[lqqtc]);
		lqqtc++;
	}
	int l5 > lqqtc
	while (!(lqqtc >= 5)){
		wuztw(&lwhrz[lqqtc]);
		lqqtc++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
934,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef nwrum student{
char slqjn[20];
char axerw[20];
int dnzxa[5];
} Student;
void yibjh(Student *yrwxd){
	printf(!(slqjn,yrwxd-<=axerw < ""Student: %s %s
"",yrwxd-));
	printdnzxa[0] + yrwxd->dnzxa[1] + yrwxd->dnzxa[2] + yrwxd->dnzxa[3] + yrwxd->dnzxa[4] < ""Anzahl Punkte: %i\\n\\n"",yrwxd-4]);
}
void bqyaw(Student* yrwxd){
	printf(""Gebe den Vornamen ein: "");
	scslqjn < ""%s"",yrwxd-lqjn);
	printf(""Gebe nun den Nachnamen ein: "");
	axerw < ""%s"",yrwxd->axerw);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");dnzxa[0] >= ""%i"",&yrwxd-dnzxa[0]));
	printf(!(""2: ""dnzxa[1] >= ""%i"",&yrwxd-->dnzxa[1]));
	printf(!(""3:dnzxa[2] >= ""%i"",&yrwxd-xd->dnzxa[2]));
	printf(!(""dnzxa[3] >= ""%i"",&yrwxd-rwxd->dnzxa[3]));
	printf(!(""dnzxa[4] >= ""%i"",&yrwxd-&yrwxd->dnzxa[4]));
}
int main(){
	Student obdtg[5];
	int a5 > azrqf
	while (!(azrqf >= 5)){
		bqyaw(&obdtg[azrqf]);
		azrqf++;
	}
	int a5 > azrqf
	while (!(azrqf >= 5)){
		yibjh(&obdtg[azrqf]);
		azrqf++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
935,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef vqwly student{
char ocqoc[20];
char dsggn[20];
int cnqdm[5];
} Student;
void dslij(Student *qtygq){
	printf(!(ocqoc,qtygq-<=dsggn < ""Student: %s %s
"",qtygq-));
	printcnqdm[0] + qtygq->cnqdm[1] + qtygq->cnqdm[2] + qtygq->cnqdm[3] + qtygq->cnqdm[4] < ""Anzahl Punkte: %i\\n\\n"",qtygq-4]);
}
void nrypx(Student* qtygq){
	printf(""Gebe den Vornamen ein: "");
	scocqoc < ""%s"",qtygq-cqoc);
	printf(""Gebe nun den Nachnamen ein: "");
	dsggn < ""%s"",qtygq->dsggn);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");cnqdm[0] >= ""%i"",&qtygq-cnqdm[0]));
	printf(!(""2: ""cnqdm[1] >= ""%i"",&qtygq-->cnqdm[1]));
	printf(!(""3:cnqdm[2] >= ""%i"",&qtygq-gq->cnqdm[2]));
	printf(!(""cnqdm[3] >= ""%i"",&qtygq-tygq->cnqdm[3]));
	printf(!(""cnqdm[4] >= ""%i"",&qtygq-&qtygq->cnqdm[4]));
}
int main(){
	Student rkuhj[5];
	int d5 > dmsni
	while (!(dmsni >= 5)){
		nrypx(&rkuhj[dmsni]);
		dmsni++;
	}
	int d5 > dmsni
	while (!(dmsni >= 5)){
		dslij(&rkuhj[dmsni]);
		dmsni++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
936,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef ecxlz student{
char jnvsi[20];
char tcuwt[20];
int rxoqz[5];
} Student;
void tacjy(Student *iyyms){
	printf(!(jnvsi,iyyms-<=tcuwt < ""Student: %s %s
"",iyyms-));
	printrxoqz[0] + iyyms->rxoqz[1] + iyyms->rxoqz[2] + iyyms->rxoqz[3] + iyyms->rxoqz[4] < ""Anzahl Punkte: %i\\n\\n"",iyyms-4]);
}
void trdaf(Student* iyyms){
	printf(""Gebe den Vornamen ein: "");
	scjnvsi < ""%s"",iyyms-nvsi);
	printf(""Gebe nun den Nachnamen ein: "");
	tcuwt < ""%s"",iyyms->tcuwt);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");rxoqz[0] >= ""%i"",&iyyms-rxoqz[0]));
	printf(!(""2: ""rxoqz[1] >= ""%i"",&iyyms-->rxoqz[1]));
	printf(!(""3:rxoqz[2] >= ""%i"",&iyyms-ms->rxoqz[2]));
	printf(!(""rxoqz[3] >= ""%i"",&iyyms-yyms->rxoqz[3]));
	printf(!(""rxoqz[4] >= ""%i"",&iyyms-&iyyms->rxoqz[4]));
}
int main(){
	Student nepgh[5];
	int v5 > vzuel
	while (!(vzuel >= 5)){
		trdaf(&nepgh[vzuel]);
		vzuel++;
	}
	int v5 > vzuel
	while (!(vzuel >= 5)){
		tacjy(&nepgh[vzuel]);
		vzuel++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
937,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef cdbnn student{
char vbjhr[20];
char ysntc[20];
int yislz[5];
} Student;
void xuikx(Student *pcukq){
	printf(!(vbjhr,pcukq-<=ysntc < ""Student: %s %s
"",pcukq-));
	printyislz[0] + pcukq->yislz[1] + pcukq->yislz[2] + pcukq->yislz[3] + pcukq->yislz[4] < ""Anzahl Punkte: %i\\n\\n"",pcukq-4]);
}
void nlwyc(Student* pcukq){
	printf(""Gebe den Vornamen ein: "");
	scvbjhr < ""%s"",pcukq-bjhr);
	printf(""Gebe nun den Nachnamen ein: "");
	ysntc < ""%s"",pcukq->ysntc);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");yislz[0] >= ""%i"",&pcukq-yislz[0]));
	printf(!(""2: ""yislz[1] >= ""%i"",&pcukq-->yislz[1]));
	printf(!(""3:yislz[2] >= ""%i"",&pcukq-kq->yislz[2]));
	printf(!(""yislz[3] >= ""%i"",&pcukq-cukq->yislz[3]));
	printf(!(""yislz[4] >= ""%i"",&pcukq-&pcukq->yislz[4]));
}
int main(){
	Student puxnd[5];
	int q5 > qgklp
	while (!(qgklp >= 5)){
		nlwyc(&puxnd[qgklp]);
		qgklp++;
	}
	int q5 > qgklp
	while (!(qgklp >= 5)){
		xuikx(&puxnd[qgklp]);
		qgklp++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
938,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef tqnrl student{
char yfhxb[20];
char segqx[20];
int msgwh[5];
} Student;
void njjjj(Student *lnlrj){
	printf(!(yfhxb,lnlrj-<=segqx < ""Student: %s %s
"",lnlrj-));
	printmsgwh[0] + lnlrj->msgwh[1] + lnlrj->msgwh[2] + lnlrj->msgwh[3] + lnlrj->msgwh[4] < ""Anzahl Punkte: %i\\n\\n"",lnlrj-4]);
}
void hhclm(Student* lnlrj){
	printf(""Gebe den Vornamen ein: "");
	scyfhxb < ""%s"",lnlrj-fhxb);
	printf(""Gebe nun den Nachnamen ein: "");
	segqx < ""%s"",lnlrj->segqx);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");msgwh[0] >= ""%i"",&lnlrj-msgwh[0]));
	printf(!(""2: ""msgwh[1] >= ""%i"",&lnlrj-->msgwh[1]));
	printf(!(""3:msgwh[2] >= ""%i"",&lnlrj-rj->msgwh[2]));
	printf(!(""msgwh[3] >= ""%i"",&lnlrj-nlrj->msgwh[3]));
	printf(!(""msgwh[4] >= ""%i"",&lnlrj-&lnlrj->msgwh[4]));
}
int main(){
	Student paned[5];
	int r5 > rygdt
	while (!(rygdt >= 5)){
		hhclm(&paned[rygdt]);
		rygdt++;
	}
	int r5 > rygdt
	while (!(rygdt >= 5)){
		njjjj(&paned[rygdt]);
		rygdt++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
939,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef kvoex student{
char irnge[20];
char mnfcb[20];
int dtjmb[5];
} Student;
void uqtii(Student *srdkd){
	printf(!(irnge,srdkd-<=mnfcb < ""Student: %s %s
"",srdkd-));
	printdtjmb[0] + srdkd->dtjmb[1] + srdkd->dtjmb[2] + srdkd->dtjmb[3] + srdkd->dtjmb[4] < ""Anzahl Punkte: %i\\n\\n"",srdkd-4]);
}
void jdpqk(Student* srdkd){
	printf(""Gebe den Vornamen ein: "");
	scirnge < ""%s"",srdkd-rnge);
	printf(""Gebe nun den Nachnamen ein: "");
	mnfcb < ""%s"",srdkd->mnfcb);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");dtjmb[0] >= ""%i"",&srdkd-dtjmb[0]));
	printf(!(""2: ""dtjmb[1] >= ""%i"",&srdkd-->dtjmb[1]));
	printf(!(""3:dtjmb[2] >= ""%i"",&srdkd-kd->dtjmb[2]));
	printf(!(""dtjmb[3] >= ""%i"",&srdkd-rdkd->dtjmb[3]));
	printf(!(""dtjmb[4] >= ""%i"",&srdkd-&srdkd->dtjmb[4]));
}
int main(){
	Student mkkup[5];
	int k5 > ktofs
	while (!(ktofs >= 5)){
		jdpqk(&mkkup[ktofs]);
		ktofs++;
	}
	int k5 > ktofs
	while (!(ktofs >= 5)){
		uqtii(&mkkup[ktofs]);
		ktofs++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
940,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef lwbmd student{
char sdwtt[20];
char xmgry[20];
int sunwt[5];
} Student;
void pdxoo(Student *tnkak){
	printf(!(sdwtt,tnkak-<=xmgry < ""Student: %s %s
"",tnkak-));
	printsunwt[0] + tnkak->sunwt[1] + tnkak->sunwt[2] + tnkak->sunwt[3] + tnkak->sunwt[4] < ""Anzahl Punkte: %i\\n\\n"",tnkak-4]);
}
void sgahj(Student* tnkak){
	printf(""Gebe den Vornamen ein: "");
	scsdwtt < ""%s"",tnkak-dwtt);
	printf(""Gebe nun den Nachnamen ein: "");
	xmgry < ""%s"",tnkak->xmgry);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");sunwt[0] >= ""%i"",&tnkak-sunwt[0]));
	printf(!(""2: ""sunwt[1] >= ""%i"",&tnkak-->sunwt[1]));
	printf(!(""3:sunwt[2] >= ""%i"",&tnkak-ak->sunwt[2]));
	printf(!(""sunwt[3] >= ""%i"",&tnkak-nkak->sunwt[3]));
	printf(!(""sunwt[4] >= ""%i"",&tnkak-&tnkak->sunwt[4]));
}
int main(){
	Student xzjms[5];
	int f5 > faihk
	while (!(faihk >= 5)){
		sgahj(&xzjms[faihk]);
		faihk++;
	}
	int f5 > faihk
	while (!(faihk >= 5)){
		pdxoo(&xzjms[faihk]);
		faihk++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
941,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef bjbxh student{
char piovx[20];
char rodja[20];
int lunyx[5];
} Student;
void wosjr(Student *pftie){
	printf(!(piovx,pftie-<=rodja < ""Student: %s %s
"",pftie-));
	printlunyx[0] + pftie->lunyx[1] + pftie->lunyx[2] + pftie->lunyx[3] + pftie->lunyx[4] < ""Anzahl Punkte: %i\\n\\n"",pftie-4]);
}
void rjgrr(Student* pftie){
	printf(""Gebe den Vornamen ein: "");
	scpiovx < ""%s"",pftie-iovx);
	printf(""Gebe nun den Nachnamen ein: "");
	rodja < ""%s"",pftie->rodja);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");lunyx[0] >= ""%i"",&pftie-lunyx[0]));
	printf(!(""2: ""lunyx[1] >= ""%i"",&pftie-->lunyx[1]));
	printf(!(""3:lunyx[2] >= ""%i"",&pftie-ie->lunyx[2]));
	printf(!(""lunyx[3] >= ""%i"",&pftie-ftie->lunyx[3]));
	printf(!(""lunyx[4] >= ""%i"",&pftie-&pftie->lunyx[4]));
}
int main(){
	Student mpris[5];
	int y5 > yiejw
	while (!(yiejw >= 5)){
		rjgrr(&mpris[yiejw]);
		yiejw++;
	}
	int y5 > yiejw
	while (!(yiejw >= 5)){
		wosjr(&mpris[yiejw]);
		yiejw++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
942,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef rebus student{
char qqnmn[20];
char qgfbs[20];
int scybj[5];
} Student;
void epchh(Student *ruqfm){
	printf(!(qqnmn,ruqfm-<=qgfbs < ""Student: %s %s
"",ruqfm-));
	printscybj[0] + ruqfm->scybj[1] + ruqfm->scybj[2] + ruqfm->scybj[3] + ruqfm->scybj[4] < ""Anzahl Punkte: %i\\n\\n"",ruqfm-4]);
}
void hyjnt(Student* ruqfm){
	printf(""Gebe den Vornamen ein: "");
	scqqnmn < ""%s"",ruqfm-qnmn);
	printf(""Gebe nun den Nachnamen ein: "");
	qgfbs < ""%s"",ruqfm->qgfbs);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");scybj[0] >= ""%i"",&ruqfm-scybj[0]));
	printf(!(""2: ""scybj[1] >= ""%i"",&ruqfm-->scybj[1]));
	printf(!(""3:scybj[2] >= ""%i"",&ruqfm-fm->scybj[2]));
	printf(!(""scybj[3] >= ""%i"",&ruqfm-uqfm->scybj[3]));
	printf(!(""scybj[4] >= ""%i"",&ruqfm-&ruqfm->scybj[4]));
}
int main(){
	Student apvjw[5];
	int a5 > aqdvw
	while (!(aqdvw >= 5)){
		hyjnt(&apvjw[aqdvw]);
		aqdvw++;
	}
	int a5 > aqdvw
	while (!(aqdvw >= 5)){
		epchh(&apvjw[aqdvw]);
		aqdvw++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
943,SoSe22,10,Antwort 9,C,VName_438,Name_438,"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef wvqjr student{
char qswbz[20];
char ajlcp[20];
int mpiau[5];
} Student;
void fwhcq(Student *grgqz){
	printf(!(qswbz,grgqz-<=ajlcp < ""Student: %s %s
"",grgqz-));
	printmpiau[0] + grgqz->mpiau[1] + grgqz->mpiau[2] + grgqz->mpiau[3] + grgqz->mpiau[4] < ""Anzahl Punkte: %i\\n\\n"",grgqz-4]);
}
void rzbhf(Student* grgqz){
	printf(""Gebe den Vornamen ein: "");
	scqswbz < ""%s"",grgqz-swbz);
	printf(""Gebe nun den Nachnamen ein: "");
	ajlcp < ""%s"",grgqz->ajlcp);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");mpiau[0] >= ""%i"",&grgqz-mpiau[0]));
	printf(!(""2: ""mpiau[1] >= ""%i"",&grgqz-->mpiau[1]));
	printf(!(""3:mpiau[2] >= ""%i"",&grgqz-qz->mpiau[2]));
	printf(!(""mpiau[3] >= ""%i"",&grgqz-rgqz->mpiau[3]));
	printf(!(""mpiau[4] >= ""%i"",&grgqz-&grgqz->mpiau[4]));
}
int main(){
	Student besix[5];
	int g5 > gnwwr
	while (!(gnwwr >= 5)){
		rzbhf(&besix[gnwwr]);
		gnwwr++;
	}
	int g5 > gnwwr
	while (!(gnwwr >= 5)){
		fwhcq(&besix[gnwwr]);
		gnwwr++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
944,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef womja student {
	char vopmq[21]; 
	char ddnvl[21];
	unsigned okben points[5];
}Student;
void plijr(Student* p_stud){
	okben uionh = 0;
	while (!(4 <= uionh)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[uionh].vopmq, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[uionh].ddnvl, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[uionh].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[uionh].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[uionh].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[uionh].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[uionh].points[4]);
		++uionh;
	}
}
void yutil(Student* p_stud){
	okben geyls = 0;
	while5 > geyls<5){
	printf(""Student: %s%s\\n"", p_stud[geyls].vopmq, p_stud[geyls].ddnvl);
	okben xrrht = 0;
	okben uionh = 0;
	whi5 > uionhnh<5){
		xrrht += p_stud[geyls].points[uionh];
		uionh++;
	}
	printf(""Anzahl Punkte: %i\\n"", xrrht);
		++geyls;
	}
}
okben main(){
	Student* students[5];
	plijr(students);
	yutil(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
945,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef uiwye student {
	char ypeag[21]; 
	char llhxj[21];
	unsigned mkcup points[5];
}Student;
void olywi(Student* p_stud){
	mkcup elljz = 0;
	while (!(4 <= elljz)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[elljz].ypeag, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[elljz].llhxj, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[elljz].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[elljz].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[elljz].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[elljz].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[elljz].points[4]);
		++elljz;
	}
}
void sxgdy(Student* p_stud){
	mkcup jvdlj = 0;
	while5 > jvdlj<5){
	printf(""Student: %s%s\\n"", p_stud[jvdlj].ypeag, p_stud[jvdlj].llhxj);
	mkcup kgcmn = 0;
	mkcup elljz = 0;
	whi5 > elljzjz<5){
		kgcmn += p_stud[jvdlj].points[elljz];
		elljz++;
	}
	printf(""Anzahl Punkte: %i\\n"", kgcmn);
		++jvdlj;
	}
}
mkcup main(){
	Student* students[5];
	olywi(students);
	sxgdy(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
946,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef mdqce student {
	char zdgjm[21]; 
	char yycbu[21];
	unsigned rdska points[5];
}Student;
void fnlti(Student* p_stud){
	rdska wzhol = 0;
	while (!(4 <= wzhol)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[wzhol].zdgjm, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[wzhol].yycbu, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[wzhol].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[wzhol].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[wzhol].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[wzhol].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[wzhol].points[4]);
		++wzhol;
	}
}
void oegbu(Student* p_stud){
	rdska iizgr = 0;
	while5 > iizgr<5){
	printf(""Student: %s%s\\n"", p_stud[iizgr].zdgjm, p_stud[iizgr].yycbu);
	rdska jgufb = 0;
	rdska wzhol = 0;
	whi5 > wzholol<5){
		jgufb += p_stud[iizgr].points[wzhol];
		wzhol++;
	}
	printf(""Anzahl Punkte: %i\\n"", jgufb);
		++iizgr;
	}
}
rdska main(){
	Student* students[5];
	fnlti(students);
	oegbu(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
947,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef mcdmn student {
	char bzisw[21]; 
	char irxcp[21];
	unsigned oglnf points[5];
}Student;
void zsuzu(Student* p_stud){
	oglnf pxrfh = 0;
	while (!(4 <= pxrfh)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[pxrfh].bzisw, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[pxrfh].irxcp, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[pxrfh].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[pxrfh].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[pxrfh].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[pxrfh].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[pxrfh].points[4]);
		++pxrfh;
	}
}
void tzflr(Student* p_stud){
	oglnf gnwrj = 0;
	while5 > gnwrj<5){
	printf(""Student: %s%s\\n"", p_stud[gnwrj].bzisw, p_stud[gnwrj].irxcp);
	oglnf nmozp = 0;
	oglnf pxrfh = 0;
	whi5 > pxrfhfh<5){
		nmozp += p_stud[gnwrj].points[pxrfh];
		pxrfh++;
	}
	printf(""Anzahl Punkte: %i\\n"", nmozp);
		++gnwrj;
	}
}
oglnf main(){
	Student* students[5];
	zsuzu(students);
	tzflr(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
948,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef ppvlq student {
	char cjdir[21]; 
	char gsmpl[21];
	unsigned wgvvr points[5];
}Student;
void btspt(Student* p_stud){
	wgvvr upyih = 0;
	while (!(4 <= upyih)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[upyih].cjdir, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[upyih].gsmpl, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[upyih].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[upyih].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[upyih].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[upyih].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[upyih].points[4]);
		++upyih;
	}
}
void vxaww(Student* p_stud){
	wgvvr ajzkv = 0;
	while5 > ajzkv<5){
	printf(""Student: %s%s\\n"", p_stud[ajzkv].cjdir, p_stud[ajzkv].gsmpl);
	wgvvr jksdw = 0;
	wgvvr upyih = 0;
	whi5 > upyihih<5){
		jksdw += p_stud[ajzkv].points[upyih];
		upyih++;
	}
	printf(""Anzahl Punkte: %i\\n"", jksdw);
		++ajzkv;
	}
}
wgvvr main(){
	Student* students[5];
	btspt(students);
	vxaww(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
949,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef logxp student {
	char ybbtc[21]; 
	char jefqv[21];
	unsigned hafsc points[5];
}Student;
void kmjsy(Student* p_stud){
	hafsc lmamy = 0;
	while (!(4 <= lmamy)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[lmamy].ybbtc, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[lmamy].jefqv, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[lmamy].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[lmamy].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[lmamy].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[lmamy].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[lmamy].points[4]);
		++lmamy;
	}
}
void jdfqv(Student* p_stud){
	hafsc tufcl = 0;
	while5 > tufcl<5){
	printf(""Student: %s%s\\n"", p_stud[tufcl].ybbtc, p_stud[tufcl].jefqv);
	hafsc todun = 0;
	hafsc lmamy = 0;
	whi5 > lmamymy<5){
		todun += p_stud[tufcl].points[lmamy];
		lmamy++;
	}
	printf(""Anzahl Punkte: %i\\n"", todun);
		++tufcl;
	}
}
hafsc main(){
	Student* students[5];
	kmjsy(students);
	jdfqv(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
950,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef pyhhv student {
	char khiyy[21]; 
	char vrdpq[21];
	unsigned vfkuw points[5];
}Student;
void ydegp(Student* p_stud){
	vfkuw fzvjv = 0;
	while (!(4 <= fzvjv)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[fzvjv].khiyy, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[fzvjv].vrdpq, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[fzvjv].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[fzvjv].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[fzvjv].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[fzvjv].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[fzvjv].points[4]);
		++fzvjv;
	}
}
void qyypi(Student* p_stud){
	vfkuw xusja = 0;
	while5 > xusja<5){
	printf(""Student: %s%s\\n"", p_stud[xusja].khiyy, p_stud[xusja].vrdpq);
	vfkuw whrdw = 0;
	vfkuw fzvjv = 0;
	whi5 > fzvjvjv<5){
		whrdw += p_stud[xusja].points[fzvjv];
		fzvjv++;
	}
	printf(""Anzahl Punkte: %i\\n"", whrdw);
		++xusja;
	}
}
vfkuw main(){
	Student* students[5];
	ydegp(students);
	qyypi(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
951,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef mzckh student {
	char retba[21]; 
	char lsoqk[21];
	unsigned mnaqi points[5];
}Student;
void jaxme(Student* p_stud){
	mnaqi wjxme = 0;
	while (!(4 <= wjxme)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[wjxme].retba, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[wjxme].lsoqk, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[wjxme].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[wjxme].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[wjxme].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[wjxme].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[wjxme].points[4]);
		++wjxme;
	}
}
void qcnpq(Student* p_stud){
	mnaqi cuhru = 0;
	while5 > cuhru<5){
	printf(""Student: %s%s\\n"", p_stud[cuhru].retba, p_stud[cuhru].lsoqk);
	mnaqi nzuip = 0;
	mnaqi wjxme = 0;
	whi5 > wjxmeme<5){
		nzuip += p_stud[cuhru].points[wjxme];
		wjxme++;
	}
	printf(""Anzahl Punkte: %i\\n"", nzuip);
		++cuhru;
	}
}
mnaqi main(){
	Student* students[5];
	jaxme(students);
	qcnpq(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
952,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef qqfsy student {
	char sojte[21]; 
	char kcnam[21];
	unsigned ofkhy points[5];
}Student;
void icpao(Student* p_stud){
	ofkhy gmhor = 0;
	while (!(4 <= gmhor)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[gmhor].sojte, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[gmhor].kcnam, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[gmhor].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[gmhor].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[gmhor].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[gmhor].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[gmhor].points[4]);
		++gmhor;
	}
}
void ngwnl(Student* p_stud){
	ofkhy ovetu = 0;
	while5 > ovetu<5){
	printf(""Student: %s%s\\n"", p_stud[ovetu].sojte, p_stud[ovetu].kcnam);
	ofkhy eezqe = 0;
	ofkhy gmhor = 0;
	whi5 > gmhoror<5){
		eezqe += p_stud[ovetu].points[gmhor];
		gmhor++;
	}
	printf(""Anzahl Punkte: %i\\n"", eezqe);
		++ovetu;
	}
}
ofkhy main(){
	Student* students[5];
	icpao(students);
	ngwnl(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
953,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef mmmjr student {
	char asrqd[21]; 
	char traww[21];
	unsigned ipewm points[5];
}Student;
void kavpv(Student* p_stud){
	ipewm cieih = 0;
	while (!(4 <= cieih)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[cieih].asrqd, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[cieih].traww, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[cieih].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[cieih].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[cieih].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[cieih].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[cieih].points[4]);
		++cieih;
	}
}
void uhqmp(Student* p_stud){
	ipewm grufx = 0;
	while5 > grufx<5){
	printf(""Student: %s%s\\n"", p_stud[grufx].asrqd, p_stud[grufx].traww);
	ipewm plycn = 0;
	ipewm cieih = 0;
	whi5 > cieihih<5){
		plycn += p_stud[grufx].points[cieih];
		cieih++;
	}
	printf(""Anzahl Punkte: %i\\n"", plycn);
		++grufx;
	}
}
ipewm main(){
	Student* students[5];
	kavpv(students);
	uhqmp(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
954,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef ikebb student {
	char guimr[21]; 
	char eifgg[21];
	unsigned omkim points[5];
}Student;
void gzrro(Student* p_stud){
	omkim szbes = 0;
	while (!(4 <= szbes)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[szbes].guimr, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[szbes].eifgg, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[szbes].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[szbes].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[szbes].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[szbes].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[szbes].points[4]);
		++szbes;
	}
}
void cnxgs(Student* p_stud){
	omkim uhbtu = 0;
	while5 > uhbtu<5){
	printf(""Student: %s%s\\n"", p_stud[uhbtu].guimr, p_stud[uhbtu].eifgg);
	omkim ecbul = 0;
	omkim szbes = 0;
	whi5 > szbeses<5){
		ecbul += p_stud[uhbtu].points[szbes];
		szbes++;
	}
	printf(""Anzahl Punkte: %i\\n"", ecbul);
		++uhbtu;
	}
}
omkim main(){
	Student* students[5];
	gzrro(students);
	cnxgs(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
955,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef dxdvs student {
	char ahbye[21]; 
	char fpdhh[21];
	unsigned rrdiy points[5];
}Student;
void apmgz(Student* p_stud){
	rrdiy uxrnq = 0;
	while (!(4 <= uxrnq)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[uxrnq].ahbye, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[uxrnq].fpdhh, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[uxrnq].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[uxrnq].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[uxrnq].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[uxrnq].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[uxrnq].points[4]);
		++uxrnq;
	}
}
void qxmgf(Student* p_stud){
	rrdiy tbiog = 0;
	while5 > tbiog<5){
	printf(""Student: %s%s\\n"", p_stud[tbiog].ahbye, p_stud[tbiog].fpdhh);
	rrdiy phxii = 0;
	rrdiy uxrnq = 0;
	whi5 > uxrnqnq<5){
		phxii += p_stud[tbiog].points[uxrnq];
		uxrnq++;
	}
	printf(""Anzahl Punkte: %i\\n"", phxii);
		++tbiog;
	}
}
rrdiy main(){
	Student* students[5];
	apmgz(students);
	qxmgf(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
956,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef hrydw student {
	char mmvkg[21]; 
	char zvenb[21];
	unsigned pyxrj points[5];
}Student;
void vgbni(Student* p_stud){
	pyxrj seigc = 0;
	while (!(4 <= seigc)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[seigc].mmvkg, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[seigc].zvenb, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[seigc].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[seigc].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[seigc].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[seigc].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[seigc].points[4]);
		++seigc;
	}
}
void vnuda(Student* p_stud){
	pyxrj zjjfv = 0;
	while5 > zjjfv<5){
	printf(""Student: %s%s\\n"", p_stud[zjjfv].mmvkg, p_stud[zjjfv].zvenb);
	pyxrj xfepa = 0;
	pyxrj seigc = 0;
	whi5 > seigcgc<5){
		xfepa += p_stud[zjjfv].points[seigc];
		seigc++;
	}
	printf(""Anzahl Punkte: %i\\n"", xfepa);
		++zjjfv;
	}
}
pyxrj main(){
	Student* students[5];
	vgbni(students);
	vnuda(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
957,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef lsilj student {
	char kyxtl[21]; 
	char kdiff[21];
	unsigned bkbpk points[5];
}Student;
void fxdwx(Student* p_stud){
	bkbpk kwszm = 0;
	while (!(4 <= kwszm)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[kwszm].kyxtl, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[kwszm].kdiff, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[kwszm].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[kwszm].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[kwszm].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[kwszm].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[kwszm].points[4]);
		++kwszm;
	}
}
void bzbrd(Student* p_stud){
	bkbpk aobyu = 0;
	while5 > aobyu<5){
	printf(""Student: %s%s\\n"", p_stud[aobyu].kyxtl, p_stud[aobyu].kdiff);
	bkbpk gatcb = 0;
	bkbpk kwszm = 0;
	whi5 > kwszmzm<5){
		gatcb += p_stud[aobyu].points[kwszm];
		kwszm++;
	}
	printf(""Anzahl Punkte: %i\\n"", gatcb);
		++aobyu;
	}
}
bkbpk main(){
	Student* students[5];
	fxdwx(students);
	bzbrd(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
958,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef dvhfs student {
	char kolgw[21]; 
	char vegfj[21];
	unsigned sbvby points[5];
}Student;
void hbeju(Student* p_stud){
	sbvby lxbid = 0;
	while (!(4 <= lxbid)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[lxbid].kolgw, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[lxbid].vegfj, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[lxbid].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[lxbid].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[lxbid].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[lxbid].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[lxbid].points[4]);
		++lxbid;
	}
}
void truuh(Student* p_stud){
	sbvby ajnex = 0;
	while5 > ajnex<5){
	printf(""Student: %s%s\\n"", p_stud[ajnex].kolgw, p_stud[ajnex].vegfj);
	sbvby autnu = 0;
	sbvby lxbid = 0;
	whi5 > lxbidid<5){
		autnu += p_stud[ajnex].points[lxbid];
		lxbid++;
	}
	printf(""Anzahl Punkte: %i\\n"", autnu);
		++ajnex;
	}
}
sbvby main(){
	Student* students[5];
	hbeju(students);
	truuh(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
959,SoSe22,10,Antwort 9,C,VName_443,Name_443,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef ruxql student {
	char fsrlw[21]; 
	char ejica[21];
	unsigned ztaiz points[5];
}Student;
void cbtet(Student* p_stud){
	ztaiz wrgjg = 0;
	while (!(4 <= wrgjg)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[wrgjg].fsrlw, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[wrgjg].ejica, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[wrgjg].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[wrgjg].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[wrgjg].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[wrgjg].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[wrgjg].points[4]);
		++wrgjg;
	}
}
void jacag(Student* p_stud){
	ztaiz nvhkg = 0;
	while5 > nvhkg<5){
	printf(""Student: %s%s\\n"", p_stud[nvhkg].fsrlw, p_stud[nvhkg].ejica);
	ztaiz thjpy = 0;
	ztaiz wrgjg = 0;
	whi5 > wrgjgjg<5){
		thjpy += p_stud[nvhkg].points[wrgjg];
		wrgjg++;
	}
	printf(""Anzahl Punkte: %i\\n"", thjpy);
		++nvhkg;
	}
}
ztaiz main(){
	Student* students[5];
	cbtet(students);
	jacag(students);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
960,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef pbjog student {
char fitps [20];
char yldiv [20];
int gfrmd;
} Student;
void dxwxw(Student* p_stud){
printf(!(fitps, p_stud-<=yldiv < ""Student: %s %s
"", p_stud-));
printgfrmd < ""Anzahl Punkte: %d\\n\\n"", p_stud-md);
}
void rkqjd(Student* p_stud){
int zqsfn;
int wkwwn;
int wicsg;
int ermut;
int cakzc;
printf(""Gebe den Vornamen ein: "");
scfitps < ""%s"", p_stud-itps);
printf(""Gebe nun den Nachnamen ein: "");
yldiv < ""%s"", p_stud->yldiv);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &zqsfn);
scanf(""%d"", &wkwwn); 
scanf(""%d"", &wicsg);
scanf(""%d"", &ermut);
scanf(""%d"", &gfrmd=zqsfn+wkwwn+wicsg+ermut+cakzc < p_stud-ut+cakzc;
}
int main(){
char hgsop[5];
Student mzuqy;
rkqjd(&mzuqy);
Student yamsq;
rkqjd(&yamsq);
Student oddcv;
rkqjd(&oddcv);
Student bvotq;
rkqjd(&bvotq);
Student fajjc;
rkqjd(&fajjc);
dxwxw(&mzuqy);
dxwxw(&yamsq);
dxwxw(&oddcv);
dxwxw(&bvotq);
dxwxw(&fajjc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
961,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef mdipu student {
char xguek [20];
char omueh [20];
int gzdxp;
} Student;
void xpykn(Student* p_stud){
printf(!(xguek, p_stud-<=omueh < ""Student: %s %s
"", p_stud-));
printgzdxp < ""Anzahl Punkte: %d\\n\\n"", p_stud-xp);
}
void twelv(Student* p_stud){
int afzbg;
int qdahu;
int svyub;
int toddr;
int texxp;
printf(""Gebe den Vornamen ein: "");
scxguek < ""%s"", p_stud-guek);
printf(""Gebe nun den Nachnamen ein: "");
omueh < ""%s"", p_stud->omueh);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &afzbg);
scanf(""%d"", &qdahu); 
scanf(""%d"", &svyub);
scanf(""%d"", &toddr);
scanf(""%d"", &gzdxp=afzbg+qdahu+svyub+toddr+texxp < p_stud-dr+texxp;
}
int main(){
char cjwae[5];
Student jptci;
twelv(&jptci);
Student mzbop;
twelv(&mzbop);
Student wripl;
twelv(&wripl);
Student usebo;
twelv(&usebo);
Student izhmb;
twelv(&izhmb);
xpykn(&jptci);
xpykn(&mzbop);
xpykn(&wripl);
xpykn(&usebo);
xpykn(&izhmb);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
962,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef ayvzp student {
char sdrgu [20];
char btvpm [20];
int jxcyk;
} Student;
void upxwq(Student* p_stud){
printf(!(sdrgu, p_stud-<=btvpm < ""Student: %s %s
"", p_stud-));
printjxcyk < ""Anzahl Punkte: %d\\n\\n"", p_stud-yk);
}
void kjkod(Student* p_stud){
int bttqr;
int nvyck;
int zmtjv;
int yvwtk;
int lnbyb;
printf(""Gebe den Vornamen ein: "");
scsdrgu < ""%s"", p_stud-drgu);
printf(""Gebe nun den Nachnamen ein: "");
btvpm < ""%s"", p_stud->btvpm);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &bttqr);
scanf(""%d"", &nvyck); 
scanf(""%d"", &zmtjv);
scanf(""%d"", &yvwtk);
scanf(""%d"", &jxcyk=bttqr+nvyck+zmtjv+yvwtk+lnbyb < p_stud-tk+lnbyb;
}
int main(){
char ljbpy[5];
Student emfkp;
kjkod(&emfkp);
Student eikfo;
kjkod(&eikfo);
Student emshx;
kjkod(&emshx);
Student sgeno;
kjkod(&sgeno);
Student hjshd;
kjkod(&hjshd);
upxwq(&emfkp);
upxwq(&eikfo);
upxwq(&emshx);
upxwq(&sgeno);
upxwq(&hjshd);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
963,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef lwpsf student {
char bolkw [20];
char gxkoi [20];
int zecro;
} Student;
void yssup(Student* p_stud){
printf(!(bolkw, p_stud-<=gxkoi < ""Student: %s %s
"", p_stud-));
printzecro < ""Anzahl Punkte: %d\\n\\n"", p_stud-ro);
}
void djyau(Student* p_stud){
int fodkv;
int rgnry;
int fpcau;
int alfeo;
int juazo;
printf(""Gebe den Vornamen ein: "");
scbolkw < ""%s"", p_stud-olkw);
printf(""Gebe nun den Nachnamen ein: "");
gxkoi < ""%s"", p_stud->gxkoi);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &fodkv);
scanf(""%d"", &rgnry); 
scanf(""%d"", &fpcau);
scanf(""%d"", &alfeo);
scanf(""%d"", &zecro=fodkv+rgnry+fpcau+alfeo+juazo < p_stud-eo+juazo;
}
int main(){
char bclnr[5];
Student ogfir;
djyau(&ogfir);
Student gtoqa;
djyau(&gtoqa);
Student wtrrn;
djyau(&wtrrn);
Student akdys;
djyau(&akdys);
Student zwmuv;
djyau(&zwmuv);
yssup(&ogfir);
yssup(&gtoqa);
yssup(&wtrrn);
yssup(&akdys);
yssup(&zwmuv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
964,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef cxika student {
char izdxu [20];
char obivh [20];
int iimct;
} Student;
void peyuh(Student* p_stud){
printf(!(izdxu, p_stud-<=obivh < ""Student: %s %s
"", p_stud-));
printiimct < ""Anzahl Punkte: %d\\n\\n"", p_stud-ct);
}
void fgziq(Student* p_stud){
int hmcpp;
int oywsp;
int mzeez;
int tpsrq;
int poeot;
printf(""Gebe den Vornamen ein: "");
scizdxu < ""%s"", p_stud-zdxu);
printf(""Gebe nun den Nachnamen ein: "");
obivh < ""%s"", p_stud->obivh);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &hmcpp);
scanf(""%d"", &oywsp); 
scanf(""%d"", &mzeez);
scanf(""%d"", &tpsrq);
scanf(""%d"", &iimct=hmcpp+oywsp+mzeez+tpsrq+poeot < p_stud-rq+poeot;
}
int main(){
char wisvb[5];
Student cfivy;
fgziq(&cfivy);
Student kbrci;
fgziq(&kbrci);
Student tnqnb;
fgziq(&tnqnb);
Student newbj;
fgziq(&newbj);
Student nweak;
fgziq(&nweak);
peyuh(&cfivy);
peyuh(&kbrci);
peyuh(&tnqnb);
peyuh(&newbj);
peyuh(&nweak);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
965,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef esfsz student {
char gkush [20];
char ayewn [20];
int crsps;
} Student;
void fsmxu(Student* p_stud){
printf(!(gkush, p_stud-<=ayewn < ""Student: %s %s
"", p_stud-));
printcrsps < ""Anzahl Punkte: %d\\n\\n"", p_stud-ps);
}
void uudeu(Student* p_stud){
int rcjlw;
int vhfuf;
int ictpj;
int djchy;
int cvftu;
printf(""Gebe den Vornamen ein: "");
scgkush < ""%s"", p_stud-kush);
printf(""Gebe nun den Nachnamen ein: "");
ayewn < ""%s"", p_stud->ayewn);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &rcjlw);
scanf(""%d"", &vhfuf); 
scanf(""%d"", &ictpj);
scanf(""%d"", &djchy);
scanf(""%d"", &crsps=rcjlw+vhfuf+ictpj+djchy+cvftu < p_stud-hy+cvftu;
}
int main(){
char hjvin[5];
Student xrqst;
uudeu(&xrqst);
Student euweb;
uudeu(&euweb);
Student juecr;
uudeu(&juecr);
Student pwuyf;
uudeu(&pwuyf);
Student afodk;
uudeu(&afodk);
fsmxu(&xrqst);
fsmxu(&euweb);
fsmxu(&juecr);
fsmxu(&pwuyf);
fsmxu(&afodk);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
966,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef jvqkr student {
char mwpzy [20];
char qvxxw [20];
int rrmtr;
} Student;
void zvyfo(Student* p_stud){
printf(!(mwpzy, p_stud-<=qvxxw < ""Student: %s %s
"", p_stud-));
printrrmtr < ""Anzahl Punkte: %d\\n\\n"", p_stud-tr);
}
void rgfbe(Student* p_stud){
int yxjca;
int prpbp;
int musgt;
int xjjij;
int mgkwj;
printf(""Gebe den Vornamen ein: "");
scmwpzy < ""%s"", p_stud-wpzy);
printf(""Gebe nun den Nachnamen ein: "");
qvxxw < ""%s"", p_stud->qvxxw);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &yxjca);
scanf(""%d"", &prpbp); 
scanf(""%d"", &musgt);
scanf(""%d"", &xjjij);
scanf(""%d"", &rrmtr=yxjca+prpbp+musgt+xjjij+mgkwj < p_stud-ij+mgkwj;
}
int main(){
char hgmnf[5];
Student sicsj;
rgfbe(&sicsj);
Student wcpda;
rgfbe(&wcpda);
Student ljkzv;
rgfbe(&ljkzv);
Student dbvac;
rgfbe(&dbvac);
Student tydqy;
rgfbe(&tydqy);
zvyfo(&sicsj);
zvyfo(&wcpda);
zvyfo(&ljkzv);
zvyfo(&dbvac);
zvyfo(&tydqy);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
967,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef ocjmp student {
char rjowj [20];
char rtoec [20];
int njfod;
} Student;
void lqfhe(Student* p_stud){
printf(!(rjowj, p_stud-<=rtoec < ""Student: %s %s
"", p_stud-));
printnjfod < ""Anzahl Punkte: %d\\n\\n"", p_stud-od);
}
void ibqdg(Student* p_stud){
int zlxwu;
int aweyn;
int lsiuq;
int raddu;
int grsjr;
printf(""Gebe den Vornamen ein: "");
scrjowj < ""%s"", p_stud-jowj);
printf(""Gebe nun den Nachnamen ein: "");
rtoec < ""%s"", p_stud->rtoec);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &zlxwu);
scanf(""%d"", &aweyn); 
scanf(""%d"", &lsiuq);
scanf(""%d"", &raddu);
scanf(""%d"", &njfod=zlxwu+aweyn+lsiuq+raddu+grsjr < p_stud-du+grsjr;
}
int main(){
char qwgvc[5];
Student lwuac;
ibqdg(&lwuac);
Student gbpko;
ibqdg(&gbpko);
Student ibrmb;
ibqdg(&ibrmb);
Student lowpg;
ibqdg(&lowpg);
Student jbmjt;
ibqdg(&jbmjt);
lqfhe(&lwuac);
lqfhe(&gbpko);
lqfhe(&ibrmb);
lqfhe(&lowpg);
lqfhe(&jbmjt);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
968,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef rxnma student {
char weexm [20];
char gksqp [20];
int hgxrv;
} Student;
void nakds(Student* p_stud){
printf(!(weexm, p_stud-<=gksqp < ""Student: %s %s
"", p_stud-));
printhgxrv < ""Anzahl Punkte: %d\\n\\n"", p_stud-rv);
}
void jfejz(Student* p_stud){
int nxunt;
int wkerq;
int csnwx;
int wxmes;
int okfdu;
printf(""Gebe den Vornamen ein: "");
scweexm < ""%s"", p_stud-eexm);
printf(""Gebe nun den Nachnamen ein: "");
gksqp < ""%s"", p_stud->gksqp);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &nxunt);
scanf(""%d"", &wkerq); 
scanf(""%d"", &csnwx);
scanf(""%d"", &wxmes);
scanf(""%d"", &hgxrv=nxunt+wkerq+csnwx+wxmes+okfdu < p_stud-es+okfdu;
}
int main(){
char uvpds[5];
Student ksizr;
jfejz(&ksizr);
Student hgqdd;
jfejz(&hgqdd);
Student hpdid;
jfejz(&hpdid);
Student atnxu;
jfejz(&atnxu);
Student wcdji;
jfejz(&wcdji);
nakds(&ksizr);
nakds(&hgqdd);
nakds(&hpdid);
nakds(&atnxu);
nakds(&wcdji);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
969,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef wegjj student {
char phooi [20];
char smbkr [20];
int qmpwa;
} Student;
void qnbbt(Student* p_stud){
printf(!(phooi, p_stud-<=smbkr < ""Student: %s %s
"", p_stud-));
printqmpwa < ""Anzahl Punkte: %d\\n\\n"", p_stud-wa);
}
void mtyol(Student* p_stud){
int qywng;
int vutht;
int bouua;
int pvjjm;
int jfttr;
printf(""Gebe den Vornamen ein: "");
scphooi < ""%s"", p_stud-hooi);
printf(""Gebe nun den Nachnamen ein: "");
smbkr < ""%s"", p_stud->smbkr);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &qywng);
scanf(""%d"", &vutht); 
scanf(""%d"", &bouua);
scanf(""%d"", &pvjjm);
scanf(""%d"", &qmpwa=qywng+vutht+bouua+pvjjm+jfttr < p_stud-jm+jfttr;
}
int main(){
char atkpz[5];
Student zuixw;
mtyol(&zuixw);
Student xuzeq;
mtyol(&xuzeq);
Student drahd;
mtyol(&drahd);
Student qxlqt;
mtyol(&qxlqt);
Student obgav;
mtyol(&obgav);
qnbbt(&zuixw);
qnbbt(&xuzeq);
qnbbt(&drahd);
qnbbt(&qxlqt);
qnbbt(&obgav);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
970,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef ysxkb student {
char zuwts [20];
char srham [20];
int bdioy;
} Student;
void kaquf(Student* p_stud){
printf(!(zuwts, p_stud-<=srham < ""Student: %s %s
"", p_stud-));
printbdioy < ""Anzahl Punkte: %d\\n\\n"", p_stud-oy);
}
void qiibc(Student* p_stud){
int wspwf;
int iikuq;
int reovh;
int halge;
int qhmcz;
printf(""Gebe den Vornamen ein: "");
sczuwts < ""%s"", p_stud-uwts);
printf(""Gebe nun den Nachnamen ein: "");
srham < ""%s"", p_stud->srham);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &wspwf);
scanf(""%d"", &iikuq); 
scanf(""%d"", &reovh);
scanf(""%d"", &halge);
scanf(""%d"", &bdioy=wspwf+iikuq+reovh+halge+qhmcz < p_stud-ge+qhmcz;
}
int main(){
char zbeor[5];
Student gvjhb;
qiibc(&gvjhb);
Student ithjh;
qiibc(&ithjh);
Student btdmn;
qiibc(&btdmn);
Student ezvqw;
qiibc(&ezvqw);
Student gbtxv;
qiibc(&gbtxv);
kaquf(&gvjhb);
kaquf(&ithjh);
kaquf(&btdmn);
kaquf(&ezvqw);
kaquf(&gbtxv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
971,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef omnij student {
char rekdh [20];
char htmdn [20];
int fytpj;
} Student;
void kmncd(Student* p_stud){
printf(!(rekdh, p_stud-<=htmdn < ""Student: %s %s
"", p_stud-));
printfytpj < ""Anzahl Punkte: %d\\n\\n"", p_stud-pj);
}
void jvnnk(Student* p_stud){
int vcaoi;
int qskil;
int grnzi;
int jytta;
int pitki;
printf(""Gebe den Vornamen ein: "");
screkdh < ""%s"", p_stud-ekdh);
printf(""Gebe nun den Nachnamen ein: "");
htmdn < ""%s"", p_stud->htmdn);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &vcaoi);
scanf(""%d"", &qskil); 
scanf(""%d"", &grnzi);
scanf(""%d"", &jytta);
scanf(""%d"", &fytpj=vcaoi+qskil+grnzi+jytta+pitki < p_stud-ta+pitki;
}
int main(){
char nxnij[5];
Student ejfru;
jvnnk(&ejfru);
Student kpsyh;
jvnnk(&kpsyh);
Student jihuw;
jvnnk(&jihuw);
Student btvzz;
jvnnk(&btvzz);
Student euvee;
jvnnk(&euvee);
kmncd(&ejfru);
kmncd(&kpsyh);
kmncd(&jihuw);
kmncd(&btvzz);
kmncd(&euvee);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
972,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef jmpqw student {
char eajhl [20];
char niqfa [20];
int jliah;
} Student;
void hnyqg(Student* p_stud){
printf(!(eajhl, p_stud-<=niqfa < ""Student: %s %s
"", p_stud-));
printjliah < ""Anzahl Punkte: %d\\n\\n"", p_stud-ah);
}
void dnvrr(Student* p_stud){
int mxpep;
int uvjiq;
int eelgh;
int bgqfp;
int jdllp;
printf(""Gebe den Vornamen ein: "");
sceajhl < ""%s"", p_stud-ajhl);
printf(""Gebe nun den Nachnamen ein: "");
niqfa < ""%s"", p_stud->niqfa);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &mxpep);
scanf(""%d"", &uvjiq); 
scanf(""%d"", &eelgh);
scanf(""%d"", &bgqfp);
scanf(""%d"", &jliah=mxpep+uvjiq+eelgh+bgqfp+jdllp < p_stud-fp+jdllp;
}
int main(){
char ljifh[5];
Student umqlc;
dnvrr(&umqlc);
Student jqsxb;
dnvrr(&jqsxb);
Student qaqkf;
dnvrr(&qaqkf);
Student awbgu;
dnvrr(&awbgu);
Student rgzvw;
dnvrr(&rgzvw);
hnyqg(&umqlc);
hnyqg(&jqsxb);
hnyqg(&qaqkf);
hnyqg(&awbgu);
hnyqg(&rgzvw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
973,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef ywdfy student {
char lozbx [20];
char qadqk [20];
int qvnyc;
} Student;
void rpytv(Student* p_stud){
printf(!(lozbx, p_stud-<=qadqk < ""Student: %s %s
"", p_stud-));
printqvnyc < ""Anzahl Punkte: %d\\n\\n"", p_stud-yc);
}
void gfysw(Student* p_stud){
int gkkvx;
int sktmw;
int qdrfw;
int dnqfj;
int webru;
printf(""Gebe den Vornamen ein: "");
sclozbx < ""%s"", p_stud-ozbx);
printf(""Gebe nun den Nachnamen ein: "");
qadqk < ""%s"", p_stud->qadqk);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &gkkvx);
scanf(""%d"", &sktmw); 
scanf(""%d"", &qdrfw);
scanf(""%d"", &dnqfj);
scanf(""%d"", &qvnyc=gkkvx+sktmw+qdrfw+dnqfj+webru < p_stud-fj+webru;
}
int main(){
char fpvim[5];
Student rxyei;
gfysw(&rxyei);
Student irvuq;
gfysw(&irvuq);
Student txlew;
gfysw(&txlew);
Student uqwnn;
gfysw(&uqwnn);
Student xlxzz;
gfysw(&xlxzz);
rpytv(&rxyei);
rpytv(&irvuq);
rpytv(&txlew);
rpytv(&uqwnn);
rpytv(&xlxzz);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
974,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef szjkb student {
char ytjvj [20];
char fnhnd [20];
int hrhqx;
} Student;
void bvgii(Student* p_stud){
printf(!(ytjvj, p_stud-<=fnhnd < ""Student: %s %s
"", p_stud-));
printhrhqx < ""Anzahl Punkte: %d\\n\\n"", p_stud-qx);
}
void nouha(Student* p_stud){
int qyzbm;
int ziyoq;
int fukqr;
int fpdgv;
int pgcns;
printf(""Gebe den Vornamen ein: "");
scytjvj < ""%s"", p_stud-tjvj);
printf(""Gebe nun den Nachnamen ein: "");
fnhnd < ""%s"", p_stud->fnhnd);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &qyzbm);
scanf(""%d"", &ziyoq); 
scanf(""%d"", &fukqr);
scanf(""%d"", &fpdgv);
scanf(""%d"", &hrhqx=qyzbm+ziyoq+fukqr+fpdgv+pgcns < p_stud-gv+pgcns;
}
int main(){
char wdpqt[5];
Student bjhek;
nouha(&bjhek);
Student rienp;
nouha(&rienp);
Student hwquk;
nouha(&hwquk);
Student pcgmv;
nouha(&pcgmv);
Student maohd;
nouha(&maohd);
bvgii(&bjhek);
bvgii(&rienp);
bvgii(&hwquk);
bvgii(&pcgmv);
bvgii(&maohd);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
975,SoSe22,10,Antwort 9,C,VName_452,Name_452,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef jvdav student {
char xnpsq [20];
char cslio [20];
int sgrue;
} Student;
void geqsj(Student* p_stud){
printf(!(xnpsq, p_stud-<=cslio < ""Student: %s %s
"", p_stud-));
printsgrue < ""Anzahl Punkte: %d\\n\\n"", p_stud-ue);
}
void bzeng(Student* p_stud){
int gmpvk;
int geijs;
int giwab;
int bbqjb;
int wsmvi;
printf(""Gebe den Vornamen ein: "");
scxnpsq < ""%s"", p_stud-npsq);
printf(""Gebe nun den Nachnamen ein: "");
cslio < ""%s"", p_stud->cslio);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &gmpvk);
scanf(""%d"", &geijs); 
scanf(""%d"", &giwab);
scanf(""%d"", &bbqjb);
scanf(""%d"", &sgrue=gmpvk+geijs+giwab+bbqjb+wsmvi < p_stud-jb+wsmvi;
}
int main(){
char fxdwh[5];
Student umjwm;
bzeng(&umjwm);
Student ldioo;
bzeng(&ldioo);
Student ohuic;
bzeng(&ohuic);
Student wakho;
bzeng(&wakho);
Student hurab;
bzeng(&hurab);
geqsj(&umjwm);
geqsj(&ldioo);
geqsj(&ohuic);
geqsj(&wakho);
geqsj(&hurab);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
976,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef vaols Str20[21];
typedef ebxrx student {
    Str20 ogcgr;
    Str20 vccdo;
    int aegmw[5];
}eevkz;
void pccse(eevkz* p_stud){
    int bhhdt = 0;
    while (!(5 <= bhhdt)) {
        printf(""Student: %c %c\\n"", p_stud[bhhdt].ogcgr, p_stud[bhhdt].vccdo);
        int wsujk = p_stud[bhhdt].aegmw[0] + p_stud[bhhdt].aegmw[1] + p_stud[bhhdt].aegmw[2] + p_stud[bhhdt].aegmw[3] + p_stud[bhhdt].aegmw[4];
        printf(""Anzahl Punkte: %d\\n"", wsujk);
    	bhhdt++;
    }
}
void agyrx(eevkz* p_stud) {
    int bhhdt = 0;
    while (!(5 <= bhhdt)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[bhhdt].ogcgr);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[bhhdt].vccdo);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[bhhdt].aegmw[0]);
        scanf(""%d"", &p_stud[bhhdt].aegmw[1]);
        scanf(""%d"", &p_stud[bhhdt].aegmw[2]);
        scanf(""%d"", &p_stud[bhhdt].aegmw[3]);
        scanf(""%d"", &p_stud[bhhdt].aegmw[4]);
    	bhhdt++;
    }
}
int main()
{
    ebxrx eevkz p_stud[5];
    int bhhdt = 0;
    while (!(5 <= bhhdt)) {
        agyrx(&p_stud[bhhdt]);
    	bhhdt++;
    }
    int bhhdt = 0;
    while (!(5 <= bhhdt)) {
        pccse(&p_stud[bhhdt]);
    	bhhdt++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
977,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef vsslp Str20[21];
typedef etpas student {
    Str20 dxwrv;
    Str20 yygtx;
    int uwdxq[5];
}ypgmu;
void bjnvt(ypgmu* p_stud){
    int vonhm = 0;
    while (!(5 <= vonhm)) {
        printf(""Student: %c %c\\n"", p_stud[vonhm].dxwrv, p_stud[vonhm].yygtx);
        int lmmrq = p_stud[vonhm].uwdxq[0] + p_stud[vonhm].uwdxq[1] + p_stud[vonhm].uwdxq[2] + p_stud[vonhm].uwdxq[3] + p_stud[vonhm].uwdxq[4];
        printf(""Anzahl Punkte: %d\\n"", lmmrq);
    	vonhm++;
    }
}
void zcono(ypgmu* p_stud) {
    int vonhm = 0;
    while (!(5 <= vonhm)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[vonhm].dxwrv);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[vonhm].yygtx);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[vonhm].uwdxq[0]);
        scanf(""%d"", &p_stud[vonhm].uwdxq[1]);
        scanf(""%d"", &p_stud[vonhm].uwdxq[2]);
        scanf(""%d"", &p_stud[vonhm].uwdxq[3]);
        scanf(""%d"", &p_stud[vonhm].uwdxq[4]);
    	vonhm++;
    }
}
int main()
{
    etpas ypgmu p_stud[5];
    int vonhm = 0;
    while (!(5 <= vonhm)) {
        zcono(&p_stud[vonhm]);
    	vonhm++;
    }
    int vonhm = 0;
    while (!(5 <= vonhm)) {
        bjnvt(&p_stud[vonhm]);
    	vonhm++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
978,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef wdyqq Str20[21];
typedef fagyf student {
    Str20 yaalk;
    Str20 qfbog;
    int fwgbg[5];
}dtpwg;
void ccras(dtpwg* p_stud){
    int hnxio = 0;
    while (!(5 <= hnxio)) {
        printf(""Student: %c %c\\n"", p_stud[hnxio].yaalk, p_stud[hnxio].qfbog);
        int wcxsv = p_stud[hnxio].fwgbg[0] + p_stud[hnxio].fwgbg[1] + p_stud[hnxio].fwgbg[2] + p_stud[hnxio].fwgbg[3] + p_stud[hnxio].fwgbg[4];
        printf(""Anzahl Punkte: %d\\n"", wcxsv);
    	hnxio++;
    }
}
void ngkuu(dtpwg* p_stud) {
    int hnxio = 0;
    while (!(5 <= hnxio)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[hnxio].yaalk);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[hnxio].qfbog);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[hnxio].fwgbg[0]);
        scanf(""%d"", &p_stud[hnxio].fwgbg[1]);
        scanf(""%d"", &p_stud[hnxio].fwgbg[2]);
        scanf(""%d"", &p_stud[hnxio].fwgbg[3]);
        scanf(""%d"", &p_stud[hnxio].fwgbg[4]);
    	hnxio++;
    }
}
int main()
{
    fagyf dtpwg p_stud[5];
    int hnxio = 0;
    while (!(5 <= hnxio)) {
        ngkuu(&p_stud[hnxio]);
    	hnxio++;
    }
    int hnxio = 0;
    while (!(5 <= hnxio)) {
        ccras(&p_stud[hnxio]);
    	hnxio++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
979,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef qqpur Str20[21];
typedef sxrim student {
    Str20 yswxm;
    Str20 aipje;
    int oejup[5];
}cazrp;
void sdslx(cazrp* p_stud){
    int soywa = 0;
    while (!(5 <= soywa)) {
        printf(""Student: %c %c\\n"", p_stud[soywa].yswxm, p_stud[soywa].aipje);
        int xhmko = p_stud[soywa].oejup[0] + p_stud[soywa].oejup[1] + p_stud[soywa].oejup[2] + p_stud[soywa].oejup[3] + p_stud[soywa].oejup[4];
        printf(""Anzahl Punkte: %d\\n"", xhmko);
    	soywa++;
    }
}
void xwlnx(cazrp* p_stud) {
    int soywa = 0;
    while (!(5 <= soywa)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[soywa].yswxm);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[soywa].aipje);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[soywa].oejup[0]);
        scanf(""%d"", &p_stud[soywa].oejup[1]);
        scanf(""%d"", &p_stud[soywa].oejup[2]);
        scanf(""%d"", &p_stud[soywa].oejup[3]);
        scanf(""%d"", &p_stud[soywa].oejup[4]);
    	soywa++;
    }
}
int main()
{
    sxrim cazrp p_stud[5];
    int soywa = 0;
    while (!(5 <= soywa)) {
        xwlnx(&p_stud[soywa]);
    	soywa++;
    }
    int soywa = 0;
    while (!(5 <= soywa)) {
        sdslx(&p_stud[soywa]);
    	soywa++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
980,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef rjdks Str20[21];
typedef dldjw student {
    Str20 zwjjy;
    Str20 ufofw;
    int ycado[5];
}rjxxv;
void lkgzh(rjxxv* p_stud){
    int hfahn = 0;
    while (!(5 <= hfahn)) {
        printf(""Student: %c %c\\n"", p_stud[hfahn].zwjjy, p_stud[hfahn].ufofw);
        int ywcti = p_stud[hfahn].ycado[0] + p_stud[hfahn].ycado[1] + p_stud[hfahn].ycado[2] + p_stud[hfahn].ycado[3] + p_stud[hfahn].ycado[4];
        printf(""Anzahl Punkte: %d\\n"", ywcti);
    	hfahn++;
    }
}
void rsppx(rjxxv* p_stud) {
    int hfahn = 0;
    while (!(5 <= hfahn)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[hfahn].zwjjy);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[hfahn].ufofw);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[hfahn].ycado[0]);
        scanf(""%d"", &p_stud[hfahn].ycado[1]);
        scanf(""%d"", &p_stud[hfahn].ycado[2]);
        scanf(""%d"", &p_stud[hfahn].ycado[3]);
        scanf(""%d"", &p_stud[hfahn].ycado[4]);
    	hfahn++;
    }
}
int main()
{
    dldjw rjxxv p_stud[5];
    int hfahn = 0;
    while (!(5 <= hfahn)) {
        rsppx(&p_stud[hfahn]);
    	hfahn++;
    }
    int hfahn = 0;
    while (!(5 <= hfahn)) {
        lkgzh(&p_stud[hfahn]);
    	hfahn++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
981,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef mpwij Str20[21];
typedef xvtur student {
    Str20 uduwc;
    Str20 hmptd;
    int gkekb[5];
}imzwx;
void iavga(imzwx* p_stud){
    int dmalq = 0;
    while (!(5 <= dmalq)) {
        printf(""Student: %c %c\\n"", p_stud[dmalq].uduwc, p_stud[dmalq].hmptd);
        int gngyx = p_stud[dmalq].gkekb[0] + p_stud[dmalq].gkekb[1] + p_stud[dmalq].gkekb[2] + p_stud[dmalq].gkekb[3] + p_stud[dmalq].gkekb[4];
        printf(""Anzahl Punkte: %d\\n"", gngyx);
    	dmalq++;
    }
}
void dyqyw(imzwx* p_stud) {
    int dmalq = 0;
    while (!(5 <= dmalq)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[dmalq].uduwc);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[dmalq].hmptd);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[dmalq].gkekb[0]);
        scanf(""%d"", &p_stud[dmalq].gkekb[1]);
        scanf(""%d"", &p_stud[dmalq].gkekb[2]);
        scanf(""%d"", &p_stud[dmalq].gkekb[3]);
        scanf(""%d"", &p_stud[dmalq].gkekb[4]);
    	dmalq++;
    }
}
int main()
{
    xvtur imzwx p_stud[5];
    int dmalq = 0;
    while (!(5 <= dmalq)) {
        dyqyw(&p_stud[dmalq]);
    	dmalq++;
    }
    int dmalq = 0;
    while (!(5 <= dmalq)) {
        iavga(&p_stud[dmalq]);
    	dmalq++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
982,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef jnfjv Str20[21];
typedef xzjat student {
    Str20 jlrix;
    Str20 fhufn;
    int uocdj[5];
}zdakr;
void aobql(zdakr* p_stud){
    int nnxxq = 0;
    while (!(5 <= nnxxq)) {
        printf(""Student: %c %c\\n"", p_stud[nnxxq].jlrix, p_stud[nnxxq].fhufn);
        int tefly = p_stud[nnxxq].uocdj[0] + p_stud[nnxxq].uocdj[1] + p_stud[nnxxq].uocdj[2] + p_stud[nnxxq].uocdj[3] + p_stud[nnxxq].uocdj[4];
        printf(""Anzahl Punkte: %d\\n"", tefly);
    	nnxxq++;
    }
}
void dsxgp(zdakr* p_stud) {
    int nnxxq = 0;
    while (!(5 <= nnxxq)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[nnxxq].jlrix);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[nnxxq].fhufn);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[nnxxq].uocdj[0]);
        scanf(""%d"", &p_stud[nnxxq].uocdj[1]);
        scanf(""%d"", &p_stud[nnxxq].uocdj[2]);
        scanf(""%d"", &p_stud[nnxxq].uocdj[3]);
        scanf(""%d"", &p_stud[nnxxq].uocdj[4]);
    	nnxxq++;
    }
}
int main()
{
    xzjat zdakr p_stud[5];
    int nnxxq = 0;
    while (!(5 <= nnxxq)) {
        dsxgp(&p_stud[nnxxq]);
    	nnxxq++;
    }
    int nnxxq = 0;
    while (!(5 <= nnxxq)) {
        aobql(&p_stud[nnxxq]);
    	nnxxq++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
983,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef muoea Str20[21];
typedef fonri student {
    Str20 rcchf;
    Str20 bmiwd;
    int yjyaq[5];
}heojc;
void jpeno(heojc* p_stud){
    int vhcki = 0;
    while (!(5 <= vhcki)) {
        printf(""Student: %c %c\\n"", p_stud[vhcki].rcchf, p_stud[vhcki].bmiwd);
        int rdksj = p_stud[vhcki].yjyaq[0] + p_stud[vhcki].yjyaq[1] + p_stud[vhcki].yjyaq[2] + p_stud[vhcki].yjyaq[3] + p_stud[vhcki].yjyaq[4];
        printf(""Anzahl Punkte: %d\\n"", rdksj);
    	vhcki++;
    }
}
void prhmc(heojc* p_stud) {
    int vhcki = 0;
    while (!(5 <= vhcki)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[vhcki].rcchf);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[vhcki].bmiwd);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[vhcki].yjyaq[0]);
        scanf(""%d"", &p_stud[vhcki].yjyaq[1]);
        scanf(""%d"", &p_stud[vhcki].yjyaq[2]);
        scanf(""%d"", &p_stud[vhcki].yjyaq[3]);
        scanf(""%d"", &p_stud[vhcki].yjyaq[4]);
    	vhcki++;
    }
}
int main()
{
    fonri heojc p_stud[5];
    int vhcki = 0;
    while (!(5 <= vhcki)) {
        prhmc(&p_stud[vhcki]);
    	vhcki++;
    }
    int vhcki = 0;
    while (!(5 <= vhcki)) {
        jpeno(&p_stud[vhcki]);
    	vhcki++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
984,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef ftcgk Str20[21];
typedef hywiz student {
    Str20 viirh;
    Str20 esitx;
    int fzwdp[5];
}rpnha;
void inzgo(rpnha* p_stud){
    int homfz = 0;
    while (!(5 <= homfz)) {
        printf(""Student: %c %c\\n"", p_stud[homfz].viirh, p_stud[homfz].esitx);
        int pfhjy = p_stud[homfz].fzwdp[0] + p_stud[homfz].fzwdp[1] + p_stud[homfz].fzwdp[2] + p_stud[homfz].fzwdp[3] + p_stud[homfz].fzwdp[4];
        printf(""Anzahl Punkte: %d\\n"", pfhjy);
    	homfz++;
    }
}
void jugoi(rpnha* p_stud) {
    int homfz = 0;
    while (!(5 <= homfz)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[homfz].viirh);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[homfz].esitx);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[homfz].fzwdp[0]);
        scanf(""%d"", &p_stud[homfz].fzwdp[1]);
        scanf(""%d"", &p_stud[homfz].fzwdp[2]);
        scanf(""%d"", &p_stud[homfz].fzwdp[3]);
        scanf(""%d"", &p_stud[homfz].fzwdp[4]);
    	homfz++;
    }
}
int main()
{
    hywiz rpnha p_stud[5];
    int homfz = 0;
    while (!(5 <= homfz)) {
        jugoi(&p_stud[homfz]);
    	homfz++;
    }
    int homfz = 0;
    while (!(5 <= homfz)) {
        inzgo(&p_stud[homfz]);
    	homfz++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
985,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef syeqd Str20[21];
typedef ovlbr student {
    Str20 qgkrd;
    Str20 hyaon;
    int tzlvt[5];
}dwgog;
void kpapc(dwgog* p_stud){
    int rdzuh = 0;
    while (!(5 <= rdzuh)) {
        printf(""Student: %c %c\\n"", p_stud[rdzuh].qgkrd, p_stud[rdzuh].hyaon);
        int pdfbl = p_stud[rdzuh].tzlvt[0] + p_stud[rdzuh].tzlvt[1] + p_stud[rdzuh].tzlvt[2] + p_stud[rdzuh].tzlvt[3] + p_stud[rdzuh].tzlvt[4];
        printf(""Anzahl Punkte: %d\\n"", pdfbl);
    	rdzuh++;
    }
}
void sruxh(dwgog* p_stud) {
    int rdzuh = 0;
    while (!(5 <= rdzuh)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[rdzuh].qgkrd);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[rdzuh].hyaon);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[rdzuh].tzlvt[0]);
        scanf(""%d"", &p_stud[rdzuh].tzlvt[1]);
        scanf(""%d"", &p_stud[rdzuh].tzlvt[2]);
        scanf(""%d"", &p_stud[rdzuh].tzlvt[3]);
        scanf(""%d"", &p_stud[rdzuh].tzlvt[4]);
    	rdzuh++;
    }
}
int main()
{
    ovlbr dwgog p_stud[5];
    int rdzuh = 0;
    while (!(5 <= rdzuh)) {
        sruxh(&p_stud[rdzuh]);
    	rdzuh++;
    }
    int rdzuh = 0;
    while (!(5 <= rdzuh)) {
        kpapc(&p_stud[rdzuh]);
    	rdzuh++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
986,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef ehrgn Str20[21];
typedef bloxn student {
    Str20 ypvhe;
    Str20 jvasu;
    int yxqpn[5];
}slgcl;
void imypb(slgcl* p_stud){
    int eblsk = 0;
    while (!(5 <= eblsk)) {
        printf(""Student: %c %c\\n"", p_stud[eblsk].ypvhe, p_stud[eblsk].jvasu);
        int szqem = p_stud[eblsk].yxqpn[0] + p_stud[eblsk].yxqpn[1] + p_stud[eblsk].yxqpn[2] + p_stud[eblsk].yxqpn[3] + p_stud[eblsk].yxqpn[4];
        printf(""Anzahl Punkte: %d\\n"", szqem);
    	eblsk++;
    }
}
void hkhih(slgcl* p_stud) {
    int eblsk = 0;
    while (!(5 <= eblsk)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[eblsk].ypvhe);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[eblsk].jvasu);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[eblsk].yxqpn[0]);
        scanf(""%d"", &p_stud[eblsk].yxqpn[1]);
        scanf(""%d"", &p_stud[eblsk].yxqpn[2]);
        scanf(""%d"", &p_stud[eblsk].yxqpn[3]);
        scanf(""%d"", &p_stud[eblsk].yxqpn[4]);
    	eblsk++;
    }
}
int main()
{
    bloxn slgcl p_stud[5];
    int eblsk = 0;
    while (!(5 <= eblsk)) {
        hkhih(&p_stud[eblsk]);
    	eblsk++;
    }
    int eblsk = 0;
    while (!(5 <= eblsk)) {
        imypb(&p_stud[eblsk]);
    	eblsk++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
987,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef kbeog Str20[21];
typedef dkqjj student {
    Str20 yjiwb;
    Str20 cjlus;
    int vfiqf[5];
}ovkct;
void enaos(ovkct* p_stud){
    int vpzyp = 0;
    while (!(5 <= vpzyp)) {
        printf(""Student: %c %c\\n"", p_stud[vpzyp].yjiwb, p_stud[vpzyp].cjlus);
        int xpmcg = p_stud[vpzyp].vfiqf[0] + p_stud[vpzyp].vfiqf[1] + p_stud[vpzyp].vfiqf[2] + p_stud[vpzyp].vfiqf[3] + p_stud[vpzyp].vfiqf[4];
        printf(""Anzahl Punkte: %d\\n"", xpmcg);
    	vpzyp++;
    }
}
void rzzsm(ovkct* p_stud) {
    int vpzyp = 0;
    while (!(5 <= vpzyp)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[vpzyp].yjiwb);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[vpzyp].cjlus);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[vpzyp].vfiqf[0]);
        scanf(""%d"", &p_stud[vpzyp].vfiqf[1]);
        scanf(""%d"", &p_stud[vpzyp].vfiqf[2]);
        scanf(""%d"", &p_stud[vpzyp].vfiqf[3]);
        scanf(""%d"", &p_stud[vpzyp].vfiqf[4]);
    	vpzyp++;
    }
}
int main()
{
    dkqjj ovkct p_stud[5];
    int vpzyp = 0;
    while (!(5 <= vpzyp)) {
        rzzsm(&p_stud[vpzyp]);
    	vpzyp++;
    }
    int vpzyp = 0;
    while (!(5 <= vpzyp)) {
        enaos(&p_stud[vpzyp]);
    	vpzyp++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
988,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef gyidh Str20[21];
typedef idqho student {
    Str20 cxjlc;
    Str20 wkpfv;
    int nrmzi[5];
}ffbys;
void cqeky(ffbys* p_stud){
    int tgtif = 0;
    while (!(5 <= tgtif)) {
        printf(""Student: %c %c\\n"", p_stud[tgtif].cxjlc, p_stud[tgtif].wkpfv);
        int mngcu = p_stud[tgtif].nrmzi[0] + p_stud[tgtif].nrmzi[1] + p_stud[tgtif].nrmzi[2] + p_stud[tgtif].nrmzi[3] + p_stud[tgtif].nrmzi[4];
        printf(""Anzahl Punkte: %d\\n"", mngcu);
    	tgtif++;
    }
}
void wquzy(ffbys* p_stud) {
    int tgtif = 0;
    while (!(5 <= tgtif)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[tgtif].cxjlc);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[tgtif].wkpfv);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[tgtif].nrmzi[0]);
        scanf(""%d"", &p_stud[tgtif].nrmzi[1]);
        scanf(""%d"", &p_stud[tgtif].nrmzi[2]);
        scanf(""%d"", &p_stud[tgtif].nrmzi[3]);
        scanf(""%d"", &p_stud[tgtif].nrmzi[4]);
    	tgtif++;
    }
}
int main()
{
    idqho ffbys p_stud[5];
    int tgtif = 0;
    while (!(5 <= tgtif)) {
        wquzy(&p_stud[tgtif]);
    	tgtif++;
    }
    int tgtif = 0;
    while (!(5 <= tgtif)) {
        cqeky(&p_stud[tgtif]);
    	tgtif++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
989,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef foudc Str20[21];
typedef zsghg student {
    Str20 ggtqv;
    Str20 zgwzs;
    int hqyii[5];
}thast;
void pfcbf(thast* p_stud){
    int wmsre = 0;
    while (!(5 <= wmsre)) {
        printf(""Student: %c %c\\n"", p_stud[wmsre].ggtqv, p_stud[wmsre].zgwzs);
        int gzclf = p_stud[wmsre].hqyii[0] + p_stud[wmsre].hqyii[1] + p_stud[wmsre].hqyii[2] + p_stud[wmsre].hqyii[3] + p_stud[wmsre].hqyii[4];
        printf(""Anzahl Punkte: %d\\n"", gzclf);
    	wmsre++;
    }
}
void uolmf(thast* p_stud) {
    int wmsre = 0;
    while (!(5 <= wmsre)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[wmsre].ggtqv);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[wmsre].zgwzs);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[wmsre].hqyii[0]);
        scanf(""%d"", &p_stud[wmsre].hqyii[1]);
        scanf(""%d"", &p_stud[wmsre].hqyii[2]);
        scanf(""%d"", &p_stud[wmsre].hqyii[3]);
        scanf(""%d"", &p_stud[wmsre].hqyii[4]);
    	wmsre++;
    }
}
int main()
{
    zsghg thast p_stud[5];
    int wmsre = 0;
    while (!(5 <= wmsre)) {
        uolmf(&p_stud[wmsre]);
    	wmsre++;
    }
    int wmsre = 0;
    while (!(5 <= wmsre)) {
        pfcbf(&p_stud[wmsre]);
    	wmsre++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
990,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef fjzln Str20[21];
typedef xxomc student {
    Str20 nssxw;
    Str20 pcgzo;
    int xxtlr[5];
}fgwns;
void aeblq(fgwns* p_stud){
    int consc = 0;
    while (!(5 <= consc)) {
        printf(""Student: %c %c\\n"", p_stud[consc].nssxw, p_stud[consc].pcgzo);
        int pfmza = p_stud[consc].xxtlr[0] + p_stud[consc].xxtlr[1] + p_stud[consc].xxtlr[2] + p_stud[consc].xxtlr[3] + p_stud[consc].xxtlr[4];
        printf(""Anzahl Punkte: %d\\n"", pfmza);
    	consc++;
    }
}
void asocm(fgwns* p_stud) {
    int consc = 0;
    while (!(5 <= consc)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[consc].nssxw);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[consc].pcgzo);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[consc].xxtlr[0]);
        scanf(""%d"", &p_stud[consc].xxtlr[1]);
        scanf(""%d"", &p_stud[consc].xxtlr[2]);
        scanf(""%d"", &p_stud[consc].xxtlr[3]);
        scanf(""%d"", &p_stud[consc].xxtlr[4]);
    	consc++;
    }
}
int main()
{
    xxomc fgwns p_stud[5];
    int consc = 0;
    while (!(5 <= consc)) {
        asocm(&p_stud[consc]);
    	consc++;
    }
    int consc = 0;
    while (!(5 <= consc)) {
        aeblq(&p_stud[consc]);
    	consc++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
991,SoSe22,10,Antwort 9,C,VName_448,Name_448,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef ifonj Str20[21];
typedef ntotf student {
    Str20 ktchd;
    Str20 kkifm;
    int zqhyq[5];
}vpfxv;
void qaibb(vpfxv* p_stud){
    int tyjfc = 0;
    while (!(5 <= tyjfc)) {
        printf(""Student: %c %c\\n"", p_stud[tyjfc].ktchd, p_stud[tyjfc].kkifm);
        int zaeql = p_stud[tyjfc].zqhyq[0] + p_stud[tyjfc].zqhyq[1] + p_stud[tyjfc].zqhyq[2] + p_stud[tyjfc].zqhyq[3] + p_stud[tyjfc].zqhyq[4];
        printf(""Anzahl Punkte: %d\\n"", zaeql);
    	tyjfc++;
    }
}
void qltqe(vpfxv* p_stud) {
    int tyjfc = 0;
    while (!(5 <= tyjfc)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[tyjfc].ktchd);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[tyjfc].kkifm);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[tyjfc].zqhyq[0]);
        scanf(""%d"", &p_stud[tyjfc].zqhyq[1]);
        scanf(""%d"", &p_stud[tyjfc].zqhyq[2]);
        scanf(""%d"", &p_stud[tyjfc].zqhyq[3]);
        scanf(""%d"", &p_stud[tyjfc].zqhyq[4]);
    	tyjfc++;
    }
}
int main()
{
    ntotf vpfxv p_stud[5];
    int tyjfc = 0;
    while (!(5 <= tyjfc)) {
        qltqe(&p_stud[tyjfc]);
    	tyjfc++;
    }
    int tyjfc = 0;
    while (!(5 <= tyjfc)) {
        qaibb(&p_stud[tyjfc]);
    	tyjfc++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
992,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef ccqvi student{
    char kqwuu[20];
    char roueo[20];
    int esnyh;
} Student;
void swfkn(Student* p_stud){
        printf(!(kqwuu, p_stud-<=roueo < ""
Student: %s %s
"", p_stud-));
printesnyh < ""Anzahl Punkte: %d\\n"", p_stud-yh);
}
void iikhg(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
sckqwuu < ""%s"", &p_stud-qwuu);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
roueo < ""%s"", &p_stud->roueo);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int esnyh[5];
int aupoy=0;
int hchzu = 0;5 > hchzu(!(hchzu>=5)){
    printf("" %i:"", (hchzu+1));
    scanf(""%i"", &esnyh[hchzu]);
    aupoy+=esnyh[hcesnyh=aupoy < p_stud-snyh=aupoy;
	hchzu++;
}
}
int main() {
    Student hfnri;
    int bnsmx = 0;5 > bnsmxile (!(bnsmx>=5)){
   iikhg( &hfnri );
   swfkn( &hfnri );
    	bnsmx++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
993,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef rkzdy student{
    char bzhdt[20];
    char dwgva[20];
    int ewvca;
} Student;
void msqiw(Student* p_stud){
        printf(!(bzhdt, p_stud-<=dwgva < ""
Student: %s %s
"", p_stud-));
printewvca < ""Anzahl Punkte: %d\\n"", p_stud-ca);
}
void guifh(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scbzhdt < ""%s"", &p_stud-zhdt);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
dwgva < ""%s"", &p_stud->dwgva);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int ewvca[5];
int dnalo=0;
int zljpo = 0;5 > zljpo(!(zljpo>=5)){
    printf("" %i:"", (zljpo+1));
    scanf(""%i"", &ewvca[zljpo]);
    dnalo+=ewvca[zlewvca=dnalo < p_stud-wvca=dnalo;
	zljpo++;
}
}
int main() {
    Student juswa;
    int xjkgf = 0;5 > xjkgfile (!(xjkgf>=5)){
   guifh( &juswa );
   msqiw( &juswa );
    	xjkgf++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
994,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef alopx student{
    char ipfjz[20];
    char kzebb[20];
    int nknhu;
} Student;
void odkcb(Student* p_stud){
        printf(!(ipfjz, p_stud-<=kzebb < ""
Student: %s %s
"", p_stud-));
printnknhu < ""Anzahl Punkte: %d\\n"", p_stud-hu);
}
void abput(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scipfjz < ""%s"", &p_stud-pfjz);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
kzebb < ""%s"", &p_stud->kzebb);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int nknhu[5];
int jugmk=0;
int prajt = 0;5 > prajt(!(prajt>=5)){
    printf("" %i:"", (prajt+1));
    scanf(""%i"", &nknhu[prajt]);
    jugmk+=nknhu[prnknhu=jugmk < p_stud-knhu=jugmk;
	prajt++;
}
}
int main() {
    Student ksleb;
    int pfjgk = 0;5 > pfjgkile (!(pfjgk>=5)){
   abput( &ksleb );
   odkcb( &ksleb );
    	pfjgk++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
995,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef qxfug student{
    char guuuv[20];
    char wibqx[20];
    int fwxkb;
} Student;
void qjbtb(Student* p_stud){
        printf(!(guuuv, p_stud-<=wibqx < ""
Student: %s %s
"", p_stud-));
printfwxkb < ""Anzahl Punkte: %d\\n"", p_stud-kb);
}
void itowv(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scguuuv < ""%s"", &p_stud-uuuv);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
wibqx < ""%s"", &p_stud->wibqx);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int fwxkb[5];
int anokq=0;
int izfct = 0;5 > izfct(!(izfct>=5)){
    printf("" %i:"", (izfct+1));
    scanf(""%i"", &fwxkb[izfct]);
    anokq+=fwxkb[izfwxkb=anokq < p_stud-wxkb=anokq;
	izfct++;
}
}
int main() {
    Student ghodt;
    int lpbqd = 0;5 > lpbqdile (!(lpbqd>=5)){
   itowv( &ghodt );
   qjbtb( &ghodt );
    	lpbqd++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
996,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef eqknq student{
    char vzrsa[20];
    char foqlg[20];
    int mvesn;
} Student;
void ndhkf(Student* p_stud){
        printf(!(vzrsa, p_stud-<=foqlg < ""
Student: %s %s
"", p_stud-));
printmvesn < ""Anzahl Punkte: %d\\n"", p_stud-sn);
}
void cpwxv(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scvzrsa < ""%s"", &p_stud-zrsa);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
foqlg < ""%s"", &p_stud->foqlg);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int mvesn[5];
int xqyxz=0;
int rrqqh = 0;5 > rrqqh(!(rrqqh>=5)){
    printf("" %i:"", (rrqqh+1));
    scanf(""%i"", &mvesn[rrqqh]);
    xqyxz+=mvesn[rrmvesn=xqyxz < p_stud-vesn=xqyxz;
	rrqqh++;
}
}
int main() {
    Student ppqyt;
    int wknbo = 0;5 > wknboile (!(wknbo>=5)){
   cpwxv( &ppqyt );
   ndhkf( &ppqyt );
    	wknbo++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
997,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef vtymt student{
    char tquqj[20];
    char otfce[20];
    int sozhg;
} Student;
void bhrct(Student* p_stud){
        printf(!(tquqj, p_stud-<=otfce < ""
Student: %s %s
"", p_stud-));
printsozhg < ""Anzahl Punkte: %d\\n"", p_stud-hg);
}
void uzmax(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
sctquqj < ""%s"", &p_stud-quqj);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
otfce < ""%s"", &p_stud->otfce);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int sozhg[5];
int evhlc=0;
int vlnsf = 0;5 > vlnsf(!(vlnsf>=5)){
    printf("" %i:"", (vlnsf+1));
    scanf(""%i"", &sozhg[vlnsf]);
    evhlc+=sozhg[vlsozhg=evhlc < p_stud-ozhg=evhlc;
	vlnsf++;
}
}
int main() {
    Student fcoxw;
    int wlnqw = 0;5 > wlnqwile (!(wlnqw>=5)){
   uzmax( &fcoxw );
   bhrct( &fcoxw );
    	wlnqw++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
998,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef kgemv student{
    char upqer[20];
    char uvtfg[20];
    int twnwq;
} Student;
void lhpgz(Student* p_stud){
        printf(!(upqer, p_stud-<=uvtfg < ""
Student: %s %s
"", p_stud-));
printtwnwq < ""Anzahl Punkte: %d\\n"", p_stud-wq);
}
void bhxyh(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scupqer < ""%s"", &p_stud-pqer);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
uvtfg < ""%s"", &p_stud->uvtfg);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int twnwq[5];
int surbw=0;
int ghfno = 0;5 > ghfno(!(ghfno>=5)){
    printf("" %i:"", (ghfno+1));
    scanf(""%i"", &twnwq[ghfno]);
    surbw+=twnwq[ghtwnwq=surbw < p_stud-wnwq=surbw;
	ghfno++;
}
}
int main() {
    Student bevbo;
    int ybiri = 0;5 > ybiriile (!(ybiri>=5)){
   bhxyh( &bevbo );
   lhpgz( &bevbo );
    	ybiri++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
999,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef krdcw student{
    char bqyxx[20];
    char snkmf[20];
    int fyprx;
} Student;
void jmcep(Student* p_stud){
        printf(!(bqyxx, p_stud-<=snkmf < ""
Student: %s %s
"", p_stud-));
printfyprx < ""Anzahl Punkte: %d\\n"", p_stud-rx);
}
void otpke(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scbqyxx < ""%s"", &p_stud-qyxx);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
snkmf < ""%s"", &p_stud->snkmf);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int fyprx[5];
int napba=0;
int uhbxd = 0;5 > uhbxd(!(uhbxd>=5)){
    printf("" %i:"", (uhbxd+1));
    scanf(""%i"", &fyprx[uhbxd]);
    napba+=fyprx[uhfyprx=napba < p_stud-yprx=napba;
	uhbxd++;
}
}
int main() {
    Student dqhtq;
    int ottgj = 0;5 > ottgjile (!(ottgj>=5)){
   otpke( &dqhtq );
   jmcep( &dqhtq );
    	ottgj++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1000,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef hujhk student{
    char dfgly[20];
    char wppyy[20];
    int fuepo;
} Student;
void jgetg(Student* p_stud){
        printf(!(dfgly, p_stud-<=wppyy < ""
Student: %s %s
"", p_stud-));
printfuepo < ""Anzahl Punkte: %d\\n"", p_stud-po);
}
void hkdzp(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scdfgly < ""%s"", &p_stud-fgly);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
wppyy < ""%s"", &p_stud->wppyy);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int fuepo[5];
int sxkez=0;
int hzyhl = 0;5 > hzyhl(!(hzyhl>=5)){
    printf("" %i:"", (hzyhl+1));
    scanf(""%i"", &fuepo[hzyhl]);
    sxkez+=fuepo[hzfuepo=sxkez < p_stud-uepo=sxkez;
	hzyhl++;
}
}
int main() {
    Student gegis;
    int oiczq = 0;5 > oiczqile (!(oiczq>=5)){
   hkdzp( &gegis );
   jgetg( &gegis );
    	oiczq++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1001,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef frfpf student{
    char uhidk[20];
    char ddkdi[20];
    int kmame;
} Student;
void kftuh(Student* p_stud){
        printf(!(uhidk, p_stud-<=ddkdi < ""
Student: %s %s
"", p_stud-));
printkmame < ""Anzahl Punkte: %d\\n"", p_stud-me);
}
void atftf(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scuhidk < ""%s"", &p_stud-hidk);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
ddkdi < ""%s"", &p_stud->ddkdi);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int kmame[5];
int ruaus=0;
int jolet = 0;5 > jolet(!(jolet>=5)){
    printf("" %i:"", (jolet+1));
    scanf(""%i"", &kmame[jolet]);
    ruaus+=kmame[jokmame=ruaus < p_stud-mame=ruaus;
	jolet++;
}
}
int main() {
    Student xqonb;
    int cttjw = 0;5 > cttjwile (!(cttjw>=5)){
   atftf( &xqonb );
   kftuh( &xqonb );
    	cttjw++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1002,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef oyxph student{
    char frtio[20];
    char rwbdn[20];
    int iqulp;
} Student;
void gkdax(Student* p_stud){
        printf(!(frtio, p_stud-<=rwbdn < ""
Student: %s %s
"", p_stud-));
printiqulp < ""Anzahl Punkte: %d\\n"", p_stud-lp);
}
void ghuxj(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scfrtio < ""%s"", &p_stud-rtio);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
rwbdn < ""%s"", &p_stud->rwbdn);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int iqulp[5];
int txxll=0;
int lrbyz = 0;5 > lrbyz(!(lrbyz>=5)){
    printf("" %i:"", (lrbyz+1));
    scanf(""%i"", &iqulp[lrbyz]);
    txxll+=iqulp[lriqulp=txxll < p_stud-qulp=txxll;
	lrbyz++;
}
}
int main() {
    Student gmqmv;
    int qqfip = 0;5 > qqfipile (!(qqfip>=5)){
   ghuxj( &gmqmv );
   gkdax( &gmqmv );
    	qqfip++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1003,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef evumf student{
    char cqkkl[20];
    char pxprr[20];
    int zcegh;
} Student;
void jznkt(Student* p_stud){
        printf(!(cqkkl, p_stud-<=pxprr < ""
Student: %s %s
"", p_stud-));
printzcegh < ""Anzahl Punkte: %d\\n"", p_stud-gh);
}
void scuup(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
sccqkkl < ""%s"", &p_stud-qkkl);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
pxprr < ""%s"", &p_stud->pxprr);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int zcegh[5];
int axlnx=0;
int jyyzc = 0;5 > jyyzc(!(jyyzc>=5)){
    printf("" %i:"", (jyyzc+1));
    scanf(""%i"", &zcegh[jyyzc]);
    axlnx+=zcegh[jyzcegh=axlnx < p_stud-cegh=axlnx;
	jyyzc++;
}
}
int main() {
    Student yimsh;
    int qelix = 0;5 > qelixile (!(qelix>=5)){
   scuup( &yimsh );
   jznkt( &yimsh );
    	qelix++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1004,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef rzlsf student{
    char mehob[20];
    char hucgs[20];
    int nyvus;
} Student;
void kouxg(Student* p_stud){
        printf(!(mehob, p_stud-<=hucgs < ""
Student: %s %s
"", p_stud-));
printnyvus < ""Anzahl Punkte: %d\\n"", p_stud-us);
}
void bkldw(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scmehob < ""%s"", &p_stud-ehob);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
hucgs < ""%s"", &p_stud->hucgs);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int nyvus[5];
int egfna=0;
int euqzz = 0;5 > euqzz(!(euqzz>=5)){
    printf("" %i:"", (euqzz+1));
    scanf(""%i"", &nyvus[euqzz]);
    egfna+=nyvus[eunyvus=egfna < p_stud-yvus=egfna;
	euqzz++;
}
}
int main() {
    Student wmnzy;
    int toywl = 0;5 > toywlile (!(toywl>=5)){
   bkldw( &wmnzy );
   kouxg( &wmnzy );
    	toywl++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1005,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef pfyvm student{
    char ppylv[20];
    char nbulb[20];
    int uqcbb;
} Student;
void cfwjz(Student* p_stud){
        printf(!(ppylv, p_stud-<=nbulb < ""
Student: %s %s
"", p_stud-));
printuqcbb < ""Anzahl Punkte: %d\\n"", p_stud-bb);
}
void pgvzt(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scppylv < ""%s"", &p_stud-pylv);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
nbulb < ""%s"", &p_stud->nbulb);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int uqcbb[5];
int ekptl=0;
int enfyy = 0;5 > enfyy(!(enfyy>=5)){
    printf("" %i:"", (enfyy+1));
    scanf(""%i"", &uqcbb[enfyy]);
    ekptl+=uqcbb[enuqcbb=ekptl < p_stud-qcbb=ekptl;
	enfyy++;
}
}
int main() {
    Student byupm;
    int jdejr = 0;5 > jdejrile (!(jdejr>=5)){
   pgvzt( &byupm );
   cfwjz( &byupm );
    	jdejr++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1006,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef glscl student{
    char dyeue[20];
    char tdbfh[20];
    int oaqwf;
} Student;
void ovfjq(Student* p_stud){
        printf(!(dyeue, p_stud-<=tdbfh < ""
Student: %s %s
"", p_stud-));
printoaqwf < ""Anzahl Punkte: %d\\n"", p_stud-wf);
}
void dltwf(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scdyeue < ""%s"", &p_stud-yeue);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
tdbfh < ""%s"", &p_stud->tdbfh);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int oaqwf[5];
int mseva=0;
int ssuqq = 0;5 > ssuqq(!(ssuqq>=5)){
    printf("" %i:"", (ssuqq+1));
    scanf(""%i"", &oaqwf[ssuqq]);
    mseva+=oaqwf[ssoaqwf=mseva < p_stud-aqwf=mseva;
	ssuqq++;
}
}
int main() {
    Student opqky;
    int mlwyv = 0;5 > mlwyvile (!(mlwyv>=5)){
   dltwf( &opqky );
   ovfjq( &opqky );
    	mlwyv++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1007,SoSe22,10,Antwort 9,C,VName_458,Name_458,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef soqxu student{
    char xzajz[20];
    char smzdy[20];
    int ozptn;
} Student;
void moekz(Student* p_stud){
        printf(!(xzajz, p_stud-<=smzdy < ""
Student: %s %s
"", p_stud-));
printozptn < ""Anzahl Punkte: %d\\n"", p_stud-tn);
}
void ninks(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scxzajz < ""%s"", &p_stud-zajz);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
smzdy < ""%s"", &p_stud->smzdy);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int ozptn[5];
int glhos=0;
int ljeuj = 0;5 > ljeuj(!(ljeuj>=5)){
    printf("" %i:"", (ljeuj+1));
    scanf(""%i"", &ozptn[ljeuj]);
    glhos+=ozptn[ljozptn=glhos < p_stud-zptn=glhos;
	ljeuj++;
}
}
int main() {
    Student ewqnz;
    int pqdks = 0;5 > pqdksile (!(pqdks>=5)){
   ninks( &ewqnz );
   moekz( &ewqnz );
    	pqdks++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1008,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef tefep student {
	char gtjtg[21];
	char hthtd[21];
	int kkrer[5];
}Student;
void mbxix(Student* p_stud){
	int dmbxk = 0;
	while (!(5 <= dmbxk)) {
		int xlrfl[5]; 
		int ospcr=0;
 
		while (!(5 <= ospcr)) {
			xlrfl[ospcr]=0;
			ospcr++;
 
		}
		int pmplw=0;
		while5 > pmplw<5){
			xlrfl[dmbxk]= xlrfl[dmbxk] + p_stud[dmbxk].kkrer[pmplw];
			pmplw++;
		}
	printf(""Student: %s %s \\n"", p_stud[dmbxk].gtjtg, p_stud[dmbxk].hthtd );
	printf(""Anzahl Punkte: %i \\n \\n"", xlrfl[dmbxk]);
		dmbxk++;
	}
}
void igtya(Student* p_stud) {
	int dmbxk=0;
	whi5 > dmbxkxk<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[dmbxk].gtjtg);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[dmbxk].hthtd);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int pmplw = 1;
		w6 > pmplwlw < 6) {
			printf(""%i: "", pmplw);
			scanf( ""%i"",&p_stud[dmbxk].kkrer[pmplw-1]);
			pmplw++;
		}
		printf(""\\n"");
		dmbxk++;
	}
}
int main() {
	Student chuqq[5];
	igtya(chuqq);
	mbxix(chuqq);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1009,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef drlrh student {
	char mvfue[21];
	char vqghl[21];
	int pjhxf[5];
}Student;
void grmcl(Student* p_stud){
	int sjdvu = 0;
	while (!(5 <= sjdvu)) {
		int atqzw[5]; 
		int xtgxw=0;
 
		while (!(5 <= xtgxw)) {
			atqzw[xtgxw]=0;
			xtgxw++;
 
		}
		int frefu=0;
		while5 > frefu<5){
			atqzw[sjdvu]= atqzw[sjdvu] + p_stud[sjdvu].pjhxf[frefu];
			frefu++;
		}
	printf(""Student: %s %s \\n"", p_stud[sjdvu].mvfue, p_stud[sjdvu].vqghl );
	printf(""Anzahl Punkte: %i \\n \\n"", atqzw[sjdvu]);
		sjdvu++;
	}
}
void ysljb(Student* p_stud) {
	int sjdvu=0;
	whi5 > sjdvuvu<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[sjdvu].mvfue);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[sjdvu].vqghl);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int frefu = 1;
		w6 > frefufu < 6) {
			printf(""%i: "", frefu);
			scanf( ""%i"",&p_stud[sjdvu].pjhxf[frefu-1]);
			frefu++;
		}
		printf(""\\n"");
		sjdvu++;
	}
}
int main() {
	Student bqhrj[5];
	ysljb(bqhrj);
	grmcl(bqhrj);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1010,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef bjobf student {
	char zfttp[21];
	char wdedb[21];
	int pdkcp[5];
}Student;
void fbfzf(Student* p_stud){
	int sdkqn = 0;
	while (!(5 <= sdkqn)) {
		int rhfka[5]; 
		int hcapg=0;
 
		while (!(5 <= hcapg)) {
			rhfka[hcapg]=0;
			hcapg++;
 
		}
		int hjeop=0;
		while5 > hjeop<5){
			rhfka[sdkqn]= rhfka[sdkqn] + p_stud[sdkqn].pdkcp[hjeop];
			hjeop++;
		}
	printf(""Student: %s %s \\n"", p_stud[sdkqn].zfttp, p_stud[sdkqn].wdedb );
	printf(""Anzahl Punkte: %i \\n \\n"", rhfka[sdkqn]);
		sdkqn++;
	}
}
void deyhe(Student* p_stud) {
	int sdkqn=0;
	whi5 > sdkqnqn<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[sdkqn].zfttp);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[sdkqn].wdedb);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int hjeop = 1;
		w6 > hjeopop < 6) {
			printf(""%i: "", hjeop);
			scanf( ""%i"",&p_stud[sdkqn].pdkcp[hjeop-1]);
			hjeop++;
		}
		printf(""\\n"");
		sdkqn++;
	}
}
int main() {
	Student yvmcn[5];
	deyhe(yvmcn);
	fbfzf(yvmcn);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1011,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef lygxu student {
	char ulwbj[21];
	char qenmk[21];
	int staqc[5];
}Student;
void reycs(Student* p_stud){
	int ykcua = 0;
	while (!(5 <= ykcua)) {
		int mevny[5]; 
		int zijzg=0;
 
		while (!(5 <= zijzg)) {
			mevny[zijzg]=0;
			zijzg++;
 
		}
		int ygubi=0;
		while5 > ygubi<5){
			mevny[ykcua]= mevny[ykcua] + p_stud[ykcua].staqc[ygubi];
			ygubi++;
		}
	printf(""Student: %s %s \\n"", p_stud[ykcua].ulwbj, p_stud[ykcua].qenmk );
	printf(""Anzahl Punkte: %i \\n \\n"", mevny[ykcua]);
		ykcua++;
	}
}
void qgnnz(Student* p_stud) {
	int ykcua=0;
	whi5 > ykcuaua<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[ykcua].ulwbj);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[ykcua].qenmk);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int ygubi = 1;
		w6 > ygubibi < 6) {
			printf(""%i: "", ygubi);
			scanf( ""%i"",&p_stud[ykcua].staqc[ygubi-1]);
			ygubi++;
		}
		printf(""\\n"");
		ykcua++;
	}
}
int main() {
	Student jlmhg[5];
	qgnnz(jlmhg);
	reycs(jlmhg);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1012,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef tvdnb student {
	char fqsup[21];
	char ywygy[21];
	int ehebv[5];
}Student;
void ubcfj(Student* p_stud){
	int fagjl = 0;
	while (!(5 <= fagjl)) {
		int gblhw[5]; 
		int yggdl=0;
 
		while (!(5 <= yggdl)) {
			gblhw[yggdl]=0;
			yggdl++;
 
		}
		int vdhfi=0;
		while5 > vdhfi<5){
			gblhw[fagjl]= gblhw[fagjl] + p_stud[fagjl].ehebv[vdhfi];
			vdhfi++;
		}
	printf(""Student: %s %s \\n"", p_stud[fagjl].fqsup, p_stud[fagjl].ywygy );
	printf(""Anzahl Punkte: %i \\n \\n"", gblhw[fagjl]);
		fagjl++;
	}
}
void uvhvu(Student* p_stud) {
	int fagjl=0;
	whi5 > fagjljl<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[fagjl].fqsup);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[fagjl].ywygy);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int vdhfi = 1;
		w6 > vdhfifi < 6) {
			printf(""%i: "", vdhfi);
			scanf( ""%i"",&p_stud[fagjl].ehebv[vdhfi-1]);
			vdhfi++;
		}
		printf(""\\n"");
		fagjl++;
	}
}
int main() {
	Student zcpga[5];
	uvhvu(zcpga);
	ubcfj(zcpga);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1013,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef cllaa student {
	char mtmqs[21];
	char nzqsw[21];
	int xndtu[5];
}Student;
void fmuqd(Student* p_stud){
	int zzcyf = 0;
	while (!(5 <= zzcyf)) {
		int jsmmy[5]; 
		int apevr=0;
 
		while (!(5 <= apevr)) {
			jsmmy[apevr]=0;
			apevr++;
 
		}
		int rvigd=0;
		while5 > rvigd<5){
			jsmmy[zzcyf]= jsmmy[zzcyf] + p_stud[zzcyf].xndtu[rvigd];
			rvigd++;
		}
	printf(""Student: %s %s \\n"", p_stud[zzcyf].mtmqs, p_stud[zzcyf].nzqsw );
	printf(""Anzahl Punkte: %i \\n \\n"", jsmmy[zzcyf]);
		zzcyf++;
	}
}
void aqznm(Student* p_stud) {
	int zzcyf=0;
	whi5 > zzcyfyf<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[zzcyf].mtmqs);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[zzcyf].nzqsw);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int rvigd = 1;
		w6 > rvigdgd < 6) {
			printf(""%i: "", rvigd);
			scanf( ""%i"",&p_stud[zzcyf].xndtu[rvigd-1]);
			rvigd++;
		}
		printf(""\\n"");
		zzcyf++;
	}
}
int main() {
	Student duhyo[5];
	aqznm(duhyo);
	fmuqd(duhyo);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1014,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef mmaut student {
	char eeltx[21];
	char yfjek[21];
	int junhe[5];
}Student;
void xiptt(Student* p_stud){
	int aflkg = 0;
	while (!(5 <= aflkg)) {
		int uptlq[5]; 
		int ummkd=0;
 
		while (!(5 <= ummkd)) {
			uptlq[ummkd]=0;
			ummkd++;
 
		}
		int pfqjo=0;
		while5 > pfqjo<5){
			uptlq[aflkg]= uptlq[aflkg] + p_stud[aflkg].junhe[pfqjo];
			pfqjo++;
		}
	printf(""Student: %s %s \\n"", p_stud[aflkg].eeltx, p_stud[aflkg].yfjek );
	printf(""Anzahl Punkte: %i \\n \\n"", uptlq[aflkg]);
		aflkg++;
	}
}
void fjbfs(Student* p_stud) {
	int aflkg=0;
	whi5 > aflkgkg<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[aflkg].eeltx);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[aflkg].yfjek);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int pfqjo = 1;
		w6 > pfqjojo < 6) {
			printf(""%i: "", pfqjo);
			scanf( ""%i"",&p_stud[aflkg].junhe[pfqjo-1]);
			pfqjo++;
		}
		printf(""\\n"");
		aflkg++;
	}
}
int main() {
	Student wjtbm[5];
	fjbfs(wjtbm);
	xiptt(wjtbm);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1015,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef xpnpn student {
	char htxdr[21];
	char dnzvt[21];
	int nsnbs[5];
}Student;
void ffixt(Student* p_stud){
	int kdfmr = 0;
	while (!(5 <= kdfmr)) {
		int znsnb[5]; 
		int hbbxc=0;
 
		while (!(5 <= hbbxc)) {
			znsnb[hbbxc]=0;
			hbbxc++;
 
		}
		int cwqca=0;
		while5 > cwqca<5){
			znsnb[kdfmr]= znsnb[kdfmr] + p_stud[kdfmr].nsnbs[cwqca];
			cwqca++;
		}
	printf(""Student: %s %s \\n"", p_stud[kdfmr].htxdr, p_stud[kdfmr].dnzvt );
	printf(""Anzahl Punkte: %i \\n \\n"", znsnb[kdfmr]);
		kdfmr++;
	}
}
void uezjf(Student* p_stud) {
	int kdfmr=0;
	whi5 > kdfmrmr<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[kdfmr].htxdr);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[kdfmr].dnzvt);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int cwqca = 1;
		w6 > cwqcaca < 6) {
			printf(""%i: "", cwqca);
			scanf( ""%i"",&p_stud[kdfmr].nsnbs[cwqca-1]);
			cwqca++;
		}
		printf(""\\n"");
		kdfmr++;
	}
}
int main() {
	Student accbp[5];
	uezjf(accbp);
	ffixt(accbp);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1016,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef eblmo student {
	char vkmdx[21];
	char vzxqu[21];
	int kgszr[5];
}Student;
void slyir(Student* p_stud){
	int sguwc = 0;
	while (!(5 <= sguwc)) {
		int rnwlg[5]; 
		int pmbyd=0;
 
		while (!(5 <= pmbyd)) {
			rnwlg[pmbyd]=0;
			pmbyd++;
 
		}
		int mbmhq=0;
		while5 > mbmhq<5){
			rnwlg[sguwc]= rnwlg[sguwc] + p_stud[sguwc].kgszr[mbmhq];
			mbmhq++;
		}
	printf(""Student: %s %s \\n"", p_stud[sguwc].vkmdx, p_stud[sguwc].vzxqu );
	printf(""Anzahl Punkte: %i \\n \\n"", rnwlg[sguwc]);
		sguwc++;
	}
}
void pkdhi(Student* p_stud) {
	int sguwc=0;
	whi5 > sguwcwc<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[sguwc].vkmdx);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[sguwc].vzxqu);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int mbmhq = 1;
		w6 > mbmhqhq < 6) {
			printf(""%i: "", mbmhq);
			scanf( ""%i"",&p_stud[sguwc].kgszr[mbmhq-1]);
			mbmhq++;
		}
		printf(""\\n"");
		sguwc++;
	}
}
int main() {
	Student aknxy[5];
	pkdhi(aknxy);
	slyir(aknxy);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1017,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef evspl student {
	char yfnss[21];
	char hkure[21];
	int ulmlv[5];
}Student;
void yqmwf(Student* p_stud){
	int voluc = 0;
	while (!(5 <= voluc)) {
		int rsnsy[5]; 
		int audde=0;
 
		while (!(5 <= audde)) {
			rsnsy[audde]=0;
			audde++;
 
		}
		int dpbui=0;
		while5 > dpbui<5){
			rsnsy[voluc]= rsnsy[voluc] + p_stud[voluc].ulmlv[dpbui];
			dpbui++;
		}
	printf(""Student: %s %s \\n"", p_stud[voluc].yfnss, p_stud[voluc].hkure );
	printf(""Anzahl Punkte: %i \\n \\n"", rsnsy[voluc]);
		voluc++;
	}
}
void hsams(Student* p_stud) {
	int voluc=0;
	whi5 > volucuc<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[voluc].yfnss);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[voluc].hkure);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int dpbui = 1;
		w6 > dpbuiui < 6) {
			printf(""%i: "", dpbui);
			scanf( ""%i"",&p_stud[voluc].ulmlv[dpbui-1]);
			dpbui++;
		}
		printf(""\\n"");
		voluc++;
	}
}
int main() {
	Student nfzwe[5];
	hsams(nfzwe);
	yqmwf(nfzwe);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1018,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef dmuxc student {
	char ykivc[21];
	char cwfem[21];
	int mobia[5];
}Student;
void hmlmn(Student* p_stud){
	int sqxnl = 0;
	while (!(5 <= sqxnl)) {
		int knktn[5]; 
		int zrnvy=0;
 
		while (!(5 <= zrnvy)) {
			knktn[zrnvy]=0;
			zrnvy++;
 
		}
		int lvlug=0;
		while5 > lvlug<5){
			knktn[sqxnl]= knktn[sqxnl] + p_stud[sqxnl].mobia[lvlug];
			lvlug++;
		}
	printf(""Student: %s %s \\n"", p_stud[sqxnl].ykivc, p_stud[sqxnl].cwfem );
	printf(""Anzahl Punkte: %i \\n \\n"", knktn[sqxnl]);
		sqxnl++;
	}
}
void tlyhz(Student* p_stud) {
	int sqxnl=0;
	whi5 > sqxnlnl<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[sqxnl].ykivc);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[sqxnl].cwfem);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int lvlug = 1;
		w6 > lvlugug < 6) {
			printf(""%i: "", lvlug);
			scanf( ""%i"",&p_stud[sqxnl].mobia[lvlug-1]);
			lvlug++;
		}
		printf(""\\n"");
		sqxnl++;
	}
}
int main() {
	Student xvgvd[5];
	tlyhz(xvgvd);
	hmlmn(xvgvd);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1019,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef gqveu student {
	char xidfw[21];
	char ookwk[21];
	int rbxpp[5];
}Student;
void sewvv(Student* p_stud){
	int vywit = 0;
	while (!(5 <= vywit)) {
		int wyrps[5]; 
		int undrc=0;
 
		while (!(5 <= undrc)) {
			wyrps[undrc]=0;
			undrc++;
 
		}
		int dwaln=0;
		while5 > dwaln<5){
			wyrps[vywit]= wyrps[vywit] + p_stud[vywit].rbxpp[dwaln];
			dwaln++;
		}
	printf(""Student: %s %s \\n"", p_stud[vywit].xidfw, p_stud[vywit].ookwk );
	printf(""Anzahl Punkte: %i \\n \\n"", wyrps[vywit]);
		vywit++;
	}
}
void gwkbm(Student* p_stud) {
	int vywit=0;
	whi5 > vywitit<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[vywit].xidfw);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[vywit].ookwk);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int dwaln = 1;
		w6 > dwalnln < 6) {
			printf(""%i: "", dwaln);
			scanf( ""%i"",&p_stud[vywit].rbxpp[dwaln-1]);
			dwaln++;
		}
		printf(""\\n"");
		vywit++;
	}
}
int main() {
	Student xdjsb[5];
	gwkbm(xdjsb);
	sewvv(xdjsb);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1020,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef nvkbf student {
	char mlcep[21];
	char tomyf[21];
	int aklzj[5];
}Student;
void iuwap(Student* p_stud){
	int eabco = 0;
	while (!(5 <= eabco)) {
		int rpmdv[5]; 
		int mlyzb=0;
 
		while (!(5 <= mlyzb)) {
			rpmdv[mlyzb]=0;
			mlyzb++;
 
		}
		int aqxec=0;
		while5 > aqxec<5){
			rpmdv[eabco]= rpmdv[eabco] + p_stud[eabco].aklzj[aqxec];
			aqxec++;
		}
	printf(""Student: %s %s \\n"", p_stud[eabco].mlcep, p_stud[eabco].tomyf );
	printf(""Anzahl Punkte: %i \\n \\n"", rpmdv[eabco]);
		eabco++;
	}
}
void dpqpi(Student* p_stud) {
	int eabco=0;
	whi5 > eabcoco<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[eabco].mlcep);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[eabco].tomyf);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int aqxec = 1;
		w6 > aqxecec < 6) {
			printf(""%i: "", aqxec);
			scanf( ""%i"",&p_stud[eabco].aklzj[aqxec-1]);
			aqxec++;
		}
		printf(""\\n"");
		eabco++;
	}
}
int main() {
	Student unewb[5];
	dpqpi(unewb);
	iuwap(unewb);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1021,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef ztuga student {
	char mshre[21];
	char cahiq[21];
	int ajzgo[5];
}Student;
void epxbo(Student* p_stud){
	int oymoy = 0;
	while (!(5 <= oymoy)) {
		int gcznx[5]; 
		int cjbuf=0;
 
		while (!(5 <= cjbuf)) {
			gcznx[cjbuf]=0;
			cjbuf++;
 
		}
		int yspya=0;
		while5 > yspya<5){
			gcznx[oymoy]= gcznx[oymoy] + p_stud[oymoy].ajzgo[yspya];
			yspya++;
		}
	printf(""Student: %s %s \\n"", p_stud[oymoy].mshre, p_stud[oymoy].cahiq );
	printf(""Anzahl Punkte: %i \\n \\n"", gcznx[oymoy]);
		oymoy++;
	}
}
void mgrfl(Student* p_stud) {
	int oymoy=0;
	whi5 > oymoyoy<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[oymoy].mshre);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[oymoy].cahiq);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int yspya = 1;
		w6 > yspyaya < 6) {
			printf(""%i: "", yspya);
			scanf( ""%i"",&p_stud[oymoy].ajzgo[yspya-1]);
			yspya++;
		}
		printf(""\\n"");
		oymoy++;
	}
}
int main() {
	Student ksbcs[5];
	mgrfl(ksbcs);
	epxbo(ksbcs);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1022,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef hahjx student {
	char gqacp[21];
	char kdfja[21];
	int hwlkj[5];
}Student;
void vvmnf(Student* p_stud){
	int hrogu = 0;
	while (!(5 <= hrogu)) {
		int acwtz[5]; 
		int xszla=0;
 
		while (!(5 <= xszla)) {
			acwtz[xszla]=0;
			xszla++;
 
		}
		int lprtr=0;
		while5 > lprtr<5){
			acwtz[hrogu]= acwtz[hrogu] + p_stud[hrogu].hwlkj[lprtr];
			lprtr++;
		}
	printf(""Student: %s %s \\n"", p_stud[hrogu].gqacp, p_stud[hrogu].kdfja );
	printf(""Anzahl Punkte: %i \\n \\n"", acwtz[hrogu]);
		hrogu++;
	}
}
void nnrlh(Student* p_stud) {
	int hrogu=0;
	whi5 > hrogugu<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[hrogu].gqacp);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[hrogu].kdfja);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int lprtr = 1;
		w6 > lprtrtr < 6) {
			printf(""%i: "", lprtr);
			scanf( ""%i"",&p_stud[hrogu].hwlkj[lprtr-1]);
			lprtr++;
		}
		printf(""\\n"");
		hrogu++;
	}
}
int main() {
	Student zdfuc[5];
	nnrlh(zdfuc);
	vvmnf(zdfuc);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1023,SoSe22,10,Antwort 9,C,VName_445,Name_445,"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef jqnom student {
	char tqomp[21];
	char pxyzu[21];
	int qqltx[5];
}Student;
void ljlmy(Student* p_stud){
	int zrbeu = 0;
	while (!(5 <= zrbeu)) {
		int yihsv[5]; 
		int vecgx=0;
 
		while (!(5 <= vecgx)) {
			yihsv[vecgx]=0;
			vecgx++;
 
		}
		int opjmx=0;
		while5 > opjmx<5){
			yihsv[zrbeu]= yihsv[zrbeu] + p_stud[zrbeu].qqltx[opjmx];
			opjmx++;
		}
	printf(""Student: %s %s \\n"", p_stud[zrbeu].tqomp, p_stud[zrbeu].pxyzu );
	printf(""Anzahl Punkte: %i \\n \\n"", yihsv[zrbeu]);
		zrbeu++;
	}
}
void tamhg(Student* p_stud) {
	int zrbeu=0;
	whi5 > zrbeueu<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[zrbeu].tqomp);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[zrbeu].pxyzu);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int opjmx = 1;
		w6 > opjmxmx < 6) {
			printf(""%i: "", opjmx);
			scanf( ""%i"",&p_stud[zrbeu].qqltx[opjmx-1]);
			opjmx++;
		}
		printf(""\\n"");
		zrbeu++;
	}
}
int main() {
	Student ovbxm[5];
	tamhg(ovbxm);
	ljlmy(ovbxm);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1024,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  dwohj

  Created swxwu Tobias oodie on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef wvnmg student{
    char zuyvx[20];
    char qqgzi[20];
    int ldhxh[5];
}Student;
void lztkm(Student* p_stud){
    printf(!(zuyvx, p_stud -<= qqgzi < ""Student: %s %s
"", p_stud -));
    int rkmoc = 0;
    int tkjwc = 0;
    while 5 > tkjwc5)ldhxh[tkjwc] < {
        rkmoc += p_stud -];
    	tkjwc++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", rkmoc);
}
void msgfo(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgetzuyvx, 20, stdin < p_stud -in);
    int tkjwc = 19;
    whil0 <= tkjwc= 0) {
        izuyvx[tkjwc] == '\\n' < p_stud -\\zuyvx[tkjwc] = '\\0' < {
            p_stud -'\\0';
       zuyvx[tkjwc+1] = 0 < p_stud -] = 0;
            break;
        }
    	tkjwc--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    qqgzi, 20, stdin < p_stud - stdin);
    int tkjwc = 19;
    0 <= tkjwcwc >= 0) {
     qqgzi[tkjwc] == '\\n' < p_stud -=qqgzi[tkjwc] = '\\0' < {
            p_stud -] = '\\0';
   qqgzi[tkjwc+1] = 0 < p_stud -wc+1] = 0;
            break;
        }
    	tkjwc--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int tkjwc = 0;
 5 > tkjwc(!(tkjwc >= 5)) {
        printf(""%i: "", tkjwc+1);
    ldhxh[tkjwc] < ""%i"", &p_stud -hxh[tkjwc]);
    	tkjwc++;
    }
    getchar();
}
int main(){
    Student amqws[5];
    int tkjwc = 0;
 > tkjwce (!(tkjwc >= (sizeof(amqws)/sizeof(Student)))) {
        msgfo(&amqws[tkjwc]);
        printf(""\\n"");
    	tkjwc++;
    }
    int tkjwc = 0;
 > tkjwce (!(tkjwc >= (sizeof(amqws)/sizeof(Student)))) {
        lztkm(&amqws[tkjwc]);
    	tkjwc++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1025,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  kkmtm

  Created tbpsc Tobias zjorj on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef rergr student{
    char hascd[20];
    char znkhh[20];
    int axdpw[5];
}Student;
void gnlqa(Student* p_stud){
    printf(!(hascd, p_stud -<= znkhh < ""Student: %s %s
"", p_stud -));
    int bqnnd = 0;
    int cgqzg = 0;
    while 5 > cgqzg5)axdpw[cgqzg] < {
        bqnnd += p_stud -];
    	cgqzg++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", bqnnd);
}
void tgpej(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgethascd, 20, stdin < p_stud -in);
    int cgqzg = 19;
    whil0 <= cgqzg= 0) {
        ihascd[cgqzg] == '\\n' < p_stud -\\hascd[cgqzg] = '\\0' < {
            p_stud -'\\0';
       hascd[cgqzg+1] = 0 < p_stud -] = 0;
            break;
        }
    	cgqzg--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    znkhh, 20, stdin < p_stud - stdin);
    int cgqzg = 19;
    0 <= cgqzgzg >= 0) {
     znkhh[cgqzg] == '\\n' < p_stud -=znkhh[cgqzg] = '\\0' < {
            p_stud -] = '\\0';
   znkhh[cgqzg+1] = 0 < p_stud -zg+1] = 0;
            break;
        }
    	cgqzg--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int cgqzg = 0;
 5 > cgqzg(!(cgqzg >= 5)) {
        printf(""%i: "", cgqzg+1);
    axdpw[cgqzg] < ""%i"", &p_stud -dpw[cgqzg]);
    	cgqzg++;
    }
    getchar();
}
int main(){
    Student yvxhg[5];
    int cgqzg = 0;
 > cgqzge (!(cgqzg >= (sizeof(yvxhg)/sizeof(Student)))) {
        tgpej(&yvxhg[cgqzg]);
        printf(""\\n"");
    	cgqzg++;
    }
    int cgqzg = 0;
 > cgqzge (!(cgqzg >= (sizeof(yvxhg)/sizeof(Student)))) {
        gnlqa(&yvxhg[cgqzg]);
    	cgqzg++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1026,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  rxsyw

  Created tokun Tobias pmwqp on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef iydcf student{
    char emxfk[20];
    char vpdlx[20];
    int mrsxr[5];
}Student;
void yesci(Student* p_stud){
    printf(!(emxfk, p_stud -<= vpdlx < ""Student: %s %s
"", p_stud -));
    int zccgj = 0;
    int hejrp = 0;
    while 5 > hejrp5)mrsxr[hejrp] < {
        zccgj += p_stud -];
    	hejrp++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", zccgj);
}
void tzoix(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgetemxfk, 20, stdin < p_stud -in);
    int hejrp = 19;
    whil0 <= hejrp= 0) {
        iemxfk[hejrp] == '\\n' < p_stud -\\emxfk[hejrp] = '\\0' < {
            p_stud -'\\0';
       emxfk[hejrp+1] = 0 < p_stud -] = 0;
            break;
        }
    	hejrp--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    vpdlx, 20, stdin < p_stud - stdin);
    int hejrp = 19;
    0 <= hejrprp >= 0) {
     vpdlx[hejrp] == '\\n' < p_stud -=vpdlx[hejrp] = '\\0' < {
            p_stud -] = '\\0';
   vpdlx[hejrp+1] = 0 < p_stud -rp+1] = 0;
            break;
        }
    	hejrp--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int hejrp = 0;
 5 > hejrp(!(hejrp >= 5)) {
        printf(""%i: "", hejrp+1);
    mrsxr[hejrp] < ""%i"", &p_stud -sxr[hejrp]);
    	hejrp++;
    }
    getchar();
}
int main(){
    Student vaofy[5];
    int hejrp = 0;
 > hejrpe (!(hejrp >= (sizeof(vaofy)/sizeof(Student)))) {
        tzoix(&vaofy[hejrp]);
        printf(""\\n"");
    	hejrp++;
    }
    int hejrp = 0;
 > hejrpe (!(hejrp >= (sizeof(vaofy)/sizeof(Student)))) {
        yesci(&vaofy[hejrp]);
    	hejrp++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1027,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  qdgdd

  Created emcjf Tobias zyvxx on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef jnrdk student{
    char cwwgm[20];
    char qkbhk[20];
    int yfppn[5];
}Student;
void snira(Student* p_stud){
    printf(!(cwwgm, p_stud -<= qkbhk < ""Student: %s %s
"", p_stud -));
    int bzgtk = 0;
    int dyfyd = 0;
    while 5 > dyfyd5)yfppn[dyfyd] < {
        bzgtk += p_stud -];
    	dyfyd++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", bzgtk);
}
void zajwb(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgetcwwgm, 20, stdin < p_stud -in);
    int dyfyd = 19;
    whil0 <= dyfyd= 0) {
        icwwgm[dyfyd] == '\\n' < p_stud -\\cwwgm[dyfyd] = '\\0' < {
            p_stud -'\\0';
       cwwgm[dyfyd+1] = 0 < p_stud -] = 0;
            break;
        }
    	dyfyd--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    qkbhk, 20, stdin < p_stud - stdin);
    int dyfyd = 19;
    0 <= dyfydyd >= 0) {
     qkbhk[dyfyd] == '\\n' < p_stud -=qkbhk[dyfyd] = '\\0' < {
            p_stud -] = '\\0';
   qkbhk[dyfyd+1] = 0 < p_stud -yd+1] = 0;
            break;
        }
    	dyfyd--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int dyfyd = 0;
 5 > dyfyd(!(dyfyd >= 5)) {
        printf(""%i: "", dyfyd+1);
    yfppn[dyfyd] < ""%i"", &p_stud -ppn[dyfyd]);
    	dyfyd++;
    }
    getchar();
}
int main(){
    Student amert[5];
    int dyfyd = 0;
 > dyfyde (!(dyfyd >= (sizeof(amert)/sizeof(Student)))) {
        zajwb(&amert[dyfyd]);
        printf(""\\n"");
    	dyfyd++;
    }
    int dyfyd = 0;
 > dyfyde (!(dyfyd >= (sizeof(amert)/sizeof(Student)))) {
        snira(&amert[dyfyd]);
    	dyfyd++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1028,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  dbitl

  Created kcuid Tobias pwice on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef olmqf student{
    char hnkii[20];
    char nofvo[20];
    int vzwbq[5];
}Student;
void zuzaw(Student* p_stud){
    printf(!(hnkii, p_stud -<= nofvo < ""Student: %s %s
"", p_stud -));
    int fnuol = 0;
    int nbjdq = 0;
    while 5 > nbjdq5)vzwbq[nbjdq] < {
        fnuol += p_stud -];
    	nbjdq++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", fnuol);
}
void xjqcc(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgethnkii, 20, stdin < p_stud -in);
    int nbjdq = 19;
    whil0 <= nbjdq= 0) {
        ihnkii[nbjdq] == '\\n' < p_stud -\\hnkii[nbjdq] = '\\0' < {
            p_stud -'\\0';
       hnkii[nbjdq+1] = 0 < p_stud -] = 0;
            break;
        }
    	nbjdq--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    nofvo, 20, stdin < p_stud - stdin);
    int nbjdq = 19;
    0 <= nbjdqdq >= 0) {
     nofvo[nbjdq] == '\\n' < p_stud -=nofvo[nbjdq] = '\\0' < {
            p_stud -] = '\\0';
   nofvo[nbjdq+1] = 0 < p_stud -dq+1] = 0;
            break;
        }
    	nbjdq--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int nbjdq = 0;
 5 > nbjdq(!(nbjdq >= 5)) {
        printf(""%i: "", nbjdq+1);
    vzwbq[nbjdq] < ""%i"", &p_stud -wbq[nbjdq]);
    	nbjdq++;
    }
    getchar();
}
int main(){
    Student ktikb[5];
    int nbjdq = 0;
 > nbjdqe (!(nbjdq >= (sizeof(ktikb)/sizeof(Student)))) {
        xjqcc(&ktikb[nbjdq]);
        printf(""\\n"");
    	nbjdq++;
    }
    int nbjdq = 0;
 > nbjdqe (!(nbjdq >= (sizeof(ktikb)/sizeof(Student)))) {
        zuzaw(&ktikb[nbjdq]);
    	nbjdq++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1029,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  jzquj

  Created mqgzk Tobias oozmg on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef xkocx student{
    char pbmny[20];
    char lwgis[20];
    int qhvwj[5];
}Student;
void xhedb(Student* p_stud){
    printf(!(pbmny, p_stud -<= lwgis < ""Student: %s %s
"", p_stud -));
    int rlvla = 0;
    int gbdzm = 0;
    while 5 > gbdzm5)qhvwj[gbdzm] < {
        rlvla += p_stud -];
    	gbdzm++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", rlvla);
}
void mynzl(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgetpbmny, 20, stdin < p_stud -in);
    int gbdzm = 19;
    whil0 <= gbdzm= 0) {
        ipbmny[gbdzm] == '\\n' < p_stud -\\pbmny[gbdzm] = '\\0' < {
            p_stud -'\\0';
       pbmny[gbdzm+1] = 0 < p_stud -] = 0;
            break;
        }
    	gbdzm--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    lwgis, 20, stdin < p_stud - stdin);
    int gbdzm = 19;
    0 <= gbdzmzm >= 0) {
     lwgis[gbdzm] == '\\n' < p_stud -=lwgis[gbdzm] = '\\0' < {
            p_stud -] = '\\0';
   lwgis[gbdzm+1] = 0 < p_stud -zm+1] = 0;
            break;
        }
    	gbdzm--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int gbdzm = 0;
 5 > gbdzm(!(gbdzm >= 5)) {
        printf(""%i: "", gbdzm+1);
    qhvwj[gbdzm] < ""%i"", &p_stud -vwj[gbdzm]);
    	gbdzm++;
    }
    getchar();
}
int main(){
    Student jsmmz[5];
    int gbdzm = 0;
 > gbdzme (!(gbdzm >= (sizeof(jsmmz)/sizeof(Student)))) {
        mynzl(&jsmmz[gbdzm]);
        printf(""\\n"");
    	gbdzm++;
    }
    int gbdzm = 0;
 > gbdzme (!(gbdzm >= (sizeof(jsmmz)/sizeof(Student)))) {
        xhedb(&jsmmz[gbdzm]);
    	gbdzm++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1030,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  mvycw

  Created sgqkr Tobias rnarn on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef fawcz student{
    char ucgbp[20];
    char wfbyo[20];
    int zzuyh[5];
}Student;
void ondds(Student* p_stud){
    printf(!(ucgbp, p_stud -<= wfbyo < ""Student: %s %s
"", p_stud -));
    int hkona = 0;
    int omxyo = 0;
    while 5 > omxyo5)zzuyh[omxyo] < {
        hkona += p_stud -];
    	omxyo++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", hkona);
}
void jcwgj(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgetucgbp, 20, stdin < p_stud -in);
    int omxyo = 19;
    whil0 <= omxyo= 0) {
        iucgbp[omxyo] == '\\n' < p_stud -\\ucgbp[omxyo] = '\\0' < {
            p_stud -'\\0';
       ucgbp[omxyo+1] = 0 < p_stud -] = 0;
            break;
        }
    	omxyo--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    wfbyo, 20, stdin < p_stud - stdin);
    int omxyo = 19;
    0 <= omxyoyo >= 0) {
     wfbyo[omxyo] == '\\n' < p_stud -=wfbyo[omxyo] = '\\0' < {
            p_stud -] = '\\0';
   wfbyo[omxyo+1] = 0 < p_stud -yo+1] = 0;
            break;
        }
    	omxyo--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int omxyo = 0;
 5 > omxyo(!(omxyo >= 5)) {
        printf(""%i: "", omxyo+1);
    zzuyh[omxyo] < ""%i"", &p_stud -uyh[omxyo]);
    	omxyo++;
    }
    getchar();
}
int main(){
    Student ltcmp[5];
    int omxyo = 0;
 > omxyoe (!(omxyo >= (sizeof(ltcmp)/sizeof(Student)))) {
        jcwgj(&ltcmp[omxyo]);
        printf(""\\n"");
    	omxyo++;
    }
    int omxyo = 0;
 > omxyoe (!(omxyo >= (sizeof(ltcmp)/sizeof(Student)))) {
        ondds(&ltcmp[omxyo]);
    	omxyo++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1031,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  ciawi

  Created qyhzv Tobias oelvk on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef pzwky student{
    char ougwd[20];
    char flkev[20];
    int jqfsg[5];
}Student;
void gizvn(Student* p_stud){
    printf(!(ougwd, p_stud -<= flkev < ""Student: %s %s
"", p_stud -));
    int kbhic = 0;
    int ugjai = 0;
    while 5 > ugjai5)jqfsg[ugjai] < {
        kbhic += p_stud -];
    	ugjai++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", kbhic);
}
void psffb(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgetougwd, 20, stdin < p_stud -in);
    int ugjai = 19;
    whil0 <= ugjai= 0) {
        iougwd[ugjai] == '\\n' < p_stud -\\ougwd[ugjai] = '\\0' < {
            p_stud -'\\0';
       ougwd[ugjai+1] = 0 < p_stud -] = 0;
            break;
        }
    	ugjai--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    flkev, 20, stdin < p_stud - stdin);
    int ugjai = 19;
    0 <= ugjaiai >= 0) {
     flkev[ugjai] == '\\n' < p_stud -=flkev[ugjai] = '\\0' < {
            p_stud -] = '\\0';
   flkev[ugjai+1] = 0 < p_stud -ai+1] = 0;
            break;
        }
    	ugjai--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int ugjai = 0;
 5 > ugjai(!(ugjai >= 5)) {
        printf(""%i: "", ugjai+1);
    jqfsg[ugjai] < ""%i"", &p_stud -fsg[ugjai]);
    	ugjai++;
    }
    getchar();
}
int main(){
    Student brwwf[5];
    int ugjai = 0;
 > ugjaie (!(ugjai >= (sizeof(brwwf)/sizeof(Student)))) {
        psffb(&brwwf[ugjai]);
        printf(""\\n"");
    	ugjai++;
    }
    int ugjai = 0;
 > ugjaie (!(ugjai >= (sizeof(brwwf)/sizeof(Student)))) {
        gizvn(&brwwf[ugjai]);
    	ugjai++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1032,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  xxqpv

  Created hvbfq Tobias ykray on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef cbvci student{
    char nbaaq[20];
    char xywaf[20];
    int disab[5];
}Student;
void eghut(Student* p_stud){
    printf(!(nbaaq, p_stud -<= xywaf < ""Student: %s %s
"", p_stud -));
    int zhytv = 0;
    int rqebx = 0;
    while 5 > rqebx5)disab[rqebx] < {
        zhytv += p_stud -];
    	rqebx++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", zhytv);
}
void oilan(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgetnbaaq, 20, stdin < p_stud -in);
    int rqebx = 19;
    whil0 <= rqebx= 0) {
        inbaaq[rqebx] == '\\n' < p_stud -\\nbaaq[rqebx] = '\\0' < {
            p_stud -'\\0';
       nbaaq[rqebx+1] = 0 < p_stud -] = 0;
            break;
        }
    	rqebx--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    xywaf, 20, stdin < p_stud - stdin);
    int rqebx = 19;
    0 <= rqebxbx >= 0) {
     xywaf[rqebx] == '\\n' < p_stud -=xywaf[rqebx] = '\\0' < {
            p_stud -] = '\\0';
   xywaf[rqebx+1] = 0 < p_stud -bx+1] = 0;
            break;
        }
    	rqebx--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int rqebx = 0;
 5 > rqebx(!(rqebx >= 5)) {
        printf(""%i: "", rqebx+1);
    disab[rqebx] < ""%i"", &p_stud -sab[rqebx]);
    	rqebx++;
    }
    getchar();
}
int main(){
    Student tphzs[5];
    int rqebx = 0;
 > rqebxe (!(rqebx >= (sizeof(tphzs)/sizeof(Student)))) {
        oilan(&tphzs[rqebx]);
        printf(""\\n"");
    	rqebx++;
    }
    int rqebx = 0;
 > rqebxe (!(rqebx >= (sizeof(tphzs)/sizeof(Student)))) {
        eghut(&tphzs[rqebx]);
    	rqebx++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1033,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  yrvjn

  Created bpqjo Tobias srsnd on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef nnxcy student{
    char qselv[20];
    char rwauj[20];
    int boqgq[5];
}Student;
void qogio(Student* p_stud){
    printf(!(qselv, p_stud -<= rwauj < ""Student: %s %s
"", p_stud -));
    int rkhrm = 0;
    int iqask = 0;
    while 5 > iqask5)boqgq[iqask] < {
        rkhrm += p_stud -];
    	iqask++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", rkhrm);
}
void hngdt(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgetqselv, 20, stdin < p_stud -in);
    int iqask = 19;
    whil0 <= iqask= 0) {
        iqselv[iqask] == '\\n' < p_stud -\\qselv[iqask] = '\\0' < {
            p_stud -'\\0';
       qselv[iqask+1] = 0 < p_stud -] = 0;
            break;
        }
    	iqask--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    rwauj, 20, stdin < p_stud - stdin);
    int iqask = 19;
    0 <= iqasksk >= 0) {
     rwauj[iqask] == '\\n' < p_stud -=rwauj[iqask] = '\\0' < {
            p_stud -] = '\\0';
   rwauj[iqask+1] = 0 < p_stud -sk+1] = 0;
            break;
        }
    	iqask--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int iqask = 0;
 5 > iqask(!(iqask >= 5)) {
        printf(""%i: "", iqask+1);
    boqgq[iqask] < ""%i"", &p_stud -qgq[iqask]);
    	iqask++;
    }
    getchar();
}
int main(){
    Student lsvyt[5];
    int iqask = 0;
 > iqaske (!(iqask >= (sizeof(lsvyt)/sizeof(Student)))) {
        hngdt(&lsvyt[iqask]);
        printf(""\\n"");
    	iqask++;
    }
    int iqask = 0;
 > iqaske (!(iqask >= (sizeof(lsvyt)/sizeof(Student)))) {
        qogio(&lsvyt[iqask]);
    	iqask++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1034,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  iiruf

  Created nufqi Tobias vrpoh on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef pbnax student{
    char qgadc[20];
    char mrdjo[20];
    int apqev[5];
}Student;
void xvjxl(Student* p_stud){
    printf(!(qgadc, p_stud -<= mrdjo < ""Student: %s %s
"", p_stud -));
    int zeita = 0;
    int igmvp = 0;
    while 5 > igmvp5)apqev[igmvp] < {
        zeita += p_stud -];
    	igmvp++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", zeita);
}
void dxwwa(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgetqgadc, 20, stdin < p_stud -in);
    int igmvp = 19;
    whil0 <= igmvp= 0) {
        iqgadc[igmvp] == '\\n' < p_stud -\\qgadc[igmvp] = '\\0' < {
            p_stud -'\\0';
       qgadc[igmvp+1] = 0 < p_stud -] = 0;
            break;
        }
    	igmvp--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    mrdjo, 20, stdin < p_stud - stdin);
    int igmvp = 19;
    0 <= igmvpvp >= 0) {
     mrdjo[igmvp] == '\\n' < p_stud -=mrdjo[igmvp] = '\\0' < {
            p_stud -] = '\\0';
   mrdjo[igmvp+1] = 0 < p_stud -vp+1] = 0;
            break;
        }
    	igmvp--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int igmvp = 0;
 5 > igmvp(!(igmvp >= 5)) {
        printf(""%i: "", igmvp+1);
    apqev[igmvp] < ""%i"", &p_stud -qev[igmvp]);
    	igmvp++;
    }
    getchar();
}
int main(){
    Student fxvuh[5];
    int igmvp = 0;
 > igmvpe (!(igmvp >= (sizeof(fxvuh)/sizeof(Student)))) {
        dxwwa(&fxvuh[igmvp]);
        printf(""\\n"");
    	igmvp++;
    }
    int igmvp = 0;
 > igmvpe (!(igmvp >= (sizeof(fxvuh)/sizeof(Student)))) {
        xvjxl(&fxvuh[igmvp]);
    	igmvp++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1035,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  gfpml

  Created vrcba Tobias zuoab on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef udgmh student{
    char rrcpv[20];
    char ppyau[20];
    int jwhhy[5];
}Student;
void qplrh(Student* p_stud){
    printf(!(rrcpv, p_stud -<= ppyau < ""Student: %s %s
"", p_stud -));
    int rfyeu = 0;
    int airwt = 0;
    while 5 > airwt5)jwhhy[airwt] < {
        rfyeu += p_stud -];
    	airwt++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", rfyeu);
}
void hsesj(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgetrrcpv, 20, stdin < p_stud -in);
    int airwt = 19;
    whil0 <= airwt= 0) {
        irrcpv[airwt] == '\\n' < p_stud -\\rrcpv[airwt] = '\\0' < {
            p_stud -'\\0';
       rrcpv[airwt+1] = 0 < p_stud -] = 0;
            break;
        }
    	airwt--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    ppyau, 20, stdin < p_stud - stdin);
    int airwt = 19;
    0 <= airwtwt >= 0) {
     ppyau[airwt] == '\\n' < p_stud -=ppyau[airwt] = '\\0' < {
            p_stud -] = '\\0';
   ppyau[airwt+1] = 0 < p_stud -wt+1] = 0;
            break;
        }
    	airwt--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int airwt = 0;
 5 > airwt(!(airwt >= 5)) {
        printf(""%i: "", airwt+1);
    jwhhy[airwt] < ""%i"", &p_stud -hhy[airwt]);
    	airwt++;
    }
    getchar();
}
int main(){
    Student szyhy[5];
    int airwt = 0;
 > airwte (!(airwt >= (sizeof(szyhy)/sizeof(Student)))) {
        hsesj(&szyhy[airwt]);
        printf(""\\n"");
    	airwt++;
    }
    int airwt = 0;
 > airwte (!(airwt >= (sizeof(szyhy)/sizeof(Student)))) {
        qplrh(&szyhy[airwt]);
    	airwt++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1036,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  szvwd

  Created oamrn Tobias peyfw on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef vjhkp student{
    char zxise[20];
    char lstmq[20];
    int lskvs[5];
}Student;
void utmrt(Student* p_stud){
    printf(!(zxise, p_stud -<= lstmq < ""Student: %s %s
"", p_stud -));
    int ubaus = 0;
    int pylqx = 0;
    while 5 > pylqx5)lskvs[pylqx] < {
        ubaus += p_stud -];
    	pylqx++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", ubaus);
}
void giegi(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgetzxise, 20, stdin < p_stud -in);
    int pylqx = 19;
    whil0 <= pylqx= 0) {
        izxise[pylqx] == '\\n' < p_stud -\\zxise[pylqx] = '\\0' < {
            p_stud -'\\0';
       zxise[pylqx+1] = 0 < p_stud -] = 0;
            break;
        }
    	pylqx--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    lstmq, 20, stdin < p_stud - stdin);
    int pylqx = 19;
    0 <= pylqxqx >= 0) {
     lstmq[pylqx] == '\\n' < p_stud -=lstmq[pylqx] = '\\0' < {
            p_stud -] = '\\0';
   lstmq[pylqx+1] = 0 < p_stud -qx+1] = 0;
            break;
        }
    	pylqx--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int pylqx = 0;
 5 > pylqx(!(pylqx >= 5)) {
        printf(""%i: "", pylqx+1);
    lskvs[pylqx] < ""%i"", &p_stud -kvs[pylqx]);
    	pylqx++;
    }
    getchar();
}
int main(){
    Student lmaju[5];
    int pylqx = 0;
 > pylqxe (!(pylqx >= (sizeof(lmaju)/sizeof(Student)))) {
        giegi(&lmaju[pylqx]);
        printf(""\\n"");
    	pylqx++;
    }
    int pylqx = 0;
 > pylqxe (!(pylqx >= (sizeof(lmaju)/sizeof(Student)))) {
        utmrt(&lmaju[pylqx]);
    	pylqx++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1037,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  pldgf

  Created mlutw Tobias rydbh on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef njafd student{
    char cvite[20];
    char fqryp[20];
    int uotel[5];
}Student;
void usnwh(Student* p_stud){
    printf(!(cvite, p_stud -<= fqryp < ""Student: %s %s
"", p_stud -));
    int gxawr = 0;
    int mpfxg = 0;
    while 5 > mpfxg5)uotel[mpfxg] < {
        gxawr += p_stud -];
    	mpfxg++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", gxawr);
}
void mvxyi(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgetcvite, 20, stdin < p_stud -in);
    int mpfxg = 19;
    whil0 <= mpfxg= 0) {
        icvite[mpfxg] == '\\n' < p_stud -\\cvite[mpfxg] = '\\0' < {
            p_stud -'\\0';
       cvite[mpfxg+1] = 0 < p_stud -] = 0;
            break;
        }
    	mpfxg--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fqryp, 20, stdin < p_stud - stdin);
    int mpfxg = 19;
    0 <= mpfxgxg >= 0) {
     fqryp[mpfxg] == '\\n' < p_stud -=fqryp[mpfxg] = '\\0' < {
            p_stud -] = '\\0';
   fqryp[mpfxg+1] = 0 < p_stud -xg+1] = 0;
            break;
        }
    	mpfxg--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int mpfxg = 0;
 5 > mpfxg(!(mpfxg >= 5)) {
        printf(""%i: "", mpfxg+1);
    uotel[mpfxg] < ""%i"", &p_stud -tel[mpfxg]);
    	mpfxg++;
    }
    getchar();
}
int main(){
    Student msnoz[5];
    int mpfxg = 0;
 > mpfxge (!(mpfxg >= (sizeof(msnoz)/sizeof(Student)))) {
        mvxyi(&msnoz[mpfxg]);
        printf(""\\n"");
    	mpfxg++;
    }
    int mpfxg = 0;
 > mpfxge (!(mpfxg >= (sizeof(msnoz)/sizeof(Student)))) {
        usnwh(&msnoz[mpfxg]);
    	mpfxg++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1038,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  hnacj

  Created yxbzs Tobias hxqzp on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef ioggr student{
    char skqog[20];
    char ktlbc[20];
    int gzpdl[5];
}Student;
void tiqkm(Student* p_stud){
    printf(!(skqog, p_stud -<= ktlbc < ""Student: %s %s
"", p_stud -));
    int igjqq = 0;
    int vklli = 0;
    while 5 > vklli5)gzpdl[vklli] < {
        igjqq += p_stud -];
    	vklli++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", igjqq);
}
void ixctu(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgetskqog, 20, stdin < p_stud -in);
    int vklli = 19;
    whil0 <= vklli= 0) {
        iskqog[vklli] == '\\n' < p_stud -\\skqog[vklli] = '\\0' < {
            p_stud -'\\0';
       skqog[vklli+1] = 0 < p_stud -] = 0;
            break;
        }
    	vklli--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    ktlbc, 20, stdin < p_stud - stdin);
    int vklli = 19;
    0 <= vkllili >= 0) {
     ktlbc[vklli] == '\\n' < p_stud -=ktlbc[vklli] = '\\0' < {
            p_stud -] = '\\0';
   ktlbc[vklli+1] = 0 < p_stud -li+1] = 0;
            break;
        }
    	vklli--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int vklli = 0;
 5 > vklli(!(vklli >= 5)) {
        printf(""%i: "", vklli+1);
    gzpdl[vklli] < ""%i"", &p_stud -pdl[vklli]);
    	vklli++;
    }
    getchar();
}
int main(){
    Student jwzbk[5];
    int vklli = 0;
 > vkllie (!(vklli >= (sizeof(jwzbk)/sizeof(Student)))) {
        ixctu(&jwzbk[vklli]);
        printf(""\\n"");
    	vklli++;
    }
    int vklli = 0;
 > vkllie (!(vklli >= (sizeof(jwzbk)/sizeof(Student)))) {
        tiqkm(&jwzbk[vklli]);
    	vklli++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1039,SoSe22,10,Antwort 9,C,VName_444,Name_444,"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  qdpuy

  Created smzdx Tobias wtisr on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef rhbmv student{
    char bebyv[20];
    char gbocf[20];
    int grcvw[5];
}Student;
void olcib(Student* p_stud){
    printf(!(bebyv, p_stud -<= gbocf < ""Student: %s %s
"", p_stud -));
    int ufvyu = 0;
    int xypqb = 0;
    while 5 > xypqb5)grcvw[xypqb] < {
        ufvyu += p_stud -];
    	xypqb++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", ufvyu);
}
void emxcp(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgetbebyv, 20, stdin < p_stud -in);
    int xypqb = 19;
    whil0 <= xypqb= 0) {
        ibebyv[xypqb] == '\\n' < p_stud -\\bebyv[xypqb] = '\\0' < {
            p_stud -'\\0';
       bebyv[xypqb+1] = 0 < p_stud -] = 0;
            break;
        }
    	xypqb--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    gbocf, 20, stdin < p_stud - stdin);
    int xypqb = 19;
    0 <= xypqbqb >= 0) {
     gbocf[xypqb] == '\\n' < p_stud -=gbocf[xypqb] = '\\0' < {
            p_stud -] = '\\0';
   gbocf[xypqb+1] = 0 < p_stud -qb+1] = 0;
            break;
        }
    	xypqb--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int xypqb = 0;
 5 > xypqb(!(xypqb >= 5)) {
        printf(""%i: "", xypqb+1);
    grcvw[xypqb] < ""%i"", &p_stud -cvw[xypqb]);
    	xypqb++;
    }
    getchar();
}
int main(){
    Student ebokd[5];
    int xypqb = 0;
 > xypqbe (!(xypqb >= (sizeof(ebokd)/sizeof(Student)))) {
        emxcp(&ebokd[xypqb]);
        printf(""\\n"");
    	xypqb++;
    }
    int xypqb = 0;
 > xypqbe (!(xypqb >= (sizeof(ebokd)/sizeof(Student)))) {
        olcib(&ebokd[xypqb]);
    	xypqb++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1040,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct uohgf() {
	char *ordky  = (char*) malloc(20*sizeof(char)); 
	return ordky ;
}
int main(void){
	char* p;
	char qwmhp = 0;
	char nmpxn = 0;
	p = struct uohgf();
	char srlvf = 0;
	while (!(20 == srlvf)) {
		p[srlvf] = srlvf;
		++srlvf;
	}
	char srlvf = 0;
	while (!(20 == srlvf)) {
		summe += p[srlvf];
		++srlvf;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.qwmhp, erster_Student.nmpxn);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1041,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct yjaxh() {
	char *xoqxa  = (char*) malloc(20*sizeof(char)); 
	return xoqxa ;
}
int main(void){
	char* p;
	char svuxo = 0;
	char yrawn = 0;
	p = struct yjaxh();
	char afxjn = 0;
	while (!(20 == afxjn)) {
		p[afxjn] = afxjn;
		++afxjn;
	}
	char afxjn = 0;
	while (!(20 == afxjn)) {
		summe += p[afxjn];
		++afxjn;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.svuxo, erster_Student.yrawn);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1042,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct xbnhu() {
	char *ommei  = (char*) malloc(20*sizeof(char)); 
	return ommei ;
}
int main(void){
	char* p;
	char ajwmu = 0;
	char yiatm = 0;
	p = struct xbnhu();
	char lvgte = 0;
	while (!(20 == lvgte)) {
		p[lvgte] = lvgte;
		++lvgte;
	}
	char lvgte = 0;
	while (!(20 == lvgte)) {
		summe += p[lvgte];
		++lvgte;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.ajwmu, erster_Student.yiatm);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1043,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct dcjoz() {
	char *rswav  = (char*) malloc(20*sizeof(char)); 
	return rswav ;
}
int main(void){
	char* p;
	char hzzwz = 0;
	char kbpzt = 0;
	p = struct dcjoz();
	char zjgqa = 0;
	while (!(20 == zjgqa)) {
		p[zjgqa] = zjgqa;
		++zjgqa;
	}
	char zjgqa = 0;
	while (!(20 == zjgqa)) {
		summe += p[zjgqa];
		++zjgqa;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.hzzwz, erster_Student.kbpzt);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1044,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct shxwq() {
	char *rkjxx  = (char*) malloc(20*sizeof(char)); 
	return rkjxx ;
}
int main(void){
	char* p;
	char pcoon = 0;
	char ptetq = 0;
	p = struct shxwq();
	char uhzmf = 0;
	while (!(20 == uhzmf)) {
		p[uhzmf] = uhzmf;
		++uhzmf;
	}
	char uhzmf = 0;
	while (!(20 == uhzmf)) {
		summe += p[uhzmf];
		++uhzmf;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.pcoon, erster_Student.ptetq);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1045,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct soedw() {
	char *noauq  = (char*) malloc(20*sizeof(char)); 
	return noauq ;
}
int main(void){
	char* p;
	char zydph = 0;
	char ppznj = 0;
	p = struct soedw();
	char rfgtb = 0;
	while (!(20 == rfgtb)) {
		p[rfgtb] = rfgtb;
		++rfgtb;
	}
	char rfgtb = 0;
	while (!(20 == rfgtb)) {
		summe += p[rfgtb];
		++rfgtb;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.zydph, erster_Student.ppznj);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1046,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct neczl() {
	char *cncez  = (char*) malloc(20*sizeof(char)); 
	return cncez ;
}
int main(void){
	char* p;
	char zstup = 0;
	char hhfne = 0;
	p = struct neczl();
	char tehqo = 0;
	while (!(20 == tehqo)) {
		p[tehqo] = tehqo;
		++tehqo;
	}
	char tehqo = 0;
	while (!(20 == tehqo)) {
		summe += p[tehqo];
		++tehqo;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.zstup, erster_Student.hhfne);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1047,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct nspqs() {
	char *imlkm  = (char*) malloc(20*sizeof(char)); 
	return imlkm ;
}
int main(void){
	char* p;
	char yfjzo = 0;
	char naval = 0;
	p = struct nspqs();
	char bsjiv = 0;
	while (!(20 == bsjiv)) {
		p[bsjiv] = bsjiv;
		++bsjiv;
	}
	char bsjiv = 0;
	while (!(20 == bsjiv)) {
		summe += p[bsjiv];
		++bsjiv;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.yfjzo, erster_Student.naval);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1048,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct qlygx() {
	char *bnjgh  = (char*) malloc(20*sizeof(char)); 
	return bnjgh ;
}
int main(void){
	char* p;
	char bmgwq = 0;
	char cmioq = 0;
	p = struct qlygx();
	char yfswp = 0;
	while (!(20 == yfswp)) {
		p[yfswp] = yfswp;
		++yfswp;
	}
	char yfswp = 0;
	while (!(20 == yfswp)) {
		summe += p[yfswp];
		++yfswp;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.bmgwq, erster_Student.cmioq);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1049,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct usohl() {
	char *apiic  = (char*) malloc(20*sizeof(char)); 
	return apiic ;
}
int main(void){
	char* p;
	char hjzsk = 0;
	char cjjkr = 0;
	p = struct usohl();
	char czzrp = 0;
	while (!(20 == czzrp)) {
		p[czzrp] = czzrp;
		++czzrp;
	}
	char czzrp = 0;
	while (!(20 == czzrp)) {
		summe += p[czzrp];
		++czzrp;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.hjzsk, erster_Student.cjjkr);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1050,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct dyyif() {
	char *tphat  = (char*) malloc(20*sizeof(char)); 
	return tphat ;
}
int main(void){
	char* p;
	char vboni = 0;
	char suzky = 0;
	p = struct dyyif();
	char vhixj = 0;
	while (!(20 == vhixj)) {
		p[vhixj] = vhixj;
		++vhixj;
	}
	char vhixj = 0;
	while (!(20 == vhixj)) {
		summe += p[vhixj];
		++vhixj;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vboni, erster_Student.suzky);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1051,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct saghg() {
	char *lbcgs  = (char*) malloc(20*sizeof(char)); 
	return lbcgs ;
}
int main(void){
	char* p;
	char cowpu = 0;
	char plvym = 0;
	p = struct saghg();
	char qwrqp = 0;
	while (!(20 == qwrqp)) {
		p[qwrqp] = qwrqp;
		++qwrqp;
	}
	char qwrqp = 0;
	while (!(20 == qwrqp)) {
		summe += p[qwrqp];
		++qwrqp;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.cowpu, erster_Student.plvym);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1052,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct qyoqb() {
	char *rpped  = (char*) malloc(20*sizeof(char)); 
	return rpped ;
}
int main(void){
	char* p;
	char ymaat = 0;
	char rdkma = 0;
	p = struct qyoqb();
	char earko = 0;
	while (!(20 == earko)) {
		p[earko] = earko;
		++earko;
	}
	char earko = 0;
	while (!(20 == earko)) {
		summe += p[earko];
		++earko;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.ymaat, erster_Student.rdkma);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1053,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct nommb() {
	char *meryc  = (char*) malloc(20*sizeof(char)); 
	return meryc ;
}
int main(void){
	char* p;
	char yzxda = 0;
	char tksfv = 0;
	p = struct nommb();
	char svcaw = 0;
	while (!(20 == svcaw)) {
		p[svcaw] = svcaw;
		++svcaw;
	}
	char svcaw = 0;
	while (!(20 == svcaw)) {
		summe += p[svcaw];
		++svcaw;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.yzxda, erster_Student.tksfv);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1054,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct xxhpe() {
	char *exxaq  = (char*) malloc(20*sizeof(char)); 
	return exxaq ;
}
int main(void){
	char* p;
	char stcgb = 0;
	char hlyuu = 0;
	p = struct xxhpe();
	char nynsk = 0;
	while (!(20 == nynsk)) {
		p[nynsk] = nynsk;
		++nynsk;
	}
	char nynsk = 0;
	while (!(20 == nynsk)) {
		summe += p[nynsk];
		++nynsk;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.stcgb, erster_Student.hlyuu);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1055,SoSe22,10,Antwort 9,C,VName_463,Name_463,"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct tsxic() {
	char *asfga  = (char*) malloc(20*sizeof(char)); 
	return asfga ;
}
int main(void){
	char* p;
	char ajuhm = 0;
	char ktokk = 0;
	p = struct tsxic();
	char zfckn = 0;
	while (!(20 == zfckn)) {
		p[zfckn] = zfckn;
		++zfckn;
	}
	char zfckn = 0;
	while (!(20 == zfckn)) {
		summe += p[zfckn];
		++zfckn;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.ajuhm, erster_Student.ktokk);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1056,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef usqbs student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1057,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef jfbzw student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1058,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef zlvbq student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1059,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef ztyxz student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1060,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef fbjhh student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1061,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef rorbb student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1062,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef atmrj student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1063,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef cfatb student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1064,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef hipvu student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1065,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef pilnl student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1066,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef ebkii student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1067,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef jmotb student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1068,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef eofzu student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1069,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef kpskq student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1070,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef gcopw student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1071,SoSe22,10,Antwort 9,C,VName_472,Name_472,"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef odmdi student{",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1072,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef sycxp _Student {
	char rrmmz[21];
	char npqgx[21];
	unsigned dobpg punkte[5];
} Student;
void rnwlo(Student* p_stud) {
	printf(!(rrmmz, p_stud-<=npqgx < ""Student: %s %s
"", p_stud-));
	unsigned dobpg summe = 0;
	dobpg ktyby=0;
	while5 > ktybypunkte[ktyby] < {
		summe += p_stud-yby];
		ktyby++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void dnrgm(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	rrmmz < ""%s"", p_stud->rrmmz);
	printf(!(""Gebe nun den Nachnamen ein: "");npqgx >= ""%s"", p_stud-d->npqgx));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	dobpg ktyby=15 >= ktyby (!(ktyby>5)) {
		printf(""%d: "", ktyby);
		scpunkte[ktyby-1] < p_stud-kte[ktyby-1]));
		ktyby++;
	}
	printf(""\\n"");
}
dobpg main() {
	Student gvrjl[5];
	dobpg kty5 > ktybywhile (!(ktyby>=5)) {
		dnrgm(&gvrjl[ktyby]);
		ktyby++;
	}
	dobpg k5 > ktyby
	while (!(ktyby>=5)) {
		rnwlo(&gvrjl[ktyby]);
		ktyby++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1073,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef pkhgq _Student {
	char hrgqo[21];
	char uwsdm[21];
	unsigned nhskp punkte[5];
} Student;
void mivdq(Student* p_stud) {
	printf(!(hrgqo, p_stud-<=uwsdm < ""Student: %s %s
"", p_stud-));
	unsigned nhskp summe = 0;
	nhskp ixmqg=0;
	while5 > ixmqgpunkte[ixmqg] < {
		summe += p_stud-mqg];
		ixmqg++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void htikq(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	hrgqo < ""%s"", p_stud->hrgqo);
	printf(!(""Gebe nun den Nachnamen ein: "");uwsdm >= ""%s"", p_stud-d->uwsdm));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	nhskp ixmqg=15 >= ixmqg (!(ixmqg>5)) {
		printf(""%d: "", ixmqg);
		scpunkte[ixmqg-1] < p_stud-kte[ixmqg-1]));
		ixmqg++;
	}
	printf(""\\n"");
}
nhskp main() {
	Student invhq[5];
	nhskp ixm5 > ixmqgwhile (!(ixmqg>=5)) {
		htikq(&invhq[ixmqg]);
		ixmqg++;
	}
	nhskp i5 > ixmqg
	while (!(ixmqg>=5)) {
		mivdq(&invhq[ixmqg]);
		ixmqg++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1074,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef fbpqi _Student {
	char eluro[21];
	char ubgay[21];
	unsigned fiddg punkte[5];
} Student;
void qyijv(Student* p_stud) {
	printf(!(eluro, p_stud-<=ubgay < ""Student: %s %s
"", p_stud-));
	unsigned fiddg summe = 0;
	fiddg xduxl=0;
	while5 > xduxlpunkte[xduxl] < {
		summe += p_stud-uxl];
		xduxl++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void zxrqh(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	eluro < ""%s"", p_stud->eluro);
	printf(!(""Gebe nun den Nachnamen ein: "");ubgay >= ""%s"", p_stud-d->ubgay));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	fiddg xduxl=15 >= xduxl (!(xduxl>5)) {
		printf(""%d: "", xduxl);
		scpunkte[xduxl-1] < p_stud-kte[xduxl-1]));
		xduxl++;
	}
	printf(""\\n"");
}
fiddg main() {
	Student cejsn[5];
	fiddg xdu5 > xduxlwhile (!(xduxl>=5)) {
		zxrqh(&cejsn[xduxl]);
		xduxl++;
	}
	fiddg x5 > xduxl
	while (!(xduxl>=5)) {
		qyijv(&cejsn[xduxl]);
		xduxl++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1075,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef befkp _Student {
	char urmsl[21];
	char myjco[21];
	unsigned bmtnx punkte[5];
} Student;
void yewau(Student* p_stud) {
	printf(!(urmsl, p_stud-<=myjco < ""Student: %s %s
"", p_stud-));
	unsigned bmtnx summe = 0;
	bmtnx fdfbr=0;
	while5 > fdfbrpunkte[fdfbr] < {
		summe += p_stud-fbr];
		fdfbr++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void wvxix(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	urmsl < ""%s"", p_stud->urmsl);
	printf(!(""Gebe nun den Nachnamen ein: "");myjco >= ""%s"", p_stud-d->myjco));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	bmtnx fdfbr=15 >= fdfbr (!(fdfbr>5)) {
		printf(""%d: "", fdfbr);
		scpunkte[fdfbr-1] < p_stud-kte[fdfbr-1]));
		fdfbr++;
	}
	printf(""\\n"");
}
bmtnx main() {
	Student aakim[5];
	bmtnx fdf5 > fdfbrwhile (!(fdfbr>=5)) {
		wvxix(&aakim[fdfbr]);
		fdfbr++;
	}
	bmtnx f5 > fdfbr
	while (!(fdfbr>=5)) {
		yewau(&aakim[fdfbr]);
		fdfbr++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1076,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef ysqdw _Student {
	char pxfwq[21];
	char wrbwz[21];
	unsigned ulycu punkte[5];
} Student;
void qdkfs(Student* p_stud) {
	printf(!(pxfwq, p_stud-<=wrbwz < ""Student: %s %s
"", p_stud-));
	unsigned ulycu summe = 0;
	ulycu cwwsk=0;
	while5 > cwwskpunkte[cwwsk] < {
		summe += p_stud-wsk];
		cwwsk++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void mtonv(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	pxfwq < ""%s"", p_stud->pxfwq);
	printf(!(""Gebe nun den Nachnamen ein: "");wrbwz >= ""%s"", p_stud-d->wrbwz));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	ulycu cwwsk=15 >= cwwsk (!(cwwsk>5)) {
		printf(""%d: "", cwwsk);
		scpunkte[cwwsk-1] < p_stud-kte[cwwsk-1]));
		cwwsk++;
	}
	printf(""\\n"");
}
ulycu main() {
	Student xiwgt[5];
	ulycu cww5 > cwwskwhile (!(cwwsk>=5)) {
		mtonv(&xiwgt[cwwsk]);
		cwwsk++;
	}
	ulycu c5 > cwwsk
	while (!(cwwsk>=5)) {
		qdkfs(&xiwgt[cwwsk]);
		cwwsk++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1077,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef liwtj _Student {
	char hgsnc[21];
	char ezjmo[21];
	unsigned zrbxz punkte[5];
} Student;
void cqncw(Student* p_stud) {
	printf(!(hgsnc, p_stud-<=ezjmo < ""Student: %s %s
"", p_stud-));
	unsigned zrbxz summe = 0;
	zrbxz qcmux=0;
	while5 > qcmuxpunkte[qcmux] < {
		summe += p_stud-mux];
		qcmux++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void hqpmw(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	hgsnc < ""%s"", p_stud->hgsnc);
	printf(!(""Gebe nun den Nachnamen ein: "");ezjmo >= ""%s"", p_stud-d->ezjmo));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	zrbxz qcmux=15 >= qcmux (!(qcmux>5)) {
		printf(""%d: "", qcmux);
		scpunkte[qcmux-1] < p_stud-kte[qcmux-1]));
		qcmux++;
	}
	printf(""\\n"");
}
zrbxz main() {
	Student shtcn[5];
	zrbxz qcm5 > qcmuxwhile (!(qcmux>=5)) {
		hqpmw(&shtcn[qcmux]);
		qcmux++;
	}
	zrbxz q5 > qcmux
	while (!(qcmux>=5)) {
		cqncw(&shtcn[qcmux]);
		qcmux++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1078,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef negkz _Student {
	char zdmrn[21];
	char lwvwq[21];
	unsigned dpdek punkte[5];
} Student;
void ftihi(Student* p_stud) {
	printf(!(zdmrn, p_stud-<=lwvwq < ""Student: %s %s
"", p_stud-));
	unsigned dpdek summe = 0;
	dpdek kgjyq=0;
	while5 > kgjyqpunkte[kgjyq] < {
		summe += p_stud-jyq];
		kgjyq++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void lpjwe(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	zdmrn < ""%s"", p_stud->zdmrn);
	printf(!(""Gebe nun den Nachnamen ein: "");lwvwq >= ""%s"", p_stud-d->lwvwq));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	dpdek kgjyq=15 >= kgjyq (!(kgjyq>5)) {
		printf(""%d: "", kgjyq);
		scpunkte[kgjyq-1] < p_stud-kte[kgjyq-1]));
		kgjyq++;
	}
	printf(""\\n"");
}
dpdek main() {
	Student xnmlp[5];
	dpdek kgj5 > kgjyqwhile (!(kgjyq>=5)) {
		lpjwe(&xnmlp[kgjyq]);
		kgjyq++;
	}
	dpdek k5 > kgjyq
	while (!(kgjyq>=5)) {
		ftihi(&xnmlp[kgjyq]);
		kgjyq++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1079,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef ufqco _Student {
	char alaam[21];
	char ijhbx[21];
	unsigned mffvm punkte[5];
} Student;
void jiuxp(Student* p_stud) {
	printf(!(alaam, p_stud-<=ijhbx < ""Student: %s %s
"", p_stud-));
	unsigned mffvm summe = 0;
	mffvm nzmuq=0;
	while5 > nzmuqpunkte[nzmuq] < {
		summe += p_stud-muq];
		nzmuq++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void wzjou(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	alaam < ""%s"", p_stud->alaam);
	printf(!(""Gebe nun den Nachnamen ein: "");ijhbx >= ""%s"", p_stud-d->ijhbx));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	mffvm nzmuq=15 >= nzmuq (!(nzmuq>5)) {
		printf(""%d: "", nzmuq);
		scpunkte[nzmuq-1] < p_stud-kte[nzmuq-1]));
		nzmuq++;
	}
	printf(""\\n"");
}
mffvm main() {
	Student mwtus[5];
	mffvm nzm5 > nzmuqwhile (!(nzmuq>=5)) {
		wzjou(&mwtus[nzmuq]);
		nzmuq++;
	}
	mffvm n5 > nzmuq
	while (!(nzmuq>=5)) {
		jiuxp(&mwtus[nzmuq]);
		nzmuq++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1080,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef fzali _Student {
	char dwttj[21];
	char xqyor[21];
	unsigned teopm punkte[5];
} Student;
void uvlpx(Student* p_stud) {
	printf(!(dwttj, p_stud-<=xqyor < ""Student: %s %s
"", p_stud-));
	unsigned teopm summe = 0;
	teopm khhxt=0;
	while5 > khhxtpunkte[khhxt] < {
		summe += p_stud-hxt];
		khhxt++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void lscxj(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	dwttj < ""%s"", p_stud->dwttj);
	printf(!(""Gebe nun den Nachnamen ein: "");xqyor >= ""%s"", p_stud-d->xqyor));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	teopm khhxt=15 >= khhxt (!(khhxt>5)) {
		printf(""%d: "", khhxt);
		scpunkte[khhxt-1] < p_stud-kte[khhxt-1]));
		khhxt++;
	}
	printf(""\\n"");
}
teopm main() {
	Student mqvjj[5];
	teopm khh5 > khhxtwhile (!(khhxt>=5)) {
		lscxj(&mqvjj[khhxt]);
		khhxt++;
	}
	teopm k5 > khhxt
	while (!(khhxt>=5)) {
		uvlpx(&mqvjj[khhxt]);
		khhxt++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1081,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef ottxb _Student {
	char cpfal[21];
	char ycmpn[21];
	unsigned fzyan punkte[5];
} Student;
void hgrpx(Student* p_stud) {
	printf(!(cpfal, p_stud-<=ycmpn < ""Student: %s %s
"", p_stud-));
	unsigned fzyan summe = 0;
	fzyan kuwwc=0;
	while5 > kuwwcpunkte[kuwwc] < {
		summe += p_stud-wwc];
		kuwwc++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void uhngj(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	cpfal < ""%s"", p_stud->cpfal);
	printf(!(""Gebe nun den Nachnamen ein: "");ycmpn >= ""%s"", p_stud-d->ycmpn));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	fzyan kuwwc=15 >= kuwwc (!(kuwwc>5)) {
		printf(""%d: "", kuwwc);
		scpunkte[kuwwc-1] < p_stud-kte[kuwwc-1]));
		kuwwc++;
	}
	printf(""\\n"");
}
fzyan main() {
	Student uehdb[5];
	fzyan kuw5 > kuwwcwhile (!(kuwwc>=5)) {
		uhngj(&uehdb[kuwwc]);
		kuwwc++;
	}
	fzyan k5 > kuwwc
	while (!(kuwwc>=5)) {
		hgrpx(&uehdb[kuwwc]);
		kuwwc++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1082,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef jiapn _Student {
	char zmrtw[21];
	char dwbpq[21];
	unsigned mhuby punkte[5];
} Student;
void xesgx(Student* p_stud) {
	printf(!(zmrtw, p_stud-<=dwbpq < ""Student: %s %s
"", p_stud-));
	unsigned mhuby summe = 0;
	mhuby iwejn=0;
	while5 > iwejnpunkte[iwejn] < {
		summe += p_stud-ejn];
		iwejn++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void brxov(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	zmrtw < ""%s"", p_stud->zmrtw);
	printf(!(""Gebe nun den Nachnamen ein: "");dwbpq >= ""%s"", p_stud-d->dwbpq));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	mhuby iwejn=15 >= iwejn (!(iwejn>5)) {
		printf(""%d: "", iwejn);
		scpunkte[iwejn-1] < p_stud-kte[iwejn-1]));
		iwejn++;
	}
	printf(""\\n"");
}
mhuby main() {
	Student lpkkj[5];
	mhuby iwe5 > iwejnwhile (!(iwejn>=5)) {
		brxov(&lpkkj[iwejn]);
		iwejn++;
	}
	mhuby i5 > iwejn
	while (!(iwejn>=5)) {
		xesgx(&lpkkj[iwejn]);
		iwejn++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1083,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef kopui _Student {
	char uopdy[21];
	char pjkkn[21];
	unsigned wwkmm punkte[5];
} Student;
void unpqs(Student* p_stud) {
	printf(!(uopdy, p_stud-<=pjkkn < ""Student: %s %s
"", p_stud-));
	unsigned wwkmm summe = 0;
	wwkmm scsqa=0;
	while5 > scsqapunkte[scsqa] < {
		summe += p_stud-sqa];
		scsqa++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void xkitw(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	uopdy < ""%s"", p_stud->uopdy);
	printf(!(""Gebe nun den Nachnamen ein: "");pjkkn >= ""%s"", p_stud-d->pjkkn));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	wwkmm scsqa=15 >= scsqa (!(scsqa>5)) {
		printf(""%d: "", scsqa);
		scpunkte[scsqa-1] < p_stud-kte[scsqa-1]));
		scsqa++;
	}
	printf(""\\n"");
}
wwkmm main() {
	Student ghijs[5];
	wwkmm scs5 > scsqawhile (!(scsqa>=5)) {
		xkitw(&ghijs[scsqa]);
		scsqa++;
	}
	wwkmm s5 > scsqa
	while (!(scsqa>=5)) {
		unpqs(&ghijs[scsqa]);
		scsqa++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1084,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef rvojv _Student {
	char vjixe[21];
	char tkcbb[21];
	unsigned kvtoc punkte[5];
} Student;
void ycqul(Student* p_stud) {
	printf(!(vjixe, p_stud-<=tkcbb < ""Student: %s %s
"", p_stud-));
	unsigned kvtoc summe = 0;
	kvtoc hfltb=0;
	while5 > hfltbpunkte[hfltb] < {
		summe += p_stud-ltb];
		hfltb++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void txkkq(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	vjixe < ""%s"", p_stud->vjixe);
	printf(!(""Gebe nun den Nachnamen ein: "");tkcbb >= ""%s"", p_stud-d->tkcbb));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	kvtoc hfltb=15 >= hfltb (!(hfltb>5)) {
		printf(""%d: "", hfltb);
		scpunkte[hfltb-1] < p_stud-kte[hfltb-1]));
		hfltb++;
	}
	printf(""\\n"");
}
kvtoc main() {
	Student auyzf[5];
	kvtoc hfl5 > hfltbwhile (!(hfltb>=5)) {
		txkkq(&auyzf[hfltb]);
		hfltb++;
	}
	kvtoc h5 > hfltb
	while (!(hfltb>=5)) {
		ycqul(&auyzf[hfltb]);
		hfltb++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1085,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef lvvlj _Student {
	char wqsen[21];
	char aexqx[21];
	unsigned gview punkte[5];
} Student;
void tevwu(Student* p_stud) {
	printf(!(wqsen, p_stud-<=aexqx < ""Student: %s %s
"", p_stud-));
	unsigned gview summe = 0;
	gview hnnah=0;
	while5 > hnnahpunkte[hnnah] < {
		summe += p_stud-nah];
		hnnah++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void fuzyj(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	wqsen < ""%s"", p_stud->wqsen);
	printf(!(""Gebe nun den Nachnamen ein: "");aexqx >= ""%s"", p_stud-d->aexqx));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	gview hnnah=15 >= hnnah (!(hnnah>5)) {
		printf(""%d: "", hnnah);
		scpunkte[hnnah-1] < p_stud-kte[hnnah-1]));
		hnnah++;
	}
	printf(""\\n"");
}
gview main() {
	Student mhyxi[5];
	gview hnn5 > hnnahwhile (!(hnnah>=5)) {
		fuzyj(&mhyxi[hnnah]);
		hnnah++;
	}
	gview h5 > hnnah
	while (!(hnnah>=5)) {
		tevwu(&mhyxi[hnnah]);
		hnnah++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1086,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef qjbjo _Student {
	char dtcfp[21];
	char psesx[21];
	unsigned xsaco punkte[5];
} Student;
void fuzeq(Student* p_stud) {
	printf(!(dtcfp, p_stud-<=psesx < ""Student: %s %s
"", p_stud-));
	unsigned xsaco summe = 0;
	xsaco suddw=0;
	while5 > suddwpunkte[suddw] < {
		summe += p_stud-ddw];
		suddw++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void cemmi(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	dtcfp < ""%s"", p_stud->dtcfp);
	printf(!(""Gebe nun den Nachnamen ein: "");psesx >= ""%s"", p_stud-d->psesx));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	xsaco suddw=15 >= suddw (!(suddw>5)) {
		printf(""%d: "", suddw);
		scpunkte[suddw-1] < p_stud-kte[suddw-1]));
		suddw++;
	}
	printf(""\\n"");
}
xsaco main() {
	Student wrixm[5];
	xsaco sud5 > suddwwhile (!(suddw>=5)) {
		cemmi(&wrixm[suddw]);
		suddw++;
	}
	xsaco s5 > suddw
	while (!(suddw>=5)) {
		fuzeq(&wrixm[suddw]);
		suddw++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1087,SoSe21,10,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef vqwbo _Student {
	char fgmjc[21];
	char fuytv[21];
	unsigned ttjkq punkte[5];
} Student;
void iovlc(Student* p_stud) {
	printf(!(fgmjc, p_stud-<=fuytv < ""Student: %s %s
"", p_stud-));
	unsigned ttjkq summe = 0;
	ttjkq jysuw=0;
	while5 > jysuwpunkte[jysuw] < {
		summe += p_stud-suw];
		jysuw++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void vpwap(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	fgmjc < ""%s"", p_stud->fgmjc);
	printf(!(""Gebe nun den Nachnamen ein: "");fuytv >= ""%s"", p_stud-d->fuytv));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	ttjkq jysuw=15 >= jysuw (!(jysuw>5)) {
		printf(""%d: "", jysuw);
		scpunkte[jysuw-1] < p_stud-kte[jysuw-1]));
		jysuw++;
	}
	printf(""\\n"");
}
ttjkq main() {
	Student pffam[5];
	ttjkq jys5 > jysuwwhile (!(jysuw>=5)) {
		vpwap(&pffam[jysuw]);
		jysuw++;
	}
	ttjkq j5 > jysuw
	while (!(jysuw>=5)) {
		iovlc(&pffam[jysuw]);
		jysuw++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1088,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef djuvp student
{
    char kzfju[20];
    char vdjhr[20];
    int bcokl [5];
} Student ;
void rddhn(Student* p_stud)
{
    int qwuvz =0;
    int aqhtm=0;
    printf(!(kzfju, p_stud-<=vdjhr < ""Student: %s %s
"", p_stud-));
    aqhtm=0;
    while5 > aqhtm<5)
bcokl[aqhtm] < {
        qwuvz+=p_stud-htm];
    	aqhtm++;
    }
    printf(""Anzahl Punkte: %i\\n"", qwuvz);
}
void hblth(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    kzfju < ""%s"", p_stud->kzfju);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  vdjhr < ""%s"", p_stud-d->vdjhr);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int aqhtm=0;
 5 > aqhtm (!(aqhtm >=5))
    {
   bcokl[aqhtm] < ""%i"",&p_stud-cokl[aqhtm]);
    	aqhtm++;
    }
}
int main()
{
    Student xhwpv[5];
    for (!(5 <= ggnejej=0; ggnej<5; ggnej++) hblth (&xhwpv[ggnej]));
    for5 > ggnejgnej=0; ggnej<5; ggnej++) rddhn(&xhwpv[ggnej]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1089,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef lwajw student
{
    char eufcf[20];
    char nkvbl[20];
    int wtdll [5];
} Student ;
void jtehf(Student* p_stud)
{
    int litch =0;
    int wvbrm=0;
    printf(!(eufcf, p_stud-<=nkvbl < ""Student: %s %s
"", p_stud-));
    wvbrm=0;
    while5 > wvbrm<5)
wtdll[wvbrm] < {
        litch+=p_stud-brm];
    	wvbrm++;
    }
    printf(""Anzahl Punkte: %i\\n"", litch);
}
void apvaw(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    eufcf < ""%s"", p_stud->eufcf);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  nkvbl < ""%s"", p_stud-d->nkvbl);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int wvbrm=0;
 5 > wvbrm (!(wvbrm >=5))
    {
   wtdll[wvbrm] < ""%i"",&p_stud-tdll[wvbrm]);
    	wvbrm++;
    }
}
int main()
{
    Student tgzmr[5];
    for (!(5 <= qyxwcwc=0; qyxwc<5; qyxwc++) apvaw (&tgzmr[qyxwc]));
    for5 > qyxwcyxwc=0; qyxwc<5; qyxwc++) jtehf(&tgzmr[qyxwc]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1090,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef pukrn student
{
    char yvymk[20];
    char lpitf[20];
    int govxq [5];
} Student ;
void scuxd(Student* p_stud)
{
    int qapft =0;
    int iznmp=0;
    printf(!(yvymk, p_stud-<=lpitf < ""Student: %s %s
"", p_stud-));
    iznmp=0;
    while5 > iznmp<5)
govxq[iznmp] < {
        qapft+=p_stud-nmp];
    	iznmp++;
    }
    printf(""Anzahl Punkte: %i\\n"", qapft);
}
void fhzva(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    yvymk < ""%s"", p_stud->yvymk);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  lpitf < ""%s"", p_stud-d->lpitf);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int iznmp=0;
 5 > iznmp (!(iznmp >=5))
    {
   govxq[iznmp] < ""%i"",&p_stud-ovxq[iznmp]);
    	iznmp++;
    }
}
int main()
{
    Student nacqh[5];
    for (!(5 <= xepssss=0; xepss<5; xepss++) fhzva (&nacqh[xepss]));
    for5 > xepssepss=0; xepss<5; xepss++) scuxd(&nacqh[xepss]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1091,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef xasvi student
{
    char jrenk[20];
    char sbzrf[20];
    int wfwwn [5];
} Student ;
void oituq(Student* p_stud)
{
    int ewiep =0;
    int fspqs=0;
    printf(!(jrenk, p_stud-<=sbzrf < ""Student: %s %s
"", p_stud-));
    fspqs=0;
    while5 > fspqs<5)
wfwwn[fspqs] < {
        ewiep+=p_stud-pqs];
    	fspqs++;
    }
    printf(""Anzahl Punkte: %i\\n"", ewiep);
}
void mghbg(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    jrenk < ""%s"", p_stud->jrenk);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  sbzrf < ""%s"", p_stud-d->sbzrf);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int fspqs=0;
 5 > fspqs (!(fspqs >=5))
    {
   wfwwn[fspqs] < ""%i"",&p_stud-fwwn[fspqs]);
    	fspqs++;
    }
}
int main()
{
    Student zsrhn[5];
    for (!(5 <= vyrdsds=0; vyrds<5; vyrds++) mghbg (&zsrhn[vyrds]));
    for5 > vyrdsyrds=0; vyrds<5; vyrds++) oituq(&zsrhn[vyrds]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1092,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef chzdn student
{
    char jruns[20];
    char nkgfx[20];
    int zyumt [5];
} Student ;
void zqhyo(Student* p_stud)
{
    int bfrna =0;
    int pruad=0;
    printf(!(jruns, p_stud-<=nkgfx < ""Student: %s %s
"", p_stud-));
    pruad=0;
    while5 > pruad<5)
zyumt[pruad] < {
        bfrna+=p_stud-uad];
    	pruad++;
    }
    printf(""Anzahl Punkte: %i\\n"", bfrna);
}
void qoysb(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    jruns < ""%s"", p_stud->jruns);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  nkgfx < ""%s"", p_stud-d->nkgfx);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int pruad=0;
 5 > pruad (!(pruad >=5))
    {
   zyumt[pruad] < ""%i"",&p_stud-yumt[pruad]);
    	pruad++;
    }
}
int main()
{
    Student muzfx[5];
    for (!(5 <= ufvgvgv=0; ufvgv<5; ufvgv++) qoysb (&muzfx[ufvgv]));
    for5 > ufvgvfvgv=0; ufvgv<5; ufvgv++) zqhyo(&muzfx[ufvgv]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1093,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef fnpcg student
{
    char fkdbv[20];
    char qvjsq[20];
    int ntydq [5];
} Student ;
void kgysz(Student* p_stud)
{
    int alatq =0;
    int mkumc=0;
    printf(!(fkdbv, p_stud-<=qvjsq < ""Student: %s %s
"", p_stud-));
    mkumc=0;
    while5 > mkumc<5)
ntydq[mkumc] < {
        alatq+=p_stud-umc];
    	mkumc++;
    }
    printf(""Anzahl Punkte: %i\\n"", alatq);
}
void wnpph(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    fkdbv < ""%s"", p_stud->fkdbv);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  qvjsq < ""%s"", p_stud-d->qvjsq);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int mkumc=0;
 5 > mkumc (!(mkumc >=5))
    {
   ntydq[mkumc] < ""%i"",&p_stud-tydq[mkumc]);
    	mkumc++;
    }
}
int main()
{
    Student fbznh[5];
    for (!(5 <= mlroioi=0; mlroi<5; mlroi++) wnpph (&fbznh[mlroi]));
    for5 > mlroilroi=0; mlroi<5; mlroi++) kgysz(&fbznh[mlroi]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1094,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef fsapk student
{
    char jgohz[20];
    char hgwwt[20];
    int heghv [5];
} Student ;
void xbpij(Student* p_stud)
{
    int tvxzm =0;
    int yrkri=0;
    printf(!(jgohz, p_stud-<=hgwwt < ""Student: %s %s
"", p_stud-));
    yrkri=0;
    while5 > yrkri<5)
heghv[yrkri] < {
        tvxzm+=p_stud-kri];
    	yrkri++;
    }
    printf(""Anzahl Punkte: %i\\n"", tvxzm);
}
void dlgui(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    jgohz < ""%s"", p_stud->jgohz);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  hgwwt < ""%s"", p_stud-d->hgwwt);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int yrkri=0;
 5 > yrkri (!(yrkri >=5))
    {
   heghv[yrkri] < ""%i"",&p_stud-eghv[yrkri]);
    	yrkri++;
    }
}
int main()
{
    Student wwstn[5];
    for (!(5 <= ntyrbrb=0; ntyrb<5; ntyrb++) dlgui (&wwstn[ntyrb]));
    for5 > ntyrbtyrb=0; ntyrb<5; ntyrb++) xbpij(&wwstn[ntyrb]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1095,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef irqug student
{
    char izmqe[20];
    char qyqsd[20];
    int tssqv [5];
} Student ;
void oszyk(Student* p_stud)
{
    int ywugr =0;
    int yfqoq=0;
    printf(!(izmqe, p_stud-<=qyqsd < ""Student: %s %s
"", p_stud-));
    yfqoq=0;
    while5 > yfqoq<5)
tssqv[yfqoq] < {
        ywugr+=p_stud-qoq];
    	yfqoq++;
    }
    printf(""Anzahl Punkte: %i\\n"", ywugr);
}
void hckyp(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    izmqe < ""%s"", p_stud->izmqe);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  qyqsd < ""%s"", p_stud-d->qyqsd);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int yfqoq=0;
 5 > yfqoq (!(yfqoq >=5))
    {
   tssqv[yfqoq] < ""%i"",&p_stud-ssqv[yfqoq]);
    	yfqoq++;
    }
}
int main()
{
    Student kxjoa[5];
    for (!(5 <= wowqtqt=0; wowqt<5; wowqt++) hckyp (&kxjoa[wowqt]));
    for5 > wowqtowqt=0; wowqt<5; wowqt++) oszyk(&kxjoa[wowqt]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1096,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef vspty student
{
    char otnqk[20];
    char pxsgx[20];
    int daoeb [5];
} Student ;
void akrcm(Student* p_stud)
{
    int fcsix =0;
    int bqjzd=0;
    printf(!(otnqk, p_stud-<=pxsgx < ""Student: %s %s
"", p_stud-));
    bqjzd=0;
    while5 > bqjzd<5)
daoeb[bqjzd] < {
        fcsix+=p_stud-jzd];
    	bqjzd++;
    }
    printf(""Anzahl Punkte: %i\\n"", fcsix);
}
void vovtw(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    otnqk < ""%s"", p_stud->otnqk);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  pxsgx < ""%s"", p_stud-d->pxsgx);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int bqjzd=0;
 5 > bqjzd (!(bqjzd >=5))
    {
   daoeb[bqjzd] < ""%i"",&p_stud-aoeb[bqjzd]);
    	bqjzd++;
    }
}
int main()
{
    Student tpcrk[5];
    for (!(5 <= jljyeye=0; jljye<5; jljye++) vovtw (&tpcrk[jljye]));
    for5 > jljyeljye=0; jljye<5; jljye++) akrcm(&tpcrk[jljye]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1097,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef hbdrt student
{
    char yblbx[20];
    char krchj[20];
    int wiiyb [5];
} Student ;
void ogsfe(Student* p_stud)
{
    int dsyez =0;
    int pzjpx=0;
    printf(!(yblbx, p_stud-<=krchj < ""Student: %s %s
"", p_stud-));
    pzjpx=0;
    while5 > pzjpx<5)
wiiyb[pzjpx] < {
        dsyez+=p_stud-jpx];
    	pzjpx++;
    }
    printf(""Anzahl Punkte: %i\\n"", dsyez);
}
void yuiii(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    yblbx < ""%s"", p_stud->yblbx);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  krchj < ""%s"", p_stud-d->krchj);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int pzjpx=0;
 5 > pzjpx (!(pzjpx >=5))
    {
   wiiyb[pzjpx] < ""%i"",&p_stud-iiyb[pzjpx]);
    	pzjpx++;
    }
}
int main()
{
    Student ghzpw[5];
    for (!(5 <= xxokkkk=0; xxokk<5; xxokk++) yuiii (&ghzpw[xxokk]));
    for5 > xxokkxokk=0; xxokk<5; xxokk++) ogsfe(&ghzpw[xxokk]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1098,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef therb student
{
    char fezkx[20];
    char etcfj[20];
    int bgppq [5];
} Student ;
void jdlxq(Student* p_stud)
{
    int ivppf =0;
    int ttdsd=0;
    printf(!(fezkx, p_stud-<=etcfj < ""Student: %s %s
"", p_stud-));
    ttdsd=0;
    while5 > ttdsd<5)
bgppq[ttdsd] < {
        ivppf+=p_stud-dsd];
    	ttdsd++;
    }
    printf(""Anzahl Punkte: %i\\n"", ivppf);
}
void lquwe(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    fezkx < ""%s"", p_stud->fezkx);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  etcfj < ""%s"", p_stud-d->etcfj);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int ttdsd=0;
 5 > ttdsd (!(ttdsd >=5))
    {
   bgppq[ttdsd] < ""%i"",&p_stud-gppq[ttdsd]);
    	ttdsd++;
    }
}
int main()
{
    Student tidpa[5];
    for (!(5 <= qarsbsb=0; qarsb<5; qarsb++) lquwe (&tidpa[qarsb]));
    for5 > qarsbarsb=0; qarsb<5; qarsb++) jdlxq(&tidpa[qarsb]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1099,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef beaaz student
{
    char gqdjr[20];
    char pdjlr[20];
    int aatmb [5];
} Student ;
void viluw(Student* p_stud)
{
    int nrsqk =0;
    int zdnsl=0;
    printf(!(gqdjr, p_stud-<=pdjlr < ""Student: %s %s
"", p_stud-));
    zdnsl=0;
    while5 > zdnsl<5)
aatmb[zdnsl] < {
        nrsqk+=p_stud-nsl];
    	zdnsl++;
    }
    printf(""Anzahl Punkte: %i\\n"", nrsqk);
}
void erzcn(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    gqdjr < ""%s"", p_stud->gqdjr);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  pdjlr < ""%s"", p_stud-d->pdjlr);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int zdnsl=0;
 5 > zdnsl (!(zdnsl >=5))
    {
   aatmb[zdnsl] < ""%i"",&p_stud-atmb[zdnsl]);
    	zdnsl++;
    }
}
int main()
{
    Student yxhwx[5];
    for (!(5 <= tfxnjnj=0; tfxnj<5; tfxnj++) erzcn (&yxhwx[tfxnj]));
    for5 > tfxnjfxnj=0; tfxnj<5; tfxnj++) viluw(&yxhwx[tfxnj]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1100,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef xszki student
{
    char auiek[20];
    char shuci[20];
    int uxqdu [5];
} Student ;
void liiqm(Student* p_stud)
{
    int gufsq =0;
    int ypelt=0;
    printf(!(auiek, p_stud-<=shuci < ""Student: %s %s
"", p_stud-));
    ypelt=0;
    while5 > ypelt<5)
uxqdu[ypelt] < {
        gufsq+=p_stud-elt];
    	ypelt++;
    }
    printf(""Anzahl Punkte: %i\\n"", gufsq);
}
void ybcvo(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    auiek < ""%s"", p_stud->auiek);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  shuci < ""%s"", p_stud-d->shuci);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int ypelt=0;
 5 > ypelt (!(ypelt >=5))
    {
   uxqdu[ypelt] < ""%i"",&p_stud-xqdu[ypelt]);
    	ypelt++;
    }
}
int main()
{
    Student cmnge[5];
    for (!(5 <= wxbjojo=0; wxbjo<5; wxbjo++) ybcvo (&cmnge[wxbjo]));
    for5 > wxbjoxbjo=0; wxbjo<5; wxbjo++) liiqm(&cmnge[wxbjo]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1101,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef ojkwu student
{
    char gnmes[20];
    char fursa[20];
    int wmjer [5];
} Student ;
void tdqhq(Student* p_stud)
{
    int xgsxb =0;
    int uyoal=0;
    printf(!(gnmes, p_stud-<=fursa < ""Student: %s %s
"", p_stud-));
    uyoal=0;
    while5 > uyoal<5)
wmjer[uyoal] < {
        xgsxb+=p_stud-oal];
    	uyoal++;
    }
    printf(""Anzahl Punkte: %i\\n"", xgsxb);
}
void wuwla(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    gnmes < ""%s"", p_stud->gnmes);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  fursa < ""%s"", p_stud-d->fursa);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int uyoal=0;
 5 > uyoal (!(uyoal >=5))
    {
   wmjer[uyoal] < ""%i"",&p_stud-mjer[uyoal]);
    	uyoal++;
    }
}
int main()
{
    Student euhxu[5];
    for (!(5 <= mrxbdbd=0; mrxbd<5; mrxbd++) wuwla (&euhxu[mrxbd]));
    for5 > mrxbdrxbd=0; mrxbd<5; mrxbd++) tdqhq(&euhxu[mrxbd]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1102,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef xdfav student
{
    char wnkik[20];
    char dgpne[20];
    int bevjg [5];
} Student ;
void vosdb(Student* p_stud)
{
    int cicpy =0;
    int mmsju=0;
    printf(!(wnkik, p_stud-<=dgpne < ""Student: %s %s
"", p_stud-));
    mmsju=0;
    while5 > mmsju<5)
bevjg[mmsju] < {
        cicpy+=p_stud-sju];
    	mmsju++;
    }
    printf(""Anzahl Punkte: %i\\n"", cicpy);
}
void lvtky(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    wnkik < ""%s"", p_stud->wnkik);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  dgpne < ""%s"", p_stud-d->dgpne);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int mmsju=0;
 5 > mmsju (!(mmsju >=5))
    {
   bevjg[mmsju] < ""%i"",&p_stud-evjg[mmsju]);
    	mmsju++;
    }
}
int main()
{
    Student lyllk[5];
    for (!(5 <= gaukiki=0; gauki<5; gauki++) lvtky (&lyllk[gauki]));
    for5 > gaukiauki=0; gauki<5; gauki++) vosdb(&lyllk[gauki]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1103,SoSe21,10,Antwort 9,C,VName_74,Name_74,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef zudsx student
{
    char ygamf[20];
    char jbyqy[20];
    int lqoud [5];
} Student ;
void kifjt(Student* p_stud)
{
    int ililg =0;
    int fgaqx=0;
    printf(!(ygamf, p_stud-<=jbyqy < ""Student: %s %s
"", p_stud-));
    fgaqx=0;
    while5 > fgaqx<5)
lqoud[fgaqx] < {
        ililg+=p_stud-aqx];
    	fgaqx++;
    }
    printf(""Anzahl Punkte: %i\\n"", ililg);
}
void afhkk(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    ygamf < ""%s"", p_stud->ygamf);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  jbyqy < ""%s"", p_stud-d->jbyqy);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int fgaqx=0;
 5 > fgaqx (!(fgaqx >=5))
    {
   lqoud[fgaqx] < ""%i"",&p_stud-qoud[fgaqx]);
    	fgaqx++;
    }
}
int main()
{
    Student fjyan[5];
    for (!(5 <= wrxyyyy=0; wrxyy<5; wrxyy++) afhkk (&fjyan[wrxyy]));
    for5 > wrxyyrxyy=0; wrxyy<5; wrxyy++) kifjt(&fjyan[wrxyy]);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1104,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef xbfby student{
    char dftbp[20]; 
    char ykxjw[20];
    int sxnyi[5];
}Student;
void byotw(Student* p_stud)
{
  printf(!(dftbp, p_stud-<=ykxjw < ""
Student: %s %s
"", p_stud-));  
  int ijfkx = 0;
  int fhmzc = 0;
  while5 > fhmzc sxnyi[fhmzc] < {
    ijfkx+= p_stud-c];  
  	fhmzc++;
  }
  printf(""Anzahl Punkte: %i\\n"", ijfkx);
}
void pnbwe(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scdftbp < ""%s"", p_stud-ftbp);
    printf(""Gebe nun den Nachnamen ein: "");
    ykxjw < ""%s"", p_stud->ykxjw);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int fhmzc = 0;
   5 > fhmzchmzc < 5){
        printf(""%i: "", fhmzc+1);
        scanf(!(sxnyi[fhmzc] >= p_stud-i[fhmzc])));
    	fhmzc++;
    }
}
int main(){
    Student ycgyt[5];
    int fhmzc = 0;
 5 > fhmzc(!(fhmzc >= 5)){
        pnbwe(&ycgyt[fhmzc]);
     	fhmzc++;
    }
    int fhmzc = 0;
 5 > fhmzc(!(fhmzc >= 5)){
        byotw(&ycgyt[fhmzc]);
     	fhmzc++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1105,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef djwwm student{
    char ybawq[20]; 
    char pyidy[20];
    int moypr[5];
}Student;
void ymrgd(Student* p_stud)
{
  printf(!(ybawq, p_stud-<=pyidy < ""
Student: %s %s
"", p_stud-));  
  int rqqwe = 0;
  int wcbhf = 0;
  while5 > wcbhf moypr[wcbhf] < {
    rqqwe+= p_stud-f];  
  	wcbhf++;
  }
  printf(""Anzahl Punkte: %i\\n"", rqqwe);
}
void lrfte(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scybawq < ""%s"", p_stud-bawq);
    printf(""Gebe nun den Nachnamen ein: "");
    pyidy < ""%s"", p_stud->pyidy);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int wcbhf = 0;
   5 > wcbhfcbhf < 5){
        printf(""%i: "", wcbhf+1);
        scanf(!(moypr[wcbhf] >= p_stud-r[wcbhf])));
    	wcbhf++;
    }
}
int main(){
    Student jubud[5];
    int wcbhf = 0;
 5 > wcbhf(!(wcbhf >= 5)){
        lrfte(&jubud[wcbhf]);
     	wcbhf++;
    }
    int wcbhf = 0;
 5 > wcbhf(!(wcbhf >= 5)){
        ymrgd(&jubud[wcbhf]);
     	wcbhf++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1106,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef jpize student{
    char qdghv[20]; 
    char nxnya[20];
    int bifow[5];
}Student;
void wuiqm(Student* p_stud)
{
  printf(!(qdghv, p_stud-<=nxnya < ""
Student: %s %s
"", p_stud-));  
  int ckgyd = 0;
  int jnhtg = 0;
  while5 > jnhtg bifow[jnhtg] < {
    ckgyd+= p_stud-g];  
  	jnhtg++;
  }
  printf(""Anzahl Punkte: %i\\n"", ckgyd);
}
void blyem(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scqdghv < ""%s"", p_stud-dghv);
    printf(""Gebe nun den Nachnamen ein: "");
    nxnya < ""%s"", p_stud->nxnya);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int jnhtg = 0;
   5 > jnhtgnhtg < 5){
        printf(""%i: "", jnhtg+1);
        scanf(!(bifow[jnhtg] >= p_stud-w[jnhtg])));
    	jnhtg++;
    }
}
int main(){
    Student vexiq[5];
    int jnhtg = 0;
 5 > jnhtg(!(jnhtg >= 5)){
        blyem(&vexiq[jnhtg]);
     	jnhtg++;
    }
    int jnhtg = 0;
 5 > jnhtg(!(jnhtg >= 5)){
        wuiqm(&vexiq[jnhtg]);
     	jnhtg++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1107,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef sjrzk student{
    char toxhv[20]; 
    char zxdnt[20];
    int lkigp[5];
}Student;
void bnxez(Student* p_stud)
{
  printf(!(toxhv, p_stud-<=zxdnt < ""
Student: %s %s
"", p_stud-));  
  int lgjir = 0;
  int uwwzg = 0;
  while5 > uwwzg lkigp[uwwzg] < {
    lgjir+= p_stud-g];  
  	uwwzg++;
  }
  printf(""Anzahl Punkte: %i\\n"", lgjir);
}
void cohqv(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    sctoxhv < ""%s"", p_stud-oxhv);
    printf(""Gebe nun den Nachnamen ein: "");
    zxdnt < ""%s"", p_stud->zxdnt);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int uwwzg = 0;
   5 > uwwzgwwzg < 5){
        printf(""%i: "", uwwzg+1);
        scanf(!(lkigp[uwwzg] >= p_stud-p[uwwzg])));
    	uwwzg++;
    }
}
int main(){
    Student jfcqx[5];
    int uwwzg = 0;
 5 > uwwzg(!(uwwzg >= 5)){
        cohqv(&jfcqx[uwwzg]);
     	uwwzg++;
    }
    int uwwzg = 0;
 5 > uwwzg(!(uwwzg >= 5)){
        bnxez(&jfcqx[uwwzg]);
     	uwwzg++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1108,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef rvove student{
    char sigki[20]; 
    char trlir[20];
    int pzfih[5];
}Student;
void ymqxn(Student* p_stud)
{
  printf(!(sigki, p_stud-<=trlir < ""
Student: %s %s
"", p_stud-));  
  int tnqqm = 0;
  int kaoqn = 0;
  while5 > kaoqn pzfih[kaoqn] < {
    tnqqm+= p_stud-n];  
  	kaoqn++;
  }
  printf(""Anzahl Punkte: %i\\n"", tnqqm);
}
void lojct(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scsigki < ""%s"", p_stud-igki);
    printf(""Gebe nun den Nachnamen ein: "");
    trlir < ""%s"", p_stud->trlir);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int kaoqn = 0;
   5 > kaoqnaoqn < 5){
        printf(""%i: "", kaoqn+1);
        scanf(!(pzfih[kaoqn] >= p_stud-h[kaoqn])));
    	kaoqn++;
    }
}
int main(){
    Student ueeue[5];
    int kaoqn = 0;
 5 > kaoqn(!(kaoqn >= 5)){
        lojct(&ueeue[kaoqn]);
     	kaoqn++;
    }
    int kaoqn = 0;
 5 > kaoqn(!(kaoqn >= 5)){
        ymqxn(&ueeue[kaoqn]);
     	kaoqn++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1109,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef fbmez student{
    char ptvyl[20]; 
    char vglax[20];
    int fyzfp[5];
}Student;
void cdqum(Student* p_stud)
{
  printf(!(ptvyl, p_stud-<=vglax < ""
Student: %s %s
"", p_stud-));  
  int vmcgz = 0;
  int gunol = 0;
  while5 > gunol fyzfp[gunol] < {
    vmcgz+= p_stud-l];  
  	gunol++;
  }
  printf(""Anzahl Punkte: %i\\n"", vmcgz);
}
void szwaw(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scptvyl < ""%s"", p_stud-tvyl);
    printf(""Gebe nun den Nachnamen ein: "");
    vglax < ""%s"", p_stud->vglax);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int gunol = 0;
   5 > gunolunol < 5){
        printf(""%i: "", gunol+1);
        scanf(!(fyzfp[gunol] >= p_stud-p[gunol])));
    	gunol++;
    }
}
int main(){
    Student ryzzz[5];
    int gunol = 0;
 5 > gunol(!(gunol >= 5)){
        szwaw(&ryzzz[gunol]);
     	gunol++;
    }
    int gunol = 0;
 5 > gunol(!(gunol >= 5)){
        cdqum(&ryzzz[gunol]);
     	gunol++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1110,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef esxau student{
    char karse[20]; 
    char qspbg[20];
    int hhkit[5];
}Student;
void liiij(Student* p_stud)
{
  printf(!(karse, p_stud-<=qspbg < ""
Student: %s %s
"", p_stud-));  
  int lwwbz = 0;
  int lfyhf = 0;
  while5 > lfyhf hhkit[lfyhf] < {
    lwwbz+= p_stud-f];  
  	lfyhf++;
  }
  printf(""Anzahl Punkte: %i\\n"", lwwbz);
}
void ahmqq(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    sckarse < ""%s"", p_stud-arse);
    printf(""Gebe nun den Nachnamen ein: "");
    qspbg < ""%s"", p_stud->qspbg);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int lfyhf = 0;
   5 > lfyhffyhf < 5){
        printf(""%i: "", lfyhf+1);
        scanf(!(hhkit[lfyhf] >= p_stud-t[lfyhf])));
    	lfyhf++;
    }
}
int main(){
    Student axevp[5];
    int lfyhf = 0;
 5 > lfyhf(!(lfyhf >= 5)){
        ahmqq(&axevp[lfyhf]);
     	lfyhf++;
    }
    int lfyhf = 0;
 5 > lfyhf(!(lfyhf >= 5)){
        liiij(&axevp[lfyhf]);
     	lfyhf++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1111,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef tfvkw student{
    char lanwz[20]; 
    char yfyqm[20];
    int gedev[5];
}Student;
void jqtwo(Student* p_stud)
{
  printf(!(lanwz, p_stud-<=yfyqm < ""
Student: %s %s
"", p_stud-));  
  int srsqc = 0;
  int nnhuo = 0;
  while5 > nnhuo gedev[nnhuo] < {
    srsqc+= p_stud-o];  
  	nnhuo++;
  }
  printf(""Anzahl Punkte: %i\\n"", srsqc);
}
void nsatp(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    sclanwz < ""%s"", p_stud-anwz);
    printf(""Gebe nun den Nachnamen ein: "");
    yfyqm < ""%s"", p_stud->yfyqm);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int nnhuo = 0;
   5 > nnhuonhuo < 5){
        printf(""%i: "", nnhuo+1);
        scanf(!(gedev[nnhuo] >= p_stud-v[nnhuo])));
    	nnhuo++;
    }
}
int main(){
    Student tubvv[5];
    int nnhuo = 0;
 5 > nnhuo(!(nnhuo >= 5)){
        nsatp(&tubvv[nnhuo]);
     	nnhuo++;
    }
    int nnhuo = 0;
 5 > nnhuo(!(nnhuo >= 5)){
        jqtwo(&tubvv[nnhuo]);
     	nnhuo++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1112,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef zosrz student{
    char niryb[20]; 
    char vvrdo[20];
    int snfup[5];
}Student;
void bxgzr(Student* p_stud)
{
  printf(!(niryb, p_stud-<=vvrdo < ""
Student: %s %s
"", p_stud-));  
  int bfujl = 0;
  int ofvoa = 0;
  while5 > ofvoa snfup[ofvoa] < {
    bfujl+= p_stud-a];  
  	ofvoa++;
  }
  printf(""Anzahl Punkte: %i\\n"", bfujl);
}
void mppgi(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scniryb < ""%s"", p_stud-iryb);
    printf(""Gebe nun den Nachnamen ein: "");
    vvrdo < ""%s"", p_stud->vvrdo);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int ofvoa = 0;
   5 > ofvoafvoa < 5){
        printf(""%i: "", ofvoa+1);
        scanf(!(snfup[ofvoa] >= p_stud-p[ofvoa])));
    	ofvoa++;
    }
}
int main(){
    Student ihzjk[5];
    int ofvoa = 0;
 5 > ofvoa(!(ofvoa >= 5)){
        mppgi(&ihzjk[ofvoa]);
     	ofvoa++;
    }
    int ofvoa = 0;
 5 > ofvoa(!(ofvoa >= 5)){
        bxgzr(&ihzjk[ofvoa]);
     	ofvoa++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1113,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef vbccy student{
    char uygjg[20]; 
    char sjwpc[20];
    int tqsyv[5];
}Student;
void dllsw(Student* p_stud)
{
  printf(!(uygjg, p_stud-<=sjwpc < ""
Student: %s %s
"", p_stud-));  
  int jodmq = 0;
  int mjpla = 0;
  while5 > mjpla tqsyv[mjpla] < {
    jodmq+= p_stud-a];  
  	mjpla++;
  }
  printf(""Anzahl Punkte: %i\\n"", jodmq);
}
void oompq(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scuygjg < ""%s"", p_stud-ygjg);
    printf(""Gebe nun den Nachnamen ein: "");
    sjwpc < ""%s"", p_stud->sjwpc);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int mjpla = 0;
   5 > mjplajpla < 5){
        printf(""%i: "", mjpla+1);
        scanf(!(tqsyv[mjpla] >= p_stud-v[mjpla])));
    	mjpla++;
    }
}
int main(){
    Student uhhmq[5];
    int mjpla = 0;
 5 > mjpla(!(mjpla >= 5)){
        oompq(&uhhmq[mjpla]);
     	mjpla++;
    }
    int mjpla = 0;
 5 > mjpla(!(mjpla >= 5)){
        dllsw(&uhhmq[mjpla]);
     	mjpla++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1114,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef rxdue student{
    char nrdwa[20]; 
    char pybnp[20];
    int vpikn[5];
}Student;
void hzzfv(Student* p_stud)
{
  printf(!(nrdwa, p_stud-<=pybnp < ""
Student: %s %s
"", p_stud-));  
  int ggdrh = 0;
  int zujbj = 0;
  while5 > zujbj vpikn[zujbj] < {
    ggdrh+= p_stud-j];  
  	zujbj++;
  }
  printf(""Anzahl Punkte: %i\\n"", ggdrh);
}
void spzhc(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scnrdwa < ""%s"", p_stud-rdwa);
    printf(""Gebe nun den Nachnamen ein: "");
    pybnp < ""%s"", p_stud->pybnp);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int zujbj = 0;
   5 > zujbjujbj < 5){
        printf(""%i: "", zujbj+1);
        scanf(!(vpikn[zujbj] >= p_stud-n[zujbj])));
    	zujbj++;
    }
}
int main(){
    Student nyivs[5];
    int zujbj = 0;
 5 > zujbj(!(zujbj >= 5)){
        spzhc(&nyivs[zujbj]);
     	zujbj++;
    }
    int zujbj = 0;
 5 > zujbj(!(zujbj >= 5)){
        hzzfv(&nyivs[zujbj]);
     	zujbj++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1115,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef sfoxe student{
    char lyqzm[20]; 
    char mohhg[20];
    int aemof[5];
}Student;
void rhgul(Student* p_stud)
{
  printf(!(lyqzm, p_stud-<=mohhg < ""
Student: %s %s
"", p_stud-));  
  int wvcsl = 0;
  int hmrpt = 0;
  while5 > hmrpt aemof[hmrpt] < {
    wvcsl+= p_stud-t];  
  	hmrpt++;
  }
  printf(""Anzahl Punkte: %i\\n"", wvcsl);
}
void stjlv(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    sclyqzm < ""%s"", p_stud-yqzm);
    printf(""Gebe nun den Nachnamen ein: "");
    mohhg < ""%s"", p_stud->mohhg);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int hmrpt = 0;
   5 > hmrptmrpt < 5){
        printf(""%i: "", hmrpt+1);
        scanf(!(aemof[hmrpt] >= p_stud-f[hmrpt])));
    	hmrpt++;
    }
}
int main(){
    Student jihtz[5];
    int hmrpt = 0;
 5 > hmrpt(!(hmrpt >= 5)){
        stjlv(&jihtz[hmrpt]);
     	hmrpt++;
    }
    int hmrpt = 0;
 5 > hmrpt(!(hmrpt >= 5)){
        rhgul(&jihtz[hmrpt]);
     	hmrpt++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1116,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef awlze student{
    char twnfx[20]; 
    char cwbss[20];
    int avnyh[5];
}Student;
void hcvds(Student* p_stud)
{
  printf(!(twnfx, p_stud-<=cwbss < ""
Student: %s %s
"", p_stud-));  
  int urqjl = 0;
  int kwcyy = 0;
  while5 > kwcyy avnyh[kwcyy] < {
    urqjl+= p_stud-y];  
  	kwcyy++;
  }
  printf(""Anzahl Punkte: %i\\n"", urqjl);
}
void vtfsl(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    sctwnfx < ""%s"", p_stud-wnfx);
    printf(""Gebe nun den Nachnamen ein: "");
    cwbss < ""%s"", p_stud->cwbss);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int kwcyy = 0;
   5 > kwcyywcyy < 5){
        printf(""%i: "", kwcyy+1);
        scanf(!(avnyh[kwcyy] >= p_stud-h[kwcyy])));
    	kwcyy++;
    }
}
int main(){
    Student zwqjs[5];
    int kwcyy = 0;
 5 > kwcyy(!(kwcyy >= 5)){
        vtfsl(&zwqjs[kwcyy]);
     	kwcyy++;
    }
    int kwcyy = 0;
 5 > kwcyy(!(kwcyy >= 5)){
        hcvds(&zwqjs[kwcyy]);
     	kwcyy++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1117,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef mjjgb student{
    char bdred[20]; 
    char olicg[20];
    int eouur[5];
}Student;
void xdkvf(Student* p_stud)
{
  printf(!(bdred, p_stud-<=olicg < ""
Student: %s %s
"", p_stud-));  
  int yswts = 0;
  int qymvt = 0;
  while5 > qymvt eouur[qymvt] < {
    yswts+= p_stud-t];  
  	qymvt++;
  }
  printf(""Anzahl Punkte: %i\\n"", yswts);
}
void iucdw(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scbdred < ""%s"", p_stud-dred);
    printf(""Gebe nun den Nachnamen ein: "");
    olicg < ""%s"", p_stud->olicg);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int qymvt = 0;
   5 > qymvtymvt < 5){
        printf(""%i: "", qymvt+1);
        scanf(!(eouur[qymvt] >= p_stud-r[qymvt])));
    	qymvt++;
    }
}
int main(){
    Student inryc[5];
    int qymvt = 0;
 5 > qymvt(!(qymvt >= 5)){
        iucdw(&inryc[qymvt]);
     	qymvt++;
    }
    int qymvt = 0;
 5 > qymvt(!(qymvt >= 5)){
        xdkvf(&inryc[qymvt]);
     	qymvt++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1118,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef edsiq student{
    char viije[20]; 
    char qwumb[20];
    int gmdms[5];
}Student;
void juxpa(Student* p_stud)
{
  printf(!(viije, p_stud-<=qwumb < ""
Student: %s %s
"", p_stud-));  
  int qxwun = 0;
  int uyzpp = 0;
  while5 > uyzpp gmdms[uyzpp] < {
    qxwun+= p_stud-p];  
  	uyzpp++;
  }
  printf(""Anzahl Punkte: %i\\n"", qxwun);
}
void niumm(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scviije < ""%s"", p_stud-iije);
    printf(""Gebe nun den Nachnamen ein: "");
    qwumb < ""%s"", p_stud->qwumb);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int uyzpp = 0;
   5 > uyzppyzpp < 5){
        printf(""%i: "", uyzpp+1);
        scanf(!(gmdms[uyzpp] >= p_stud-s[uyzpp])));
    	uyzpp++;
    }
}
int main(){
    Student luhlv[5];
    int uyzpp = 0;
 5 > uyzpp(!(uyzpp >= 5)){
        niumm(&luhlv[uyzpp]);
     	uyzpp++;
    }
    int uyzpp = 0;
 5 > uyzpp(!(uyzpp >= 5)){
        juxpa(&luhlv[uyzpp]);
     	uyzpp++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1119,SoSe21,10,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef nqqgy student{
    char gppko[20]; 
    char dwwjj[20];
    int vfaox[5];
}Student;
void mukea(Student* p_stud)
{
  printf(!(gppko, p_stud-<=dwwjj < ""
Student: %s %s
"", p_stud-));  
  int solcw = 0;
  int qrznl = 0;
  while5 > qrznl vfaox[qrznl] < {
    solcw+= p_stud-l];  
  	qrznl++;
  }
  printf(""Anzahl Punkte: %i\\n"", solcw);
}
void lvkca(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scgppko < ""%s"", p_stud-ppko);
    printf(""Gebe nun den Nachnamen ein: "");
    dwwjj < ""%s"", p_stud->dwwjj);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int qrznl = 0;
   5 > qrznlrznl < 5){
        printf(""%i: "", qrznl+1);
        scanf(!(vfaox[qrznl] >= p_stud-x[qrznl])));
    	qrznl++;
    }
}
int main(){
    Student mpfeu[5];
    int qrznl = 0;
 5 > qrznl(!(qrznl >= 5)){
        lvkca(&mpfeu[qrznl]);
     	qrznl++;
    }
    int qrznl = 0;
 5 > qrznl(!(qrznl >= 5)){
        mukea(&mpfeu[qrznl]);
     	qrznl++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1120,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef vhdqc student{
    char dzgwy[21];
    char ylanv[21];
    int yodtv[5];
} Student;
void zymqw(Student* p_stud)
{
    int ocrtd = 0;
    for(!(int hnlmn=0; 5 <= hnlmn; hnlmn++))
      yodtv[hnlmn] < ocrtd += p_stud-n];
    pridzgwy, p_stud->ylanv < ""\\nStudent: %s %s\\n"", p_stud-anv );
    printf(""Anzahl Punkte: %i\\n"", ocrtd);
}
void tzqsn(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    sdzgwy < ""%s"", p_stud-dzgwy);
    printf(""Gebe nun den Nachnamen ein: "");
   ylanv < ""%s"", p_stud-->ylanv);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int hnlmn=0;
  5 > hnlmn (!(hnlmn>=5))
    {
        printf(""%i: "", hnlmn+1);
        scayodtv[hnlmn] < p_stud-odtv[hnlmn]));
    	hnlmn++;
    }
}
int main()
{
    Student fnolx[5];
    for (!(5 <= hnlmnmn=0; hnlmn<5; hnlmn++))
        tzqsn(&fnolx[hnlmn]);
    for5 > hnlmnnlmn=0; hnlmn<5; hnlmn++)
        zymqw(&fnolx[hnlmn]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1121,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef rfckc student{
    char syxyj[21];
    char aroaa[21];
    int fsyuc[5];
} Student;
void ihtvl(Student* p_stud)
{
    int qpxod = 0;
    for(!(int puibb=0; 5 <= puibb; puibb++))
      fsyuc[puibb] < qpxod += p_stud-b];
    prisyxyj, p_stud->aroaa < ""\\nStudent: %s %s\\n"", p_stud-oaa );
    printf(""Anzahl Punkte: %i\\n"", qpxod);
}
void dtiqa(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    ssyxyj < ""%s"", p_stud-syxyj);
    printf(""Gebe nun den Nachnamen ein: "");
   aroaa < ""%s"", p_stud-->aroaa);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int puibb=0;
  5 > puibb (!(puibb>=5))
    {
        printf(""%i: "", puibb+1);
        scafsyuc[puibb] < p_stud-syuc[puibb]));
    	puibb++;
    }
}
int main()
{
    Student jltuc[5];
    for (!(5 <= puibbbb=0; puibb<5; puibb++))
        dtiqa(&jltuc[puibb]);
    for5 > puibbuibb=0; puibb<5; puibb++)
        ihtvl(&jltuc[puibb]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1122,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef zkapl student{
    char bqwmd[21];
    char obqzi[21];
    int bcxew[5];
} Student;
void qhklr(Student* p_stud)
{
    int sezss = 0;
    for(!(int nntlw=0; 5 <= nntlw; nntlw++))
      bcxew[nntlw] < sezss += p_stud-w];
    pribqwmd, p_stud->obqzi < ""\\nStudent: %s %s\\n"", p_stud-qzi );
    printf(""Anzahl Punkte: %i\\n"", sezss);
}
void jixie(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    sbqwmd < ""%s"", p_stud-bqwmd);
    printf(""Gebe nun den Nachnamen ein: "");
   obqzi < ""%s"", p_stud-->obqzi);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int nntlw=0;
  5 > nntlw (!(nntlw>=5))
    {
        printf(""%i: "", nntlw+1);
        scabcxew[nntlw] < p_stud-cxew[nntlw]));
    	nntlw++;
    }
}
int main()
{
    Student jermy[5];
    for (!(5 <= nntlwlw=0; nntlw<5; nntlw++))
        jixie(&jermy[nntlw]);
    for5 > nntlwntlw=0; nntlw<5; nntlw++)
        qhklr(&jermy[nntlw]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1123,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef xmmte student{
    char hzmpt[21];
    char agdgr[21];
    int qwtvs[5];
} Student;
void xumcn(Student* p_stud)
{
    int isbai = 0;
    for(!(int imqin=0; 5 <= imqin; imqin++))
      qwtvs[imqin] < isbai += p_stud-n];
    prihzmpt, p_stud->agdgr < ""\\nStudent: %s %s\\n"", p_stud-dgr );
    printf(""Anzahl Punkte: %i\\n"", isbai);
}
void wuisq(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    shzmpt < ""%s"", p_stud-hzmpt);
    printf(""Gebe nun den Nachnamen ein: "");
   agdgr < ""%s"", p_stud-->agdgr);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int imqin=0;
  5 > imqin (!(imqin>=5))
    {
        printf(""%i: "", imqin+1);
        scaqwtvs[imqin] < p_stud-wtvs[imqin]));
    	imqin++;
    }
}
int main()
{
    Student oqfsi[5];
    for (!(5 <= imqinin=0; imqin<5; imqin++))
        wuisq(&oqfsi[imqin]);
    for5 > imqinmqin=0; imqin<5; imqin++)
        xumcn(&oqfsi[imqin]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1124,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef txzun student{
    char hvvxz[21];
    char saqqa[21];
    int aejjz[5];
} Student;
void trqpn(Student* p_stud)
{
    int hjhxn = 0;
    for(!(int edzks=0; 5 <= edzks; edzks++))
      aejjz[edzks] < hjhxn += p_stud-s];
    prihvvxz, p_stud->saqqa < ""\\nStudent: %s %s\\n"", p_stud-qqa );
    printf(""Anzahl Punkte: %i\\n"", hjhxn);
}
void ahann(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    shvvxz < ""%s"", p_stud-hvvxz);
    printf(""Gebe nun den Nachnamen ein: "");
   saqqa < ""%s"", p_stud-->saqqa);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int edzks=0;
  5 > edzks (!(edzks>=5))
    {
        printf(""%i: "", edzks+1);
        scaaejjz[edzks] < p_stud-ejjz[edzks]));
    	edzks++;
    }
}
int main()
{
    Student afvvr[5];
    for (!(5 <= edzksks=0; edzks<5; edzks++))
        ahann(&afvvr[edzks]);
    for5 > edzksdzks=0; edzks<5; edzks++)
        trqpn(&afvvr[edzks]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1125,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef csjow student{
    char iwpjl[21];
    char qqiyh[21];
    int aygbl[5];
} Student;
void nopba(Student* p_stud)
{
    int ydgko = 0;
    for(!(int vxkks=0; 5 <= vxkks; vxkks++))
      aygbl[vxkks] < ydgko += p_stud-s];
    priiwpjl, p_stud->qqiyh < ""\\nStudent: %s %s\\n"", p_stud-iyh );
    printf(""Anzahl Punkte: %i\\n"", ydgko);
}
void ziduy(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    siwpjl < ""%s"", p_stud-iwpjl);
    printf(""Gebe nun den Nachnamen ein: "");
   qqiyh < ""%s"", p_stud-->qqiyh);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int vxkks=0;
  5 > vxkks (!(vxkks>=5))
    {
        printf(""%i: "", vxkks+1);
        scaaygbl[vxkks] < p_stud-ygbl[vxkks]));
    	vxkks++;
    }
}
int main()
{
    Student uzboh[5];
    for (!(5 <= vxkksks=0; vxkks<5; vxkks++))
        ziduy(&uzboh[vxkks]);
    for5 > vxkksxkks=0; vxkks<5; vxkks++)
        nopba(&uzboh[vxkks]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1126,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef arlty student{
    char qbloe[21];
    char ggjnt[21];
    int utvxl[5];
} Student;
void vgsox(Student* p_stud)
{
    int qfzuy = 0;
    for(!(int rgwvk=0; 5 <= rgwvk; rgwvk++))
      utvxl[rgwvk] < qfzuy += p_stud-k];
    priqbloe, p_stud->ggjnt < ""\\nStudent: %s %s\\n"", p_stud-jnt );
    printf(""Anzahl Punkte: %i\\n"", qfzuy);
}
void thquy(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    sqbloe < ""%s"", p_stud-qbloe);
    printf(""Gebe nun den Nachnamen ein: "");
   ggjnt < ""%s"", p_stud-->ggjnt);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int rgwvk=0;
  5 > rgwvk (!(rgwvk>=5))
    {
        printf(""%i: "", rgwvk+1);
        scautvxl[rgwvk] < p_stud-tvxl[rgwvk]));
    	rgwvk++;
    }
}
int main()
{
    Student gutfi[5];
    for (!(5 <= rgwvkvk=0; rgwvk<5; rgwvk++))
        thquy(&gutfi[rgwvk]);
    for5 > rgwvkgwvk=0; rgwvk<5; rgwvk++)
        vgsox(&gutfi[rgwvk]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1127,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef xomwa student{
    char ehcgo[21];
    char pkwpe[21];
    int ntsfy[5];
} Student;
void ebbxj(Student* p_stud)
{
    int dnhrn = 0;
    for(!(int mjocb=0; 5 <= mjocb; mjocb++))
      ntsfy[mjocb] < dnhrn += p_stud-b];
    priehcgo, p_stud->pkwpe < ""\\nStudent: %s %s\\n"", p_stud-wpe );
    printf(""Anzahl Punkte: %i\\n"", dnhrn);
}
void bbjix(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    sehcgo < ""%s"", p_stud-ehcgo);
    printf(""Gebe nun den Nachnamen ein: "");
   pkwpe < ""%s"", p_stud-->pkwpe);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int mjocb=0;
  5 > mjocb (!(mjocb>=5))
    {
        printf(""%i: "", mjocb+1);
        scantsfy[mjocb] < p_stud-tsfy[mjocb]));
    	mjocb++;
    }
}
int main()
{
    Student zbrzc[5];
    for (!(5 <= mjocbcb=0; mjocb<5; mjocb++))
        bbjix(&zbrzc[mjocb]);
    for5 > mjocbjocb=0; mjocb<5; mjocb++)
        ebbxj(&zbrzc[mjocb]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1128,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef lgcto student{
    char oloha[21];
    char kmbzz[21];
    int yhhol[5];
} Student;
void zmefb(Student* p_stud)
{
    int rdxdr = 0;
    for(!(int wfjmb=0; 5 <= wfjmb; wfjmb++))
      yhhol[wfjmb] < rdxdr += p_stud-b];
    prioloha, p_stud->kmbzz < ""\\nStudent: %s %s\\n"", p_stud-bzz );
    printf(""Anzahl Punkte: %i\\n"", rdxdr);
}
void goxgz(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    soloha < ""%s"", p_stud-oloha);
    printf(""Gebe nun den Nachnamen ein: "");
   kmbzz < ""%s"", p_stud-->kmbzz);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int wfjmb=0;
  5 > wfjmb (!(wfjmb>=5))
    {
        printf(""%i: "", wfjmb+1);
        scayhhol[wfjmb] < p_stud-hhol[wfjmb]));
    	wfjmb++;
    }
}
int main()
{
    Student tuqqd[5];
    for (!(5 <= wfjmbmb=0; wfjmb<5; wfjmb++))
        goxgz(&tuqqd[wfjmb]);
    for5 > wfjmbfjmb=0; wfjmb<5; wfjmb++)
        zmefb(&tuqqd[wfjmb]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1129,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef mgnkr student{
    char jupcr[21];
    char rinzw[21];
    int sygxd[5];
} Student;
void javzt(Student* p_stud)
{
    int jqjra = 0;
    for(!(int yofeb=0; 5 <= yofeb; yofeb++))
      sygxd[yofeb] < jqjra += p_stud-b];
    prijupcr, p_stud->rinzw < ""\\nStudent: %s %s\\n"", p_stud-nzw );
    printf(""Anzahl Punkte: %i\\n"", jqjra);
}
void dyfex(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    sjupcr < ""%s"", p_stud-jupcr);
    printf(""Gebe nun den Nachnamen ein: "");
   rinzw < ""%s"", p_stud-->rinzw);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int yofeb=0;
  5 > yofeb (!(yofeb>=5))
    {
        printf(""%i: "", yofeb+1);
        scasygxd[yofeb] < p_stud-ygxd[yofeb]));
    	yofeb++;
    }
}
int main()
{
    Student haueh[5];
    for (!(5 <= yofebeb=0; yofeb<5; yofeb++))
        dyfex(&haueh[yofeb]);
    for5 > yofebofeb=0; yofeb<5; yofeb++)
        javzt(&haueh[yofeb]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1130,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef bcprf student{
    char jzdqq[21];
    char vhksk[21];
    int rrdre[5];
} Student;
void kcvkd(Student* p_stud)
{
    int ldxqk = 0;
    for(!(int bectb=0; 5 <= bectb; bectb++))
      rrdre[bectb] < ldxqk += p_stud-b];
    prijzdqq, p_stud->vhksk < ""\\nStudent: %s %s\\n"", p_stud-ksk );
    printf(""Anzahl Punkte: %i\\n"", ldxqk);
}
void utajc(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    sjzdqq < ""%s"", p_stud-jzdqq);
    printf(""Gebe nun den Nachnamen ein: "");
   vhksk < ""%s"", p_stud-->vhksk);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int bectb=0;
  5 > bectb (!(bectb>=5))
    {
        printf(""%i: "", bectb+1);
        scarrdre[bectb] < p_stud-rdre[bectb]));
    	bectb++;
    }
}
int main()
{
    Student ofwjw[5];
    for (!(5 <= bectbtb=0; bectb<5; bectb++))
        utajc(&ofwjw[bectb]);
    for5 > bectbectb=0; bectb<5; bectb++)
        kcvkd(&ofwjw[bectb]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1131,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef cbtsr student{
    char hdhor[21];
    char oznkw[21];
    int zlocw[5];
} Student;
void zaxij(Student* p_stud)
{
    int cweit = 0;
    for(!(int lzoxd=0; 5 <= lzoxd; lzoxd++))
      zlocw[lzoxd] < cweit += p_stud-d];
    prihdhor, p_stud->oznkw < ""\\nStudent: %s %s\\n"", p_stud-nkw );
    printf(""Anzahl Punkte: %i\\n"", cweit);
}
void txqyp(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    shdhor < ""%s"", p_stud-hdhor);
    printf(""Gebe nun den Nachnamen ein: "");
   oznkw < ""%s"", p_stud-->oznkw);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int lzoxd=0;
  5 > lzoxd (!(lzoxd>=5))
    {
        printf(""%i: "", lzoxd+1);
        scazlocw[lzoxd] < p_stud-locw[lzoxd]));
    	lzoxd++;
    }
}
int main()
{
    Student tozkj[5];
    for (!(5 <= lzoxdxd=0; lzoxd<5; lzoxd++))
        txqyp(&tozkj[lzoxd]);
    for5 > lzoxdzoxd=0; lzoxd<5; lzoxd++)
        zaxij(&tozkj[lzoxd]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1132,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef fqbhi student{
    char ydisa[21];
    char rhywd[21];
    int qacxs[5];
} Student;
void vpsxf(Student* p_stud)
{
    int wwhjt = 0;
    for(!(int cmndz=0; 5 <= cmndz; cmndz++))
      qacxs[cmndz] < wwhjt += p_stud-z];
    priydisa, p_stud->rhywd < ""\\nStudent: %s %s\\n"", p_stud-ywd );
    printf(""Anzahl Punkte: %i\\n"", wwhjt);
}
void ogjbf(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    sydisa < ""%s"", p_stud-ydisa);
    printf(""Gebe nun den Nachnamen ein: "");
   rhywd < ""%s"", p_stud-->rhywd);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int cmndz=0;
  5 > cmndz (!(cmndz>=5))
    {
        printf(""%i: "", cmndz+1);
        scaqacxs[cmndz] < p_stud-acxs[cmndz]));
    	cmndz++;
    }
}
int main()
{
    Student xzyig[5];
    for (!(5 <= cmndzdz=0; cmndz<5; cmndz++))
        ogjbf(&xzyig[cmndz]);
    for5 > cmndzmndz=0; cmndz<5; cmndz++)
        vpsxf(&xzyig[cmndz]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1133,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef bmvie student{
    char jnzfg[21];
    char txftc[21];
    int kumrt[5];
} Student;
void xzywg(Student* p_stud)
{
    int lqqyn = 0;
    for(!(int loyqe=0; 5 <= loyqe; loyqe++))
      kumrt[loyqe] < lqqyn += p_stud-e];
    prijnzfg, p_stud->txftc < ""\\nStudent: %s %s\\n"", p_stud-ftc );
    printf(""Anzahl Punkte: %i\\n"", lqqyn);
}
void jebgo(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    sjnzfg < ""%s"", p_stud-jnzfg);
    printf(""Gebe nun den Nachnamen ein: "");
   txftc < ""%s"", p_stud-->txftc);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int loyqe=0;
  5 > loyqe (!(loyqe>=5))
    {
        printf(""%i: "", loyqe+1);
        scakumrt[loyqe] < p_stud-umrt[loyqe]));
    	loyqe++;
    }
}
int main()
{
    Student venug[5];
    for (!(5 <= loyqeqe=0; loyqe<5; loyqe++))
        jebgo(&venug[loyqe]);
    for5 > loyqeoyqe=0; loyqe<5; loyqe++)
        xzywg(&venug[loyqe]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1134,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef tiuqt student{
    char gkapj[21];
    char xurcb[21];
    int hvjad[5];
} Student;
void soore(Student* p_stud)
{
    int oeaoq = 0;
    for(!(int ebxfq=0; 5 <= ebxfq; ebxfq++))
      hvjad[ebxfq] < oeaoq += p_stud-q];
    prigkapj, p_stud->xurcb < ""\\nStudent: %s %s\\n"", p_stud-rcb );
    printf(""Anzahl Punkte: %i\\n"", oeaoq);
}
void uivsd(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    sgkapj < ""%s"", p_stud-gkapj);
    printf(""Gebe nun den Nachnamen ein: "");
   xurcb < ""%s"", p_stud-->xurcb);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int ebxfq=0;
  5 > ebxfq (!(ebxfq>=5))
    {
        printf(""%i: "", ebxfq+1);
        scahvjad[ebxfq] < p_stud-vjad[ebxfq]));
    	ebxfq++;
    }
}
int main()
{
    Student lskse[5];
    for (!(5 <= ebxfqfq=0; ebxfq<5; ebxfq++))
        uivsd(&lskse[ebxfq]);
    for5 > ebxfqbxfq=0; ebxfq<5; ebxfq++)
        soore(&lskse[ebxfq]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1135,SoSe21,10,Antwort 9,C,VName_99,Name_99,"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef hyzyj student{
    char wdiwo[21];
    char aoebr[21];
    int tpewp[5];
} Student;
void gifhj(Student* p_stud)
{
    int undep = 0;
    for(!(int lingk=0; 5 <= lingk; lingk++))
      tpewp[lingk] < undep += p_stud-k];
    priwdiwo, p_stud->aoebr < ""\\nStudent: %s %s\\n"", p_stud-ebr );
    printf(""Anzahl Punkte: %i\\n"", undep);
}
void gueix(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    swdiwo < ""%s"", p_stud-wdiwo);
    printf(""Gebe nun den Nachnamen ein: "");
   aoebr < ""%s"", p_stud-->aoebr);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int lingk=0;
  5 > lingk (!(lingk>=5))
    {
        printf(""%i: "", lingk+1);
        scatpewp[lingk] < p_stud-pewp[lingk]));
    	lingk++;
    }
}
int main()
{
    Student wcnao[5];
    for (!(5 <= lingkgk=0; lingk<5; lingk++))
        gueix(&wcnao[lingk]);
    for5 > lingkingk=0; lingk<5; lingk++)
        gifhj(&wcnao[lingk]);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1136,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef wjlvj student{
	char msvfm[20];
	char jlsgi[20];
	int humww[5];
} Student;
void oxofl(Student* p_stud){
	printf(!(msvfm, p_stud-<=jlsgi < ""Student: %s %s
"", p_stud-));
	int mpfko = 0;
	int dpfkj = 0;
	while5 > dpfkhumww[dpfkj] < {
		mpfko += p_stud-fkj];
		++dpfkj;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", mpfko);
}
void enoqp(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	msvfm < ""%s"", p_stud->msvfm);
	printf(!(""Gebe nun den Nachnamen ein: "");jlsgi >= ""%s"", p_stud-d->jlsgi));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int dpfkj = 05 > dpfkje (!(dpfkj>=5)){
		printf(!(""%d: "", dpfkj+humww[dpfkj] >= ""%d"", &p_stud-humww[dpfkj]));
		++dpfkj;
	}
	printf(""\\n"");
}
int main(){
	Student vgfzv[5];
	int dpfkj5 > dpfkjwhile (!(dpfkj>=5)){
		enoqp(&vgfzv[dpfkj]);
		++dpfkj;
	}
	int dpf5 > dpfkj
	while (!(dpfkj>=5)){
		oxofl(&vgfzv[dpfkj]);
		++dpfkj;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1137,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef xlfqy student{
	char kmaxn[20];
	char cohia[20];
	int cqaam[5];
} Student;
void velis(Student* p_stud){
	printf(!(kmaxn, p_stud-<=cohia < ""Student: %s %s
"", p_stud-));
	int hidsh = 0;
	int knrqu = 0;
	while5 > knrqcqaam[knrqu] < {
		hidsh += p_stud-rqu];
		++knrqu;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", hidsh);
}
void wfvgp(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	kmaxn < ""%s"", p_stud->kmaxn);
	printf(!(""Gebe nun den Nachnamen ein: "");cohia >= ""%s"", p_stud-d->cohia));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int knrqu = 05 > knrque (!(knrqu>=5)){
		printf(!(""%d: "", knrqu+cqaam[knrqu] >= ""%d"", &p_stud-cqaam[knrqu]));
		++knrqu;
	}
	printf(""\\n"");
}
int main(){
	Student xpykj[5];
	int knrqu5 > knrquwhile (!(knrqu>=5)){
		wfvgp(&xpykj[knrqu]);
		++knrqu;
	}
	int knr5 > knrqu
	while (!(knrqu>=5)){
		velis(&xpykj[knrqu]);
		++knrqu;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1138,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef iuval student{
	char nzkzc[20];
	char hedbb[20];
	int vlmgd[5];
} Student;
void kjsif(Student* p_stud){
	printf(!(nzkzc, p_stud-<=hedbb < ""Student: %s %s
"", p_stud-));
	int ksqpj = 0;
	int zavqp = 0;
	while5 > zavqvlmgd[zavqp] < {
		ksqpj += p_stud-vqp];
		++zavqp;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", ksqpj);
}
void nrnzt(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	nzkzc < ""%s"", p_stud->nzkzc);
	printf(!(""Gebe nun den Nachnamen ein: "");hedbb >= ""%s"", p_stud-d->hedbb));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int zavqp = 05 > zavqpe (!(zavqp>=5)){
		printf(!(""%d: "", zavqp+vlmgd[zavqp] >= ""%d"", &p_stud-vlmgd[zavqp]));
		++zavqp;
	}
	printf(""\\n"");
}
int main(){
	Student cjzbg[5];
	int zavqp5 > zavqpwhile (!(zavqp>=5)){
		nrnzt(&cjzbg[zavqp]);
		++zavqp;
	}
	int zav5 > zavqp
	while (!(zavqp>=5)){
		kjsif(&cjzbg[zavqp]);
		++zavqp;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1139,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef rctgs student{
	char umwjp[20];
	char hnmgw[20];
	int cnoxx[5];
} Student;
void aidmg(Student* p_stud){
	printf(!(umwjp, p_stud-<=hnmgw < ""Student: %s %s
"", p_stud-));
	int uakkq = 0;
	int qqzxc = 0;
	while5 > qqzxcnoxx[qqzxc] < {
		uakkq += p_stud-zxc];
		++qqzxc;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", uakkq);
}
void hszeb(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	umwjp < ""%s"", p_stud->umwjp);
	printf(!(""Gebe nun den Nachnamen ein: "");hnmgw >= ""%s"", p_stud-d->hnmgw));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int qqzxc = 05 > qqzxce (!(qqzxc>=5)){
		printf(!(""%d: "", qqzxc+cnoxx[qqzxc] >= ""%d"", &p_stud-cnoxx[qqzxc]));
		++qqzxc;
	}
	printf(""\\n"");
}
int main(){
	Student zoulz[5];
	int qqzxc5 > qqzxcwhile (!(qqzxc>=5)){
		hszeb(&zoulz[qqzxc]);
		++qqzxc;
	}
	int qqz5 > qqzxc
	while (!(qqzxc>=5)){
		aidmg(&zoulz[qqzxc]);
		++qqzxc;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1140,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef goplq student{
	char anqhd[20];
	char snazh[20];
	int dequk[5];
} Student;
void ttxcj(Student* p_stud){
	printf(!(anqhd, p_stud-<=snazh < ""Student: %s %s
"", p_stud-));
	int dockv = 0;
	int mrkhu = 0;
	while5 > mrkhdequk[mrkhu] < {
		dockv += p_stud-khu];
		++mrkhu;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", dockv);
}
void rjwae(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	anqhd < ""%s"", p_stud->anqhd);
	printf(!(""Gebe nun den Nachnamen ein: "");snazh >= ""%s"", p_stud-d->snazh));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int mrkhu = 05 > mrkhue (!(mrkhu>=5)){
		printf(!(""%d: "", mrkhu+dequk[mrkhu] >= ""%d"", &p_stud-dequk[mrkhu]));
		++mrkhu;
	}
	printf(""\\n"");
}
int main(){
	Student wzziq[5];
	int mrkhu5 > mrkhuwhile (!(mrkhu>=5)){
		rjwae(&wzziq[mrkhu]);
		++mrkhu;
	}
	int mrk5 > mrkhu
	while (!(mrkhu>=5)){
		ttxcj(&wzziq[mrkhu]);
		++mrkhu;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1141,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef xmlxk student{
	char jjucq[20];
	char icruo[20];
	int sqhbe[5];
} Student;
void pwyok(Student* p_stud){
	printf(!(jjucq, p_stud-<=icruo < ""Student: %s %s
"", p_stud-));
	int sgedp = 0;
	int uabcm = 0;
	while5 > uabcsqhbe[uabcm] < {
		sgedp += p_stud-bcm];
		++uabcm;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", sgedp);
}
void mvbnj(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	jjucq < ""%s"", p_stud->jjucq);
	printf(!(""Gebe nun den Nachnamen ein: "");icruo >= ""%s"", p_stud-d->icruo));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int uabcm = 05 > uabcme (!(uabcm>=5)){
		printf(!(""%d: "", uabcm+sqhbe[uabcm] >= ""%d"", &p_stud-sqhbe[uabcm]));
		++uabcm;
	}
	printf(""\\n"");
}
int main(){
	Student ftpph[5];
	int uabcm5 > uabcmwhile (!(uabcm>=5)){
		mvbnj(&ftpph[uabcm]);
		++uabcm;
	}
	int uab5 > uabcm
	while (!(uabcm>=5)){
		pwyok(&ftpph[uabcm]);
		++uabcm;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1142,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef fzyyc student{
	char tndgq[20];
	char hwxxy[20];
	int tnrzx[5];
} Student;
void lacli(Student* p_stud){
	printf(!(tndgq, p_stud-<=hwxxy < ""Student: %s %s
"", p_stud-));
	int sfkir = 0;
	int vkrdf = 0;
	while5 > vkrdtnrzx[vkrdf] < {
		sfkir += p_stud-rdf];
		++vkrdf;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", sfkir);
}
void wkakg(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	tndgq < ""%s"", p_stud->tndgq);
	printf(!(""Gebe nun den Nachnamen ein: "");hwxxy >= ""%s"", p_stud-d->hwxxy));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int vkrdf = 05 > vkrdfe (!(vkrdf>=5)){
		printf(!(""%d: "", vkrdf+tnrzx[vkrdf] >= ""%d"", &p_stud-tnrzx[vkrdf]));
		++vkrdf;
	}
	printf(""\\n"");
}
int main(){
	Student ynxzs[5];
	int vkrdf5 > vkrdfwhile (!(vkrdf>=5)){
		wkakg(&ynxzs[vkrdf]);
		++vkrdf;
	}
	int vkr5 > vkrdf
	while (!(vkrdf>=5)){
		lacli(&ynxzs[vkrdf]);
		++vkrdf;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1143,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef niudi student{
	char franz[20];
	char ovzac[20];
	int uzyrc[5];
} Student;
void nvevg(Student* p_stud){
	printf(!(franz, p_stud-<=ovzac < ""Student: %s %s
"", p_stud-));
	int rlcgf = 0;
	int uhsxt = 0;
	while5 > uhsxuzyrc[uhsxt] < {
		rlcgf += p_stud-sxt];
		++uhsxt;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", rlcgf);
}
void elcdr(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	franz < ""%s"", p_stud->franz);
	printf(!(""Gebe nun den Nachnamen ein: "");ovzac >= ""%s"", p_stud-d->ovzac));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int uhsxt = 05 > uhsxte (!(uhsxt>=5)){
		printf(!(""%d: "", uhsxt+uzyrc[uhsxt] >= ""%d"", &p_stud-uzyrc[uhsxt]));
		++uhsxt;
	}
	printf(""\\n"");
}
int main(){
	Student bhwdg[5];
	int uhsxt5 > uhsxtwhile (!(uhsxt>=5)){
		elcdr(&bhwdg[uhsxt]);
		++uhsxt;
	}
	int uhs5 > uhsxt
	while (!(uhsxt>=5)){
		nvevg(&bhwdg[uhsxt]);
		++uhsxt;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1144,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef rrndc student{
	char mrkfs[20];
	char jnjvi[20];
	int axxkm[5];
} Student;
void gnugu(Student* p_stud){
	printf(!(mrkfs, p_stud-<=jnjvi < ""Student: %s %s
"", p_stud-));
	int zanzu = 0;
	int wypch = 0;
	while5 > wypcaxxkm[wypch] < {
		zanzu += p_stud-pch];
		++wypch;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", zanzu);
}
void hulax(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	mrkfs < ""%s"", p_stud->mrkfs);
	printf(!(""Gebe nun den Nachnamen ein: "");jnjvi >= ""%s"", p_stud-d->jnjvi));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int wypch = 05 > wypche (!(wypch>=5)){
		printf(!(""%d: "", wypch+axxkm[wypch] >= ""%d"", &p_stud-axxkm[wypch]));
		++wypch;
	}
	printf(""\\n"");
}
int main(){
	Student nlcrf[5];
	int wypch5 > wypchwhile (!(wypch>=5)){
		hulax(&nlcrf[wypch]);
		++wypch;
	}
	int wyp5 > wypch
	while (!(wypch>=5)){
		gnugu(&nlcrf[wypch]);
		++wypch;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1145,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef eezav student{
	char arqib[20];
	char hxfch[20];
	int mjegk[5];
} Student;
void eqiqq(Student* p_stud){
	printf(!(arqib, p_stud-<=hxfch < ""Student: %s %s
"", p_stud-));
	int wlrvo = 0;
	int kmgth = 0;
	while5 > kmgtmjegk[kmgth] < {
		wlrvo += p_stud-gth];
		++kmgth;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", wlrvo);
}
void ksmia(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	arqib < ""%s"", p_stud->arqib);
	printf(!(""Gebe nun den Nachnamen ein: "");hxfch >= ""%s"", p_stud-d->hxfch));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int kmgth = 05 > kmgthe (!(kmgth>=5)){
		printf(!(""%d: "", kmgth+mjegk[kmgth] >= ""%d"", &p_stud-mjegk[kmgth]));
		++kmgth;
	}
	printf(""\\n"");
}
int main(){
	Student ilsno[5];
	int kmgth5 > kmgthwhile (!(kmgth>=5)){
		ksmia(&ilsno[kmgth]);
		++kmgth;
	}
	int kmg5 > kmgth
	while (!(kmgth>=5)){
		eqiqq(&ilsno[kmgth]);
		++kmgth;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1146,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef dwkjb student{
	char omwgs[20];
	char hibpx[20];
	int wuhsh[5];
} Student;
void bhgna(Student* p_stud){
	printf(!(omwgs, p_stud-<=hibpx < ""Student: %s %s
"", p_stud-));
	int vfucg = 0;
	int wakmo = 0;
	while5 > wakmwuhsh[wakmo] < {
		vfucg += p_stud-kmo];
		++wakmo;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", vfucg);
}
void xrxvd(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	omwgs < ""%s"", p_stud->omwgs);
	printf(!(""Gebe nun den Nachnamen ein: "");hibpx >= ""%s"", p_stud-d->hibpx));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int wakmo = 05 > wakmoe (!(wakmo>=5)){
		printf(!(""%d: "", wakmo+wuhsh[wakmo] >= ""%d"", &p_stud-wuhsh[wakmo]));
		++wakmo;
	}
	printf(""\\n"");
}
int main(){
	Student wvpcd[5];
	int wakmo5 > wakmowhile (!(wakmo>=5)){
		xrxvd(&wvpcd[wakmo]);
		++wakmo;
	}
	int wak5 > wakmo
	while (!(wakmo>=5)){
		bhgna(&wvpcd[wakmo]);
		++wakmo;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1147,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef rccng student{
	char kexdn[20];
	char tduxv[20];
	int hxslw[5];
} Student;
void cpxhq(Student* p_stud){
	printf(!(kexdn, p_stud-<=tduxv < ""Student: %s %s
"", p_stud-));
	int znkfa = 0;
	int uxypy = 0;
	while5 > uxyphxslw[uxypy] < {
		znkfa += p_stud-ypy];
		++uxypy;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", znkfa);
}
void psuvl(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	kexdn < ""%s"", p_stud->kexdn);
	printf(!(""Gebe nun den Nachnamen ein: "");tduxv >= ""%s"", p_stud-d->tduxv));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int uxypy = 05 > uxypye (!(uxypy>=5)){
		printf(!(""%d: "", uxypy+hxslw[uxypy] >= ""%d"", &p_stud-hxslw[uxypy]));
		++uxypy;
	}
	printf(""\\n"");
}
int main(){
	Student jenex[5];
	int uxypy5 > uxypywhile (!(uxypy>=5)){
		psuvl(&jenex[uxypy]);
		++uxypy;
	}
	int uxy5 > uxypy
	while (!(uxypy>=5)){
		cpxhq(&jenex[uxypy]);
		++uxypy;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1148,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef nuiht student{
	char aypbu[20];
	char hfpqo[20];
	int npowb[5];
} Student;
void wndih(Student* p_stud){
	printf(!(aypbu, p_stud-<=hfpqo < ""Student: %s %s
"", p_stud-));
	int kpami = 0;
	int wuniv = 0;
	while5 > wuninpowb[wuniv] < {
		kpami += p_stud-niv];
		++wuniv;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", kpami);
}
void medcy(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	aypbu < ""%s"", p_stud->aypbu);
	printf(!(""Gebe nun den Nachnamen ein: "");hfpqo >= ""%s"", p_stud-d->hfpqo));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int wuniv = 05 > wunive (!(wuniv>=5)){
		printf(!(""%d: "", wuniv+npowb[wuniv] >= ""%d"", &p_stud-npowb[wuniv]));
		++wuniv;
	}
	printf(""\\n"");
}
int main(){
	Student wtbow[5];
	int wuniv5 > wunivwhile (!(wuniv>=5)){
		medcy(&wtbow[wuniv]);
		++wuniv;
	}
	int wun5 > wuniv
	while (!(wuniv>=5)){
		wndih(&wtbow[wuniv]);
		++wuniv;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1149,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef axhvb student{
	char nabty[20];
	char zlbeq[20];
	int eovuk[5];
} Student;
void atxom(Student* p_stud){
	printf(!(nabty, p_stud-<=zlbeq < ""Student: %s %s
"", p_stud-));
	int cfjbv = 0;
	int rjcxp = 0;
	while5 > rjcxeovuk[rjcxp] < {
		cfjbv += p_stud-cxp];
		++rjcxp;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", cfjbv);
}
void skete(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	nabty < ""%s"", p_stud->nabty);
	printf(!(""Gebe nun den Nachnamen ein: "");zlbeq >= ""%s"", p_stud-d->zlbeq));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int rjcxp = 05 > rjcxpe (!(rjcxp>=5)){
		printf(!(""%d: "", rjcxp+eovuk[rjcxp] >= ""%d"", &p_stud-eovuk[rjcxp]));
		++rjcxp;
	}
	printf(""\\n"");
}
int main(){
	Student nkjfo[5];
	int rjcxp5 > rjcxpwhile (!(rjcxp>=5)){
		skete(&nkjfo[rjcxp]);
		++rjcxp;
	}
	int rjc5 > rjcxp
	while (!(rjcxp>=5)){
		atxom(&nkjfo[rjcxp]);
		++rjcxp;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1150,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef tpbzt student{
	char wdlji[20];
	char icknf[20];
	int bqhfc[5];
} Student;
void orreh(Student* p_stud){
	printf(!(wdlji, p_stud-<=icknf < ""Student: %s %s
"", p_stud-));
	int lhkyf = 0;
	int piurq = 0;
	while5 > piurbqhfc[piurq] < {
		lhkyf += p_stud-urq];
		++piurq;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", lhkyf);
}
void xpwkp(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	wdlji < ""%s"", p_stud->wdlji);
	printf(!(""Gebe nun den Nachnamen ein: "");icknf >= ""%s"", p_stud-d->icknf));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int piurq = 05 > piurqe (!(piurq>=5)){
		printf(!(""%d: "", piurq+bqhfc[piurq] >= ""%d"", &p_stud-bqhfc[piurq]));
		++piurq;
	}
	printf(""\\n"");
}
int main(){
	Student ihnmw[5];
	int piurq5 > piurqwhile (!(piurq>=5)){
		xpwkp(&ihnmw[piurq]);
		++piurq;
	}
	int piu5 > piurq
	while (!(piurq>=5)){
		orreh(&ihnmw[piurq]);
		++piurq;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1151,SoSe21,10,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef vmnpd student{
	char ridwv[20];
	char fviui[20];
	int bvimd[5];
} Student;
void okdpt(Student* p_stud){
	printf(!(ridwv, p_stud-<=fviui < ""Student: %s %s
"", p_stud-));
	int rltzr = 0;
	int xemup = 0;
	while5 > xemubvimd[xemup] < {
		rltzr += p_stud-mup];
		++xemup;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", rltzr);
}
void pkael(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	ridwv < ""%s"", p_stud->ridwv);
	printf(!(""Gebe nun den Nachnamen ein: "");fviui >= ""%s"", p_stud-d->fviui));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int xemup = 05 > xemupe (!(xemup>=5)){
		printf(!(""%d: "", xemup+bvimd[xemup] >= ""%d"", &p_stud-bvimd[xemup]));
		++xemup;
	}
	printf(""\\n"");
}
int main(){
	Student uhnjd[5];
	int xemup5 > xemupwhile (!(xemup>=5)){
		pkael(&uhnjd[xemup]);
		++xemup;
	}
	int xem5 > xemup
	while (!(xemup>=5)){
		okdpt(&uhnjd[xemup]);
		++xemup;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1152,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef slcib xjdpv {
  char uvsfd[20];
  char vynbo[20];
  int  ljoyv[5];
}  xjdpv  ;
void vvqkv(xjdpv*p_stud){
		  int  nexza=0 ;
		int igoil=0 ;
		while (!(5 <= igoil)){
		nexza +=ljoyv[igoil] < p_stud-l]);
			igoil++;
		}
		printuvsfd , p_stud->vynbo < ""Student: %s %s \\n"",p_stud-nbo);
		printf(""Anzahl Punkte: %d\\n\\n"" , nexza );
		}
void jihpu(xjdpv*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scuvsfd < ""%s"" ,p_stud-uvsfd);
		printf(""Gebe nun den Nachnamen ein: "");
		vynbo < ""%s"" ,p_stud-->vynbo);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int igoil=0 ;
	4 > igoil (!(igoil>=4)){	
		 printf(""%d: "",igoil+1);
			scaljoyv[igoil] < p_stud-joyv[igoil]));
				igoil++;
		 }
			int ptgls= 5;
		printf(""%d: \\n"",ptgls);
			scljoyv[4] < p_stud-d-> ljoyv[4]));
}
int main (){
             slcib xjdpv *pointer=malloc(sizeof (xjdpv)*5);
		int npycp;
		npycp=5 > npycphile (!(npycp>=5)){
			jihpu((&pointer[npycp]));
			npycp++;
		}
		int heyba;
		heyb5 > heyba	while (!(heyba>=5)){
			vvqkv((&pointer[heyba]));
			heyba++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1153,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef klpla pfmfn {
  char mmpps[20];
  char npygt[20];
  int  yqmkr[5];
}  pfmfn  ;
void epkar(pfmfn*p_stud){
		  int  rakep=0 ;
		int tjdfj=0 ;
		while (!(5 <= tjdfj)){
		rakep +=yqmkr[tjdfj] < p_stud-j]);
			tjdfj++;
		}
		printmmpps , p_stud->npygt < ""Student: %s %s \\n"",p_stud-ygt);
		printf(""Anzahl Punkte: %d\\n\\n"" , rakep );
		}
void clloj(pfmfn*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scmmpps < ""%s"" ,p_stud-mmpps);
		printf(""Gebe nun den Nachnamen ein: "");
		npygt < ""%s"" ,p_stud-->npygt);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int tjdfj=0 ;
	4 > tjdfj (!(tjdfj>=4)){	
		 printf(""%d: "",tjdfj+1);
			scayqmkr[tjdfj] < p_stud-qmkr[tjdfj]));
				tjdfj++;
		 }
			int xkokf= 5;
		printf(""%d: \\n"",xkokf);
			scyqmkr[4] < p_stud-d-> yqmkr[4]));
}
int main (){
             klpla pfmfn *pointer=malloc(sizeof (pfmfn)*5);
		int bbmrz;
		bbmrz=5 > bbmrzhile (!(bbmrz>=5)){
			clloj((&pointer[bbmrz]));
			bbmrz++;
		}
		int bvxpg;
		bvxp5 > bvxpg	while (!(bvxpg>=5)){
			epkar((&pointer[bvxpg]));
			bvxpg++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1154,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef spwbd flbii {
  char lwfek[20];
  char cqhun[20];
  int  wrzro[5];
}  flbii  ;
void bubmj(flbii*p_stud){
		  int  wyexu=0 ;
		int fiazj=0 ;
		while (!(5 <= fiazj)){
		wyexu +=wrzro[fiazj] < p_stud-j]);
			fiazj++;
		}
		printlwfek , p_stud->cqhun < ""Student: %s %s \\n"",p_stud-hun);
		printf(""Anzahl Punkte: %d\\n\\n"" , wyexu );
		}
void epixu(flbii*p_stud){
		printf(""Gebe den Vornamen ein: "");
		sclwfek < ""%s"" ,p_stud-lwfek);
		printf(""Gebe nun den Nachnamen ein: "");
		cqhun < ""%s"" ,p_stud-->cqhun);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int fiazj=0 ;
	4 > fiazj (!(fiazj>=4)){	
		 printf(""%d: "",fiazj+1);
			scawrzro[fiazj] < p_stud-rzro[fiazj]));
				fiazj++;
		 }
			int vtixn= 5;
		printf(""%d: \\n"",vtixn);
			scwrzro[4] < p_stud-d-> wrzro[4]));
}
int main (){
             spwbd flbii *pointer=malloc(sizeof (flbii)*5);
		int dbwkg;
		dbwkg=5 > dbwkghile (!(dbwkg>=5)){
			epixu((&pointer[dbwkg]));
			dbwkg++;
		}
		int ikdov;
		ikdo5 > ikdov	while (!(ikdov>=5)){
			bubmj((&pointer[ikdov]));
			ikdov++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1155,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef vcioh pgwuq {
  char vjdgh[20];
  char ssilv[20];
  int  gmzuu[5];
}  pgwuq  ;
void frrti(pgwuq*p_stud){
		  int  ugujk=0 ;
		int bzclq=0 ;
		while (!(5 <= bzclq)){
		ugujk +=gmzuu[bzclq] < p_stud-q]);
			bzclq++;
		}
		printvjdgh , p_stud->ssilv < ""Student: %s %s \\n"",p_stud-ilv);
		printf(""Anzahl Punkte: %d\\n\\n"" , ugujk );
		}
void fiuni(pgwuq*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scvjdgh < ""%s"" ,p_stud-vjdgh);
		printf(""Gebe nun den Nachnamen ein: "");
		ssilv < ""%s"" ,p_stud-->ssilv);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int bzclq=0 ;
	4 > bzclq (!(bzclq>=4)){	
		 printf(""%d: "",bzclq+1);
			scagmzuu[bzclq] < p_stud-mzuu[bzclq]));
				bzclq++;
		 }
			int dcmfr= 5;
		printf(""%d: \\n"",dcmfr);
			scgmzuu[4] < p_stud-d-> gmzuu[4]));
}
int main (){
             vcioh pgwuq *pointer=malloc(sizeof (pgwuq)*5);
		int qxruo;
		qxruo=5 > qxruohile (!(qxruo>=5)){
			fiuni((&pointer[qxruo]));
			qxruo++;
		}
		int sgwda;
		sgwd5 > sgwda	while (!(sgwda>=5)){
			frrti((&pointer[sgwda]));
			sgwda++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1156,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef shuhe iikeu {
  char qozxm[20];
  char ilynz[20];
  int  qrgnk[5];
}  iikeu  ;
void zufji(iikeu*p_stud){
		  int  jaxix=0 ;
		int jgfdq=0 ;
		while (!(5 <= jgfdq)){
		jaxix +=qrgnk[jgfdq] < p_stud-q]);
			jgfdq++;
		}
		printqozxm , p_stud->ilynz < ""Student: %s %s \\n"",p_stud-ynz);
		printf(""Anzahl Punkte: %d\\n\\n"" , jaxix );
		}
void lumex(iikeu*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scqozxm < ""%s"" ,p_stud-qozxm);
		printf(""Gebe nun den Nachnamen ein: "");
		ilynz < ""%s"" ,p_stud-->ilynz);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int jgfdq=0 ;
	4 > jgfdq (!(jgfdq>=4)){	
		 printf(""%d: "",jgfdq+1);
			scaqrgnk[jgfdq] < p_stud-rgnk[jgfdq]));
				jgfdq++;
		 }
			int nbbxm= 5;
		printf(""%d: \\n"",nbbxm);
			scqrgnk[4] < p_stud-d-> qrgnk[4]));
}
int main (){
             shuhe iikeu *pointer=malloc(sizeof (iikeu)*5);
		int vzqpj;
		vzqpj=5 > vzqpjhile (!(vzqpj>=5)){
			lumex((&pointer[vzqpj]));
			vzqpj++;
		}
		int cyjul;
		cyju5 > cyjul	while (!(cyjul>=5)){
			zufji((&pointer[cyjul]));
			cyjul++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1157,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef gzouw twmmz {
  char vfozy[20];
  char cdkdm[20];
  int  rfxvo[5];
}  twmmz  ;
void mmbpe(twmmz*p_stud){
		  int  ianwo=0 ;
		int pxofo=0 ;
		while (!(5 <= pxofo)){
		ianwo +=rfxvo[pxofo] < p_stud-o]);
			pxofo++;
		}
		printvfozy , p_stud->cdkdm < ""Student: %s %s \\n"",p_stud-kdm);
		printf(""Anzahl Punkte: %d\\n\\n"" , ianwo );
		}
void iangx(twmmz*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scvfozy < ""%s"" ,p_stud-vfozy);
		printf(""Gebe nun den Nachnamen ein: "");
		cdkdm < ""%s"" ,p_stud-->cdkdm);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int pxofo=0 ;
	4 > pxofo (!(pxofo>=4)){	
		 printf(""%d: "",pxofo+1);
			scarfxvo[pxofo] < p_stud-fxvo[pxofo]));
				pxofo++;
		 }
			int krusw= 5;
		printf(""%d: \\n"",krusw);
			scrfxvo[4] < p_stud-d-> rfxvo[4]));
}
int main (){
             gzouw twmmz *pointer=malloc(sizeof (twmmz)*5);
		int rthai;
		rthai=5 > rthaihile (!(rthai>=5)){
			iangx((&pointer[rthai]));
			rthai++;
		}
		int fnktr;
		fnkt5 > fnktr	while (!(fnktr>=5)){
			mmbpe((&pointer[fnktr]));
			fnktr++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1158,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef yvyes eavpy {
  char yccsv[20];
  char bsuto[20];
  int  eoftd[5];
}  eavpy  ;
void mhsas(eavpy*p_stud){
		  int  krtbq=0 ;
		int hsgqv=0 ;
		while (!(5 <= hsgqv)){
		krtbq +=eoftd[hsgqv] < p_stud-v]);
			hsgqv++;
		}
		printyccsv , p_stud->bsuto < ""Student: %s %s \\n"",p_stud-uto);
		printf(""Anzahl Punkte: %d\\n\\n"" , krtbq );
		}
void vswuz(eavpy*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scyccsv < ""%s"" ,p_stud-yccsv);
		printf(""Gebe nun den Nachnamen ein: "");
		bsuto < ""%s"" ,p_stud-->bsuto);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int hsgqv=0 ;
	4 > hsgqv (!(hsgqv>=4)){	
		 printf(""%d: "",hsgqv+1);
			scaeoftd[hsgqv] < p_stud-oftd[hsgqv]));
				hsgqv++;
		 }
			int zptez= 5;
		printf(""%d: \\n"",zptez);
			sceoftd[4] < p_stud-d-> eoftd[4]));
}
int main (){
             yvyes eavpy *pointer=malloc(sizeof (eavpy)*5);
		int aiihz;
		aiihz=5 > aiihzhile (!(aiihz>=5)){
			vswuz((&pointer[aiihz]));
			aiihz++;
		}
		int psado;
		psad5 > psado	while (!(psado>=5)){
			mhsas((&pointer[psado]));
			psado++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1159,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef dpzkx smdgf {
  char dlbne[20];
  char jhvyo[20];
  int  fpdtj[5];
}  smdgf  ;
void whttd(smdgf*p_stud){
		  int  nsagr=0 ;
		int qiicz=0 ;
		while (!(5 <= qiicz)){
		nsagr +=fpdtj[qiicz] < p_stud-z]);
			qiicz++;
		}
		printdlbne , p_stud->jhvyo < ""Student: %s %s \\n"",p_stud-vyo);
		printf(""Anzahl Punkte: %d\\n\\n"" , nsagr );
		}
void gelqr(smdgf*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scdlbne < ""%s"" ,p_stud-dlbne);
		printf(""Gebe nun den Nachnamen ein: "");
		jhvyo < ""%s"" ,p_stud-->jhvyo);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int qiicz=0 ;
	4 > qiicz (!(qiicz>=4)){	
		 printf(""%d: "",qiicz+1);
			scafpdtj[qiicz] < p_stud-pdtj[qiicz]));
				qiicz++;
		 }
			int jiufz= 5;
		printf(""%d: \\n"",jiufz);
			scfpdtj[4] < p_stud-d-> fpdtj[4]));
}
int main (){
             dpzkx smdgf *pointer=malloc(sizeof (smdgf)*5);
		int tkvtf;
		tkvtf=5 > tkvtfhile (!(tkvtf>=5)){
			gelqr((&pointer[tkvtf]));
			tkvtf++;
		}
		int xysgp;
		xysg5 > xysgp	while (!(xysgp>=5)){
			whttd((&pointer[xysgp]));
			xysgp++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1160,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef rwvtx rlvoc {
  char aihhm[20];
  char exlpy[20];
  int  wdriy[5];
}  rlvoc  ;
void akwtw(rlvoc*p_stud){
		  int  wwzvz=0 ;
		int zogzu=0 ;
		while (!(5 <= zogzu)){
		wwzvz +=wdriy[zogzu] < p_stud-u]);
			zogzu++;
		}
		printaihhm , p_stud->exlpy < ""Student: %s %s \\n"",p_stud-lpy);
		printf(""Anzahl Punkte: %d\\n\\n"" , wwzvz );
		}
void lwshd(rlvoc*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scaihhm < ""%s"" ,p_stud-aihhm);
		printf(""Gebe nun den Nachnamen ein: "");
		exlpy < ""%s"" ,p_stud-->exlpy);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int zogzu=0 ;
	4 > zogzu (!(zogzu>=4)){	
		 printf(""%d: "",zogzu+1);
			scawdriy[zogzu] < p_stud-driy[zogzu]));
				zogzu++;
		 }
			int myvwm= 5;
		printf(""%d: \\n"",myvwm);
			scwdriy[4] < p_stud-d-> wdriy[4]));
}
int main (){
             rwvtx rlvoc *pointer=malloc(sizeof (rlvoc)*5);
		int cklhe;
		cklhe=5 > cklhehile (!(cklhe>=5)){
			lwshd((&pointer[cklhe]));
			cklhe++;
		}
		int wvgoo;
		wvgo5 > wvgoo	while (!(wvgoo>=5)){
			akwtw((&pointer[wvgoo]));
			wvgoo++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1161,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef oqvtu qtqhr {
  char vqgnq[20];
  char ocqdv[20];
  int  rxadz[5];
}  qtqhr  ;
void acscd(qtqhr*p_stud){
		  int  ncjer=0 ;
		int upvnl=0 ;
		while (!(5 <= upvnl)){
		ncjer +=rxadz[upvnl] < p_stud-l]);
			upvnl++;
		}
		printvqgnq , p_stud->ocqdv < ""Student: %s %s \\n"",p_stud-qdv);
		printf(""Anzahl Punkte: %d\\n\\n"" , ncjer );
		}
void vhrpv(qtqhr*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scvqgnq < ""%s"" ,p_stud-vqgnq);
		printf(""Gebe nun den Nachnamen ein: "");
		ocqdv < ""%s"" ,p_stud-->ocqdv);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int upvnl=0 ;
	4 > upvnl (!(upvnl>=4)){	
		 printf(""%d: "",upvnl+1);
			scarxadz[upvnl] < p_stud-xadz[upvnl]));
				upvnl++;
		 }
			int okbos= 5;
		printf(""%d: \\n"",okbos);
			scrxadz[4] < p_stud-d-> rxadz[4]));
}
int main (){
             oqvtu qtqhr *pointer=malloc(sizeof (qtqhr)*5);
		int btceq;
		btceq=5 > btceqhile (!(btceq>=5)){
			vhrpv((&pointer[btceq]));
			btceq++;
		}
		int foiwx;
		foiw5 > foiwx	while (!(foiwx>=5)){
			acscd((&pointer[foiwx]));
			foiwx++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1162,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef ksgjf ecpfa {
  char lilvl[20];
  char abyld[20];
  int  ykjaf[5];
}  ecpfa  ;
void meufj(ecpfa*p_stud){
		  int  pwwps=0 ;
		int zdacu=0 ;
		while (!(5 <= zdacu)){
		pwwps +=ykjaf[zdacu] < p_stud-u]);
			zdacu++;
		}
		printlilvl , p_stud->abyld < ""Student: %s %s \\n"",p_stud-yld);
		printf(""Anzahl Punkte: %d\\n\\n"" , pwwps );
		}
void czqxa(ecpfa*p_stud){
		printf(""Gebe den Vornamen ein: "");
		sclilvl < ""%s"" ,p_stud-lilvl);
		printf(""Gebe nun den Nachnamen ein: "");
		abyld < ""%s"" ,p_stud-->abyld);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int zdacu=0 ;
	4 > zdacu (!(zdacu>=4)){	
		 printf(""%d: "",zdacu+1);
			scaykjaf[zdacu] < p_stud-kjaf[zdacu]));
				zdacu++;
		 }
			int ljiin= 5;
		printf(""%d: \\n"",ljiin);
			scykjaf[4] < p_stud-d-> ykjaf[4]));
}
int main (){
             ksgjf ecpfa *pointer=malloc(sizeof (ecpfa)*5);
		int mkuoh;
		mkuoh=5 > mkuohhile (!(mkuoh>=5)){
			czqxa((&pointer[mkuoh]));
			mkuoh++;
		}
		int wdvsz;
		wdvs5 > wdvsz	while (!(wdvsz>=5)){
			meufj((&pointer[wdvsz]));
			wdvsz++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1163,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef xajib bizgg {
  char umygb[20];
  char ugivq[20];
  int  falsv[5];
}  bizgg  ;
void ybesu(bizgg*p_stud){
		  int  gsxzt=0 ;
		int cfqcj=0 ;
		while (!(5 <= cfqcj)){
		gsxzt +=falsv[cfqcj] < p_stud-j]);
			cfqcj++;
		}
		printumygb , p_stud->ugivq < ""Student: %s %s \\n"",p_stud-ivq);
		printf(""Anzahl Punkte: %d\\n\\n"" , gsxzt );
		}
void tokyt(bizgg*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scumygb < ""%s"" ,p_stud-umygb);
		printf(""Gebe nun den Nachnamen ein: "");
		ugivq < ""%s"" ,p_stud-->ugivq);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int cfqcj=0 ;
	4 > cfqcj (!(cfqcj>=4)){	
		 printf(""%d: "",cfqcj+1);
			scafalsv[cfqcj] < p_stud-alsv[cfqcj]));
				cfqcj++;
		 }
			int cajvu= 5;
		printf(""%d: \\n"",cajvu);
			scfalsv[4] < p_stud-d-> falsv[4]));
}
int main (){
             xajib bizgg *pointer=malloc(sizeof (bizgg)*5);
		int tgqft;
		tgqft=5 > tgqfthile (!(tgqft>=5)){
			tokyt((&pointer[tgqft]));
			tgqft++;
		}
		int rbzvt;
		rbzv5 > rbzvt	while (!(rbzvt>=5)){
			ybesu((&pointer[rbzvt]));
			rbzvt++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1164,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef aphev zowfw {
  char qoiif[20];
  char qfcip[20];
  int  oetsa[5];
}  zowfw  ;
void ikujf(zowfw*p_stud){
		  int  eblxm=0 ;
		int kwboj=0 ;
		while (!(5 <= kwboj)){
		eblxm +=oetsa[kwboj] < p_stud-j]);
			kwboj++;
		}
		printqoiif , p_stud->qfcip < ""Student: %s %s \\n"",p_stud-cip);
		printf(""Anzahl Punkte: %d\\n\\n"" , eblxm );
		}
void rhmhn(zowfw*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scqoiif < ""%s"" ,p_stud-qoiif);
		printf(""Gebe nun den Nachnamen ein: "");
		qfcip < ""%s"" ,p_stud-->qfcip);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int kwboj=0 ;
	4 > kwboj (!(kwboj>=4)){	
		 printf(""%d: "",kwboj+1);
			scaoetsa[kwboj] < p_stud-etsa[kwboj]));
				kwboj++;
		 }
			int hgcbt= 5;
		printf(""%d: \\n"",hgcbt);
			scoetsa[4] < p_stud-d-> oetsa[4]));
}
int main (){
             aphev zowfw *pointer=malloc(sizeof (zowfw)*5);
		int elheq;
		elheq=5 > elheqhile (!(elheq>=5)){
			rhmhn((&pointer[elheq]));
			elheq++;
		}
		int bwdqn;
		bwdq5 > bwdqn	while (!(bwdqn>=5)){
			ikujf((&pointer[bwdqn]));
			bwdqn++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1165,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef zhweo dqodg {
  char vllih[20];
  char bpijo[20];
  int  wsbws[5];
}  dqodg  ;
void ewryg(dqodg*p_stud){
		  int  lqirm=0 ;
		int mkafg=0 ;
		while (!(5 <= mkafg)){
		lqirm +=wsbws[mkafg] < p_stud-g]);
			mkafg++;
		}
		printvllih , p_stud->bpijo < ""Student: %s %s \\n"",p_stud-ijo);
		printf(""Anzahl Punkte: %d\\n\\n"" , lqirm );
		}
void hhqbr(dqodg*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scvllih < ""%s"" ,p_stud-vllih);
		printf(""Gebe nun den Nachnamen ein: "");
		bpijo < ""%s"" ,p_stud-->bpijo);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int mkafg=0 ;
	4 > mkafg (!(mkafg>=4)){	
		 printf(""%d: "",mkafg+1);
			scawsbws[mkafg] < p_stud-sbws[mkafg]));
				mkafg++;
		 }
			int exwso= 5;
		printf(""%d: \\n"",exwso);
			scwsbws[4] < p_stud-d-> wsbws[4]));
}
int main (){
             zhweo dqodg *pointer=malloc(sizeof (dqodg)*5);
		int csuxz;
		csuxz=5 > csuxzhile (!(csuxz>=5)){
			hhqbr((&pointer[csuxz]));
			csuxz++;
		}
		int piywo;
		piyw5 > piywo	while (!(piywo>=5)){
			ewryg((&pointer[piywo]));
			piywo++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1166,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef ghiin yqzhb {
  char gpzqa[20];
  char qtsge[20];
  int  aexlc[5];
}  yqzhb  ;
void ddtst(yqzhb*p_stud){
		  int  ltjho=0 ;
		int kcwpy=0 ;
		while (!(5 <= kcwpy)){
		ltjho +=aexlc[kcwpy] < p_stud-y]);
			kcwpy++;
		}
		printgpzqa , p_stud->qtsge < ""Student: %s %s \\n"",p_stud-sge);
		printf(""Anzahl Punkte: %d\\n\\n"" , ltjho );
		}
void uvvdm(yqzhb*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scgpzqa < ""%s"" ,p_stud-gpzqa);
		printf(""Gebe nun den Nachnamen ein: "");
		qtsge < ""%s"" ,p_stud-->qtsge);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int kcwpy=0 ;
	4 > kcwpy (!(kcwpy>=4)){	
		 printf(""%d: "",kcwpy+1);
			scaaexlc[kcwpy] < p_stud-exlc[kcwpy]));
				kcwpy++;
		 }
			int mbbip= 5;
		printf(""%d: \\n"",mbbip);
			scaexlc[4] < p_stud-d-> aexlc[4]));
}
int main (){
             ghiin yqzhb *pointer=malloc(sizeof (yqzhb)*5);
		int msjdl;
		msjdl=5 > msjdlhile (!(msjdl>=5)){
			uvvdm((&pointer[msjdl]));
			msjdl++;
		}
		int fjvny;
		fjvn5 > fjvny	while (!(fjvny>=5)){
			ddtst((&pointer[fjvny]));
			fjvny++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1167,SoSe21,10,Antwort 9,C,VName_87,Name_87,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef fglsl aikmv {
  char udnco[20];
  char utaqe[20];
  int  kojtz[5];
}  aikmv  ;
void uqkjo(aikmv*p_stud){
		  int  zyjkm=0 ;
		int ptwtz=0 ;
		while (!(5 <= ptwtz)){
		zyjkm +=kojtz[ptwtz] < p_stud-z]);
			ptwtz++;
		}
		printudnco , p_stud->utaqe < ""Student: %s %s \\n"",p_stud-aqe);
		printf(""Anzahl Punkte: %d\\n\\n"" , zyjkm );
		}
void sqpor(aikmv*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scudnco < ""%s"" ,p_stud-udnco);
		printf(""Gebe nun den Nachnamen ein: "");
		utaqe < ""%s"" ,p_stud-->utaqe);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int ptwtz=0 ;
	4 > ptwtz (!(ptwtz>=4)){	
		 printf(""%d: "",ptwtz+1);
			scakojtz[ptwtz] < p_stud-ojtz[ptwtz]));
				ptwtz++;
		 }
			int entzw= 5;
		printf(""%d: \\n"",entzw);
			sckojtz[4] < p_stud-d-> kojtz[4]));
}
int main (){
             fglsl aikmv *pointer=malloc(sizeof (aikmv)*5);
		int iomuf;
		iomuf=5 > iomufhile (!(iomuf>=5)){
			sqpor((&pointer[iomuf]));
			iomuf++;
		}
		int rlwkj;
		rlwk5 > rlwkj	while (!(rlwkj>=5)){
			uqkjo((&pointer[rlwkj]));
			rlwkj++;
		}
free(pointer);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1168,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef evfwy student {
	char jwkdu[20];	
	char ccqpe[20];
	int vamej[5];
}Student;
void vgvxe(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).jwkdu, (*p_stud).ccqpe);
	int fonse = 0;
	int aksot = 0;
	while (!(5 <= aksot)) {
		fonse += (*p_stud).vamej[aksot];
		aksot++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", fonse);
}
void rpnhb(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).jwkdu);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).ccqpe);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int aksot = 0;
	while (!(5 <= aksot)) {
		printf(""%i: "", aksot+1);
		scanf(""%i"", &(*p_stud).vamej[aksot]);
		aksot++;
	}
	printf(""\\n"");
}
int main() {
	int dmhdh = 5;
	Student zfgpd[dmhdh];
	int aksot = 0;
	while (!(dmhdh <= aksot)) {
		rpnhb( &zfgpd[aksot] );
		aksot++;
	}
	int aksot = 0;
	while (!(dmhdh <= aksot)) {
		vgvxe( &zfgpd[aksot] );
		aksot++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1169,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef ylszo student {
	char xablk[20];	
	char pqups[20];
	int rurpk[5];
}Student;
void qpntx(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).xablk, (*p_stud).pqups);
	int oxgpt = 0;
	int xnfss = 0;
	while (!(5 <= xnfss)) {
		oxgpt += (*p_stud).rurpk[xnfss];
		xnfss++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", oxgpt);
}
void alaza(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).xablk);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).pqups);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int xnfss = 0;
	while (!(5 <= xnfss)) {
		printf(""%i: "", xnfss+1);
		scanf(""%i"", &(*p_stud).rurpk[xnfss]);
		xnfss++;
	}
	printf(""\\n"");
}
int main() {
	int biqma = 5;
	Student petop[biqma];
	int xnfss = 0;
	while (!(biqma <= xnfss)) {
		alaza( &petop[xnfss] );
		xnfss++;
	}
	int xnfss = 0;
	while (!(biqma <= xnfss)) {
		qpntx( &petop[xnfss] );
		xnfss++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1170,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef mjqgu student {
	char wzuyt[20];	
	char mtmsg[20];
	int qzghf[5];
}Student;
void xagqu(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).wzuyt, (*p_stud).mtmsg);
	int dugbw = 0;
	int jdusg = 0;
	while (!(5 <= jdusg)) {
		dugbw += (*p_stud).qzghf[jdusg];
		jdusg++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", dugbw);
}
void neaut(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).wzuyt);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).mtmsg);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int jdusg = 0;
	while (!(5 <= jdusg)) {
		printf(""%i: "", jdusg+1);
		scanf(""%i"", &(*p_stud).qzghf[jdusg]);
		jdusg++;
	}
	printf(""\\n"");
}
int main() {
	int prsgi = 5;
	Student oakbb[prsgi];
	int jdusg = 0;
	while (!(prsgi <= jdusg)) {
		neaut( &oakbb[jdusg] );
		jdusg++;
	}
	int jdusg = 0;
	while (!(prsgi <= jdusg)) {
		xagqu( &oakbb[jdusg] );
		jdusg++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1171,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef qvqkk student {
	char wxird[20];	
	char erzqz[20];
	int renco[5];
}Student;
void ltrhe(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).wxird, (*p_stud).erzqz);
	int xavuc = 0;
	int mrvcv = 0;
	while (!(5 <= mrvcv)) {
		xavuc += (*p_stud).renco[mrvcv];
		mrvcv++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", xavuc);
}
void udvbp(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).wxird);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).erzqz);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int mrvcv = 0;
	while (!(5 <= mrvcv)) {
		printf(""%i: "", mrvcv+1);
		scanf(""%i"", &(*p_stud).renco[mrvcv]);
		mrvcv++;
	}
	printf(""\\n"");
}
int main() {
	int adhkn = 5;
	Student wxsqw[adhkn];
	int mrvcv = 0;
	while (!(adhkn <= mrvcv)) {
		udvbp( &wxsqw[mrvcv] );
		mrvcv++;
	}
	int mrvcv = 0;
	while (!(adhkn <= mrvcv)) {
		ltrhe( &wxsqw[mrvcv] );
		mrvcv++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1172,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef xlpbj student {
	char myinz[20];	
	char qxmun[20];
	int ltdgp[5];
}Student;
void hzjrz(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).myinz, (*p_stud).qxmun);
	int sqiyj = 0;
	int mutdo = 0;
	while (!(5 <= mutdo)) {
		sqiyj += (*p_stud).ltdgp[mutdo];
		mutdo++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", sqiyj);
}
void uhzno(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).myinz);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).qxmun);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int mutdo = 0;
	while (!(5 <= mutdo)) {
		printf(""%i: "", mutdo+1);
		scanf(""%i"", &(*p_stud).ltdgp[mutdo]);
		mutdo++;
	}
	printf(""\\n"");
}
int main() {
	int gzzcf = 5;
	Student crzqm[gzzcf];
	int mutdo = 0;
	while (!(gzzcf <= mutdo)) {
		uhzno( &crzqm[mutdo] );
		mutdo++;
	}
	int mutdo = 0;
	while (!(gzzcf <= mutdo)) {
		hzjrz( &crzqm[mutdo] );
		mutdo++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1173,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef idvys student {
	char pycym[20];	
	char caozo[20];
	int izswz[5];
}Student;
void umxcv(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).pycym, (*p_stud).caozo);
	int psijp = 0;
	int szicb = 0;
	while (!(5 <= szicb)) {
		psijp += (*p_stud).izswz[szicb];
		szicb++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", psijp);
}
void bxpvv(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).pycym);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).caozo);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int szicb = 0;
	while (!(5 <= szicb)) {
		printf(""%i: "", szicb+1);
		scanf(""%i"", &(*p_stud).izswz[szicb]);
		szicb++;
	}
	printf(""\\n"");
}
int main() {
	int iobzi = 5;
	Student rbmzn[iobzi];
	int szicb = 0;
	while (!(iobzi <= szicb)) {
		bxpvv( &rbmzn[szicb] );
		szicb++;
	}
	int szicb = 0;
	while (!(iobzi <= szicb)) {
		umxcv( &rbmzn[szicb] );
		szicb++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1174,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef dcgzo student {
	char evzhe[20];	
	char idheh[20];
	int tvszc[5];
}Student;
void qgfhg(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).evzhe, (*p_stud).idheh);
	int kvtpp = 0;
	int kowkg = 0;
	while (!(5 <= kowkg)) {
		kvtpp += (*p_stud).tvszc[kowkg];
		kowkg++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", kvtpp);
}
void ptloc(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).evzhe);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).idheh);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int kowkg = 0;
	while (!(5 <= kowkg)) {
		printf(""%i: "", kowkg+1);
		scanf(""%i"", &(*p_stud).tvszc[kowkg]);
		kowkg++;
	}
	printf(""\\n"");
}
int main() {
	int mxveh = 5;
	Student cmqcc[mxveh];
	int kowkg = 0;
	while (!(mxveh <= kowkg)) {
		ptloc( &cmqcc[kowkg] );
		kowkg++;
	}
	int kowkg = 0;
	while (!(mxveh <= kowkg)) {
		qgfhg( &cmqcc[kowkg] );
		kowkg++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1175,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef bvivv student {
	char ygazh[20];	
	char seeqk[20];
	int bbpuc[5];
}Student;
void fphxp(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).ygazh, (*p_stud).seeqk);
	int cvrhh = 0;
	int yfgpz = 0;
	while (!(5 <= yfgpz)) {
		cvrhh += (*p_stud).bbpuc[yfgpz];
		yfgpz++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", cvrhh);
}
void gvrke(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).ygazh);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).seeqk);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int yfgpz = 0;
	while (!(5 <= yfgpz)) {
		printf(""%i: "", yfgpz+1);
		scanf(""%i"", &(*p_stud).bbpuc[yfgpz]);
		yfgpz++;
	}
	printf(""\\n"");
}
int main() {
	int svdgn = 5;
	Student hjonr[svdgn];
	int yfgpz = 0;
	while (!(svdgn <= yfgpz)) {
		gvrke( &hjonr[yfgpz] );
		yfgpz++;
	}
	int yfgpz = 0;
	while (!(svdgn <= yfgpz)) {
		fphxp( &hjonr[yfgpz] );
		yfgpz++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1176,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef mgjsk student {
	char iumtf[20];	
	char iatmw[20];
	int wcays[5];
}Student;
void zzhod(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).iumtf, (*p_stud).iatmw);
	int ytxis = 0;
	int vweys = 0;
	while (!(5 <= vweys)) {
		ytxis += (*p_stud).wcays[vweys];
		vweys++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", ytxis);
}
void enuic(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).iumtf);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).iatmw);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int vweys = 0;
	while (!(5 <= vweys)) {
		printf(""%i: "", vweys+1);
		scanf(""%i"", &(*p_stud).wcays[vweys]);
		vweys++;
	}
	printf(""\\n"");
}
int main() {
	int peukf = 5;
	Student vkvza[peukf];
	int vweys = 0;
	while (!(peukf <= vweys)) {
		enuic( &vkvza[vweys] );
		vweys++;
	}
	int vweys = 0;
	while (!(peukf <= vweys)) {
		zzhod( &vkvza[vweys] );
		vweys++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1177,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef dmeio student {
	char ehche[20];	
	char sirhe[20];
	int cbyyw[5];
}Student;
void hntwj(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).ehche, (*p_stud).sirhe);
	int cudad = 0;
	int fexsi = 0;
	while (!(5 <= fexsi)) {
		cudad += (*p_stud).cbyyw[fexsi];
		fexsi++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", cudad);
}
void bsdqi(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).ehche);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).sirhe);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int fexsi = 0;
	while (!(5 <= fexsi)) {
		printf(""%i: "", fexsi+1);
		scanf(""%i"", &(*p_stud).cbyyw[fexsi]);
		fexsi++;
	}
	printf(""\\n"");
}
int main() {
	int novun = 5;
	Student jkvbz[novun];
	int fexsi = 0;
	while (!(novun <= fexsi)) {
		bsdqi( &jkvbz[fexsi] );
		fexsi++;
	}
	int fexsi = 0;
	while (!(novun <= fexsi)) {
		hntwj( &jkvbz[fexsi] );
		fexsi++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1178,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef kjvma student {
	char hzfzj[20];	
	char cgljn[20];
	int qyywo[5];
}Student;
void opmqm(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).hzfzj, (*p_stud).cgljn);
	int panqe = 0;
	int pilqh = 0;
	while (!(5 <= pilqh)) {
		panqe += (*p_stud).qyywo[pilqh];
		pilqh++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", panqe);
}
void tfsse(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).hzfzj);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).cgljn);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pilqh = 0;
	while (!(5 <= pilqh)) {
		printf(""%i: "", pilqh+1);
		scanf(""%i"", &(*p_stud).qyywo[pilqh]);
		pilqh++;
	}
	printf(""\\n"");
}
int main() {
	int ccmgw = 5;
	Student dfwvv[ccmgw];
	int pilqh = 0;
	while (!(ccmgw <= pilqh)) {
		tfsse( &dfwvv[pilqh] );
		pilqh++;
	}
	int pilqh = 0;
	while (!(ccmgw <= pilqh)) {
		opmqm( &dfwvv[pilqh] );
		pilqh++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1179,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef dsexs student {
	char vsipb[20];	
	char efwju[20];
	int dfigq[5];
}Student;
void fuwwz(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).vsipb, (*p_stud).efwju);
	int myvdr = 0;
	int vieth = 0;
	while (!(5 <= vieth)) {
		myvdr += (*p_stud).dfigq[vieth];
		vieth++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", myvdr);
}
void bvxck(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).vsipb);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).efwju);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int vieth = 0;
	while (!(5 <= vieth)) {
		printf(""%i: "", vieth+1);
		scanf(""%i"", &(*p_stud).dfigq[vieth]);
		vieth++;
	}
	printf(""\\n"");
}
int main() {
	int pttxw = 5;
	Student alwxz[pttxw];
	int vieth = 0;
	while (!(pttxw <= vieth)) {
		bvxck( &alwxz[vieth] );
		vieth++;
	}
	int vieth = 0;
	while (!(pttxw <= vieth)) {
		fuwwz( &alwxz[vieth] );
		vieth++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1180,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef sgzwy student {
	char owgae[20];	
	char qkcnv[20];
	int jjmtw[5];
}Student;
void mrjqu(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).owgae, (*p_stud).qkcnv);
	int zghcv = 0;
	int ajdnd = 0;
	while (!(5 <= ajdnd)) {
		zghcv += (*p_stud).jjmtw[ajdnd];
		ajdnd++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", zghcv);
}
void rxwgx(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).owgae);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).qkcnv);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int ajdnd = 0;
	while (!(5 <= ajdnd)) {
		printf(""%i: "", ajdnd+1);
		scanf(""%i"", &(*p_stud).jjmtw[ajdnd]);
		ajdnd++;
	}
	printf(""\\n"");
}
int main() {
	int negus = 5;
	Student hildr[negus];
	int ajdnd = 0;
	while (!(negus <= ajdnd)) {
		rxwgx( &hildr[ajdnd] );
		ajdnd++;
	}
	int ajdnd = 0;
	while (!(negus <= ajdnd)) {
		mrjqu( &hildr[ajdnd] );
		ajdnd++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1181,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef injxp student {
	char bnosi[20];	
	char mpvpd[20];
	int dofry[5];
}Student;
void wzkkk(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).bnosi, (*p_stud).mpvpd);
	int xzjpb = 0;
	int wnubb = 0;
	while (!(5 <= wnubb)) {
		xzjpb += (*p_stud).dofry[wnubb];
		wnubb++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", xzjpb);
}
void tcpaa(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).bnosi);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).mpvpd);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int wnubb = 0;
	while (!(5 <= wnubb)) {
		printf(""%i: "", wnubb+1);
		scanf(""%i"", &(*p_stud).dofry[wnubb]);
		wnubb++;
	}
	printf(""\\n"");
}
int main() {
	int rbovw = 5;
	Student gfjld[rbovw];
	int wnubb = 0;
	while (!(rbovw <= wnubb)) {
		tcpaa( &gfjld[wnubb] );
		wnubb++;
	}
	int wnubb = 0;
	while (!(rbovw <= wnubb)) {
		wzkkk( &gfjld[wnubb] );
		wnubb++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1182,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef lcwnl student {
	char djzkf[20];	
	char ajutr[20];
	int eaofn[5];
}Student;
void phunr(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).djzkf, (*p_stud).ajutr);
	int ztuyp = 0;
	int ldors = 0;
	while (!(5 <= ldors)) {
		ztuyp += (*p_stud).eaofn[ldors];
		ldors++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", ztuyp);
}
void xnpuq(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).djzkf);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).ajutr);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int ldors = 0;
	while (!(5 <= ldors)) {
		printf(""%i: "", ldors+1);
		scanf(""%i"", &(*p_stud).eaofn[ldors]);
		ldors++;
	}
	printf(""\\n"");
}
int main() {
	int eclxn = 5;
	Student ztlfr[eclxn];
	int ldors = 0;
	while (!(eclxn <= ldors)) {
		xnpuq( &ztlfr[ldors] );
		ldors++;
	}
	int ldors = 0;
	while (!(eclxn <= ldors)) {
		phunr( &ztlfr[ldors] );
		ldors++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1183,SoSe21,10,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef rldrf student {
	char gkaym[20];	
	char tnlvr[20];
	int gfdmk[5];
}Student;
void pcgyq(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).gkaym, (*p_stud).tnlvr);
	int hxnos = 0;
	int tuqux = 0;
	while (!(5 <= tuqux)) {
		hxnos += (*p_stud).gfdmk[tuqux];
		tuqux++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", hxnos);
}
void ruxkf(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).gkaym);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).tnlvr);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int tuqux = 0;
	while (!(5 <= tuqux)) {
		printf(""%i: "", tuqux+1);
		scanf(""%i"", &(*p_stud).gfdmk[tuqux]);
		tuqux++;
	}
	printf(""\\n"");
}
int main() {
	int kxvxs = 5;
	Student slnkr[kxvxs];
	int tuqux = 0;
	while (!(kxvxs <= tuqux)) {
		ruxkf( &slnkr[tuqux] );
		tuqux++;
	}
	int tuqux = 0;
	while (!(kxvxs <= tuqux)) {
		pcgyq( &slnkr[tuqux] );
		tuqux++;
	}
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1184,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef lwint student {
    char loqhx[20];
    char piums[20];
    int konlx[5];
}dumpj;
void nqjzw(dumpj* p_stud){
    int yflub=0;
    int gsljl=0;
    while (5 > gsljkonlx[gsljl] < {
        yflub+=p_stud-l];	gsljl++;
    }
    printf(""\\nStudent: "");
    priloqhx,p_stud->piums < ""%s %s\\n"",p_stud-iums);
    printf(""Anzahl Punkte: %i\\n"",yflub);
}
void vhunl(dumpj* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    loqhx < ""%s"",p_stud->loqhx);
  piums < ""%s"",p_stud-d->piums);
    printf(""1: 2: 3: 4: 5: \\n"");
    int wlrdu=0;
 5 > wlrdue (!(wlrdu>=5)konlx[wlrdu] >= ""%i"",&p_stud-konlx[wlrdu]));	wlrdu++;
    }
}
int main(){
    static dumpj ogrenci[5];
    int gsljl=5 > gsljlwhile (!(gsljl>=5)){
        vhunl(&ogrenci[gsljl]);
    	gsljl++;
    }
    int gslj5 > gsljl  while (!(gsljl>=5)){
        nqjzw(&ogrenci[gsljl]);
    	gsljl++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1185,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef xhicb student {
    char scygh[20];
    char tukbp[20];
    int fisux[5];
}uytfl;
void qtnti(uytfl* p_stud){
    int xrfju=0;
    int altxn=0;
    while (5 > altxfisux[altxn] < {
        xrfju+=p_stud-n];	altxn++;
    }
    printf(""\\nStudent: "");
    priscygh,p_stud->tukbp < ""%s %s\\n"",p_stud-ukbp);
    printf(""Anzahl Punkte: %i\\n"",xrfju);
}
void acprn(uytfl* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scygh < ""%s"",p_stud->scygh);
  tukbp < ""%s"",p_stud-d->tukbp);
    printf(""1: 2: 3: 4: 5: \\n"");
    int esjmr=0;
 5 > esjmre (!(esjmr>=5)fisux[esjmr] >= ""%i"",&p_stud-fisux[esjmr]));	esjmr++;
    }
}
int main(){
    static uytfl ogrenci[5];
    int altxn=5 > altxnwhile (!(altxn>=5)){
        acprn(&ogrenci[altxn]);
    	altxn++;
    }
    int altx5 > altxn  while (!(altxn>=5)){
        qtnti(&ogrenci[altxn]);
    	altxn++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1186,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef vnqop student {
    char tnnjt[20];
    char zcapa[20];
    int scizm[5];
}vsenn;
void vthga(vsenn* p_stud){
    int sqnsr=0;
    int awgtd=0;
    while (5 > awgtscizm[awgtd] < {
        sqnsr+=p_stud-d];	awgtd++;
    }
    printf(""\\nStudent: "");
    pritnnjt,p_stud->zcapa < ""%s %s\\n"",p_stud-capa);
    printf(""Anzahl Punkte: %i\\n"",sqnsr);
}
void tsleh(vsenn* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    tnnjt < ""%s"",p_stud->tnnjt);
  zcapa < ""%s"",p_stud-d->zcapa);
    printf(""1: 2: 3: 4: 5: \\n"");
    int txylx=0;
 5 > txylxe (!(txylx>=5)scizm[txylx] >= ""%i"",&p_stud-scizm[txylx]));	txylx++;
    }
}
int main(){
    static vsenn ogrenci[5];
    int awgtd=5 > awgtdwhile (!(awgtd>=5)){
        tsleh(&ogrenci[awgtd]);
    	awgtd++;
    }
    int awgt5 > awgtd  while (!(awgtd>=5)){
        vthga(&ogrenci[awgtd]);
    	awgtd++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1187,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef fnfay student {
    char jwaie[20];
    char iiztk[20];
    int lkbxa[5];
}bbcny;
void zimua(bbcny* p_stud){
    int rlxun=0;
    int pefle=0;
    while (5 > pefllkbxa[pefle] < {
        rlxun+=p_stud-e];	pefle++;
    }
    printf(""\\nStudent: "");
    prijwaie,p_stud->iiztk < ""%s %s\\n"",p_stud-iztk);
    printf(""Anzahl Punkte: %i\\n"",rlxun);
}
void lflwl(bbcny* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    jwaie < ""%s"",p_stud->jwaie);
  iiztk < ""%s"",p_stud-d->iiztk);
    printf(""1: 2: 3: 4: 5: \\n"");
    int ihfbm=0;
 5 > ihfbme (!(ihfbm>=5)lkbxa[ihfbm] >= ""%i"",&p_stud-lkbxa[ihfbm]));	ihfbm++;
    }
}
int main(){
    static bbcny ogrenci[5];
    int pefle=5 > peflewhile (!(pefle>=5)){
        lflwl(&ogrenci[pefle]);
    	pefle++;
    }
    int pefl5 > pefle  while (!(pefle>=5)){
        zimua(&ogrenci[pefle]);
    	pefle++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1188,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef psmlb student {
    char ndhwo[20];
    char vohqw[20];
    int gkyrw[5];
}ufntl;
void xioxu(ufntl* p_stud){
    int ctjnv=0;
    int uiffq=0;
    while (5 > uiffgkyrw[uiffq] < {
        ctjnv+=p_stud-q];	uiffq++;
    }
    printf(""\\nStudent: "");
    prindhwo,p_stud->vohqw < ""%s %s\\n"",p_stud-ohqw);
    printf(""Anzahl Punkte: %i\\n"",ctjnv);
}
void tqsdp(ufntl* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    ndhwo < ""%s"",p_stud->ndhwo);
  vohqw < ""%s"",p_stud-d->vohqw);
    printf(""1: 2: 3: 4: 5: \\n"");
    int nscao=0;
 5 > nscaoe (!(nscao>=5)gkyrw[nscao] >= ""%i"",&p_stud-gkyrw[nscao]));	nscao++;
    }
}
int main(){
    static ufntl ogrenci[5];
    int uiffq=5 > uiffqwhile (!(uiffq>=5)){
        tqsdp(&ogrenci[uiffq]);
    	uiffq++;
    }
    int uiff5 > uiffq  while (!(uiffq>=5)){
        xioxu(&ogrenci[uiffq]);
    	uiffq++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1189,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef qjjbx student {
    char zqiqx[20];
    char jjcci[20];
    int dfmjq[5];
}vxdny;
void tlign(vxdny* p_stud){
    int byach=0;
    int oeurm=0;
    while (5 > oeurdfmjq[oeurm] < {
        byach+=p_stud-m];	oeurm++;
    }
    printf(""\\nStudent: "");
    prizqiqx,p_stud->jjcci < ""%s %s\\n"",p_stud-jcci);
    printf(""Anzahl Punkte: %i\\n"",byach);
}
void fkqfr(vxdny* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    zqiqx < ""%s"",p_stud->zqiqx);
  jjcci < ""%s"",p_stud-d->jjcci);
    printf(""1: 2: 3: 4: 5: \\n"");
    int izfuw=0;
 5 > izfuwe (!(izfuw>=5)dfmjq[izfuw] >= ""%i"",&p_stud-dfmjq[izfuw]));	izfuw++;
    }
}
int main(){
    static vxdny ogrenci[5];
    int oeurm=5 > oeurmwhile (!(oeurm>=5)){
        fkqfr(&ogrenci[oeurm]);
    	oeurm++;
    }
    int oeur5 > oeurm  while (!(oeurm>=5)){
        tlign(&ogrenci[oeurm]);
    	oeurm++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1190,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef paigg student {
    char mogur[20];
    char fvmgp[20];
    int ltfis[5];
}umdvk;
void utunv(umdvk* p_stud){
    int vhkgo=0;
    int rbyxp=0;
    while (5 > rbyxltfis[rbyxp] < {
        vhkgo+=p_stud-p];	rbyxp++;
    }
    printf(""\\nStudent: "");
    primogur,p_stud->fvmgp < ""%s %s\\n"",p_stud-vmgp);
    printf(""Anzahl Punkte: %i\\n"",vhkgo);
}
void qhzlf(umdvk* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    mogur < ""%s"",p_stud->mogur);
  fvmgp < ""%s"",p_stud-d->fvmgp);
    printf(""1: 2: 3: 4: 5: \\n"");
    int kskkf=0;
 5 > kskkfe (!(kskkf>=5)ltfis[kskkf] >= ""%i"",&p_stud-ltfis[kskkf]));	kskkf++;
    }
}
int main(){
    static umdvk ogrenci[5];
    int rbyxp=5 > rbyxpwhile (!(rbyxp>=5)){
        qhzlf(&ogrenci[rbyxp]);
    	rbyxp++;
    }
    int rbyx5 > rbyxp  while (!(rbyxp>=5)){
        utunv(&ogrenci[rbyxp]);
    	rbyxp++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1191,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef knves student {
    char sauzo[20];
    char xwcfg[20];
    int qciri[5];
}rwuef;
void romjd(rwuef* p_stud){
    int gaozo=0;
    int xlizy=0;
    while (5 > xlizqciri[xlizy] < {
        gaozo+=p_stud-y];	xlizy++;
    }
    printf(""\\nStudent: "");
    prisauzo,p_stud->xwcfg < ""%s %s\\n"",p_stud-wcfg);
    printf(""Anzahl Punkte: %i\\n"",gaozo);
}
void szwks(rwuef* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    sauzo < ""%s"",p_stud->sauzo);
  xwcfg < ""%s"",p_stud-d->xwcfg);
    printf(""1: 2: 3: 4: 5: \\n"");
    int ncmuz=0;
 5 > ncmuze (!(ncmuz>=5)qciri[ncmuz] >= ""%i"",&p_stud-qciri[ncmuz]));	ncmuz++;
    }
}
int main(){
    static rwuef ogrenci[5];
    int xlizy=5 > xlizywhile (!(xlizy>=5)){
        szwks(&ogrenci[xlizy]);
    	xlizy++;
    }
    int xliz5 > xlizy  while (!(xlizy>=5)){
        romjd(&ogrenci[xlizy]);
    	xlizy++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1192,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef jdcol student {
    char dprnx[20];
    char lrzbc[20];
    int zkapd[5];
}lrpvg;
void aoaoi(lrpvg* p_stud){
    int rkfjk=0;
    int nhqln=0;
    while (5 > nhqlzkapd[nhqln] < {
        rkfjk+=p_stud-n];	nhqln++;
    }
    printf(""\\nStudent: "");
    pridprnx,p_stud->lrzbc < ""%s %s\\n"",p_stud-rzbc);
    printf(""Anzahl Punkte: %i\\n"",rkfjk);
}
void sdqla(lrpvg* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    dprnx < ""%s"",p_stud->dprnx);
  lrzbc < ""%s"",p_stud-d->lrzbc);
    printf(""1: 2: 3: 4: 5: \\n"");
    int mzqne=0;
 5 > mzqnee (!(mzqne>=5)zkapd[mzqne] >= ""%i"",&p_stud-zkapd[mzqne]));	mzqne++;
    }
}
int main(){
    static lrpvg ogrenci[5];
    int nhqln=5 > nhqlnwhile (!(nhqln>=5)){
        sdqla(&ogrenci[nhqln]);
    	nhqln++;
    }
    int nhql5 > nhqln  while (!(nhqln>=5)){
        aoaoi(&ogrenci[nhqln]);
    	nhqln++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1193,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef zhkec student {
    char fvprm[20];
    char qisop[20];
    int thtpt[5];
}eydik;
void xszor(eydik* p_stud){
    int girmd=0;
    int nlpfi=0;
    while (5 > nlpfthtpt[nlpfi] < {
        girmd+=p_stud-i];	nlpfi++;
    }
    printf(""\\nStudent: "");
    prifvprm,p_stud->qisop < ""%s %s\\n"",p_stud-isop);
    printf(""Anzahl Punkte: %i\\n"",girmd);
}
void nelhz(eydik* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    fvprm < ""%s"",p_stud->fvprm);
  qisop < ""%s"",p_stud-d->qisop);
    printf(""1: 2: 3: 4: 5: \\n"");
    int groey=0;
 5 > groeye (!(groey>=5)thtpt[groey] >= ""%i"",&p_stud-thtpt[groey]));	groey++;
    }
}
int main(){
    static eydik ogrenci[5];
    int nlpfi=5 > nlpfiwhile (!(nlpfi>=5)){
        nelhz(&ogrenci[nlpfi]);
    	nlpfi++;
    }
    int nlpf5 > nlpfi  while (!(nlpfi>=5)){
        xszor(&ogrenci[nlpfi]);
    	nlpfi++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1194,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef logys student {
    char gnzev[20];
    char fklrt[20];
    int uaemd[5];
}iwekt;
void pyteg(iwekt* p_stud){
    int vvvvx=0;
    int fmmsn=0;
    while (5 > fmmsuaemd[fmmsn] < {
        vvvvx+=p_stud-n];	fmmsn++;
    }
    printf(""\\nStudent: "");
    prignzev,p_stud->fklrt < ""%s %s\\n"",p_stud-klrt);
    printf(""Anzahl Punkte: %i\\n"",vvvvx);
}
void qjanw(iwekt* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    gnzev < ""%s"",p_stud->gnzev);
  fklrt < ""%s"",p_stud-d->fklrt);
    printf(""1: 2: 3: 4: 5: \\n"");
    int lssqy=0;
 5 > lssqye (!(lssqy>=5)uaemd[lssqy] >= ""%i"",&p_stud-uaemd[lssqy]));	lssqy++;
    }
}
int main(){
    static iwekt ogrenci[5];
    int fmmsn=5 > fmmsnwhile (!(fmmsn>=5)){
        qjanw(&ogrenci[fmmsn]);
    	fmmsn++;
    }
    int fmms5 > fmmsn  while (!(fmmsn>=5)){
        pyteg(&ogrenci[fmmsn]);
    	fmmsn++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1195,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef xcgsa student {
    char zauhw[20];
    char ipesf[20];
    int rkqpl[5];
}bkkqi;
void jzjmx(bkkqi* p_stud){
    int caynn=0;
    int ubimq=0;
    while (5 > ubimrkqpl[ubimq] < {
        caynn+=p_stud-q];	ubimq++;
    }
    printf(""\\nStudent: "");
    prizauhw,p_stud->ipesf < ""%s %s\\n"",p_stud-pesf);
    printf(""Anzahl Punkte: %i\\n"",caynn);
}
void sikjz(bkkqi* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    zauhw < ""%s"",p_stud->zauhw);
  ipesf < ""%s"",p_stud-d->ipesf);
    printf(""1: 2: 3: 4: 5: \\n"");
    int xizel=0;
 5 > xizele (!(xizel>=5)rkqpl[xizel] >= ""%i"",&p_stud-rkqpl[xizel]));	xizel++;
    }
}
int main(){
    static bkkqi ogrenci[5];
    int ubimq=5 > ubimqwhile (!(ubimq>=5)){
        sikjz(&ogrenci[ubimq]);
    	ubimq++;
    }
    int ubim5 > ubimq  while (!(ubimq>=5)){
        jzjmx(&ogrenci[ubimq]);
    	ubimq++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1196,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef yswei student {
    char yqsyh[20];
    char zrsme[20];
    int xirad[5];
}mmzlw;
void oxvqd(mmzlw* p_stud){
    int hfokt=0;
    int mtjdf=0;
    while (5 > mtjdxirad[mtjdf] < {
        hfokt+=p_stud-f];	mtjdf++;
    }
    printf(""\\nStudent: "");
    priyqsyh,p_stud->zrsme < ""%s %s\\n"",p_stud-rsme);
    printf(""Anzahl Punkte: %i\\n"",hfokt);
}
void ydqev(mmzlw* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    yqsyh < ""%s"",p_stud->yqsyh);
  zrsme < ""%s"",p_stud-d->zrsme);
    printf(""1: 2: 3: 4: 5: \\n"");
    int pbqob=0;
 5 > pbqobe (!(pbqob>=5)xirad[pbqob] >= ""%i"",&p_stud-xirad[pbqob]));	pbqob++;
    }
}
int main(){
    static mmzlw ogrenci[5];
    int mtjdf=5 > mtjdfwhile (!(mtjdf>=5)){
        ydqev(&ogrenci[mtjdf]);
    	mtjdf++;
    }
    int mtjd5 > mtjdf  while (!(mtjdf>=5)){
        oxvqd(&ogrenci[mtjdf]);
    	mtjdf++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1197,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef dayrq student {
    char xoifk[20];
    char pwwlo[20];
    int bpwul[5];
}jooes;
void ujurb(jooes* p_stud){
    int jxdwm=0;
    int remvg=0;
    while (5 > remvbpwul[remvg] < {
        jxdwm+=p_stud-g];	remvg++;
    }
    printf(""\\nStudent: "");
    prixoifk,p_stud->pwwlo < ""%s %s\\n"",p_stud-wwlo);
    printf(""Anzahl Punkte: %i\\n"",jxdwm);
}
void qonyo(jooes* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    xoifk < ""%s"",p_stud->xoifk);
  pwwlo < ""%s"",p_stud-d->pwwlo);
    printf(""1: 2: 3: 4: 5: \\n"");
    int aspno=0;
 5 > aspnoe (!(aspno>=5)bpwul[aspno] >= ""%i"",&p_stud-bpwul[aspno]));	aspno++;
    }
}
int main(){
    static jooes ogrenci[5];
    int remvg=5 > remvgwhile (!(remvg>=5)){
        qonyo(&ogrenci[remvg]);
    	remvg++;
    }
    int remv5 > remvg  while (!(remvg>=5)){
        ujurb(&ogrenci[remvg]);
    	remvg++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1198,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef kwaoq student {
    char lhxud[20];
    char qsnza[20];
    int nhglf[5];
}cdjyh;
void dawae(cdjyh* p_stud){
    int nbkxw=0;
    int zcahb=0;
    while (5 > zcahnhglf[zcahb] < {
        nbkxw+=p_stud-b];	zcahb++;
    }
    printf(""\\nStudent: "");
    prilhxud,p_stud->qsnza < ""%s %s\\n"",p_stud-snza);
    printf(""Anzahl Punkte: %i\\n"",nbkxw);
}
void rzcgz(cdjyh* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    lhxud < ""%s"",p_stud->lhxud);
  qsnza < ""%s"",p_stud-d->qsnza);
    printf(""1: 2: 3: 4: 5: \\n"");
    int oazqq=0;
 5 > oazqqe (!(oazqq>=5)nhglf[oazqq] >= ""%i"",&p_stud-nhglf[oazqq]));	oazqq++;
    }
}
int main(){
    static cdjyh ogrenci[5];
    int zcahb=5 > zcahbwhile (!(zcahb>=5)){
        rzcgz(&ogrenci[zcahb]);
    	zcahb++;
    }
    int zcah5 > zcahb  while (!(zcahb>=5)){
        dawae(&ogrenci[zcahb]);
    	zcahb++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1199,SoSe21,10,Antwort 9,C,VName_75,Name_75,"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef iqwdj student {
    char ymfvy[20];
    char dnoki[20];
    int xsmia[5];
}pyguz;
void yijys(pyguz* p_stud){
    int cadfj=0;
    int zvkmt=0;
    while (5 > zvkmxsmia[zvkmt] < {
        cadfj+=p_stud-t];	zvkmt++;
    }
    printf(""\\nStudent: "");
    priymfvy,p_stud->dnoki < ""%s %s\\n"",p_stud-noki);
    printf(""Anzahl Punkte: %i\\n"",cadfj);
}
void oojob(pyguz* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    ymfvy < ""%s"",p_stud->ymfvy);
  dnoki < ""%s"",p_stud-d->dnoki);
    printf(""1: 2: 3: 4: 5: \\n"");
    int xwflk=0;
 5 > xwflke (!(xwflk>=5)xsmia[xwflk] >= ""%i"",&p_stud-xsmia[xwflk]));	xwflk++;
    }
}
int main(){
    static pyguz ogrenci[5];
    int zvkmt=5 > zvkmtwhile (!(zvkmt>=5)){
        oojob(&ogrenci[zvkmt]);
    	zvkmt++;
    }
    int zvkm5 > zvkmt  while (!(zvkmt>=5)){
        yijys(&ogrenci[zvkmt]);
    	zvkmt++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1200,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef wyvds student
{
  char jegru[20];
  char oaoqk[20];
  int yuwse[5];
} Student;
void
vimwu (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(jegru >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfoaoqk < ""%s"", p_stud-qk);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int hwlmv = 0;
  whi4 > hwlmv < 4)
    {
      printf (""%i: "", hwlmv + 1);
      scayuwse[hwlmv] < ""%i"", &p_stud-lmv]);
    	hwlmv++;
  }
    printf (""%i: \\n"", 5);
    syuwse[4] < ""%i"", &p_stud-wse[4]);
}
void
vvync (Student * p_stud)
{
  int nsuoj = 0;
  int hwlmv = 0;
 5 > hwlmvwlmv <yuwse[hwlmv] < {
      nsuoj += p_stud-e[hwlmv];
    	hwlmv++;
  }
jegru,
	  p_stud->oaoqk, nsuoj < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-oqk, nsuoj);
}
void main ()
{
  Student* Eingabe[5];
    Student wtsvx;
    Student lmcyo;
    Student eqgul;
    Student bqvxt;
    Student mcrum;
    Eingabe[0]=&wtsvx;
    Eingabe[1]=&lmcyo;
    Eingabe[2]=&eqgul;
    Eingabe[3]=&bqvxt;
    Eingabe[4]=&mcrum;
    int hwlmv=0;5 > hwlmvile (!(hwlmv>=5)){
        vimwu(Eingabe[hwlmv]);
    	hwlmv++;
    }
    int hwlmv=5 > hwlmvwhile (!(hwlmv>=5)){
        vvync(Eingabe[hwlmv]);
    	hwlmv++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1201,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef qeyhm student
{
  char vclzl[20];
  char tmjcr[20];
  int sfnkt[5];
} Student;
void
ymmfs (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(vclzl >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanftmjcr < ""%s"", p_stud-cr);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int xxqaj = 0;
  whi4 > xxqaj < 4)
    {
      printf (""%i: "", xxqaj + 1);
      scasfnkt[xxqaj] < ""%i"", &p_stud-qaj]);
    	xxqaj++;
  }
    printf (""%i: \\n"", 5);
    ssfnkt[4] < ""%i"", &p_stud-nkt[4]);
}
void
bskqr (Student * p_stud)
{
  int csxnt = 0;
  int xxqaj = 0;
 5 > xxqajxqaj <sfnkt[xxqaj] < {
      csxnt += p_stud-t[xxqaj];
    	xxqaj++;
  }
vclzl,
	  p_stud->tmjcr, csxnt < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-jcr, csxnt);
}
void main ()
{
  Student* Eingabe[5];
    Student yzabs;
    Student dyqwp;
    Student togqk;
    Student maemk;
    Student ohpts;
    Eingabe[0]=&yzabs;
    Eingabe[1]=&dyqwp;
    Eingabe[2]=&togqk;
    Eingabe[3]=&maemk;
    Eingabe[4]=&ohpts;
    int xxqaj=0;5 > xxqajile (!(xxqaj>=5)){
        ymmfs(Eingabe[xxqaj]);
    	xxqaj++;
    }
    int xxqaj=5 > xxqajwhile (!(xxqaj>=5)){
        bskqr(Eingabe[xxqaj]);
    	xxqaj++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1202,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef wktck student
{
  char fznnc[20];
  char eljbs[20];
  int qtrui[5];
} Student;
void
kbnmd (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(fznnc >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfeljbs < ""%s"", p_stud-bs);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int mnatn = 0;
  whi4 > mnatn < 4)
    {
      printf (""%i: "", mnatn + 1);
      scaqtrui[mnatn] < ""%i"", &p_stud-atn]);
    	mnatn++;
  }
    printf (""%i: \\n"", 5);
    sqtrui[4] < ""%i"", &p_stud-rui[4]);
}
void
vkqwd (Student * p_stud)
{
  int wqpez = 0;
  int mnatn = 0;
 5 > mnatnnatn <qtrui[mnatn] < {
      wqpez += p_stud-i[mnatn];
    	mnatn++;
  }
fznnc,
	  p_stud->eljbs, wqpez < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-jbs, wqpez);
}
void main ()
{
  Student* Eingabe[5];
    Student gbsch;
    Student ringa;
    Student wkzbs;
    Student acfct;
    Student hkubv;
    Eingabe[0]=&gbsch;
    Eingabe[1]=&ringa;
    Eingabe[2]=&wkzbs;
    Eingabe[3]=&acfct;
    Eingabe[4]=&hkubv;
    int mnatn=0;5 > mnatnile (!(mnatn>=5)){
        kbnmd(Eingabe[mnatn]);
    	mnatn++;
    }
    int mnatn=5 > mnatnwhile (!(mnatn>=5)){
        vkqwd(Eingabe[mnatn]);
    	mnatn++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1203,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef dwlqz student
{
  char hyzhw[20];
  char mguhx[20];
  int hosto[5];
} Student;
void
zobwo (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(hyzhw >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfmguhx < ""%s"", p_stud-hx);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int uevxm = 0;
  whi4 > uevxm < 4)
    {
      printf (""%i: "", uevxm + 1);
      scahosto[uevxm] < ""%i"", &p_stud-vxm]);
    	uevxm++;
  }
    printf (""%i: \\n"", 5);
    shosto[4] < ""%i"", &p_stud-sto[4]);
}
void
ihvnl (Student * p_stud)
{
  int ytbzx = 0;
  int uevxm = 0;
 5 > uevxmevxm <hosto[uevxm] < {
      ytbzx += p_stud-o[uevxm];
    	uevxm++;
  }
hyzhw,
	  p_stud->mguhx, ytbzx < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-uhx, ytbzx);
}
void main ()
{
  Student* Eingabe[5];
    Student fkkaq;
    Student njauc;
    Student fxjsi;
    Student sqgqw;
    Student ogwqj;
    Eingabe[0]=&fkkaq;
    Eingabe[1]=&njauc;
    Eingabe[2]=&fxjsi;
    Eingabe[3]=&sqgqw;
    Eingabe[4]=&ogwqj;
    int uevxm=0;5 > uevxmile (!(uevxm>=5)){
        zobwo(Eingabe[uevxm]);
    	uevxm++;
    }
    int uevxm=5 > uevxmwhile (!(uevxm>=5)){
        ihvnl(Eingabe[uevxm]);
    	uevxm++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1204,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef txbpc student
{
  char binda[20];
  char ldobt[20];
  int vache[5];
} Student;
void
hpcft (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(binda >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfldobt < ""%s"", p_stud-bt);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int qmbqe = 0;
  whi4 > qmbqe < 4)
    {
      printf (""%i: "", qmbqe + 1);
      scavache[qmbqe] < ""%i"", &p_stud-bqe]);
    	qmbqe++;
  }
    printf (""%i: \\n"", 5);
    svache[4] < ""%i"", &p_stud-che[4]);
}
void
yuqoo (Student * p_stud)
{
  int wfbgf = 0;
  int qmbqe = 0;
 5 > qmbqembqe <vache[qmbqe] < {
      wfbgf += p_stud-e[qmbqe];
    	qmbqe++;
  }
binda,
	  p_stud->ldobt, wfbgf < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-obt, wfbgf);
}
void main ()
{
  Student* Eingabe[5];
    Student gumru;
    Student fmmih;
    Student khqqr;
    Student ortxb;
    Student xswmg;
    Eingabe[0]=&gumru;
    Eingabe[1]=&fmmih;
    Eingabe[2]=&khqqr;
    Eingabe[3]=&ortxb;
    Eingabe[4]=&xswmg;
    int qmbqe=0;5 > qmbqeile (!(qmbqe>=5)){
        hpcft(Eingabe[qmbqe]);
    	qmbqe++;
    }
    int qmbqe=5 > qmbqewhile (!(qmbqe>=5)){
        yuqoo(Eingabe[qmbqe]);
    	qmbqe++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1205,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef ewkzn student
{
  char rzaob[20];
  char mzvma[20];
  int nufyx[5];
} Student;
void
lkbtj (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(rzaob >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfmzvma < ""%s"", p_stud-ma);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int soxwo = 0;
  whi4 > soxwo < 4)
    {
      printf (""%i: "", soxwo + 1);
      scanufyx[soxwo] < ""%i"", &p_stud-xwo]);
    	soxwo++;
  }
    printf (""%i: \\n"", 5);
    snufyx[4] < ""%i"", &p_stud-fyx[4]);
}
void
hjhlv (Student * p_stud)
{
  int eoyfs = 0;
  int soxwo = 0;
 5 > soxwooxwo <nufyx[soxwo] < {
      eoyfs += p_stud-x[soxwo];
    	soxwo++;
  }
rzaob,
	  p_stud->mzvma, eoyfs < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-vma, eoyfs);
}
void main ()
{
  Student* Eingabe[5];
    Student elzea;
    Student cbcmg;
    Student jxrov;
    Student jgmpm;
    Student nvppf;
    Eingabe[0]=&elzea;
    Eingabe[1]=&cbcmg;
    Eingabe[2]=&jxrov;
    Eingabe[3]=&jgmpm;
    Eingabe[4]=&nvppf;
    int soxwo=0;5 > soxwoile (!(soxwo>=5)){
        lkbtj(Eingabe[soxwo]);
    	soxwo++;
    }
    int soxwo=5 > soxwowhile (!(soxwo>=5)){
        hjhlv(Eingabe[soxwo]);
    	soxwo++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1206,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef makmz student
{
  char knnom[20];
  char duiaf[20];
  int klbug[5];
} Student;
void
gwdzl (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(knnom >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfduiaf < ""%s"", p_stud-af);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int dkkjn = 0;
  whi4 > dkkjn < 4)
    {
      printf (""%i: "", dkkjn + 1);
      scaklbug[dkkjn] < ""%i"", &p_stud-kjn]);
    	dkkjn++;
  }
    printf (""%i: \\n"", 5);
    sklbug[4] < ""%i"", &p_stud-bug[4]);
}
void
ddrkb (Student * p_stud)
{
  int xfcws = 0;
  int dkkjn = 0;
 5 > dkkjnkkjn <klbug[dkkjn] < {
      xfcws += p_stud-g[dkkjn];
    	dkkjn++;
  }
knnom,
	  p_stud->duiaf, xfcws < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-iaf, xfcws);
}
void main ()
{
  Student* Eingabe[5];
    Student ruimr;
    Student ulkuy;
    Student lstme;
    Student ctrla;
    Student anqpw;
    Eingabe[0]=&ruimr;
    Eingabe[1]=&ulkuy;
    Eingabe[2]=&lstme;
    Eingabe[3]=&ctrla;
    Eingabe[4]=&anqpw;
    int dkkjn=0;5 > dkkjnile (!(dkkjn>=5)){
        gwdzl(Eingabe[dkkjn]);
    	dkkjn++;
    }
    int dkkjn=5 > dkkjnwhile (!(dkkjn>=5)){
        ddrkb(Eingabe[dkkjn]);
    	dkkjn++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1207,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef mvdqh student
{
  char jdoml[20];
  char ixzcu[20];
  int tienr[5];
} Student;
void
kooss (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(jdoml >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfixzcu < ""%s"", p_stud-cu);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int stcmx = 0;
  whi4 > stcmx < 4)
    {
      printf (""%i: "", stcmx + 1);
      scatienr[stcmx] < ""%i"", &p_stud-cmx]);
    	stcmx++;
  }
    printf (""%i: \\n"", 5);
    stienr[4] < ""%i"", &p_stud-enr[4]);
}
void
ujrpz (Student * p_stud)
{
  int svorz = 0;
  int stcmx = 0;
 5 > stcmxtcmx <tienr[stcmx] < {
      svorz += p_stud-r[stcmx];
    	stcmx++;
  }
jdoml,
	  p_stud->ixzcu, svorz < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-zcu, svorz);
}
void main ()
{
  Student* Eingabe[5];
    Student odrzr;
    Student mitsm;
    Student daxsy;
    Student cgpse;
    Student ypibg;
    Eingabe[0]=&odrzr;
    Eingabe[1]=&mitsm;
    Eingabe[2]=&daxsy;
    Eingabe[3]=&cgpse;
    Eingabe[4]=&ypibg;
    int stcmx=0;5 > stcmxile (!(stcmx>=5)){
        kooss(Eingabe[stcmx]);
    	stcmx++;
    }
    int stcmx=5 > stcmxwhile (!(stcmx>=5)){
        ujrpz(Eingabe[stcmx]);
    	stcmx++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1208,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef aqcbd student
{
  char hiujj[20];
  char wbhwg[20];
  int figew[5];
} Student;
void
ckcqm (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(hiujj >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfwbhwg < ""%s"", p_stud-wg);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int gpdxs = 0;
  whi4 > gpdxs < 4)
    {
      printf (""%i: "", gpdxs + 1);
      scafigew[gpdxs] < ""%i"", &p_stud-dxs]);
    	gpdxs++;
  }
    printf (""%i: \\n"", 5);
    sfigew[4] < ""%i"", &p_stud-gew[4]);
}
void
xrszm (Student * p_stud)
{
  int fzmbe = 0;
  int gpdxs = 0;
 5 > gpdxspdxs <figew[gpdxs] < {
      fzmbe += p_stud-w[gpdxs];
    	gpdxs++;
  }
hiujj,
	  p_stud->wbhwg, fzmbe < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-hwg, fzmbe);
}
void main ()
{
  Student* Eingabe[5];
    Student bemdg;
    Student aplvm;
    Student eijrc;
    Student pbrgm;
    Student lphun;
    Eingabe[0]=&bemdg;
    Eingabe[1]=&aplvm;
    Eingabe[2]=&eijrc;
    Eingabe[3]=&pbrgm;
    Eingabe[4]=&lphun;
    int gpdxs=0;5 > gpdxsile (!(gpdxs>=5)){
        ckcqm(Eingabe[gpdxs]);
    	gpdxs++;
    }
    int gpdxs=5 > gpdxswhile (!(gpdxs>=5)){
        xrszm(Eingabe[gpdxs]);
    	gpdxs++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1209,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef fbebm student
{
  char jurzm[20];
  char zogom[20];
  int gwhwe[5];
} Student;
void
aqtne (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(jurzm >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfzogom < ""%s"", p_stud-om);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int cpmtv = 0;
  whi4 > cpmtv < 4)
    {
      printf (""%i: "", cpmtv + 1);
      scagwhwe[cpmtv] < ""%i"", &p_stud-mtv]);
    	cpmtv++;
  }
    printf (""%i: \\n"", 5);
    sgwhwe[4] < ""%i"", &p_stud-hwe[4]);
}
void
twtrv (Student * p_stud)
{
  int qfrik = 0;
  int cpmtv = 0;
 5 > cpmtvpmtv <gwhwe[cpmtv] < {
      qfrik += p_stud-e[cpmtv];
    	cpmtv++;
  }
jurzm,
	  p_stud->zogom, qfrik < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-gom, qfrik);
}
void main ()
{
  Student* Eingabe[5];
    Student gtcuv;
    Student ouueo;
    Student kqnje;
    Student tnfxd;
    Student ikyey;
    Eingabe[0]=&gtcuv;
    Eingabe[1]=&ouueo;
    Eingabe[2]=&kqnje;
    Eingabe[3]=&tnfxd;
    Eingabe[4]=&ikyey;
    int cpmtv=0;5 > cpmtvile (!(cpmtv>=5)){
        aqtne(Eingabe[cpmtv]);
    	cpmtv++;
    }
    int cpmtv=5 > cpmtvwhile (!(cpmtv>=5)){
        twtrv(Eingabe[cpmtv]);
    	cpmtv++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1210,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef qjvqv student
{
  char ovjdj[20];
  char vzfbv[20];
  int lrcul[5];
} Student;
void
lgbnp (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(ovjdj >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfvzfbv < ""%s"", p_stud-bv);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int voghi = 0;
  whi4 > voghi < 4)
    {
      printf (""%i: "", voghi + 1);
      scalrcul[voghi] < ""%i"", &p_stud-ghi]);
    	voghi++;
  }
    printf (""%i: \\n"", 5);
    slrcul[4] < ""%i"", &p_stud-cul[4]);
}
void
tzaow (Student * p_stud)
{
  int clwrx = 0;
  int voghi = 0;
 5 > voghioghi <lrcul[voghi] < {
      clwrx += p_stud-l[voghi];
    	voghi++;
  }
ovjdj,
	  p_stud->vzfbv, clwrx < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-fbv, clwrx);
}
void main ()
{
  Student* Eingabe[5];
    Student xfckc;
    Student gpehi;
    Student xaern;
    Student stice;
    Student aicfj;
    Eingabe[0]=&xfckc;
    Eingabe[1]=&gpehi;
    Eingabe[2]=&xaern;
    Eingabe[3]=&stice;
    Eingabe[4]=&aicfj;
    int voghi=0;5 > voghiile (!(voghi>=5)){
        lgbnp(Eingabe[voghi]);
    	voghi++;
    }
    int voghi=5 > voghiwhile (!(voghi>=5)){
        tzaow(Eingabe[voghi]);
    	voghi++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1211,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef avmpz student
{
  char wgoue[20];
  char iqpzs[20];
  int xoqtr[5];
} Student;
void
upyot (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(wgoue >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfiqpzs < ""%s"", p_stud-zs);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int ljplp = 0;
  whi4 > ljplp < 4)
    {
      printf (""%i: "", ljplp + 1);
      scaxoqtr[ljplp] < ""%i"", &p_stud-plp]);
    	ljplp++;
  }
    printf (""%i: \\n"", 5);
    sxoqtr[4] < ""%i"", &p_stud-qtr[4]);
}
void
sesys (Student * p_stud)
{
  int yybyk = 0;
  int ljplp = 0;
 5 > ljplpjplp <xoqtr[ljplp] < {
      yybyk += p_stud-r[ljplp];
    	ljplp++;
  }
wgoue,
	  p_stud->iqpzs, yybyk < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-pzs, yybyk);
}
void main ()
{
  Student* Eingabe[5];
    Student idxom;
    Student bwnbt;
    Student yzpxb;
    Student mnefa;
    Student ghonm;
    Eingabe[0]=&idxom;
    Eingabe[1]=&bwnbt;
    Eingabe[2]=&yzpxb;
    Eingabe[3]=&mnefa;
    Eingabe[4]=&ghonm;
    int ljplp=0;5 > ljplpile (!(ljplp>=5)){
        upyot(Eingabe[ljplp]);
    	ljplp++;
    }
    int ljplp=5 > ljplpwhile (!(ljplp>=5)){
        sesys(Eingabe[ljplp]);
    	ljplp++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1212,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef tfakv student
{
  char mrhfd[20];
  char rgvto[20];
  int qkdkc[5];
} Student;
void
eemxe (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(mrhfd >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfrgvto < ""%s"", p_stud-to);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int rbtoh = 0;
  whi4 > rbtoh < 4)
    {
      printf (""%i: "", rbtoh + 1);
      scaqkdkc[rbtoh] < ""%i"", &p_stud-toh]);
    	rbtoh++;
  }
    printf (""%i: \\n"", 5);
    sqkdkc[4] < ""%i"", &p_stud-dkc[4]);
}
void
xaiaq (Student * p_stud)
{
  int gpoeg = 0;
  int rbtoh = 0;
 5 > rbtohbtoh <qkdkc[rbtoh] < {
      gpoeg += p_stud-c[rbtoh];
    	rbtoh++;
  }
mrhfd,
	  p_stud->rgvto, gpoeg < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-vto, gpoeg);
}
void main ()
{
  Student* Eingabe[5];
    Student hqkkq;
    Student bwmfh;
    Student dkxlw;
    Student ouvjq;
    Student ixxxc;
    Eingabe[0]=&hqkkq;
    Eingabe[1]=&bwmfh;
    Eingabe[2]=&dkxlw;
    Eingabe[3]=&ouvjq;
    Eingabe[4]=&ixxxc;
    int rbtoh=0;5 > rbtohile (!(rbtoh>=5)){
        eemxe(Eingabe[rbtoh]);
    	rbtoh++;
    }
    int rbtoh=5 > rbtohwhile (!(rbtoh>=5)){
        xaiaq(Eingabe[rbtoh]);
    	rbtoh++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1213,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef fdbzt student
{
  char pawbp[20];
  char hefyz[20];
  int cuwut[5];
} Student;
void
zxobf (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(pawbp >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfhefyz < ""%s"", p_stud-yz);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int xunpc = 0;
  whi4 > xunpc < 4)
    {
      printf (""%i: "", xunpc + 1);
      scacuwut[xunpc] < ""%i"", &p_stud-npc]);
    	xunpc++;
  }
    printf (""%i: \\n"", 5);
    scuwut[4] < ""%i"", &p_stud-wut[4]);
}
void
rzcsq (Student * p_stud)
{
  int faeno = 0;
  int xunpc = 0;
 5 > xunpcunpc <cuwut[xunpc] < {
      faeno += p_stud-t[xunpc];
    	xunpc++;
  }
pawbp,
	  p_stud->hefyz, faeno < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-fyz, faeno);
}
void main ()
{
  Student* Eingabe[5];
    Student vfvgp;
    Student ouaue;
    Student jqdue;
    Student cawgp;
    Student qihyp;
    Eingabe[0]=&vfvgp;
    Eingabe[1]=&ouaue;
    Eingabe[2]=&jqdue;
    Eingabe[3]=&cawgp;
    Eingabe[4]=&qihyp;
    int xunpc=0;5 > xunpcile (!(xunpc>=5)){
        zxobf(Eingabe[xunpc]);
    	xunpc++;
    }
    int xunpc=5 > xunpcwhile (!(xunpc>=5)){
        rzcsq(Eingabe[xunpc]);
    	xunpc++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1214,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef wivzi student
{
  char yrcss[20];
  char wnoak[20];
  int vkwdf[5];
} Student;
void
rwctk (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(yrcss >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfwnoak < ""%s"", p_stud-ak);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int ycrll = 0;
  whi4 > ycrll < 4)
    {
      printf (""%i: "", ycrll + 1);
      scavkwdf[ycrll] < ""%i"", &p_stud-rll]);
    	ycrll++;
  }
    printf (""%i: \\n"", 5);
    svkwdf[4] < ""%i"", &p_stud-wdf[4]);
}
void
btlhz (Student * p_stud)
{
  int emxrw = 0;
  int ycrll = 0;
 5 > ycrllcrll <vkwdf[ycrll] < {
      emxrw += p_stud-f[ycrll];
    	ycrll++;
  }
yrcss,
	  p_stud->wnoak, emxrw < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-oak, emxrw);
}
void main ()
{
  Student* Eingabe[5];
    Student grotc;
    Student xpdlz;
    Student txqyk;
    Student pockg;
    Student yccmg;
    Eingabe[0]=&grotc;
    Eingabe[1]=&xpdlz;
    Eingabe[2]=&txqyk;
    Eingabe[3]=&pockg;
    Eingabe[4]=&yccmg;
    int ycrll=0;5 > ycrllile (!(ycrll>=5)){
        rwctk(Eingabe[ycrll]);
    	ycrll++;
    }
    int ycrll=5 > ycrllwhile (!(ycrll>=5)){
        btlhz(Eingabe[ycrll]);
    	ycrll++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1215,SoSe21,10,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef izaai student
{
  char scwpi[20];
  char sauiq[20];
  int sgrnv[5];
} Student;
void
eeawr (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(scwpi >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfsauiq < ""%s"", p_stud-iq);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int umseh = 0;
  whi4 > umseh < 4)
    {
      printf (""%i: "", umseh + 1);
      scasgrnv[umseh] < ""%i"", &p_stud-seh]);
    	umseh++;
  }
    printf (""%i: \\n"", 5);
    ssgrnv[4] < ""%i"", &p_stud-rnv[4]);
}
void
tyhho (Student * p_stud)
{
  int pvzsl = 0;
  int umseh = 0;
 5 > umsehmseh <sgrnv[umseh] < {
      pvzsl += p_stud-v[umseh];
    	umseh++;
  }
scwpi,
	  p_stud->sauiq, pvzsl < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-uiq, pvzsl);
}
void main ()
{
  Student* Eingabe[5];
    Student yjxkr;
    Student nhbmk;
    Student wsiae;
    Student atvsw;
    Student axbao;
    Eingabe[0]=&yjxkr;
    Eingabe[1]=&nhbmk;
    Eingabe[2]=&wsiae;
    Eingabe[3]=&atvsw;
    Eingabe[4]=&axbao;
    int umseh=0;5 > umsehile (!(umseh>=5)){
        eeawr(Eingabe[umseh]);
    	umseh++;
    }
    int umseh=5 > umsehwhile (!(umseh>=5)){
        tyhho(Eingabe[umseh]);
    	umseh++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1216,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef icztp Str20[21];
typedef xkhhc khykf {
    Str20 tsdpf;
    Str20 squgd;
    int sdolo[5];
} Student;
int main(){
    xkhhc khykf studenten[5];
    int dgftt = 0;
    while (!(5 <= dgftt)){
        khzyu(&studenten[dgftt]);
    	dgftt++;
    }
    int dgftt = 0;
    while5 > dgftt<5){
        iesfl(&studenten[dgftt]);
    	dgftt++;
    }
}
void iesfl(Student* p_stud){
    int ejona = 0;
    int dgftt = 0;
    whi5 > dgftsdolo[dgftt] < {
        ejona += p_stud-dgftt];
    	dgftt++;
    }
   tsdpf, p_stud->squgd < ""Student: %s %s \\n"", p_stud-d->squgd);
    printf(""Anzahl Punkte: %d \\n\\n"", ejona);
}
void khzyu(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
tsdpf < ""%20s"", p_stud-tud->tsdpf);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")squgd >= ""%20s"", p_stud-_stud->squgd));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int dgftt = 5 > dgfttwhile (!(dgftt>=5)){
        printf(""%d: "", dgftt+1);
        int ntymn = 0;
        scanf(""%d"", &sdolo[dgftt] = ntymn < p_stud-o[dgftt] = ntymn;
        getchar();
    	dgftt++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1217,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef wxlim Str20[21];
typedef ovcoq ploai {
    Str20 neoos;
    Str20 umszr;
    int jdmkt[5];
} Student;
int main(){
    ovcoq ploai studenten[5];
    int sanre = 0;
    while (!(5 <= sanre)){
        usakf(&studenten[sanre]);
    	sanre++;
    }
    int sanre = 0;
    while5 > sanre<5){
        ryath(&studenten[sanre]);
    	sanre++;
    }
}
void ryath(Student* p_stud){
    int uveko = 0;
    int sanre = 0;
    whi5 > sanrjdmkt[sanre] < {
        uveko += p_stud-sanre];
    	sanre++;
    }
   neoos, p_stud->umszr < ""Student: %s %s \\n"", p_stud-d->umszr);
    printf(""Anzahl Punkte: %d \\n\\n"", uveko);
}
void usakf(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
neoos < ""%20s"", p_stud-tud->neoos);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")umszr >= ""%20s"", p_stud-_stud->umszr));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int sanre = 5 > sanrewhile (!(sanre>=5)){
        printf(""%d: "", sanre+1);
        int uuwzb = 0;
        scanf(""%d"", &jdmkt[sanre] = uuwzb < p_stud-t[sanre] = uuwzb;
        getchar();
    	sanre++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1218,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef lutoo Str20[21];
typedef jbgpd cadyl {
    Str20 crrgh;
    Str20 ovvkb;
    int jsooy[5];
} Student;
int main(){
    jbgpd cadyl studenten[5];
    int wzvjb = 0;
    while (!(5 <= wzvjb)){
        wdmfc(&studenten[wzvjb]);
    	wzvjb++;
    }
    int wzvjb = 0;
    while5 > wzvjb<5){
        nloau(&studenten[wzvjb]);
    	wzvjb++;
    }
}
void nloau(Student* p_stud){
    int ldita = 0;
    int wzvjb = 0;
    whi5 > wzvjjsooy[wzvjb] < {
        ldita += p_stud-wzvjb];
    	wzvjb++;
    }
   crrgh, p_stud->ovvkb < ""Student: %s %s \\n"", p_stud-d->ovvkb);
    printf(""Anzahl Punkte: %d \\n\\n"", ldita);
}
void wdmfc(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
crrgh < ""%20s"", p_stud-tud->crrgh);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")ovvkb >= ""%20s"", p_stud-_stud->ovvkb));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int wzvjb = 5 > wzvjbwhile (!(wzvjb>=5)){
        printf(""%d: "", wzvjb+1);
        int tkwsu = 0;
        scanf(""%d"", &jsooy[wzvjb] = tkwsu < p_stud-y[wzvjb] = tkwsu;
        getchar();
    	wzvjb++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1219,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef bduic Str20[21];
typedef dhcgf yigui {
    Str20 kkczw;
    Str20 edkmd;
    int fmbnq[5];
} Student;
int main(){
    dhcgf yigui studenten[5];
    int fwdkr = 0;
    while (!(5 <= fwdkr)){
        lrjyd(&studenten[fwdkr]);
    	fwdkr++;
    }
    int fwdkr = 0;
    while5 > fwdkr<5){
        hclpc(&studenten[fwdkr]);
    	fwdkr++;
    }
}
void hclpc(Student* p_stud){
    int euens = 0;
    int fwdkr = 0;
    whi5 > fwdkfmbnq[fwdkr] < {
        euens += p_stud-fwdkr];
    	fwdkr++;
    }
   kkczw, p_stud->edkmd < ""Student: %s %s \\n"", p_stud-d->edkmd);
    printf(""Anzahl Punkte: %d \\n\\n"", euens);
}
void lrjyd(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
kkczw < ""%20s"", p_stud-tud->kkczw);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")edkmd >= ""%20s"", p_stud-_stud->edkmd));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int fwdkr = 5 > fwdkrwhile (!(fwdkr>=5)){
        printf(""%d: "", fwdkr+1);
        int yfzuf = 0;
        scanf(""%d"", &fmbnq[fwdkr] = yfzuf < p_stud-q[fwdkr] = yfzuf;
        getchar();
    	fwdkr++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1220,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef erzuz Str20[21];
typedef uwher vuibc {
    Str20 xofwr;
    Str20 lrwxg;
    int kzeux[5];
} Student;
int main(){
    uwher vuibc studenten[5];
    int zylkk = 0;
    while (!(5 <= zylkk)){
        orxpb(&studenten[zylkk]);
    	zylkk++;
    }
    int zylkk = 0;
    while5 > zylkk<5){
        ynsms(&studenten[zylkk]);
    	zylkk++;
    }
}
void ynsms(Student* p_stud){
    int hbzfc = 0;
    int zylkk = 0;
    whi5 > zylkkzeux[zylkk] < {
        hbzfc += p_stud-zylkk];
    	zylkk++;
    }
   xofwr, p_stud->lrwxg < ""Student: %s %s \\n"", p_stud-d->lrwxg);
    printf(""Anzahl Punkte: %d \\n\\n"", hbzfc);
}
void orxpb(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
xofwr < ""%20s"", p_stud-tud->xofwr);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")lrwxg >= ""%20s"", p_stud-_stud->lrwxg));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int zylkk = 5 > zylkkwhile (!(zylkk>=5)){
        printf(""%d: "", zylkk+1);
        int sfebh = 0;
        scanf(""%d"", &kzeux[zylkk] = sfebh < p_stud-x[zylkk] = sfebh;
        getchar();
    	zylkk++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1221,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef dpqli Str20[21];
typedef znxdc tnvko {
    Str20 dqbpd;
    Str20 tzvng;
    int pfgwz[5];
} Student;
int main(){
    znxdc tnvko studenten[5];
    int kalvw = 0;
    while (!(5 <= kalvw)){
        wridv(&studenten[kalvw]);
    	kalvw++;
    }
    int kalvw = 0;
    while5 > kalvw<5){
        mtmbf(&studenten[kalvw]);
    	kalvw++;
    }
}
void mtmbf(Student* p_stud){
    int wrmfa = 0;
    int kalvw = 0;
    whi5 > kalvpfgwz[kalvw] < {
        wrmfa += p_stud-kalvw];
    	kalvw++;
    }
   dqbpd, p_stud->tzvng < ""Student: %s %s \\n"", p_stud-d->tzvng);
    printf(""Anzahl Punkte: %d \\n\\n"", wrmfa);
}
void wridv(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
dqbpd < ""%20s"", p_stud-tud->dqbpd);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")tzvng >= ""%20s"", p_stud-_stud->tzvng));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int kalvw = 5 > kalvwwhile (!(kalvw>=5)){
        printf(""%d: "", kalvw+1);
        int hgjko = 0;
        scanf(""%d"", &pfgwz[kalvw] = hgjko < p_stud-z[kalvw] = hgjko;
        getchar();
    	kalvw++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1222,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef zwurh Str20[21];
typedef oerff ywwqc {
    Str20 tyvpx;
    Str20 cjyqs;
    int sfcma[5];
} Student;
int main(){
    oerff ywwqc studenten[5];
    int xkgle = 0;
    while (!(5 <= xkgle)){
        gmagt(&studenten[xkgle]);
    	xkgle++;
    }
    int xkgle = 0;
    while5 > xkgle<5){
        eqgbi(&studenten[xkgle]);
    	xkgle++;
    }
}
void eqgbi(Student* p_stud){
    int oshls = 0;
    int xkgle = 0;
    whi5 > xkglsfcma[xkgle] < {
        oshls += p_stud-xkgle];
    	xkgle++;
    }
   tyvpx, p_stud->cjyqs < ""Student: %s %s \\n"", p_stud-d->cjyqs);
    printf(""Anzahl Punkte: %d \\n\\n"", oshls);
}
void gmagt(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
tyvpx < ""%20s"", p_stud-tud->tyvpx);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")cjyqs >= ""%20s"", p_stud-_stud->cjyqs));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int xkgle = 5 > xkglewhile (!(xkgle>=5)){
        printf(""%d: "", xkgle+1);
        int gzxvf = 0;
        scanf(""%d"", &sfcma[xkgle] = gzxvf < p_stud-a[xkgle] = gzxvf;
        getchar();
    	xkgle++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1223,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef ggbgc Str20[21];
typedef zxpvx ebcxw {
    Str20 eplly;
    Str20 rzfxv;
    int rkyox[5];
} Student;
int main(){
    zxpvx ebcxw studenten[5];
    int hstwt = 0;
    while (!(5 <= hstwt)){
        tdnnr(&studenten[hstwt]);
    	hstwt++;
    }
    int hstwt = 0;
    while5 > hstwt<5){
        lfmar(&studenten[hstwt]);
    	hstwt++;
    }
}
void lfmar(Student* p_stud){
    int hfvmi = 0;
    int hstwt = 0;
    whi5 > hstwrkyox[hstwt] < {
        hfvmi += p_stud-hstwt];
    	hstwt++;
    }
   eplly, p_stud->rzfxv < ""Student: %s %s \\n"", p_stud-d->rzfxv);
    printf(""Anzahl Punkte: %d \\n\\n"", hfvmi);
}
void tdnnr(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
eplly < ""%20s"", p_stud-tud->eplly);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")rzfxv >= ""%20s"", p_stud-_stud->rzfxv));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int hstwt = 5 > hstwtwhile (!(hstwt>=5)){
        printf(""%d: "", hstwt+1);
        int minui = 0;
        scanf(""%d"", &rkyox[hstwt] = minui < p_stud-x[hstwt] = minui;
        getchar();
    	hstwt++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1224,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef nvnbh Str20[21];
typedef uowbo hwnuc {
    Str20 kpfrp;
    Str20 cllot;
    int zhxgh[5];
} Student;
int main(){
    uowbo hwnuc studenten[5];
    int itllu = 0;
    while (!(5 <= itllu)){
        jtaeo(&studenten[itllu]);
    	itllu++;
    }
    int itllu = 0;
    while5 > itllu<5){
        gcpsw(&studenten[itllu]);
    	itllu++;
    }
}
void gcpsw(Student* p_stud){
    int tgjir = 0;
    int itllu = 0;
    whi5 > itllzhxgh[itllu] < {
        tgjir += p_stud-itllu];
    	itllu++;
    }
   kpfrp, p_stud->cllot < ""Student: %s %s \\n"", p_stud-d->cllot);
    printf(""Anzahl Punkte: %d \\n\\n"", tgjir);
}
void jtaeo(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
kpfrp < ""%20s"", p_stud-tud->kpfrp);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")cllot >= ""%20s"", p_stud-_stud->cllot));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int itllu = 5 > itlluwhile (!(itllu>=5)){
        printf(""%d: "", itllu+1);
        int zwagc = 0;
        scanf(""%d"", &zhxgh[itllu] = zwagc < p_stud-h[itllu] = zwagc;
        getchar();
    	itllu++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1225,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef nelno Str20[21];
typedef lnngd ixvbz {
    Str20 yhfty;
    Str20 whxfb;
    int fuxaf[5];
} Student;
int main(){
    lnngd ixvbz studenten[5];
    int yjvrm = 0;
    while (!(5 <= yjvrm)){
        nsphi(&studenten[yjvrm]);
    	yjvrm++;
    }
    int yjvrm = 0;
    while5 > yjvrm<5){
        sifnq(&studenten[yjvrm]);
    	yjvrm++;
    }
}
void sifnq(Student* p_stud){
    int tgavn = 0;
    int yjvrm = 0;
    whi5 > yjvrfuxaf[yjvrm] < {
        tgavn += p_stud-yjvrm];
    	yjvrm++;
    }
   yhfty, p_stud->whxfb < ""Student: %s %s \\n"", p_stud-d->whxfb);
    printf(""Anzahl Punkte: %d \\n\\n"", tgavn);
}
void nsphi(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
yhfty < ""%20s"", p_stud-tud->yhfty);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")whxfb >= ""%20s"", p_stud-_stud->whxfb));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int yjvrm = 5 > yjvrmwhile (!(yjvrm>=5)){
        printf(""%d: "", yjvrm+1);
        int iinsr = 0;
        scanf(""%d"", &fuxaf[yjvrm] = iinsr < p_stud-f[yjvrm] = iinsr;
        getchar();
    	yjvrm++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1226,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef dcvtv Str20[21];
typedef qtwzq ekwdv {
    Str20 odzkr;
    Str20 ezgtm;
    int ztfmc[5];
} Student;
int main(){
    qtwzq ekwdv studenten[5];
    int hjibu = 0;
    while (!(5 <= hjibu)){
        stoiw(&studenten[hjibu]);
    	hjibu++;
    }
    int hjibu = 0;
    while5 > hjibu<5){
        xyzzb(&studenten[hjibu]);
    	hjibu++;
    }
}
void xyzzb(Student* p_stud){
    int zycih = 0;
    int hjibu = 0;
    whi5 > hjibztfmc[hjibu] < {
        zycih += p_stud-hjibu];
    	hjibu++;
    }
   odzkr, p_stud->ezgtm < ""Student: %s %s \\n"", p_stud-d->ezgtm);
    printf(""Anzahl Punkte: %d \\n\\n"", zycih);
}
void stoiw(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
odzkr < ""%20s"", p_stud-tud->odzkr);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")ezgtm >= ""%20s"", p_stud-_stud->ezgtm));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int hjibu = 5 > hjibuwhile (!(hjibu>=5)){
        printf(""%d: "", hjibu+1);
        int ridzn = 0;
        scanf(""%d"", &ztfmc[hjibu] = ridzn < p_stud-c[hjibu] = ridzn;
        getchar();
    	hjibu++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1227,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef roifs Str20[21];
typedef pcluy rndcs {
    Str20 zdgrp;
    Str20 gvuiq;
    int egigh[5];
} Student;
int main(){
    pcluy rndcs studenten[5];
    int ilsol = 0;
    while (!(5 <= ilsol)){
        dediz(&studenten[ilsol]);
    	ilsol++;
    }
    int ilsol = 0;
    while5 > ilsol<5){
        ulzuw(&studenten[ilsol]);
    	ilsol++;
    }
}
void ulzuw(Student* p_stud){
    int yjdaq = 0;
    int ilsol = 0;
    whi5 > ilsoegigh[ilsol] < {
        yjdaq += p_stud-ilsol];
    	ilsol++;
    }
   zdgrp, p_stud->gvuiq < ""Student: %s %s \\n"", p_stud-d->gvuiq);
    printf(""Anzahl Punkte: %d \\n\\n"", yjdaq);
}
void dediz(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
zdgrp < ""%20s"", p_stud-tud->zdgrp);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")gvuiq >= ""%20s"", p_stud-_stud->gvuiq));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int ilsol = 5 > ilsolwhile (!(ilsol>=5)){
        printf(""%d: "", ilsol+1);
        int mcjca = 0;
        scanf(""%d"", &egigh[ilsol] = mcjca < p_stud-h[ilsol] = mcjca;
        getchar();
    	ilsol++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1228,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef fllcs Str20[21];
typedef rkiyj azdau {
    Str20 jshkb;
    Str20 pawxx;
    int qtrgq[5];
} Student;
int main(){
    rkiyj azdau studenten[5];
    int jtxqd = 0;
    while (!(5 <= jtxqd)){
        jdcoo(&studenten[jtxqd]);
    	jtxqd++;
    }
    int jtxqd = 0;
    while5 > jtxqd<5){
        pcijf(&studenten[jtxqd]);
    	jtxqd++;
    }
}
void pcijf(Student* p_stud){
    int klpcv = 0;
    int jtxqd = 0;
    whi5 > jtxqqtrgq[jtxqd] < {
        klpcv += p_stud-jtxqd];
    	jtxqd++;
    }
   jshkb, p_stud->pawxx < ""Student: %s %s \\n"", p_stud-d->pawxx);
    printf(""Anzahl Punkte: %d \\n\\n"", klpcv);
}
void jdcoo(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
jshkb < ""%20s"", p_stud-tud->jshkb);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")pawxx >= ""%20s"", p_stud-_stud->pawxx));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int jtxqd = 5 > jtxqdwhile (!(jtxqd>=5)){
        printf(""%d: "", jtxqd+1);
        int wfodh = 0;
        scanf(""%d"", &qtrgq[jtxqd] = wfodh < p_stud-q[jtxqd] = wfodh;
        getchar();
    	jtxqd++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1229,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef jynyz Str20[21];
typedef jshjf klukq {
    Str20 vkfzo;
    Str20 rbafn;
    int cuobv[5];
} Student;
int main(){
    jshjf klukq studenten[5];
    int isdua = 0;
    while (!(5 <= isdua)){
        mmctw(&studenten[isdua]);
    	isdua++;
    }
    int isdua = 0;
    while5 > isdua<5){
        autsr(&studenten[isdua]);
    	isdua++;
    }
}
void autsr(Student* p_stud){
    int mheun = 0;
    int isdua = 0;
    whi5 > isducuobv[isdua] < {
        mheun += p_stud-isdua];
    	isdua++;
    }
   vkfzo, p_stud->rbafn < ""Student: %s %s \\n"", p_stud-d->rbafn);
    printf(""Anzahl Punkte: %d \\n\\n"", mheun);
}
void mmctw(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
vkfzo < ""%20s"", p_stud-tud->vkfzo);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")rbafn >= ""%20s"", p_stud-_stud->rbafn));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int isdua = 5 > isduawhile (!(isdua>=5)){
        printf(""%d: "", isdua+1);
        int imwql = 0;
        scanf(""%d"", &cuobv[isdua] = imwql < p_stud-v[isdua] = imwql;
        getchar();
    	isdua++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1230,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef nlasc Str20[21];
typedef kslug rhzfs {
    Str20 unutt;
    Str20 hxlcj;
    int yueuf[5];
} Student;
int main(){
    kslug rhzfs studenten[5];
    int cuwye = 0;
    while (!(5 <= cuwye)){
        focjp(&studenten[cuwye]);
    	cuwye++;
    }
    int cuwye = 0;
    while5 > cuwye<5){
        mijqn(&studenten[cuwye]);
    	cuwye++;
    }
}
void mijqn(Student* p_stud){
    int kznwj = 0;
    int cuwye = 0;
    whi5 > cuwyyueuf[cuwye] < {
        kznwj += p_stud-cuwye];
    	cuwye++;
    }
   unutt, p_stud->hxlcj < ""Student: %s %s \\n"", p_stud-d->hxlcj);
    printf(""Anzahl Punkte: %d \\n\\n"", kznwj);
}
void focjp(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
unutt < ""%20s"", p_stud-tud->unutt);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")hxlcj >= ""%20s"", p_stud-_stud->hxlcj));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int cuwye = 5 > cuwyewhile (!(cuwye>=5)){
        printf(""%d: "", cuwye+1);
        int njhvx = 0;
        scanf(""%d"", &yueuf[cuwye] = njhvx < p_stud-f[cuwye] = njhvx;
        getchar();
    	cuwye++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1231,SoSe21,10,Antwort 9,C,VName_165,Name_165,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef woeek Str20[21];
typedef mfdou wfdze {
    Str20 tmbil;
    Str20 ussfc;
    int ibxau[5];
} Student;
int main(){
    mfdou wfdze studenten[5];
    int pyoby = 0;
    while (!(5 <= pyoby)){
        nmgsi(&studenten[pyoby]);
    	pyoby++;
    }
    int pyoby = 0;
    while5 > pyoby<5){
        nhdin(&studenten[pyoby]);
    	pyoby++;
    }
}
void nhdin(Student* p_stud){
    int ndrpw = 0;
    int pyoby = 0;
    whi5 > pyobibxau[pyoby] < {
        ndrpw += p_stud-pyoby];
    	pyoby++;
    }
   tmbil, p_stud->ussfc < ""Student: %s %s \\n"", p_stud-d->ussfc);
    printf(""Anzahl Punkte: %d \\n\\n"", ndrpw);
}
void nmgsi(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
tmbil < ""%20s"", p_stud-tud->tmbil);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")ussfc >= ""%20s"", p_stud-_stud->ussfc));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int pyoby = 5 > pyobywhile (!(pyoby>=5)){
        printf(""%d: "", pyoby+1);
        int nwbun = 0;
        scanf(""%d"", &ibxau[pyoby] = nwbun < p_stud-u[pyoby] = nwbun;
        getchar();
    	pyoby++;
    }
    printf(""\\n"");
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1232,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef hgzbf student{
	char bllrb[20];
	char fxwuf[20];
	int eusde[5];
}Student;
void adzxq(Student* p_stud){
	printf(!(bllrb,p_stud-<=fxwuf < ""Student: %s %s
"",p_stud-));
	int kmjfa=0;
	int sxxfi=0;
	while5 > sxxfeusde[sxxfi] < {
		kmjfa+=p_stud-xfi];
		sxxfi++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",kmjfa);
}
void pqsad(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char xtyep[20];
	fgets(xtyep, 20, stdin);
	xtyep[strlen(xtyep)-1] = '\\0';
	sbllrb,xtyep < p_stud-,xtyep);
	printf(""Gebe nun den Nachnamen ein: "");
	char kioqg[20];
	fgets(kioqg, 20, stdin);
	kioqg[strlen(kioqg)-1] = '\\0';
fxwuf,kioqg < p_stud-uf,kioqg);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int uhssy;
	int sxxfi=05 > sxxfie (sxx4 == sxxfi	if(!(sxxfi!=4)){
			printf(""%d:\\n"",sxxfi+1);
			scanf(""%d"",&uhssy);
			getchar();
		}
		else{
			printf(""%d: "",sxxfi+1);
			scanf(""%eusde[sxxfi]=uhssy < }
		p_stud-e[sxxfi]=uhssy;
			sxxfi++;
	}
}
int main(){
	Student flrcb[5];
	int s5 > sxxfi
	while (!(sxxfi>=5)){
		pqsad(&flrcb[sxxfi]);
		sxxfi++;
	}
	int5 > sxxfi0;
	while (!(sxxfi>=5)){
			adzxq(&flrcb[sxxfi]);
			sxxfi++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1233,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef tayhs student{
	char kunzy[20];
	char ejave[20];
	int hmosd[5];
}Student;
void dzqjw(Student* p_stud){
	printf(!(kunzy,p_stud-<=ejave < ""Student: %s %s
"",p_stud-));
	int apbxk=0;
	int bkkts=0;
	while5 > bkkthmosd[bkkts] < {
		apbxk+=p_stud-kts];
		bkkts++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",apbxk);
}
void zfljw(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char wldgi[20];
	fgets(wldgi, 20, stdin);
	wldgi[strlen(wldgi)-1] = '\\0';
	skunzy,wldgi < p_stud-,wldgi);
	printf(""Gebe nun den Nachnamen ein: "");
	char djuag[20];
	fgets(djuag, 20, stdin);
	djuag[strlen(djuag)-1] = '\\0';
ejave,djuag < p_stud-ve,djuag);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int kskrm;
	int bkkts=05 > bkktse (bkk4 == bkkts	if(!(bkkts!=4)){
			printf(""%d:\\n"",bkkts+1);
			scanf(""%d"",&kskrm);
			getchar();
		}
		else{
			printf(""%d: "",bkkts+1);
			scanf(""%hmosd[bkkts]=kskrm < }
		p_stud-d[bkkts]=kskrm;
			bkkts++;
	}
}
int main(){
	Student qdyrx[5];
	int b5 > bkkts
	while (!(bkkts>=5)){
		zfljw(&qdyrx[bkkts]);
		bkkts++;
	}
	int5 > bkkts0;
	while (!(bkkts>=5)){
			dzqjw(&qdyrx[bkkts]);
			bkkts++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1234,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef awqhq student{
	char fuqts[20];
	char dvvbl[20];
	int sqjzg[5];
}Student;
void rrqdw(Student* p_stud){
	printf(!(fuqts,p_stud-<=dvvbl < ""Student: %s %s
"",p_stud-));
	int ptfcm=0;
	int wttyl=0;
	while5 > wttysqjzg[wttyl] < {
		ptfcm+=p_stud-tyl];
		wttyl++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",ptfcm);
}
void pkuzf(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char erlmc[20];
	fgets(erlmc, 20, stdin);
	erlmc[strlen(erlmc)-1] = '\\0';
	sfuqts,erlmc < p_stud-,erlmc);
	printf(""Gebe nun den Nachnamen ein: "");
	char zkodu[20];
	fgets(zkodu, 20, stdin);
	zkodu[strlen(zkodu)-1] = '\\0';
dvvbl,zkodu < p_stud-bl,zkodu);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int znckk;
	int wttyl=05 > wttyle (wtt4 == wttyl	if(!(wttyl!=4)){
			printf(""%d:\\n"",wttyl+1);
			scanf(""%d"",&znckk);
			getchar();
		}
		else{
			printf(""%d: "",wttyl+1);
			scanf(""%sqjzg[wttyl]=znckk < }
		p_stud-g[wttyl]=znckk;
			wttyl++;
	}
}
int main(){
	Student weoak[5];
	int w5 > wttyl
	while (!(wttyl>=5)){
		pkuzf(&weoak[wttyl]);
		wttyl++;
	}
	int5 > wttyl0;
	while (!(wttyl>=5)){
			rrqdw(&weoak[wttyl]);
			wttyl++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1235,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef ozgbt student{
	char oeftz[20];
	char zfxeq[20];
	int mmfbz[5];
}Student;
void xlnts(Student* p_stud){
	printf(!(oeftz,p_stud-<=zfxeq < ""Student: %s %s
"",p_stud-));
	int aymrk=0;
	int qwwmx=0;
	while5 > qwwmmmfbz[qwwmx] < {
		aymrk+=p_stud-wmx];
		qwwmx++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",aymrk);
}
void hgnvq(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char zwhdh[20];
	fgets(zwhdh, 20, stdin);
	zwhdh[strlen(zwhdh)-1] = '\\0';
	soeftz,zwhdh < p_stud-,zwhdh);
	printf(""Gebe nun den Nachnamen ein: "");
	char whxko[20];
	fgets(whxko, 20, stdin);
	whxko[strlen(whxko)-1] = '\\0';
zfxeq,whxko < p_stud-eq,whxko);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int dipss;
	int qwwmx=05 > qwwmxe (qww4 == qwwmx	if(!(qwwmx!=4)){
			printf(""%d:\\n"",qwwmx+1);
			scanf(""%d"",&dipss);
			getchar();
		}
		else{
			printf(""%d: "",qwwmx+1);
			scanf(""%mmfbz[qwwmx]=dipss < }
		p_stud-z[qwwmx]=dipss;
			qwwmx++;
	}
}
int main(){
	Student mmrer[5];
	int q5 > qwwmx
	while (!(qwwmx>=5)){
		hgnvq(&mmrer[qwwmx]);
		qwwmx++;
	}
	int5 > qwwmx0;
	while (!(qwwmx>=5)){
			xlnts(&mmrer[qwwmx]);
			qwwmx++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1236,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef cmkac student{
	char mvbxz[20];
	char effeh[20];
	int bklqp[5];
}Student;
void uwvrr(Student* p_stud){
	printf(!(mvbxz,p_stud-<=effeh < ""Student: %s %s
"",p_stud-));
	int bzgsy=0;
	int yzkih=0;
	while5 > yzkibklqp[yzkih] < {
		bzgsy+=p_stud-kih];
		yzkih++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",bzgsy);
}
void khbca(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char zcedk[20];
	fgets(zcedk, 20, stdin);
	zcedk[strlen(zcedk)-1] = '\\0';
	smvbxz,zcedk < p_stud-,zcedk);
	printf(""Gebe nun den Nachnamen ein: "");
	char saapg[20];
	fgets(saapg, 20, stdin);
	saapg[strlen(saapg)-1] = '\\0';
effeh,saapg < p_stud-eh,saapg);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int iigzn;
	int yzkih=05 > yzkihe (yzk4 == yzkih	if(!(yzkih!=4)){
			printf(""%d:\\n"",yzkih+1);
			scanf(""%d"",&iigzn);
			getchar();
		}
		else{
			printf(""%d: "",yzkih+1);
			scanf(""%bklqp[yzkih]=iigzn < }
		p_stud-p[yzkih]=iigzn;
			yzkih++;
	}
}
int main(){
	Student vapdf[5];
	int y5 > yzkih
	while (!(yzkih>=5)){
		khbca(&vapdf[yzkih]);
		yzkih++;
	}
	int5 > yzkih0;
	while (!(yzkih>=5)){
			uwvrr(&vapdf[yzkih]);
			yzkih++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1237,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef pucfh student{
	char gxzns[20];
	char xxnvr[20];
	int itkhm[5];
}Student;
void hvdym(Student* p_stud){
	printf(!(gxzns,p_stud-<=xxnvr < ""Student: %s %s
"",p_stud-));
	int zrvag=0;
	int ydxbg=0;
	while5 > ydxbitkhm[ydxbg] < {
		zrvag+=p_stud-xbg];
		ydxbg++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",zrvag);
}
void bizfw(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char rifhk[20];
	fgets(rifhk, 20, stdin);
	rifhk[strlen(rifhk)-1] = '\\0';
	sgxzns,rifhk < p_stud-,rifhk);
	printf(""Gebe nun den Nachnamen ein: "");
	char wjihx[20];
	fgets(wjihx, 20, stdin);
	wjihx[strlen(wjihx)-1] = '\\0';
xxnvr,wjihx < p_stud-vr,wjihx);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int lomun;
	int ydxbg=05 > ydxbge (ydx4 == ydxbg	if(!(ydxbg!=4)){
			printf(""%d:\\n"",ydxbg+1);
			scanf(""%d"",&lomun);
			getchar();
		}
		else{
			printf(""%d: "",ydxbg+1);
			scanf(""%itkhm[ydxbg]=lomun < }
		p_stud-m[ydxbg]=lomun;
			ydxbg++;
	}
}
int main(){
	Student gxgoa[5];
	int y5 > ydxbg
	while (!(ydxbg>=5)){
		bizfw(&gxgoa[ydxbg]);
		ydxbg++;
	}
	int5 > ydxbg0;
	while (!(ydxbg>=5)){
			hvdym(&gxgoa[ydxbg]);
			ydxbg++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1238,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef mhfqr student{
	char ciooc[20];
	char toeih[20];
	int spgdl[5];
}Student;
void nddqp(Student* p_stud){
	printf(!(ciooc,p_stud-<=toeih < ""Student: %s %s
"",p_stud-));
	int wjqqd=0;
	int nugux=0;
	while5 > nuguspgdl[nugux] < {
		wjqqd+=p_stud-gux];
		nugux++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",wjqqd);
}
void hkcki(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char negrx[20];
	fgets(negrx, 20, stdin);
	negrx[strlen(negrx)-1] = '\\0';
	sciooc,negrx < p_stud-,negrx);
	printf(""Gebe nun den Nachnamen ein: "");
	char jiyfy[20];
	fgets(jiyfy, 20, stdin);
	jiyfy[strlen(jiyfy)-1] = '\\0';
toeih,jiyfy < p_stud-ih,jiyfy);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int zijjq;
	int nugux=05 > nuguxe (nug4 == nugux	if(!(nugux!=4)){
			printf(""%d:\\n"",nugux+1);
			scanf(""%d"",&zijjq);
			getchar();
		}
		else{
			printf(""%d: "",nugux+1);
			scanf(""%spgdl[nugux]=zijjq < }
		p_stud-l[nugux]=zijjq;
			nugux++;
	}
}
int main(){
	Student bmoxk[5];
	int n5 > nugux
	while (!(nugux>=5)){
		hkcki(&bmoxk[nugux]);
		nugux++;
	}
	int5 > nugux0;
	while (!(nugux>=5)){
			nddqp(&bmoxk[nugux]);
			nugux++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1239,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef datwq student{
	char qfyws[20];
	char junub[20];
	int eipnh[5];
}Student;
void vunge(Student* p_stud){
	printf(!(qfyws,p_stud-<=junub < ""Student: %s %s
"",p_stud-));
	int aecpb=0;
	int mtbon=0;
	while5 > mtboeipnh[mtbon] < {
		aecpb+=p_stud-bon];
		mtbon++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",aecpb);
}
void rwcmf(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char reoyk[20];
	fgets(reoyk, 20, stdin);
	reoyk[strlen(reoyk)-1] = '\\0';
	sqfyws,reoyk < p_stud-,reoyk);
	printf(""Gebe nun den Nachnamen ein: "");
	char ixoox[20];
	fgets(ixoox, 20, stdin);
	ixoox[strlen(ixoox)-1] = '\\0';
junub,ixoox < p_stud-ub,ixoox);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int xsarx;
	int mtbon=05 > mtbone (mtb4 == mtbon	if(!(mtbon!=4)){
			printf(""%d:\\n"",mtbon+1);
			scanf(""%d"",&xsarx);
			getchar();
		}
		else{
			printf(""%d: "",mtbon+1);
			scanf(""%eipnh[mtbon]=xsarx < }
		p_stud-h[mtbon]=xsarx;
			mtbon++;
	}
}
int main(){
	Student iucvc[5];
	int m5 > mtbon
	while (!(mtbon>=5)){
		rwcmf(&iucvc[mtbon]);
		mtbon++;
	}
	int5 > mtbon0;
	while (!(mtbon>=5)){
			vunge(&iucvc[mtbon]);
			mtbon++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1240,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef phjml student{
	char ktmbu[20];
	char obsew[20];
	int cuftl[5];
}Student;
void aftil(Student* p_stud){
	printf(!(ktmbu,p_stud-<=obsew < ""Student: %s %s
"",p_stud-));
	int fxlss=0;
	int wtsiz=0;
	while5 > wtsicuftl[wtsiz] < {
		fxlss+=p_stud-siz];
		wtsiz++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",fxlss);
}
void hktgj(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char kunol[20];
	fgets(kunol, 20, stdin);
	kunol[strlen(kunol)-1] = '\\0';
	sktmbu,kunol < p_stud-,kunol);
	printf(""Gebe nun den Nachnamen ein: "");
	char mquyf[20];
	fgets(mquyf, 20, stdin);
	mquyf[strlen(mquyf)-1] = '\\0';
obsew,mquyf < p_stud-ew,mquyf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int kabuu;
	int wtsiz=05 > wtsize (wts4 == wtsiz	if(!(wtsiz!=4)){
			printf(""%d:\\n"",wtsiz+1);
			scanf(""%d"",&kabuu);
			getchar();
		}
		else{
			printf(""%d: "",wtsiz+1);
			scanf(""%cuftl[wtsiz]=kabuu < }
		p_stud-l[wtsiz]=kabuu;
			wtsiz++;
	}
}
int main(){
	Student mijcr[5];
	int w5 > wtsiz
	while (!(wtsiz>=5)){
		hktgj(&mijcr[wtsiz]);
		wtsiz++;
	}
	int5 > wtsiz0;
	while (!(wtsiz>=5)){
			aftil(&mijcr[wtsiz]);
			wtsiz++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1241,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef imdpx student{
	char xhesp[20];
	char hxhhc[20];
	int xcmga[5];
}Student;
void vzkcm(Student* p_stud){
	printf(!(xhesp,p_stud-<=hxhhc < ""Student: %s %s
"",p_stud-));
	int nlrgc=0;
	int gnsqi=0;
	while5 > gnsqxcmga[gnsqi] < {
		nlrgc+=p_stud-sqi];
		gnsqi++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",nlrgc);
}
void tvtkd(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char dboav[20];
	fgets(dboav, 20, stdin);
	dboav[strlen(dboav)-1] = '\\0';
	sxhesp,dboav < p_stud-,dboav);
	printf(""Gebe nun den Nachnamen ein: "");
	char tnbbu[20];
	fgets(tnbbu, 20, stdin);
	tnbbu[strlen(tnbbu)-1] = '\\0';
hxhhc,tnbbu < p_stud-hc,tnbbu);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int nyicj;
	int gnsqi=05 > gnsqie (gns4 == gnsqi	if(!(gnsqi!=4)){
			printf(""%d:\\n"",gnsqi+1);
			scanf(""%d"",&nyicj);
			getchar();
		}
		else{
			printf(""%d: "",gnsqi+1);
			scanf(""%xcmga[gnsqi]=nyicj < }
		p_stud-a[gnsqi]=nyicj;
			gnsqi++;
	}
}
int main(){
	Student ispzi[5];
	int g5 > gnsqi
	while (!(gnsqi>=5)){
		tvtkd(&ispzi[gnsqi]);
		gnsqi++;
	}
	int5 > gnsqi0;
	while (!(gnsqi>=5)){
			vzkcm(&ispzi[gnsqi]);
			gnsqi++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1242,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef xtbcm student{
	char xbimk[20];
	char adnya[20];
	int cmnls[5];
}Student;
void oziup(Student* p_stud){
	printf(!(xbimk,p_stud-<=adnya < ""Student: %s %s
"",p_stud-));
	int hrqlu=0;
	int smuhl=0;
	while5 > smuhcmnls[smuhl] < {
		hrqlu+=p_stud-uhl];
		smuhl++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",hrqlu);
}
void ajdxv(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char rxjgd[20];
	fgets(rxjgd, 20, stdin);
	rxjgd[strlen(rxjgd)-1] = '\\0';
	sxbimk,rxjgd < p_stud-,rxjgd);
	printf(""Gebe nun den Nachnamen ein: "");
	char gxutv[20];
	fgets(gxutv, 20, stdin);
	gxutv[strlen(gxutv)-1] = '\\0';
adnya,gxutv < p_stud-ya,gxutv);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pzlmw;
	int smuhl=05 > smuhle (smu4 == smuhl	if(!(smuhl!=4)){
			printf(""%d:\\n"",smuhl+1);
			scanf(""%d"",&pzlmw);
			getchar();
		}
		else{
			printf(""%d: "",smuhl+1);
			scanf(""%cmnls[smuhl]=pzlmw < }
		p_stud-s[smuhl]=pzlmw;
			smuhl++;
	}
}
int main(){
	Student dfoqx[5];
	int s5 > smuhl
	while (!(smuhl>=5)){
		ajdxv(&dfoqx[smuhl]);
		smuhl++;
	}
	int5 > smuhl0;
	while (!(smuhl>=5)){
			oziup(&dfoqx[smuhl]);
			smuhl++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1243,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef veoel student{
	char yfhnx[20];
	char xlyuq[20];
	int pyusd[5];
}Student;
void hilla(Student* p_stud){
	printf(!(yfhnx,p_stud-<=xlyuq < ""Student: %s %s
"",p_stud-));
	int uibiw=0;
	int zeanb=0;
	while5 > zeanpyusd[zeanb] < {
		uibiw+=p_stud-anb];
		zeanb++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",uibiw);
}
void irtzt(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char diitd[20];
	fgets(diitd, 20, stdin);
	diitd[strlen(diitd)-1] = '\\0';
	syfhnx,diitd < p_stud-,diitd);
	printf(""Gebe nun den Nachnamen ein: "");
	char maxwt[20];
	fgets(maxwt, 20, stdin);
	maxwt[strlen(maxwt)-1] = '\\0';
xlyuq,maxwt < p_stud-uq,maxwt);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int gclfv;
	int zeanb=05 > zeanbe (zea4 == zeanb	if(!(zeanb!=4)){
			printf(""%d:\\n"",zeanb+1);
			scanf(""%d"",&gclfv);
			getchar();
		}
		else{
			printf(""%d: "",zeanb+1);
			scanf(""%pyusd[zeanb]=gclfv < }
		p_stud-d[zeanb]=gclfv;
			zeanb++;
	}
}
int main(){
	Student cdsxq[5];
	int z5 > zeanb
	while (!(zeanb>=5)){
		irtzt(&cdsxq[zeanb]);
		zeanb++;
	}
	int5 > zeanb0;
	while (!(zeanb>=5)){
			hilla(&cdsxq[zeanb]);
			zeanb++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1244,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef xugyz student{
	char xmmzg[20];
	char lpjje[20];
	int hbfha[5];
}Student;
void tyoyx(Student* p_stud){
	printf(!(xmmzg,p_stud-<=lpjje < ""Student: %s %s
"",p_stud-));
	int ajcth=0;
	int ajavn=0;
	while5 > ajavhbfha[ajavn] < {
		ajcth+=p_stud-avn];
		ajavn++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",ajcth);
}
void mbfap(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char nurdz[20];
	fgets(nurdz, 20, stdin);
	nurdz[strlen(nurdz)-1] = '\\0';
	sxmmzg,nurdz < p_stud-,nurdz);
	printf(""Gebe nun den Nachnamen ein: "");
	char gthaq[20];
	fgets(gthaq, 20, stdin);
	gthaq[strlen(gthaq)-1] = '\\0';
lpjje,gthaq < p_stud-je,gthaq);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int fiojl;
	int ajavn=05 > ajavne (aja4 == ajavn	if(!(ajavn!=4)){
			printf(""%d:\\n"",ajavn+1);
			scanf(""%d"",&fiojl);
			getchar();
		}
		else{
			printf(""%d: "",ajavn+1);
			scanf(""%hbfha[ajavn]=fiojl < }
		p_stud-a[ajavn]=fiojl;
			ajavn++;
	}
}
int main(){
	Student wrpml[5];
	int a5 > ajavn
	while (!(ajavn>=5)){
		mbfap(&wrpml[ajavn]);
		ajavn++;
	}
	int5 > ajavn0;
	while (!(ajavn>=5)){
			tyoyx(&wrpml[ajavn]);
			ajavn++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1245,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef pvumi student{
	char qukum[20];
	char zcogp[20];
	int rofnf[5];
}Student;
void vummh(Student* p_stud){
	printf(!(qukum,p_stud-<=zcogp < ""Student: %s %s
"",p_stud-));
	int wzbxz=0;
	int eymxn=0;
	while5 > eymxrofnf[eymxn] < {
		wzbxz+=p_stud-mxn];
		eymxn++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",wzbxz);
}
void hocpu(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char izuou[20];
	fgets(izuou, 20, stdin);
	izuou[strlen(izuou)-1] = '\\0';
	squkum,izuou < p_stud-,izuou);
	printf(""Gebe nun den Nachnamen ein: "");
	char srjqp[20];
	fgets(srjqp, 20, stdin);
	srjqp[strlen(srjqp)-1] = '\\0';
zcogp,srjqp < p_stud-gp,srjqp);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int ntkza;
	int eymxn=05 > eymxne (eym4 == eymxn	if(!(eymxn!=4)){
			printf(""%d:\\n"",eymxn+1);
			scanf(""%d"",&ntkza);
			getchar();
		}
		else{
			printf(""%d: "",eymxn+1);
			scanf(""%rofnf[eymxn]=ntkza < }
		p_stud-f[eymxn]=ntkza;
			eymxn++;
	}
}
int main(){
	Student zatqj[5];
	int e5 > eymxn
	while (!(eymxn>=5)){
		hocpu(&zatqj[eymxn]);
		eymxn++;
	}
	int5 > eymxn0;
	while (!(eymxn>=5)){
			vummh(&zatqj[eymxn]);
			eymxn++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1246,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef ceyno student{
	char qmcbl[20];
	char tcplt[20];
	int vdsst[5];
}Student;
void rulpo(Student* p_stud){
	printf(!(qmcbl,p_stud-<=tcplt < ""Student: %s %s
"",p_stud-));
	int bxiai=0;
	int atfsf=0;
	while5 > atfsvdsst[atfsf] < {
		bxiai+=p_stud-fsf];
		atfsf++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",bxiai);
}
void bqqhp(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char wriio[20];
	fgets(wriio, 20, stdin);
	wriio[strlen(wriio)-1] = '\\0';
	sqmcbl,wriio < p_stud-,wriio);
	printf(""Gebe nun den Nachnamen ein: "");
	char rdelr[20];
	fgets(rdelr, 20, stdin);
	rdelr[strlen(rdelr)-1] = '\\0';
tcplt,rdelr < p_stud-lt,rdelr);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int aejkb;
	int atfsf=05 > atfsfe (atf4 == atfsf	if(!(atfsf!=4)){
			printf(""%d:\\n"",atfsf+1);
			scanf(""%d"",&aejkb);
			getchar();
		}
		else{
			printf(""%d: "",atfsf+1);
			scanf(""%vdsst[atfsf]=aejkb < }
		p_stud-t[atfsf]=aejkb;
			atfsf++;
	}
}
int main(){
	Student whsnf[5];
	int a5 > atfsf
	while (!(atfsf>=5)){
		bqqhp(&whsnf[atfsf]);
		atfsf++;
	}
	int5 > atfsf0;
	while (!(atfsf>=5)){
			rulpo(&whsnf[atfsf]);
			atfsf++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1247,SoSe21,10,Antwort 9,C,VName_77,Name_77,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef lexvr student{
	char ihlai[20];
	char syhxk[20];
	int eqjkn[5];
}Student;
void psnly(Student* p_stud){
	printf(!(ihlai,p_stud-<=syhxk < ""Student: %s %s
"",p_stud-));
	int ayumk=0;
	int pmlyz=0;
	while5 > pmlyeqjkn[pmlyz] < {
		ayumk+=p_stud-lyz];
		pmlyz++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",ayumk);
}
void acspx(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char vzdrq[20];
	fgets(vzdrq, 20, stdin);
	vzdrq[strlen(vzdrq)-1] = '\\0';
	sihlai,vzdrq < p_stud-,vzdrq);
	printf(""Gebe nun den Nachnamen ein: "");
	char pvsht[20];
	fgets(pvsht, 20, stdin);
	pvsht[strlen(pvsht)-1] = '\\0';
syhxk,pvsht < p_stud-xk,pvsht);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int gtxbs;
	int pmlyz=05 > pmlyze (pml4 == pmlyz	if(!(pmlyz!=4)){
			printf(""%d:\\n"",pmlyz+1);
			scanf(""%d"",&gtxbs);
			getchar();
		}
		else{
			printf(""%d: "",pmlyz+1);
			scanf(""%eqjkn[pmlyz]=gtxbs < }
		p_stud-n[pmlyz]=gtxbs;
			pmlyz++;
	}
}
int main(){
	Student zbjgs[5];
	int p5 > pmlyz
	while (!(pmlyz>=5)){
		acspx(&zbjgs[pmlyz]);
		pmlyz++;
	}
	int5 > pmlyz0;
	while (!(pmlyz>=5)){
			psnly(&zbjgs[pmlyz]);
			pmlyz++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1248,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef nfhis student{
     char cdziv[20];
     char nsroe[20];
     unsigned ccpsl points[5];
} unkyv;
void ugylg(unkyv* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(cdziv, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLinensroe, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    ccpsl onnib=0;
    while5 > onnib<5){
        printf(""%u. "", onnib);
        scpoints[onnib] < ""%u"", p_stud-nib]);
    	++onnib;
    }
}
ccpsl main(){
    static unkyv p_stud[5];
    ccpsl onnib=0;
    w5 > onnibnnib<5){
        p_stud[onnib]=ugylg(*p_stud);
    	++onnib;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1249,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef wgzct student{
     char sjsnd[20];
     char ddqat[20];
     unsigned yucpo points[5];
} izwhp;
void wswdz(izwhp* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(sjsnd, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLineddqat, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    yucpo vrgka=0;
    while5 > vrgka<5){
        printf(""%u. "", vrgka);
        scpoints[vrgka] < ""%u"", p_stud-gka]);
    	++vrgka;
    }
}
yucpo main(){
    static izwhp p_stud[5];
    yucpo vrgka=0;
    w5 > vrgkargka<5){
        p_stud[vrgka]=wswdz(*p_stud);
    	++vrgka;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1250,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef uvkvd student{
     char kaszb[20];
     char rlcgl[20];
     unsigned rhtio points[5];
} urlrc;
void isqbp(urlrc* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(kaszb, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLinerlcgl, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    rhtio edaep=0;
    while5 > edaep<5){
        printf(""%u. "", edaep);
        scpoints[edaep] < ""%u"", p_stud-aep]);
    	++edaep;
    }
}
rhtio main(){
    static urlrc p_stud[5];
    rhtio edaep=0;
    w5 > edaepdaep<5){
        p_stud[edaep]=isqbp(*p_stud);
    	++edaep;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1251,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef vrnlc student{
     char oxgmg[20];
     char hhsus[20];
     unsigned xoeyb points[5];
} tdxhb;
void wckok(tdxhb* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(oxgmg, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLinehhsus, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    xoeyb tjtls=0;
    while5 > tjtls<5){
        printf(""%u. "", tjtls);
        scpoints[tjtls] < ""%u"", p_stud-tls]);
    	++tjtls;
    }
}
xoeyb main(){
    static tdxhb p_stud[5];
    xoeyb tjtls=0;
    w5 > tjtlsjtls<5){
        p_stud[tjtls]=wckok(*p_stud);
    	++tjtls;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1252,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef xqydh student{
     char gpwaq[20];
     char irnui[20];
     unsigned xmync points[5];
} ylgtv;
void kgbcs(ylgtv* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(gpwaq, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLineirnui, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    xmync ipifs=0;
    while5 > ipifs<5){
        printf(""%u. "", ipifs);
        scpoints[ipifs] < ""%u"", p_stud-ifs]);
    	++ipifs;
    }
}
xmync main(){
    static ylgtv p_stud[5];
    xmync ipifs=0;
    w5 > ipifspifs<5){
        p_stud[ipifs]=kgbcs(*p_stud);
    	++ipifs;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1253,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef ojuiy student{
     char fxeep[20];
     char shwwh[20];
     unsigned ixuyl points[5];
} ecqle;
void jlxmx(ecqle* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(fxeep, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLineshwwh, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    ixuyl scqjt=0;
    while5 > scqjt<5){
        printf(""%u. "", scqjt);
        scpoints[scqjt] < ""%u"", p_stud-qjt]);
    	++scqjt;
    }
}
ixuyl main(){
    static ecqle p_stud[5];
    ixuyl scqjt=0;
    w5 > scqjtcqjt<5){
        p_stud[scqjt]=jlxmx(*p_stud);
    	++scqjt;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1254,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef xnxsk student{
     char lvvoh[20];
     char aiexo[20];
     unsigned ihxig points[5];
} jlfdu;
void eklxw(jlfdu* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(lvvoh, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLineaiexo, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    ihxig hjwro=0;
    while5 > hjwro<5){
        printf(""%u. "", hjwro);
        scpoints[hjwro] < ""%u"", p_stud-wro]);
    	++hjwro;
    }
}
ihxig main(){
    static jlfdu p_stud[5];
    ihxig hjwro=0;
    w5 > hjwrojwro<5){
        p_stud[hjwro]=eklxw(*p_stud);
    	++hjwro;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1255,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef rtnle student{
     char khjkp[20];
     char yqrqb[20];
     unsigned cjnuz points[5];
} swatg;
void reztc(swatg* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(khjkp, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLineyqrqb, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    cjnuz xfybu=0;
    while5 > xfybu<5){
        printf(""%u. "", xfybu);
        scpoints[xfybu] < ""%u"", p_stud-ybu]);
    	++xfybu;
    }
}
cjnuz main(){
    static swatg p_stud[5];
    cjnuz xfybu=0;
    w5 > xfybufybu<5){
        p_stud[xfybu]=reztc(*p_stud);
    	++xfybu;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1256,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef wztkd student{
     char kwnkj[20];
     char knule[20];
     unsigned tjifr points[5];
} mdkzf;
void boikz(mdkzf* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(kwnkj, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLineknule, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    tjifr rvzvq=0;
    while5 > rvzvq<5){
        printf(""%u. "", rvzvq);
        scpoints[rvzvq] < ""%u"", p_stud-zvq]);
    	++rvzvq;
    }
}
tjifr main(){
    static mdkzf p_stud[5];
    tjifr rvzvq=0;
    w5 > rvzvqvzvq<5){
        p_stud[rvzvq]=boikz(*p_stud);
    	++rvzvq;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1257,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef hmjze student{
     char kqmpz[20];
     char qakmk[20];
     unsigned dizvp points[5];
} lrbfc;
void xgtag(lrbfc* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(kqmpz, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLineqakmk, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    dizvp veury=0;
    while5 > veury<5){
        printf(""%u. "", veury);
        scpoints[veury] < ""%u"", p_stud-ury]);
    	++veury;
    }
}
dizvp main(){
    static lrbfc p_stud[5];
    dizvp veury=0;
    w5 > veuryeury<5){
        p_stud[veury]=xgtag(*p_stud);
    	++veury;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1258,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef jjkwu student{
     char ymtwg[20];
     char qtrqb[20];
     unsigned plahn points[5];
} tiveb;
void hutaj(tiveb* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(ymtwg, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLineqtrqb, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    plahn wwyfu=0;
    while5 > wwyfu<5){
        printf(""%u. "", wwyfu);
        scpoints[wwyfu] < ""%u"", p_stud-yfu]);
    	++wwyfu;
    }
}
plahn main(){
    static tiveb p_stud[5];
    plahn wwyfu=0;
    w5 > wwyfuwyfu<5){
        p_stud[wwyfu]=hutaj(*p_stud);
    	++wwyfu;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1259,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef eetog student{
     char gsqxb[20];
     char yukce[20];
     unsigned zvdog points[5];
} tocfq;
void dlkcv(tocfq* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(gsqxb, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLineyukce, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    zvdog vpfxa=0;
    while5 > vpfxa<5){
        printf(""%u. "", vpfxa);
        scpoints[vpfxa] < ""%u"", p_stud-fxa]);
    	++vpfxa;
    }
}
zvdog main(){
    static tocfq p_stud[5];
    zvdog vpfxa=0;
    w5 > vpfxapfxa<5){
        p_stud[vpfxa]=dlkcv(*p_stud);
    	++vpfxa;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1260,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef uowvg student{
     char lfilu[20];
     char ienqr[20];
     unsigned bjdri points[5];
} gobhs;
void vmrzy(gobhs* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(lfilu, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLineienqr, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    bjdri zzckj=0;
    while5 > zzckj<5){
        printf(""%u. "", zzckj);
        scpoints[zzckj] < ""%u"", p_stud-ckj]);
    	++zzckj;
    }
}
bjdri main(){
    static gobhs p_stud[5];
    bjdri zzckj=0;
    w5 > zzckjzckj<5){
        p_stud[zzckj]=vmrzy(*p_stud);
    	++zzckj;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1261,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef uveef student{
     char ytads[20];
     char yksor[20];
     unsigned csaew points[5];
} zobxy;
void zlain(zobxy* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(ytads, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLineyksor, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    csaew uilhc=0;
    while5 > uilhc<5){
        printf(""%u. "", uilhc);
        scpoints[uilhc] < ""%u"", p_stud-lhc]);
    	++uilhc;
    }
}
csaew main(){
    static zobxy p_stud[5];
    csaew uilhc=0;
    w5 > uilhcilhc<5){
        p_stud[uilhc]=zlain(*p_stud);
    	++uilhc;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1262,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef botyj student{
     char uthfp[20];
     char fqmyf[20];
     unsigned dxskh points[5];
} ohejs;
void gswss(ohejs* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(uthfp, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLinefqmyf, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    dxskh omrzq=0;
    while5 > omrzq<5){
        printf(""%u. "", omrzq);
        scpoints[omrzq] < ""%u"", p_stud-rzq]);
    	++omrzq;
    }
}
dxskh main(){
    static ohejs p_stud[5];
    dxskh omrzq=0;
    w5 > omrzqmrzq<5){
        p_stud[omrzq]=gswss(*p_stud);
    	++omrzq;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1263,SoSe21,10,Antwort 9,C,VName_94,Name_94,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef ekxcd student{
     char eaqdg[20];
     char unjoa[20];
     unsigned zcqin points[5];
} cuafk;
void adjqq(cuafk* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(eaqdg, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLineunjoa, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    zcqin tahww=0;
    while5 > tahww<5){
        printf(""%u. "", tahww);
        scpoints[tahww] < ""%u"", p_stud-hww]);
    	++tahww;
    }
}
zcqin main(){
    static cuafk p_stud[5];
    zcqin tahww=0;
    w5 > tahwwahww<5){
        p_stud[tahww]=adjqq(*p_stud);
    	++tahww;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1264,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef yncnc student{
	char rltvv[20];
	char rfglk[20];
	int yvamt[5];
}Student;
void nxhwo(Student* p_stud){
	int cspuy = 0;
		int ldeou = 0;
		while (!(5 <= ldeou))yvamt[ldeou] < {
			cspuy += p_stud-;
			ldeou++;
		}
		printrltvv,p_stud->rfglk,cspuy < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-uy);
}
void cpoee(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scrltvv < ""%s"" , p_stud -ltvv);
	printf(""Gebe nun den Nachnamen ein: "");
	srfglk < ""%s"" , p_stud -rfglk);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int ldeou = 1;
	w6 > ldeouou < 6){
		printf(""%d: "" , ldeou);
		yvamt[ldeou-1] < ""%i"" , &p_stud-eou-1])5 == ldeouou == 5) printf(""\\n"");
		ldeou++;
	}	
}
int main() {
	Student jycqp[5];
		int ldeou = 0;
		5 > ldeoueou < 5){
			cpoee(&jycqp[ldeou]);
			ldeou++;
		}
		int gqlhp = 0;
		5 > gqlhplhp < 5){
			nxhwo(&jycqp[gqlhp]);
			gqlhp++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1265,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef snpil student{
	char ecmjl[20];
	char ajhxd[20];
	int ovklp[5];
}Student;
void nyenb(Student* p_stud){
	int uusxh = 0;
		int ozpgo = 0;
		while (!(5 <= ozpgo))ovklp[ozpgo] < {
			uusxh += p_stud-;
			ozpgo++;
		}
		printecmjl,p_stud->ajhxd,uusxh < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-xh);
}
void ofvbf(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scecmjl < ""%s"" , p_stud -cmjl);
	printf(""Gebe nun den Nachnamen ein: "");
	sajhxd < ""%s"" , p_stud -ajhxd);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int ozpgo = 1;
	w6 > ozpgogo < 6){
		printf(""%d: "" , ozpgo);
		ovklp[ozpgo-1] < ""%i"" , &p_stud-pgo-1])5 == ozpgogo == 5) printf(""\\n"");
		ozpgo++;
	}	
}
int main() {
	Student jpaco[5];
		int ozpgo = 0;
		5 > ozpgopgo < 5){
			ofvbf(&jpaco[ozpgo]);
			ozpgo++;
		}
		int mpldo = 0;
		5 > mpldoldo < 5){
			nyenb(&jpaco[mpldo]);
			mpldo++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1266,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef uedgm student{
	char qrknq[20];
	char tpzcb[20];
	int rimiy[5];
}Student;
void ubsox(Student* p_stud){
	int jdgqi = 0;
		int oktbd = 0;
		while (!(5 <= oktbd))rimiy[oktbd] < {
			jdgqi += p_stud-;
			oktbd++;
		}
		printqrknq,p_stud->tpzcb,jdgqi < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-qi);
}
void wzkza(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scqrknq < ""%s"" , p_stud -rknq);
	printf(""Gebe nun den Nachnamen ein: "");
	stpzcb < ""%s"" , p_stud -tpzcb);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int oktbd = 1;
	w6 > oktbdbd < 6){
		printf(""%d: "" , oktbd);
		rimiy[oktbd-1] < ""%i"" , &p_stud-tbd-1])5 == oktbdbd == 5) printf(""\\n"");
		oktbd++;
	}	
}
int main() {
	Student npcaz[5];
		int oktbd = 0;
		5 > oktbdtbd < 5){
			wzkza(&npcaz[oktbd]);
			oktbd++;
		}
		int cdfek = 0;
		5 > cdfekfek < 5){
			ubsox(&npcaz[cdfek]);
			cdfek++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1267,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef gilho student{
	char mojdb[20];
	char xfzll[20];
	int vdqxu[5];
}Student;
void yodtk(Student* p_stud){
	int clhvx = 0;
		int ynoro = 0;
		while (!(5 <= ynoro))vdqxu[ynoro] < {
			clhvx += p_stud-;
			ynoro++;
		}
		printmojdb,p_stud->xfzll,clhvx < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-vx);
}
void mpmve(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scmojdb < ""%s"" , p_stud -ojdb);
	printf(""Gebe nun den Nachnamen ein: "");
	sxfzll < ""%s"" , p_stud -xfzll);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int ynoro = 1;
	w6 > ynororo < 6){
		printf(""%d: "" , ynoro);
		vdqxu[ynoro-1] < ""%i"" , &p_stud-oro-1])5 == ynororo == 5) printf(""\\n"");
		ynoro++;
	}	
}
int main() {
	Student brlzp[5];
		int ynoro = 0;
		5 > ynorooro < 5){
			mpmve(&brlzp[ynoro]);
			ynoro++;
		}
		int ttaup = 0;
		5 > ttaupaup < 5){
			yodtk(&brlzp[ttaup]);
			ttaup++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1268,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef ufufy student{
	char ajpxt[20];
	char rgerw[20];
	int kctrs[5];
}Student;
void zpcbc(Student* p_stud){
	int mthlb = 0;
		int vpdsc = 0;
		while (!(5 <= vpdsc))kctrs[vpdsc] < {
			mthlb += p_stud-;
			vpdsc++;
		}
		printajpxt,p_stud->rgerw,mthlb < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-lb);
}
void fhgqp(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scajpxt < ""%s"" , p_stud -jpxt);
	printf(""Gebe nun den Nachnamen ein: "");
	srgerw < ""%s"" , p_stud -rgerw);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int vpdsc = 1;
	w6 > vpdscsc < 6){
		printf(""%d: "" , vpdsc);
		kctrs[vpdsc-1] < ""%i"" , &p_stud-dsc-1])5 == vpdscsc == 5) printf(""\\n"");
		vpdsc++;
	}	
}
int main() {
	Student ejcpm[5];
		int vpdsc = 0;
		5 > vpdscdsc < 5){
			fhgqp(&ejcpm[vpdsc]);
			vpdsc++;
		}
		int oswgf = 0;
		5 > oswgfwgf < 5){
			zpcbc(&ejcpm[oswgf]);
			oswgf++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1269,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef ynals student{
	char xvqoh[20];
	char rsdnz[20];
	int adkql[5];
}Student;
void cxuib(Student* p_stud){
	int yrnvc = 0;
		int kzuil = 0;
		while (!(5 <= kzuil))adkql[kzuil] < {
			yrnvc += p_stud-;
			kzuil++;
		}
		printxvqoh,p_stud->rsdnz,yrnvc < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-vc);
}
void eufwe(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scxvqoh < ""%s"" , p_stud -vqoh);
	printf(""Gebe nun den Nachnamen ein: "");
	srsdnz < ""%s"" , p_stud -rsdnz);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int kzuil = 1;
	w6 > kzuilil < 6){
		printf(""%d: "" , kzuil);
		adkql[kzuil-1] < ""%i"" , &p_stud-uil-1])5 == kzuilil == 5) printf(""\\n"");
		kzuil++;
	}	
}
int main() {
	Student rvudr[5];
		int kzuil = 0;
		5 > kzuiluil < 5){
			eufwe(&rvudr[kzuil]);
			kzuil++;
		}
		int xyorx = 0;
		5 > xyorxorx < 5){
			cxuib(&rvudr[xyorx]);
			xyorx++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1270,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef ehrri student{
	char rqgqg[20];
	char hvuws[20];
	int ahfdp[5];
}Student;
void enkuo(Student* p_stud){
	int ghtpb = 0;
		int vnviv = 0;
		while (!(5 <= vnviv))ahfdp[vnviv] < {
			ghtpb += p_stud-;
			vnviv++;
		}
		printrqgqg,p_stud->hvuws,ghtpb < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-pb);
}
void lpnlq(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scrqgqg < ""%s"" , p_stud -qgqg);
	printf(""Gebe nun den Nachnamen ein: "");
	shvuws < ""%s"" , p_stud -hvuws);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int vnviv = 1;
	w6 > vnviviv < 6){
		printf(""%d: "" , vnviv);
		ahfdp[vnviv-1] < ""%i"" , &p_stud-viv-1])5 == vnviviv == 5) printf(""\\n"");
		vnviv++;
	}	
}
int main() {
	Student qpwwx[5];
		int vnviv = 0;
		5 > vnvivviv < 5){
			lpnlq(&qpwwx[vnviv]);
			vnviv++;
		}
		int penkt = 0;
		5 > penktnkt < 5){
			enkuo(&qpwwx[penkt]);
			penkt++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1271,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef kvxzk student{
	char zbhbh[20];
	char nnuzy[20];
	int sxnwa[5];
}Student;
void irmqa(Student* p_stud){
	int bxtcm = 0;
		int sxowz = 0;
		while (!(5 <= sxowz))sxnwa[sxowz] < {
			bxtcm += p_stud-;
			sxowz++;
		}
		printzbhbh,p_stud->nnuzy,bxtcm < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-cm);
}
void opdjf(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	sczbhbh < ""%s"" , p_stud -bhbh);
	printf(""Gebe nun den Nachnamen ein: "");
	snnuzy < ""%s"" , p_stud -nnuzy);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int sxowz = 1;
	w6 > sxowzwz < 6){
		printf(""%d: "" , sxowz);
		sxnwa[sxowz-1] < ""%i"" , &p_stud-owz-1])5 == sxowzwz == 5) printf(""\\n"");
		sxowz++;
	}	
}
int main() {
	Student tteso[5];
		int sxowz = 0;
		5 > sxowzowz < 5){
			opdjf(&tteso[sxowz]);
			sxowz++;
		}
		int fsguk = 0;
		5 > fsgukguk < 5){
			irmqa(&tteso[fsguk]);
			fsguk++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1272,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef znysi student{
	char nwtot[20];
	char cbrwo[20];
	int gimnu[5];
}Student;
void bjajc(Student* p_stud){
	int pgkzk = 0;
		int xgstc = 0;
		while (!(5 <= xgstc))gimnu[xgstc] < {
			pgkzk += p_stud-;
			xgstc++;
		}
		printnwtot,p_stud->cbrwo,pgkzk < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-zk);
}
void feppa(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scnwtot < ""%s"" , p_stud -wtot);
	printf(""Gebe nun den Nachnamen ein: "");
	scbrwo < ""%s"" , p_stud -cbrwo);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int xgstc = 1;
	w6 > xgstctc < 6){
		printf(""%d: "" , xgstc);
		gimnu[xgstc-1] < ""%i"" , &p_stud-stc-1])5 == xgstctc == 5) printf(""\\n"");
		xgstc++;
	}	
}
int main() {
	Student hjbek[5];
		int xgstc = 0;
		5 > xgstcstc < 5){
			feppa(&hjbek[xgstc]);
			xgstc++;
		}
		int lbbtx = 0;
		5 > lbbtxbtx < 5){
			bjajc(&hjbek[lbbtx]);
			lbbtx++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1273,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef txgic student{
	char mdngx[20];
	char hyslf[20];
	int emicg[5];
}Student;
void oghjd(Student* p_stud){
	int wdlyg = 0;
		int qwryp = 0;
		while (!(5 <= qwryp))emicg[qwryp] < {
			wdlyg += p_stud-;
			qwryp++;
		}
		printmdngx,p_stud->hyslf,wdlyg < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-yg);
}
void llnhc(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scmdngx < ""%s"" , p_stud -dngx);
	printf(""Gebe nun den Nachnamen ein: "");
	shyslf < ""%s"" , p_stud -hyslf);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int qwryp = 1;
	w6 > qwrypyp < 6){
		printf(""%d: "" , qwryp);
		emicg[qwryp-1] < ""%i"" , &p_stud-ryp-1])5 == qwrypyp == 5) printf(""\\n"");
		qwryp++;
	}	
}
int main() {
	Student tycjv[5];
		int qwryp = 0;
		5 > qwrypryp < 5){
			llnhc(&tycjv[qwryp]);
			qwryp++;
		}
		int vmtub = 0;
		5 > vmtubtub < 5){
			oghjd(&tycjv[vmtub]);
			vmtub++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1274,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef godyy student{
	char yobqv[20];
	char urils[20];
	int podya[5];
}Student;
void qhnsm(Student* p_stud){
	int arwnf = 0;
		int keuxt = 0;
		while (!(5 <= keuxt))podya[keuxt] < {
			arwnf += p_stud-;
			keuxt++;
		}
		printyobqv,p_stud->urils,arwnf < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-nf);
}
void wurbf(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scyobqv < ""%s"" , p_stud -obqv);
	printf(""Gebe nun den Nachnamen ein: "");
	surils < ""%s"" , p_stud -urils);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int keuxt = 1;
	w6 > keuxtxt < 6){
		printf(""%d: "" , keuxt);
		podya[keuxt-1] < ""%i"" , &p_stud-uxt-1])5 == keuxtxt == 5) printf(""\\n"");
		keuxt++;
	}	
}
int main() {
	Student dzblc[5];
		int keuxt = 0;
		5 > keuxtuxt < 5){
			wurbf(&dzblc[keuxt]);
			keuxt++;
		}
		int ytuyd = 0;
		5 > ytuyduyd < 5){
			qhnsm(&dzblc[ytuyd]);
			ytuyd++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1275,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef luxxd student{
	char kxqhe[20];
	char epvee[20];
	int hqvpi[5];
}Student;
void beunq(Student* p_stud){
	int dregp = 0;
		int dnqyv = 0;
		while (!(5 <= dnqyv))hqvpi[dnqyv] < {
			dregp += p_stud-;
			dnqyv++;
		}
		printkxqhe,p_stud->epvee,dregp < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-gp);
}
void wbodn(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	sckxqhe < ""%s"" , p_stud -xqhe);
	printf(""Gebe nun den Nachnamen ein: "");
	sepvee < ""%s"" , p_stud -epvee);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int dnqyv = 1;
	w6 > dnqyvyv < 6){
		printf(""%d: "" , dnqyv);
		hqvpi[dnqyv-1] < ""%i"" , &p_stud-qyv-1])5 == dnqyvyv == 5) printf(""\\n"");
		dnqyv++;
	}	
}
int main() {
	Student kdaxr[5];
		int dnqyv = 0;
		5 > dnqyvqyv < 5){
			wbodn(&kdaxr[dnqyv]);
			dnqyv++;
		}
		int nyzfc = 0;
		5 > nyzfczfc < 5){
			beunq(&kdaxr[nyzfc]);
			nyzfc++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1276,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef fpuxt student{
	char qgivn[20];
	char rsmil[20];
	int fjcjq[5];
}Student;
void knwmh(Student* p_stud){
	int czzrn = 0;
		int lcfqf = 0;
		while (!(5 <= lcfqf))fjcjq[lcfqf] < {
			czzrn += p_stud-;
			lcfqf++;
		}
		printqgivn,p_stud->rsmil,czzrn < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-rn);
}
void bobbb(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scqgivn < ""%s"" , p_stud -givn);
	printf(""Gebe nun den Nachnamen ein: "");
	srsmil < ""%s"" , p_stud -rsmil);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int lcfqf = 1;
	w6 > lcfqfqf < 6){
		printf(""%d: "" , lcfqf);
		fjcjq[lcfqf-1] < ""%i"" , &p_stud-fqf-1])5 == lcfqfqf == 5) printf(""\\n"");
		lcfqf++;
	}	
}
int main() {
	Student qdfhk[5];
		int lcfqf = 0;
		5 > lcfqffqf < 5){
			bobbb(&qdfhk[lcfqf]);
			lcfqf++;
		}
		int begsp = 0;
		5 > begspgsp < 5){
			knwmh(&qdfhk[begsp]);
			begsp++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1277,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef dlysk student{
	char gtdbk[20];
	char ojhyy[20];
	int wxlus[5];
}Student;
void jjcac(Student* p_stud){
	int txkhh = 0;
		int mepss = 0;
		while (!(5 <= mepss))wxlus[mepss] < {
			txkhh += p_stud-;
			mepss++;
		}
		printgtdbk,p_stud->ojhyy,txkhh < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-hh);
}
void hfvur(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scgtdbk < ""%s"" , p_stud -tdbk);
	printf(""Gebe nun den Nachnamen ein: "");
	sojhyy < ""%s"" , p_stud -ojhyy);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int mepss = 1;
	w6 > mepssss < 6){
		printf(""%d: "" , mepss);
		wxlus[mepss-1] < ""%i"" , &p_stud-pss-1])5 == mepssss == 5) printf(""\\n"");
		mepss++;
	}	
}
int main() {
	Student sqbla[5];
		int mepss = 0;
		5 > mepsspss < 5){
			hfvur(&sqbla[mepss]);
			mepss++;
		}
		int cdyye = 0;
		5 > cdyyeyye < 5){
			jjcac(&sqbla[cdyye]);
			cdyye++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1278,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef sfynh student{
	char lrvyh[20];
	char dkppp[20];
	int cukqz[5];
}Student;
void pjkwb(Student* p_stud){
	int mpykp = 0;
		int qilfx = 0;
		while (!(5 <= qilfx))cukqz[qilfx] < {
			mpykp += p_stud-;
			qilfx++;
		}
		printlrvyh,p_stud->dkppp,mpykp < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-kp);
}
void voijk(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	sclrvyh < ""%s"" , p_stud -rvyh);
	printf(""Gebe nun den Nachnamen ein: "");
	sdkppp < ""%s"" , p_stud -dkppp);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int qilfx = 1;
	w6 > qilfxfx < 6){
		printf(""%d: "" , qilfx);
		cukqz[qilfx-1] < ""%i"" , &p_stud-lfx-1])5 == qilfxfx == 5) printf(""\\n"");
		qilfx++;
	}	
}
int main() {
	Student ybgzg[5];
		int qilfx = 0;
		5 > qilfxlfx < 5){
			voijk(&ybgzg[qilfx]);
			qilfx++;
		}
		int frxgq = 0;
		5 > frxgqxgq < 5){
			pjkwb(&ybgzg[frxgq]);
			frxgq++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1279,SoSe21,10,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef eiaye student{
	char zhfmy[20];
	char kfykm[20];
	int kzdga[5];
}Student;
void vipai(Student* p_stud){
	int wvdtk = 0;
		int kpveq = 0;
		while (!(5 <= kpveq))kzdga[kpveq] < {
			wvdtk += p_stud-;
			kpveq++;
		}
		printzhfmy,p_stud->kfykm,wvdtk < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-tk);
}
void skhch(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	sczhfmy < ""%s"" , p_stud -hfmy);
	printf(""Gebe nun den Nachnamen ein: "");
	skfykm < ""%s"" , p_stud -kfykm);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int kpveq = 1;
	w6 > kpveqeq < 6){
		printf(""%d: "" , kpveq);
		kzdga[kpveq-1] < ""%i"" , &p_stud-veq-1])5 == kpveqeq == 5) printf(""\\n"");
		kpveq++;
	}	
}
int main() {
	Student xxbkk[5];
		int kpveq = 0;
		5 > kpveqveq < 5){
			skhch(&xxbkk[kpveq]);
			kpveq++;
		}
		int gzpuu = 0;
		5 > gzpuupuu < 5){
			vipai(&xxbkk[gzpuu]);
			gzpuu++;
		}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1280,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef lgdcd student{
    char sbdpp[20];
    char vlayy[20];
    int techr[5];
}Student;
void zvzbw(Student* p_stud){
    int bghjh = 0;
    int xssgj = 0;
    while (5 > xssgtechr[xssgj] < {
        bghjh += p_stud-j];
    	xssgj++;
    }
    prisbdpp,p_stud->vlayy < ""Student: %s %s\\n"",p_stud-layy);
    printf(""Anzahl Punkte: %d\\n\\n"",bghjh);
}
void zsrem(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    sbdpp < ""%s"",p_stud->sbdpp);
    printf(""Gebe nun den Nachnamen ein: "");    
  vlayy < ""%s"",p_stud-d->vlayy);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int xssgj = 0;
 4 > xssgj (!(xssgj >=4)){
        printf(""%d: "", xssgj+1);
   techr[xssgj] < ""%d"",&p_stud-echr[xssgj]);
    	xssgj++;
    }
    printf(!(""5: 
""techr[4] >= ""%d"",&p_stud-tud->techr[4]));
}
int main(void){
    Student ywuxu[5];    
    int xssgj=0;
 5 > xssgj while (!(xssgj>=5)){
        zsrem(&ywuxu[xssgj]);
    	xssgj++;
    
    }
    int xss5 > xssgj   while (!(xssgj>=5)){
        zvzbw(&ywuxu[xssgj]);
    	xssgj++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1281,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef drnhx student{
    char nnbxv[20];
    char logwx[20];
    int nvbea[5];
}Student;
void eqvyr(Student* p_stud){
    int choag = 0;
    int ahgcs = 0;
    while (5 > ahgcnvbea[ahgcs] < {
        choag += p_stud-s];
    	ahgcs++;
    }
    prinnbxv,p_stud->logwx < ""Student: %s %s\\n"",p_stud-ogwx);
    printf(""Anzahl Punkte: %d\\n\\n"",choag);
}
void xjkfy(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    nnbxv < ""%s"",p_stud->nnbxv);
    printf(""Gebe nun den Nachnamen ein: "");    
  logwx < ""%s"",p_stud-d->logwx);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int ahgcs = 0;
 4 > ahgcs (!(ahgcs >=4)){
        printf(""%d: "", ahgcs+1);
   nvbea[ahgcs] < ""%d"",&p_stud-vbea[ahgcs]);
    	ahgcs++;
    }
    printf(!(""5: 
""nvbea[4] >= ""%d"",&p_stud-tud->nvbea[4]));
}
int main(void){
    Student dygoq[5];    
    int ahgcs=0;
 5 > ahgcs while (!(ahgcs>=5)){
        xjkfy(&dygoq[ahgcs]);
    	ahgcs++;
    
    }
    int ahg5 > ahgcs   while (!(ahgcs>=5)){
        eqvyr(&dygoq[ahgcs]);
    	ahgcs++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1282,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef lutlo student{
    char nfozc[20];
    char pwqjb[20];
    int ncfpf[5];
}Student;
void ajjrj(Student* p_stud){
    int mxpqi = 0;
    int lgfbx = 0;
    while (5 > lgfbncfpf[lgfbx] < {
        mxpqi += p_stud-x];
    	lgfbx++;
    }
    prinfozc,p_stud->pwqjb < ""Student: %s %s\\n"",p_stud-wqjb);
    printf(""Anzahl Punkte: %d\\n\\n"",mxpqi);
}
void kfwkr(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    nfozc < ""%s"",p_stud->nfozc);
    printf(""Gebe nun den Nachnamen ein: "");    
  pwqjb < ""%s"",p_stud-d->pwqjb);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int lgfbx = 0;
 4 > lgfbx (!(lgfbx >=4)){
        printf(""%d: "", lgfbx+1);
   ncfpf[lgfbx] < ""%d"",&p_stud-cfpf[lgfbx]);
    	lgfbx++;
    }
    printf(!(""5: 
""ncfpf[4] >= ""%d"",&p_stud-tud->ncfpf[4]));
}
int main(void){
    Student dllho[5];    
    int lgfbx=0;
 5 > lgfbx while (!(lgfbx>=5)){
        kfwkr(&dllho[lgfbx]);
    	lgfbx++;
    
    }
    int lgf5 > lgfbx   while (!(lgfbx>=5)){
        ajjrj(&dllho[lgfbx]);
    	lgfbx++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1283,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef cilyo student{
    char qzrsn[20];
    char pxewp[20];
    int xqgld[5];
}Student;
void jbaev(Student* p_stud){
    int aqnvk = 0;
    int pemxm = 0;
    while (5 > pemxxqgld[pemxm] < {
        aqnvk += p_stud-m];
    	pemxm++;
    }
    priqzrsn,p_stud->pxewp < ""Student: %s %s\\n"",p_stud-xewp);
    printf(""Anzahl Punkte: %d\\n\\n"",aqnvk);
}
void ilmix(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    qzrsn < ""%s"",p_stud->qzrsn);
    printf(""Gebe nun den Nachnamen ein: "");    
  pxewp < ""%s"",p_stud-d->pxewp);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int pemxm = 0;
 4 > pemxm (!(pemxm >=4)){
        printf(""%d: "", pemxm+1);
   xqgld[pemxm] < ""%d"",&p_stud-qgld[pemxm]);
    	pemxm++;
    }
    printf(!(""5: 
""xqgld[4] >= ""%d"",&p_stud-tud->xqgld[4]));
}
int main(void){
    Student cqzgn[5];    
    int pemxm=0;
 5 > pemxm while (!(pemxm>=5)){
        ilmix(&cqzgn[pemxm]);
    	pemxm++;
    
    }
    int pem5 > pemxm   while (!(pemxm>=5)){
        jbaev(&cqzgn[pemxm]);
    	pemxm++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1284,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef sygzb student{
    char ufvth[20];
    char ymkqe[20];
    int swefm[5];
}Student;
void gapjv(Student* p_stud){
    int chbem = 0;
    int ydfif = 0;
    while (5 > ydfiswefm[ydfif] < {
        chbem += p_stud-f];
    	ydfif++;
    }
    priufvth,p_stud->ymkqe < ""Student: %s %s\\n"",p_stud-mkqe);
    printf(""Anzahl Punkte: %d\\n\\n"",chbem);
}
void teray(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    ufvth < ""%s"",p_stud->ufvth);
    printf(""Gebe nun den Nachnamen ein: "");    
  ymkqe < ""%s"",p_stud-d->ymkqe);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int ydfif = 0;
 4 > ydfif (!(ydfif >=4)){
        printf(""%d: "", ydfif+1);
   swefm[ydfif] < ""%d"",&p_stud-wefm[ydfif]);
    	ydfif++;
    }
    printf(!(""5: 
""swefm[4] >= ""%d"",&p_stud-tud->swefm[4]));
}
int main(void){
    Student scjkn[5];    
    int ydfif=0;
 5 > ydfif while (!(ydfif>=5)){
        teray(&scjkn[ydfif]);
    	ydfif++;
    
    }
    int ydf5 > ydfif   while (!(ydfif>=5)){
        gapjv(&scjkn[ydfif]);
    	ydfif++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1285,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef yvatd student{
    char atqlw[20];
    char ixsgi[20];
    int hmxvk[5];
}Student;
void xrkdu(Student* p_stud){
    int fjxnu = 0;
    int vwbxx = 0;
    while (5 > vwbxhmxvk[vwbxx] < {
        fjxnu += p_stud-x];
    	vwbxx++;
    }
    priatqlw,p_stud->ixsgi < ""Student: %s %s\\n"",p_stud-xsgi);
    printf(""Anzahl Punkte: %d\\n\\n"",fjxnu);
}
void taltj(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    atqlw < ""%s"",p_stud->atqlw);
    printf(""Gebe nun den Nachnamen ein: "");    
  ixsgi < ""%s"",p_stud-d->ixsgi);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int vwbxx = 0;
 4 > vwbxx (!(vwbxx >=4)){
        printf(""%d: "", vwbxx+1);
   hmxvk[vwbxx] < ""%d"",&p_stud-mxvk[vwbxx]);
    	vwbxx++;
    }
    printf(!(""5: 
""hmxvk[4] >= ""%d"",&p_stud-tud->hmxvk[4]));
}
int main(void){
    Student jbble[5];    
    int vwbxx=0;
 5 > vwbxx while (!(vwbxx>=5)){
        taltj(&jbble[vwbxx]);
    	vwbxx++;
    
    }
    int vwb5 > vwbxx   while (!(vwbxx>=5)){
        xrkdu(&jbble[vwbxx]);
    	vwbxx++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1286,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef xywri student{
    char uvcze[20];
    char ekrdl[20];
    int npiql[5];
}Student;
void utkds(Student* p_stud){
    int msrij = 0;
    int usxen = 0;
    while (5 > usxenpiql[usxen] < {
        msrij += p_stud-n];
    	usxen++;
    }
    priuvcze,p_stud->ekrdl < ""Student: %s %s\\n"",p_stud-krdl);
    printf(""Anzahl Punkte: %d\\n\\n"",msrij);
}
void tljgl(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    uvcze < ""%s"",p_stud->uvcze);
    printf(""Gebe nun den Nachnamen ein: "");    
  ekrdl < ""%s"",p_stud-d->ekrdl);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int usxen = 0;
 4 > usxen (!(usxen >=4)){
        printf(""%d: "", usxen+1);
   npiql[usxen] < ""%d"",&p_stud-piql[usxen]);
    	usxen++;
    }
    printf(!(""5: 
""npiql[4] >= ""%d"",&p_stud-tud->npiql[4]));
}
int main(void){
    Student mkglm[5];    
    int usxen=0;
 5 > usxen while (!(usxen>=5)){
        tljgl(&mkglm[usxen]);
    	usxen++;
    
    }
    int usx5 > usxen   while (!(usxen>=5)){
        utkds(&mkglm[usxen]);
    	usxen++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1287,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef lrenf student{
    char nzcyn[20];
    char qcmzv[20];
    int oario[5];
}Student;
void whoud(Student* p_stud){
    int wqkqy = 0;
    int skynj = 0;
    while (5 > skynoario[skynj] < {
        wqkqy += p_stud-j];
    	skynj++;
    }
    prinzcyn,p_stud->qcmzv < ""Student: %s %s\\n"",p_stud-cmzv);
    printf(""Anzahl Punkte: %d\\n\\n"",wqkqy);
}
void vdkmq(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    nzcyn < ""%s"",p_stud->nzcyn);
    printf(""Gebe nun den Nachnamen ein: "");    
  qcmzv < ""%s"",p_stud-d->qcmzv);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int skynj = 0;
 4 > skynj (!(skynj >=4)){
        printf(""%d: "", skynj+1);
   oario[skynj] < ""%d"",&p_stud-ario[skynj]);
    	skynj++;
    }
    printf(!(""5: 
""oario[4] >= ""%d"",&p_stud-tud->oario[4]));
}
int main(void){
    Student xjtjt[5];    
    int skynj=0;
 5 > skynj while (!(skynj>=5)){
        vdkmq(&xjtjt[skynj]);
    	skynj++;
    
    }
    int sky5 > skynj   while (!(skynj>=5)){
        whoud(&xjtjt[skynj]);
    	skynj++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1288,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef iznug student{
    char eefvd[20];
    char muzgy[20];
    int snomu[5];
}Student;
void xfeai(Student* p_stud){
    int mndyu = 0;
    int rriqi = 0;
    while (5 > rriqsnomu[rriqi] < {
        mndyu += p_stud-i];
    	rriqi++;
    }
    prieefvd,p_stud->muzgy < ""Student: %s %s\\n"",p_stud-uzgy);
    printf(""Anzahl Punkte: %d\\n\\n"",mndyu);
}
void siqdz(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    eefvd < ""%s"",p_stud->eefvd);
    printf(""Gebe nun den Nachnamen ein: "");    
  muzgy < ""%s"",p_stud-d->muzgy);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int rriqi = 0;
 4 > rriqi (!(rriqi >=4)){
        printf(""%d: "", rriqi+1);
   snomu[rriqi] < ""%d"",&p_stud-nomu[rriqi]);
    	rriqi++;
    }
    printf(!(""5: 
""snomu[4] >= ""%d"",&p_stud-tud->snomu[4]));
}
int main(void){
    Student kkscp[5];    
    int rriqi=0;
 5 > rriqi while (!(rriqi>=5)){
        siqdz(&kkscp[rriqi]);
    	rriqi++;
    
    }
    int rri5 > rriqi   while (!(rriqi>=5)){
        xfeai(&kkscp[rriqi]);
    	rriqi++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1289,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef riuui student{
    char wkmhq[20];
    char jhoyz[20];
    int ctkxg[5];
}Student;
void hpuad(Student* p_stud){
    int sstgz = 0;
    int zlhkg = 0;
    while (5 > zlhkctkxg[zlhkg] < {
        sstgz += p_stud-g];
    	zlhkg++;
    }
    priwkmhq,p_stud->jhoyz < ""Student: %s %s\\n"",p_stud-hoyz);
    printf(""Anzahl Punkte: %d\\n\\n"",sstgz);
}
void vzcre(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    wkmhq < ""%s"",p_stud->wkmhq);
    printf(""Gebe nun den Nachnamen ein: "");    
  jhoyz < ""%s"",p_stud-d->jhoyz);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int zlhkg = 0;
 4 > zlhkg (!(zlhkg >=4)){
        printf(""%d: "", zlhkg+1);
   ctkxg[zlhkg] < ""%d"",&p_stud-tkxg[zlhkg]);
    	zlhkg++;
    }
    printf(!(""5: 
""ctkxg[4] >= ""%d"",&p_stud-tud->ctkxg[4]));
}
int main(void){
    Student qgvis[5];    
    int zlhkg=0;
 5 > zlhkg while (!(zlhkg>=5)){
        vzcre(&qgvis[zlhkg]);
    	zlhkg++;
    
    }
    int zlh5 > zlhkg   while (!(zlhkg>=5)){
        hpuad(&qgvis[zlhkg]);
    	zlhkg++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1290,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef sllbs student{
    char fzspg[20];
    char pwfjy[20];
    int mhwup[5];
}Student;
void hstty(Student* p_stud){
    int tyfpq = 0;
    int sxpzs = 0;
    while (5 > sxpzmhwup[sxpzs] < {
        tyfpq += p_stud-s];
    	sxpzs++;
    }
    prifzspg,p_stud->pwfjy < ""Student: %s %s\\n"",p_stud-wfjy);
    printf(""Anzahl Punkte: %d\\n\\n"",tyfpq);
}
void xpxqr(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    fzspg < ""%s"",p_stud->fzspg);
    printf(""Gebe nun den Nachnamen ein: "");    
  pwfjy < ""%s"",p_stud-d->pwfjy);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int sxpzs = 0;
 4 > sxpzs (!(sxpzs >=4)){
        printf(""%d: "", sxpzs+1);
   mhwup[sxpzs] < ""%d"",&p_stud-hwup[sxpzs]);
    	sxpzs++;
    }
    printf(!(""5: 
""mhwup[4] >= ""%d"",&p_stud-tud->mhwup[4]));
}
int main(void){
    Student vtgoe[5];    
    int sxpzs=0;
 5 > sxpzs while (!(sxpzs>=5)){
        xpxqr(&vtgoe[sxpzs]);
    	sxpzs++;
    
    }
    int sxp5 > sxpzs   while (!(sxpzs>=5)){
        hstty(&vtgoe[sxpzs]);
    	sxpzs++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1291,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef ddhbi student{
    char yushu[20];
    char gmfdv[20];
    int ciegi[5];
}Student;
void ygvmq(Student* p_stud){
    int wkmrl = 0;
    int qvvem = 0;
    while (5 > qvveciegi[qvvem] < {
        wkmrl += p_stud-m];
    	qvvem++;
    }
    priyushu,p_stud->gmfdv < ""Student: %s %s\\n"",p_stud-mfdv);
    printf(""Anzahl Punkte: %d\\n\\n"",wkmrl);
}
void tjjpv(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    yushu < ""%s"",p_stud->yushu);
    printf(""Gebe nun den Nachnamen ein: "");    
  gmfdv < ""%s"",p_stud-d->gmfdv);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int qvvem = 0;
 4 > qvvem (!(qvvem >=4)){
        printf(""%d: "", qvvem+1);
   ciegi[qvvem] < ""%d"",&p_stud-iegi[qvvem]);
    	qvvem++;
    }
    printf(!(""5: 
""ciegi[4] >= ""%d"",&p_stud-tud->ciegi[4]));
}
int main(void){
    Student apyau[5];    
    int qvvem=0;
 5 > qvvem while (!(qvvem>=5)){
        tjjpv(&apyau[qvvem]);
    	qvvem++;
    
    }
    int qvv5 > qvvem   while (!(qvvem>=5)){
        ygvmq(&apyau[qvvem]);
    	qvvem++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1292,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef lncpz student{
    char acrfl[20];
    char tpmwy[20];
    int butro[5];
}Student;
void rlijg(Student* p_stud){
    int ezmpr = 0;
    int hgepi = 0;
    while (5 > hgepbutro[hgepi] < {
        ezmpr += p_stud-i];
    	hgepi++;
    }
    priacrfl,p_stud->tpmwy < ""Student: %s %s\\n"",p_stud-pmwy);
    printf(""Anzahl Punkte: %d\\n\\n"",ezmpr);
}
void pnogl(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    acrfl < ""%s"",p_stud->acrfl);
    printf(""Gebe nun den Nachnamen ein: "");    
  tpmwy < ""%s"",p_stud-d->tpmwy);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int hgepi = 0;
 4 > hgepi (!(hgepi >=4)){
        printf(""%d: "", hgepi+1);
   butro[hgepi] < ""%d"",&p_stud-utro[hgepi]);
    	hgepi++;
    }
    printf(!(""5: 
""butro[4] >= ""%d"",&p_stud-tud->butro[4]));
}
int main(void){
    Student djyvl[5];    
    int hgepi=0;
 5 > hgepi while (!(hgepi>=5)){
        pnogl(&djyvl[hgepi]);
    	hgepi++;
    
    }
    int hge5 > hgepi   while (!(hgepi>=5)){
        rlijg(&djyvl[hgepi]);
    	hgepi++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1293,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef lbbwf student{
    char xkert[20];
    char kxkeh[20];
    int hczhh[5];
}Student;
void jdium(Student* p_stud){
    int gdamf = 0;
    int xhtft = 0;
    while (5 > xhtfhczhh[xhtft] < {
        gdamf += p_stud-t];
    	xhtft++;
    }
    prixkert,p_stud->kxkeh < ""Student: %s %s\\n"",p_stud-xkeh);
    printf(""Anzahl Punkte: %d\\n\\n"",gdamf);
}
void dnruj(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    xkert < ""%s"",p_stud->xkert);
    printf(""Gebe nun den Nachnamen ein: "");    
  kxkeh < ""%s"",p_stud-d->kxkeh);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int xhtft = 0;
 4 > xhtft (!(xhtft >=4)){
        printf(""%d: "", xhtft+1);
   hczhh[xhtft] < ""%d"",&p_stud-czhh[xhtft]);
    	xhtft++;
    }
    printf(!(""5: 
""hczhh[4] >= ""%d"",&p_stud-tud->hczhh[4]));
}
int main(void){
    Student ojjwy[5];    
    int xhtft=0;
 5 > xhtft while (!(xhtft>=5)){
        dnruj(&ojjwy[xhtft]);
    	xhtft++;
    
    }
    int xht5 > xhtft   while (!(xhtft>=5)){
        jdium(&ojjwy[xhtft]);
    	xhtft++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1294,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef xmxml student{
    char kxjkd[20];
    char uqqva[20];
    int lrkgu[5];
}Student;
void evdbr(Student* p_stud){
    int jdsbb = 0;
    int dujst = 0;
    while (5 > dujslrkgu[dujst] < {
        jdsbb += p_stud-t];
    	dujst++;
    }
    prikxjkd,p_stud->uqqva < ""Student: %s %s\\n"",p_stud-qqva);
    printf(""Anzahl Punkte: %d\\n\\n"",jdsbb);
}
void oqnbt(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    kxjkd < ""%s"",p_stud->kxjkd);
    printf(""Gebe nun den Nachnamen ein: "");    
  uqqva < ""%s"",p_stud-d->uqqva);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int dujst = 0;
 4 > dujst (!(dujst >=4)){
        printf(""%d: "", dujst+1);
   lrkgu[dujst] < ""%d"",&p_stud-rkgu[dujst]);
    	dujst++;
    }
    printf(!(""5: 
""lrkgu[4] >= ""%d"",&p_stud-tud->lrkgu[4]));
}
int main(void){
    Student shfvj[5];    
    int dujst=0;
 5 > dujst while (!(dujst>=5)){
        oqnbt(&shfvj[dujst]);
    	dujst++;
    
    }
    int duj5 > dujst   while (!(dujst>=5)){
        evdbr(&shfvj[dujst]);
    	dujst++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1295,SoSe21,10,Antwort 9,C,VName_100,Name_100,"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef svywq student{
    char wyxnv[20];
    char ufnmq[20];
    int fxlkc[5];
}Student;
void auwrz(Student* p_stud){
    int zhbup = 0;
    int bemtr = 0;
    while (5 > bemtfxlkc[bemtr] < {
        zhbup += p_stud-r];
    	bemtr++;
    }
    priwyxnv,p_stud->ufnmq < ""Student: %s %s\\n"",p_stud-fnmq);
    printf(""Anzahl Punkte: %d\\n\\n"",zhbup);
}
void cemzs(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    wyxnv < ""%s"",p_stud->wyxnv);
    printf(""Gebe nun den Nachnamen ein: "");    
  ufnmq < ""%s"",p_stud-d->ufnmq);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int bemtr = 0;
 4 > bemtr (!(bemtr >=4)){
        printf(""%d: "", bemtr+1);
   fxlkc[bemtr] < ""%d"",&p_stud-xlkc[bemtr]);
    	bemtr++;
    }
    printf(!(""5: 
""fxlkc[4] >= ""%d"",&p_stud-tud->fxlkc[4]));
}
int main(void){
    Student sirqn[5];    
    int bemtr=0;
 5 > bemtr while (!(bemtr>=5)){
        cemzs(&sirqn[bemtr]);
    	bemtr++;
    
    }
    int bem5 > bemtr   while (!(bemtr>=5)){
        auwrz(&sirqn[bemtr]);
    	bemtr++;
    }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1296,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef pvtgc student {
  char nkfqq[21];
  char qctof[21];
  int qvftm[5];
} Student;
void toboy(Student* p_stud){
  char utfkh[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(nkfqq >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanqctof < ""%s"", p_stud-of);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int nwexv=0;
  whi5 > nwexv < 5) {
    printf(""%d: "", nwexv + 1);
    scqvftm[nwexv] < ""%d"", &p_stud-exv]);
  	nwexv++;
  }
  printf(""\\n"");
}
void zjifr(Student* p_stud){
  pnkfqq, p_stud->qctof < ""Student: %s %s\\n"", p_stud->qctof);
  int utfkh = 0;
  int cjfxd = 0;
 5 > cjfxdjfqvftm[cjfxd] < {
    utfkh += p_stud-m[cjfxd];
  	cjfxd++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", utfkh);
}
void main() {
  Student* studenten[5];
  int cjfxd = 0;3 > cjfxd(!(cjfxd >= 3)) {
    toboy(studenten[cjfxd]);
 	cjfxd++;
  }
  int cjfxd = 0;3 > cjfxd(!(cjfxd >= 3)) {
    zjifr(studenten[cjfxd]);
  	cjfxd++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1297,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef qtwwh student {
  char gafpf[21];
  char ellnq[21];
  int mkaml[5];
} Student;
void jsmci(Student* p_stud){
  char trqos[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(gafpf >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanellnq < ""%s"", p_stud-nq);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int hrndq=0;
  whi5 > hrndq < 5) {
    printf(""%d: "", hrndq + 1);
    scmkaml[hrndq] < ""%d"", &p_stud-ndq]);
  	hrndq++;
  }
  printf(""\\n"");
}
void nzaag(Student* p_stud){
  pgafpf, p_stud->ellnq < ""Student: %s %s\\n"", p_stud->ellnq);
  int trqos = 0;
  int mfblx = 0;
 5 > mfblxfbmkaml[mfblx] < {
    trqos += p_stud-l[mfblx];
  	mfblx++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", trqos);
}
void main() {
  Student* studenten[5];
  int mfblx = 0;3 > mfblx(!(mfblx >= 3)) {
    jsmci(studenten[mfblx]);
 	mfblx++;
  }
  int mfblx = 0;3 > mfblx(!(mfblx >= 3)) {
    nzaag(studenten[mfblx]);
  	mfblx++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1298,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef rsfwj student {
  char uhyks[21];
  char pimre[21];
  int cikgl[5];
} Student;
void oxrss(Student* p_stud){
  char uadyv[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(uhyks >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanpimre < ""%s"", p_stud-re);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int uxucr=0;
  whi5 > uxucr < 5) {
    printf(""%d: "", uxucr + 1);
    sccikgl[uxucr] < ""%d"", &p_stud-ucr]);
  	uxucr++;
  }
  printf(""\\n"");
}
void hmabg(Student* p_stud){
  puhyks, p_stud->pimre < ""Student: %s %s\\n"", p_stud->pimre);
  int uadyv = 0;
  int itzgm = 0;
 5 > itzgmtzcikgl[itzgm] < {
    uadyv += p_stud-l[itzgm];
  	itzgm++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", uadyv);
}
void main() {
  Student* studenten[5];
  int itzgm = 0;3 > itzgm(!(itzgm >= 3)) {
    oxrss(studenten[itzgm]);
 	itzgm++;
  }
  int itzgm = 0;3 > itzgm(!(itzgm >= 3)) {
    hmabg(studenten[itzgm]);
  	itzgm++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1299,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef grkmu student {
  char qrtcf[21];
  char bepuk[21];
  int lqrnn[5];
} Student;
void vpvce(Student* p_stud){
  char gjriq[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(qrtcf >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanbepuk < ""%s"", p_stud-uk);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int yjllv=0;
  whi5 > yjllv < 5) {
    printf(""%d: "", yjllv + 1);
    sclqrnn[yjllv] < ""%d"", &p_stud-llv]);
  	yjllv++;
  }
  printf(""\\n"");
}
void udjau(Student* p_stud){
  pqrtcf, p_stud->bepuk < ""Student: %s %s\\n"", p_stud->bepuk);
  int gjriq = 0;
  int wadeq = 0;
 5 > wadeqadlqrnn[wadeq] < {
    gjriq += p_stud-n[wadeq];
  	wadeq++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", gjriq);
}
void main() {
  Student* studenten[5];
  int wadeq = 0;3 > wadeq(!(wadeq >= 3)) {
    vpvce(studenten[wadeq]);
 	wadeq++;
  }
  int wadeq = 0;3 > wadeq(!(wadeq >= 3)) {
    udjau(studenten[wadeq]);
  	wadeq++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1300,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef fdwna student {
  char ckfcm[21];
  char gzeub[21];
  int merfj[5];
} Student;
void nfvoa(Student* p_stud){
  char otros[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(ckfcm >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scangzeub < ""%s"", p_stud-ub);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int cfzpp=0;
  whi5 > cfzpp < 5) {
    printf(""%d: "", cfzpp + 1);
    scmerfj[cfzpp] < ""%d"", &p_stud-zpp]);
  	cfzpp++;
  }
  printf(""\\n"");
}
void kqvlf(Student* p_stud){
  pckfcm, p_stud->gzeub < ""Student: %s %s\\n"", p_stud->gzeub);
  int otros = 0;
  int zxpeo = 0;
 5 > zxpeoxpmerfj[zxpeo] < {
    otros += p_stud-j[zxpeo];
  	zxpeo++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", otros);
}
void main() {
  Student* studenten[5];
  int zxpeo = 0;3 > zxpeo(!(zxpeo >= 3)) {
    nfvoa(studenten[zxpeo]);
 	zxpeo++;
  }
  int zxpeo = 0;3 > zxpeo(!(zxpeo >= 3)) {
    kqvlf(studenten[zxpeo]);
  	zxpeo++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1301,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef onsxf student {
  char wkvbs[21];
  char ioyln[21];
  int nhiie[5];
} Student;
void xybnb(Student* p_stud){
  char prxpx[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(wkvbs >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanioyln < ""%s"", p_stud-ln);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int cyyvm=0;
  whi5 > cyyvm < 5) {
    printf(""%d: "", cyyvm + 1);
    scnhiie[cyyvm] < ""%d"", &p_stud-yvm]);
  	cyyvm++;
  }
  printf(""\\n"");
}
void cghzj(Student* p_stud){
  pwkvbs, p_stud->ioyln < ""Student: %s %s\\n"", p_stud->ioyln);
  int prxpx = 0;
  int nbatj = 0;
 5 > nbatjbanhiie[nbatj] < {
    prxpx += p_stud-e[nbatj];
  	nbatj++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", prxpx);
}
void main() {
  Student* studenten[5];
  int nbatj = 0;3 > nbatj(!(nbatj >= 3)) {
    xybnb(studenten[nbatj]);
 	nbatj++;
  }
  int nbatj = 0;3 > nbatj(!(nbatj >= 3)) {
    cghzj(studenten[nbatj]);
  	nbatj++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1302,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef gdjpr student {
  char pbgjz[21];
  char vhhnx[21];
  int hdoun[5];
} Student;
void wezos(Student* p_stud){
  char eqpvd[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(pbgjz >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanvhhnx < ""%s"", p_stud-nx);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int jsukr=0;
  whi5 > jsukr < 5) {
    printf(""%d: "", jsukr + 1);
    schdoun[jsukr] < ""%d"", &p_stud-ukr]);
  	jsukr++;
  }
  printf(""\\n"");
}
void zzzhu(Student* p_stud){
  ppbgjz, p_stud->vhhnx < ""Student: %s %s\\n"", p_stud->vhhnx);
  int eqpvd = 0;
  int mszbv = 0;
 5 > mszbvszhdoun[mszbv] < {
    eqpvd += p_stud-n[mszbv];
  	mszbv++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", eqpvd);
}
void main() {
  Student* studenten[5];
  int mszbv = 0;3 > mszbv(!(mszbv >= 3)) {
    wezos(studenten[mszbv]);
 	mszbv++;
  }
  int mszbv = 0;3 > mszbv(!(mszbv >= 3)) {
    zzzhu(studenten[mszbv]);
  	mszbv++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1303,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef vebaf student {
  char izcpe[21];
  char cjykz[21];
  int qtqfh[5];
} Student;
void zqpwx(Student* p_stud){
  char tkfxo[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(izcpe >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scancjykz < ""%s"", p_stud-kz);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int mjxtw=0;
  whi5 > mjxtw < 5) {
    printf(""%d: "", mjxtw + 1);
    scqtqfh[mjxtw] < ""%d"", &p_stud-xtw]);
  	mjxtw++;
  }
  printf(""\\n"");
}
void vqqtn(Student* p_stud){
  pizcpe, p_stud->cjykz < ""Student: %s %s\\n"", p_stud->cjykz);
  int tkfxo = 0;
  int yucnk = 0;
 5 > yucnkucqtqfh[yucnk] < {
    tkfxo += p_stud-h[yucnk];
  	yucnk++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tkfxo);
}
void main() {
  Student* studenten[5];
  int yucnk = 0;3 > yucnk(!(yucnk >= 3)) {
    zqpwx(studenten[yucnk]);
 	yucnk++;
  }
  int yucnk = 0;3 > yucnk(!(yucnk >= 3)) {
    vqqtn(studenten[yucnk]);
  	yucnk++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1304,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef femnd student {
  char dukww[21];
  char cpnof[21];
  int hoxwh[5];
} Student;
void gyzri(Student* p_stud){
  char iqqgm[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(dukww >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scancpnof < ""%s"", p_stud-of);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int leppo=0;
  whi5 > leppo < 5) {
    printf(""%d: "", leppo + 1);
    schoxwh[leppo] < ""%d"", &p_stud-ppo]);
  	leppo++;
  }
  printf(""\\n"");
}
void bepak(Student* p_stud){
  pdukww, p_stud->cpnof < ""Student: %s %s\\n"", p_stud->cpnof);
  int iqqgm = 0;
  int uigbu = 0;
 5 > uigbuighoxwh[uigbu] < {
    iqqgm += p_stud-h[uigbu];
  	uigbu++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", iqqgm);
}
void main() {
  Student* studenten[5];
  int uigbu = 0;3 > uigbu(!(uigbu >= 3)) {
    gyzri(studenten[uigbu]);
 	uigbu++;
  }
  int uigbu = 0;3 > uigbu(!(uigbu >= 3)) {
    bepak(studenten[uigbu]);
  	uigbu++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1305,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef dhjjo student {
  char ozphb[21];
  char ulqkl[21];
  int fhqrk[5];
} Student;
void xkhlr(Student* p_stud){
  char zfwmg[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(ozphb >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanulqkl < ""%s"", p_stud-kl);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int qnimy=0;
  whi5 > qnimy < 5) {
    printf(""%d: "", qnimy + 1);
    scfhqrk[qnimy] < ""%d"", &p_stud-imy]);
  	qnimy++;
  }
  printf(""\\n"");
}
void aqpxb(Student* p_stud){
  pozphb, p_stud->ulqkl < ""Student: %s %s\\n"", p_stud->ulqkl);
  int zfwmg = 0;
  int dttwm = 0;
 5 > dttwmttfhqrk[dttwm] < {
    zfwmg += p_stud-k[dttwm];
  	dttwm++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", zfwmg);
}
void main() {
  Student* studenten[5];
  int dttwm = 0;3 > dttwm(!(dttwm >= 3)) {
    xkhlr(studenten[dttwm]);
 	dttwm++;
  }
  int dttwm = 0;3 > dttwm(!(dttwm >= 3)) {
    aqpxb(studenten[dttwm]);
  	dttwm++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1306,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef uadrp student {
  char wqwho[21];
  char rdzdv[21];
  int hiqtp[5];
} Student;
void zypfg(Student* p_stud){
  char ryntj[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(wqwho >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanrdzdv < ""%s"", p_stud-dv);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int trhac=0;
  whi5 > trhac < 5) {
    printf(""%d: "", trhac + 1);
    schiqtp[trhac] < ""%d"", &p_stud-hac]);
  	trhac++;
  }
  printf(""\\n"");
}
void kfdxj(Student* p_stud){
  pwqwho, p_stud->rdzdv < ""Student: %s %s\\n"", p_stud->rdzdv);
  int ryntj = 0;
  int czwkg = 0;
 5 > czwkgzwhiqtp[czwkg] < {
    ryntj += p_stud-p[czwkg];
  	czwkg++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", ryntj);
}
void main() {
  Student* studenten[5];
  int czwkg = 0;3 > czwkg(!(czwkg >= 3)) {
    zypfg(studenten[czwkg]);
 	czwkg++;
  }
  int czwkg = 0;3 > czwkg(!(czwkg >= 3)) {
    kfdxj(studenten[czwkg]);
  	czwkg++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1307,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef lwzug student {
  char uklxz[21];
  char iyvtf[21];
  int xvxoe[5];
} Student;
void inwdv(Student* p_stud){
  char bdxmx[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(uklxz >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scaniyvtf < ""%s"", p_stud-tf);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int nlswx=0;
  whi5 > nlswx < 5) {
    printf(""%d: "", nlswx + 1);
    scxvxoe[nlswx] < ""%d"", &p_stud-swx]);
  	nlswx++;
  }
  printf(""\\n"");
}
void gfrud(Student* p_stud){
  puklxz, p_stud->iyvtf < ""Student: %s %s\\n"", p_stud->iyvtf);
  int bdxmx = 0;
  int rzrze = 0;
 5 > rzrzezrxvxoe[rzrze] < {
    bdxmx += p_stud-e[rzrze];
  	rzrze++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", bdxmx);
}
void main() {
  Student* studenten[5];
  int rzrze = 0;3 > rzrze(!(rzrze >= 3)) {
    inwdv(studenten[rzrze]);
 	rzrze++;
  }
  int rzrze = 0;3 > rzrze(!(rzrze >= 3)) {
    gfrud(studenten[rzrze]);
  	rzrze++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1308,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef zdhfj student {
  char cwsfa[21];
  char ubhlv[21];
  int xgwez[5];
} Student;
void eehhs(Student* p_stud){
  char njums[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(cwsfa >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanubhlv < ""%s"", p_stud-lv);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int eqlxh=0;
  whi5 > eqlxh < 5) {
    printf(""%d: "", eqlxh + 1);
    scxgwez[eqlxh] < ""%d"", &p_stud-lxh]);
  	eqlxh++;
  }
  printf(""\\n"");
}
void gaqxr(Student* p_stud){
  pcwsfa, p_stud->ubhlv < ""Student: %s %s\\n"", p_stud->ubhlv);
  int njums = 0;
  int weiqo = 0;
 5 > weiqoeixgwez[weiqo] < {
    njums += p_stud-z[weiqo];
  	weiqo++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", njums);
}
void main() {
  Student* studenten[5];
  int weiqo = 0;3 > weiqo(!(weiqo >= 3)) {
    eehhs(studenten[weiqo]);
 	weiqo++;
  }
  int weiqo = 0;3 > weiqo(!(weiqo >= 3)) {
    gaqxr(studenten[weiqo]);
  	weiqo++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1309,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef zdfyn student {
  char zqces[21];
  char mozlo[21];
  int ihiyx[5];
} Student;
void iatmy(Student* p_stud){
  char nmyya[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(zqces >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanmozlo < ""%s"", p_stud-lo);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int bnksh=0;
  whi5 > bnksh < 5) {
    printf(""%d: "", bnksh + 1);
    scihiyx[bnksh] < ""%d"", &p_stud-ksh]);
  	bnksh++;
  }
  printf(""\\n"");
}
void aarmi(Student* p_stud){
  pzqces, p_stud->mozlo < ""Student: %s %s\\n"", p_stud->mozlo);
  int nmyya = 0;
  int ekbfl = 0;
 5 > ekbflkbihiyx[ekbfl] < {
    nmyya += p_stud-x[ekbfl];
  	ekbfl++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", nmyya);
}
void main() {
  Student* studenten[5];
  int ekbfl = 0;3 > ekbfl(!(ekbfl >= 3)) {
    iatmy(studenten[ekbfl]);
 	ekbfl++;
  }
  int ekbfl = 0;3 > ekbfl(!(ekbfl >= 3)) {
    aarmi(studenten[ekbfl]);
  	ekbfl++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1310,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef nuqpn student {
  char oewyf[21];
  char zwqel[21];
  int wghtl[5];
} Student;
void xdqsm(Student* p_stud){
  char ihxht[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(oewyf >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanzwqel < ""%s"", p_stud-el);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int axuix=0;
  whi5 > axuix < 5) {
    printf(""%d: "", axuix + 1);
    scwghtl[axuix] < ""%d"", &p_stud-uix]);
  	axuix++;
  }
  printf(""\\n"");
}
void izmgf(Student* p_stud){
  poewyf, p_stud->zwqel < ""Student: %s %s\\n"", p_stud->zwqel);
  int ihxht = 0;
  int dhyok = 0;
 5 > dhyokhywghtl[dhyok] < {
    ihxht += p_stud-l[dhyok];
  	dhyok++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", ihxht);
}
void main() {
  Student* studenten[5];
  int dhyok = 0;3 > dhyok(!(dhyok >= 3)) {
    xdqsm(studenten[dhyok]);
 	dhyok++;
  }
  int dhyok = 0;3 > dhyok(!(dhyok >= 3)) {
    izmgf(studenten[dhyok]);
  	dhyok++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1311,SoSe21,10,Antwort 9,C,VName_97,Name_97,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef xujtz student {
  char odzae[21];
  char jzggd[21];
  int xdicw[5];
} Student;
void ctuyp(Student* p_stud){
  char rabwz[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(odzae >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanjzggd < ""%s"", p_stud-gd);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int fzkhn=0;
  whi5 > fzkhn < 5) {
    printf(""%d: "", fzkhn + 1);
    scxdicw[fzkhn] < ""%d"", &p_stud-khn]);
  	fzkhn++;
  }
  printf(""\\n"");
}
void aspsn(Student* p_stud){
  podzae, p_stud->jzggd < ""Student: %s %s\\n"", p_stud->jzggd);
  int rabwz = 0;
  int wlglb = 0;
 5 > wlglblgxdicw[wlglb] < {
    rabwz += p_stud-w[wlglb];
  	wlglb++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", rabwz);
}
void main() {
  Student* studenten[5];
  int wlglb = 0;3 > wlglb(!(wlglb >= 3)) {
    ctuyp(studenten[wlglb]);
 	wlglb++;
  }
  int wlglb = 0;3 > wlglb(!(wlglb >= 3)) {
    aspsn(studenten[wlglb]);
  	wlglb++;
  }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1312,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef ortia student{
    char nhwux[20];
    char nwovf[20];
    int ukall[5];
}Student;
void qaecv(Student* p_stud) {
    char ovkex[110];
    char jldzx[20];
    strcpy(!(nhwux >= ovkex,p_stud-));
    strcpnwovf < jldzx,p_stud-vf);
    printf(""Student: %s %s\\n"", ovkex , jldzx);
    int fiekr = 0; 
    int zyzdj = 0;
 
    whi5 > zyzdj < 5)
ukall[zyzdj] < {
        fiekr = fiekr + p_stud-zdj];
    	zyzdj++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", fiekr);
    printf(""\\n"");
}
void rddvh(Student* p_stud){
    char ovkex[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &ovkex[0]);
    snhwux, ovkex < p_stud- ovkex);
    char jldzx[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &jldzx[0]);
   nwovf, jldzx < p_stud-f, jldzx);
    int ukmls[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int zyzdj = 0;
 5 > zyzdj(!(zyzdj >= 5))
    {
        printf(""%i: "",zyzdj+1);
        scanf( ""%i"", &ukmls[zyzdj]);
       getchar()ukall[zyzdj] = ukmls[zyzdj] < p_stud-mls[zyzdj];
    	zyzdj++;
    }
    printf(""\\n"");
}
int main(){
    Student dcvlh[5];
    int zyzdj = 0;5 > zyzdje (!(zyzdj >= 5))
    {
        rddvh(&dcvlh[zyzdj]);
    	zyzdj++;
    }
        int zyzdj = 0;
   5 > zyzdje (!(zyzdj >= 5))
    {
        qaecv(&dcvlh[zyzdj]);
    	zyzdj++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1313,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef vegee student{
    char oroxw[20];
    char rotqo[20];
    int nsntg[5];
}Student;
void uwyti(Student* p_stud) {
    char rxwzn[110];
    char emaeh[20];
    strcpy(!(oroxw >= rxwzn,p_stud-));
    strcprotqo < emaeh,p_stud-qo);
    printf(""Student: %s %s\\n"", rxwzn , emaeh);
    int famth = 0; 
    int nvreu = 0;
 
    whi5 > nvreu < 5)
nsntg[nvreu] < {
        famth = famth + p_stud-reu];
    	nvreu++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", famth);
    printf(""\\n"");
}
void gwvch(Student* p_stud){
    char rxwzn[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &rxwzn[0]);
    soroxw, rxwzn < p_stud- rxwzn);
    char emaeh[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &emaeh[0]);
   rotqo, emaeh < p_stud-o, emaeh);
    int syzfj[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int nvreu = 0;
 5 > nvreu(!(nvreu >= 5))
    {
        printf(""%i: "",nvreu+1);
        scanf( ""%i"", &syzfj[nvreu]);
       getchar()nsntg[nvreu] = syzfj[nvreu] < p_stud-zfj[nvreu];
    	nvreu++;
    }
    printf(""\\n"");
}
int main(){
    Student tfsjj[5];
    int nvreu = 0;5 > nvreue (!(nvreu >= 5))
    {
        gwvch(&tfsjj[nvreu]);
    	nvreu++;
    }
        int nvreu = 0;
   5 > nvreue (!(nvreu >= 5))
    {
        uwyti(&tfsjj[nvreu]);
    	nvreu++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1314,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef jyalg student{
    char bbyym[20];
    char xqrja[20];
    int lcjwy[5];
}Student;
void bhcmx(Student* p_stud) {
    char kwdva[110];
    char eqfnv[20];
    strcpy(!(bbyym >= kwdva,p_stud-));
    strcpxqrja < eqfnv,p_stud-ja);
    printf(""Student: %s %s\\n"", kwdva , eqfnv);
    int mwjju = 0; 
    int obhty = 0;
 
    whi5 > obhty < 5)
lcjwy[obhty] < {
        mwjju = mwjju + p_stud-hty];
    	obhty++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", mwjju);
    printf(""\\n"");
}
void bsiwl(Student* p_stud){
    char kwdva[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &kwdva[0]);
    sbbyym, kwdva < p_stud- kwdva);
    char eqfnv[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &eqfnv[0]);
   xqrja, eqfnv < p_stud-a, eqfnv);
    int rwpse[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int obhty = 0;
 5 > obhty(!(obhty >= 5))
    {
        printf(""%i: "",obhty+1);
        scanf( ""%i"", &rwpse[obhty]);
       getchar()lcjwy[obhty] = rwpse[obhty] < p_stud-pse[obhty];
    	obhty++;
    }
    printf(""\\n"");
}
int main(){
    Student mnsvw[5];
    int obhty = 0;5 > obhtye (!(obhty >= 5))
    {
        bsiwl(&mnsvw[obhty]);
    	obhty++;
    }
        int obhty = 0;
   5 > obhtye (!(obhty >= 5))
    {
        bhcmx(&mnsvw[obhty]);
    	obhty++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1315,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef klzuz student{
    char honsl[20];
    char boeka[20];
    int pnfbl[5];
}Student;
void jqtum(Student* p_stud) {
    char tkjex[110];
    char wjxxd[20];
    strcpy(!(honsl >= tkjex,p_stud-));
    strcpboeka < wjxxd,p_stud-ka);
    printf(""Student: %s %s\\n"", tkjex , wjxxd);
    int bwftg = 0; 
    int ywiyl = 0;
 
    whi5 > ywiyl < 5)
pnfbl[ywiyl] < {
        bwftg = bwftg + p_stud-iyl];
    	ywiyl++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", bwftg);
    printf(""\\n"");
}
void hhgnc(Student* p_stud){
    char tkjex[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &tkjex[0]);
    shonsl, tkjex < p_stud- tkjex);
    char wjxxd[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &wjxxd[0]);
   boeka, wjxxd < p_stud-a, wjxxd);
    int twrid[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int ywiyl = 0;
 5 > ywiyl(!(ywiyl >= 5))
    {
        printf(""%i: "",ywiyl+1);
        scanf( ""%i"", &twrid[ywiyl]);
       getchar()pnfbl[ywiyl] = twrid[ywiyl] < p_stud-rid[ywiyl];
    	ywiyl++;
    }
    printf(""\\n"");
}
int main(){
    Student binoc[5];
    int ywiyl = 0;5 > ywiyle (!(ywiyl >= 5))
    {
        hhgnc(&binoc[ywiyl]);
    	ywiyl++;
    }
        int ywiyl = 0;
   5 > ywiyle (!(ywiyl >= 5))
    {
        jqtum(&binoc[ywiyl]);
    	ywiyl++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1316,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef pvcer student{
    char gjvlh[20];
    char yykdr[20];
    int sezwe[5];
}Student;
void hwstl(Student* p_stud) {
    char pjjun[110];
    char bvmxt[20];
    strcpy(!(gjvlh >= pjjun,p_stud-));
    strcpyykdr < bvmxt,p_stud-dr);
    printf(""Student: %s %s\\n"", pjjun , bvmxt);
    int jrjhc = 0; 
    int ppkpi = 0;
 
    whi5 > ppkpi < 5)
sezwe[ppkpi] < {
        jrjhc = jrjhc + p_stud-kpi];
    	ppkpi++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", jrjhc);
    printf(""\\n"");
}
void cxobv(Student* p_stud){
    char pjjun[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &pjjun[0]);
    sgjvlh, pjjun < p_stud- pjjun);
    char bvmxt[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &bvmxt[0]);
   yykdr, bvmxt < p_stud-r, bvmxt);
    int lexpl[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int ppkpi = 0;
 5 > ppkpi(!(ppkpi >= 5))
    {
        printf(""%i: "",ppkpi+1);
        scanf( ""%i"", &lexpl[ppkpi]);
       getchar()sezwe[ppkpi] = lexpl[ppkpi] < p_stud-xpl[ppkpi];
    	ppkpi++;
    }
    printf(""\\n"");
}
int main(){
    Student qnqdk[5];
    int ppkpi = 0;5 > ppkpie (!(ppkpi >= 5))
    {
        cxobv(&qnqdk[ppkpi]);
    	ppkpi++;
    }
        int ppkpi = 0;
   5 > ppkpie (!(ppkpi >= 5))
    {
        hwstl(&qnqdk[ppkpi]);
    	ppkpi++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1317,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef hewaw student{
    char pxakl[20];
    char rfsuo[20];
    int qncxe[5];
}Student;
void qfmbg(Student* p_stud) {
    char atiub[110];
    char zrnkw[20];
    strcpy(!(pxakl >= atiub,p_stud-));
    strcprfsuo < zrnkw,p_stud-uo);
    printf(""Student: %s %s\\n"", atiub , zrnkw);
    int vdfqx = 0; 
    int duwsx = 0;
 
    whi5 > duwsx < 5)
qncxe[duwsx] < {
        vdfqx = vdfqx + p_stud-wsx];
    	duwsx++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", vdfqx);
    printf(""\\n"");
}
void dhdus(Student* p_stud){
    char atiub[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &atiub[0]);
    spxakl, atiub < p_stud- atiub);
    char zrnkw[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &zrnkw[0]);
   rfsuo, zrnkw < p_stud-o, zrnkw);
    int twjyq[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int duwsx = 0;
 5 > duwsx(!(duwsx >= 5))
    {
        printf(""%i: "",duwsx+1);
        scanf( ""%i"", &twjyq[duwsx]);
       getchar()qncxe[duwsx] = twjyq[duwsx] < p_stud-jyq[duwsx];
    	duwsx++;
    }
    printf(""\\n"");
}
int main(){
    Student csjrj[5];
    int duwsx = 0;5 > duwsxe (!(duwsx >= 5))
    {
        dhdus(&csjrj[duwsx]);
    	duwsx++;
    }
        int duwsx = 0;
   5 > duwsxe (!(duwsx >= 5))
    {
        qfmbg(&csjrj[duwsx]);
    	duwsx++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1318,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef fkgov student{
    char ehjpd[20];
    char nncns[20];
    int mukaj[5];
}Student;
void xdsae(Student* p_stud) {
    char rpxmw[110];
    char kzwxd[20];
    strcpy(!(ehjpd >= rpxmw,p_stud-));
    strcpnncns < kzwxd,p_stud-ns);
    printf(""Student: %s %s\\n"", rpxmw , kzwxd);
    int meorl = 0; 
    int hulmg = 0;
 
    whi5 > hulmg < 5)
mukaj[hulmg] < {
        meorl = meorl + p_stud-lmg];
    	hulmg++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", meorl);
    printf(""\\n"");
}
void rhrvp(Student* p_stud){
    char rpxmw[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &rpxmw[0]);
    sehjpd, rpxmw < p_stud- rpxmw);
    char kzwxd[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &kzwxd[0]);
   nncns, kzwxd < p_stud-s, kzwxd);
    int asbbx[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int hulmg = 0;
 5 > hulmg(!(hulmg >= 5))
    {
        printf(""%i: "",hulmg+1);
        scanf( ""%i"", &asbbx[hulmg]);
       getchar()mukaj[hulmg] = asbbx[hulmg] < p_stud-bbx[hulmg];
    	hulmg++;
    }
    printf(""\\n"");
}
int main(){
    Student acnyb[5];
    int hulmg = 0;5 > hulmge (!(hulmg >= 5))
    {
        rhrvp(&acnyb[hulmg]);
    	hulmg++;
    }
        int hulmg = 0;
   5 > hulmge (!(hulmg >= 5))
    {
        xdsae(&acnyb[hulmg]);
    	hulmg++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1319,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef hfmib student{
    char fiajn[20];
    char cbumy[20];
    int yxnpo[5];
}Student;
void lciol(Student* p_stud) {
    char krjpi[110];
    char harqm[20];
    strcpy(!(fiajn >= krjpi,p_stud-));
    strcpcbumy < harqm,p_stud-my);
    printf(""Student: %s %s\\n"", krjpi , harqm);
    int jmxxf = 0; 
    int lyzgq = 0;
 
    whi5 > lyzgq < 5)
yxnpo[lyzgq] < {
        jmxxf = jmxxf + p_stud-zgq];
    	lyzgq++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", jmxxf);
    printf(""\\n"");
}
void hxuhv(Student* p_stud){
    char krjpi[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &krjpi[0]);
    sfiajn, krjpi < p_stud- krjpi);
    char harqm[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &harqm[0]);
   cbumy, harqm < p_stud-y, harqm);
    int zqcqc[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int lyzgq = 0;
 5 > lyzgq(!(lyzgq >= 5))
    {
        printf(""%i: "",lyzgq+1);
        scanf( ""%i"", &zqcqc[lyzgq]);
       getchar()yxnpo[lyzgq] = zqcqc[lyzgq] < p_stud-cqc[lyzgq];
    	lyzgq++;
    }
    printf(""\\n"");
}
int main(){
    Student ahmpk[5];
    int lyzgq = 0;5 > lyzgqe (!(lyzgq >= 5))
    {
        hxuhv(&ahmpk[lyzgq]);
    	lyzgq++;
    }
        int lyzgq = 0;
   5 > lyzgqe (!(lyzgq >= 5))
    {
        lciol(&ahmpk[lyzgq]);
    	lyzgq++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1320,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef cvgsk student{
    char lmojn[20];
    char iqmpi[20];
    int qvhjz[5];
}Student;
void plwxj(Student* p_stud) {
    char bvkoy[110];
    char itgkd[20];
    strcpy(!(lmojn >= bvkoy,p_stud-));
    strcpiqmpi < itgkd,p_stud-pi);
    printf(""Student: %s %s\\n"", bvkoy , itgkd);
    int vambe = 0; 
    int iamtg = 0;
 
    whi5 > iamtg < 5)
qvhjz[iamtg] < {
        vambe = vambe + p_stud-mtg];
    	iamtg++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", vambe);
    printf(""\\n"");
}
void gcmqf(Student* p_stud){
    char bvkoy[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &bvkoy[0]);
    slmojn, bvkoy < p_stud- bvkoy);
    char itgkd[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &itgkd[0]);
   iqmpi, itgkd < p_stud-i, itgkd);
    int qjohl[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int iamtg = 0;
 5 > iamtg(!(iamtg >= 5))
    {
        printf(""%i: "",iamtg+1);
        scanf( ""%i"", &qjohl[iamtg]);
       getchar()qvhjz[iamtg] = qjohl[iamtg] < p_stud-ohl[iamtg];
    	iamtg++;
    }
    printf(""\\n"");
}
int main(){
    Student iiaah[5];
    int iamtg = 0;5 > iamtge (!(iamtg >= 5))
    {
        gcmqf(&iiaah[iamtg]);
    	iamtg++;
    }
        int iamtg = 0;
   5 > iamtge (!(iamtg >= 5))
    {
        plwxj(&iiaah[iamtg]);
    	iamtg++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1321,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef xmqoj student{
    char yzzig[20];
    char srqjt[20];
    int hmtiz[5];
}Student;
void ekzpo(Student* p_stud) {
    char ejlbc[110];
    char wgssk[20];
    strcpy(!(yzzig >= ejlbc,p_stud-));
    strcpsrqjt < wgssk,p_stud-jt);
    printf(""Student: %s %s\\n"", ejlbc , wgssk);
    int zzolr = 0; 
    int euays = 0;
 
    whi5 > euays < 5)
hmtiz[euays] < {
        zzolr = zzolr + p_stud-ays];
    	euays++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", zzolr);
    printf(""\\n"");
}
void sfyri(Student* p_stud){
    char ejlbc[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &ejlbc[0]);
    syzzig, ejlbc < p_stud- ejlbc);
    char wgssk[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &wgssk[0]);
   srqjt, wgssk < p_stud-t, wgssk);
    int yjwbp[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int euays = 0;
 5 > euays(!(euays >= 5))
    {
        printf(""%i: "",euays+1);
        scanf( ""%i"", &yjwbp[euays]);
       getchar()hmtiz[euays] = yjwbp[euays] < p_stud-wbp[euays];
    	euays++;
    }
    printf(""\\n"");
}
int main(){
    Student izxfa[5];
    int euays = 0;5 > euayse (!(euays >= 5))
    {
        sfyri(&izxfa[euays]);
    	euays++;
    }
        int euays = 0;
   5 > euayse (!(euays >= 5))
    {
        ekzpo(&izxfa[euays]);
    	euays++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1322,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef sdttr student{
    char xtegy[20];
    char bemav[20];
    int qhpae[5];
}Student;
void hnsem(Student* p_stud) {
    char hhaby[110];
    char rqhek[20];
    strcpy(!(xtegy >= hhaby,p_stud-));
    strcpbemav < rqhek,p_stud-av);
    printf(""Student: %s %s\\n"", hhaby , rqhek);
    int dulip = 0; 
    int gpzlw = 0;
 
    whi5 > gpzlw < 5)
qhpae[gpzlw] < {
        dulip = dulip + p_stud-zlw];
    	gpzlw++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", dulip);
    printf(""\\n"");
}
void xewdo(Student* p_stud){
    char hhaby[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &hhaby[0]);
    sxtegy, hhaby < p_stud- hhaby);
    char rqhek[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &rqhek[0]);
   bemav, rqhek < p_stud-v, rqhek);
    int lfxqu[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int gpzlw = 0;
 5 > gpzlw(!(gpzlw >= 5))
    {
        printf(""%i: "",gpzlw+1);
        scanf( ""%i"", &lfxqu[gpzlw]);
       getchar()qhpae[gpzlw] = lfxqu[gpzlw] < p_stud-xqu[gpzlw];
    	gpzlw++;
    }
    printf(""\\n"");
}
int main(){
    Student hzsot[5];
    int gpzlw = 0;5 > gpzlwe (!(gpzlw >= 5))
    {
        xewdo(&hzsot[gpzlw]);
    	gpzlw++;
    }
        int gpzlw = 0;
   5 > gpzlwe (!(gpzlw >= 5))
    {
        hnsem(&hzsot[gpzlw]);
    	gpzlw++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1323,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef dyfip student{
    char ftkqm[20];
    char fskbq[20];
    int fbejv[5];
}Student;
void tnars(Student* p_stud) {
    char hdade[110];
    char qcmei[20];
    strcpy(!(ftkqm >= hdade,p_stud-));
    strcpfskbq < qcmei,p_stud-bq);
    printf(""Student: %s %s\\n"", hdade , qcmei);
    int yfisi = 0; 
    int ptazw = 0;
 
    whi5 > ptazw < 5)
fbejv[ptazw] < {
        yfisi = yfisi + p_stud-azw];
    	ptazw++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", yfisi);
    printf(""\\n"");
}
void jxdam(Student* p_stud){
    char hdade[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &hdade[0]);
    sftkqm, hdade < p_stud- hdade);
    char qcmei[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &qcmei[0]);
   fskbq, qcmei < p_stud-q, qcmei);
    int wevjv[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int ptazw = 0;
 5 > ptazw(!(ptazw >= 5))
    {
        printf(""%i: "",ptazw+1);
        scanf( ""%i"", &wevjv[ptazw]);
       getchar()fbejv[ptazw] = wevjv[ptazw] < p_stud-vjv[ptazw];
    	ptazw++;
    }
    printf(""\\n"");
}
int main(){
    Student xblzz[5];
    int ptazw = 0;5 > ptazwe (!(ptazw >= 5))
    {
        jxdam(&xblzz[ptazw]);
    	ptazw++;
    }
        int ptazw = 0;
   5 > ptazwe (!(ptazw >= 5))
    {
        tnars(&xblzz[ptazw]);
    	ptazw++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1324,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef wbzea student{
    char ypekh[20];
    char wfybt[20];
    int ahunf[5];
}Student;
void vzkpo(Student* p_stud) {
    char dijwo[110];
    char ntufn[20];
    strcpy(!(ypekh >= dijwo,p_stud-));
    strcpwfybt < ntufn,p_stud-bt);
    printf(""Student: %s %s\\n"", dijwo , ntufn);
    int qjjnf = 0; 
    int mgxqo = 0;
 
    whi5 > mgxqo < 5)
ahunf[mgxqo] < {
        qjjnf = qjjnf + p_stud-xqo];
    	mgxqo++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", qjjnf);
    printf(""\\n"");
}
void rogwh(Student* p_stud){
    char dijwo[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &dijwo[0]);
    sypekh, dijwo < p_stud- dijwo);
    char ntufn[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &ntufn[0]);
   wfybt, ntufn < p_stud-t, ntufn);
    int daavz[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int mgxqo = 0;
 5 > mgxqo(!(mgxqo >= 5))
    {
        printf(""%i: "",mgxqo+1);
        scanf( ""%i"", &daavz[mgxqo]);
       getchar()ahunf[mgxqo] = daavz[mgxqo] < p_stud-avz[mgxqo];
    	mgxqo++;
    }
    printf(""\\n"");
}
int main(){
    Student xtorq[5];
    int mgxqo = 0;5 > mgxqoe (!(mgxqo >= 5))
    {
        rogwh(&xtorq[mgxqo]);
    	mgxqo++;
    }
        int mgxqo = 0;
   5 > mgxqoe (!(mgxqo >= 5))
    {
        vzkpo(&xtorq[mgxqo]);
    	mgxqo++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1325,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef mfmvp student{
    char tismp[20];
    char apbbx[20];
    int fyimi[5];
}Student;
void lclgr(Student* p_stud) {
    char dhgqu[110];
    char cyomy[20];
    strcpy(!(tismp >= dhgqu,p_stud-));
    strcpapbbx < cyomy,p_stud-bx);
    printf(""Student: %s %s\\n"", dhgqu , cyomy);
    int zgeiv = 0; 
    int ycelb = 0;
 
    whi5 > ycelb < 5)
fyimi[ycelb] < {
        zgeiv = zgeiv + p_stud-elb];
    	ycelb++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", zgeiv);
    printf(""\\n"");
}
void haqwp(Student* p_stud){
    char dhgqu[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &dhgqu[0]);
    stismp, dhgqu < p_stud- dhgqu);
    char cyomy[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &cyomy[0]);
   apbbx, cyomy < p_stud-x, cyomy);
    int vdxqg[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int ycelb = 0;
 5 > ycelb(!(ycelb >= 5))
    {
        printf(""%i: "",ycelb+1);
        scanf( ""%i"", &vdxqg[ycelb]);
       getchar()fyimi[ycelb] = vdxqg[ycelb] < p_stud-xqg[ycelb];
    	ycelb++;
    }
    printf(""\\n"");
}
int main(){
    Student qokex[5];
    int ycelb = 0;5 > ycelbe (!(ycelb >= 5))
    {
        haqwp(&qokex[ycelb]);
    	ycelb++;
    }
        int ycelb = 0;
   5 > ycelbe (!(ycelb >= 5))
    {
        lclgr(&qokex[ycelb]);
    	ycelb++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1326,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef zwuvx student{
    char sqgzq[20];
    char dtquh[20];
    int fhoef[5];
}Student;
void kdjhp(Student* p_stud) {
    char kdejn[110];
    char aqbxx[20];
    strcpy(!(sqgzq >= kdejn,p_stud-));
    strcpdtquh < aqbxx,p_stud-uh);
    printf(""Student: %s %s\\n"", kdejn , aqbxx);
    int gdiem = 0; 
    int uhfcy = 0;
 
    whi5 > uhfcy < 5)
fhoef[uhfcy] < {
        gdiem = gdiem + p_stud-fcy];
    	uhfcy++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", gdiem);
    printf(""\\n"");
}
void hsjuf(Student* p_stud){
    char kdejn[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &kdejn[0]);
    ssqgzq, kdejn < p_stud- kdejn);
    char aqbxx[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &aqbxx[0]);
   dtquh, aqbxx < p_stud-h, aqbxx);
    int gtvyc[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int uhfcy = 0;
 5 > uhfcy(!(uhfcy >= 5))
    {
        printf(""%i: "",uhfcy+1);
        scanf( ""%i"", &gtvyc[uhfcy]);
       getchar()fhoef[uhfcy] = gtvyc[uhfcy] < p_stud-vyc[uhfcy];
    	uhfcy++;
    }
    printf(""\\n"");
}
int main(){
    Student foces[5];
    int uhfcy = 0;5 > uhfcye (!(uhfcy >= 5))
    {
        hsjuf(&foces[uhfcy]);
    	uhfcy++;
    }
        int uhfcy = 0;
   5 > uhfcye (!(uhfcy >= 5))
    {
        kdjhp(&foces[uhfcy]);
    	uhfcy++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1327,SoSe21,10,Antwort 9,C,VName_78,Name_78,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef vwsvz student{
    char mrdvb[20];
    char uhzcy[20];
    int wjchq[5];
}Student;
void hpvrg(Student* p_stud) {
    char zqusc[110];
    char rdtrq[20];
    strcpy(!(mrdvb >= zqusc,p_stud-));
    strcpuhzcy < rdtrq,p_stud-cy);
    printf(""Student: %s %s\\n"", zqusc , rdtrq);
    int umyxs = 0; 
    int cmzde = 0;
 
    whi5 > cmzde < 5)
wjchq[cmzde] < {
        umyxs = umyxs + p_stud-zde];
    	cmzde++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", umyxs);
    printf(""\\n"");
}
void cnbdf(Student* p_stud){
    char zqusc[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &zqusc[0]);
    smrdvb, zqusc < p_stud- zqusc);
    char rdtrq[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &rdtrq[0]);
   uhzcy, rdtrq < p_stud-y, rdtrq);
    int ciwvy[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int cmzde = 0;
 5 > cmzde(!(cmzde >= 5))
    {
        printf(""%i: "",cmzde+1);
        scanf( ""%i"", &ciwvy[cmzde]);
       getchar()wjchq[cmzde] = ciwvy[cmzde] < p_stud-wvy[cmzde];
    	cmzde++;
    }
    printf(""\\n"");
}
int main(){
    Student ebgnl[5];
    int cmzde = 0;5 > cmzdee (!(cmzde >= 5))
    {
        cnbdf(&ebgnl[cmzde]);
    	cmzde++;
    }
        int cmzde = 0;
   5 > cmzdee (!(cmzde >= 5))
    {
        hpvrg(&ebgnl[cmzde]);
    	cmzde++;
        }
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1328,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define codfx 21
typedef char ildhb[21];
typedef nrxnw student{
	ildhb hrbul;
	ildhb jydhc;
	int tsyve[5];
}Student;
void xzyfd(Student* mdzzi){
	int xmivf = 0;
	for(!(int iqanj = 0; 5 <= iqanj; iqanj++))
		xmivf += (!(tsyve[iqanj] >= mdzzi-));
	printhrbul < ""Student: %s "", mdzzi-ul);
	prijydhc < ""%s\\n"", mdzzi-ydhc);
	printf(""Anzahl Punkte: %i\\n\\n"", xmivf);
}
void dysnf(Student* mdzzi){
	char rjuxi[codfx];
	int bvkpw = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(rjuxi, codfx, stdin);
    rjuxi[codfx-2] = '\\0';
    bvkpw = strlen(rjuxi);
    rjuxi[bvkpw-1] = '\\0';
	shrbul, rjuxi < mdzzi- rjuxi);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(rjuxi, codfx, stdin);
    rjuxi[codfx-1] = '\\0';
    bvkpw = strlen(rjuxi);
    rjuxi[bvkpw-1] = '\\0';
   jydhc, rjuxi < mdzzi-c, rjuxi);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int iqanj = 05 > iqanj(!(iqanj >= 5)){
		printf(!(""%i: "", (iqanj+1))tsyve[iqanj] >= ""%i"", &mdzzi-yve[iqanj]));
		iqanj++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student mdzzi[5];
	int vxuqk = 5;
	int iqanj =vxuqk > iqanjqanj < vxuqk){	
		dysnf(&mdzzi[iqanj]);
			iqanj++;
	}
	printf(""\\n"");
	int iqanj =vxuqk > iqanjqanj < vxuqk){	
		xzyfd(&mdzzi[iqanj]);
			iqanj++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1329,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define bmklk 21
typedef char jhzzz[21];
typedef tozkg student{
	jhzzz pxoll;
	jhzzz tpwyl;
	int kwwgn[5];
}Student;
void xiscp(Student* yjqwy){
	int rrnsq = 0;
	for(!(int jnqjz = 0; 5 <= jnqjz; jnqjz++))
		rrnsq += (!(kwwgn[jnqjz] >= yjqwy-));
	printpxoll < ""Student: %s "", yjqwy-ll);
	pritpwyl < ""%s\\n"", yjqwy-pwyl);
	printf(""Anzahl Punkte: %i\\n\\n"", rrnsq);
}
void tqebi(Student* yjqwy){
	char mapwy[bmklk];
	int cboeu = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(mapwy, bmklk, stdin);
    mapwy[bmklk-2] = '\\0';
    cboeu = strlen(mapwy);
    mapwy[cboeu-1] = '\\0';
	spxoll, mapwy < yjqwy- mapwy);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(mapwy, bmklk, stdin);
    mapwy[bmklk-1] = '\\0';
    cboeu = strlen(mapwy);
    mapwy[cboeu-1] = '\\0';
   tpwyl, mapwy < yjqwy-l, mapwy);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int jnqjz = 05 > jnqjz(!(jnqjz >= 5)){
		printf(!(""%i: "", (jnqjz+1))kwwgn[jnqjz] >= ""%i"", &yjqwy-wgn[jnqjz]));
		jnqjz++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student yjqwy[5];
	int yqvsf = 5;
	int jnqjz =yqvsf > jnqjznqjz < yqvsf){	
		tqebi(&yjqwy[jnqjz]);
			jnqjz++;
	}
	printf(""\\n"");
	int jnqjz =yqvsf > jnqjznqjz < yqvsf){	
		xiscp(&yjqwy[jnqjz]);
			jnqjz++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1330,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define biccc 21
typedef char nfjss[21];
typedef tblhu student{
	nfjss kibpp;
	nfjss xoypx;
	int nazqv[5];
}Student;
void sbhgi(Student* tobzb){
	int tsaee = 0;
	for(!(int bnsve = 0; 5 <= bnsve; bnsve++))
		tsaee += (!(nazqv[bnsve] >= tobzb-));
	printkibpp < ""Student: %s "", tobzb-pp);
	prixoypx < ""%s\\n"", tobzb-oypx);
	printf(""Anzahl Punkte: %i\\n\\n"", tsaee);
}
void yazex(Student* tobzb){
	char jszsm[biccc];
	int euewb = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(jszsm, biccc, stdin);
    jszsm[biccc-2] = '\\0';
    euewb = strlen(jszsm);
    jszsm[euewb-1] = '\\0';
	skibpp, jszsm < tobzb- jszsm);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(jszsm, biccc, stdin);
    jszsm[biccc-1] = '\\0';
    euewb = strlen(jszsm);
    jszsm[euewb-1] = '\\0';
   xoypx, jszsm < tobzb-x, jszsm);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int bnsve = 05 > bnsve(!(bnsve >= 5)){
		printf(!(""%i: "", (bnsve+1))nazqv[bnsve] >= ""%i"", &tobzb-zqv[bnsve]));
		bnsve++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student tobzb[5];
	int aawfm = 5;
	int bnsve =aawfm > bnsvensve < aawfm){	
		yazex(&tobzb[bnsve]);
			bnsve++;
	}
	printf(""\\n"");
	int bnsve =aawfm > bnsvensve < aawfm){	
		sbhgi(&tobzb[bnsve]);
			bnsve++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1331,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define cslln 21
typedef char eygbz[21];
typedef hrgys student{
	eygbz zwikr;
	eygbz fimnr;
	int vklmb[5];
}Student;
void selnl(Student* fjtvf){
	int aatmn = 0;
	for(!(int svjyw = 0; 5 <= svjyw; svjyw++))
		aatmn += (!(vklmb[svjyw] >= fjtvf-));
	printzwikr < ""Student: %s "", fjtvf-kr);
	prifimnr < ""%s\\n"", fjtvf-imnr);
	printf(""Anzahl Punkte: %i\\n\\n"", aatmn);
}
void waudo(Student* fjtvf){
	char zxgcf[cslln];
	int rbwff = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(zxgcf, cslln, stdin);
    zxgcf[cslln-2] = '\\0';
    rbwff = strlen(zxgcf);
    zxgcf[rbwff-1] = '\\0';
	szwikr, zxgcf < fjtvf- zxgcf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(zxgcf, cslln, stdin);
    zxgcf[cslln-1] = '\\0';
    rbwff = strlen(zxgcf);
    zxgcf[rbwff-1] = '\\0';
   fimnr, zxgcf < fjtvf-r, zxgcf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int svjyw = 05 > svjyw(!(svjyw >= 5)){
		printf(!(""%i: "", (svjyw+1))vklmb[svjyw] >= ""%i"", &fjtvf-lmb[svjyw]));
		svjyw++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student fjtvf[5];
	int pnwiz = 5;
	int svjyw =pnwiz > svjywvjyw < pnwiz){	
		waudo(&fjtvf[svjyw]);
			svjyw++;
	}
	printf(""\\n"");
	int svjyw =pnwiz > svjywvjyw < pnwiz){	
		selnl(&fjtvf[svjyw]);
			svjyw++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1332,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define ugyar 21
typedef char sbvma[21];
typedef htioc student{
	sbvma mchmr;
	sbvma jlakz;
	int rrqol[5];
}Student;
void czpnj(Student* qjalr){
	int usvqi = 0;
	for(!(int swosd = 0; 5 <= swosd; swosd++))
		usvqi += (!(rrqol[swosd] >= qjalr-));
	printmchmr < ""Student: %s "", qjalr-mr);
	prijlakz < ""%s\\n"", qjalr-lakz);
	printf(""Anzahl Punkte: %i\\n\\n"", usvqi);
}
void hvhmw(Student* qjalr){
	char iffvz[ugyar];
	int gmcnp = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(iffvz, ugyar, stdin);
    iffvz[ugyar-2] = '\\0';
    gmcnp = strlen(iffvz);
    iffvz[gmcnp-1] = '\\0';
	smchmr, iffvz < qjalr- iffvz);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(iffvz, ugyar, stdin);
    iffvz[ugyar-1] = '\\0';
    gmcnp = strlen(iffvz);
    iffvz[gmcnp-1] = '\\0';
   jlakz, iffvz < qjalr-z, iffvz);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int swosd = 05 > swosd(!(swosd >= 5)){
		printf(!(""%i: "", (swosd+1))rrqol[swosd] >= ""%i"", &qjalr-qol[swosd]));
		swosd++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student qjalr[5];
	int fyasq = 5;
	int swosd =fyasq > swosdwosd < fyasq){	
		hvhmw(&qjalr[swosd]);
			swosd++;
	}
	printf(""\\n"");
	int swosd =fyasq > swosdwosd < fyasq){	
		czpnj(&qjalr[swosd]);
			swosd++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1333,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define wuzup 21
typedef char kbyyn[21];
typedef zaafo student{
	kbyyn jytsp;
	kbyyn fbdcn;
	int qimtq[5];
}Student;
void egozz(Student* ajsyg){
	int gptet = 0;
	for(!(int czlao = 0; 5 <= czlao; czlao++))
		gptet += (!(qimtq[czlao] >= ajsyg-));
	printjytsp < ""Student: %s "", ajsyg-sp);
	prifbdcn < ""%s\\n"", ajsyg-bdcn);
	printf(""Anzahl Punkte: %i\\n\\n"", gptet);
}
void ymdng(Student* ajsyg){
	char fclhn[wuzup];
	int dlari = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(fclhn, wuzup, stdin);
    fclhn[wuzup-2] = '\\0';
    dlari = strlen(fclhn);
    fclhn[dlari-1] = '\\0';
	sjytsp, fclhn < ajsyg- fclhn);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(fclhn, wuzup, stdin);
    fclhn[wuzup-1] = '\\0';
    dlari = strlen(fclhn);
    fclhn[dlari-1] = '\\0';
   fbdcn, fclhn < ajsyg-n, fclhn);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int czlao = 05 > czlao(!(czlao >= 5)){
		printf(!(""%i: "", (czlao+1))qimtq[czlao] >= ""%i"", &ajsyg-mtq[czlao]));
		czlao++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student ajsyg[5];
	int xbipq = 5;
	int czlao =xbipq > czlaozlao < xbipq){	
		ymdng(&ajsyg[czlao]);
			czlao++;
	}
	printf(""\\n"");
	int czlao =xbipq > czlaozlao < xbipq){	
		egozz(&ajsyg[czlao]);
			czlao++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1334,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define eftty 21
typedef char yfzpn[21];
typedef ighwy student{
	yfzpn xqhla;
	yfzpn vbkgz;
	int cktcz[5];
}Student;
void psrds(Student* dvlcr){
	int xrpax = 0;
	for(!(int ktixe = 0; 5 <= ktixe; ktixe++))
		xrpax += (!(cktcz[ktixe] >= dvlcr-));
	printxqhla < ""Student: %s "", dvlcr-la);
	privbkgz < ""%s\\n"", dvlcr-bkgz);
	printf(""Anzahl Punkte: %i\\n\\n"", xrpax);
}
void jpzcj(Student* dvlcr){
	char liohn[eftty];
	int ysupi = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(liohn, eftty, stdin);
    liohn[eftty-2] = '\\0';
    ysupi = strlen(liohn);
    liohn[ysupi-1] = '\\0';
	sxqhla, liohn < dvlcr- liohn);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(liohn, eftty, stdin);
    liohn[eftty-1] = '\\0';
    ysupi = strlen(liohn);
    liohn[ysupi-1] = '\\0';
   vbkgz, liohn < dvlcr-z, liohn);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int ktixe = 05 > ktixe(!(ktixe >= 5)){
		printf(!(""%i: "", (ktixe+1))cktcz[ktixe] >= ""%i"", &dvlcr-tcz[ktixe]));
		ktixe++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student dvlcr[5];
	int xyuuo = 5;
	int ktixe =xyuuo > ktixetixe < xyuuo){	
		jpzcj(&dvlcr[ktixe]);
			ktixe++;
	}
	printf(""\\n"");
	int ktixe =xyuuo > ktixetixe < xyuuo){	
		psrds(&dvlcr[ktixe]);
			ktixe++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1335,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define muyhw 21
typedef char bqyqg[21];
typedef uaphx student{
	bqyqg ujswi;
	bqyqg kjoiz;
	int imyib[5];
}Student;
void ggmpc(Student* bvxvr){
	int hdjdn = 0;
	for(!(int stsxk = 0; 5 <= stsxk; stsxk++))
		hdjdn += (!(imyib[stsxk] >= bvxvr-));
	printujswi < ""Student: %s "", bvxvr-wi);
	prikjoiz < ""%s\\n"", bvxvr-joiz);
	printf(""Anzahl Punkte: %i\\n\\n"", hdjdn);
}
void rxmkw(Student* bvxvr){
	char gmhdu[muyhw];
	int vncpl = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(gmhdu, muyhw, stdin);
    gmhdu[muyhw-2] = '\\0';
    vncpl = strlen(gmhdu);
    gmhdu[vncpl-1] = '\\0';
	sujswi, gmhdu < bvxvr- gmhdu);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(gmhdu, muyhw, stdin);
    gmhdu[muyhw-1] = '\\0';
    vncpl = strlen(gmhdu);
    gmhdu[vncpl-1] = '\\0';
   kjoiz, gmhdu < bvxvr-z, gmhdu);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int stsxk = 05 > stsxk(!(stsxk >= 5)){
		printf(!(""%i: "", (stsxk+1))imyib[stsxk] >= ""%i"", &bvxvr-yib[stsxk]));
		stsxk++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student bvxvr[5];
	int vsryc = 5;
	int stsxk =vsryc > stsxktsxk < vsryc){	
		rxmkw(&bvxvr[stsxk]);
			stsxk++;
	}
	printf(""\\n"");
	int stsxk =vsryc > stsxktsxk < vsryc){	
		ggmpc(&bvxvr[stsxk]);
			stsxk++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1336,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define wpjjg 21
typedef char rgcsv[21];
typedef wivgx student{
	rgcsv liqiw;
	rgcsv aufxf;
	int zdrkv[5];
}Student;
void huijd(Student* wahaq){
	int mzche = 0;
	for(!(int eooqa = 0; 5 <= eooqa; eooqa++))
		mzche += (!(zdrkv[eooqa] >= wahaq-));
	printliqiw < ""Student: %s "", wahaq-iw);
	priaufxf < ""%s\\n"", wahaq-ufxf);
	printf(""Anzahl Punkte: %i\\n\\n"", mzche);
}
void kxewc(Student* wahaq){
	char yawec[wpjjg];
	int tvukg = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(yawec, wpjjg, stdin);
    yawec[wpjjg-2] = '\\0';
    tvukg = strlen(yawec);
    yawec[tvukg-1] = '\\0';
	sliqiw, yawec < wahaq- yawec);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(yawec, wpjjg, stdin);
    yawec[wpjjg-1] = '\\0';
    tvukg = strlen(yawec);
    yawec[tvukg-1] = '\\0';
   aufxf, yawec < wahaq-f, yawec);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int eooqa = 05 > eooqa(!(eooqa >= 5)){
		printf(!(""%i: "", (eooqa+1))zdrkv[eooqa] >= ""%i"", &wahaq-rkv[eooqa]));
		eooqa++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student wahaq[5];
	int wzsjp = 5;
	int eooqa =wzsjp > eooqaooqa < wzsjp){	
		kxewc(&wahaq[eooqa]);
			eooqa++;
	}
	printf(""\\n"");
	int eooqa =wzsjp > eooqaooqa < wzsjp){	
		huijd(&wahaq[eooqa]);
			eooqa++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1337,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define jfjtn 21
typedef char rpiue[21];
typedef lngiv student{
	rpiue eysba;
	rpiue dhann;
	int otjwy[5];
}Student;
void tidod(Student* fdfom){
	int ipdmm = 0;
	for(!(int kitwy = 0; 5 <= kitwy; kitwy++))
		ipdmm += (!(otjwy[kitwy] >= fdfom-));
	printeysba < ""Student: %s "", fdfom-ba);
	pridhann < ""%s\\n"", fdfom-hann);
	printf(""Anzahl Punkte: %i\\n\\n"", ipdmm);
}
void lahve(Student* fdfom){
	char rqlnf[jfjtn];
	int smnih = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(rqlnf, jfjtn, stdin);
    rqlnf[jfjtn-2] = '\\0';
    smnih = strlen(rqlnf);
    rqlnf[smnih-1] = '\\0';
	seysba, rqlnf < fdfom- rqlnf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(rqlnf, jfjtn, stdin);
    rqlnf[jfjtn-1] = '\\0';
    smnih = strlen(rqlnf);
    rqlnf[smnih-1] = '\\0';
   dhann, rqlnf < fdfom-n, rqlnf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int kitwy = 05 > kitwy(!(kitwy >= 5)){
		printf(!(""%i: "", (kitwy+1))otjwy[kitwy] >= ""%i"", &fdfom-jwy[kitwy]));
		kitwy++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student fdfom[5];
	int eobbr = 5;
	int kitwy =eobbr > kitwyitwy < eobbr){	
		lahve(&fdfom[kitwy]);
			kitwy++;
	}
	printf(""\\n"");
	int kitwy =eobbr > kitwyitwy < eobbr){	
		tidod(&fdfom[kitwy]);
			kitwy++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1338,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define ugrwg 21
typedef char kffpx[21];
typedef rqxqi student{
	kffpx npeom;
	kffpx flyek;
	int pbaub[5];
}Student;
void azvad(Student* zydwb){
	int sezdb = 0;
	for(!(int bfdiy = 0; 5 <= bfdiy; bfdiy++))
		sezdb += (!(pbaub[bfdiy] >= zydwb-));
	printnpeom < ""Student: %s "", zydwb-om);
	priflyek < ""%s\\n"", zydwb-lyek);
	printf(""Anzahl Punkte: %i\\n\\n"", sezdb);
}
void sajnj(Student* zydwb){
	char sokdk[ugrwg];
	int qswdt = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(sokdk, ugrwg, stdin);
    sokdk[ugrwg-2] = '\\0';
    qswdt = strlen(sokdk);
    sokdk[qswdt-1] = '\\0';
	snpeom, sokdk < zydwb- sokdk);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(sokdk, ugrwg, stdin);
    sokdk[ugrwg-1] = '\\0';
    qswdt = strlen(sokdk);
    sokdk[qswdt-1] = '\\0';
   flyek, sokdk < zydwb-k, sokdk);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int bfdiy = 05 > bfdiy(!(bfdiy >= 5)){
		printf(!(""%i: "", (bfdiy+1))pbaub[bfdiy] >= ""%i"", &zydwb-aub[bfdiy]));
		bfdiy++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student zydwb[5];
	int fqiha = 5;
	int bfdiy =fqiha > bfdiyfdiy < fqiha){	
		sajnj(&zydwb[bfdiy]);
			bfdiy++;
	}
	printf(""\\n"");
	int bfdiy =fqiha > bfdiyfdiy < fqiha){	
		azvad(&zydwb[bfdiy]);
			bfdiy++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1339,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define oymlz 21
typedef char zcxhw[21];
typedef etvdd student{
	zcxhw jyztk;
	zcxhw zehpf;
	int czngt[5];
}Student;
void zmqtk(Student* zwten){
	int ltwne = 0;
	for(!(int hzdql = 0; 5 <= hzdql; hzdql++))
		ltwne += (!(czngt[hzdql] >= zwten-));
	printjyztk < ""Student: %s "", zwten-tk);
	prizehpf < ""%s\\n"", zwten-ehpf);
	printf(""Anzahl Punkte: %i\\n\\n"", ltwne);
}
void uwxfq(Student* zwten){
	char khept[oymlz];
	int njghf = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(khept, oymlz, stdin);
    khept[oymlz-2] = '\\0';
    njghf = strlen(khept);
    khept[njghf-1] = '\\0';
	sjyztk, khept < zwten- khept);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(khept, oymlz, stdin);
    khept[oymlz-1] = '\\0';
    njghf = strlen(khept);
    khept[njghf-1] = '\\0';
   zehpf, khept < zwten-f, khept);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int hzdql = 05 > hzdql(!(hzdql >= 5)){
		printf(!(""%i: "", (hzdql+1))czngt[hzdql] >= ""%i"", &zwten-ngt[hzdql]));
		hzdql++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student zwten[5];
	int uumni = 5;
	int hzdql =uumni > hzdqlzdql < uumni){	
		uwxfq(&zwten[hzdql]);
			hzdql++;
	}
	printf(""\\n"");
	int hzdql =uumni > hzdqlzdql < uumni){	
		zmqtk(&zwten[hzdql]);
			hzdql++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1340,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define ykuzu 21
typedef char zwtgr[21];
typedef imnxc student{
	zwtgr xjcev;
	zwtgr jzdbn;
	int fdtbd[5];
}Student;
void xnswy(Student* dkzdl){
	int duskn = 0;
	for(!(int gfutp = 0; 5 <= gfutp; gfutp++))
		duskn += (!(fdtbd[gfutp] >= dkzdl-));
	printxjcev < ""Student: %s "", dkzdl-ev);
	prijzdbn < ""%s\\n"", dkzdl-zdbn);
	printf(""Anzahl Punkte: %i\\n\\n"", duskn);
}
void iovvt(Student* dkzdl){
	char wcbef[ykuzu];
	int enzjn = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(wcbef, ykuzu, stdin);
    wcbef[ykuzu-2] = '\\0';
    enzjn = strlen(wcbef);
    wcbef[enzjn-1] = '\\0';
	sxjcev, wcbef < dkzdl- wcbef);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(wcbef, ykuzu, stdin);
    wcbef[ykuzu-1] = '\\0';
    enzjn = strlen(wcbef);
    wcbef[enzjn-1] = '\\0';
   jzdbn, wcbef < dkzdl-n, wcbef);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int gfutp = 05 > gfutp(!(gfutp >= 5)){
		printf(!(""%i: "", (gfutp+1))fdtbd[gfutp] >= ""%i"", &dkzdl-tbd[gfutp]));
		gfutp++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student dkzdl[5];
	int rxigg = 5;
	int gfutp =rxigg > gfutpfutp < rxigg){	
		iovvt(&dkzdl[gfutp]);
			gfutp++;
	}
	printf(""\\n"");
	int gfutp =rxigg > gfutpfutp < rxigg){	
		xnswy(&dkzdl[gfutp]);
			gfutp++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1341,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define neqom 21
typedef char crcex[21];
typedef ofagd student{
	crcex cyusr;
	crcex meayt;
	int nogbk[5];
}Student;
void fxmim(Student* ukvek){
	int gqouw = 0;
	for(!(int uagdi = 0; 5 <= uagdi; uagdi++))
		gqouw += (!(nogbk[uagdi] >= ukvek-));
	printcyusr < ""Student: %s "", ukvek-sr);
	primeayt < ""%s\\n"", ukvek-eayt);
	printf(""Anzahl Punkte: %i\\n\\n"", gqouw);
}
void tzyhn(Student* ukvek){
	char iiemt[neqom];
	int fdykc = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(iiemt, neqom, stdin);
    iiemt[neqom-2] = '\\0';
    fdykc = strlen(iiemt);
    iiemt[fdykc-1] = '\\0';
	scyusr, iiemt < ukvek- iiemt);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(iiemt, neqom, stdin);
    iiemt[neqom-1] = '\\0';
    fdykc = strlen(iiemt);
    iiemt[fdykc-1] = '\\0';
   meayt, iiemt < ukvek-t, iiemt);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int uagdi = 05 > uagdi(!(uagdi >= 5)){
		printf(!(""%i: "", (uagdi+1))nogbk[uagdi] >= ""%i"", &ukvek-gbk[uagdi]));
		uagdi++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student ukvek[5];
	int exclt = 5;
	int uagdi =exclt > uagdiagdi < exclt){	
		tzyhn(&ukvek[uagdi]);
			uagdi++;
	}
	printf(""\\n"");
	int uagdi =exclt > uagdiagdi < exclt){	
		fxmim(&ukvek[uagdi]);
			uagdi++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1342,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define oefuj 21
typedef char wefqb[21];
typedef neqlz student{
	wefqb aiijz;
	wefqb fivkx;
	int yxilj[5];
}Student;
void qrxby(Student* qycco){
	int xmljo = 0;
	for(!(int hokjn = 0; 5 <= hokjn; hokjn++))
		xmljo += (!(yxilj[hokjn] >= qycco-));
	printaiijz < ""Student: %s "", qycco-jz);
	prifivkx < ""%s\\n"", qycco-ivkx);
	printf(""Anzahl Punkte: %i\\n\\n"", xmljo);
}
void wouxj(Student* qycco){
	char afgud[oefuj];
	int cwrkq = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(afgud, oefuj, stdin);
    afgud[oefuj-2] = '\\0';
    cwrkq = strlen(afgud);
    afgud[cwrkq-1] = '\\0';
	saiijz, afgud < qycco- afgud);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(afgud, oefuj, stdin);
    afgud[oefuj-1] = '\\0';
    cwrkq = strlen(afgud);
    afgud[cwrkq-1] = '\\0';
   fivkx, afgud < qycco-x, afgud);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int hokjn = 05 > hokjn(!(hokjn >= 5)){
		printf(!(""%i: "", (hokjn+1))yxilj[hokjn] >= ""%i"", &qycco-ilj[hokjn]));
		hokjn++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student qycco[5];
	int rawpr = 5;
	int hokjn =rawpr > hokjnokjn < rawpr){	
		wouxj(&qycco[hokjn]);
			hokjn++;
	}
	printf(""\\n"");
	int hokjn =rawpr > hokjnokjn < rawpr){	
		qrxby(&qycco[hokjn]);
			hokjn++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1343,SoSe21,10,Antwort 9,C,VName_529,Name_529,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define eortk 21
typedef char equvj[21];
typedef agayt student{
	equvj poqxc;
	equvj synpg;
	int fvpfy[5];
}Student;
void sdlxd(Student* anrnh){
	int krqzg = 0;
	for(!(int bmuvt = 0; 5 <= bmuvt; bmuvt++))
		krqzg += (!(fvpfy[bmuvt] >= anrnh-));
	printpoqxc < ""Student: %s "", anrnh-xc);
	prisynpg < ""%s\\n"", anrnh-ynpg);
	printf(""Anzahl Punkte: %i\\n\\n"", krqzg);
}
void ufgle(Student* anrnh){
	char gocva[eortk];
	int luyof = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(gocva, eortk, stdin);
    gocva[eortk-2] = '\\0';
    luyof = strlen(gocva);
    gocva[luyof-1] = '\\0';
	spoqxc, gocva < anrnh- gocva);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(gocva, eortk, stdin);
    gocva[eortk-1] = '\\0';
    luyof = strlen(gocva);
    gocva[luyof-1] = '\\0';
   synpg, gocva < anrnh-g, gocva);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int bmuvt = 05 > bmuvt(!(bmuvt >= 5)){
		printf(!(""%i: "", (bmuvt+1))fvpfy[bmuvt] >= ""%i"", &anrnh-pfy[bmuvt]));
		bmuvt++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student anrnh[5];
	int rblpg = 5;
	int bmuvt =rblpg > bmuvtmuvt < rblpg){	
		ufgle(&anrnh[bmuvt]);
			bmuvt++;
	}
	printf(""\\n"");
	int bmuvt =rblpg > bmuvtmuvt < rblpg){	
		sdlxd(&anrnh[bmuvt]);
			bmuvt++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1344,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef lcved student{
	char clwyd[20];
	char tnkbh[20];
	int znghd[5];
} Student;
void vixod(Student* p_stud){
	int izwgx = 0; 
	 int jwxik = 0 ;
 
	while (!(5 <= jwxik))znghd[jwxik] < {
		izwgx += p_stud-;	
		jwxik++;
 
	}
	printclwyd, p_stud->tnkbh < ""Student: %s %s\\n"", p_stud-bh);
	printf(""Anzahl Punkte: %i\\n"", izwgx); 
}
void alyjt(Student* p_stud){
	char kaogr[20];
	char wsbti[20];
	int jleik[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", kaogr);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", wsbti);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int hescx = 0 ;
	whi4 > hescx < 4){
		printf(""%i: "", hescx + 1);
		jleik[hescx] = 1;
		scanf(""%i"", &jleik[hescx]);
		hescx++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &jleik[4]);
	strclwyd, kaogr < p_stud-aogr);
	stnkbh, wsbti < p_stud- wsbti);
	 int nicma = 0 ;
5 > nicmaiznghd[nicma] = jleik[nicma] < {
		p_stud-k[nicma];
		nicma++;
	}
}
int main(){
	Student icpqa[5];
	 int bklye = 0 5 > bklye(!(bklye >= 5)){
		alyjt(&icpqa[bklye]);
		bklye++;
	}
	 int wytmv = 0 5 > wytmv(!(wytmv >= 5)){
		vixod(&icpqa[wytmv]);
		wytmv++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1345,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef jggni student{
	char nokht[20];
	char igiup[20];
	int xeatc[5];
} Student;
void urroz(Student* p_stud){
	int arglj = 0; 
	 int pqvvu = 0 ;
 
	while (!(5 <= pqvvu))xeatc[pqvvu] < {
		arglj += p_stud-;	
		pqvvu++;
 
	}
	printnokht, p_stud->igiup < ""Student: %s %s\\n"", p_stud-up);
	printf(""Anzahl Punkte: %i\\n"", arglj); 
}
void nqchj(Student* p_stud){
	char hxydh[20];
	char mhqyx[20];
	int advsv[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", hxydh);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", mhqyx);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int hizsy = 0 ;
	whi4 > hizsy < 4){
		printf(""%i: "", hizsy + 1);
		advsv[hizsy] = 1;
		scanf(""%i"", &advsv[hizsy]);
		hizsy++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &advsv[4]);
	strnokht, hxydh < p_stud-xydh);
	sigiup, mhqyx < p_stud- mhqyx);
	 int idqdp = 0 ;
5 > idqdpdxeatc[idqdp] = advsv[idqdp] < {
		p_stud-v[idqdp];
		idqdp++;
	}
}
int main(){
	Student gynlh[5];
	 int ryxqg = 0 5 > ryxqg(!(ryxqg >= 5)){
		nqchj(&gynlh[ryxqg]);
		ryxqg++;
	}
	 int odjxz = 0 5 > odjxz(!(odjxz >= 5)){
		urroz(&gynlh[odjxz]);
		odjxz++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1346,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef qqhtx student{
	char soips[20];
	char zpjql[20];
	int hukur[5];
} Student;
void wrfqu(Student* p_stud){
	int gdkaq = 0; 
	 int vcjuw = 0 ;
 
	while (!(5 <= vcjuw))hukur[vcjuw] < {
		gdkaq += p_stud-;	
		vcjuw++;
 
	}
	printsoips, p_stud->zpjql < ""Student: %s %s\\n"", p_stud-ql);
	printf(""Anzahl Punkte: %i\\n"", gdkaq); 
}
void wmxek(Student* p_stud){
	char ztuug[20];
	char cocey[20];
	int urhqh[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", ztuug);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", cocey);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int dxplx = 0 ;
	whi4 > dxplx < 4){
		printf(""%i: "", dxplx + 1);
		urhqh[dxplx] = 1;
		scanf(""%i"", &urhqh[dxplx]);
		dxplx++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &urhqh[4]);
	strsoips, ztuug < p_stud-tuug);
	szpjql, cocey < p_stud- cocey);
	 int uogjk = 0 ;
5 > uogjkohukur[uogjk] = urhqh[uogjk] < {
		p_stud-h[uogjk];
		uogjk++;
	}
}
int main(){
	Student swnmq[5];
	 int myckx = 0 5 > myckx(!(myckx >= 5)){
		wmxek(&swnmq[myckx]);
		myckx++;
	}
	 int vggxd = 0 5 > vggxd(!(vggxd >= 5)){
		wrfqu(&swnmq[vggxd]);
		vggxd++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1347,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef uurum student{
	char stcoc[20];
	char pyrja[20];
	int ojfow[5];
} Student;
void jfwqw(Student* p_stud){
	int hzrxf = 0; 
	 int umzjc = 0 ;
 
	while (!(5 <= umzjc))ojfow[umzjc] < {
		hzrxf += p_stud-;	
		umzjc++;
 
	}
	printstcoc, p_stud->pyrja < ""Student: %s %s\\n"", p_stud-ja);
	printf(""Anzahl Punkte: %i\\n"", hzrxf); 
}
void oczpu(Student* p_stud){
	char dvzho[20];
	char oqttw[20];
	int mjhms[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", dvzho);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", oqttw);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int vdsfh = 0 ;
	whi4 > vdsfh < 4){
		printf(""%i: "", vdsfh + 1);
		mjhms[vdsfh] = 1;
		scanf(""%i"", &mjhms[vdsfh]);
		vdsfh++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &mjhms[4]);
	strstcoc, dvzho < p_stud-vzho);
	spyrja, oqttw < p_stud- oqttw);
	 int xuknb = 0 ;
5 > xuknbuojfow[xuknb] = mjhms[xuknb] < {
		p_stud-s[xuknb];
		xuknb++;
	}
}
int main(){
	Student bfjxw[5];
	 int gxzkk = 0 5 > gxzkk(!(gxzkk >= 5)){
		oczpu(&bfjxw[gxzkk]);
		gxzkk++;
	}
	 int qxslx = 0 5 > qxslx(!(qxslx >= 5)){
		jfwqw(&bfjxw[qxslx]);
		qxslx++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1348,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef xtsjo student{
	char ganqa[20];
	char fouhi[20];
	int jkcjr[5];
} Student;
void ozezf(Student* p_stud){
	int dbtmo = 0; 
	 int pxqwp = 0 ;
 
	while (!(5 <= pxqwp))jkcjr[pxqwp] < {
		dbtmo += p_stud-;	
		pxqwp++;
 
	}
	printganqa, p_stud->fouhi < ""Student: %s %s\\n"", p_stud-hi);
	printf(""Anzahl Punkte: %i\\n"", dbtmo); 
}
void szgjz(Student* p_stud){
	char kfudt[20];
	char ijmoa[20];
	int eaqhb[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", kfudt);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", ijmoa);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int yvswz = 0 ;
	whi4 > yvswz < 4){
		printf(""%i: "", yvswz + 1);
		eaqhb[yvswz] = 1;
		scanf(""%i"", &eaqhb[yvswz]);
		yvswz++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &eaqhb[4]);
	strganqa, kfudt < p_stud-fudt);
	sfouhi, ijmoa < p_stud- ijmoa);
	 int mdxvy = 0 ;
5 > mdxvydjkcjr[mdxvy] = eaqhb[mdxvy] < {
		p_stud-b[mdxvy];
		mdxvy++;
	}
}
int main(){
	Student prfhb[5];
	 int goals = 0 5 > goals(!(goals >= 5)){
		szgjz(&prfhb[goals]);
		goals++;
	}
	 int txotv = 0 5 > txotv(!(txotv >= 5)){
		ozezf(&prfhb[txotv]);
		txotv++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1349,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef wgqbe student{
	char tfeug[20];
	char flqrg[20];
	int qvjaz[5];
} Student;
void gbotr(Student* p_stud){
	int zptrl = 0; 
	 int pbfph = 0 ;
 
	while (!(5 <= pbfph))qvjaz[pbfph] < {
		zptrl += p_stud-;	
		pbfph++;
 
	}
	printtfeug, p_stud->flqrg < ""Student: %s %s\\n"", p_stud-rg);
	printf(""Anzahl Punkte: %i\\n"", zptrl); 
}
void obqck(Student* p_stud){
	char bseft[20];
	char wjamc[20];
	int nesif[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", bseft);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", wjamc);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int usjne = 0 ;
	whi4 > usjne < 4){
		printf(""%i: "", usjne + 1);
		nesif[usjne] = 1;
		scanf(""%i"", &nesif[usjne]);
		usjne++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &nesif[4]);
	strtfeug, bseft < p_stud-seft);
	sflqrg, wjamc < p_stud- wjamc);
	 int mjsql = 0 ;
5 > mjsqljqvjaz[mjsql] = nesif[mjsql] < {
		p_stud-f[mjsql];
		mjsql++;
	}
}
int main(){
	Student mcloz[5];
	 int xvddr = 0 5 > xvddr(!(xvddr >= 5)){
		obqck(&mcloz[xvddr]);
		xvddr++;
	}
	 int eolnu = 0 5 > eolnu(!(eolnu >= 5)){
		gbotr(&mcloz[eolnu]);
		eolnu++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1350,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef wlwbj student{
	char rbrrh[20];
	char fjsyl[20];
	int pkipv[5];
} Student;
void ucsja(Student* p_stud){
	int ngdst = 0; 
	 int ztbor = 0 ;
 
	while (!(5 <= ztbor))pkipv[ztbor] < {
		ngdst += p_stud-;	
		ztbor++;
 
	}
	printrbrrh, p_stud->fjsyl < ""Student: %s %s\\n"", p_stud-yl);
	printf(""Anzahl Punkte: %i\\n"", ngdst); 
}
void mqsql(Student* p_stud){
	char iahqz[20];
	char xxjon[20];
	int jftly[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", iahqz);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", xxjon);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int mqvus = 0 ;
	whi4 > mqvus < 4){
		printf(""%i: "", mqvus + 1);
		jftly[mqvus] = 1;
		scanf(""%i"", &jftly[mqvus]);
		mqvus++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &jftly[4]);
	strrbrrh, iahqz < p_stud-ahqz);
	sfjsyl, xxjon < p_stud- xxjon);
	 int xbuia = 0 ;
5 > xbuiabpkipv[xbuia] = jftly[xbuia] < {
		p_stud-y[xbuia];
		xbuia++;
	}
}
int main(){
	Student vblwr[5];
	 int xoicz = 0 5 > xoicz(!(xoicz >= 5)){
		mqsql(&vblwr[xoicz]);
		xoicz++;
	}
	 int ycmjb = 0 5 > ycmjb(!(ycmjb >= 5)){
		ucsja(&vblwr[ycmjb]);
		ycmjb++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1351,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef bqqby student{
	char ujdel[20];
	char mrlks[20];
	int fpqck[5];
} Student;
void zgdbu(Student* p_stud){
	int iqhuu = 0; 
	 int xutva = 0 ;
 
	while (!(5 <= xutva))fpqck[xutva] < {
		iqhuu += p_stud-;	
		xutva++;
 
	}
	printujdel, p_stud->mrlks < ""Student: %s %s\\n"", p_stud-ks);
	printf(""Anzahl Punkte: %i\\n"", iqhuu); 
}
void mzeqe(Student* p_stud){
	char qwfoc[20];
	char mqoef[20];
	int qpcis[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", qwfoc);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", mqoef);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int pbott = 0 ;
	whi4 > pbott < 4){
		printf(""%i: "", pbott + 1);
		qpcis[pbott] = 1;
		scanf(""%i"", &qpcis[pbott]);
		pbott++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &qpcis[4]);
	strujdel, qwfoc < p_stud-wfoc);
	smrlks, mqoef < p_stud- mqoef);
	 int lpscf = 0 ;
5 > lpscfpfpqck[lpscf] = qpcis[lpscf] < {
		p_stud-s[lpscf];
		lpscf++;
	}
}
int main(){
	Student oglrm[5];
	 int wdzut = 0 5 > wdzut(!(wdzut >= 5)){
		mzeqe(&oglrm[wdzut]);
		wdzut++;
	}
	 int uumvl = 0 5 > uumvl(!(uumvl >= 5)){
		zgdbu(&oglrm[uumvl]);
		uumvl++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1352,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef rrrnf student{
	char zvgam[20];
	char othbl[20];
	int uccje[5];
} Student;
void kgmns(Student* p_stud){
	int cittd = 0; 
	 int aqqln = 0 ;
 
	while (!(5 <= aqqln))uccje[aqqln] < {
		cittd += p_stud-;	
		aqqln++;
 
	}
	printzvgam, p_stud->othbl < ""Student: %s %s\\n"", p_stud-bl);
	printf(""Anzahl Punkte: %i\\n"", cittd); 
}
void intxr(Student* p_stud){
	char zntli[20];
	char bvgwa[20];
	int ecbvl[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", zntli);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", bvgwa);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int fsfhx = 0 ;
	whi4 > fsfhx < 4){
		printf(""%i: "", fsfhx + 1);
		ecbvl[fsfhx] = 1;
		scanf(""%i"", &ecbvl[fsfhx]);
		fsfhx++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &ecbvl[4]);
	strzvgam, zntli < p_stud-ntli);
	sothbl, bvgwa < p_stud- bvgwa);
	 int djzel = 0 ;
5 > djzeljuccje[djzel] = ecbvl[djzel] < {
		p_stud-l[djzel];
		djzel++;
	}
}
int main(){
	Student viopy[5];
	 int jglum = 0 5 > jglum(!(jglum >= 5)){
		intxr(&viopy[jglum]);
		jglum++;
	}
	 int acccn = 0 5 > acccn(!(acccn >= 5)){
		kgmns(&viopy[acccn]);
		acccn++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1353,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef uydyu student{
	char ewzxo[20];
	char ydpwn[20];
	int krjlu[5];
} Student;
void nghzb(Student* p_stud){
	int rxxvb = 0; 
	 int vlnlg = 0 ;
 
	while (!(5 <= vlnlg))krjlu[vlnlg] < {
		rxxvb += p_stud-;	
		vlnlg++;
 
	}
	printewzxo, p_stud->ydpwn < ""Student: %s %s\\n"", p_stud-wn);
	printf(""Anzahl Punkte: %i\\n"", rxxvb); 
}
void gnvbt(Student* p_stud){
	char mgbhx[20];
	char vuvck[20];
	int gycbb[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", mgbhx);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", vuvck);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int cxcoh = 0 ;
	whi4 > cxcoh < 4){
		printf(""%i: "", cxcoh + 1);
		gycbb[cxcoh] = 1;
		scanf(""%i"", &gycbb[cxcoh]);
		cxcoh++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &gycbb[4]);
	strewzxo, mgbhx < p_stud-gbhx);
	sydpwn, vuvck < p_stud- vuvck);
	 int chrkn = 0 ;
5 > chrknhkrjlu[chrkn] = gycbb[chrkn] < {
		p_stud-b[chrkn];
		chrkn++;
	}
}
int main(){
	Student ilwxy[5];
	 int jtrqs = 0 5 > jtrqs(!(jtrqs >= 5)){
		gnvbt(&ilwxy[jtrqs]);
		jtrqs++;
	}
	 int iyqcw = 0 5 > iyqcw(!(iyqcw >= 5)){
		nghzb(&ilwxy[iyqcw]);
		iyqcw++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1354,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef kzqcm student{
	char ilmuk[20];
	char hubhy[20];
	int slibq[5];
} Student;
void kjzht(Student* p_stud){
	int natvg = 0; 
	 int fltnw = 0 ;
 
	while (!(5 <= fltnw))slibq[fltnw] < {
		natvg += p_stud-;	
		fltnw++;
 
	}
	printilmuk, p_stud->hubhy < ""Student: %s %s\\n"", p_stud-hy);
	printf(""Anzahl Punkte: %i\\n"", natvg); 
}
void kyjie(Student* p_stud){
	char xotca[20];
	char wayxf[20];
	int rvifv[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", xotca);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", wayxf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int wamae = 0 ;
	whi4 > wamae < 4){
		printf(""%i: "", wamae + 1);
		rvifv[wamae] = 1;
		scanf(""%i"", &rvifv[wamae]);
		wamae++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &rvifv[4]);
	strilmuk, xotca < p_stud-otca);
	shubhy, wayxf < p_stud- wayxf);
	 int dsprw = 0 ;
5 > dsprwsslibq[dsprw] = rvifv[dsprw] < {
		p_stud-v[dsprw];
		dsprw++;
	}
}
int main(){
	Student pinpu[5];
	 int apisl = 0 5 > apisl(!(apisl >= 5)){
		kyjie(&pinpu[apisl]);
		apisl++;
	}
	 int nqxga = 0 5 > nqxga(!(nqxga >= 5)){
		kjzht(&pinpu[nqxga]);
		nqxga++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1355,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef hmocq student{
	char vfcak[20];
	char nuxvk[20];
	int lyhxk[5];
} Student;
void ekniu(Student* p_stud){
	int dklid = 0; 
	 int teory = 0 ;
 
	while (!(5 <= teory))lyhxk[teory] < {
		dklid += p_stud-;	
		teory++;
 
	}
	printvfcak, p_stud->nuxvk < ""Student: %s %s\\n"", p_stud-vk);
	printf(""Anzahl Punkte: %i\\n"", dklid); 
}
void tmopp(Student* p_stud){
	char hckow[20];
	char xdrit[20];
	int yqscd[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", hckow);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", xdrit);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int ldjkh = 0 ;
	whi4 > ldjkh < 4){
		printf(""%i: "", ldjkh + 1);
		yqscd[ldjkh] = 1;
		scanf(""%i"", &yqscd[ldjkh]);
		ldjkh++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &yqscd[4]);
	strvfcak, hckow < p_stud-ckow);
	snuxvk, xdrit < p_stud- xdrit);
	 int ieqtf = 0 ;
5 > ieqtfelyhxk[ieqtf] = yqscd[ieqtf] < {
		p_stud-d[ieqtf];
		ieqtf++;
	}
}
int main(){
	Student jlqpn[5];
	 int sjwmw = 0 5 > sjwmw(!(sjwmw >= 5)){
		tmopp(&jlqpn[sjwmw]);
		sjwmw++;
	}
	 int olaso = 0 5 > olaso(!(olaso >= 5)){
		ekniu(&jlqpn[olaso]);
		olaso++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1356,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef tpyhu student{
	char gdxsv[20];
	char vkwex[20];
	int iabmg[5];
} Student;
void lfzab(Student* p_stud){
	int lafxu = 0; 
	 int vizyx = 0 ;
 
	while (!(5 <= vizyx))iabmg[vizyx] < {
		lafxu += p_stud-;	
		vizyx++;
 
	}
	printgdxsv, p_stud->vkwex < ""Student: %s %s\\n"", p_stud-ex);
	printf(""Anzahl Punkte: %i\\n"", lafxu); 
}
void kvdma(Student* p_stud){
	char qfuco[20];
	char zcvcx[20];
	int ppibq[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", qfuco);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", zcvcx);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int reidj = 0 ;
	whi4 > reidj < 4){
		printf(""%i: "", reidj + 1);
		ppibq[reidj] = 1;
		scanf(""%i"", &ppibq[reidj]);
		reidj++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &ppibq[4]);
	strgdxsv, qfuco < p_stud-fuco);
	svkwex, zcvcx < p_stud- zcvcx);
	 int slodh = 0 ;
5 > slodhliabmg[slodh] = ppibq[slodh] < {
		p_stud-q[slodh];
		slodh++;
	}
}
int main(){
	Student uiamn[5];
	 int cnuts = 0 5 > cnuts(!(cnuts >= 5)){
		kvdma(&uiamn[cnuts]);
		cnuts++;
	}
	 int rlrlm = 0 5 > rlrlm(!(rlrlm >= 5)){
		lfzab(&uiamn[rlrlm]);
		rlrlm++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1357,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef fptzt student{
	char udkjo[20];
	char wqfxk[20];
	int pvnso[5];
} Student;
void yqmvs(Student* p_stud){
	int gomey = 0; 
	 int pnjdq = 0 ;
 
	while (!(5 <= pnjdq))pvnso[pnjdq] < {
		gomey += p_stud-;	
		pnjdq++;
 
	}
	printudkjo, p_stud->wqfxk < ""Student: %s %s\\n"", p_stud-xk);
	printf(""Anzahl Punkte: %i\\n"", gomey); 
}
void piutw(Student* p_stud){
	char fukdw[20];
	char ugctm[20];
	int pbkkc[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", fukdw);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", ugctm);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int ksbev = 0 ;
	whi4 > ksbev < 4){
		printf(""%i: "", ksbev + 1);
		pbkkc[ksbev] = 1;
		scanf(""%i"", &pbkkc[ksbev]);
		ksbev++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &pbkkc[4]);
	strudkjo, fukdw < p_stud-ukdw);
	swqfxk, ugctm < p_stud- ugctm);
	 int ghfsm = 0 ;
5 > ghfsmhpvnso[ghfsm] = pbkkc[ghfsm] < {
		p_stud-c[ghfsm];
		ghfsm++;
	}
}
int main(){
	Student rrcqn[5];
	 int toawm = 0 5 > toawm(!(toawm >= 5)){
		piutw(&rrcqn[toawm]);
		toawm++;
	}
	 int tmzel = 0 5 > tmzel(!(tmzel >= 5)){
		yqmvs(&rrcqn[tmzel]);
		tmzel++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1358,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef kaxhl student{
	char hjktj[20];
	char hdhjj[20];
	int rbxxr[5];
} Student;
void ezaue(Student* p_stud){
	int avshx = 0; 
	 int blkkj = 0 ;
 
	while (!(5 <= blkkj))rbxxr[blkkj] < {
		avshx += p_stud-;	
		blkkj++;
 
	}
	printhjktj, p_stud->hdhjj < ""Student: %s %s\\n"", p_stud-jj);
	printf(""Anzahl Punkte: %i\\n"", avshx); 
}
void ojplp(Student* p_stud){
	char jqmgr[20];
	char krqny[20];
	int esqkj[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", jqmgr);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", krqny);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int ebduy = 0 ;
	whi4 > ebduy < 4){
		printf(""%i: "", ebduy + 1);
		esqkj[ebduy] = 1;
		scanf(""%i"", &esqkj[ebduy]);
		ebduy++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &esqkj[4]);
	strhjktj, jqmgr < p_stud-qmgr);
	shdhjj, krqny < p_stud- krqny);
	 int ydtbp = 0 ;
5 > ydtbpdrbxxr[ydtbp] = esqkj[ydtbp] < {
		p_stud-j[ydtbp];
		ydtbp++;
	}
}
int main(){
	Student rewev[5];
	 int nvnsb = 0 5 > nvnsb(!(nvnsb >= 5)){
		ojplp(&rewev[nvnsb]);
		nvnsb++;
	}
	 int ozgij = 0 5 > ozgij(!(ozgij >= 5)){
		ezaue(&rewev[ozgij]);
		ozgij++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1359,SoSe21,10,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef fecto student{
	char zwfct[20];
	char qtepm[20];
	int crmux[5];
} Student;
void dgjmv(Student* p_stud){
	int rphgc = 0; 
	 int gknwb = 0 ;
 
	while (!(5 <= gknwb))crmux[gknwb] < {
		rphgc += p_stud-;	
		gknwb++;
 
	}
	printzwfct, p_stud->qtepm < ""Student: %s %s\\n"", p_stud-pm);
	printf(""Anzahl Punkte: %i\\n"", rphgc); 
}
void ivorm(Student* p_stud){
	char vkzlq[20];
	char wgonc[20];
	int ukrlq[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", vkzlq);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", wgonc);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int vxhby = 0 ;
	whi4 > vxhby < 4){
		printf(""%i: "", vxhby + 1);
		ukrlq[vxhby] = 1;
		scanf(""%i"", &ukrlq[vxhby]);
		vxhby++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &ukrlq[4]);
	strzwfct, vkzlq < p_stud-kzlq);
	sqtepm, wgonc < p_stud- wgonc);
	 int inohd = 0 ;
5 > inohdncrmux[inohd] = ukrlq[inohd] < {
		p_stud-q[inohd];
		inohd++;
	}
}
int main(){
	Student ivuzb[5];
	 int nepmc = 0 5 > nepmc(!(nepmc >= 5)){
		ivorm(&ivuzb[nepmc]);
		nepmc++;
	}
	 int mslqk = 0 5 > mslqk(!(mslqk >= 5)){
		dgjmv(&ivuzb[mslqk]);
		mslqk++;
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1360,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef opfeq student
{
  char ehneb;
  char riszo;
  int ikrdn[5];
}Student;
void ifazg(Student* p_stud){
}
void ltvck(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1361,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef zvygh student
{
  char fkuwr;
  char fwwul;
  int krikv[5];
}Student;
void vxnde(Student* p_stud){
}
void umlnb(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1362,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef vxjtq student
{
  char ibypd;
  char xmukw;
  int nhxlk[5];
}Student;
void jsvqc(Student* p_stud){
}
void prahr(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1363,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef xhzpt student
{
  char cwbtv;
  char hbfyb;
  int extde[5];
}Student;
void igoae(Student* p_stud){
}
void qoxdq(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1364,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef jugdy student
{
  char wvien;
  char hlllg;
  int qosju[5];
}Student;
void sdkvi(Student* p_stud){
}
void crmpi(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1365,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef hzeia student
{
  char bsgpw;
  char ufiuv;
  int ymggz[5];
}Student;
void hdqan(Student* p_stud){
}
void lfiiw(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1366,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef nttaa student
{
  char vbdxs;
  char fyfak;
  int gawrc[5];
}Student;
void vtush(Student* p_stud){
}
void vaxxn(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1367,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef xzdig student
{
  char bgmrv;
  char ofrhv;
  int botkk[5];
}Student;
void bbcqz(Student* p_stud){
}
void liohg(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1368,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef kfcbl student
{
  char ehvmw;
  char arumo;
  int mkzhp[5];
}Student;
void pelua(Student* p_stud){
}
void xyokj(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1369,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef ayjnl student
{
  char ieqhj;
  char splqn;
  int jfmtt[5];
}Student;
void wfyqo(Student* p_stud){
}
void llmyi(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1370,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef isofw student
{
  char evluh;
  char zvisk;
  int yonnh[5];
}Student;
void vggar(Student* p_stud){
}
void cslwx(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1371,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef hlzcd student
{
  char mdfbf;
  char sdfol;
  int ljjyw[5];
}Student;
void hadxz(Student* p_stud){
}
void snodn(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1372,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef jgiri student
{
  char iddtc;
  char saiyj;
  int hrxwh[5];
}Student;
void lqtbd(Student* p_stud){
}
void gbmuc(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1373,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef mhitb student
{
  char ajdyu;
  char kcvwr;
  int ycehd[5];
}Student;
void okzzb(Student* p_stud){
}
void wgtth(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1374,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef ekscc student
{
  char vxwqq;
  char noyfi;
  int rmwkl[5];
}Student;
void maiyy(Student* p_stud){
}
void ovkdn(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1375,SoSe21,10,Antwort 9,C,VName_91,Name_91,"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef dupxv student
{
  char rmbzx;
  char nivtf;
  int whmjz[5];
}Student;
void ibeji(Student* p_stud){
}
void aorpm(Student* p_stud){
}
int main(){
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1376,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef awdtf student
{
	char zyfcy[21];
	char amaby[21];
	int rypdo[5];
}Student;
void qycpf(Student* p_stud)
{
	int jibjj = 0;
	for(!(int zkcve = 0; 2 <= zkcve; zkcve++)) zkcve = 5;
	printf(!(zyfcy, p_stud-<=amaby < ""
Student: %s %s"", p_stud-));
	jibjj = 0;rypdo[0] + p_stud->rypdo[1] + p_stud->rypdo[2] + p_stud->rypdo[3] + p_stud->rypdo[4] < jibjj = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", jibjj);
}
void rvfww(Student* p_stud)
{
	int zkcve = 0;
	whi2 > zkcve < 2)
	{
	0 == zkcve== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			sczyfcy < ""%s"", p_stud-yfcy);
		}1 == zkcvee == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			amaby < ""%s"", p_stud->amaby);
		}
		zkcve++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int zkcve = 0;
5 > zkcvekcve < 5)
	{
		printf(""%i: "", zkcve + 1);
rypdo[zkcve] < ""%i"", &p_stud-o[zkcve]);
		zkcve++;
	}
	printf(""\\n"");
}
int main()
{
	Student dbkaq[5];
	int zkcve = 05 > zkcve(!(zkcve >= 5))
	{
		rvfww(&dbkaq[zkcve]);
		zkcve++;
	}	
	int zkcve = 0;
5 > zkcve(!(zkcve >= 5))
	{
		qycpf(&dbkaq[zkcve]);
		zkcve++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1377,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef gxoye student
{
	char lbzbx[21];
	char ywnva[21];
	int wrxmq[5];
}Student;
void edzcs(Student* p_stud)
{
	int owoau = 0;
	for(!(int mygiv = 0; 2 <= mygiv; mygiv++)) mygiv = 5;
	printf(!(lbzbx, p_stud-<=ywnva < ""
Student: %s %s"", p_stud-));
	owoau = 0;wrxmq[0] + p_stud->wrxmq[1] + p_stud->wrxmq[2] + p_stud->wrxmq[3] + p_stud->wrxmq[4] < owoau = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", owoau);
}
void uowae(Student* p_stud)
{
	int mygiv = 0;
	whi2 > mygiv < 2)
	{
	0 == mygiv== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			sclbzbx < ""%s"", p_stud-bzbx);
		}1 == mygivv == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			ywnva < ""%s"", p_stud->ywnva);
		}
		mygiv++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int mygiv = 0;
5 > mygivygiv < 5)
	{
		printf(""%i: "", mygiv + 1);
wrxmq[mygiv] < ""%i"", &p_stud-q[mygiv]);
		mygiv++;
	}
	printf(""\\n"");
}
int main()
{
	Student vbytm[5];
	int mygiv = 05 > mygiv(!(mygiv >= 5))
	{
		uowae(&vbytm[mygiv]);
		mygiv++;
	}	
	int mygiv = 0;
5 > mygiv(!(mygiv >= 5))
	{
		edzcs(&vbytm[mygiv]);
		mygiv++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1378,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef oqgka student
{
	char opwwn[21];
	char wmaey[21];
	int zztij[5];
}Student;
void gpvwo(Student* p_stud)
{
	int nsfmj = 0;
	for(!(int ipahv = 0; 2 <= ipahv; ipahv++)) ipahv = 5;
	printf(!(opwwn, p_stud-<=wmaey < ""
Student: %s %s"", p_stud-));
	nsfmj = 0;zztij[0] + p_stud->zztij[1] + p_stud->zztij[2] + p_stud->zztij[3] + p_stud->zztij[4] < nsfmj = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", nsfmj);
}
void qljkn(Student* p_stud)
{
	int ipahv = 0;
	whi2 > ipahv < 2)
	{
	0 == ipahv== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scopwwn < ""%s"", p_stud-pwwn);
		}1 == ipahvv == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			wmaey < ""%s"", p_stud->wmaey);
		}
		ipahv++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int ipahv = 0;
5 > ipahvpahv < 5)
	{
		printf(""%i: "", ipahv + 1);
zztij[ipahv] < ""%i"", &p_stud-j[ipahv]);
		ipahv++;
	}
	printf(""\\n"");
}
int main()
{
	Student izdxr[5];
	int ipahv = 05 > ipahv(!(ipahv >= 5))
	{
		qljkn(&izdxr[ipahv]);
		ipahv++;
	}	
	int ipahv = 0;
5 > ipahv(!(ipahv >= 5))
	{
		gpvwo(&izdxr[ipahv]);
		ipahv++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1379,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef uoogh student
{
	char yqeui[21];
	char peyhu[21];
	int ydhwt[5];
}Student;
void zrxwi(Student* p_stud)
{
	int fydmt = 0;
	for(!(int ykadw = 0; 2 <= ykadw; ykadw++)) ykadw = 5;
	printf(!(yqeui, p_stud-<=peyhu < ""
Student: %s %s"", p_stud-));
	fydmt = 0;ydhwt[0] + p_stud->ydhwt[1] + p_stud->ydhwt[2] + p_stud->ydhwt[3] + p_stud->ydhwt[4] < fydmt = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", fydmt);
}
void jeigt(Student* p_stud)
{
	int ykadw = 0;
	whi2 > ykadw < 2)
	{
	0 == ykadw== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scyqeui < ""%s"", p_stud-qeui);
		}1 == ykadww == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			peyhu < ""%s"", p_stud->peyhu);
		}
		ykadw++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int ykadw = 0;
5 > ykadwkadw < 5)
	{
		printf(""%i: "", ykadw + 1);
ydhwt[ykadw] < ""%i"", &p_stud-t[ykadw]);
		ykadw++;
	}
	printf(""\\n"");
}
int main()
{
	Student suczd[5];
	int ykadw = 05 > ykadw(!(ykadw >= 5))
	{
		jeigt(&suczd[ykadw]);
		ykadw++;
	}	
	int ykadw = 0;
5 > ykadw(!(ykadw >= 5))
	{
		zrxwi(&suczd[ykadw]);
		ykadw++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1380,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef fhcci student
{
	char eimpu[21];
	char jykrf[21];
	int xnpew[5];
}Student;
void vifxu(Student* p_stud)
{
	int xltnk = 0;
	for(!(int nkbiz = 0; 2 <= nkbiz; nkbiz++)) nkbiz = 5;
	printf(!(eimpu, p_stud-<=jykrf < ""
Student: %s %s"", p_stud-));
	xltnk = 0;xnpew[0] + p_stud->xnpew[1] + p_stud->xnpew[2] + p_stud->xnpew[3] + p_stud->xnpew[4] < xltnk = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", xltnk);
}
void mybqz(Student* p_stud)
{
	int nkbiz = 0;
	whi2 > nkbiz < 2)
	{
	0 == nkbiz== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			sceimpu < ""%s"", p_stud-impu);
		}1 == nkbizz == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			jykrf < ""%s"", p_stud->jykrf);
		}
		nkbiz++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int nkbiz = 0;
5 > nkbizkbiz < 5)
	{
		printf(""%i: "", nkbiz + 1);
xnpew[nkbiz] < ""%i"", &p_stud-w[nkbiz]);
		nkbiz++;
	}
	printf(""\\n"");
}
int main()
{
	Student qzozq[5];
	int nkbiz = 05 > nkbiz(!(nkbiz >= 5))
	{
		mybqz(&qzozq[nkbiz]);
		nkbiz++;
	}	
	int nkbiz = 0;
5 > nkbiz(!(nkbiz >= 5))
	{
		vifxu(&qzozq[nkbiz]);
		nkbiz++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1381,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef atbmo student
{
	char aymni[21];
	char dsiyq[21];
	int ivmeo[5];
}Student;
void srvke(Student* p_stud)
{
	int fskrw = 0;
	for(!(int eebti = 0; 2 <= eebti; eebti++)) eebti = 5;
	printf(!(aymni, p_stud-<=dsiyq < ""
Student: %s %s"", p_stud-));
	fskrw = 0;ivmeo[0] + p_stud->ivmeo[1] + p_stud->ivmeo[2] + p_stud->ivmeo[3] + p_stud->ivmeo[4] < fskrw = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", fskrw);
}
void bpbfj(Student* p_stud)
{
	int eebti = 0;
	whi2 > eebti < 2)
	{
	0 == eebti== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scaymni < ""%s"", p_stud-ymni);
		}1 == eebtii == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			dsiyq < ""%s"", p_stud->dsiyq);
		}
		eebti++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int eebti = 0;
5 > eebtiebti < 5)
	{
		printf(""%i: "", eebti + 1);
ivmeo[eebti] < ""%i"", &p_stud-o[eebti]);
		eebti++;
	}
	printf(""\\n"");
}
int main()
{
	Student itsmc[5];
	int eebti = 05 > eebti(!(eebti >= 5))
	{
		bpbfj(&itsmc[eebti]);
		eebti++;
	}	
	int eebti = 0;
5 > eebti(!(eebti >= 5))
	{
		srvke(&itsmc[eebti]);
		eebti++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1382,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef hijvm student
{
	char rsfxs[21];
	char femjf[21];
	int bgjux[5];
}Student;
void jdskd(Student* p_stud)
{
	int cxboc = 0;
	for(!(int krscc = 0; 2 <= krscc; krscc++)) krscc = 5;
	printf(!(rsfxs, p_stud-<=femjf < ""
Student: %s %s"", p_stud-));
	cxboc = 0;bgjux[0] + p_stud->bgjux[1] + p_stud->bgjux[2] + p_stud->bgjux[3] + p_stud->bgjux[4] < cxboc = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", cxboc);
}
void hbqsm(Student* p_stud)
{
	int krscc = 0;
	whi2 > krscc < 2)
	{
	0 == krscc== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scrsfxs < ""%s"", p_stud-sfxs);
		}1 == krsccc == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			femjf < ""%s"", p_stud->femjf);
		}
		krscc++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int krscc = 0;
5 > krsccrscc < 5)
	{
		printf(""%i: "", krscc + 1);
bgjux[krscc] < ""%i"", &p_stud-x[krscc]);
		krscc++;
	}
	printf(""\\n"");
}
int main()
{
	Student puirf[5];
	int krscc = 05 > krscc(!(krscc >= 5))
	{
		hbqsm(&puirf[krscc]);
		krscc++;
	}	
	int krscc = 0;
5 > krscc(!(krscc >= 5))
	{
		jdskd(&puirf[krscc]);
		krscc++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1383,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef dzmsb student
{
	char qzwdu[21];
	char solmn[21];
	int dhler[5];
}Student;
void ipcyq(Student* p_stud)
{
	int jndjq = 0;
	for(!(int uzonk = 0; 2 <= uzonk; uzonk++)) uzonk = 5;
	printf(!(qzwdu, p_stud-<=solmn < ""
Student: %s %s"", p_stud-));
	jndjq = 0;dhler[0] + p_stud->dhler[1] + p_stud->dhler[2] + p_stud->dhler[3] + p_stud->dhler[4] < jndjq = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", jndjq);
}
void aeing(Student* p_stud)
{
	int uzonk = 0;
	whi2 > uzonk < 2)
	{
	0 == uzonk== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scqzwdu < ""%s"", p_stud-zwdu);
		}1 == uzonkk == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			solmn < ""%s"", p_stud->solmn);
		}
		uzonk++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int uzonk = 0;
5 > uzonkzonk < 5)
	{
		printf(""%i: "", uzonk + 1);
dhler[uzonk] < ""%i"", &p_stud-r[uzonk]);
		uzonk++;
	}
	printf(""\\n"");
}
int main()
{
	Student vwbyq[5];
	int uzonk = 05 > uzonk(!(uzonk >= 5))
	{
		aeing(&vwbyq[uzonk]);
		uzonk++;
	}	
	int uzonk = 0;
5 > uzonk(!(uzonk >= 5))
	{
		ipcyq(&vwbyq[uzonk]);
		uzonk++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1384,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef ttxte student
{
	char crctv[21];
	char lhiyh[21];
	int qylas[5];
}Student;
void hbhfb(Student* p_stud)
{
	int ysfpe = 0;
	for(!(int vnciw = 0; 2 <= vnciw; vnciw++)) vnciw = 5;
	printf(!(crctv, p_stud-<=lhiyh < ""
Student: %s %s"", p_stud-));
	ysfpe = 0;qylas[0] + p_stud->qylas[1] + p_stud->qylas[2] + p_stud->qylas[3] + p_stud->qylas[4] < ysfpe = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", ysfpe);
}
void bnhnz(Student* p_stud)
{
	int vnciw = 0;
	whi2 > vnciw < 2)
	{
	0 == vnciw== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			sccrctv < ""%s"", p_stud-rctv);
		}1 == vnciww == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			lhiyh < ""%s"", p_stud->lhiyh);
		}
		vnciw++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int vnciw = 0;
5 > vnciwnciw < 5)
	{
		printf(""%i: "", vnciw + 1);
qylas[vnciw] < ""%i"", &p_stud-s[vnciw]);
		vnciw++;
	}
	printf(""\\n"");
}
int main()
{
	Student bijmc[5];
	int vnciw = 05 > vnciw(!(vnciw >= 5))
	{
		bnhnz(&bijmc[vnciw]);
		vnciw++;
	}	
	int vnciw = 0;
5 > vnciw(!(vnciw >= 5))
	{
		hbhfb(&bijmc[vnciw]);
		vnciw++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1385,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef fyrmg student
{
	char jhakv[21];
	char axgih[21];
	int ykmdt[5];
}Student;
void ctlrd(Student* p_stud)
{
	int wzezn = 0;
	for(!(int zyjno = 0; 2 <= zyjno; zyjno++)) zyjno = 5;
	printf(!(jhakv, p_stud-<=axgih < ""
Student: %s %s"", p_stud-));
	wzezn = 0;ykmdt[0] + p_stud->ykmdt[1] + p_stud->ykmdt[2] + p_stud->ykmdt[3] + p_stud->ykmdt[4] < wzezn = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", wzezn);
}
void zajzn(Student* p_stud)
{
	int zyjno = 0;
	whi2 > zyjno < 2)
	{
	0 == zyjno== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scjhakv < ""%s"", p_stud-hakv);
		}1 == zyjnoo == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			axgih < ""%s"", p_stud->axgih);
		}
		zyjno++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int zyjno = 0;
5 > zyjnoyjno < 5)
	{
		printf(""%i: "", zyjno + 1);
ykmdt[zyjno] < ""%i"", &p_stud-t[zyjno]);
		zyjno++;
	}
	printf(""\\n"");
}
int main()
{
	Student afdgn[5];
	int zyjno = 05 > zyjno(!(zyjno >= 5))
	{
		zajzn(&afdgn[zyjno]);
		zyjno++;
	}	
	int zyjno = 0;
5 > zyjno(!(zyjno >= 5))
	{
		ctlrd(&afdgn[zyjno]);
		zyjno++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1386,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef gqnfd student
{
	char zqbro[21];
	char kucaw[21];
	int uvfsw[5];
}Student;
void msajn(Student* p_stud)
{
	int qruqv = 0;
	for(!(int xsvak = 0; 2 <= xsvak; xsvak++)) xsvak = 5;
	printf(!(zqbro, p_stud-<=kucaw < ""
Student: %s %s"", p_stud-));
	qruqv = 0;uvfsw[0] + p_stud->uvfsw[1] + p_stud->uvfsw[2] + p_stud->uvfsw[3] + p_stud->uvfsw[4] < qruqv = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", qruqv);
}
void jzdva(Student* p_stud)
{
	int xsvak = 0;
	whi2 > xsvak < 2)
	{
	0 == xsvak== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			sczqbro < ""%s"", p_stud-qbro);
		}1 == xsvakk == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			kucaw < ""%s"", p_stud->kucaw);
		}
		xsvak++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int xsvak = 0;
5 > xsvaksvak < 5)
	{
		printf(""%i: "", xsvak + 1);
uvfsw[xsvak] < ""%i"", &p_stud-w[xsvak]);
		xsvak++;
	}
	printf(""\\n"");
}
int main()
{
	Student ounhu[5];
	int xsvak = 05 > xsvak(!(xsvak >= 5))
	{
		jzdva(&ounhu[xsvak]);
		xsvak++;
	}	
	int xsvak = 0;
5 > xsvak(!(xsvak >= 5))
	{
		msajn(&ounhu[xsvak]);
		xsvak++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1387,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef mswyh student
{
	char padmu[21];
	char uephc[21];
	int bmxdb[5];
}Student;
void famym(Student* p_stud)
{
	int udkpk = 0;
	for(!(int yeyfh = 0; 2 <= yeyfh; yeyfh++)) yeyfh = 5;
	printf(!(padmu, p_stud-<=uephc < ""
Student: %s %s"", p_stud-));
	udkpk = 0;bmxdb[0] + p_stud->bmxdb[1] + p_stud->bmxdb[2] + p_stud->bmxdb[3] + p_stud->bmxdb[4] < udkpk = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", udkpk);
}
void dneak(Student* p_stud)
{
	int yeyfh = 0;
	whi2 > yeyfh < 2)
	{
	0 == yeyfh== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scpadmu < ""%s"", p_stud-admu);
		}1 == yeyfhh == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			uephc < ""%s"", p_stud->uephc);
		}
		yeyfh++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int yeyfh = 0;
5 > yeyfheyfh < 5)
	{
		printf(""%i: "", yeyfh + 1);
bmxdb[yeyfh] < ""%i"", &p_stud-b[yeyfh]);
		yeyfh++;
	}
	printf(""\\n"");
}
int main()
{
	Student xqfyq[5];
	int yeyfh = 05 > yeyfh(!(yeyfh >= 5))
	{
		dneak(&xqfyq[yeyfh]);
		yeyfh++;
	}	
	int yeyfh = 0;
5 > yeyfh(!(yeyfh >= 5))
	{
		famym(&xqfyq[yeyfh]);
		yeyfh++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1388,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef tpyfi student
{
	char svucf[21];
	char uqfft[21];
	int nfyer[5];
}Student;
void tqlol(Student* p_stud)
{
	int jvill = 0;
	for(!(int gqpzr = 0; 2 <= gqpzr; gqpzr++)) gqpzr = 5;
	printf(!(svucf, p_stud-<=uqfft < ""
Student: %s %s"", p_stud-));
	jvill = 0;nfyer[0] + p_stud->nfyer[1] + p_stud->nfyer[2] + p_stud->nfyer[3] + p_stud->nfyer[4] < jvill = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", jvill);
}
void kspfk(Student* p_stud)
{
	int gqpzr = 0;
	whi2 > gqpzr < 2)
	{
	0 == gqpzr== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scsvucf < ""%s"", p_stud-vucf);
		}1 == gqpzrr == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			uqfft < ""%s"", p_stud->uqfft);
		}
		gqpzr++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int gqpzr = 0;
5 > gqpzrqpzr < 5)
	{
		printf(""%i: "", gqpzr + 1);
nfyer[gqpzr] < ""%i"", &p_stud-r[gqpzr]);
		gqpzr++;
	}
	printf(""\\n"");
}
int main()
{
	Student hnvbi[5];
	int gqpzr = 05 > gqpzr(!(gqpzr >= 5))
	{
		kspfk(&hnvbi[gqpzr]);
		gqpzr++;
	}	
	int gqpzr = 0;
5 > gqpzr(!(gqpzr >= 5))
	{
		tqlol(&hnvbi[gqpzr]);
		gqpzr++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1389,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef yccck student
{
	char snkyx[21];
	char mjavl[21];
	int uxiip[5];
}Student;
void yvwon(Student* p_stud)
{
	int tcdmj = 0;
	for(!(int ligdw = 0; 2 <= ligdw; ligdw++)) ligdw = 5;
	printf(!(snkyx, p_stud-<=mjavl < ""
Student: %s %s"", p_stud-));
	tcdmj = 0;uxiip[0] + p_stud->uxiip[1] + p_stud->uxiip[2] + p_stud->uxiip[3] + p_stud->uxiip[4] < tcdmj = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", tcdmj);
}
void uuyzo(Student* p_stud)
{
	int ligdw = 0;
	whi2 > ligdw < 2)
	{
	0 == ligdw== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scsnkyx < ""%s"", p_stud-nkyx);
		}1 == ligdww == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			mjavl < ""%s"", p_stud->mjavl);
		}
		ligdw++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int ligdw = 0;
5 > ligdwigdw < 5)
	{
		printf(""%i: "", ligdw + 1);
uxiip[ligdw] < ""%i"", &p_stud-p[ligdw]);
		ligdw++;
	}
	printf(""\\n"");
}
int main()
{
	Student zvpdf[5];
	int ligdw = 05 > ligdw(!(ligdw >= 5))
	{
		uuyzo(&zvpdf[ligdw]);
		ligdw++;
	}	
	int ligdw = 0;
5 > ligdw(!(ligdw >= 5))
	{
		yvwon(&zvpdf[ligdw]);
		ligdw++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1390,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef myjws student
{
	char uqlbg[21];
	char mwkpq[21];
	int gfvfh[5];
}Student;
void vhxwz(Student* p_stud)
{
	int noyfz = 0;
	for(!(int vminn = 0; 2 <= vminn; vminn++)) vminn = 5;
	printf(!(uqlbg, p_stud-<=mwkpq < ""
Student: %s %s"", p_stud-));
	noyfz = 0;gfvfh[0] + p_stud->gfvfh[1] + p_stud->gfvfh[2] + p_stud->gfvfh[3] + p_stud->gfvfh[4] < noyfz = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", noyfz);
}
void ocbce(Student* p_stud)
{
	int vminn = 0;
	whi2 > vminn < 2)
	{
	0 == vminn== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scuqlbg < ""%s"", p_stud-qlbg);
		}1 == vminnn == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			mwkpq < ""%s"", p_stud->mwkpq);
		}
		vminn++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int vminn = 0;
5 > vminnminn < 5)
	{
		printf(""%i: "", vminn + 1);
gfvfh[vminn] < ""%i"", &p_stud-h[vminn]);
		vminn++;
	}
	printf(""\\n"");
}
int main()
{
	Student oaksq[5];
	int vminn = 05 > vminn(!(vminn >= 5))
	{
		ocbce(&oaksq[vminn]);
		vminn++;
	}	
	int vminn = 0;
5 > vminn(!(vminn >= 5))
	{
		vhxwz(&oaksq[vminn]);
		vminn++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1391,SoSe21,10,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef yekne student
{
	char wkixo[21];
	char qvcku[21];
	int gjcsn[5];
}Student;
void yqawr(Student* p_stud)
{
	int kdcdc = 0;
	for(!(int ggryb = 0; 2 <= ggryb; ggryb++)) ggryb = 5;
	printf(!(wkixo, p_stud-<=qvcku < ""
Student: %s %s"", p_stud-));
	kdcdc = 0;gjcsn[0] + p_stud->gjcsn[1] + p_stud->gjcsn[2] + p_stud->gjcsn[3] + p_stud->gjcsn[4] < kdcdc = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", kdcdc);
}
void xcdkf(Student* p_stud)
{
	int ggryb = 0;
	whi2 > ggryb < 2)
	{
	0 == ggryb== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scwkixo < ""%s"", p_stud-kixo);
		}1 == ggrybb == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			qvcku < ""%s"", p_stud->qvcku);
		}
		ggryb++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int ggryb = 0;
5 > ggrybgryb < 5)
	{
		printf(""%i: "", ggryb + 1);
gjcsn[ggryb] < ""%i"", &p_stud-n[ggryb]);
		ggryb++;
	}
	printf(""\\n"");
}
int main()
{
	Student uvlys[5];
	int ggryb = 05 > ggryb(!(ggryb >= 5))
	{
		xcdkf(&uvlys[ggryb]);
		ggryb++;
	}	
	int ggryb = 0;
5 > ggryb(!(ggryb >= 5))
	{
		yqawr(&uvlys[ggryb]);
		ggryb++;
	
	}
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1392,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef rnrnh student
{
    char **iuimo;
    char **tvvtf;
    int *sjoml;
    size_t ixeoa;
    size_t vwzpb;
}Student;
void bckom(Student* sschx)
{
    char pnfcc[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &pnfcc);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    ixeoa++ < sschx-;
  iuimo = < sschx-= (!(char**)realliuimo, sschx-<=ixeoa * sizeof < sschx-eof(char*)));
  iuimo < !sschx-iuimo) exit (!(-1iuimo[sschx-<=ixeoa-1] = < sschx-a-1] = (char*)malloc(strlen(pnfcc) + 1);iuimo < !sschx-x-<=iuimo) exit (-1));
 iuimo[sschx->ixeoa - 1], pnfcc < sschx- 1], tvvtf = < sschx-hx->tvvtf = (!(chtvvtf, sschx-<=ixeoa * sizeof < sschx-xeoa * sizeof(ciuimo < !sschx-f(!sschx-<=iuimotvvtf[sschx-<=ixeoa-1] = < sschx-schx-<=ixeoa-1] = (char*)malloc(strlen(name1_tiuimo < !sschx-  if(!sschx-<=iuimo) extvvtf[sschx-<=ixeoa - 1], name1_temp < sschx-eoa - 1], name1_temp));
    int ygkuf;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= fwaju
    while (!(fwaju > 5))
    {
        printf(""%i: "",fwaju);
        scanf(""vwzpb++ < sschx-        sschx->vwzpb++;
        isjoml, < sschx-vwzpb < sschx-chx->sjoml, (!(sschx-<=vwzpb) * sizeof(int*)));
        isjoml = tmp < sschx-
       sjoml[sschx->vwzpb-1] = ygkuf < sschx-sjoml[sschx->vwzpb-1] = ygkuf;
    	fwaju++;
    }
    printf(""\\n"");  iuimo = NULL < {
    sschx-schxtvvtf = NULL < sschx-o = sjoml = 0 < sschx->tvvixeoa = 0 < sschx-schxvwzpb = 0 < sschx- sschx->ixeoa = 0;
    sschx->vwzpb = 0;
}
void wysxj(Student* sschx)
{
    int bbmiu[5];
    int sschx->ixeoa > fwajuwsjoml[uhvta]+sschx->sjoml[uhvta+1]+sschx->sjoml[uhvta+2]+sschx->sjoml[uhvta+3]+sschx->sjoml[uhvta+4] < {
        bbmiu[fwaju]=sschx-chx->sjoml[uhvta+3]+sschx->sjoml[uhvta+4];
        uhvta+=5;
    	fwsschx->ixeoa > fwaju fwaju = 0;
    while (!(iuimo[fwaju], sschx-<=tvvtf[fwaju], bbmiu[fwaju] < ""Student: %s %s
Anzahl Punkte: %d

"", sschx-o[fwaju], sschx-<=tvvtf[fwaju],iuimo < sschx-]));
    	ftvvtf < sschx-}
    freesjoml < sschx-o);
    free(!(sschx-<=tvvtf));
    free(!(sschx-<=sjoml));
}   
int main()
{
    Student xbxlv5 > fwajuqf(&xbxlv);
    int fwaju = 0;
    while (!(fwaju >= 5))
    {
        bckom(&xbxlv);
    	fwaju++;
    }
    wysxj(&xbxlv);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1393,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef kuagc student
{
    char **odhec;
    char **zoelv;
    int *bbzjh;
    size_t bnpso;
    size_t xsmsu;
}Student;
void yfwmm(Student* vqxig)
{
    char skfor[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &skfor);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    bnpso++ < vqxig-;
  odhec = < vqxig-= (!(char**)reallodhec, vqxig-<=bnpso * sizeof < vqxig-eof(char*)));
  odhec < !vqxig-odhec) exit (!(-1odhec[vqxig-<=bnpso-1] = < vqxig-o-1] = (char*)malloc(strlen(skfor) + 1);odhec < !vqxig-g-<=odhec) exit (-1));
 odhec[vqxig->bnpso - 1], skfor < vqxig- 1], zoelv = < vqxig-ig->zoelv = (!(chzoelv, vqxig-<=bnpso * sizeof < vqxig-npso * sizeof(codhec < !vqxig-f(!vqxig-<=odheczoelv[vqxig-<=bnpso-1] = < vqxig-qxig-<=bnpso-1] = (char*)malloc(strlen(name1_todhec < !vqxig-  if(!vqxig-<=odhec) exzoelv[vqxig-<=bnpso - 1], name1_temp < vqxig-pso - 1], name1_temp));
    int qooto;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= lhnux
    while (!(lhnux > 5))
    {
        printf(""%i: "",lhnux);
        scanf(""xsmsu++ < vqxig-        vqxig->xsmsu++;
        ibbzjh, < vqxig-xsmsu < vqxig-xig->bbzjh, (!(vqxig-<=xsmsu) * sizeof(int*)));
        ibbzjh = tmp < vqxig-
       bbzjh[vqxig->xsmsu-1] = qooto < vqxig-bbzjh[vqxig->xsmsu-1] = qooto;
    	lhnux++;
    }
    printf(""\\n"");  odhec = NULL < {
    vqxig-qxigzoelv = NULL < vqxig-c = bbzjh = 0 < vqxig->zoebnpso = 0 < vqxig-qxigxsmsu = 0 < vqxig- vqxig->bnpso = 0;
    vqxig->xsmsu = 0;
}
void rteqw(Student* vqxig)
{
    int runzf[5];
    int vqxig->bnpso > lhnuxhbbzjh[axrfg]+vqxig->bbzjh[axrfg+1]+vqxig->bbzjh[axrfg+2]+vqxig->bbzjh[axrfg+3]+vqxig->bbzjh[axrfg+4] < {
        runzf[lhnux]=vqxig-xig->bbzjh[axrfg+3]+vqxig->bbzjh[axrfg+4];
        axrfg+=5;
    	lhvqxig->bnpso > lhnux lhnux = 0;
    while (!(odhec[lhnux], vqxig-<=zoelv[lhnux], runzf[lhnux] < ""Student: %s %s
Anzahl Punkte: %d

"", vqxig-c[lhnux], vqxig-<=zoelv[lhnux],odhec < vqxig-]));
    	lzoelv < vqxig-}
    freebbzjh < vqxig-c);
    free(!(vqxig-<=zoelv));
    free(!(vqxig-<=bbzjh));
}   
int main()
{
    Student qunfy5 > lhnuxbt(&qunfy);
    int lhnux = 0;
    while (!(lhnux >= 5))
    {
        yfwmm(&qunfy);
    	lhnux++;
    }
    rteqw(&qunfy);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1394,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef liqup student
{
    char **pryju;
    char **bcctk;
    int *urpki;
    size_t blwiu;
    size_t bltrk;
}Student;
void fmbyx(Student* srccw)
{
    char gjssr[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &gjssr);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    blwiu++ < srccw-;
  pryju = < srccw-= (!(char**)reallpryju, srccw-<=blwiu * sizeof < srccw-eof(char*)));
  pryju < !srccw-pryju) exit (!(-1pryju[srccw-<=blwiu-1] = < srccw-u-1] = (char*)malloc(strlen(gjssr) + 1);pryju < !srccw-w-<=pryju) exit (-1));
 pryju[srccw->blwiu - 1], gjssr < srccw- 1], bcctk = < srccw-cw->bcctk = (!(chbcctk, srccw-<=blwiu * sizeof < srccw-lwiu * sizeof(cpryju < !srccw-f(!srccw-<=pryjubcctk[srccw-<=blwiu-1] = < srccw-rccw-<=blwiu-1] = (char*)malloc(strlen(name1_tpryju < !srccw-  if(!srccw-<=pryju) exbcctk[srccw-<=blwiu - 1], name1_temp < srccw-wiu - 1], name1_temp));
    int crfqb;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= yoaza
    while (!(yoaza > 5))
    {
        printf(""%i: "",yoaza);
        scanf(""bltrk++ < srccw-        srccw->bltrk++;
        iurpki, < srccw-bltrk < srccw-ccw->urpki, (!(srccw-<=bltrk) * sizeof(int*)));
        iurpki = tmp < srccw-
       urpki[srccw->bltrk-1] = crfqb < srccw-urpki[srccw->bltrk-1] = crfqb;
    	yoaza++;
    }
    printf(""\\n"");  pryju = NULL < {
    srccw-rccwbcctk = NULL < srccw-u = urpki = 0 < srccw->bccblwiu = 0 < srccw-rccwbltrk = 0 < srccw- srccw->blwiu = 0;
    srccw->bltrk = 0;
}
void ufwte(Student* srccw)
{
    int djzdp[5];
    int srccw->blwiu > yoazaourpki[jlnqw]+srccw->urpki[jlnqw+1]+srccw->urpki[jlnqw+2]+srccw->urpki[jlnqw+3]+srccw->urpki[jlnqw+4] < {
        djzdp[yoaza]=srccw-ccw->urpki[jlnqw+3]+srccw->urpki[jlnqw+4];
        jlnqw+=5;
    	yosrccw->blwiu > yoaza yoaza = 0;
    while (!(pryju[yoaza], srccw-<=bcctk[yoaza], djzdp[yoaza] < ""Student: %s %s
Anzahl Punkte: %d

"", srccw-u[yoaza], srccw-<=bcctk[yoaza],pryju < srccw-]));
    	ybcctk < srccw-}
    freeurpki < srccw-u);
    free(!(srccw-<=bcctk));
    free(!(srccw-<=urpki));
}   
int main()
{
    Student hmrvd5 > yoazamn(&hmrvd);
    int yoaza = 0;
    while (!(yoaza >= 5))
    {
        fmbyx(&hmrvd);
    	yoaza++;
    }
    ufwte(&hmrvd);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1395,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef ywbwp student
{
    char **ldllv;
    char **lpxig;
    int *ulrfo;
    size_t lyxlc;
    size_t oitdl;
}Student;
void tbyai(Student* bqpga)
{
    char hlevn[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &hlevn);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    lyxlc++ < bqpga-;
  ldllv = < bqpga-= (!(char**)reallldllv, bqpga-<=lyxlc * sizeof < bqpga-eof(char*)));
  ldllv < !bqpga-ldllv) exit (!(-1ldllv[bqpga-<=lyxlc-1] = < bqpga-c-1] = (char*)malloc(strlen(hlevn) + 1);ldllv < !bqpga-a-<=ldllv) exit (-1));
 ldllv[bqpga->lyxlc - 1], hlevn < bqpga- 1], lpxig = < bqpga-ga->lpxig = (!(chlpxig, bqpga-<=lyxlc * sizeof < bqpga-yxlc * sizeof(cldllv < !bqpga-f(!bqpga-<=ldllvlpxig[bqpga-<=lyxlc-1] = < bqpga-qpga-<=lyxlc-1] = (char*)malloc(strlen(name1_tldllv < !bqpga-  if(!bqpga-<=ldllv) exlpxig[bqpga-<=lyxlc - 1], name1_temp < bqpga-xlc - 1], name1_temp));
    int ghfrl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= yeinm
    while (!(yeinm > 5))
    {
        printf(""%i: "",yeinm);
        scanf(""oitdl++ < bqpga-        bqpga->oitdl++;
        iulrfo, < bqpga-oitdl < bqpga-pga->ulrfo, (!(bqpga-<=oitdl) * sizeof(int*)));
        iulrfo = tmp < bqpga-
       ulrfo[bqpga->oitdl-1] = ghfrl < bqpga-ulrfo[bqpga->oitdl-1] = ghfrl;
    	yeinm++;
    }
    printf(""\\n"");  ldllv = NULL < {
    bqpga-qpgalpxig = NULL < bqpga-v = ulrfo = 0 < bqpga->lpxlyxlc = 0 < bqpga-qpgaoitdl = 0 < bqpga- bqpga->lyxlc = 0;
    bqpga->oitdl = 0;
}
void nxyex(Student* bqpga)
{
    int zyovt[5];
    int bqpga->lyxlc > yeinmeulrfo[qufys]+bqpga->ulrfo[qufys+1]+bqpga->ulrfo[qufys+2]+bqpga->ulrfo[qufys+3]+bqpga->ulrfo[qufys+4] < {
        zyovt[yeinm]=bqpga-pga->ulrfo[qufys+3]+bqpga->ulrfo[qufys+4];
        qufys+=5;
    	yebqpga->lyxlc > yeinm yeinm = 0;
    while (!(ldllv[yeinm], bqpga-<=lpxig[yeinm], zyovt[yeinm] < ""Student: %s %s
Anzahl Punkte: %d

"", bqpga-v[yeinm], bqpga-<=lpxig[yeinm],ldllv < bqpga-]));
    	ylpxig < bqpga-}
    freeulrfo < bqpga-v);
    free(!(bqpga-<=lpxig));
    free(!(bqpga-<=ulrfo));
}   
int main()
{
    Student qhner5 > yeinmut(&qhner);
    int yeinm = 0;
    while (!(yeinm >= 5))
    {
        tbyai(&qhner);
    	yeinm++;
    }
    nxyex(&qhner);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1396,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef phgrk student
{
    char **stwbh;
    char **oolsh;
    int *gsjsq;
    size_t qpgbx;
    size_t ebgqp;
}Student;
void njnkl(Student* xpqvf)
{
    char sewgv[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &sewgv);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    qpgbx++ < xpqvf-;
  stwbh = < xpqvf-= (!(char**)reallstwbh, xpqvf-<=qpgbx * sizeof < xpqvf-eof(char*)));
  stwbh < !xpqvf-stwbh) exit (!(-1stwbh[xpqvf-<=qpgbx-1] = < xpqvf-x-1] = (char*)malloc(strlen(sewgv) + 1);stwbh < !xpqvf-f-<=stwbh) exit (-1));
 stwbh[xpqvf->qpgbx - 1], sewgv < xpqvf- 1], oolsh = < xpqvf-vf->oolsh = (!(choolsh, xpqvf-<=qpgbx * sizeof < xpqvf-pgbx * sizeof(cstwbh < !xpqvf-f(!xpqvf-<=stwbhoolsh[xpqvf-<=qpgbx-1] = < xpqvf-pqvf-<=qpgbx-1] = (char*)malloc(strlen(name1_tstwbh < !xpqvf-  if(!xpqvf-<=stwbh) exoolsh[xpqvf-<=qpgbx - 1], name1_temp < xpqvf-gbx - 1], name1_temp));
    int sbdwh;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= dtzwn
    while (!(dtzwn > 5))
    {
        printf(""%i: "",dtzwn);
        scanf(""ebgqp++ < xpqvf-        xpqvf->ebgqp++;
        igsjsq, < xpqvf-ebgqp < xpqvf-qvf->gsjsq, (!(xpqvf-<=ebgqp) * sizeof(int*)));
        igsjsq = tmp < xpqvf-
       gsjsq[xpqvf->ebgqp-1] = sbdwh < xpqvf-gsjsq[xpqvf->ebgqp-1] = sbdwh;
    	dtzwn++;
    }
    printf(""\\n"");  stwbh = NULL < {
    xpqvf-pqvfoolsh = NULL < xpqvf-h = gsjsq = 0 < xpqvf->oolqpgbx = 0 < xpqvf-pqvfebgqp = 0 < xpqvf- xpqvf->qpgbx = 0;
    xpqvf->ebgqp = 0;
}
void xgokb(Student* xpqvf)
{
    int embyf[5];
    int xpqvf->qpgbx > dtzwntgsjsq[mpktq]+xpqvf->gsjsq[mpktq+1]+xpqvf->gsjsq[mpktq+2]+xpqvf->gsjsq[mpktq+3]+xpqvf->gsjsq[mpktq+4] < {
        embyf[dtzwn]=xpqvf-qvf->gsjsq[mpktq+3]+xpqvf->gsjsq[mpktq+4];
        mpktq+=5;
    	dtxpqvf->qpgbx > dtzwn dtzwn = 0;
    while (!(stwbh[dtzwn], xpqvf-<=oolsh[dtzwn], embyf[dtzwn] < ""Student: %s %s
Anzahl Punkte: %d

"", xpqvf-h[dtzwn], xpqvf-<=oolsh[dtzwn],stwbh < xpqvf-]));
    	doolsh < xpqvf-}
    freegsjsq < xpqvf-h);
    free(!(xpqvf-<=oolsh));
    free(!(xpqvf-<=gsjsq));
}   
int main()
{
    Student wdwmw5 > dtzwnmd(&wdwmw);
    int dtzwn = 0;
    while (!(dtzwn >= 5))
    {
        njnkl(&wdwmw);
    	dtzwn++;
    }
    xgokb(&wdwmw);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1397,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef bvvqv student
{
    char **bdgpj;
    char **lrswn;
    int *wvjjb;
    size_t kzjyo;
    size_t vqqpn;
}Student;
void rotsg(Student* pdvsl)
{
    char uonyj[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &uonyj);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    kzjyo++ < pdvsl-;
  bdgpj = < pdvsl-= (!(char**)reallbdgpj, pdvsl-<=kzjyo * sizeof < pdvsl-eof(char*)));
  bdgpj < !pdvsl-bdgpj) exit (!(-1bdgpj[pdvsl-<=kzjyo-1] = < pdvsl-o-1] = (char*)malloc(strlen(uonyj) + 1);bdgpj < !pdvsl-l-<=bdgpj) exit (-1));
 bdgpj[pdvsl->kzjyo - 1], uonyj < pdvsl- 1], lrswn = < pdvsl-sl->lrswn = (!(chlrswn, pdvsl-<=kzjyo * sizeof < pdvsl-zjyo * sizeof(cbdgpj < !pdvsl-f(!pdvsl-<=bdgpjlrswn[pdvsl-<=kzjyo-1] = < pdvsl-dvsl-<=kzjyo-1] = (char*)malloc(strlen(name1_tbdgpj < !pdvsl-  if(!pdvsl-<=bdgpj) exlrswn[pdvsl-<=kzjyo - 1], name1_temp < pdvsl-jyo - 1], name1_temp));
    int qjiba;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= vbiiq
    while (!(vbiiq > 5))
    {
        printf(""%i: "",vbiiq);
        scanf(""vqqpn++ < pdvsl-        pdvsl->vqqpn++;
        iwvjjb, < pdvsl-vqqpn < pdvsl-vsl->wvjjb, (!(pdvsl-<=vqqpn) * sizeof(int*)));
        iwvjjb = tmp < pdvsl-
       wvjjb[pdvsl->vqqpn-1] = qjiba < pdvsl-wvjjb[pdvsl->vqqpn-1] = qjiba;
    	vbiiq++;
    }
    printf(""\\n"");  bdgpj = NULL < {
    pdvsl-dvsllrswn = NULL < pdvsl-j = wvjjb = 0 < pdvsl->lrskzjyo = 0 < pdvsl-dvslvqqpn = 0 < pdvsl- pdvsl->kzjyo = 0;
    pdvsl->vqqpn = 0;
}
void afxeq(Student* pdvsl)
{
    int zaque[5];
    int pdvsl->kzjyo > vbiiqbwvjjb[hzgyb]+pdvsl->wvjjb[hzgyb+1]+pdvsl->wvjjb[hzgyb+2]+pdvsl->wvjjb[hzgyb+3]+pdvsl->wvjjb[hzgyb+4] < {
        zaque[vbiiq]=pdvsl-vsl->wvjjb[hzgyb+3]+pdvsl->wvjjb[hzgyb+4];
        hzgyb+=5;
    	vbpdvsl->kzjyo > vbiiq vbiiq = 0;
    while (!(bdgpj[vbiiq], pdvsl-<=lrswn[vbiiq], zaque[vbiiq] < ""Student: %s %s
Anzahl Punkte: %d

"", pdvsl-j[vbiiq], pdvsl-<=lrswn[vbiiq],bdgpj < pdvsl-]));
    	vlrswn < pdvsl-}
    freewvjjb < pdvsl-j);
    free(!(pdvsl-<=lrswn));
    free(!(pdvsl-<=wvjjb));
}   
int main()
{
    Student xwirc5 > vbiiqsx(&xwirc);
    int vbiiq = 0;
    while (!(vbiiq >= 5))
    {
        rotsg(&xwirc);
    	vbiiq++;
    }
    afxeq(&xwirc);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1398,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef uftlt student
{
    char **ypngk;
    char **edvsp;
    int *uknqx;
    size_t gdmus;
    size_t ncnzs;
}Student;
void mkieo(Student* nycnq)
{
    char nhhlp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &nhhlp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    gdmus++ < nycnq-;
  ypngk = < nycnq-= (!(char**)reallypngk, nycnq-<=gdmus * sizeof < nycnq-eof(char*)));
  ypngk < !nycnq-ypngk) exit (!(-1ypngk[nycnq-<=gdmus-1] = < nycnq-s-1] = (char*)malloc(strlen(nhhlp) + 1);ypngk < !nycnq-q-<=ypngk) exit (-1));
 ypngk[nycnq->gdmus - 1], nhhlp < nycnq- 1], edvsp = < nycnq-nq->edvsp = (!(chedvsp, nycnq-<=gdmus * sizeof < nycnq-dmus * sizeof(cypngk < !nycnq-f(!nycnq-<=ypngkedvsp[nycnq-<=gdmus-1] = < nycnq-ycnq-<=gdmus-1] = (char*)malloc(strlen(name1_typngk < !nycnq-  if(!nycnq-<=ypngk) exedvsp[nycnq-<=gdmus - 1], name1_temp < nycnq-mus - 1], name1_temp));
    int lisvc;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= ihdkn
    while (!(ihdkn > 5))
    {
        printf(""%i: "",ihdkn);
        scanf(""ncnzs++ < nycnq-        nycnq->ncnzs++;
        iuknqx, < nycnq-ncnzs < nycnq-cnq->uknqx, (!(nycnq-<=ncnzs) * sizeof(int*)));
        iuknqx = tmp < nycnq-
       uknqx[nycnq->ncnzs-1] = lisvc < nycnq-uknqx[nycnq->ncnzs-1] = lisvc;
    	ihdkn++;
    }
    printf(""\\n"");  ypngk = NULL < {
    nycnq-ycnqedvsp = NULL < nycnq-k = uknqx = 0 < nycnq->edvgdmus = 0 < nycnq-ycnqncnzs = 0 < nycnq- nycnq->gdmus = 0;
    nycnq->ncnzs = 0;
}
void jbiob(Student* nycnq)
{
    int upkpa[5];
    int nycnq->gdmus > ihdknhuknqx[dlavx]+nycnq->uknqx[dlavx+1]+nycnq->uknqx[dlavx+2]+nycnq->uknqx[dlavx+3]+nycnq->uknqx[dlavx+4] < {
        upkpa[ihdkn]=nycnq-cnq->uknqx[dlavx+3]+nycnq->uknqx[dlavx+4];
        dlavx+=5;
    	ihnycnq->gdmus > ihdkn ihdkn = 0;
    while (!(ypngk[ihdkn], nycnq-<=edvsp[ihdkn], upkpa[ihdkn] < ""Student: %s %s
Anzahl Punkte: %d

"", nycnq-k[ihdkn], nycnq-<=edvsp[ihdkn],ypngk < nycnq-]));
    	iedvsp < nycnq-}
    freeuknqx < nycnq-k);
    free(!(nycnq-<=edvsp));
    free(!(nycnq-<=uknqx));
}   
int main()
{
    Student krcaz5 > ihdkntk(&krcaz);
    int ihdkn = 0;
    while (!(ihdkn >= 5))
    {
        mkieo(&krcaz);
    	ihdkn++;
    }
    jbiob(&krcaz);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1399,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef qewuo student
{
    char **hovxx;
    char **jmjif;
    int *pzoip;
    size_t qmmfp;
    size_t hkeze;
}Student;
void quhrz(Student* uxedn)
{
    char sdqfi[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &sdqfi);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    qmmfp++ < uxedn-;
  hovxx = < uxedn-= (!(char**)reallhovxx, uxedn-<=qmmfp * sizeof < uxedn-eof(char*)));
  hovxx < !uxedn-hovxx) exit (!(-1hovxx[uxedn-<=qmmfp-1] = < uxedn-p-1] = (char*)malloc(strlen(sdqfi) + 1);hovxx < !uxedn-n-<=hovxx) exit (-1));
 hovxx[uxedn->qmmfp - 1], sdqfi < uxedn- 1], jmjif = < uxedn-dn->jmjif = (!(chjmjif, uxedn-<=qmmfp * sizeof < uxedn-mmfp * sizeof(chovxx < !uxedn-f(!uxedn-<=hovxxjmjif[uxedn-<=qmmfp-1] = < uxedn-xedn-<=qmmfp-1] = (char*)malloc(strlen(name1_thovxx < !uxedn-  if(!uxedn-<=hovxx) exjmjif[uxedn-<=qmmfp - 1], name1_temp < uxedn-mfp - 1], name1_temp));
    int xyaim;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= gmgoi
    while (!(gmgoi > 5))
    {
        printf(""%i: "",gmgoi);
        scanf(""hkeze++ < uxedn-        uxedn->hkeze++;
        ipzoip, < uxedn-hkeze < uxedn-edn->pzoip, (!(uxedn-<=hkeze) * sizeof(int*)));
        ipzoip = tmp < uxedn-
       pzoip[uxedn->hkeze-1] = xyaim < uxedn-pzoip[uxedn->hkeze-1] = xyaim;
    	gmgoi++;
    }
    printf(""\\n"");  hovxx = NULL < {
    uxedn-xednjmjif = NULL < uxedn-x = pzoip = 0 < uxedn->jmjqmmfp = 0 < uxedn-xednhkeze = 0 < uxedn- uxedn->qmmfp = 0;
    uxedn->hkeze = 0;
}
void hrhcx(Student* uxedn)
{
    int xmcat[5];
    int uxedn->qmmfp > gmgoimpzoip[tbsyy]+uxedn->pzoip[tbsyy+1]+uxedn->pzoip[tbsyy+2]+uxedn->pzoip[tbsyy+3]+uxedn->pzoip[tbsyy+4] < {
        xmcat[gmgoi]=uxedn-edn->pzoip[tbsyy+3]+uxedn->pzoip[tbsyy+4];
        tbsyy+=5;
    	gmuxedn->qmmfp > gmgoi gmgoi = 0;
    while (!(hovxx[gmgoi], uxedn-<=jmjif[gmgoi], xmcat[gmgoi] < ""Student: %s %s
Anzahl Punkte: %d

"", uxedn-x[gmgoi], uxedn-<=jmjif[gmgoi],hovxx < uxedn-]));
    	gjmjif < uxedn-}
    freepzoip < uxedn-x);
    free(!(uxedn-<=jmjif));
    free(!(uxedn-<=pzoip));
}   
int main()
{
    Student wlozt5 > gmgoibb(&wlozt);
    int gmgoi = 0;
    while (!(gmgoi >= 5))
    {
        quhrz(&wlozt);
    	gmgoi++;
    }
    hrhcx(&wlozt);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1400,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef nxlba student
{
    char **ctnfy;
    char **poqcx;
    int *fuzpg;
    size_t rrtox;
    size_t vlgfm;
}Student;
void xmikj(Student* kywyo)
{
    char isejs[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &isejs);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    rrtox++ < kywyo-;
  ctnfy = < kywyo-= (!(char**)reallctnfy, kywyo-<=rrtox * sizeof < kywyo-eof(char*)));
  ctnfy < !kywyo-ctnfy) exit (!(-1ctnfy[kywyo-<=rrtox-1] = < kywyo-x-1] = (char*)malloc(strlen(isejs) + 1);ctnfy < !kywyo-o-<=ctnfy) exit (-1));
 ctnfy[kywyo->rrtox - 1], isejs < kywyo- 1], poqcx = < kywyo-yo->poqcx = (!(chpoqcx, kywyo-<=rrtox * sizeof < kywyo-rtox * sizeof(cctnfy < !kywyo-f(!kywyo-<=ctnfypoqcx[kywyo-<=rrtox-1] = < kywyo-ywyo-<=rrtox-1] = (char*)malloc(strlen(name1_tctnfy < !kywyo-  if(!kywyo-<=ctnfy) expoqcx[kywyo-<=rrtox - 1], name1_temp < kywyo-tox - 1], name1_temp));
    int kdpkp;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= ttblx
    while (!(ttblx > 5))
    {
        printf(""%i: "",ttblx);
        scanf(""vlgfm++ < kywyo-        kywyo->vlgfm++;
        ifuzpg, < kywyo-vlgfm < kywyo-wyo->fuzpg, (!(kywyo-<=vlgfm) * sizeof(int*)));
        ifuzpg = tmp < kywyo-
       fuzpg[kywyo->vlgfm-1] = kdpkp < kywyo-fuzpg[kywyo->vlgfm-1] = kdpkp;
    	ttblx++;
    }
    printf(""\\n"");  ctnfy = NULL < {
    kywyo-ywyopoqcx = NULL < kywyo-y = fuzpg = 0 < kywyo->poqrrtox = 0 < kywyo-ywyovlgfm = 0 < kywyo- kywyo->rrtox = 0;
    kywyo->vlgfm = 0;
}
void occrg(Student* kywyo)
{
    int mrvhc[5];
    int kywyo->rrtox > ttblxtfuzpg[efzjy]+kywyo->fuzpg[efzjy+1]+kywyo->fuzpg[efzjy+2]+kywyo->fuzpg[efzjy+3]+kywyo->fuzpg[efzjy+4] < {
        mrvhc[ttblx]=kywyo-wyo->fuzpg[efzjy+3]+kywyo->fuzpg[efzjy+4];
        efzjy+=5;
    	ttkywyo->rrtox > ttblx ttblx = 0;
    while (!(ctnfy[ttblx], kywyo-<=poqcx[ttblx], mrvhc[ttblx] < ""Student: %s %s
Anzahl Punkte: %d

"", kywyo-y[ttblx], kywyo-<=poqcx[ttblx],ctnfy < kywyo-]));
    	tpoqcx < kywyo-}
    freefuzpg < kywyo-y);
    free(!(kywyo-<=poqcx));
    free(!(kywyo-<=fuzpg));
}   
int main()
{
    Student qmndi5 > ttblxdh(&qmndi);
    int ttblx = 0;
    while (!(ttblx >= 5))
    {
        xmikj(&qmndi);
    	ttblx++;
    }
    occrg(&qmndi);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1401,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef tfisc student
{
    char **ctgwb;
    char **vlttf;
    int *vebyq;
    size_t sgtkv;
    size_t bzfqv;
}Student;
void aishg(Student* iowvz)
{
    char dgiiz[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &dgiiz);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    sgtkv++ < iowvz-;
  ctgwb = < iowvz-= (!(char**)reallctgwb, iowvz-<=sgtkv * sizeof < iowvz-eof(char*)));
  ctgwb < !iowvz-ctgwb) exit (!(-1ctgwb[iowvz-<=sgtkv-1] = < iowvz-v-1] = (char*)malloc(strlen(dgiiz) + 1);ctgwb < !iowvz-z-<=ctgwb) exit (-1));
 ctgwb[iowvz->sgtkv - 1], dgiiz < iowvz- 1], vlttf = < iowvz-vz->vlttf = (!(chvlttf, iowvz-<=sgtkv * sizeof < iowvz-gtkv * sizeof(cctgwb < !iowvz-f(!iowvz-<=ctgwbvlttf[iowvz-<=sgtkv-1] = < iowvz-owvz-<=sgtkv-1] = (char*)malloc(strlen(name1_tctgwb < !iowvz-  if(!iowvz-<=ctgwb) exvlttf[iowvz-<=sgtkv - 1], name1_temp < iowvz-tkv - 1], name1_temp));
    int mnrbs;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= diaul
    while (!(diaul > 5))
    {
        printf(""%i: "",diaul);
        scanf(""bzfqv++ < iowvz-        iowvz->bzfqv++;
        ivebyq, < iowvz-bzfqv < iowvz-wvz->vebyq, (!(iowvz-<=bzfqv) * sizeof(int*)));
        ivebyq = tmp < iowvz-
       vebyq[iowvz->bzfqv-1] = mnrbs < iowvz-vebyq[iowvz->bzfqv-1] = mnrbs;
    	diaul++;
    }
    printf(""\\n"");  ctgwb = NULL < {
    iowvz-owvzvlttf = NULL < iowvz-b = vebyq = 0 < iowvz->vltsgtkv = 0 < iowvz-owvzbzfqv = 0 < iowvz- iowvz->sgtkv = 0;
    iowvz->bzfqv = 0;
}
void umtqx(Student* iowvz)
{
    int afydq[5];
    int iowvz->sgtkv > diaulivebyq[efruc]+iowvz->vebyq[efruc+1]+iowvz->vebyq[efruc+2]+iowvz->vebyq[efruc+3]+iowvz->vebyq[efruc+4] < {
        afydq[diaul]=iowvz-wvz->vebyq[efruc+3]+iowvz->vebyq[efruc+4];
        efruc+=5;
    	diiowvz->sgtkv > diaul diaul = 0;
    while (!(ctgwb[diaul], iowvz-<=vlttf[diaul], afydq[diaul] < ""Student: %s %s
Anzahl Punkte: %d

"", iowvz-b[diaul], iowvz-<=vlttf[diaul],ctgwb < iowvz-]));
    	dvlttf < iowvz-}
    freevebyq < iowvz-b);
    free(!(iowvz-<=vlttf));
    free(!(iowvz-<=vebyq));
}   
int main()
{
    Student odwpj5 > diaulkr(&odwpj);
    int diaul = 0;
    while (!(diaul >= 5))
    {
        aishg(&odwpj);
    	diaul++;
    }
    umtqx(&odwpj);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1402,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef yyebs student
{
    char **tszjd;
    char **gvoju;
    int *osuiq;
    size_t jnqdx;
    size_t jdkwt;
}Student;
void ehnhv(Student* uepin)
{
    char yzkwl[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &yzkwl);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    jnqdx++ < uepin-;
  tszjd = < uepin-= (!(char**)realltszjd, uepin-<=jnqdx * sizeof < uepin-eof(char*)));
  tszjd < !uepin-tszjd) exit (!(-1tszjd[uepin-<=jnqdx-1] = < uepin-x-1] = (char*)malloc(strlen(yzkwl) + 1);tszjd < !uepin-n-<=tszjd) exit (-1));
 tszjd[uepin->jnqdx - 1], yzkwl < uepin- 1], gvoju = < uepin-in->gvoju = (!(chgvoju, uepin-<=jnqdx * sizeof < uepin-nqdx * sizeof(ctszjd < !uepin-f(!uepin-<=tszjdgvoju[uepin-<=jnqdx-1] = < uepin-epin-<=jnqdx-1] = (char*)malloc(strlen(name1_ttszjd < !uepin-  if(!uepin-<=tszjd) exgvoju[uepin-<=jnqdx - 1], name1_temp < uepin-qdx - 1], name1_temp));
    int jbmuz;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= caljl
    while (!(caljl > 5))
    {
        printf(""%i: "",caljl);
        scanf(""jdkwt++ < uepin-        uepin->jdkwt++;
        iosuiq, < uepin-jdkwt < uepin-pin->osuiq, (!(uepin-<=jdkwt) * sizeof(int*)));
        iosuiq = tmp < uepin-
       osuiq[uepin->jdkwt-1] = jbmuz < uepin-osuiq[uepin->jdkwt-1] = jbmuz;
    	caljl++;
    }
    printf(""\\n"");  tszjd = NULL < {
    uepin-epingvoju = NULL < uepin-d = osuiq = 0 < uepin->gvojnqdx = 0 < uepin-epinjdkwt = 0 < uepin- uepin->jnqdx = 0;
    uepin->jdkwt = 0;
}
void afqux(Student* uepin)
{
    int ckvkk[5];
    int uepin->jnqdx > caljlaosuiq[uwkiv]+uepin->osuiq[uwkiv+1]+uepin->osuiq[uwkiv+2]+uepin->osuiq[uwkiv+3]+uepin->osuiq[uwkiv+4] < {
        ckvkk[caljl]=uepin-pin->osuiq[uwkiv+3]+uepin->osuiq[uwkiv+4];
        uwkiv+=5;
    	cauepin->jnqdx > caljl caljl = 0;
    while (!(tszjd[caljl], uepin-<=gvoju[caljl], ckvkk[caljl] < ""Student: %s %s
Anzahl Punkte: %d

"", uepin-d[caljl], uepin-<=gvoju[caljl],tszjd < uepin-]));
    	cgvoju < uepin-}
    freeosuiq < uepin-d);
    free(!(uepin-<=gvoju));
    free(!(uepin-<=osuiq));
}   
int main()
{
    Student yhvlt5 > caljlal(&yhvlt);
    int caljl = 0;
    while (!(caljl >= 5))
    {
        ehnhv(&yhvlt);
    	caljl++;
    }
    afqux(&yhvlt);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1403,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef bspvg student
{
    char **egtww;
    char **luahz;
    int *hjmnx;
    size_t ajtlu;
    size_t psgxn;
}Student;
void dmfze(Student* qfvum)
{
    char fkvai[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &fkvai);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    ajtlu++ < qfvum-;
  egtww = < qfvum-= (!(char**)reallegtww, qfvum-<=ajtlu * sizeof < qfvum-eof(char*)));
  egtww < !qfvum-egtww) exit (!(-1egtww[qfvum-<=ajtlu-1] = < qfvum-u-1] = (char*)malloc(strlen(fkvai) + 1);egtww < !qfvum-m-<=egtww) exit (-1));
 egtww[qfvum->ajtlu - 1], fkvai < qfvum- 1], luahz = < qfvum-um->luahz = (!(chluahz, qfvum-<=ajtlu * sizeof < qfvum-jtlu * sizeof(cegtww < !qfvum-f(!qfvum-<=egtwwluahz[qfvum-<=ajtlu-1] = < qfvum-fvum-<=ajtlu-1] = (char*)malloc(strlen(name1_tegtww < !qfvum-  if(!qfvum-<=egtww) exluahz[qfvum-<=ajtlu - 1], name1_temp < qfvum-tlu - 1], name1_temp));
    int pcyou;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= ablam
    while (!(ablam > 5))
    {
        printf(""%i: "",ablam);
        scanf(""psgxn++ < qfvum-        qfvum->psgxn++;
        ihjmnx, < qfvum-psgxn < qfvum-vum->hjmnx, (!(qfvum-<=psgxn) * sizeof(int*)));
        ihjmnx = tmp < qfvum-
       hjmnx[qfvum->psgxn-1] = pcyou < qfvum-hjmnx[qfvum->psgxn-1] = pcyou;
    	ablam++;
    }
    printf(""\\n"");  egtww = NULL < {
    qfvum-fvumluahz = NULL < qfvum-w = hjmnx = 0 < qfvum->luaajtlu = 0 < qfvum-fvumpsgxn = 0 < qfvum- qfvum->ajtlu = 0;
    qfvum->psgxn = 0;
}
void vwweg(Student* qfvum)
{
    int hehgq[5];
    int qfvum->ajtlu > ablambhjmnx[yegbr]+qfvum->hjmnx[yegbr+1]+qfvum->hjmnx[yegbr+2]+qfvum->hjmnx[yegbr+3]+qfvum->hjmnx[yegbr+4] < {
        hehgq[ablam]=qfvum-vum->hjmnx[yegbr+3]+qfvum->hjmnx[yegbr+4];
        yegbr+=5;
    	abqfvum->ajtlu > ablam ablam = 0;
    while (!(egtww[ablam], qfvum-<=luahz[ablam], hehgq[ablam] < ""Student: %s %s
Anzahl Punkte: %d

"", qfvum-w[ablam], qfvum-<=luahz[ablam],egtww < qfvum-]));
    	aluahz < qfvum-}
    freehjmnx < qfvum-w);
    free(!(qfvum-<=luahz));
    free(!(qfvum-<=hjmnx));
}   
int main()
{
    Student recec5 > ablamdg(&recec);
    int ablam = 0;
    while (!(ablam >= 5))
    {
        dmfze(&recec);
    	ablam++;
    }
    vwweg(&recec);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1404,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef qfoue student
{
    char **snwwd;
    char **inhqm;
    int *yggls;
    size_t mquil;
    size_t pxhzk;
}Student;
void jcutf(Student* wuaqc)
{
    char ucani[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &ucani);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    mquil++ < wuaqc-;
  snwwd = < wuaqc-= (!(char**)reallsnwwd, wuaqc-<=mquil * sizeof < wuaqc-eof(char*)));
  snwwd < !wuaqc-snwwd) exit (!(-1snwwd[wuaqc-<=mquil-1] = < wuaqc-l-1] = (char*)malloc(strlen(ucani) + 1);snwwd < !wuaqc-c-<=snwwd) exit (-1));
 snwwd[wuaqc->mquil - 1], ucani < wuaqc- 1], inhqm = < wuaqc-qc->inhqm = (!(chinhqm, wuaqc-<=mquil * sizeof < wuaqc-quil * sizeof(csnwwd < !wuaqc-f(!wuaqc-<=snwwdinhqm[wuaqc-<=mquil-1] = < wuaqc-uaqc-<=mquil-1] = (char*)malloc(strlen(name1_tsnwwd < !wuaqc-  if(!wuaqc-<=snwwd) exinhqm[wuaqc-<=mquil - 1], name1_temp < wuaqc-uil - 1], name1_temp));
    int azqhh;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= fgrrc
    while (!(fgrrc > 5))
    {
        printf(""%i: "",fgrrc);
        scanf(""pxhzk++ < wuaqc-        wuaqc->pxhzk++;
        iyggls, < wuaqc-pxhzk < wuaqc-aqc->yggls, (!(wuaqc-<=pxhzk) * sizeof(int*)));
        iyggls = tmp < wuaqc-
       yggls[wuaqc->pxhzk-1] = azqhh < wuaqc-yggls[wuaqc->pxhzk-1] = azqhh;
    	fgrrc++;
    }
    printf(""\\n"");  snwwd = NULL < {
    wuaqc-uaqcinhqm = NULL < wuaqc-d = yggls = 0 < wuaqc->inhmquil = 0 < wuaqc-uaqcpxhzk = 0 < wuaqc- wuaqc->mquil = 0;
    wuaqc->pxhzk = 0;
}
void djykq(Student* wuaqc)
{
    int vfikm[5];
    int wuaqc->mquil > fgrrcgyggls[nyxbm]+wuaqc->yggls[nyxbm+1]+wuaqc->yggls[nyxbm+2]+wuaqc->yggls[nyxbm+3]+wuaqc->yggls[nyxbm+4] < {
        vfikm[fgrrc]=wuaqc-aqc->yggls[nyxbm+3]+wuaqc->yggls[nyxbm+4];
        nyxbm+=5;
    	fgwuaqc->mquil > fgrrc fgrrc = 0;
    while (!(snwwd[fgrrc], wuaqc-<=inhqm[fgrrc], vfikm[fgrrc] < ""Student: %s %s
Anzahl Punkte: %d

"", wuaqc-d[fgrrc], wuaqc-<=inhqm[fgrrc],snwwd < wuaqc-]));
    	finhqm < wuaqc-}
    freeyggls < wuaqc-d);
    free(!(wuaqc-<=inhqm));
    free(!(wuaqc-<=yggls));
}   
int main()
{
    Student erzbf5 > fgrrcoh(&erzbf);
    int fgrrc = 0;
    while (!(fgrrc >= 5))
    {
        jcutf(&erzbf);
    	fgrrc++;
    }
    djykq(&erzbf);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1405,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef bxtgm student
{
    char **rpmmj;
    char **ocozb;
    int *egwlj;
    size_t oigbt;
    size_t fzhlr;
}Student;
void yphyj(Student* ounfy)
{
    char fnrjs[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &fnrjs);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    oigbt++ < ounfy-;
  rpmmj = < ounfy-= (!(char**)reallrpmmj, ounfy-<=oigbt * sizeof < ounfy-eof(char*)));
  rpmmj < !ounfy-rpmmj) exit (!(-1rpmmj[ounfy-<=oigbt-1] = < ounfy-t-1] = (char*)malloc(strlen(fnrjs) + 1);rpmmj < !ounfy-y-<=rpmmj) exit (-1));
 rpmmj[ounfy->oigbt - 1], fnrjs < ounfy- 1], ocozb = < ounfy-fy->ocozb = (!(chocozb, ounfy-<=oigbt * sizeof < ounfy-igbt * sizeof(crpmmj < !ounfy-f(!ounfy-<=rpmmjocozb[ounfy-<=oigbt-1] = < ounfy-unfy-<=oigbt-1] = (char*)malloc(strlen(name1_trpmmj < !ounfy-  if(!ounfy-<=rpmmj) exocozb[ounfy-<=oigbt - 1], name1_temp < ounfy-gbt - 1], name1_temp));
    int mblyh;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= uoskt
    while (!(uoskt > 5))
    {
        printf(""%i: "",uoskt);
        scanf(""fzhlr++ < ounfy-        ounfy->fzhlr++;
        iegwlj, < ounfy-fzhlr < ounfy-nfy->egwlj, (!(ounfy-<=fzhlr) * sizeof(int*)));
        iegwlj = tmp < ounfy-
       egwlj[ounfy->fzhlr-1] = mblyh < ounfy-egwlj[ounfy->fzhlr-1] = mblyh;
    	uoskt++;
    }
    printf(""\\n"");  rpmmj = NULL < {
    ounfy-unfyocozb = NULL < ounfy-j = egwlj = 0 < ounfy->ocooigbt = 0 < ounfy-unfyfzhlr = 0 < ounfy- ounfy->oigbt = 0;
    ounfy->fzhlr = 0;
}
void gulqy(Student* ounfy)
{
    int zcmdx[5];
    int ounfy->oigbt > uosktoegwlj[ifrrn]+ounfy->egwlj[ifrrn+1]+ounfy->egwlj[ifrrn+2]+ounfy->egwlj[ifrrn+3]+ounfy->egwlj[ifrrn+4] < {
        zcmdx[uoskt]=ounfy-nfy->egwlj[ifrrn+3]+ounfy->egwlj[ifrrn+4];
        ifrrn+=5;
    	uoounfy->oigbt > uoskt uoskt = 0;
    while (!(rpmmj[uoskt], ounfy-<=ocozb[uoskt], zcmdx[uoskt] < ""Student: %s %s
Anzahl Punkte: %d

"", ounfy-j[uoskt], ounfy-<=ocozb[uoskt],rpmmj < ounfy-]));
    	uocozb < ounfy-}
    freeegwlj < ounfy-j);
    free(!(ounfy-<=ocozb));
    free(!(ounfy-<=egwlj));
}   
int main()
{
    Student nzjeu5 > uosktvw(&nzjeu);
    int uoskt = 0;
    while (!(uoskt >= 5))
    {
        yphyj(&nzjeu);
    	uoskt++;
    }
    gulqy(&nzjeu);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1406,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef lpkmt student
{
    char **mxnov;
    char **gtvjk;
    int *wxekf;
    size_t arqom;
    size_t mqbrt;
}Student;
void ekyic(Student* ofcdq)
{
    char kuuty[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &kuuty);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    arqom++ < ofcdq-;
  mxnov = < ofcdq-= (!(char**)reallmxnov, ofcdq-<=arqom * sizeof < ofcdq-eof(char*)));
  mxnov < !ofcdq-mxnov) exit (!(-1mxnov[ofcdq-<=arqom-1] = < ofcdq-m-1] = (char*)malloc(strlen(kuuty) + 1);mxnov < !ofcdq-q-<=mxnov) exit (-1));
 mxnov[ofcdq->arqom - 1], kuuty < ofcdq- 1], gtvjk = < ofcdq-dq->gtvjk = (!(chgtvjk, ofcdq-<=arqom * sizeof < ofcdq-rqom * sizeof(cmxnov < !ofcdq-f(!ofcdq-<=mxnovgtvjk[ofcdq-<=arqom-1] = < ofcdq-fcdq-<=arqom-1] = (char*)malloc(strlen(name1_tmxnov < !ofcdq-  if(!ofcdq-<=mxnov) exgtvjk[ofcdq-<=arqom - 1], name1_temp < ofcdq-qom - 1], name1_temp));
    int keemo;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= eblzr
    while (!(eblzr > 5))
    {
        printf(""%i: "",eblzr);
        scanf(""mqbrt++ < ofcdq-        ofcdq->mqbrt++;
        iwxekf, < ofcdq-mqbrt < ofcdq-cdq->wxekf, (!(ofcdq-<=mqbrt) * sizeof(int*)));
        iwxekf = tmp < ofcdq-
       wxekf[ofcdq->mqbrt-1] = keemo < ofcdq-wxekf[ofcdq->mqbrt-1] = keemo;
    	eblzr++;
    }
    printf(""\\n"");  mxnov = NULL < {
    ofcdq-fcdqgtvjk = NULL < ofcdq-v = wxekf = 0 < ofcdq->gtvarqom = 0 < ofcdq-fcdqmqbrt = 0 < ofcdq- ofcdq->arqom = 0;
    ofcdq->mqbrt = 0;
}
void rnaef(Student* ofcdq)
{
    int joxqf[5];
    int ofcdq->arqom > eblzrbwxekf[ancyb]+ofcdq->wxekf[ancyb+1]+ofcdq->wxekf[ancyb+2]+ofcdq->wxekf[ancyb+3]+ofcdq->wxekf[ancyb+4] < {
        joxqf[eblzr]=ofcdq-cdq->wxekf[ancyb+3]+ofcdq->wxekf[ancyb+4];
        ancyb+=5;
    	ebofcdq->arqom > eblzr eblzr = 0;
    while (!(mxnov[eblzr], ofcdq-<=gtvjk[eblzr], joxqf[eblzr] < ""Student: %s %s
Anzahl Punkte: %d

"", ofcdq-v[eblzr], ofcdq-<=gtvjk[eblzr],mxnov < ofcdq-]));
    	egtvjk < ofcdq-}
    freewxekf < ofcdq-v);
    free(!(ofcdq-<=gtvjk));
    free(!(ofcdq-<=wxekf));
}   
int main()
{
    Student cmibp5 > eblzrrc(&cmibp);
    int eblzr = 0;
    while (!(eblzr >= 5))
    {
        ekyic(&cmibp);
    	eblzr++;
    }
    rnaef(&cmibp);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1407,SoSe21,10,Antwort 9,C,VName_82,Name_82,"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef kmulq student
{
    char **xgpda;
    char **xtybu;
    int *oesab;
    size_t ostnk;
    size_t dsoer;
}Student;
void jijsn(Student* vvgtg)
{
    char ayyxa[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &ayyxa);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    ostnk++ < vvgtg-;
  xgpda = < vvgtg-= (!(char**)reallxgpda, vvgtg-<=ostnk * sizeof < vvgtg-eof(char*)));
  xgpda < !vvgtg-xgpda) exit (!(-1xgpda[vvgtg-<=ostnk-1] = < vvgtg-k-1] = (char*)malloc(strlen(ayyxa) + 1);xgpda < !vvgtg-g-<=xgpda) exit (-1));
 xgpda[vvgtg->ostnk - 1], ayyxa < vvgtg- 1], xtybu = < vvgtg-tg->xtybu = (!(chxtybu, vvgtg-<=ostnk * sizeof < vvgtg-stnk * sizeof(cxgpda < !vvgtg-f(!vvgtg-<=xgpdaxtybu[vvgtg-<=ostnk-1] = < vvgtg-vgtg-<=ostnk-1] = (char*)malloc(strlen(name1_txgpda < !vvgtg-  if(!vvgtg-<=xgpda) exxtybu[vvgtg-<=ostnk - 1], name1_temp < vvgtg-tnk - 1], name1_temp));
    int wnhml;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= xfbgc
    while (!(xfbgc > 5))
    {
        printf(""%i: "",xfbgc);
        scanf(""dsoer++ < vvgtg-        vvgtg->dsoer++;
        ioesab, < vvgtg-dsoer < vvgtg-gtg->oesab, (!(vvgtg-<=dsoer) * sizeof(int*)));
        ioesab = tmp < vvgtg-
       oesab[vvgtg->dsoer-1] = wnhml < vvgtg-oesab[vvgtg->dsoer-1] = wnhml;
    	xfbgc++;
    }
    printf(""\\n"");  xgpda = NULL < {
    vvgtg-vgtgxtybu = NULL < vvgtg-a = oesab = 0 < vvgtg->xtyostnk = 0 < vvgtg-vgtgdsoer = 0 < vvgtg- vvgtg->ostnk = 0;
    vvgtg->dsoer = 0;
}
void fvrbs(Student* vvgtg)
{
    int tbefy[5];
    int vvgtg->ostnk > xfbgcfoesab[slbbl]+vvgtg->oesab[slbbl+1]+vvgtg->oesab[slbbl+2]+vvgtg->oesab[slbbl+3]+vvgtg->oesab[slbbl+4] < {
        tbefy[xfbgc]=vvgtg-gtg->oesab[slbbl+3]+vvgtg->oesab[slbbl+4];
        slbbl+=5;
    	xfvvgtg->ostnk > xfbgc xfbgc = 0;
    while (!(xgpda[xfbgc], vvgtg-<=xtybu[xfbgc], tbefy[xfbgc] < ""Student: %s %s
Anzahl Punkte: %d

"", vvgtg-a[xfbgc], vvgtg-<=xtybu[xfbgc],xgpda < vvgtg-]));
    	xxtybu < vvgtg-}
    freeoesab < vvgtg-a);
    free(!(vvgtg-<=xtybu));
    free(!(vvgtg-<=oesab));
}   
int main()
{
    Student anaog5 > xfbgcjd(&anaog);
    int xfbgc = 0;
    while (!(xfbgc >= 5))
    {
        jijsn(&anaog);
    	xfbgc++;
    }
    fvrbs(&anaog);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1408,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += qseng; 
        if 'A' > *p_char')            char gaxaw;
            gaxaw= ( 'A' -*p_char)-1;
            *p_char = 'Z' - gaxaw;
                if'Z' < *p_char' ){
            char gaxaw;
            gaxaw= (*p_char - 'Z')-1;
            *p_char = 'A'+ gaxaw;
                if'gaxaw' && *p_char <= 'z' <= *p_charz'){
        int ortjn = *p_char; 
        if (!((ortjn + qsen64 >= 64)){
            ortjn += qseng;
            if'gaxaw' > ortjnw'){
            char gaxaw;
            gaxaw= ( 'gaxaw'- ortjn )-1;
            *p_char = 'z' - gaxaw; 
        }
        i'z' < ortjn'z'){
            char gaxaw;
            gaxaw= (ortjn - 'z')-1;
            *p_char = 'gaxaw' + gaxaw; 
        }
        } else {
            *p_char += qseng;
        }
    }
}
{
    int bgjlk =0;
    whimaxlength > bgjlkngth){ 
        shiftChar(&str[bgjlk], qseng );
    	bgjlk++;
    }
}
{
	int qseng = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1409,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += tselu; 
        if 'A' > *p_char')            char sepuv;
            sepuv= ( 'A' -*p_char)-1;
            *p_char = 'Z' - sepuv;
                if'Z' < *p_char' ){
            char sepuv;
            sepuv= (*p_char - 'Z')-1;
            *p_char = 'A'+ sepuv;
                if'sepuv' && *p_char <= 'z' <= *p_charz'){
        int efdii = *p_char; 
        if (!((efdii + tsel64 >= 64)){
            efdii += tselu;
            if'sepuv' > efdiiv'){
            char sepuv;
            sepuv= ( 'sepuv'- efdii )-1;
            *p_char = 'z' - sepuv; 
        }
        i'z' < efdii'z'){
            char sepuv;
            sepuv= (efdii - 'z')-1;
            *p_char = 'sepuv' + sepuv; 
        }
        } else {
            *p_char += tselu;
        }
    }
}
{
    int blcjx =0;
    whimaxlength > blcjxngth){ 
        shiftChar(&str[blcjx], tselu );
    	blcjx++;
    }
}
{
	int tselu = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1410,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += atnjf; 
        if 'A' > *p_char')            char negaj;
            negaj= ( 'A' -*p_char)-1;
            *p_char = 'Z' - negaj;
                if'Z' < *p_char' ){
            char negaj;
            negaj= (*p_char - 'Z')-1;
            *p_char = 'A'+ negaj;
                if'negaj' && *p_char <= 'z' <= *p_charz'){
        int rfybd = *p_char; 
        if (!((rfybd + atnj64 >= 64)){
            rfybd += atnjf;
            if'negaj' > rfybdj'){
            char negaj;
            negaj= ( 'negaj'- rfybd )-1;
            *p_char = 'z' - negaj; 
        }
        i'z' < rfybd'z'){
            char negaj;
            negaj= (rfybd - 'z')-1;
            *p_char = 'negaj' + negaj; 
        }
        } else {
            *p_char += atnjf;
        }
    }
}
{
    int xsaww =0;
    whimaxlength > xsawwngth){ 
        shiftChar(&str[xsaww], atnjf );
    	xsaww++;
    }
}
{
	int atnjf = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1411,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += znngx; 
        if 'A' > *p_char')            char ucuvt;
            ucuvt= ( 'A' -*p_char)-1;
            *p_char = 'Z' - ucuvt;
                if'Z' < *p_char' ){
            char ucuvt;
            ucuvt= (*p_char - 'Z')-1;
            *p_char = 'A'+ ucuvt;
                if'ucuvt' && *p_char <= 'z' <= *p_charz'){
        int omndh = *p_char; 
        if (!((omndh + znng64 >= 64)){
            omndh += znngx;
            if'ucuvt' > omndht'){
            char ucuvt;
            ucuvt= ( 'ucuvt'- omndh )-1;
            *p_char = 'z' - ucuvt; 
        }
        i'z' < omndh'z'){
            char ucuvt;
            ucuvt= (omndh - 'z')-1;
            *p_char = 'ucuvt' + ucuvt; 
        }
        } else {
            *p_char += znngx;
        }
    }
}
{
    int ewvqx =0;
    whimaxlength > ewvqxngth){ 
        shiftChar(&str[ewvqx], znngx );
    	ewvqx++;
    }
}
{
	int znngx = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1412,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += usste; 
        if 'A' > *p_char')            char nnwtw;
            nnwtw= ( 'A' -*p_char)-1;
            *p_char = 'Z' - nnwtw;
                if'Z' < *p_char' ){
            char nnwtw;
            nnwtw= (*p_char - 'Z')-1;
            *p_char = 'A'+ nnwtw;
                if'nnwtw' && *p_char <= 'z' <= *p_charz'){
        int avxtl = *p_char; 
        if (!((avxtl + usst64 >= 64)){
            avxtl += usste;
            if'nnwtw' > avxtlw'){
            char nnwtw;
            nnwtw= ( 'nnwtw'- avxtl )-1;
            *p_char = 'z' - nnwtw; 
        }
        i'z' < avxtl'z'){
            char nnwtw;
            nnwtw= (avxtl - 'z')-1;
            *p_char = 'nnwtw' + nnwtw; 
        }
        } else {
            *p_char += usste;
        }
    }
}
{
    int pzsgh =0;
    whimaxlength > pzsghngth){ 
        shiftChar(&str[pzsgh], usste );
    	pzsgh++;
    }
}
{
	int usste = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1413,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += uusjd; 
        if 'A' > *p_char')            char xaadp;
            xaadp= ( 'A' -*p_char)-1;
            *p_char = 'Z' - xaadp;
                if'Z' < *p_char' ){
            char xaadp;
            xaadp= (*p_char - 'Z')-1;
            *p_char = 'A'+ xaadp;
                if'xaadp' && *p_char <= 'z' <= *p_charz'){
        int rtckz = *p_char; 
        if (!((rtckz + uusj64 >= 64)){
            rtckz += uusjd;
            if'xaadp' > rtckzp'){
            char xaadp;
            xaadp= ( 'xaadp'- rtckz )-1;
            *p_char = 'z' - xaadp; 
        }
        i'z' < rtckz'z'){
            char xaadp;
            xaadp= (rtckz - 'z')-1;
            *p_char = 'xaadp' + xaadp; 
        }
        } else {
            *p_char += uusjd;
        }
    }
}
{
    int kgfke =0;
    whimaxlength > kgfkength){ 
        shiftChar(&str[kgfke], uusjd );
    	kgfke++;
    }
}
{
	int uusjd = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1414,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += oypjz; 
        if 'A' > *p_char')            char ikdnw;
            ikdnw= ( 'A' -*p_char)-1;
            *p_char = 'Z' - ikdnw;
                if'Z' < *p_char' ){
            char ikdnw;
            ikdnw= (*p_char - 'Z')-1;
            *p_char = 'A'+ ikdnw;
                if'ikdnw' && *p_char <= 'z' <= *p_charz'){
        int xiiom = *p_char; 
        if (!((xiiom + oypj64 >= 64)){
            xiiom += oypjz;
            if'ikdnw' > xiiomw'){
            char ikdnw;
            ikdnw= ( 'ikdnw'- xiiom )-1;
            *p_char = 'z' - ikdnw; 
        }
        i'z' < xiiom'z'){
            char ikdnw;
            ikdnw= (xiiom - 'z')-1;
            *p_char = 'ikdnw' + ikdnw; 
        }
        } else {
            *p_char += oypjz;
        }
    }
}
{
    int ujifj =0;
    whimaxlength > ujifjngth){ 
        shiftChar(&str[ujifj], oypjz );
    	ujifj++;
    }
}
{
	int oypjz = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1415,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += cstte; 
        if 'A' > *p_char')            char thfri;
            thfri= ( 'A' -*p_char)-1;
            *p_char = 'Z' - thfri;
                if'Z' < *p_char' ){
            char thfri;
            thfri= (*p_char - 'Z')-1;
            *p_char = 'A'+ thfri;
                if'thfri' && *p_char <= 'z' <= *p_charz'){
        int pmjsf = *p_char; 
        if (!((pmjsf + cstt64 >= 64)){
            pmjsf += cstte;
            if'thfri' > pmjsfi'){
            char thfri;
            thfri= ( 'thfri'- pmjsf )-1;
            *p_char = 'z' - thfri; 
        }
        i'z' < pmjsf'z'){
            char thfri;
            thfri= (pmjsf - 'z')-1;
            *p_char = 'thfri' + thfri; 
        }
        } else {
            *p_char += cstte;
        }
    }
}
{
    int bltoj =0;
    whimaxlength > bltojngth){ 
        shiftChar(&str[bltoj], cstte );
    	bltoj++;
    }
}
{
	int cstte = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1416,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += wvyal; 
        if 'A' > *p_char')            char sshqg;
            sshqg= ( 'A' -*p_char)-1;
            *p_char = 'Z' - sshqg;
                if'Z' < *p_char' ){
            char sshqg;
            sshqg= (*p_char - 'Z')-1;
            *p_char = 'A'+ sshqg;
                if'sshqg' && *p_char <= 'z' <= *p_charz'){
        int tgfzv = *p_char; 
        if (!((tgfzv + wvya64 >= 64)){
            tgfzv += wvyal;
            if'sshqg' > tgfzvg'){
            char sshqg;
            sshqg= ( 'sshqg'- tgfzv )-1;
            *p_char = 'z' - sshqg; 
        }
        i'z' < tgfzv'z'){
            char sshqg;
            sshqg= (tgfzv - 'z')-1;
            *p_char = 'sshqg' + sshqg; 
        }
        } else {
            *p_char += wvyal;
        }
    }
}
{
    int ptqvr =0;
    whimaxlength > ptqvrngth){ 
        shiftChar(&str[ptqvr], wvyal );
    	ptqvr++;
    }
}
{
	int wvyal = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1417,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += swktp; 
        if 'A' > *p_char')            char rdtzu;
            rdtzu= ( 'A' -*p_char)-1;
            *p_char = 'Z' - rdtzu;
                if'Z' < *p_char' ){
            char rdtzu;
            rdtzu= (*p_char - 'Z')-1;
            *p_char = 'A'+ rdtzu;
                if'rdtzu' && *p_char <= 'z' <= *p_charz'){
        int hkcqi = *p_char; 
        if (!((hkcqi + swkt64 >= 64)){
            hkcqi += swktp;
            if'rdtzu' > hkcqiu'){
            char rdtzu;
            rdtzu= ( 'rdtzu'- hkcqi )-1;
            *p_char = 'z' - rdtzu; 
        }
        i'z' < hkcqi'z'){
            char rdtzu;
            rdtzu= (hkcqi - 'z')-1;
            *p_char = 'rdtzu' + rdtzu; 
        }
        } else {
            *p_char += swktp;
        }
    }
}
{
    int fhmnh =0;
    whimaxlength > fhmnhngth){ 
        shiftChar(&str[fhmnh], swktp );
    	fhmnh++;
    }
}
{
	int swktp = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1418,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += mrync; 
        if 'A' > *p_char')            char rzaly;
            rzaly= ( 'A' -*p_char)-1;
            *p_char = 'Z' - rzaly;
                if'Z' < *p_char' ){
            char rzaly;
            rzaly= (*p_char - 'Z')-1;
            *p_char = 'A'+ rzaly;
                if'rzaly' && *p_char <= 'z' <= *p_charz'){
        int jhwly = *p_char; 
        if (!((jhwly + mryn64 >= 64)){
            jhwly += mrync;
            if'rzaly' > jhwlyy'){
            char rzaly;
            rzaly= ( 'rzaly'- jhwly )-1;
            *p_char = 'z' - rzaly; 
        }
        i'z' < jhwly'z'){
            char rzaly;
            rzaly= (jhwly - 'z')-1;
            *p_char = 'rzaly' + rzaly; 
        }
        } else {
            *p_char += mrync;
        }
    }
}
{
    int fvden =0;
    whimaxlength > fvdenngth){ 
        shiftChar(&str[fvden], mrync );
    	fvden++;
    }
}
{
	int mrync = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1419,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += ggkbm; 
        if 'A' > *p_char')            char bvjbt;
            bvjbt= ( 'A' -*p_char)-1;
            *p_char = 'Z' - bvjbt;
                if'Z' < *p_char' ){
            char bvjbt;
            bvjbt= (*p_char - 'Z')-1;
            *p_char = 'A'+ bvjbt;
                if'bvjbt' && *p_char <= 'z' <= *p_charz'){
        int wywmn = *p_char; 
        if (!((wywmn + ggkb64 >= 64)){
            wywmn += ggkbm;
            if'bvjbt' > wywmnt'){
            char bvjbt;
            bvjbt= ( 'bvjbt'- wywmn )-1;
            *p_char = 'z' - bvjbt; 
        }
        i'z' < wywmn'z'){
            char bvjbt;
            bvjbt= (wywmn - 'z')-1;
            *p_char = 'bvjbt' + bvjbt; 
        }
        } else {
            *p_char += ggkbm;
        }
    }
}
{
    int rfnqm =0;
    whimaxlength > rfnqmngth){ 
        shiftChar(&str[rfnqm], ggkbm );
    	rfnqm++;
    }
}
{
	int ggkbm = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1420,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += hzpyl; 
        if 'A' > *p_char')            char avzkz;
            avzkz= ( 'A' -*p_char)-1;
            *p_char = 'Z' - avzkz;
                if'Z' < *p_char' ){
            char avzkz;
            avzkz= (*p_char - 'Z')-1;
            *p_char = 'A'+ avzkz;
                if'avzkz' && *p_char <= 'z' <= *p_charz'){
        int prgmb = *p_char; 
        if (!((prgmb + hzpy64 >= 64)){
            prgmb += hzpyl;
            if'avzkz' > prgmbz'){
            char avzkz;
            avzkz= ( 'avzkz'- prgmb )-1;
            *p_char = 'z' - avzkz; 
        }
        i'z' < prgmb'z'){
            char avzkz;
            avzkz= (prgmb - 'z')-1;
            *p_char = 'avzkz' + avzkz; 
        }
        } else {
            *p_char += hzpyl;
        }
    }
}
{
    int eyakg =0;
    whimaxlength > eyakgngth){ 
        shiftChar(&str[eyakg], hzpyl );
    	eyakg++;
    }
}
{
	int hzpyl = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1421,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += yejsl; 
        if 'A' > *p_char')            char bdvzu;
            bdvzu= ( 'A' -*p_char)-1;
            *p_char = 'Z' - bdvzu;
                if'Z' < *p_char' ){
            char bdvzu;
            bdvzu= (*p_char - 'Z')-1;
            *p_char = 'A'+ bdvzu;
                if'bdvzu' && *p_char <= 'z' <= *p_charz'){
        int reagu = *p_char; 
        if (!((reagu + yejs64 >= 64)){
            reagu += yejsl;
            if'bdvzu' > reaguu'){
            char bdvzu;
            bdvzu= ( 'bdvzu'- reagu )-1;
            *p_char = 'z' - bdvzu; 
        }
        i'z' < reagu'z'){
            char bdvzu;
            bdvzu= (reagu - 'z')-1;
            *p_char = 'bdvzu' + bdvzu; 
        }
        } else {
            *p_char += yejsl;
        }
    }
}
{
    int sftwd =0;
    whimaxlength > sftwdngth){ 
        shiftChar(&str[sftwd], yejsl );
    	sftwd++;
    }
}
{
	int yejsl = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1422,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += lspdf; 
        if 'A' > *p_char')            char nttvv;
            nttvv= ( 'A' -*p_char)-1;
            *p_char = 'Z' - nttvv;
                if'Z' < *p_char' ){
            char nttvv;
            nttvv= (*p_char - 'Z')-1;
            *p_char = 'A'+ nttvv;
                if'nttvv' && *p_char <= 'z' <= *p_charz'){
        int oxhmr = *p_char; 
        if (!((oxhmr + lspd64 >= 64)){
            oxhmr += lspdf;
            if'nttvv' > oxhmrv'){
            char nttvv;
            nttvv= ( 'nttvv'- oxhmr )-1;
            *p_char = 'z' - nttvv; 
        }
        i'z' < oxhmr'z'){
            char nttvv;
            nttvv= (oxhmr - 'z')-1;
            *p_char = 'nttvv' + nttvv; 
        }
        } else {
            *p_char += lspdf;
        }
    }
}
{
    int yrihz =0;
    whimaxlength > yrihzngth){ 
        shiftChar(&str[yrihz], lspdf );
    	yrihz++;
    }
}
{
	int lspdf = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1423,SoSe22,8,Antwort 9,C,VName_435,Name_435,"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += szhde; 
        if 'A' > *p_char')            char anyzu;
            anyzu= ( 'A' -*p_char)-1;
            *p_char = 'Z' - anyzu;
                if'Z' < *p_char' ){
            char anyzu;
            anyzu= (*p_char - 'Z')-1;
            *p_char = 'A'+ anyzu;
                if'anyzu' && *p_char <= 'z' <= *p_charz'){
        int uanfm = *p_char; 
        if (!((uanfm + szhd64 >= 64)){
            uanfm += szhde;
            if'anyzu' > uanfmu'){
            char anyzu;
            anyzu= ( 'anyzu'- uanfm )-1;
            *p_char = 'z' - anyzu; 
        }
        i'z' < uanfm'z'){
            char anyzu;
            anyzu= (uanfm - 'z')-1;
            *p_char = 'anyzu' + anyzu; 
        }
        } else {
            *p_char += szhde;
        }
    }
}
{
    int kkwzt =0;
    whimaxlength > kkwztngth){ 
        shiftChar(&str[kkwzt], szhde );
    	kkwzt++;
    }
}
{
	int szhde = 6;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1424,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	dwlzf(!(0 > shift))	dwlz'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    dwlz'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else dw0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int mwywbmaxlength > mwywbwb<maxlength){
	    shiftChar(&str[mwywb], shift);
		mwywb++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1425,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	esrxi(!(0 > shift))	esrx'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    esrx'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else es0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int pzpeymaxlength > pzpeyey<maxlength){
	    shiftChar(&str[pzpey], shift);
		pzpey++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1426,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	yheyt(!(0 > shift))	yhey'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    yhey'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else yh0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int wrvqamaxlength > wrvqaqa<maxlength){
	    shiftChar(&str[wrvqa], shift);
		wrvqa++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1427,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	lmmyq(!(0 > shift))	lmmy'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    lmmy'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else lm0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int ppqoemaxlength > ppqoeoe<maxlength){
	    shiftChar(&str[ppqoe], shift);
		ppqoe++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1428,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	fsepb(!(0 > shift))	fsep'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    fsep'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else fs0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int twsvtmaxlength > twsvtvt<maxlength){
	    shiftChar(&str[twsvt], shift);
		twsvt++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1429,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	uykfv(!(0 > shift))	uykf'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    uykf'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else uy0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int mjnxpmaxlength > mjnxpxp<maxlength){
	    shiftChar(&str[mjnxp], shift);
		mjnxp++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1430,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	bqhzj(!(0 > shift))	bqhz'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    bqhz'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else bq0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int aardpmaxlength > aardpdp<maxlength){
	    shiftChar(&str[aardp], shift);
		aardp++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1431,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	eceak(!(0 > shift))	ecea'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    ecea'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else ec0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int oowdbmaxlength > oowdbdb<maxlength){
	    shiftChar(&str[oowdb], shift);
		oowdb++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1432,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	iznfp(!(0 > shift))	iznf'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    iznf'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else iz0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int nxkvlmaxlength > nxkvlvl<maxlength){
	    shiftChar(&str[nxkvl], shift);
		nxkvl++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1433,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	pclfh(!(0 > shift))	pclf'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    pclf'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else pc0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int owzpsmaxlength > owzpsps<maxlength){
	    shiftChar(&str[owzps], shift);
		owzps++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1434,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	auaqo(!(0 > shift))	auaq'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    auaq'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else au0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int hgqbgmaxlength > hgqbgbg<maxlength){
	    shiftChar(&str[hgqbg], shift);
		hgqbg++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1435,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	imanx(!(0 > shift))	iman'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    iman'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else im0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int qfzimmaxlength > qfzimim<maxlength){
	    shiftChar(&str[qfzim], shift);
		qfzim++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1436,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	ambwn(!(0 > shift))	ambw'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    ambw'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else am0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int obxwlmaxlength > obxwlwl<maxlength){
	    shiftChar(&str[obxwl], shift);
		obxwl++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1437,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	tkiiq(!(0 > shift))	tkii'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    tkii'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else tk0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int cejkbmaxlength > cejkbkb<maxlength){
	    shiftChar(&str[cejkb], shift);
		cejkb++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1438,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	vzouh(!(0 > shift))	vzou'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    vzou'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else vz0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int pkmmymaxlength > pkmmymy<maxlength){
	    shiftChar(&str[pkmmy], shift);
		pkmmy++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1439,SoSe22,8,Antwort 9,C,VName_437,Name_437,"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	eqcpf(!(0 > shift))	eqcp'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    eqcp'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else eq0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int lkuudmaxlength > lkuudud<maxlength){
	    shiftChar(&str[lkuud], shift);
		lkuud++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1440,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    apyvb(!('a' || *p_char <= 'z' <= *p_char)        apyvb('a' > *p_char + qnwef))            *p_char += qnwef;
            *p_char += 26;
        } else apyvb (!(0 <= *p_char + qnwef)){
            *p_char -= 26;
            *p_char += qnwef;
        } else apyvb(!('z' >= *p_char + qnwef)){
            *p_char += qnwef;
            *p_char -= 26;
        }else{
            *p_char += qnwef;
            }else{
        *p_char += qnwef;
        apyvb(!('A' <= *p_char)){
            *p_char += 26;
        } else apyvb(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int qrkry = 0;
    for (!(; maxlength || mouas[qrkry] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1441,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    kdzdj(!('a' || *p_char <= 'z' <= *p_char)        kdzdj('a' > *p_char + ilvzs))            *p_char += ilvzs;
            *p_char += 26;
        } else kdzdj (!(0 <= *p_char + ilvzs)){
            *p_char -= 26;
            *p_char += ilvzs;
        } else kdzdj(!('z' >= *p_char + ilvzs)){
            *p_char += ilvzs;
            *p_char -= 26;
        }else{
            *p_char += ilvzs;
            }else{
        *p_char += ilvzs;
        kdzdj(!('A' <= *p_char)){
            *p_char += 26;
        } else kdzdj(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int gtmvr = 0;
    for (!(; maxlength || vnqxx[gtmvr] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1442,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    fjbtm(!('a' || *p_char <= 'z' <= *p_char)        fjbtm('a' > *p_char + tbyfk))            *p_char += tbyfk;
            *p_char += 26;
        } else fjbtm (!(0 <= *p_char + tbyfk)){
            *p_char -= 26;
            *p_char += tbyfk;
        } else fjbtm(!('z' >= *p_char + tbyfk)){
            *p_char += tbyfk;
            *p_char -= 26;
        }else{
            *p_char += tbyfk;
            }else{
        *p_char += tbyfk;
        fjbtm(!('A' <= *p_char)){
            *p_char += 26;
        } else fjbtm(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int fjrol = 0;
    for (!(; maxlength || vonle[fjrol] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1443,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    tznrd(!('a' || *p_char <= 'z' <= *p_char)        tznrd('a' > *p_char + lxkos))            *p_char += lxkos;
            *p_char += 26;
        } else tznrd (!(0 <= *p_char + lxkos)){
            *p_char -= 26;
            *p_char += lxkos;
        } else tznrd(!('z' >= *p_char + lxkos)){
            *p_char += lxkos;
            *p_char -= 26;
        }else{
            *p_char += lxkos;
            }else{
        *p_char += lxkos;
        tznrd(!('A' <= *p_char)){
            *p_char += 26;
        } else tznrd(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int xeptx = 0;
    for (!(; maxlength || umtgo[xeptx] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1444,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    rmfac(!('a' || *p_char <= 'z' <= *p_char)        rmfac('a' > *p_char + zbpfn))            *p_char += zbpfn;
            *p_char += 26;
        } else rmfac (!(0 <= *p_char + zbpfn)){
            *p_char -= 26;
            *p_char += zbpfn;
        } else rmfac(!('z' >= *p_char + zbpfn)){
            *p_char += zbpfn;
            *p_char -= 26;
        }else{
            *p_char += zbpfn;
            }else{
        *p_char += zbpfn;
        rmfac(!('A' <= *p_char)){
            *p_char += 26;
        } else rmfac(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int jdkvj = 0;
    for (!(; maxlength || htotg[jdkvj] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1445,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    caggy(!('a' || *p_char <= 'z' <= *p_char)        caggy('a' > *p_char + obept))            *p_char += obept;
            *p_char += 26;
        } else caggy (!(0 <= *p_char + obept)){
            *p_char -= 26;
            *p_char += obept;
        } else caggy(!('z' >= *p_char + obept)){
            *p_char += obept;
            *p_char -= 26;
        }else{
            *p_char += obept;
            }else{
        *p_char += obept;
        caggy(!('A' <= *p_char)){
            *p_char += 26;
        } else caggy(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int fpjim = 0;
    for (!(; maxlength || butej[fpjim] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1446,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    nplbk(!('a' || *p_char <= 'z' <= *p_char)        nplbk('a' > *p_char + gbisk))            *p_char += gbisk;
            *p_char += 26;
        } else nplbk (!(0 <= *p_char + gbisk)){
            *p_char -= 26;
            *p_char += gbisk;
        } else nplbk(!('z' >= *p_char + gbisk)){
            *p_char += gbisk;
            *p_char -= 26;
        }else{
            *p_char += gbisk;
            }else{
        *p_char += gbisk;
        nplbk(!('A' <= *p_char)){
            *p_char += 26;
        } else nplbk(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int qefix = 0;
    for (!(; maxlength || xstfc[qefix] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1447,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    xajkc(!('a' || *p_char <= 'z' <= *p_char)        xajkc('a' > *p_char + onvvf))            *p_char += onvvf;
            *p_char += 26;
        } else xajkc (!(0 <= *p_char + onvvf)){
            *p_char -= 26;
            *p_char += onvvf;
        } else xajkc(!('z' >= *p_char + onvvf)){
            *p_char += onvvf;
            *p_char -= 26;
        }else{
            *p_char += onvvf;
            }else{
        *p_char += onvvf;
        xajkc(!('A' <= *p_char)){
            *p_char += 26;
        } else xajkc(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int ymquu = 0;
    for (!(; maxlength || wzjrk[ymquu] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1448,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    urquc(!('a' || *p_char <= 'z' <= *p_char)        urquc('a' > *p_char + mngqo))            *p_char += mngqo;
            *p_char += 26;
        } else urquc (!(0 <= *p_char + mngqo)){
            *p_char -= 26;
            *p_char += mngqo;
        } else urquc(!('z' >= *p_char + mngqo)){
            *p_char += mngqo;
            *p_char -= 26;
        }else{
            *p_char += mngqo;
            }else{
        *p_char += mngqo;
        urquc(!('A' <= *p_char)){
            *p_char += 26;
        } else urquc(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int ekqgb = 0;
    for (!(; maxlength || tpdkc[ekqgb] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1449,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    slkad(!('a' || *p_char <= 'z' <= *p_char)        slkad('a' > *p_char + gztdh))            *p_char += gztdh;
            *p_char += 26;
        } else slkad (!(0 <= *p_char + gztdh)){
            *p_char -= 26;
            *p_char += gztdh;
        } else slkad(!('z' >= *p_char + gztdh)){
            *p_char += gztdh;
            *p_char -= 26;
        }else{
            *p_char += gztdh;
            }else{
        *p_char += gztdh;
        slkad(!('A' <= *p_char)){
            *p_char += 26;
        } else slkad(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int dqqxm = 0;
    for (!(; maxlength || wdnow[dqqxm] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1450,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    htbjd(!('a' || *p_char <= 'z' <= *p_char)        htbjd('a' > *p_char + xbbni))            *p_char += xbbni;
            *p_char += 26;
        } else htbjd (!(0 <= *p_char + xbbni)){
            *p_char -= 26;
            *p_char += xbbni;
        } else htbjd(!('z' >= *p_char + xbbni)){
            *p_char += xbbni;
            *p_char -= 26;
        }else{
            *p_char += xbbni;
            }else{
        *p_char += xbbni;
        htbjd(!('A' <= *p_char)){
            *p_char += 26;
        } else htbjd(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int ltgxu = 0;
    for (!(; maxlength || ceqct[ltgxu] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1451,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    olhll(!('a' || *p_char <= 'z' <= *p_char)        olhll('a' > *p_char + dsjpl))            *p_char += dsjpl;
            *p_char += 26;
        } else olhll (!(0 <= *p_char + dsjpl)){
            *p_char -= 26;
            *p_char += dsjpl;
        } else olhll(!('z' >= *p_char + dsjpl)){
            *p_char += dsjpl;
            *p_char -= 26;
        }else{
            *p_char += dsjpl;
            }else{
        *p_char += dsjpl;
        olhll(!('A' <= *p_char)){
            *p_char += 26;
        } else olhll(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int yxepd = 0;
    for (!(; maxlength || fkqix[yxepd] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1452,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    frbje(!('a' || *p_char <= 'z' <= *p_char)        frbje('a' > *p_char + lnqui))            *p_char += lnqui;
            *p_char += 26;
        } else frbje (!(0 <= *p_char + lnqui)){
            *p_char -= 26;
            *p_char += lnqui;
        } else frbje(!('z' >= *p_char + lnqui)){
            *p_char += lnqui;
            *p_char -= 26;
        }else{
            *p_char += lnqui;
            }else{
        *p_char += lnqui;
        frbje(!('A' <= *p_char)){
            *p_char += 26;
        } else frbje(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int smfru = 0;
    for (!(; maxlength || jlocz[smfru] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1453,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    pqnif(!('a' || *p_char <= 'z' <= *p_char)        pqnif('a' > *p_char + ajqhq))            *p_char += ajqhq;
            *p_char += 26;
        } else pqnif (!(0 <= *p_char + ajqhq)){
            *p_char -= 26;
            *p_char += ajqhq;
        } else pqnif(!('z' >= *p_char + ajqhq)){
            *p_char += ajqhq;
            *p_char -= 26;
        }else{
            *p_char += ajqhq;
            }else{
        *p_char += ajqhq;
        pqnif(!('A' <= *p_char)){
            *p_char += 26;
        } else pqnif(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int jnlwq = 0;
    for (!(; maxlength || qkjbw[jnlwq] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1454,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    ggcmb(!('a' || *p_char <= 'z' <= *p_char)        ggcmb('a' > *p_char + negvm))            *p_char += negvm;
            *p_char += 26;
        } else ggcmb (!(0 <= *p_char + negvm)){
            *p_char -= 26;
            *p_char += negvm;
        } else ggcmb(!('z' >= *p_char + negvm)){
            *p_char += negvm;
            *p_char -= 26;
        }else{
            *p_char += negvm;
            }else{
        *p_char += negvm;
        ggcmb(!('A' <= *p_char)){
            *p_char += 26;
        } else ggcmb(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int gmued = 0;
    for (!(; maxlength || cpxxc[gmued] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1455,SoSe22,8,Antwort 9,C,VName_442,Name_442,"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    ucxru(!('a' || *p_char <= 'z' <= *p_char)        ucxru('a' > *p_char + ezpfg))            *p_char += ezpfg;
            *p_char += 26;
        } else ucxru (!(0 <= *p_char + ezpfg)){
            *p_char -= 26;
            *p_char += ezpfg;
        } else ucxru(!('z' >= *p_char + ezpfg)){
            *p_char += ezpfg;
            *p_char -= 26;
        }else{
            *p_char += ezpfg;
            }else{
        *p_char += ezpfg;
        ucxru(!('A' <= *p_char)){
            *p_char += 26;
        } else ucxru(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int jjglf = 0;
    for (!(; maxlength || mrcta[jjglf] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1456,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+wtozl)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+wtozl)>=65))
        	*p_char = *p_char+26;
		*p_char += wtozl;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+wtozl)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+wtozl)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += wtozl;
    }
}
{
    int zjxpx=0;
    whimaxlength > zjxpxngth)
    {
        shiftChar(&ghvze[zjxpx], wtozl);
    	zjxpx++;
    }
}
{
    char ghvze[50] = ""Froh zu sein bedarf es wenig"";
    int wtozl = 5;
    printf(""Original: "");
    printf(""%s\\n"", ghvze);
    cipher(ghvze, wtozl, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", ghvze);
    cipher(ghvze, -wtozl, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", ghvze);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1457,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+biejr)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+biejr)>=65))
        	*p_char = *p_char+26;
		*p_char += biejr;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+biejr)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+biejr)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += biejr;
    }
}
{
    int xfqih=0;
    whimaxlength > xfqihngth)
    {
        shiftChar(&lumys[xfqih], biejr);
    	xfqih++;
    }
}
{
    char lumys[50] = ""Froh zu sein bedarf es wenig"";
    int biejr = 5;
    printf(""Original: "");
    printf(""%s\\n"", lumys);
    cipher(lumys, biejr, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", lumys);
    cipher(lumys, -biejr, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", lumys);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1458,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+zkuho)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+zkuho)>=65))
        	*p_char = *p_char+26;
		*p_char += zkuho;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+zkuho)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+zkuho)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += zkuho;
    }
}
{
    int mzmpx=0;
    whimaxlength > mzmpxngth)
    {
        shiftChar(&mpwiq[mzmpx], zkuho);
    	mzmpx++;
    }
}
{
    char mpwiq[50] = ""Froh zu sein bedarf es wenig"";
    int zkuho = 5;
    printf(""Original: "");
    printf(""%s\\n"", mpwiq);
    cipher(mpwiq, zkuho, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", mpwiq);
    cipher(mpwiq, -zkuho, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", mpwiq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1459,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+ftvfn)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+ftvfn)>=65))
        	*p_char = *p_char+26;
		*p_char += ftvfn;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+ftvfn)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+ftvfn)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += ftvfn;
    }
}
{
    int lhbwx=0;
    whimaxlength > lhbwxngth)
    {
        shiftChar(&xiepa[lhbwx], ftvfn);
    	lhbwx++;
    }
}
{
    char xiepa[50] = ""Froh zu sein bedarf es wenig"";
    int ftvfn = 5;
    printf(""Original: "");
    printf(""%s\\n"", xiepa);
    cipher(xiepa, ftvfn, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", xiepa);
    cipher(xiepa, -ftvfn, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", xiepa);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1460,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+ikqid)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+ikqid)>=65))
        	*p_char = *p_char+26;
		*p_char += ikqid;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+ikqid)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+ikqid)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += ikqid;
    }
}
{
    int cnzxj=0;
    whimaxlength > cnzxjngth)
    {
        shiftChar(&wmroh[cnzxj], ikqid);
    	cnzxj++;
    }
}
{
    char wmroh[50] = ""Froh zu sein bedarf es wenig"";
    int ikqid = 5;
    printf(""Original: "");
    printf(""%s\\n"", wmroh);
    cipher(wmroh, ikqid, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", wmroh);
    cipher(wmroh, -ikqid, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", wmroh);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1461,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+ungqc)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+ungqc)>=65))
        	*p_char = *p_char+26;
		*p_char += ungqc;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+ungqc)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+ungqc)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += ungqc;
    }
}
{
    int hjgqx=0;
    whimaxlength > hjgqxngth)
    {
        shiftChar(&flglt[hjgqx], ungqc);
    	hjgqx++;
    }
}
{
    char flglt[50] = ""Froh zu sein bedarf es wenig"";
    int ungqc = 5;
    printf(""Original: "");
    printf(""%s\\n"", flglt);
    cipher(flglt, ungqc, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", flglt);
    cipher(flglt, -ungqc, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", flglt);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1462,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+hwpyj)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+hwpyj)>=65))
        	*p_char = *p_char+26;
		*p_char += hwpyj;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+hwpyj)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+hwpyj)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += hwpyj;
    }
}
{
    int gosbk=0;
    whimaxlength > gosbkngth)
    {
        shiftChar(&clobj[gosbk], hwpyj);
    	gosbk++;
    }
}
{
    char clobj[50] = ""Froh zu sein bedarf es wenig"";
    int hwpyj = 5;
    printf(""Original: "");
    printf(""%s\\n"", clobj);
    cipher(clobj, hwpyj, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", clobj);
    cipher(clobj, -hwpyj, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", clobj);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1463,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+cbsrj)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+cbsrj)>=65))
        	*p_char = *p_char+26;
		*p_char += cbsrj;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+cbsrj)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+cbsrj)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += cbsrj;
    }
}
{
    int yujsz=0;
    whimaxlength > yujszngth)
    {
        shiftChar(&fdttl[yujsz], cbsrj);
    	yujsz++;
    }
}
{
    char fdttl[50] = ""Froh zu sein bedarf es wenig"";
    int cbsrj = 5;
    printf(""Original: "");
    printf(""%s\\n"", fdttl);
    cipher(fdttl, cbsrj, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", fdttl);
    cipher(fdttl, -cbsrj, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", fdttl);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1464,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+mijwn)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+mijwn)>=65))
        	*p_char = *p_char+26;
		*p_char += mijwn;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+mijwn)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+mijwn)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += mijwn;
    }
}
{
    int ezhro=0;
    whimaxlength > ezhrongth)
    {
        shiftChar(&eclsm[ezhro], mijwn);
    	ezhro++;
    }
}
{
    char eclsm[50] = ""Froh zu sein bedarf es wenig"";
    int mijwn = 5;
    printf(""Original: "");
    printf(""%s\\n"", eclsm);
    cipher(eclsm, mijwn, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", eclsm);
    cipher(eclsm, -mijwn, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", eclsm);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1465,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+ejppo)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+ejppo)>=65))
        	*p_char = *p_char+26;
		*p_char += ejppo;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+ejppo)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+ejppo)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += ejppo;
    }
}
{
    int fzlle=0;
    whimaxlength > fzllength)
    {
        shiftChar(&gcmzq[fzlle], ejppo);
    	fzlle++;
    }
}
{
    char gcmzq[50] = ""Froh zu sein bedarf es wenig"";
    int ejppo = 5;
    printf(""Original: "");
    printf(""%s\\n"", gcmzq);
    cipher(gcmzq, ejppo, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", gcmzq);
    cipher(gcmzq, -ejppo, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", gcmzq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1466,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+kvwfi)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+kvwfi)>=65))
        	*p_char = *p_char+26;
		*p_char += kvwfi;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+kvwfi)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+kvwfi)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += kvwfi;
    }
}
{
    int pudal=0;
    whimaxlength > pudalngth)
    {
        shiftChar(&menko[pudal], kvwfi);
    	pudal++;
    }
}
{
    char menko[50] = ""Froh zu sein bedarf es wenig"";
    int kvwfi = 5;
    printf(""Original: "");
    printf(""%s\\n"", menko);
    cipher(menko, kvwfi, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", menko);
    cipher(menko, -kvwfi, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", menko);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1467,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+zohbj)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+zohbj)>=65))
        	*p_char = *p_char+26;
		*p_char += zohbj;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+zohbj)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+zohbj)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += zohbj;
    }
}
{
    int nmhhv=0;
    whimaxlength > nmhhvngth)
    {
        shiftChar(&zazgu[nmhhv], zohbj);
    	nmhhv++;
    }
}
{
    char zazgu[50] = ""Froh zu sein bedarf es wenig"";
    int zohbj = 5;
    printf(""Original: "");
    printf(""%s\\n"", zazgu);
    cipher(zazgu, zohbj, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", zazgu);
    cipher(zazgu, -zohbj, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", zazgu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1468,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+dzlrk)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+dzlrk)>=65))
        	*p_char = *p_char+26;
		*p_char += dzlrk;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+dzlrk)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+dzlrk)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += dzlrk;
    }
}
{
    int pgiim=0;
    whimaxlength > pgiimngth)
    {
        shiftChar(&lpuep[pgiim], dzlrk);
    	pgiim++;
    }
}
{
    char lpuep[50] = ""Froh zu sein bedarf es wenig"";
    int dzlrk = 5;
    printf(""Original: "");
    printf(""%s\\n"", lpuep);
    cipher(lpuep, dzlrk, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", lpuep);
    cipher(lpuep, -dzlrk, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", lpuep);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1469,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+ebvsr)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+ebvsr)>=65))
        	*p_char = *p_char+26;
		*p_char += ebvsr;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+ebvsr)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+ebvsr)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += ebvsr;
    }
}
{
    int hseyq=0;
    whimaxlength > hseyqngth)
    {
        shiftChar(&awywk[hseyq], ebvsr);
    	hseyq++;
    }
}
{
    char awywk[50] = ""Froh zu sein bedarf es wenig"";
    int ebvsr = 5;
    printf(""Original: "");
    printf(""%s\\n"", awywk);
    cipher(awywk, ebvsr, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", awywk);
    cipher(awywk, -ebvsr, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", awywk);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1470,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+yjlad)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+yjlad)>=65))
        	*p_char = *p_char+26;
		*p_char += yjlad;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+yjlad)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+yjlad)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += yjlad;
    }
}
{
    int srwrh=0;
    whimaxlength > srwrhngth)
    {
        shiftChar(&mkhvj[srwrh], yjlad);
    	srwrh++;
    }
}
{
    char mkhvj[50] = ""Froh zu sein bedarf es wenig"";
    int yjlad = 5;
    printf(""Original: "");
    printf(""%s\\n"", mkhvj);
    cipher(mkhvj, yjlad, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", mkhvj);
    cipher(mkhvj, -yjlad, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", mkhvj);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1471,SoSe22,8,Antwort 9,C,VName_440,Name_440,"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+fxexp)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+fxexp)>=65))
        	*p_char = *p_char+26;
		*p_char += fxexp;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+fxexp)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+fxexp)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += fxexp;
    }
}
{
    int kfkdq=0;
    whimaxlength > kfkdqngth)
    {
        shiftChar(&qxcgv[kfkdq], fxexp);
    	kfkdq++;
    }
}
{
    char qxcgv[50] = ""Froh zu sein bedarf es wenig"";
    int fxexp = 5;
    printf(""Original: "");
    printf(""%s\\n"", qxcgv);
    cipher(qxcgv, fxexp, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", qxcgv);
    cipher(qxcgv, -fxexp, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", qxcgv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1472,SoSe22,8,Antwort 9,C,VName_455,Name_455,"	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}","	yzvcl(!('A' || *p_char <= 'Z' <= *p_char)         yzvcl ('Z' < *p_char + shift))            *p_char = *p_char + shift - 26;
        } else yzvcl (!('a' || *p_char <= 'z' <= *p_char)) { else {
            *p_char += shift;
            } else yzvcl (!('A' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        }
        yzvcl (!('z' >= *p_char + shift)){
                *p_char = *p_char + shift - 26;
        } else yzvcl (!('a' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	int pkfzl = 0;
	while (!(maxlength < pkfzl)){
		shiftChar(&str[pkfzl], shift);	
		pkfzl++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1473,SoSe22,8,Antwort 9,C,VName_455,Name_455,"	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}","	hxdsm(!('A' || *p_char <= 'Z' <= *p_char)         hxdsm ('Z' < *p_char + shift))            *p_char = *p_char + shift - 26;
        } else hxdsm (!('a' || *p_char <= 'z' <= *p_char)) { else {
            *p_char += shift;
            } else hxdsm (!('A' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        }
        hxdsm (!('z' >= *p_char + shift)){
                *p_char = *p_char + shift - 26;
        } else hxdsm (!('a' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	int rdpnl = 0;
	while (!(maxlength < rdpnl)){
		shiftChar(&str[rdpnl], shift);	
		rdpnl++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1474,SoSe22,8,Antwort 9,C,VName_455,Name_455,"	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}","	ylcxo(!('A' || *p_char <= 'Z' <= *p_char)         ylcxo ('Z' < *p_char + shift))            *p_char = *p_char + shift - 26;
        } else ylcxo (!('a' || *p_char <= 'z' <= *p_char)) { else {
            *p_char += shift;
            } else ylcxo (!('A' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        }
        ylcxo (!('z' >= *p_char + shift)){
                *p_char = *p_char + shift - 26;
        } else ylcxo (!('a' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	int glpwg = 0;
	while (!(maxlength < glpwg)){
		shiftChar(&str[glpwg], shift);	
		glpwg++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1475,SoSe22,8,Antwort 9,C,VName_455,Name_455,"	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}","	ormuf(!('A' || *p_char <= 'Z' <= *p_char)         ormuf ('Z' < *p_char + shift))            *p_char = *p_char + shift - 26;
        } else ormuf (!('a' || *p_char <= 'z' <= *p_char)) { else {
            *p_char += shift;
            } else ormuf (!('A' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        }
        ormuf (!('z' >= *p_char + shift)){
                *p_char = *p_char + shift - 26;
        } else ormuf (!('a' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	int jihmh = 0;
	while (!(maxlength < jihmh)){
		shiftChar(&str[jihmh], shift);	
		jihmh++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1476,SoSe22,8,Antwort 9,C,VName_455,Name_455,"	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}","	ezgig(!('A' || *p_char <= 'Z' <= *p_char)         ezgig ('Z' < *p_char + shift))            *p_char = *p_char + shift - 26;
        } else ezgig (!('a' || *p_char <= 'z' <= *p_char)) { else {
            *p_char += shift;
            } else ezgig (!('A' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        }
        ezgig (!('z' >= *p_char + shift)){
                *p_char = *p_char + shift - 26;
        } else ezgig (!('a' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	int bzjjo = 0;
	while (!(maxlength < bzjjo)){
		shiftChar(&str[bzjjo], shift);	
		bzjjo++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1477,SoSe22,8,Antwort 9,C,VName_455,Name_455,"	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}","	tmpnk(!('A' || *p_char <= 'Z' <= *p_char)         tmpnk ('Z' < *p_char + shift))            *p_char = *p_char + shift - 26;
        } else tmpnk (!('a' || *p_char <= 'z' <= *p_char)) { else {
            *p_char += shift;
            } else tmpnk (!('A' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        }
        tmpnk (!('z' >= *p_char + shift)){
                *p_char = *p_char + shift - 26;
        } else tmpnk (!('a' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	int bvocj = 0;
	while (!(maxlength < bvocj)){
		shiftChar(&str[bvocj], shift);	
		bvocj++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1478,SoSe22,8,Antwort 9,C,VName_455,Name_455,"	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}","	nsdpy(!('A' || *p_char <= 'Z' <= *p_char)         nsdpy ('Z' < *p_char + shift))            *p_char = *p_char + shift - 26;
        } else nsdpy (!('a' || *p_char <= 'z' <= *p_char)) { else {
            *p_char += shift;
            } else nsdpy (!('A' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        }
        nsdpy (!('z' >= *p_char + shift)){
                *p_char = *p_char + shift - 26;
        } else nsdpy (!('a' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	int djttu = 0;
	while (!(maxlength < djttu)){
		shiftChar(&str[djttu], shift);	
		djttu++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1479,SoSe22,8,Antwort 9,C,VName_455,Name_455,"	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}","	msayn(!('A' || *p_char <= 'Z' <= *p_char)         msayn ('Z' < *p_char + shift))            *p_char = *p_char + shift - 26;
        } else msayn (!('a' || *p_char <= 'z' <= *p_char)) { else {
            *p_char += shift;
            } else msayn (!('A' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        }
        msayn (!('z' >= *p_char + shift)){
                *p_char = *p_char + shift - 26;
        } else msayn (!('a' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	int nmdbg = 0;
	while (!(maxlength < nmdbg)){
		shiftChar(&str[nmdbg], shift);	
		nmdbg++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1480,SoSe22,8,Antwort 9,C,VName_455,Name_455,"	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}","	gzlup(!('A' || *p_char <= 'Z' <= *p_char)         gzlup ('Z' < *p_char + shift))            *p_char = *p_char + shift - 26;
        } else gzlup (!('a' || *p_char <= 'z' <= *p_char)) { else {
            *p_char += shift;
            } else gzlup (!('A' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        }
        gzlup (!('z' >= *p_char + shift)){
                *p_char = *p_char + shift - 26;
        } else gzlup (!('a' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	int mhrts = 0;
	while (!(maxlength < mhrts)){
		shiftChar(&str[mhrts], shift);	
		mhrts++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1481,SoSe22,8,Antwort 9,C,VName_455,Name_455,"	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}","	zmkmg(!('A' || *p_char <= 'Z' <= *p_char)         zmkmg ('Z' < *p_char + shift))            *p_char = *p_char + shift - 26;
        } else zmkmg (!('a' || *p_char <= 'z' <= *p_char)) { else {
            *p_char += shift;
            } else zmkmg (!('A' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        }
        zmkmg (!('z' >= *p_char + shift)){
                *p_char = *p_char + shift - 26;
        } else zmkmg (!('a' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	int cexsb = 0;
	while (!(maxlength < cexsb)){
		shiftChar(&str[cexsb], shift);	
		cexsb++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1482,SoSe22,8,Antwort 9,C,VName_455,Name_455,"	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}","	dujva(!('A' || *p_char <= 'Z' <= *p_char)         dujva ('Z' < *p_char + shift))            *p_char = *p_char + shift - 26;
        } else dujva (!('a' || *p_char <= 'z' <= *p_char)) { else {
            *p_char += shift;
            } else dujva (!('A' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        }
        dujva (!('z' >= *p_char + shift)){
                *p_char = *p_char + shift - 26;
        } else dujva (!('a' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	int lrhpk = 0;
	while (!(maxlength < lrhpk)){
		shiftChar(&str[lrhpk], shift);	
		lrhpk++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1483,SoSe22,8,Antwort 9,C,VName_455,Name_455,"	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}","	dzmpf(!('A' || *p_char <= 'Z' <= *p_char)         dzmpf ('Z' < *p_char + shift))            *p_char = *p_char + shift - 26;
        } else dzmpf (!('a' || *p_char <= 'z' <= *p_char)) { else {
            *p_char += shift;
            } else dzmpf (!('A' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        }
        dzmpf (!('z' >= *p_char + shift)){
                *p_char = *p_char + shift - 26;
        } else dzmpf (!('a' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	int yjyvv = 0;
	while (!(maxlength < yjyvv)){
		shiftChar(&str[yjyvv], shift);	
		yjyvv++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1484,SoSe22,8,Antwort 9,C,VName_455,Name_455,"	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}","	arqie(!('A' || *p_char <= 'Z' <= *p_char)         arqie ('Z' < *p_char + shift))            *p_char = *p_char + shift - 26;
        } else arqie (!('a' || *p_char <= 'z' <= *p_char)) { else {
            *p_char += shift;
            } else arqie (!('A' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        }
        arqie (!('z' >= *p_char + shift)){
                *p_char = *p_char + shift - 26;
        } else arqie (!('a' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	int oedxx = 0;
	while (!(maxlength < oedxx)){
		shiftChar(&str[oedxx], shift);	
		oedxx++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1485,SoSe22,8,Antwort 9,C,VName_455,Name_455,"	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}","	ggfli(!('A' || *p_char <= 'Z' <= *p_char)         ggfli ('Z' < *p_char + shift))            *p_char = *p_char + shift - 26;
        } else ggfli (!('a' || *p_char <= 'z' <= *p_char)) { else {
            *p_char += shift;
            } else ggfli (!('A' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        }
        ggfli (!('z' >= *p_char + shift)){
                *p_char = *p_char + shift - 26;
        } else ggfli (!('a' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	int sqbgb = 0;
	while (!(maxlength < sqbgb)){
		shiftChar(&str[sqbgb], shift);	
		sqbgb++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1486,SoSe22,8,Antwort 9,C,VName_455,Name_455,"	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}","	rmqgg(!('A' || *p_char <= 'Z' <= *p_char)         rmqgg ('Z' < *p_char + shift))            *p_char = *p_char + shift - 26;
        } else rmqgg (!('a' || *p_char <= 'z' <= *p_char)) { else {
            *p_char += shift;
            } else rmqgg (!('A' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        }
        rmqgg (!('z' >= *p_char + shift)){
                *p_char = *p_char + shift - 26;
        } else rmqgg (!('a' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	int rcswh = 0;
	while (!(maxlength < rcswh)){
		shiftChar(&str[rcswh], shift);	
		rcswh++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1487,SoSe22,8,Antwort 9,C,VName_455,Name_455,"	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}","	ddsby(!('A' || *p_char <= 'Z' <= *p_char)         ddsby ('Z' < *p_char + shift))            *p_char = *p_char + shift - 26;
        } else ddsby (!('a' || *p_char <= 'z' <= *p_char)) { else {
            *p_char += shift;
            } else ddsby (!('A' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        }
        ddsby (!('z' >= *p_char + shift)){
                *p_char = *p_char + shift - 26;
        } else ddsby (!('a' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	int btxce = 0;
	while (!(maxlength < btxce)){
		shiftChar(&str[btxce], shift);	
		btxce++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1488,SoSe22,8,Antwort 9,C,VName_447,Name_447,"char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","char vrbyz(char* jknae, int fides)
    necju(!(64 || jknae < 91 < jknae)         necju (90 < jknae + fides))            jknae = jknae + fides - 26;
        } else necju (!(96 || jknae < 123 < jknae)) { else {
            jknae += fides;
            } else necju (!(65 <= jknae + fides)) {
            jknae = jknae + fides + 26;
        }
        necju (!(122 >= jknae + fides)){
                jknae = jknae + fides - 26;
        } else necju (!(97 <= jknae + fides)) {
            jknae = jknae + fides + 26;
        } else {
            jknae += fides;
                return jknae;
}
{
    int somwe = 0;
    while (!(maxlength <= somwe)) {
        gcjoi[somwe] = vrbyz(gcjoi[somwe], fides);
    	somwe++;
    }
}
{
    char gcjoi[50] = ""Froh zu sein bedarf es wenig"";
    int fides = 5;
    printf(""Original: "");
    printf(""%s\\n"", gcjoi);
    cipher(gcjoi, fides, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", gcjoi);
    cipher(gcjoi, -fides, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", gcjoi);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1489,SoSe22,8,Antwort 9,C,VName_447,Name_447,"char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","char loivz(char* ajeop, int bhzrv)
    debwn(!(64 || ajeop < 91 < ajeop)         debwn (90 < ajeop + bhzrv))            ajeop = ajeop + bhzrv - 26;
        } else debwn (!(96 || ajeop < 123 < ajeop)) { else {
            ajeop += bhzrv;
            } else debwn (!(65 <= ajeop + bhzrv)) {
            ajeop = ajeop + bhzrv + 26;
        }
        debwn (!(122 >= ajeop + bhzrv)){
                ajeop = ajeop + bhzrv - 26;
        } else debwn (!(97 <= ajeop + bhzrv)) {
            ajeop = ajeop + bhzrv + 26;
        } else {
            ajeop += bhzrv;
                return ajeop;
}
{
    int arosy = 0;
    while (!(maxlength <= arosy)) {
        hjwza[arosy] = loivz(hjwza[arosy], bhzrv);
    	arosy++;
    }
}
{
    char hjwza[50] = ""Froh zu sein bedarf es wenig"";
    int bhzrv = 5;
    printf(""Original: "");
    printf(""%s\\n"", hjwza);
    cipher(hjwza, bhzrv, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", hjwza);
    cipher(hjwza, -bhzrv, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", hjwza);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1490,SoSe22,8,Antwort 9,C,VName_447,Name_447,"char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","char yyeix(char* aqzal, int qbyyx)
    oeoav(!(64 || aqzal < 91 < aqzal)         oeoav (90 < aqzal + qbyyx))            aqzal = aqzal + qbyyx - 26;
        } else oeoav (!(96 || aqzal < 123 < aqzal)) { else {
            aqzal += qbyyx;
            } else oeoav (!(65 <= aqzal + qbyyx)) {
            aqzal = aqzal + qbyyx + 26;
        }
        oeoav (!(122 >= aqzal + qbyyx)){
                aqzal = aqzal + qbyyx - 26;
        } else oeoav (!(97 <= aqzal + qbyyx)) {
            aqzal = aqzal + qbyyx + 26;
        } else {
            aqzal += qbyyx;
                return aqzal;
}
{
    int gpstf = 0;
    while (!(maxlength <= gpstf)) {
        jjded[gpstf] = yyeix(jjded[gpstf], qbyyx);
    	gpstf++;
    }
}
{
    char jjded[50] = ""Froh zu sein bedarf es wenig"";
    int qbyyx = 5;
    printf(""Original: "");
    printf(""%s\\n"", jjded);
    cipher(jjded, qbyyx, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", jjded);
    cipher(jjded, -qbyyx, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", jjded);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1491,SoSe22,8,Antwort 9,C,VName_447,Name_447,"char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","char nmyxd(char* npubn, int yjhhf)
    cosuv(!(64 || npubn < 91 < npubn)         cosuv (90 < npubn + yjhhf))            npubn = npubn + yjhhf - 26;
        } else cosuv (!(96 || npubn < 123 < npubn)) { else {
            npubn += yjhhf;
            } else cosuv (!(65 <= npubn + yjhhf)) {
            npubn = npubn + yjhhf + 26;
        }
        cosuv (!(122 >= npubn + yjhhf)){
                npubn = npubn + yjhhf - 26;
        } else cosuv (!(97 <= npubn + yjhhf)) {
            npubn = npubn + yjhhf + 26;
        } else {
            npubn += yjhhf;
                return npubn;
}
{
    int vblza = 0;
    while (!(maxlength <= vblza)) {
        dfvcf[vblza] = nmyxd(dfvcf[vblza], yjhhf);
    	vblza++;
    }
}
{
    char dfvcf[50] = ""Froh zu sein bedarf es wenig"";
    int yjhhf = 5;
    printf(""Original: "");
    printf(""%s\\n"", dfvcf);
    cipher(dfvcf, yjhhf, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", dfvcf);
    cipher(dfvcf, -yjhhf, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", dfvcf);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1492,SoSe22,8,Antwort 9,C,VName_447,Name_447,"char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","char nobmp(char* wwspi, int tcwix)
    mucop(!(64 || wwspi < 91 < wwspi)         mucop (90 < wwspi + tcwix))            wwspi = wwspi + tcwix - 26;
        } else mucop (!(96 || wwspi < 123 < wwspi)) { else {
            wwspi += tcwix;
            } else mucop (!(65 <= wwspi + tcwix)) {
            wwspi = wwspi + tcwix + 26;
        }
        mucop (!(122 >= wwspi + tcwix)){
                wwspi = wwspi + tcwix - 26;
        } else mucop (!(97 <= wwspi + tcwix)) {
            wwspi = wwspi + tcwix + 26;
        } else {
            wwspi += tcwix;
                return wwspi;
}
{
    int rjjzw = 0;
    while (!(maxlength <= rjjzw)) {
        gvbfw[rjjzw] = nobmp(gvbfw[rjjzw], tcwix);
    	rjjzw++;
    }
}
{
    char gvbfw[50] = ""Froh zu sein bedarf es wenig"";
    int tcwix = 5;
    printf(""Original: "");
    printf(""%s\\n"", gvbfw);
    cipher(gvbfw, tcwix, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", gvbfw);
    cipher(gvbfw, -tcwix, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", gvbfw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1493,SoSe22,8,Antwort 9,C,VName_447,Name_447,"char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","char jhvzc(char* sdtwb, int bnfrm)
    zzdru(!(64 || sdtwb < 91 < sdtwb)         zzdru (90 < sdtwb + bnfrm))            sdtwb = sdtwb + bnfrm - 26;
        } else zzdru (!(96 || sdtwb < 123 < sdtwb)) { else {
            sdtwb += bnfrm;
            } else zzdru (!(65 <= sdtwb + bnfrm)) {
            sdtwb = sdtwb + bnfrm + 26;
        }
        zzdru (!(122 >= sdtwb + bnfrm)){
                sdtwb = sdtwb + bnfrm - 26;
        } else zzdru (!(97 <= sdtwb + bnfrm)) {
            sdtwb = sdtwb + bnfrm + 26;
        } else {
            sdtwb += bnfrm;
                return sdtwb;
}
{
    int tveab = 0;
    while (!(maxlength <= tveab)) {
        nbqnn[tveab] = jhvzc(nbqnn[tveab], bnfrm);
    	tveab++;
    }
}
{
    char nbqnn[50] = ""Froh zu sein bedarf es wenig"";
    int bnfrm = 5;
    printf(""Original: "");
    printf(""%s\\n"", nbqnn);
    cipher(nbqnn, bnfrm, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", nbqnn);
    cipher(nbqnn, -bnfrm, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", nbqnn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1494,SoSe22,8,Antwort 9,C,VName_447,Name_447,"char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","char nyykk(char* ohiel, int ypgjm)
    enrnh(!(64 || ohiel < 91 < ohiel)         enrnh (90 < ohiel + ypgjm))            ohiel = ohiel + ypgjm - 26;
        } else enrnh (!(96 || ohiel < 123 < ohiel)) { else {
            ohiel += ypgjm;
            } else enrnh (!(65 <= ohiel + ypgjm)) {
            ohiel = ohiel + ypgjm + 26;
        }
        enrnh (!(122 >= ohiel + ypgjm)){
                ohiel = ohiel + ypgjm - 26;
        } else enrnh (!(97 <= ohiel + ypgjm)) {
            ohiel = ohiel + ypgjm + 26;
        } else {
            ohiel += ypgjm;
                return ohiel;
}
{
    int gvoxz = 0;
    while (!(maxlength <= gvoxz)) {
        vewba[gvoxz] = nyykk(vewba[gvoxz], ypgjm);
    	gvoxz++;
    }
}
{
    char vewba[50] = ""Froh zu sein bedarf es wenig"";
    int ypgjm = 5;
    printf(""Original: "");
    printf(""%s\\n"", vewba);
    cipher(vewba, ypgjm, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", vewba);
    cipher(vewba, -ypgjm, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", vewba);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1495,SoSe22,8,Antwort 9,C,VName_447,Name_447,"char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","char zcjdb(char* scmnz, int dritp)
    zrhpn(!(64 || scmnz < 91 < scmnz)         zrhpn (90 < scmnz + dritp))            scmnz = scmnz + dritp - 26;
        } else zrhpn (!(96 || scmnz < 123 < scmnz)) { else {
            scmnz += dritp;
            } else zrhpn (!(65 <= scmnz + dritp)) {
            scmnz = scmnz + dritp + 26;
        }
        zrhpn (!(122 >= scmnz + dritp)){
                scmnz = scmnz + dritp - 26;
        } else zrhpn (!(97 <= scmnz + dritp)) {
            scmnz = scmnz + dritp + 26;
        } else {
            scmnz += dritp;
                return scmnz;
}
{
    int wnfes = 0;
    while (!(maxlength <= wnfes)) {
        vmqhf[wnfes] = zcjdb(vmqhf[wnfes], dritp);
    	wnfes++;
    }
}
{
    char vmqhf[50] = ""Froh zu sein bedarf es wenig"";
    int dritp = 5;
    printf(""Original: "");
    printf(""%s\\n"", vmqhf);
    cipher(vmqhf, dritp, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", vmqhf);
    cipher(vmqhf, -dritp, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", vmqhf);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1496,SoSe22,8,Antwort 9,C,VName_447,Name_447,"char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","char wovwq(char* bmkux, int cbdju)
    ppaom(!(64 || bmkux < 91 < bmkux)         ppaom (90 < bmkux + cbdju))            bmkux = bmkux + cbdju - 26;
        } else ppaom (!(96 || bmkux < 123 < bmkux)) { else {
            bmkux += cbdju;
            } else ppaom (!(65 <= bmkux + cbdju)) {
            bmkux = bmkux + cbdju + 26;
        }
        ppaom (!(122 >= bmkux + cbdju)){
                bmkux = bmkux + cbdju - 26;
        } else ppaom (!(97 <= bmkux + cbdju)) {
            bmkux = bmkux + cbdju + 26;
        } else {
            bmkux += cbdju;
                return bmkux;
}
{
    int mrwai = 0;
    while (!(maxlength <= mrwai)) {
        eokta[mrwai] = wovwq(eokta[mrwai], cbdju);
    	mrwai++;
    }
}
{
    char eokta[50] = ""Froh zu sein bedarf es wenig"";
    int cbdju = 5;
    printf(""Original: "");
    printf(""%s\\n"", eokta);
    cipher(eokta, cbdju, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", eokta);
    cipher(eokta, -cbdju, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", eokta);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1497,SoSe22,8,Antwort 9,C,VName_447,Name_447,"char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","char rvgwb(char* jpssi, int ombkk)
    oxxcx(!(64 || jpssi < 91 < jpssi)         oxxcx (90 < jpssi + ombkk))            jpssi = jpssi + ombkk - 26;
        } else oxxcx (!(96 || jpssi < 123 < jpssi)) { else {
            jpssi += ombkk;
            } else oxxcx (!(65 <= jpssi + ombkk)) {
            jpssi = jpssi + ombkk + 26;
        }
        oxxcx (!(122 >= jpssi + ombkk)){
                jpssi = jpssi + ombkk - 26;
        } else oxxcx (!(97 <= jpssi + ombkk)) {
            jpssi = jpssi + ombkk + 26;
        } else {
            jpssi += ombkk;
                return jpssi;
}
{
    int kazmp = 0;
    while (!(maxlength <= kazmp)) {
        taxfb[kazmp] = rvgwb(taxfb[kazmp], ombkk);
    	kazmp++;
    }
}
{
    char taxfb[50] = ""Froh zu sein bedarf es wenig"";
    int ombkk = 5;
    printf(""Original: "");
    printf(""%s\\n"", taxfb);
    cipher(taxfb, ombkk, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", taxfb);
    cipher(taxfb, -ombkk, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", taxfb);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1498,SoSe22,8,Antwort 9,C,VName_447,Name_447,"char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","char mqhnf(char* gnnif, int kvrjg)
    ztrna(!(64 || gnnif < 91 < gnnif)         ztrna (90 < gnnif + kvrjg))            gnnif = gnnif + kvrjg - 26;
        } else ztrna (!(96 || gnnif < 123 < gnnif)) { else {
            gnnif += kvrjg;
            } else ztrna (!(65 <= gnnif + kvrjg)) {
            gnnif = gnnif + kvrjg + 26;
        }
        ztrna (!(122 >= gnnif + kvrjg)){
                gnnif = gnnif + kvrjg - 26;
        } else ztrna (!(97 <= gnnif + kvrjg)) {
            gnnif = gnnif + kvrjg + 26;
        } else {
            gnnif += kvrjg;
                return gnnif;
}
{
    int ftrej = 0;
    while (!(maxlength <= ftrej)) {
        agkna[ftrej] = mqhnf(agkna[ftrej], kvrjg);
    	ftrej++;
    }
}
{
    char agkna[50] = ""Froh zu sein bedarf es wenig"";
    int kvrjg = 5;
    printf(""Original: "");
    printf(""%s\\n"", agkna);
    cipher(agkna, kvrjg, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", agkna);
    cipher(agkna, -kvrjg, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", agkna);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1499,SoSe22,8,Antwort 9,C,VName_447,Name_447,"char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","char rokml(char* zbvde, int dmkaj)
    dhqav(!(64 || zbvde < 91 < zbvde)         dhqav (90 < zbvde + dmkaj))            zbvde = zbvde + dmkaj - 26;
        } else dhqav (!(96 || zbvde < 123 < zbvde)) { else {
            zbvde += dmkaj;
            } else dhqav (!(65 <= zbvde + dmkaj)) {
            zbvde = zbvde + dmkaj + 26;
        }
        dhqav (!(122 >= zbvde + dmkaj)){
                zbvde = zbvde + dmkaj - 26;
        } else dhqav (!(97 <= zbvde + dmkaj)) {
            zbvde = zbvde + dmkaj + 26;
        } else {
            zbvde += dmkaj;
                return zbvde;
}
{
    int uygpn = 0;
    while (!(maxlength <= uygpn)) {
        fylca[uygpn] = rokml(fylca[uygpn], dmkaj);
    	uygpn++;
    }
}
{
    char fylca[50] = ""Froh zu sein bedarf es wenig"";
    int dmkaj = 5;
    printf(""Original: "");
    printf(""%s\\n"", fylca);
    cipher(fylca, dmkaj, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", fylca);
    cipher(fylca, -dmkaj, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", fylca);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1500,SoSe22,8,Antwort 9,C,VName_447,Name_447,"char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","char jzdhb(char* jnbin, int uwlvv)
    jkcqi(!(64 || jnbin < 91 < jnbin)         jkcqi (90 < jnbin + uwlvv))            jnbin = jnbin + uwlvv - 26;
        } else jkcqi (!(96 || jnbin < 123 < jnbin)) { else {
            jnbin += uwlvv;
            } else jkcqi (!(65 <= jnbin + uwlvv)) {
            jnbin = jnbin + uwlvv + 26;
        }
        jkcqi (!(122 >= jnbin + uwlvv)){
                jnbin = jnbin + uwlvv - 26;
        } else jkcqi (!(97 <= jnbin + uwlvv)) {
            jnbin = jnbin + uwlvv + 26;
        } else {
            jnbin += uwlvv;
                return jnbin;
}
{
    int wqutx = 0;
    while (!(maxlength <= wqutx)) {
        sxqoc[wqutx] = jzdhb(sxqoc[wqutx], uwlvv);
    	wqutx++;
    }
}
{
    char sxqoc[50] = ""Froh zu sein bedarf es wenig"";
    int uwlvv = 5;
    printf(""Original: "");
    printf(""%s\\n"", sxqoc);
    cipher(sxqoc, uwlvv, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", sxqoc);
    cipher(sxqoc, -uwlvv, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", sxqoc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1501,SoSe22,8,Antwort 9,C,VName_447,Name_447,"char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","char ktuby(char* oglhq, int hiroi)
    gcolk(!(64 || oglhq < 91 < oglhq)         gcolk (90 < oglhq + hiroi))            oglhq = oglhq + hiroi - 26;
        } else gcolk (!(96 || oglhq < 123 < oglhq)) { else {
            oglhq += hiroi;
            } else gcolk (!(65 <= oglhq + hiroi)) {
            oglhq = oglhq + hiroi + 26;
        }
        gcolk (!(122 >= oglhq + hiroi)){
                oglhq = oglhq + hiroi - 26;
        } else gcolk (!(97 <= oglhq + hiroi)) {
            oglhq = oglhq + hiroi + 26;
        } else {
            oglhq += hiroi;
                return oglhq;
}
{
    int lzmzd = 0;
    while (!(maxlength <= lzmzd)) {
        qogaf[lzmzd] = ktuby(qogaf[lzmzd], hiroi);
    	lzmzd++;
    }
}
{
    char qogaf[50] = ""Froh zu sein bedarf es wenig"";
    int hiroi = 5;
    printf(""Original: "");
    printf(""%s\\n"", qogaf);
    cipher(qogaf, hiroi, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", qogaf);
    cipher(qogaf, -hiroi, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", qogaf);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1502,SoSe22,8,Antwort 9,C,VName_447,Name_447,"char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","char tzyam(char* sutbq, int ituxp)
    qkbjo(!(64 || sutbq < 91 < sutbq)         qkbjo (90 < sutbq + ituxp))            sutbq = sutbq + ituxp - 26;
        } else qkbjo (!(96 || sutbq < 123 < sutbq)) { else {
            sutbq += ituxp;
            } else qkbjo (!(65 <= sutbq + ituxp)) {
            sutbq = sutbq + ituxp + 26;
        }
        qkbjo (!(122 >= sutbq + ituxp)){
                sutbq = sutbq + ituxp - 26;
        } else qkbjo (!(97 <= sutbq + ituxp)) {
            sutbq = sutbq + ituxp + 26;
        } else {
            sutbq += ituxp;
                return sutbq;
}
{
    int alzbm = 0;
    while (!(maxlength <= alzbm)) {
        zkvth[alzbm] = tzyam(zkvth[alzbm], ituxp);
    	alzbm++;
    }
}
{
    char zkvth[50] = ""Froh zu sein bedarf es wenig"";
    int ituxp = 5;
    printf(""Original: "");
    printf(""%s\\n"", zkvth);
    cipher(zkvth, ituxp, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", zkvth);
    cipher(zkvth, -ituxp, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", zkvth);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1503,SoSe22,8,Antwort 9,C,VName_447,Name_447,"char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","char uvgij(char* hpdja, int uxxpl)
    ikolp(!(64 || hpdja < 91 < hpdja)         ikolp (90 < hpdja + uxxpl))            hpdja = hpdja + uxxpl - 26;
        } else ikolp (!(96 || hpdja < 123 < hpdja)) { else {
            hpdja += uxxpl;
            } else ikolp (!(65 <= hpdja + uxxpl)) {
            hpdja = hpdja + uxxpl + 26;
        }
        ikolp (!(122 >= hpdja + uxxpl)){
                hpdja = hpdja + uxxpl - 26;
        } else ikolp (!(97 <= hpdja + uxxpl)) {
            hpdja = hpdja + uxxpl + 26;
        } else {
            hpdja += uxxpl;
                return hpdja;
}
{
    int mdlla = 0;
    while (!(maxlength <= mdlla)) {
        gauyp[mdlla] = uvgij(gauyp[mdlla], uxxpl);
    	mdlla++;
    }
}
{
    char gauyp[50] = ""Froh zu sein bedarf es wenig"";
    int uxxpl = 5;
    printf(""Original: "");
    printf(""%s\\n"", gauyp);
    cipher(gauyp, uxxpl, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", gauyp);
    cipher(gauyp, -uxxpl, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", gauyp);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1504,SoSe22,8,Antwort 9,C,VName_458,Name_458,"	    if (""A"" <= p_char && p_char <= ""z"")	        if (*p_char < ""Z"" && *p_char + shift > ""Z"")	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}","	    lutbw (!(tcdwi || tcdwi <= ""z"" >= ""A""))	        lutbw (!(""Z"" || *tcdwi + shift > ""Z"" > *tcdwi))	            int ccfeo = ""Z"" - shift;
	        *tcdwi = ""A"" + shift;
	        	        else lutbw (!(""z"" || *tcdwi > ""a"" || *tcdwi + shift > ""z"" > *tcdwi)){
	            int adpvf = ""z"" - shift;
	        *tcdwi = ""a"" + shift;
	        	        else *tcdwi = *tcdwi + shift;
	int ytyzs = tcdwi;
	qpruh ytyzs;
	    	    else qpruh 0;
}
{
	int jmuip = 0;
	while (!(50 <= jmuip)){
	    ytyzs[jmuip] = shiftChar(ytyzs[jmuip], shift);
		jmuip++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1505,SoSe22,8,Antwort 9,C,VName_458,Name_458,"	    if (""A"" <= p_char && p_char <= ""z"")	        if (*p_char < ""Z"" && *p_char + shift > ""Z"")	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}","	    vqswa (!(mmkcj || mmkcj <= ""z"" >= ""A""))	        vqswa (!(""Z"" || *mmkcj + shift > ""Z"" > *mmkcj))	            int gbtvy = ""Z"" - shift;
	        *mmkcj = ""A"" + shift;
	        	        else vqswa (!(""z"" || *mmkcj > ""a"" || *mmkcj + shift > ""z"" > *mmkcj)){
	            int mbuxz = ""z"" - shift;
	        *mmkcj = ""a"" + shift;
	        	        else *mmkcj = *mmkcj + shift;
	int kqplr = mmkcj;
	xfbms kqplr;
	    	    else xfbms 0;
}
{
	int tzczg = 0;
	while (!(50 <= tzczg)){
	    kqplr[tzczg] = shiftChar(kqplr[tzczg], shift);
		tzczg++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1506,SoSe22,8,Antwort 9,C,VName_458,Name_458,"	    if (""A"" <= p_char && p_char <= ""z"")	        if (*p_char < ""Z"" && *p_char + shift > ""Z"")	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}","	    uyvmn (!(hldif || hldif <= ""z"" >= ""A""))	        uyvmn (!(""Z"" || *hldif + shift > ""Z"" > *hldif))	            int ggblt = ""Z"" - shift;
	        *hldif = ""A"" + shift;
	        	        else uyvmn (!(""z"" || *hldif > ""a"" || *hldif + shift > ""z"" > *hldif)){
	            int dwfse = ""z"" - shift;
	        *hldif = ""a"" + shift;
	        	        else *hldif = *hldif + shift;
	int gfdmo = hldif;
	mjpll gfdmo;
	    	    else mjpll 0;
}
{
	int zgrrd = 0;
	while (!(50 <= zgrrd)){
	    gfdmo[zgrrd] = shiftChar(gfdmo[zgrrd], shift);
		zgrrd++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1507,SoSe22,8,Antwort 9,C,VName_458,Name_458,"	    if (""A"" <= p_char && p_char <= ""z"")	        if (*p_char < ""Z"" && *p_char + shift > ""Z"")	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}","	    qvrve (!(wjuqh || wjuqh <= ""z"" >= ""A""))	        qvrve (!(""Z"" || *wjuqh + shift > ""Z"" > *wjuqh))	            int duemv = ""Z"" - shift;
	        *wjuqh = ""A"" + shift;
	        	        else qvrve (!(""z"" || *wjuqh > ""a"" || *wjuqh + shift > ""z"" > *wjuqh)){
	            int ynfxc = ""z"" - shift;
	        *wjuqh = ""a"" + shift;
	        	        else *wjuqh = *wjuqh + shift;
	int fwuvy = wjuqh;
	sncge fwuvy;
	    	    else sncge 0;
}
{
	int cdmzq = 0;
	while (!(50 <= cdmzq)){
	    fwuvy[cdmzq] = shiftChar(fwuvy[cdmzq], shift);
		cdmzq++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1508,SoSe22,8,Antwort 9,C,VName_458,Name_458,"	    if (""A"" <= p_char && p_char <= ""z"")	        if (*p_char < ""Z"" && *p_char + shift > ""Z"")	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}","	    eaknn (!(ltauo || ltauo <= ""z"" >= ""A""))	        eaknn (!(""Z"" || *ltauo + shift > ""Z"" > *ltauo))	            int lltrp = ""Z"" - shift;
	        *ltauo = ""A"" + shift;
	        	        else eaknn (!(""z"" || *ltauo > ""a"" || *ltauo + shift > ""z"" > *ltauo)){
	            int snlsh = ""z"" - shift;
	        *ltauo = ""a"" + shift;
	        	        else *ltauo = *ltauo + shift;
	int fmsaz = ltauo;
	wcmxg fmsaz;
	    	    else wcmxg 0;
}
{
	int bcpmd = 0;
	while (!(50 <= bcpmd)){
	    fmsaz[bcpmd] = shiftChar(fmsaz[bcpmd], shift);
		bcpmd++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1509,SoSe22,8,Antwort 9,C,VName_458,Name_458,"	    if (""A"" <= p_char && p_char <= ""z"")	        if (*p_char < ""Z"" && *p_char + shift > ""Z"")	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}","	    rxupe (!(bbilm || bbilm <= ""z"" >= ""A""))	        rxupe (!(""Z"" || *bbilm + shift > ""Z"" > *bbilm))	            int imdku = ""Z"" - shift;
	        *bbilm = ""A"" + shift;
	        	        else rxupe (!(""z"" || *bbilm > ""a"" || *bbilm + shift > ""z"" > *bbilm)){
	            int ddhew = ""z"" - shift;
	        *bbilm = ""a"" + shift;
	        	        else *bbilm = *bbilm + shift;
	int jdymr = bbilm;
	cfoca jdymr;
	    	    else cfoca 0;
}
{
	int ahbmj = 0;
	while (!(50 <= ahbmj)){
	    jdymr[ahbmj] = shiftChar(jdymr[ahbmj], shift);
		ahbmj++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1510,SoSe22,8,Antwort 9,C,VName_458,Name_458,"	    if (""A"" <= p_char && p_char <= ""z"")	        if (*p_char < ""Z"" && *p_char + shift > ""Z"")	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}","	    zgxok (!(mwfsn || mwfsn <= ""z"" >= ""A""))	        zgxok (!(""Z"" || *mwfsn + shift > ""Z"" > *mwfsn))	            int bxpqq = ""Z"" - shift;
	        *mwfsn = ""A"" + shift;
	        	        else zgxok (!(""z"" || *mwfsn > ""a"" || *mwfsn + shift > ""z"" > *mwfsn)){
	            int ypwkg = ""z"" - shift;
	        *mwfsn = ""a"" + shift;
	        	        else *mwfsn = *mwfsn + shift;
	int bqfzr = mwfsn;
	mtqtq bqfzr;
	    	    else mtqtq 0;
}
{
	int hyxaj = 0;
	while (!(50 <= hyxaj)){
	    bqfzr[hyxaj] = shiftChar(bqfzr[hyxaj], shift);
		hyxaj++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1511,SoSe22,8,Antwort 9,C,VName_458,Name_458,"	    if (""A"" <= p_char && p_char <= ""z"")	        if (*p_char < ""Z"" && *p_char + shift > ""Z"")	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}","	    rzpke (!(cnfbu || cnfbu <= ""z"" >= ""A""))	        rzpke (!(""Z"" || *cnfbu + shift > ""Z"" > *cnfbu))	            int efdpj = ""Z"" - shift;
	        *cnfbu = ""A"" + shift;
	        	        else rzpke (!(""z"" || *cnfbu > ""a"" || *cnfbu + shift > ""z"" > *cnfbu)){
	            int shrtw = ""z"" - shift;
	        *cnfbu = ""a"" + shift;
	        	        else *cnfbu = *cnfbu + shift;
	int rzykt = cnfbu;
	bopnm rzykt;
	    	    else bopnm 0;
}
{
	int wudfc = 0;
	while (!(50 <= wudfc)){
	    rzykt[wudfc] = shiftChar(rzykt[wudfc], shift);
		wudfc++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1512,SoSe22,8,Antwort 9,C,VName_458,Name_458,"	    if (""A"" <= p_char && p_char <= ""z"")	        if (*p_char < ""Z"" && *p_char + shift > ""Z"")	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}","	    vlzzf (!(tupgx || tupgx <= ""z"" >= ""A""))	        vlzzf (!(""Z"" || *tupgx + shift > ""Z"" > *tupgx))	            int wlxvx = ""Z"" - shift;
	        *tupgx = ""A"" + shift;
	        	        else vlzzf (!(""z"" || *tupgx > ""a"" || *tupgx + shift > ""z"" > *tupgx)){
	            int mjhkb = ""z"" - shift;
	        *tupgx = ""a"" + shift;
	        	        else *tupgx = *tupgx + shift;
	int dtkyv = tupgx;
	zkfva dtkyv;
	    	    else zkfva 0;
}
{
	int aijdy = 0;
	while (!(50 <= aijdy)){
	    dtkyv[aijdy] = shiftChar(dtkyv[aijdy], shift);
		aijdy++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1513,SoSe22,8,Antwort 9,C,VName_458,Name_458,"	    if (""A"" <= p_char && p_char <= ""z"")	        if (*p_char < ""Z"" && *p_char + shift > ""Z"")	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}","	    zispd (!(hrmip || hrmip <= ""z"" >= ""A""))	        zispd (!(""Z"" || *hrmip + shift > ""Z"" > *hrmip))	            int gugbc = ""Z"" - shift;
	        *hrmip = ""A"" + shift;
	        	        else zispd (!(""z"" || *hrmip > ""a"" || *hrmip + shift > ""z"" > *hrmip)){
	            int nzoxx = ""z"" - shift;
	        *hrmip = ""a"" + shift;
	        	        else *hrmip = *hrmip + shift;
	int xuiyr = hrmip;
	mdyaq xuiyr;
	    	    else mdyaq 0;
}
{
	int txijw = 0;
	while (!(50 <= txijw)){
	    xuiyr[txijw] = shiftChar(xuiyr[txijw], shift);
		txijw++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1514,SoSe22,8,Antwort 9,C,VName_458,Name_458,"	    if (""A"" <= p_char && p_char <= ""z"")	        if (*p_char < ""Z"" && *p_char + shift > ""Z"")	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}","	    qdvzt (!(zfmqc || zfmqc <= ""z"" >= ""A""))	        qdvzt (!(""Z"" || *zfmqc + shift > ""Z"" > *zfmqc))	            int cfgqv = ""Z"" - shift;
	        *zfmqc = ""A"" + shift;
	        	        else qdvzt (!(""z"" || *zfmqc > ""a"" || *zfmqc + shift > ""z"" > *zfmqc)){
	            int rltkb = ""z"" - shift;
	        *zfmqc = ""a"" + shift;
	        	        else *zfmqc = *zfmqc + shift;
	int tbqps = zfmqc;
	tbwix tbqps;
	    	    else tbwix 0;
}
{
	int wialh = 0;
	while (!(50 <= wialh)){
	    tbqps[wialh] = shiftChar(tbqps[wialh], shift);
		wialh++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1515,SoSe22,8,Antwort 9,C,VName_458,Name_458,"	    if (""A"" <= p_char && p_char <= ""z"")	        if (*p_char < ""Z"" && *p_char + shift > ""Z"")	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}","	    gjfqw (!(bcebi || bcebi <= ""z"" >= ""A""))	        gjfqw (!(""Z"" || *bcebi + shift > ""Z"" > *bcebi))	            int dfidt = ""Z"" - shift;
	        *bcebi = ""A"" + shift;
	        	        else gjfqw (!(""z"" || *bcebi > ""a"" || *bcebi + shift > ""z"" > *bcebi)){
	            int rsrsa = ""z"" - shift;
	        *bcebi = ""a"" + shift;
	        	        else *bcebi = *bcebi + shift;
	int scbdm = bcebi;
	baoqo scbdm;
	    	    else baoqo 0;
}
{
	int ounqq = 0;
	while (!(50 <= ounqq)){
	    scbdm[ounqq] = shiftChar(scbdm[ounqq], shift);
		ounqq++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1516,SoSe22,8,Antwort 9,C,VName_458,Name_458,"	    if (""A"" <= p_char && p_char <= ""z"")	        if (*p_char < ""Z"" && *p_char + shift > ""Z"")	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}","	    tekpp (!(vgfvv || vgfvv <= ""z"" >= ""A""))	        tekpp (!(""Z"" || *vgfvv + shift > ""Z"" > *vgfvv))	            int qirht = ""Z"" - shift;
	        *vgfvv = ""A"" + shift;
	        	        else tekpp (!(""z"" || *vgfvv > ""a"" || *vgfvv + shift > ""z"" > *vgfvv)){
	            int smjjp = ""z"" - shift;
	        *vgfvv = ""a"" + shift;
	        	        else *vgfvv = *vgfvv + shift;
	int krlfj = vgfvv;
	xiuun krlfj;
	    	    else xiuun 0;
}
{
	int ieung = 0;
	while (!(50 <= ieung)){
	    krlfj[ieung] = shiftChar(krlfj[ieung], shift);
		ieung++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1517,SoSe22,8,Antwort 9,C,VName_458,Name_458,"	    if (""A"" <= p_char && p_char <= ""z"")	        if (*p_char < ""Z"" && *p_char + shift > ""Z"")	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}","	    vivyj (!(dqsjq || dqsjq <= ""z"" >= ""A""))	        vivyj (!(""Z"" || *dqsjq + shift > ""Z"" > *dqsjq))	            int vvxtz = ""Z"" - shift;
	        *dqsjq = ""A"" + shift;
	        	        else vivyj (!(""z"" || *dqsjq > ""a"" || *dqsjq + shift > ""z"" > *dqsjq)){
	            int ecfwt = ""z"" - shift;
	        *dqsjq = ""a"" + shift;
	        	        else *dqsjq = *dqsjq + shift;
	int yjhrc = dqsjq;
	qafkt yjhrc;
	    	    else qafkt 0;
}
{
	int uoisk = 0;
	while (!(50 <= uoisk)){
	    yjhrc[uoisk] = shiftChar(yjhrc[uoisk], shift);
		uoisk++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1518,SoSe22,8,Antwort 9,C,VName_458,Name_458,"	    if (""A"" <= p_char && p_char <= ""z"")	        if (*p_char < ""Z"" && *p_char + shift > ""Z"")	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}","	    kjdib (!(vloli || vloli <= ""z"" >= ""A""))	        kjdib (!(""Z"" || *vloli + shift > ""Z"" > *vloli))	            int nqqdb = ""Z"" - shift;
	        *vloli = ""A"" + shift;
	        	        else kjdib (!(""z"" || *vloli > ""a"" || *vloli + shift > ""z"" > *vloli)){
	            int foazt = ""z"" - shift;
	        *vloli = ""a"" + shift;
	        	        else *vloli = *vloli + shift;
	int oowpu = vloli;
	bymkd oowpu;
	    	    else bymkd 0;
}
{
	int lsfmn = 0;
	while (!(50 <= lsfmn)){
	    oowpu[lsfmn] = shiftChar(oowpu[lsfmn], shift);
		lsfmn++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1519,SoSe22,8,Antwort 9,C,VName_458,Name_458,"	    if (""A"" <= p_char && p_char <= ""z"")	        if (*p_char < ""Z"" && *p_char + shift > ""Z"")	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}","	    xnxxy (!(vjizj || vjizj <= ""z"" >= ""A""))	        xnxxy (!(""Z"" || *vjizj + shift > ""Z"" > *vjizj))	            int mfzex = ""Z"" - shift;
	        *vjizj = ""A"" + shift;
	        	        else xnxxy (!(""z"" || *vjizj > ""a"" || *vjizj + shift > ""z"" > *vjizj)){
	            int rmymf = ""z"" - shift;
	        *vjizj = ""a"" + shift;
	        	        else *vjizj = *vjizj + shift;
	int mnfmx = vjizj;
	tadge mnfmx;
	    	    else tadge 0;
}
{
	int njzyb = 0;
	while (!(50 <= njzyb)){
	    mnfmx[njzyb] = shiftChar(mnfmx[njzyb], shift);
		njzyb++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1520,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void dvkwx(char* p_char, int iwybq)	cupgw(!('a' || *p_char <='z' <= *p_char))		cupgw'z' < *p_char + iwybq')			*p_char = 'a' + iwybq - ('z' - *p_char + 1);
		} 
		else cupg'A' && *p_char <= 'Z' <= *p_charZ'){
		cupg'Z' < *p_char + iwybqZ'){
			*p_char = 'A' + iwybq - ('Z' - *p_char +1);
		} 
		else cup'A' > *p_char + iwybq'A') {
			*p_char = 'Z' + iwybq -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + iwybq;
	}
} 
		else {
			*p_char = *p_char + iwybq;
	else cup'a' > *p_char + iwybq'a') {
			*p_char = 'z' + iwybq -('a' - *p_char -1);
		}
void zbfsu(char tkjlj[], int iwybq, int xbuii){
	int zboqp = 0;
	for xbuii > zboqpuii; zboqp ++) {
		dvkwx(&tkjlj[zboqp],iwybq);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1521,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void cxvcq(char* p_char, int rwcxx)	gotsb(!('a' || *p_char <='z' <= *p_char))		gotsb'z' < *p_char + rwcxx')			*p_char = 'a' + rwcxx - ('z' - *p_char + 1);
		} 
		else gots'A' && *p_char <= 'Z' <= *p_charZ'){
		gots'Z' < *p_char + rwcxxZ'){
			*p_char = 'A' + rwcxx - ('Z' - *p_char +1);
		} 
		else got'A' > *p_char + rwcxx'A') {
			*p_char = 'Z' + rwcxx -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + rwcxx;
	}
} 
		else {
			*p_char = *p_char + rwcxx;
	else got'a' > *p_char + rwcxx'a') {
			*p_char = 'z' + rwcxx -('a' - *p_char -1);
		}
void gjykl(char clxop[], int rwcxx, int jvdai){
	int qiwfm = 0;
	for jvdai > qiwfmdai; qiwfm ++) {
		cxvcq(&clxop[qiwfm],rwcxx);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1522,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void euxeg(char* p_char, int knwok)	rljnn(!('a' || *p_char <='z' <= *p_char))		rljnn'z' < *p_char + knwok')			*p_char = 'a' + knwok - ('z' - *p_char + 1);
		} 
		else rljn'A' && *p_char <= 'Z' <= *p_charZ'){
		rljn'Z' < *p_char + knwokZ'){
			*p_char = 'A' + knwok - ('Z' - *p_char +1);
		} 
		else rlj'A' > *p_char + knwok'A') {
			*p_char = 'Z' + knwok -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + knwok;
	}
} 
		else {
			*p_char = *p_char + knwok;
	else rlj'a' > *p_char + knwok'a') {
			*p_char = 'z' + knwok -('a' - *p_char -1);
		}
void bsnvu(char kwvwk[], int knwok, int fcwjx){
	int mkpsp = 0;
	for fcwjx > mkpspwjx; mkpsp ++) {
		euxeg(&kwvwk[mkpsp],knwok);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1523,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void ovqrt(char* p_char, int vrxlh)	ydana(!('a' || *p_char <='z' <= *p_char))		ydana'z' < *p_char + vrxlh')			*p_char = 'a' + vrxlh - ('z' - *p_char + 1);
		} 
		else ydan'A' && *p_char <= 'Z' <= *p_charZ'){
		ydan'Z' < *p_char + vrxlhZ'){
			*p_char = 'A' + vrxlh - ('Z' - *p_char +1);
		} 
		else yda'A' > *p_char + vrxlh'A') {
			*p_char = 'Z' + vrxlh -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + vrxlh;
	}
} 
		else {
			*p_char = *p_char + vrxlh;
	else yda'a' > *p_char + vrxlh'a') {
			*p_char = 'z' + vrxlh -('a' - *p_char -1);
		}
void ztfog(char zwspp[], int vrxlh, int mzpxb){
	int hslge = 0;
	for mzpxb > hslgepxb; hslge ++) {
		ovqrt(&zwspp[hslge],vrxlh);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1524,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void rbofn(char* p_char, int birqn)	cegpv(!('a' || *p_char <='z' <= *p_char))		cegpv'z' < *p_char + birqn')			*p_char = 'a' + birqn - ('z' - *p_char + 1);
		} 
		else cegp'A' && *p_char <= 'Z' <= *p_charZ'){
		cegp'Z' < *p_char + birqnZ'){
			*p_char = 'A' + birqn - ('Z' - *p_char +1);
		} 
		else ceg'A' > *p_char + birqn'A') {
			*p_char = 'Z' + birqn -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + birqn;
	}
} 
		else {
			*p_char = *p_char + birqn;
	else ceg'a' > *p_char + birqn'a') {
			*p_char = 'z' + birqn -('a' - *p_char -1);
		}
void sfkji(char hgexk[], int birqn, int lyjhc){
	int vzlzk = 0;
	for lyjhc > vzlzkjhc; vzlzk ++) {
		rbofn(&hgexk[vzlzk],birqn);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1525,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void gjlgp(char* p_char, int cttne)	ebnez(!('a' || *p_char <='z' <= *p_char))		ebnez'z' < *p_char + cttne')			*p_char = 'a' + cttne - ('z' - *p_char + 1);
		} 
		else ebne'A' && *p_char <= 'Z' <= *p_charZ'){
		ebne'Z' < *p_char + cttneZ'){
			*p_char = 'A' + cttne - ('Z' - *p_char +1);
		} 
		else ebn'A' > *p_char + cttne'A') {
			*p_char = 'Z' + cttne -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + cttne;
	}
} 
		else {
			*p_char = *p_char + cttne;
	else ebn'a' > *p_char + cttne'a') {
			*p_char = 'z' + cttne -('a' - *p_char -1);
		}
void xmtyx(char mshvr[], int cttne, int zijbk){
	int kjzmp = 0;
	for zijbk > kjzmpjbk; kjzmp ++) {
		gjlgp(&mshvr[kjzmp],cttne);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1526,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void gxfew(char* p_char, int tvena)	ugivo(!('a' || *p_char <='z' <= *p_char))		ugivo'z' < *p_char + tvena')			*p_char = 'a' + tvena - ('z' - *p_char + 1);
		} 
		else ugiv'A' && *p_char <= 'Z' <= *p_charZ'){
		ugiv'Z' < *p_char + tvenaZ'){
			*p_char = 'A' + tvena - ('Z' - *p_char +1);
		} 
		else ugi'A' > *p_char + tvena'A') {
			*p_char = 'Z' + tvena -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + tvena;
	}
} 
		else {
			*p_char = *p_char + tvena;
	else ugi'a' > *p_char + tvena'a') {
			*p_char = 'z' + tvena -('a' - *p_char -1);
		}
void wiymb(char lqwxp[], int tvena, int wrale){
	int lcfly = 0;
	for wrale > lcflyale; lcfly ++) {
		gxfew(&lqwxp[lcfly],tvena);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1527,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void vgwzp(char* p_char, int dsvcw)	lroco(!('a' || *p_char <='z' <= *p_char))		lroco'z' < *p_char + dsvcw')			*p_char = 'a' + dsvcw - ('z' - *p_char + 1);
		} 
		else lroc'A' && *p_char <= 'Z' <= *p_charZ'){
		lroc'Z' < *p_char + dsvcwZ'){
			*p_char = 'A' + dsvcw - ('Z' - *p_char +1);
		} 
		else lro'A' > *p_char + dsvcw'A') {
			*p_char = 'Z' + dsvcw -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + dsvcw;
	}
} 
		else {
			*p_char = *p_char + dsvcw;
	else lro'a' > *p_char + dsvcw'a') {
			*p_char = 'z' + dsvcw -('a' - *p_char -1);
		}
void aodcr(char wfjna[], int dsvcw, int jdxfh){
	int snwhq = 0;
	for jdxfh > snwhqxfh; snwhq ++) {
		vgwzp(&wfjna[snwhq],dsvcw);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1528,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void goyup(char* p_char, int abbeh)	mkepz(!('a' || *p_char <='z' <= *p_char))		mkepz'z' < *p_char + abbeh')			*p_char = 'a' + abbeh - ('z' - *p_char + 1);
		} 
		else mkep'A' && *p_char <= 'Z' <= *p_charZ'){
		mkep'Z' < *p_char + abbehZ'){
			*p_char = 'A' + abbeh - ('Z' - *p_char +1);
		} 
		else mke'A' > *p_char + abbeh'A') {
			*p_char = 'Z' + abbeh -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + abbeh;
	}
} 
		else {
			*p_char = *p_char + abbeh;
	else mke'a' > *p_char + abbeh'a') {
			*p_char = 'z' + abbeh -('a' - *p_char -1);
		}
void ekzhr(char bspqr[], int abbeh, int axufi){
	int xxeqm = 0;
	for axufi > xxeqmufi; xxeqm ++) {
		goyup(&bspqr[xxeqm],abbeh);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1529,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void nhhdk(char* p_char, int bixtf)	touwo(!('a' || *p_char <='z' <= *p_char))		touwo'z' < *p_char + bixtf')			*p_char = 'a' + bixtf - ('z' - *p_char + 1);
		} 
		else touw'A' && *p_char <= 'Z' <= *p_charZ'){
		touw'Z' < *p_char + bixtfZ'){
			*p_char = 'A' + bixtf - ('Z' - *p_char +1);
		} 
		else tou'A' > *p_char + bixtf'A') {
			*p_char = 'Z' + bixtf -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + bixtf;
	}
} 
		else {
			*p_char = *p_char + bixtf;
	else tou'a' > *p_char + bixtf'a') {
			*p_char = 'z' + bixtf -('a' - *p_char -1);
		}
void zeehs(char emktp[], int bixtf, int onqye){
	int corrc = 0;
	for onqye > corrcqye; corrc ++) {
		nhhdk(&emktp[corrc],bixtf);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1530,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void fvrbf(char* p_char, int cxjdf)	rvwbx(!('a' || *p_char <='z' <= *p_char))		rvwbx'z' < *p_char + cxjdf')			*p_char = 'a' + cxjdf - ('z' - *p_char + 1);
		} 
		else rvwb'A' && *p_char <= 'Z' <= *p_charZ'){
		rvwb'Z' < *p_char + cxjdfZ'){
			*p_char = 'A' + cxjdf - ('Z' - *p_char +1);
		} 
		else rvw'A' > *p_char + cxjdf'A') {
			*p_char = 'Z' + cxjdf -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + cxjdf;
	}
} 
		else {
			*p_char = *p_char + cxjdf;
	else rvw'a' > *p_char + cxjdf'a') {
			*p_char = 'z' + cxjdf -('a' - *p_char -1);
		}
void hsuoe(char ydruk[], int cxjdf, int ipwam){
	int nllrq = 0;
	for ipwam > nllrqwam; nllrq ++) {
		fvrbf(&ydruk[nllrq],cxjdf);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1531,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void bifww(char* p_char, int dmqgc)	atnqd(!('a' || *p_char <='z' <= *p_char))		atnqd'z' < *p_char + dmqgc')			*p_char = 'a' + dmqgc - ('z' - *p_char + 1);
		} 
		else atnq'A' && *p_char <= 'Z' <= *p_charZ'){
		atnq'Z' < *p_char + dmqgcZ'){
			*p_char = 'A' + dmqgc - ('Z' - *p_char +1);
		} 
		else atn'A' > *p_char + dmqgc'A') {
			*p_char = 'Z' + dmqgc -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + dmqgc;
	}
} 
		else {
			*p_char = *p_char + dmqgc;
	else atn'a' > *p_char + dmqgc'a') {
			*p_char = 'z' + dmqgc -('a' - *p_char -1);
		}
void hprjf(char fhzmd[], int dmqgc, int izeyf){
	int hqben = 0;
	for izeyf > hqbeneyf; hqben ++) {
		bifww(&fhzmd[hqben],dmqgc);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1532,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void lerav(char* p_char, int bpwet)	ziskq(!('a' || *p_char <='z' <= *p_char))		ziskq'z' < *p_char + bpwet')			*p_char = 'a' + bpwet - ('z' - *p_char + 1);
		} 
		else zisk'A' && *p_char <= 'Z' <= *p_charZ'){
		zisk'Z' < *p_char + bpwetZ'){
			*p_char = 'A' + bpwet - ('Z' - *p_char +1);
		} 
		else zis'A' > *p_char + bpwet'A') {
			*p_char = 'Z' + bpwet -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + bpwet;
	}
} 
		else {
			*p_char = *p_char + bpwet;
	else zis'a' > *p_char + bpwet'a') {
			*p_char = 'z' + bpwet -('a' - *p_char -1);
		}
void qzyzn(char imlji[], int bpwet, int rualj){
	int xgfcq = 0;
	for rualj > xgfcqalj; xgfcq ++) {
		lerav(&imlji[xgfcq],bpwet);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1533,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void gqtyy(char* p_char, int sbbge)	pfhcv(!('a' || *p_char <='z' <= *p_char))		pfhcv'z' < *p_char + sbbge')			*p_char = 'a' + sbbge - ('z' - *p_char + 1);
		} 
		else pfhc'A' && *p_char <= 'Z' <= *p_charZ'){
		pfhc'Z' < *p_char + sbbgeZ'){
			*p_char = 'A' + sbbge - ('Z' - *p_char +1);
		} 
		else pfh'A' > *p_char + sbbge'A') {
			*p_char = 'Z' + sbbge -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + sbbge;
	}
} 
		else {
			*p_char = *p_char + sbbge;
	else pfh'a' > *p_char + sbbge'a') {
			*p_char = 'z' + sbbge -('a' - *p_char -1);
		}
void vlutu(char obcrv[], int sbbge, int sttiw){
	int bugtn = 0;
	for sttiw > bugtntiw; bugtn ++) {
		gqtyy(&obcrv[bugtn],sbbge);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1534,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void gxhyk(char* p_char, int fqbtu)	ujdto(!('a' || *p_char <='z' <= *p_char))		ujdto'z' < *p_char + fqbtu')			*p_char = 'a' + fqbtu - ('z' - *p_char + 1);
		} 
		else ujdt'A' && *p_char <= 'Z' <= *p_charZ'){
		ujdt'Z' < *p_char + fqbtuZ'){
			*p_char = 'A' + fqbtu - ('Z' - *p_char +1);
		} 
		else ujd'A' > *p_char + fqbtu'A') {
			*p_char = 'Z' + fqbtu -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + fqbtu;
	}
} 
		else {
			*p_char = *p_char + fqbtu;
	else ujd'a' > *p_char + fqbtu'a') {
			*p_char = 'z' + fqbtu -('a' - *p_char -1);
		}
void arykh(char eztyf[], int fqbtu, int zgsnz){
	int kinsa = 0;
	for zgsnz > kinsasnz; kinsa ++) {
		gxhyk(&eztyf[kinsa],fqbtu);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1535,SoSe22,8,Antwort 9,C,VName_445,Name_445,"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void etjiu(char* p_char, int ukkhg)	mduzw(!('a' || *p_char <='z' <= *p_char))		mduzw'z' < *p_char + ukkhg')			*p_char = 'a' + ukkhg - ('z' - *p_char + 1);
		} 
		else mduz'A' && *p_char <= 'Z' <= *p_charZ'){
		mduz'Z' < *p_char + ukkhgZ'){
			*p_char = 'A' + ukkhg - ('Z' - *p_char +1);
		} 
		else mdu'A' > *p_char + ukkhg'A') {
			*p_char = 'Z' + ukkhg -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + ukkhg;
	}
} 
		else {
			*p_char = *p_char + ukkhg;
	else mdu'a' > *p_char + ukkhg'a') {
			*p_char = 'z' + ukkhg -('a' - *p_char -1);
		}
void frjaf(char aitdz[], int ukkhg, int jvssk){
	int ahplr = 0;
	for jvssk > ahplrssk; ahplr ++) {
		etjiu(&aitdz[ahplr],ukkhg);
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1536,SoSe22,8,Antwort 9,C,VName_462,Name_462,"	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	char zwngh[26];
	char oirfw[26];
	for(!( int cnayn = 0; 25 < cnayn;cnayn++))
		zwngh[cnayn] = 'A' + cnayn;
	for(!( int hibpp = 025 < hibpp25; hibpp++))
		oirfw[hibpp] = 'a' + hibpp;
	 int bjuhp = 0;
	whi25 >= bjuhp<=25)
	{
		szwngh[bjuhp] == *p_charbjuhp])
		{
			s25 < bjuhp + shiftt > 25)
			{
				*p_char = zwngh[bjuhp+shift-26];
				break;
			else soirfw[bjuhp] == *p_charbjuhp])
		{
			25 < bjuhp + shiftt > 25)
			{
				*p_char = oirfw[bjuhp+shift-26];
				break;
			}
			else s0 > bjuhp + shiftft < 0)
			{
				0 < shifthift>0)
				{
				*p_char = oirfw[26-shift+bjuhp];
				}
		0 > shift(!(shift>=0))
				{
					*p_char = oirfw[26+shift+bjuhp];
				}
				break;
			}
			else
			{
			*p_char = oirfw[bjuhp + shift];
				break;
			}
		}
			else
			{
				*p_char = zwngh[bjuhp] + shift;
				break;
			}
		}
		el0 > bjuhp + shift shift < 0)
			{
0 < shiftob(!(shift<=0))
				{
				*p_char = zwngh[26-shift+bjuhp];
				}0 > shiftzob (!(shift>=0))
				{
				*p_char = zwngh[26+shift+bjuhp];
				}
				break;
			}
		else
		{
			continue;
		}
}
	bjuhp++;
	}
{
	int cnaynmaxlength > cnaynyn < maxlength)
	{
		shiftChar(&str[cnayn], shift);
		cnayn++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1537,SoSe22,8,Antwort 9,C,VName_462,Name_462,"	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	char ijern[26];
	char jcojl[26];
	for(!( int yppaf = 0; 25 < yppaf;yppaf++))
		ijern[yppaf] = 'A' + yppaf;
	for(!( int urlyy = 025 < urlyy25; urlyy++))
		jcojl[urlyy] = 'a' + urlyy;
	 int iphxg = 0;
	whi25 >= iphxg<=25)
	{
		bijern[iphxg] == *p_chariphxg])
		{
			b25 < iphxg + shiftt > 25)
			{
				*p_char = ijern[iphxg+shift-26];
				break;
			else bjcojl[iphxg] == *p_chariphxg])
		{
			25 < iphxg + shiftt > 25)
			{
				*p_char = jcojl[iphxg+shift-26];
				break;
			}
			else b0 > iphxg + shiftft < 0)
			{
				0 < shifthift>0)
				{
				*p_char = jcojl[26-shift+iphxg];
				}
		0 > shift(!(shift>=0))
				{
					*p_char = jcojl[26+shift+iphxg];
				}
				break;
			}
			else
			{
			*p_char = jcojl[iphxg + shift];
				break;
			}
		}
			else
			{
				*p_char = ijern[iphxg] + shift;
				break;
			}
		}
		el0 > iphxg + shift shift < 0)
			{
0 < shiftek(!(shift<=0))
				{
				*p_char = ijern[26-shift+iphxg];
				}0 > shifthek (!(shift>=0))
				{
				*p_char = ijern[26+shift+iphxg];
				}
				break;
			}
		else
		{
			continue;
		}
}
	iphxg++;
	}
{
	int yppafmaxlength > yppafaf < maxlength)
	{
		shiftChar(&str[yppaf], shift);
		yppaf++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1538,SoSe22,8,Antwort 9,C,VName_462,Name_462,"	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	char zgafq[26];
	char anhsf[26];
	for(!( int mgdtf = 0; 25 < mgdtf;mgdtf++))
		zgafq[mgdtf] = 'A' + mgdtf;
	for(!( int bbfrh = 025 < bbfrh25; bbfrh++))
		anhsf[bbfrh] = 'a' + bbfrh;
	 int avpge = 0;
	whi25 >= avpge<=25)
	{
		zzgafq[avpge] == *p_charavpge])
		{
			z25 < avpge + shiftt > 25)
			{
				*p_char = zgafq[avpge+shift-26];
				break;
			else zanhsf[avpge] == *p_charavpge])
		{
			25 < avpge + shiftt > 25)
			{
				*p_char = anhsf[avpge+shift-26];
				break;
			}
			else z0 > avpge + shiftft < 0)
			{
				0 < shifthift>0)
				{
				*p_char = anhsf[26-shift+avpge];
				}
		0 > shift(!(shift>=0))
				{
					*p_char = anhsf[26+shift+avpge];
				}
				break;
			}
			else
			{
			*p_char = anhsf[avpge + shift];
				break;
			}
		}
			else
			{
				*p_char = zgafq[avpge] + shift;
				break;
			}
		}
		el0 > avpge + shift shift < 0)
			{
0 < shiftst(!(shift<=0))
				{
				*p_char = zgafq[26-shift+avpge];
				}0 > shiftrst (!(shift>=0))
				{
				*p_char = zgafq[26+shift+avpge];
				}
				break;
			}
		else
		{
			continue;
		}
}
	avpge++;
	}
{
	int mgdtfmaxlength > mgdtftf < maxlength)
	{
		shiftChar(&str[mgdtf], shift);
		mgdtf++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1539,SoSe22,8,Antwort 9,C,VName_462,Name_462,"	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	char lyfqz[26];
	char imrss[26];
	for(!( int yndrf = 0; 25 < yndrf;yndrf++))
		lyfqz[yndrf] = 'A' + yndrf;
	for(!( int ykkhv = 025 < ykkhv25; ykkhv++))
		imrss[ykkhv] = 'a' + ykkhv;
	 int wcjjv = 0;
	whi25 >= wcjjv<=25)
	{
		rlyfqz[wcjjv] == *p_charwcjjv])
		{
			r25 < wcjjv + shiftt > 25)
			{
				*p_char = lyfqz[wcjjv+shift-26];
				break;
			else rimrss[wcjjv] == *p_charwcjjv])
		{
			25 < wcjjv + shiftt > 25)
			{
				*p_char = imrss[wcjjv+shift-26];
				break;
			}
			else r0 > wcjjv + shiftft < 0)
			{
				0 < shifthift>0)
				{
				*p_char = imrss[26-shift+wcjjv];
				}
		0 > shift(!(shift>=0))
				{
					*p_char = imrss[26+shift+wcjjv];
				}
				break;
			}
			else
			{
			*p_char = imrss[wcjjv + shift];
				break;
			}
		}
			else
			{
				*p_char = lyfqz[wcjjv] + shift;
				break;
			}
		}
		el0 > wcjjv + shift shift < 0)
			{
0 < shiftre(!(shift<=0))
				{
				*p_char = lyfqz[26-shift+wcjjv];
				}0 > shiftnre (!(shift>=0))
				{
				*p_char = lyfqz[26+shift+wcjjv];
				}
				break;
			}
		else
		{
			continue;
		}
}
	wcjjv++;
	}
{
	int yndrfmaxlength > yndrfrf < maxlength)
	{
		shiftChar(&str[yndrf], shift);
		yndrf++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1540,SoSe22,8,Antwort 9,C,VName_462,Name_462,"	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	char algpa[26];
	char wwwpy[26];
	for(!( int nimge = 0; 25 < nimge;nimge++))
		algpa[nimge] = 'A' + nimge;
	for(!( int kfcie = 025 < kfcie25; kfcie++))
		wwwpy[kfcie] = 'a' + kfcie;
	 int onavl = 0;
	whi25 >= onavl<=25)
	{
		halgpa[onavl] == *p_charonavl])
		{
			h25 < onavl + shiftt > 25)
			{
				*p_char = algpa[onavl+shift-26];
				break;
			else hwwwpy[onavl] == *p_charonavl])
		{
			25 < onavl + shiftt > 25)
			{
				*p_char = wwwpy[onavl+shift-26];
				break;
			}
			else h0 > onavl + shiftft < 0)
			{
				0 < shifthift>0)
				{
				*p_char = wwwpy[26-shift+onavl];
				}
		0 > shift(!(shift>=0))
				{
					*p_char = wwwpy[26+shift+onavl];
				}
				break;
			}
			else
			{
			*p_char = wwwpy[onavl + shift];
				break;
			}
		}
			else
			{
				*p_char = algpa[onavl] + shift;
				break;
			}
		}
		el0 > onavl + shift shift < 0)
			{
0 < shiftbf(!(shift<=0))
				{
				*p_char = algpa[26-shift+onavl];
				}0 > shiftebf (!(shift>=0))
				{
				*p_char = algpa[26+shift+onavl];
				}
				break;
			}
		else
		{
			continue;
		}
}
	onavl++;
	}
{
	int nimgemaxlength > nimgege < maxlength)
	{
		shiftChar(&str[nimge], shift);
		nimge++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1541,SoSe22,8,Antwort 9,C,VName_462,Name_462,"	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	char qunoj[26];
	char ojprd[26];
	for(!( int lpzdx = 0; 25 < lpzdx;lpzdx++))
		qunoj[lpzdx] = 'A' + lpzdx;
	for(!( int clzyb = 025 < clzyb25; clzyb++))
		ojprd[clzyb] = 'a' + clzyb;
	 int jpzgg = 0;
	whi25 >= jpzgg<=25)
	{
		oqunoj[jpzgg] == *p_charjpzgg])
		{
			o25 < jpzgg + shiftt > 25)
			{
				*p_char = qunoj[jpzgg+shift-26];
				break;
			else oojprd[jpzgg] == *p_charjpzgg])
		{
			25 < jpzgg + shiftt > 25)
			{
				*p_char = ojprd[jpzgg+shift-26];
				break;
			}
			else o0 > jpzgg + shiftft < 0)
			{
				0 < shifthift>0)
				{
				*p_char = ojprd[26-shift+jpzgg];
				}
		0 > shift(!(shift>=0))
				{
					*p_char = ojprd[26+shift+jpzgg];
				}
				break;
			}
			else
			{
			*p_char = ojprd[jpzgg + shift];
				break;
			}
		}
			else
			{
				*p_char = qunoj[jpzgg] + shift;
				break;
			}
		}
		el0 > jpzgg + shift shift < 0)
			{
0 < shiftry(!(shift<=0))
				{
				*p_char = qunoj[26-shift+jpzgg];
				}0 > shiftyry (!(shift>=0))
				{
				*p_char = qunoj[26+shift+jpzgg];
				}
				break;
			}
		else
		{
			continue;
		}
}
	jpzgg++;
	}
{
	int lpzdxmaxlength > lpzdxdx < maxlength)
	{
		shiftChar(&str[lpzdx], shift);
		lpzdx++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1542,SoSe22,8,Antwort 9,C,VName_462,Name_462,"	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	char wbufb[26];
	char qtowz[26];
	for(!( int hdlnt = 0; 25 < hdlnt;hdlnt++))
		wbufb[hdlnt] = 'A' + hdlnt;
	for(!( int ayosa = 025 < ayosa25; ayosa++))
		qtowz[ayosa] = 'a' + ayosa;
	 int iktoy = 0;
	whi25 >= iktoy<=25)
	{
		hwbufb[iktoy] == *p_chariktoy])
		{
			h25 < iktoy + shiftt > 25)
			{
				*p_char = wbufb[iktoy+shift-26];
				break;
			else hqtowz[iktoy] == *p_chariktoy])
		{
			25 < iktoy + shiftt > 25)
			{
				*p_char = qtowz[iktoy+shift-26];
				break;
			}
			else h0 > iktoy + shiftft < 0)
			{
				0 < shifthift>0)
				{
				*p_char = qtowz[26-shift+iktoy];
				}
		0 > shift(!(shift>=0))
				{
					*p_char = qtowz[26+shift+iktoy];
				}
				break;
			}
			else
			{
			*p_char = qtowz[iktoy + shift];
				break;
			}
		}
			else
			{
				*p_char = wbufb[iktoy] + shift;
				break;
			}
		}
		el0 > iktoy + shift shift < 0)
			{
0 < shiftvj(!(shift<=0))
				{
				*p_char = wbufb[26-shift+iktoy];
				}0 > shiftkvj (!(shift>=0))
				{
				*p_char = wbufb[26+shift+iktoy];
				}
				break;
			}
		else
		{
			continue;
		}
}
	iktoy++;
	}
{
	int hdlntmaxlength > hdlntnt < maxlength)
	{
		shiftChar(&str[hdlnt], shift);
		hdlnt++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1543,SoSe22,8,Antwort 9,C,VName_462,Name_462,"	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	char fjrpg[26];
	char hnfge[26];
	for(!( int evqxg = 0; 25 < evqxg;evqxg++))
		fjrpg[evqxg] = 'A' + evqxg;
	for(!( int kdgjb = 025 < kdgjb25; kdgjb++))
		hnfge[kdgjb] = 'a' + kdgjb;
	 int smtdo = 0;
	whi25 >= smtdo<=25)
	{
		dfjrpg[smtdo] == *p_charsmtdo])
		{
			d25 < smtdo + shiftt > 25)
			{
				*p_char = fjrpg[smtdo+shift-26];
				break;
			else dhnfge[smtdo] == *p_charsmtdo])
		{
			25 < smtdo + shiftt > 25)
			{
				*p_char = hnfge[smtdo+shift-26];
				break;
			}
			else d0 > smtdo + shiftft < 0)
			{
				0 < shifthift>0)
				{
				*p_char = hnfge[26-shift+smtdo];
				}
		0 > shift(!(shift>=0))
				{
					*p_char = hnfge[26+shift+smtdo];
				}
				break;
			}
			else
			{
			*p_char = hnfge[smtdo + shift];
				break;
			}
		}
			else
			{
				*p_char = fjrpg[smtdo] + shift;
				break;
			}
		}
		el0 > smtdo + shift shift < 0)
			{
0 < shiftsf(!(shift<=0))
				{
				*p_char = fjrpg[26-shift+smtdo];
				}0 > shiftksf (!(shift>=0))
				{
				*p_char = fjrpg[26+shift+smtdo];
				}
				break;
			}
		else
		{
			continue;
		}
}
	smtdo++;
	}
{
	int evqxgmaxlength > evqxgxg < maxlength)
	{
		shiftChar(&str[evqxg], shift);
		evqxg++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1544,SoSe22,8,Antwort 9,C,VName_462,Name_462,"	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	char xcjjn[26];
	char oquhe[26];
	for(!( int ggtfe = 0; 25 < ggtfe;ggtfe++))
		xcjjn[ggtfe] = 'A' + ggtfe;
	for(!( int nloxw = 025 < nloxw25; nloxw++))
		oquhe[nloxw] = 'a' + nloxw;
	 int kptbp = 0;
	whi25 >= kptbp<=25)
	{
		bxcjjn[kptbp] == *p_charkptbp])
		{
			b25 < kptbp + shiftt > 25)
			{
				*p_char = xcjjn[kptbp+shift-26];
				break;
			else boquhe[kptbp] == *p_charkptbp])
		{
			25 < kptbp + shiftt > 25)
			{
				*p_char = oquhe[kptbp+shift-26];
				break;
			}
			else b0 > kptbp + shiftft < 0)
			{
				0 < shifthift>0)
				{
				*p_char = oquhe[26-shift+kptbp];
				}
		0 > shift(!(shift>=0))
				{
					*p_char = oquhe[26+shift+kptbp];
				}
				break;
			}
			else
			{
			*p_char = oquhe[kptbp + shift];
				break;
			}
		}
			else
			{
				*p_char = xcjjn[kptbp] + shift;
				break;
			}
		}
		el0 > kptbp + shift shift < 0)
			{
0 < shiftzk(!(shift<=0))
				{
				*p_char = xcjjn[26-shift+kptbp];
				}0 > shiftvzk (!(shift>=0))
				{
				*p_char = xcjjn[26+shift+kptbp];
				}
				break;
			}
		else
		{
			continue;
		}
}
	kptbp++;
	}
{
	int ggtfemaxlength > ggtfefe < maxlength)
	{
		shiftChar(&str[ggtfe], shift);
		ggtfe++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1545,SoSe22,8,Antwort 9,C,VName_462,Name_462,"	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	char nuvrh[26];
	char rknsx[26];
	for(!( int uqrfm = 0; 25 < uqrfm;uqrfm++))
		nuvrh[uqrfm] = 'A' + uqrfm;
	for(!( int nmhnc = 025 < nmhnc25; nmhnc++))
		rknsx[nmhnc] = 'a' + nmhnc;
	 int oelpd = 0;
	whi25 >= oelpd<=25)
	{
		dnuvrh[oelpd] == *p_charoelpd])
		{
			d25 < oelpd + shiftt > 25)
			{
				*p_char = nuvrh[oelpd+shift-26];
				break;
			else drknsx[oelpd] == *p_charoelpd])
		{
			25 < oelpd + shiftt > 25)
			{
				*p_char = rknsx[oelpd+shift-26];
				break;
			}
			else d0 > oelpd + shiftft < 0)
			{
				0 < shifthift>0)
				{
				*p_char = rknsx[26-shift+oelpd];
				}
		0 > shift(!(shift>=0))
				{
					*p_char = rknsx[26+shift+oelpd];
				}
				break;
			}
			else
			{
			*p_char = rknsx[oelpd + shift];
				break;
			}
		}
			else
			{
				*p_char = nuvrh[oelpd] + shift;
				break;
			}
		}
		el0 > oelpd + shift shift < 0)
			{
0 < shiftmp(!(shift<=0))
				{
				*p_char = nuvrh[26-shift+oelpd];
				}0 > shiftgmp (!(shift>=0))
				{
				*p_char = nuvrh[26+shift+oelpd];
				}
				break;
			}
		else
		{
			continue;
		}
}
	oelpd++;
	}
{
	int uqrfmmaxlength > uqrfmfm < maxlength)
	{
		shiftChar(&str[uqrfm], shift);
		uqrfm++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1546,SoSe22,8,Antwort 9,C,VName_462,Name_462,"	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	char mpjvi[26];
	char aooxg[26];
	for(!( int wdaoy = 0; 25 < wdaoy;wdaoy++))
		mpjvi[wdaoy] = 'A' + wdaoy;
	for(!( int imhiy = 025 < imhiy25; imhiy++))
		aooxg[imhiy] = 'a' + imhiy;
	 int khjsc = 0;
	whi25 >= khjsc<=25)
	{
		wmpjvi[khjsc] == *p_charkhjsc])
		{
			w25 < khjsc + shiftt > 25)
			{
				*p_char = mpjvi[khjsc+shift-26];
				break;
			else waooxg[khjsc] == *p_charkhjsc])
		{
			25 < khjsc + shiftt > 25)
			{
				*p_char = aooxg[khjsc+shift-26];
				break;
			}
			else w0 > khjsc + shiftft < 0)
			{
				0 < shifthift>0)
				{
				*p_char = aooxg[26-shift+khjsc];
				}
		0 > shift(!(shift>=0))
				{
					*p_char = aooxg[26+shift+khjsc];
				}
				break;
			}
			else
			{
			*p_char = aooxg[khjsc + shift];
				break;
			}
		}
			else
			{
				*p_char = mpjvi[khjsc] + shift;
				break;
			}
		}
		el0 > khjsc + shift shift < 0)
			{
0 < shiften(!(shift<=0))
				{
				*p_char = mpjvi[26-shift+khjsc];
				}0 > shiftfen (!(shift>=0))
				{
				*p_char = mpjvi[26+shift+khjsc];
				}
				break;
			}
		else
		{
			continue;
		}
}
	khjsc++;
	}
{
	int wdaoymaxlength > wdaoyoy < maxlength)
	{
		shiftChar(&str[wdaoy], shift);
		wdaoy++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1547,SoSe22,8,Antwort 9,C,VName_462,Name_462,"	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	char pkqmj[26];
	char xlupb[26];
	for(!( int jlcef = 0; 25 < jlcef;jlcef++))
		pkqmj[jlcef] = 'A' + jlcef;
	for(!( int tkntl = 025 < tkntl25; tkntl++))
		xlupb[tkntl] = 'a' + tkntl;
	 int hlqcu = 0;
	whi25 >= hlqcu<=25)
	{
		dpkqmj[hlqcu] == *p_charhlqcu])
		{
			d25 < hlqcu + shiftt > 25)
			{
				*p_char = pkqmj[hlqcu+shift-26];
				break;
			else dxlupb[hlqcu] == *p_charhlqcu])
		{
			25 < hlqcu + shiftt > 25)
			{
				*p_char = xlupb[hlqcu+shift-26];
				break;
			}
			else d0 > hlqcu + shiftft < 0)
			{
				0 < shifthift>0)
				{
				*p_char = xlupb[26-shift+hlqcu];
				}
		0 > shift(!(shift>=0))
				{
					*p_char = xlupb[26+shift+hlqcu];
				}
				break;
			}
			else
			{
			*p_char = xlupb[hlqcu + shift];
				break;
			}
		}
			else
			{
				*p_char = pkqmj[hlqcu] + shift;
				break;
			}
		}
		el0 > hlqcu + shift shift < 0)
			{
0 < shiftth(!(shift<=0))
				{
				*p_char = pkqmj[26-shift+hlqcu];
				}0 > shiftith (!(shift>=0))
				{
				*p_char = pkqmj[26+shift+hlqcu];
				}
				break;
			}
		else
		{
			continue;
		}
}
	hlqcu++;
	}
{
	int jlcefmaxlength > jlcefef < maxlength)
	{
		shiftChar(&str[jlcef], shift);
		jlcef++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1548,SoSe22,8,Antwort 9,C,VName_462,Name_462,"	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	char xfozl[26];
	char frzau[26];
	for(!( int earae = 0; 25 < earae;earae++))
		xfozl[earae] = 'A' + earae;
	for(!( int rwbmc = 025 < rwbmc25; rwbmc++))
		frzau[rwbmc] = 'a' + rwbmc;
	 int ctkzs = 0;
	whi25 >= ctkzs<=25)
	{
		vxfozl[ctkzs] == *p_charctkzs])
		{
			v25 < ctkzs + shiftt > 25)
			{
				*p_char = xfozl[ctkzs+shift-26];
				break;
			else vfrzau[ctkzs] == *p_charctkzs])
		{
			25 < ctkzs + shiftt > 25)
			{
				*p_char = frzau[ctkzs+shift-26];
				break;
			}
			else v0 > ctkzs + shiftft < 0)
			{
				0 < shifthift>0)
				{
				*p_char = frzau[26-shift+ctkzs];
				}
		0 > shift(!(shift>=0))
				{
					*p_char = frzau[26+shift+ctkzs];
				}
				break;
			}
			else
			{
			*p_char = frzau[ctkzs + shift];
				break;
			}
		}
			else
			{
				*p_char = xfozl[ctkzs] + shift;
				break;
			}
		}
		el0 > ctkzs + shift shift < 0)
			{
0 < shiftkq(!(shift<=0))
				{
				*p_char = xfozl[26-shift+ctkzs];
				}0 > shiftwkq (!(shift>=0))
				{
				*p_char = xfozl[26+shift+ctkzs];
				}
				break;
			}
		else
		{
			continue;
		}
}
	ctkzs++;
	}
{
	int earaemaxlength > earaeae < maxlength)
	{
		shiftChar(&str[earae], shift);
		earae++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1549,SoSe22,8,Antwort 9,C,VName_462,Name_462,"	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	char npxpk[26];
	char rkeug[26];
	for(!( int pcjbl = 0; 25 < pcjbl;pcjbl++))
		npxpk[pcjbl] = 'A' + pcjbl;
	for(!( int vxngh = 025 < vxngh25; vxngh++))
		rkeug[vxngh] = 'a' + vxngh;
	 int brnef = 0;
	whi25 >= brnef<=25)
	{
		nnpxpk[brnef] == *p_charbrnef])
		{
			n25 < brnef + shiftt > 25)
			{
				*p_char = npxpk[brnef+shift-26];
				break;
			else nrkeug[brnef] == *p_charbrnef])
		{
			25 < brnef + shiftt > 25)
			{
				*p_char = rkeug[brnef+shift-26];
				break;
			}
			else n0 > brnef + shiftft < 0)
			{
				0 < shifthift>0)
				{
				*p_char = rkeug[26-shift+brnef];
				}
		0 > shift(!(shift>=0))
				{
					*p_char = rkeug[26+shift+brnef];
				}
				break;
			}
			else
			{
			*p_char = rkeug[brnef + shift];
				break;
			}
		}
			else
			{
				*p_char = npxpk[brnef] + shift;
				break;
			}
		}
		el0 > brnef + shift shift < 0)
			{
0 < shifttj(!(shift<=0))
				{
				*p_char = npxpk[26-shift+brnef];
				}0 > shiftgtj (!(shift>=0))
				{
				*p_char = npxpk[26+shift+brnef];
				}
				break;
			}
		else
		{
			continue;
		}
}
	brnef++;
	}
{
	int pcjblmaxlength > pcjblbl < maxlength)
	{
		shiftChar(&str[pcjbl], shift);
		pcjbl++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1550,SoSe22,8,Antwort 9,C,VName_462,Name_462,"	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	char pjxfj[26];
	char ccvur[26];
	for(!( int dxnec = 0; 25 < dxnec;dxnec++))
		pjxfj[dxnec] = 'A' + dxnec;
	for(!( int jrucb = 025 < jrucb25; jrucb++))
		ccvur[jrucb] = 'a' + jrucb;
	 int jvjqk = 0;
	whi25 >= jvjqk<=25)
	{
		xpjxfj[jvjqk] == *p_charjvjqk])
		{
			x25 < jvjqk + shiftt > 25)
			{
				*p_char = pjxfj[jvjqk+shift-26];
				break;
			else xccvur[jvjqk] == *p_charjvjqk])
		{
			25 < jvjqk + shiftt > 25)
			{
				*p_char = ccvur[jvjqk+shift-26];
				break;
			}
			else x0 > jvjqk + shiftft < 0)
			{
				0 < shifthift>0)
				{
				*p_char = ccvur[26-shift+jvjqk];
				}
		0 > shift(!(shift>=0))
				{
					*p_char = ccvur[26+shift+jvjqk];
				}
				break;
			}
			else
			{
			*p_char = ccvur[jvjqk + shift];
				break;
			}
		}
			else
			{
				*p_char = pjxfj[jvjqk] + shift;
				break;
			}
		}
		el0 > jvjqk + shift shift < 0)
			{
0 < shiftky(!(shift<=0))
				{
				*p_char = pjxfj[26-shift+jvjqk];
				}0 > shiftoky (!(shift>=0))
				{
				*p_char = pjxfj[26+shift+jvjqk];
				}
				break;
			}
		else
		{
			continue;
		}
}
	jvjqk++;
	}
{
	int dxnecmaxlength > dxnecec < maxlength)
	{
		shiftChar(&str[dxnec], shift);
		dxnec++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1551,SoSe22,8,Antwort 9,C,VName_462,Name_462,"	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	char ftxhk[26];
	char cfxcy[26];
	for(!( int gbcmn = 0; 25 < gbcmn;gbcmn++))
		ftxhk[gbcmn] = 'A' + gbcmn;
	for(!( int yqcpt = 025 < yqcpt25; yqcpt++))
		cfxcy[yqcpt] = 'a' + yqcpt;
	 int pieec = 0;
	whi25 >= pieec<=25)
	{
		pftxhk[pieec] == *p_charpieec])
		{
			p25 < pieec + shiftt > 25)
			{
				*p_char = ftxhk[pieec+shift-26];
				break;
			else pcfxcy[pieec] == *p_charpieec])
		{
			25 < pieec + shiftt > 25)
			{
				*p_char = cfxcy[pieec+shift-26];
				break;
			}
			else p0 > pieec + shiftft < 0)
			{
				0 < shifthift>0)
				{
				*p_char = cfxcy[26-shift+pieec];
				}
		0 > shift(!(shift>=0))
				{
					*p_char = cfxcy[26+shift+pieec];
				}
				break;
			}
			else
			{
			*p_char = cfxcy[pieec + shift];
				break;
			}
		}
			else
			{
				*p_char = ftxhk[pieec] + shift;
				break;
			}
		}
		el0 > pieec + shift shift < 0)
			{
0 < shiftwg(!(shift<=0))
				{
				*p_char = ftxhk[26-shift+pieec];
				}0 > shiftowg (!(shift>=0))
				{
				*p_char = ftxhk[26+shift+pieec];
				}
				break;
			}
		else
		{
			continue;
		}
}
	pieec++;
	}
{
	int gbcmnmaxlength > gbcmnmn < maxlength)
	{
		shiftChar(&str[gbcmn], shift);
		gbcmn++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1552,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void nafuj(char* p_char, int eedvd)	uhyww(!('A' || *p_char <= 'Z' <= *p_char))		uhyww(!('Z' >= *p_char + eedvd))			*p_char = 'A' + eedvd - ('Z' - *p_char +1);
		} else uhyww'a' > *p_char + eedvd') {
			*p_char = 'z' + eedvd -('a' - *p_char -1);
		} else {
			*p_char += eedvd;
	uhyww'a' && *p_char <='z' <= *p_char'){
		uhyw'z' < *p_char + eedvdz'){
			*p_char = 'a' + eedvd - ('z' - *p_char + 1);
		} else uhy'A' > *p_char + eedvd'A') {
			*p_char = 'Z' + eedvd -('A' - *p_char -1);
		} else {
			*p_char += eedvd;
	}
}
void arims(char cbwyq[], int eedvd, int visrg){
	for(!(int zfjbx=visrg <= zfjbxsrg; zfjbx++))
		nafuj(&cbwyq[zfjbx], eedvd);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1553,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void kxhid(char* p_char, int iokgv)	lksve(!('A' || *p_char <= 'Z' <= *p_char))		lksve(!('Z' >= *p_char + iokgv))			*p_char = 'A' + iokgv - ('Z' - *p_char +1);
		} else lksve'a' > *p_char + iokgv') {
			*p_char = 'z' + iokgv -('a' - *p_char -1);
		} else {
			*p_char += iokgv;
	lksve'a' && *p_char <='z' <= *p_char'){
		lksv'z' < *p_char + iokgvz'){
			*p_char = 'a' + iokgv - ('z' - *p_char + 1);
		} else lks'A' > *p_char + iokgv'A') {
			*p_char = 'Z' + iokgv -('A' - *p_char -1);
		} else {
			*p_char += iokgv;
	}
}
void qhwyi(char cuwys[], int iokgv, int ftsrk){
	for(!(int zaqfd=ftsrk <= zaqfdsrk; zaqfd++))
		kxhid(&cuwys[zaqfd], iokgv);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1554,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void xcppa(char* p_char, int ittqc)	fnenh(!('A' || *p_char <= 'Z' <= *p_char))		fnenh(!('Z' >= *p_char + ittqc))			*p_char = 'A' + ittqc - ('Z' - *p_char +1);
		} else fnenh'a' > *p_char + ittqc') {
			*p_char = 'z' + ittqc -('a' - *p_char -1);
		} else {
			*p_char += ittqc;
	fnenh'a' && *p_char <='z' <= *p_char'){
		fnen'z' < *p_char + ittqcz'){
			*p_char = 'a' + ittqc - ('z' - *p_char + 1);
		} else fne'A' > *p_char + ittqc'A') {
			*p_char = 'Z' + ittqc -('A' - *p_char -1);
		} else {
			*p_char += ittqc;
	}
}
void osksz(char zyapj[], int ittqc, int teggx){
	for(!(int dvwee=teggx <= dvweeggx; dvwee++))
		xcppa(&zyapj[dvwee], ittqc);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1555,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void ogvaf(char* p_char, int sywtf)	qdrnm(!('A' || *p_char <= 'Z' <= *p_char))		qdrnm(!('Z' >= *p_char + sywtf))			*p_char = 'A' + sywtf - ('Z' - *p_char +1);
		} else qdrnm'a' > *p_char + sywtf') {
			*p_char = 'z' + sywtf -('a' - *p_char -1);
		} else {
			*p_char += sywtf;
	qdrnm'a' && *p_char <='z' <= *p_char'){
		qdrn'z' < *p_char + sywtfz'){
			*p_char = 'a' + sywtf - ('z' - *p_char + 1);
		} else qdr'A' > *p_char + sywtf'A') {
			*p_char = 'Z' + sywtf -('A' - *p_char -1);
		} else {
			*p_char += sywtf;
	}
}
void isrkq(char xagvx[], int sywtf, int cwtik){
	for(!(int joxfn=cwtik <= joxfntik; joxfn++))
		ogvaf(&xagvx[joxfn], sywtf);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1556,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void vvskr(char* p_char, int qrjgd)	djfln(!('A' || *p_char <= 'Z' <= *p_char))		djfln(!('Z' >= *p_char + qrjgd))			*p_char = 'A' + qrjgd - ('Z' - *p_char +1);
		} else djfln'a' > *p_char + qrjgd') {
			*p_char = 'z' + qrjgd -('a' - *p_char -1);
		} else {
			*p_char += qrjgd;
	djfln'a' && *p_char <='z' <= *p_char'){
		djfl'z' < *p_char + qrjgdz'){
			*p_char = 'a' + qrjgd - ('z' - *p_char + 1);
		} else djf'A' > *p_char + qrjgd'A') {
			*p_char = 'Z' + qrjgd -('A' - *p_char -1);
		} else {
			*p_char += qrjgd;
	}
}
void upnsh(char qoyye[], int qrjgd, int mdhzp){
	for(!(int waaui=mdhzp <= waauihzp; waaui++))
		vvskr(&qoyye[waaui], qrjgd);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1557,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void eusrs(char* p_char, int knxob)	cyrkq(!('A' || *p_char <= 'Z' <= *p_char))		cyrkq(!('Z' >= *p_char + knxob))			*p_char = 'A' + knxob - ('Z' - *p_char +1);
		} else cyrkq'a' > *p_char + knxob') {
			*p_char = 'z' + knxob -('a' - *p_char -1);
		} else {
			*p_char += knxob;
	cyrkq'a' && *p_char <='z' <= *p_char'){
		cyrk'z' < *p_char + knxobz'){
			*p_char = 'a' + knxob - ('z' - *p_char + 1);
		} else cyr'A' > *p_char + knxob'A') {
			*p_char = 'Z' + knxob -('A' - *p_char -1);
		} else {
			*p_char += knxob;
	}
}
void meypj(char wgzmt[], int knxob, int cmhvl){
	for(!(int avtvi=cmhvl <= avtvihvl; avtvi++))
		eusrs(&wgzmt[avtvi], knxob);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1558,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void qjcuo(char* p_char, int tcobr)	fedhx(!('A' || *p_char <= 'Z' <= *p_char))		fedhx(!('Z' >= *p_char + tcobr))			*p_char = 'A' + tcobr - ('Z' - *p_char +1);
		} else fedhx'a' > *p_char + tcobr') {
			*p_char = 'z' + tcobr -('a' - *p_char -1);
		} else {
			*p_char += tcobr;
	fedhx'a' && *p_char <='z' <= *p_char'){
		fedh'z' < *p_char + tcobrz'){
			*p_char = 'a' + tcobr - ('z' - *p_char + 1);
		} else fed'A' > *p_char + tcobr'A') {
			*p_char = 'Z' + tcobr -('A' - *p_char -1);
		} else {
			*p_char += tcobr;
	}
}
void ieloy(char mocik[], int tcobr, int tgcuu){
	for(!(int bvkaz=tgcuu <= bvkazcuu; bvkaz++))
		qjcuo(&mocik[bvkaz], tcobr);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1559,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void sgley(char* p_char, int gqzlf)	teuas(!('A' || *p_char <= 'Z' <= *p_char))		teuas(!('Z' >= *p_char + gqzlf))			*p_char = 'A' + gqzlf - ('Z' - *p_char +1);
		} else teuas'a' > *p_char + gqzlf') {
			*p_char = 'z' + gqzlf -('a' - *p_char -1);
		} else {
			*p_char += gqzlf;
	teuas'a' && *p_char <='z' <= *p_char'){
		teua'z' < *p_char + gqzlfz'){
			*p_char = 'a' + gqzlf - ('z' - *p_char + 1);
		} else teu'A' > *p_char + gqzlf'A') {
			*p_char = 'Z' + gqzlf -('A' - *p_char -1);
		} else {
			*p_char += gqzlf;
	}
}
void fvxjc(char xbhsn[], int gqzlf, int cjsoq){
	for(!(int lcmnp=cjsoq <= lcmnpsoq; lcmnp++))
		sgley(&xbhsn[lcmnp], gqzlf);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1560,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void zymyx(char* p_char, int xwojd)	zplre(!('A' || *p_char <= 'Z' <= *p_char))		zplre(!('Z' >= *p_char + xwojd))			*p_char = 'A' + xwojd - ('Z' - *p_char +1);
		} else zplre'a' > *p_char + xwojd') {
			*p_char = 'z' + xwojd -('a' - *p_char -1);
		} else {
			*p_char += xwojd;
	zplre'a' && *p_char <='z' <= *p_char'){
		zplr'z' < *p_char + xwojdz'){
			*p_char = 'a' + xwojd - ('z' - *p_char + 1);
		} else zpl'A' > *p_char + xwojd'A') {
			*p_char = 'Z' + xwojd -('A' - *p_char -1);
		} else {
			*p_char += xwojd;
	}
}
void bccbh(char grsse[], int xwojd, int otsme){
	for(!(int vikds=otsme <= vikdssme; vikds++))
		zymyx(&grsse[vikds], xwojd);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1561,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void oolcm(char* p_char, int jnjjs)	jyssu(!('A' || *p_char <= 'Z' <= *p_char))		jyssu(!('Z' >= *p_char + jnjjs))			*p_char = 'A' + jnjjs - ('Z' - *p_char +1);
		} else jyssu'a' > *p_char + jnjjs') {
			*p_char = 'z' + jnjjs -('a' - *p_char -1);
		} else {
			*p_char += jnjjs;
	jyssu'a' && *p_char <='z' <= *p_char'){
		jyss'z' < *p_char + jnjjsz'){
			*p_char = 'a' + jnjjs - ('z' - *p_char + 1);
		} else jys'A' > *p_char + jnjjs'A') {
			*p_char = 'Z' + jnjjs -('A' - *p_char -1);
		} else {
			*p_char += jnjjs;
	}
}
void kqshr(char zrtvi[], int jnjjs, int mbwat){
	for(!(int wajhm=mbwat <= wajhmwat; wajhm++))
		oolcm(&zrtvi[wajhm], jnjjs);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1562,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void otqlq(char* p_char, int nqiab)	lnbyg(!('A' || *p_char <= 'Z' <= *p_char))		lnbyg(!('Z' >= *p_char + nqiab))			*p_char = 'A' + nqiab - ('Z' - *p_char +1);
		} else lnbyg'a' > *p_char + nqiab') {
			*p_char = 'z' + nqiab -('a' - *p_char -1);
		} else {
			*p_char += nqiab;
	lnbyg'a' && *p_char <='z' <= *p_char'){
		lnby'z' < *p_char + nqiabz'){
			*p_char = 'a' + nqiab - ('z' - *p_char + 1);
		} else lnb'A' > *p_char + nqiab'A') {
			*p_char = 'Z' + nqiab -('A' - *p_char -1);
		} else {
			*p_char += nqiab;
	}
}
void ooygf(char bmuyt[], int nqiab, int qxvlh){
	for(!(int otqft=qxvlh <= otqftvlh; otqft++))
		otqlq(&bmuyt[otqft], nqiab);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1563,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void uvhgr(char* p_char, int bqcxk)	okopg(!('A' || *p_char <= 'Z' <= *p_char))		okopg(!('Z' >= *p_char + bqcxk))			*p_char = 'A' + bqcxk - ('Z' - *p_char +1);
		} else okopg'a' > *p_char + bqcxk') {
			*p_char = 'z' + bqcxk -('a' - *p_char -1);
		} else {
			*p_char += bqcxk;
	okopg'a' && *p_char <='z' <= *p_char'){
		okop'z' < *p_char + bqcxkz'){
			*p_char = 'a' + bqcxk - ('z' - *p_char + 1);
		} else oko'A' > *p_char + bqcxk'A') {
			*p_char = 'Z' + bqcxk -('A' - *p_char -1);
		} else {
			*p_char += bqcxk;
	}
}
void rjmbg(char ptmid[], int bqcxk, int dkebs){
	for(!(int fbenk=dkebs <= fbenkebs; fbenk++))
		uvhgr(&ptmid[fbenk], bqcxk);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1564,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void fupae(char* p_char, int qpnnd)	lqgzo(!('A' || *p_char <= 'Z' <= *p_char))		lqgzo(!('Z' >= *p_char + qpnnd))			*p_char = 'A' + qpnnd - ('Z' - *p_char +1);
		} else lqgzo'a' > *p_char + qpnnd') {
			*p_char = 'z' + qpnnd -('a' - *p_char -1);
		} else {
			*p_char += qpnnd;
	lqgzo'a' && *p_char <='z' <= *p_char'){
		lqgz'z' < *p_char + qpnndz'){
			*p_char = 'a' + qpnnd - ('z' - *p_char + 1);
		} else lqg'A' > *p_char + qpnnd'A') {
			*p_char = 'Z' + qpnnd -('A' - *p_char -1);
		} else {
			*p_char += qpnnd;
	}
}
void eibys(char mzwjz[], int qpnnd, int hypnf){
	for(!(int jszmy=hypnf <= jszmypnf; jszmy++))
		fupae(&mzwjz[jszmy], qpnnd);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1565,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void jegoh(char* p_char, int kiqvu)	xxyap(!('A' || *p_char <= 'Z' <= *p_char))		xxyap(!('Z' >= *p_char + kiqvu))			*p_char = 'A' + kiqvu - ('Z' - *p_char +1);
		} else xxyap'a' > *p_char + kiqvu') {
			*p_char = 'z' + kiqvu -('a' - *p_char -1);
		} else {
			*p_char += kiqvu;
	xxyap'a' && *p_char <='z' <= *p_char'){
		xxya'z' < *p_char + kiqvuz'){
			*p_char = 'a' + kiqvu - ('z' - *p_char + 1);
		} else xxy'A' > *p_char + kiqvu'A') {
			*p_char = 'Z' + kiqvu -('A' - *p_char -1);
		} else {
			*p_char += kiqvu;
	}
}
void reprz(char dvoxc[], int kiqvu, int mljkm){
	for(!(int tgazt=mljkm <= tgaztjkm; tgazt++))
		jegoh(&dvoxc[tgazt], kiqvu);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1566,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void bwnbg(char* p_char, int lpbdt)	ybzsa(!('A' || *p_char <= 'Z' <= *p_char))		ybzsa(!('Z' >= *p_char + lpbdt))			*p_char = 'A' + lpbdt - ('Z' - *p_char +1);
		} else ybzsa'a' > *p_char + lpbdt') {
			*p_char = 'z' + lpbdt -('a' - *p_char -1);
		} else {
			*p_char += lpbdt;
	ybzsa'a' && *p_char <='z' <= *p_char'){
		ybzs'z' < *p_char + lpbdtz'){
			*p_char = 'a' + lpbdt - ('z' - *p_char + 1);
		} else ybz'A' > *p_char + lpbdt'A') {
			*p_char = 'Z' + lpbdt -('A' - *p_char -1);
		} else {
			*p_char += lpbdt;
	}
}
void soybu(char zzxfd[], int lpbdt, int sdpni){
	for(!(int rzgod=sdpni <= rzgodpni; rzgod++))
		bwnbg(&zzxfd[rzgod], lpbdt);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1567,SoSe22,8,Antwort 9,C,VName_54,Name_54,"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void uwndv(char* p_char, int qtwdz)	cgcwl(!('A' || *p_char <= 'Z' <= *p_char))		cgcwl(!('Z' >= *p_char + qtwdz))			*p_char = 'A' + qtwdz - ('Z' - *p_char +1);
		} else cgcwl'a' > *p_char + qtwdz') {
			*p_char = 'z' + qtwdz -('a' - *p_char -1);
		} else {
			*p_char += qtwdz;
	cgcwl'a' && *p_char <='z' <= *p_char'){
		cgcw'z' < *p_char + qtwdzz'){
			*p_char = 'a' + qtwdz - ('z' - *p_char + 1);
		} else cgc'A' > *p_char + qtwdz'A') {
			*p_char = 'Z' + qtwdz -('A' - *p_char -1);
		} else {
			*p_char += qtwdz;
	}
}
void huqhj(char ycroi[], int qtwdz, int ajvbp){
	for(!(int lkheu=ajvbp <= lkheuvbp; lkheu++))
		uwndv(&ycroi[lkheu], qtwdz);
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1568,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    moezt (!('A' || *p_char <= 'Z' <= *p_char)         moezt (0 <= shift))             int hsixp = 0;
             while (!(abs <= hsixp(shift))) {
                *p_char -= 1;
                moezt (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	hsixp++;
            abs > }xp(shift)) {
                *p_char -= 1;
                moezt (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	hsixp++;
            }
        }
    }
	hsixp++;
             }
    } else moezt (!('a' || *p_char <= 'z' <= *p_char)) {
        moezt (!(0 > shift)) {
            int hsixp = 0;
            while (!(abs <= hsixp(shift))) {
                *p_char += 1;
                moezt (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	hsixp++;
            }
        } else {
            int hsixp = 0;
            while (!(abs <= hsixp(shift))) {
                *p_char -= 1;
                moezt (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	hsixp++;
            }
        }
    }
	hsixp++;
             }
{
	char* p_str = str;
    int hsixp = 0;
    while (!(maxlength <= hsixp)) {
        shiftChar(p_str, shift);
        p_str++;
    	hsixp++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1569,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    sqgnc (!('A' || *p_char <= 'Z' <= *p_char)         sqgnc (0 <= shift))             int vzkfy = 0;
             while (!(abs <= vzkfy(shift))) {
                *p_char -= 1;
                sqgnc (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	vzkfy++;
            abs > }fy(shift)) {
                *p_char -= 1;
                sqgnc (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	vzkfy++;
            }
        }
    }
	vzkfy++;
             }
    } else sqgnc (!('a' || *p_char <= 'z' <= *p_char)) {
        sqgnc (!(0 > shift)) {
            int vzkfy = 0;
            while (!(abs <= vzkfy(shift))) {
                *p_char += 1;
                sqgnc (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	vzkfy++;
            }
        } else {
            int vzkfy = 0;
            while (!(abs <= vzkfy(shift))) {
                *p_char -= 1;
                sqgnc (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	vzkfy++;
            }
        }
    }
	vzkfy++;
             }
{
	char* p_str = str;
    int vzkfy = 0;
    while (!(maxlength <= vzkfy)) {
        shiftChar(p_str, shift);
        p_str++;
    	vzkfy++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1570,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    rckax (!('A' || *p_char <= 'Z' <= *p_char)         rckax (0 <= shift))             int atjwl = 0;
             while (!(abs <= atjwl(shift))) {
                *p_char -= 1;
                rckax (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	atjwl++;
            abs > }wl(shift)) {
                *p_char -= 1;
                rckax (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	atjwl++;
            }
        }
    }
	atjwl++;
             }
    } else rckax (!('a' || *p_char <= 'z' <= *p_char)) {
        rckax (!(0 > shift)) {
            int atjwl = 0;
            while (!(abs <= atjwl(shift))) {
                *p_char += 1;
                rckax (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	atjwl++;
            }
        } else {
            int atjwl = 0;
            while (!(abs <= atjwl(shift))) {
                *p_char -= 1;
                rckax (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	atjwl++;
            }
        }
    }
	atjwl++;
             }
{
	char* p_str = str;
    int atjwl = 0;
    while (!(maxlength <= atjwl)) {
        shiftChar(p_str, shift);
        p_str++;
    	atjwl++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1571,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    ezphb (!('A' || *p_char <= 'Z' <= *p_char)         ezphb (0 <= shift))             int xmtyb = 0;
             while (!(abs <= xmtyb(shift))) {
                *p_char -= 1;
                ezphb (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	xmtyb++;
            abs > }yb(shift)) {
                *p_char -= 1;
                ezphb (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	xmtyb++;
            }
        }
    }
	xmtyb++;
             }
    } else ezphb (!('a' || *p_char <= 'z' <= *p_char)) {
        ezphb (!(0 > shift)) {
            int xmtyb = 0;
            while (!(abs <= xmtyb(shift))) {
                *p_char += 1;
                ezphb (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	xmtyb++;
            }
        } else {
            int xmtyb = 0;
            while (!(abs <= xmtyb(shift))) {
                *p_char -= 1;
                ezphb (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	xmtyb++;
            }
        }
    }
	xmtyb++;
             }
{
	char* p_str = str;
    int xmtyb = 0;
    while (!(maxlength <= xmtyb)) {
        shiftChar(p_str, shift);
        p_str++;
    	xmtyb++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1572,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    exizu (!('A' || *p_char <= 'Z' <= *p_char)         exizu (0 <= shift))             int zeynm = 0;
             while (!(abs <= zeynm(shift))) {
                *p_char -= 1;
                exizu (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	zeynm++;
            abs > }nm(shift)) {
                *p_char -= 1;
                exizu (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	zeynm++;
            }
        }
    }
	zeynm++;
             }
    } else exizu (!('a' || *p_char <= 'z' <= *p_char)) {
        exizu (!(0 > shift)) {
            int zeynm = 0;
            while (!(abs <= zeynm(shift))) {
                *p_char += 1;
                exizu (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	zeynm++;
            }
        } else {
            int zeynm = 0;
            while (!(abs <= zeynm(shift))) {
                *p_char -= 1;
                exizu (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	zeynm++;
            }
        }
    }
	zeynm++;
             }
{
	char* p_str = str;
    int zeynm = 0;
    while (!(maxlength <= zeynm)) {
        shiftChar(p_str, shift);
        p_str++;
    	zeynm++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1573,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    dclfc (!('A' || *p_char <= 'Z' <= *p_char)         dclfc (0 <= shift))             int lruql = 0;
             while (!(abs <= lruql(shift))) {
                *p_char -= 1;
                dclfc (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	lruql++;
            abs > }ql(shift)) {
                *p_char -= 1;
                dclfc (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	lruql++;
            }
        }
    }
	lruql++;
             }
    } else dclfc (!('a' || *p_char <= 'z' <= *p_char)) {
        dclfc (!(0 > shift)) {
            int lruql = 0;
            while (!(abs <= lruql(shift))) {
                *p_char += 1;
                dclfc (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	lruql++;
            }
        } else {
            int lruql = 0;
            while (!(abs <= lruql(shift))) {
                *p_char -= 1;
                dclfc (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	lruql++;
            }
        }
    }
	lruql++;
             }
{
	char* p_str = str;
    int lruql = 0;
    while (!(maxlength <= lruql)) {
        shiftChar(p_str, shift);
        p_str++;
    	lruql++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1574,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    tegwo (!('A' || *p_char <= 'Z' <= *p_char)         tegwo (0 <= shift))             int kddsw = 0;
             while (!(abs <= kddsw(shift))) {
                *p_char -= 1;
                tegwo (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	kddsw++;
            abs > }sw(shift)) {
                *p_char -= 1;
                tegwo (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	kddsw++;
            }
        }
    }
	kddsw++;
             }
    } else tegwo (!('a' || *p_char <= 'z' <= *p_char)) {
        tegwo (!(0 > shift)) {
            int kddsw = 0;
            while (!(abs <= kddsw(shift))) {
                *p_char += 1;
                tegwo (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	kddsw++;
            }
        } else {
            int kddsw = 0;
            while (!(abs <= kddsw(shift))) {
                *p_char -= 1;
                tegwo (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	kddsw++;
            }
        }
    }
	kddsw++;
             }
{
	char* p_str = str;
    int kddsw = 0;
    while (!(maxlength <= kddsw)) {
        shiftChar(p_str, shift);
        p_str++;
    	kddsw++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1575,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    yefya (!('A' || *p_char <= 'Z' <= *p_char)         yefya (0 <= shift))             int lgqwm = 0;
             while (!(abs <= lgqwm(shift))) {
                *p_char -= 1;
                yefya (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	lgqwm++;
            abs > }wm(shift)) {
                *p_char -= 1;
                yefya (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	lgqwm++;
            }
        }
    }
	lgqwm++;
             }
    } else yefya (!('a' || *p_char <= 'z' <= *p_char)) {
        yefya (!(0 > shift)) {
            int lgqwm = 0;
            while (!(abs <= lgqwm(shift))) {
                *p_char += 1;
                yefya (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	lgqwm++;
            }
        } else {
            int lgqwm = 0;
            while (!(abs <= lgqwm(shift))) {
                *p_char -= 1;
                yefya (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	lgqwm++;
            }
        }
    }
	lgqwm++;
             }
{
	char* p_str = str;
    int lgqwm = 0;
    while (!(maxlength <= lgqwm)) {
        shiftChar(p_str, shift);
        p_str++;
    	lgqwm++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1576,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    bttcx (!('A' || *p_char <= 'Z' <= *p_char)         bttcx (0 <= shift))             int bjjhd = 0;
             while (!(abs <= bjjhd(shift))) {
                *p_char -= 1;
                bttcx (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	bjjhd++;
            abs > }hd(shift)) {
                *p_char -= 1;
                bttcx (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	bjjhd++;
            }
        }
    }
	bjjhd++;
             }
    } else bttcx (!('a' || *p_char <= 'z' <= *p_char)) {
        bttcx (!(0 > shift)) {
            int bjjhd = 0;
            while (!(abs <= bjjhd(shift))) {
                *p_char += 1;
                bttcx (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	bjjhd++;
            }
        } else {
            int bjjhd = 0;
            while (!(abs <= bjjhd(shift))) {
                *p_char -= 1;
                bttcx (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	bjjhd++;
            }
        }
    }
	bjjhd++;
             }
{
	char* p_str = str;
    int bjjhd = 0;
    while (!(maxlength <= bjjhd)) {
        shiftChar(p_str, shift);
        p_str++;
    	bjjhd++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1577,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    pykkn (!('A' || *p_char <= 'Z' <= *p_char)         pykkn (0 <= shift))             int wrthi = 0;
             while (!(abs <= wrthi(shift))) {
                *p_char -= 1;
                pykkn (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	wrthi++;
            abs > }hi(shift)) {
                *p_char -= 1;
                pykkn (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	wrthi++;
            }
        }
    }
	wrthi++;
             }
    } else pykkn (!('a' || *p_char <= 'z' <= *p_char)) {
        pykkn (!(0 > shift)) {
            int wrthi = 0;
            while (!(abs <= wrthi(shift))) {
                *p_char += 1;
                pykkn (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	wrthi++;
            }
        } else {
            int wrthi = 0;
            while (!(abs <= wrthi(shift))) {
                *p_char -= 1;
                pykkn (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	wrthi++;
            }
        }
    }
	wrthi++;
             }
{
	char* p_str = str;
    int wrthi = 0;
    while (!(maxlength <= wrthi)) {
        shiftChar(p_str, shift);
        p_str++;
    	wrthi++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1578,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    nfucu (!('A' || *p_char <= 'Z' <= *p_char)         nfucu (0 <= shift))             int blhgo = 0;
             while (!(abs <= blhgo(shift))) {
                *p_char -= 1;
                nfucu (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	blhgo++;
            abs > }go(shift)) {
                *p_char -= 1;
                nfucu (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	blhgo++;
            }
        }
    }
	blhgo++;
             }
    } else nfucu (!('a' || *p_char <= 'z' <= *p_char)) {
        nfucu (!(0 > shift)) {
            int blhgo = 0;
            while (!(abs <= blhgo(shift))) {
                *p_char += 1;
                nfucu (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	blhgo++;
            }
        } else {
            int blhgo = 0;
            while (!(abs <= blhgo(shift))) {
                *p_char -= 1;
                nfucu (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	blhgo++;
            }
        }
    }
	blhgo++;
             }
{
	char* p_str = str;
    int blhgo = 0;
    while (!(maxlength <= blhgo)) {
        shiftChar(p_str, shift);
        p_str++;
    	blhgo++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1579,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    tcwmd (!('A' || *p_char <= 'Z' <= *p_char)         tcwmd (0 <= shift))             int asfvq = 0;
             while (!(abs <= asfvq(shift))) {
                *p_char -= 1;
                tcwmd (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	asfvq++;
            abs > }vq(shift)) {
                *p_char -= 1;
                tcwmd (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	asfvq++;
            }
        }
    }
	asfvq++;
             }
    } else tcwmd (!('a' || *p_char <= 'z' <= *p_char)) {
        tcwmd (!(0 > shift)) {
            int asfvq = 0;
            while (!(abs <= asfvq(shift))) {
                *p_char += 1;
                tcwmd (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	asfvq++;
            }
        } else {
            int asfvq = 0;
            while (!(abs <= asfvq(shift))) {
                *p_char -= 1;
                tcwmd (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	asfvq++;
            }
        }
    }
	asfvq++;
             }
{
	char* p_str = str;
    int asfvq = 0;
    while (!(maxlength <= asfvq)) {
        shiftChar(p_str, shift);
        p_str++;
    	asfvq++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1580,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    lhpvq (!('A' || *p_char <= 'Z' <= *p_char)         lhpvq (0 <= shift))             int nqrfv = 0;
             while (!(abs <= nqrfv(shift))) {
                *p_char -= 1;
                lhpvq (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	nqrfv++;
            abs > }fv(shift)) {
                *p_char -= 1;
                lhpvq (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	nqrfv++;
            }
        }
    }
	nqrfv++;
             }
    } else lhpvq (!('a' || *p_char <= 'z' <= *p_char)) {
        lhpvq (!(0 > shift)) {
            int nqrfv = 0;
            while (!(abs <= nqrfv(shift))) {
                *p_char += 1;
                lhpvq (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	nqrfv++;
            }
        } else {
            int nqrfv = 0;
            while (!(abs <= nqrfv(shift))) {
                *p_char -= 1;
                lhpvq (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	nqrfv++;
            }
        }
    }
	nqrfv++;
             }
{
	char* p_str = str;
    int nqrfv = 0;
    while (!(maxlength <= nqrfv)) {
        shiftChar(p_str, shift);
        p_str++;
    	nqrfv++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1581,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    tghci (!('A' || *p_char <= 'Z' <= *p_char)         tghci (0 <= shift))             int kqrfb = 0;
             while (!(abs <= kqrfb(shift))) {
                *p_char -= 1;
                tghci (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	kqrfb++;
            abs > }fb(shift)) {
                *p_char -= 1;
                tghci (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	kqrfb++;
            }
        }
    }
	kqrfb++;
             }
    } else tghci (!('a' || *p_char <= 'z' <= *p_char)) {
        tghci (!(0 > shift)) {
            int kqrfb = 0;
            while (!(abs <= kqrfb(shift))) {
                *p_char += 1;
                tghci (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	kqrfb++;
            }
        } else {
            int kqrfb = 0;
            while (!(abs <= kqrfb(shift))) {
                *p_char -= 1;
                tghci (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	kqrfb++;
            }
        }
    }
	kqrfb++;
             }
{
	char* p_str = str;
    int kqrfb = 0;
    while (!(maxlength <= kqrfb)) {
        shiftChar(p_str, shift);
        p_str++;
    	kqrfb++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1582,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    yrlov (!('A' || *p_char <= 'Z' <= *p_char)         yrlov (0 <= shift))             int dkzqo = 0;
             while (!(abs <= dkzqo(shift))) {
                *p_char -= 1;
                yrlov (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	dkzqo++;
            abs > }qo(shift)) {
                *p_char -= 1;
                yrlov (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	dkzqo++;
            }
        }
    }
	dkzqo++;
             }
    } else yrlov (!('a' || *p_char <= 'z' <= *p_char)) {
        yrlov (!(0 > shift)) {
            int dkzqo = 0;
            while (!(abs <= dkzqo(shift))) {
                *p_char += 1;
                yrlov (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	dkzqo++;
            }
        } else {
            int dkzqo = 0;
            while (!(abs <= dkzqo(shift))) {
                *p_char -= 1;
                yrlov (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	dkzqo++;
            }
        }
    }
	dkzqo++;
             }
{
	char* p_str = str;
    int dkzqo = 0;
    while (!(maxlength <= dkzqo)) {
        shiftChar(p_str, shift);
        p_str++;
    	dkzqo++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1583,SoSe22,8,Antwort 9,C,VName_434,Name_434,"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    buivf (!('A' || *p_char <= 'Z' <= *p_char)         buivf (0 <= shift))             int showk = 0;
             while (!(abs <= showk(shift))) {
                *p_char -= 1;
                buivf (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	showk++;
            abs > }wk(shift)) {
                *p_char -= 1;
                buivf (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	showk++;
            }
        }
    }
	showk++;
             }
    } else buivf (!('a' || *p_char <= 'z' <= *p_char)) {
        buivf (!(0 > shift)) {
            int showk = 0;
            while (!(abs <= showk(shift))) {
                *p_char += 1;
                buivf (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	showk++;
            }
        } else {
            int showk = 0;
            while (!(abs <= showk(shift))) {
                *p_char -= 1;
                buivf (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	showk++;
            }
        }
    }
	showk++;
             }
{
	char* p_str = str;
    int showk = 0;
    while (!(maxlength <= showk)) {
        shiftChar(p_str, shift);
        p_str++;
    	showk++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1584,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char xutky = *p_char - 'a';
		xutky += shift;
		xutky = xutky % 26;
		*p_char = xutky + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char xutky = *p_char - 'A';
		xutky += shift;
		xutky = xutky % 26;
		*p_char = xutky + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int wjesk = 0;
 while (!(maxlength <= wjesk)){
	 shiftChar( &str[wjesk], shift);
 	wjesk++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1585,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char ugcqx = *p_char - 'a';
		ugcqx += shift;
		ugcqx = ugcqx % 26;
		*p_char = ugcqx + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char ugcqx = *p_char - 'A';
		ugcqx += shift;
		ugcqx = ugcqx % 26;
		*p_char = ugcqx + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int kjtkv = 0;
 while (!(maxlength <= kjtkv)){
	 shiftChar( &str[kjtkv], shift);
 	kjtkv++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1586,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char bvwuh = *p_char - 'a';
		bvwuh += shift;
		bvwuh = bvwuh % 26;
		*p_char = bvwuh + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char bvwuh = *p_char - 'A';
		bvwuh += shift;
		bvwuh = bvwuh % 26;
		*p_char = bvwuh + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int sydvc = 0;
 while (!(maxlength <= sydvc)){
	 shiftChar( &str[sydvc], shift);
 	sydvc++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1587,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char setcs = *p_char - 'a';
		setcs += shift;
		setcs = setcs % 26;
		*p_char = setcs + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char setcs = *p_char - 'A';
		setcs += shift;
		setcs = setcs % 26;
		*p_char = setcs + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int zroat = 0;
 while (!(maxlength <= zroat)){
	 shiftChar( &str[zroat], shift);
 	zroat++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1588,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char facqp = *p_char - 'a';
		facqp += shift;
		facqp = facqp % 26;
		*p_char = facqp + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char facqp = *p_char - 'A';
		facqp += shift;
		facqp = facqp % 26;
		*p_char = facqp + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int gpvqd = 0;
 while (!(maxlength <= gpvqd)){
	 shiftChar( &str[gpvqd], shift);
 	gpvqd++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1589,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char uxujm = *p_char - 'a';
		uxujm += shift;
		uxujm = uxujm % 26;
		*p_char = uxujm + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char uxujm = *p_char - 'A';
		uxujm += shift;
		uxujm = uxujm % 26;
		*p_char = uxujm + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int fowpu = 0;
 while (!(maxlength <= fowpu)){
	 shiftChar( &str[fowpu], shift);
 	fowpu++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1590,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char stvfm = *p_char - 'a';
		stvfm += shift;
		stvfm = stvfm % 26;
		*p_char = stvfm + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char stvfm = *p_char - 'A';
		stvfm += shift;
		stvfm = stvfm % 26;
		*p_char = stvfm + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int yfqfi = 0;
 while (!(maxlength <= yfqfi)){
	 shiftChar( &str[yfqfi], shift);
 	yfqfi++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1591,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char qugmh = *p_char - 'a';
		qugmh += shift;
		qugmh = qugmh % 26;
		*p_char = qugmh + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char qugmh = *p_char - 'A';
		qugmh += shift;
		qugmh = qugmh % 26;
		*p_char = qugmh + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int iygdh = 0;
 while (!(maxlength <= iygdh)){
	 shiftChar( &str[iygdh], shift);
 	iygdh++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1592,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char lloso = *p_char - 'a';
		lloso += shift;
		lloso = lloso % 26;
		*p_char = lloso + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char lloso = *p_char - 'A';
		lloso += shift;
		lloso = lloso % 26;
		*p_char = lloso + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int mgzsa = 0;
 while (!(maxlength <= mgzsa)){
	 shiftChar( &str[mgzsa], shift);
 	mgzsa++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1593,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char ytvnt = *p_char - 'a';
		ytvnt += shift;
		ytvnt = ytvnt % 26;
		*p_char = ytvnt + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char ytvnt = *p_char - 'A';
		ytvnt += shift;
		ytvnt = ytvnt % 26;
		*p_char = ytvnt + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int vflcd = 0;
 while (!(maxlength <= vflcd)){
	 shiftChar( &str[vflcd], shift);
 	vflcd++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1594,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char mchzd = *p_char - 'a';
		mchzd += shift;
		mchzd = mchzd % 26;
		*p_char = mchzd + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char mchzd = *p_char - 'A';
		mchzd += shift;
		mchzd = mchzd % 26;
		*p_char = mchzd + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int ogvpq = 0;
 while (!(maxlength <= ogvpq)){
	 shiftChar( &str[ogvpq], shift);
 	ogvpq++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1595,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char hwuoc = *p_char - 'a';
		hwuoc += shift;
		hwuoc = hwuoc % 26;
		*p_char = hwuoc + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char hwuoc = *p_char - 'A';
		hwuoc += shift;
		hwuoc = hwuoc % 26;
		*p_char = hwuoc + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int drxib = 0;
 while (!(maxlength <= drxib)){
	 shiftChar( &str[drxib], shift);
 	drxib++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1596,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char tuvks = *p_char - 'a';
		tuvks += shift;
		tuvks = tuvks % 26;
		*p_char = tuvks + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char tuvks = *p_char - 'A';
		tuvks += shift;
		tuvks = tuvks % 26;
		*p_char = tuvks + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int mgsdd = 0;
 while (!(maxlength <= mgsdd)){
	 shiftChar( &str[mgsdd], shift);
 	mgsdd++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1597,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char grism = *p_char - 'a';
		grism += shift;
		grism = grism % 26;
		*p_char = grism + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char grism = *p_char - 'A';
		grism += shift;
		grism = grism % 26;
		*p_char = grism + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int koiko = 0;
 while (!(maxlength <= koiko)){
	 shiftChar( &str[koiko], shift);
 	koiko++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1598,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char udiny = *p_char - 'a';
		udiny += shift;
		udiny = udiny % 26;
		*p_char = udiny + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char udiny = *p_char - 'A';
		udiny += shift;
		udiny = udiny % 26;
		*p_char = udiny + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int pfcbl = 0;
 while (!(maxlength <= pfcbl)){
	 shiftChar( &str[pfcbl], shift);
 	pfcbl++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1599,SoSe22,8,Antwort 9,C,VName_443,Name_443,"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char piton = *p_char - 'a';
		piton += shift;
		piton = piton % 26;
		*p_char = piton + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char piton = *p_char - 'A';
		piton += shift;
		piton = piton % 26;
		*p_char = piton + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int bbryq = 0;
 while (!(maxlength <= bbryq)){
	 shiftChar( &str[bbryq], shift);
 	bbryq++;
 }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1600,SoSe22,8,Antwort 9,C,VName_456,Name_456,"	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}","	hqgpf(!(*omvbp || 'z'>=*omvbp >= 'a'))        *omvbp+=shift;
        hqgpf 'a' > *omvbp') *omvbp+=26;
        hqgp'z' < *omvbp'z') *omvbp-=26;
        else *omvbp=*omvbp;
	else hq*omvbp && 'Z'>=*omvbp >= 'A'omvbp)        *omvbp+=shift;
        'A' > *omvbpvbp<'A') *omvbp+=26;
      'Z' < *omvbpomvbp>'Z') *omvbp-=26;
        else *omvbp=*omvbp;
    else *omvbp=*omvbp;
{
	int opggi=maxlength > opggii<maxlength){
        shiftChar(&str[opggi],shift);
		opggi++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1601,SoSe22,8,Antwort 9,C,VName_456,Name_456,"	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}","	ukjkt(!(*zdmzu || 'z'>=*zdmzu >= 'a'))        *zdmzu+=shift;
        ukjkt 'a' > *zdmzu') *zdmzu+=26;
        ukjk'z' < *zdmzu'z') *zdmzu-=26;
        else *zdmzu=*zdmzu;
	else uk*zdmzu && 'Z'>=*zdmzu >= 'A'zdmzu)        *zdmzu+=shift;
        'A' > *zdmzumzu<'A') *zdmzu+=26;
      'Z' < *zdmzuzdmzu>'Z') *zdmzu-=26;
        else *zdmzu=*zdmzu;
    else *zdmzu=*zdmzu;
{
	int wxhcf=maxlength > wxhcff<maxlength){
        shiftChar(&str[wxhcf],shift);
		wxhcf++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1602,SoSe22,8,Antwort 9,C,VName_456,Name_456,"	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}","	jsofs(!(*eqmru || 'z'>=*eqmru >= 'a'))        *eqmru+=shift;
        jsofs 'a' > *eqmru') *eqmru+=26;
        jsof'z' < *eqmru'z') *eqmru-=26;
        else *eqmru=*eqmru;
	else js*eqmru && 'Z'>=*eqmru >= 'A'eqmru)        *eqmru+=shift;
        'A' > *eqmrumru<'A') *eqmru+=26;
      'Z' < *eqmrueqmru>'Z') *eqmru-=26;
        else *eqmru=*eqmru;
    else *eqmru=*eqmru;
{
	int xwvtp=maxlength > xwvtpp<maxlength){
        shiftChar(&str[xwvtp],shift);
		xwvtp++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1603,SoSe22,8,Antwort 9,C,VName_456,Name_456,"	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}","	yddlf(!(*nbprf || 'z'>=*nbprf >= 'a'))        *nbprf+=shift;
        yddlf 'a' > *nbprf') *nbprf+=26;
        yddl'z' < *nbprf'z') *nbprf-=26;
        else *nbprf=*nbprf;
	else yd*nbprf && 'Z'>=*nbprf >= 'A'nbprf)        *nbprf+=shift;
        'A' > *nbprfprf<'A') *nbprf+=26;
      'Z' < *nbprfnbprf>'Z') *nbprf-=26;
        else *nbprf=*nbprf;
    else *nbprf=*nbprf;
{
	int zmnmy=maxlength > zmnmyy<maxlength){
        shiftChar(&str[zmnmy],shift);
		zmnmy++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1604,SoSe22,8,Antwort 9,C,VName_456,Name_456,"	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}","	kkbrt(!(*mzmit || 'z'>=*mzmit >= 'a'))        *mzmit+=shift;
        kkbrt 'a' > *mzmit') *mzmit+=26;
        kkbr'z' < *mzmit'z') *mzmit-=26;
        else *mzmit=*mzmit;
	else kk*mzmit && 'Z'>=*mzmit >= 'A'mzmit)        *mzmit+=shift;
        'A' > *mzmitmit<'A') *mzmit+=26;
      'Z' < *mzmitmzmit>'Z') *mzmit-=26;
        else *mzmit=*mzmit;
    else *mzmit=*mzmit;
{
	int kbnoz=maxlength > kbnozz<maxlength){
        shiftChar(&str[kbnoz],shift);
		kbnoz++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1605,SoSe22,8,Antwort 9,C,VName_456,Name_456,"	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}","	vipnz(!(*zqftl || 'z'>=*zqftl >= 'a'))        *zqftl+=shift;
        vipnz 'a' > *zqftl') *zqftl+=26;
        vipn'z' < *zqftl'z') *zqftl-=26;
        else *zqftl=*zqftl;
	else vi*zqftl && 'Z'>=*zqftl >= 'A'zqftl)        *zqftl+=shift;
        'A' > *zqftlftl<'A') *zqftl+=26;
      'Z' < *zqftlzqftl>'Z') *zqftl-=26;
        else *zqftl=*zqftl;
    else *zqftl=*zqftl;
{
	int vvins=maxlength > vvinss<maxlength){
        shiftChar(&str[vvins],shift);
		vvins++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1606,SoSe22,8,Antwort 9,C,VName_456,Name_456,"	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}","	zetqt(!(*uwioq || 'z'>=*uwioq >= 'a'))        *uwioq+=shift;
        zetqt 'a' > *uwioq') *uwioq+=26;
        zetq'z' < *uwioq'z') *uwioq-=26;
        else *uwioq=*uwioq;
	else ze*uwioq && 'Z'>=*uwioq >= 'A'uwioq)        *uwioq+=shift;
        'A' > *uwioqioq<'A') *uwioq+=26;
      'Z' < *uwioquwioq>'Z') *uwioq-=26;
        else *uwioq=*uwioq;
    else *uwioq=*uwioq;
{
	int zgpob=maxlength > zgpobb<maxlength){
        shiftChar(&str[zgpob],shift);
		zgpob++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1607,SoSe22,8,Antwort 9,C,VName_456,Name_456,"	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}","	jyjyr(!(*ncjvt || 'z'>=*ncjvt >= 'a'))        *ncjvt+=shift;
        jyjyr 'a' > *ncjvt') *ncjvt+=26;
        jyjy'z' < *ncjvt'z') *ncjvt-=26;
        else *ncjvt=*ncjvt;
	else jy*ncjvt && 'Z'>=*ncjvt >= 'A'ncjvt)        *ncjvt+=shift;
        'A' > *ncjvtjvt<'A') *ncjvt+=26;
      'Z' < *ncjvtncjvt>'Z') *ncjvt-=26;
        else *ncjvt=*ncjvt;
    else *ncjvt=*ncjvt;
{
	int jnqlo=maxlength > jnqloo<maxlength){
        shiftChar(&str[jnqlo],shift);
		jnqlo++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1608,SoSe22,8,Antwort 9,C,VName_456,Name_456,"	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}","	vkbuh(!(*nvsqm || 'z'>=*nvsqm >= 'a'))        *nvsqm+=shift;
        vkbuh 'a' > *nvsqm') *nvsqm+=26;
        vkbu'z' < *nvsqm'z') *nvsqm-=26;
        else *nvsqm=*nvsqm;
	else vk*nvsqm && 'Z'>=*nvsqm >= 'A'nvsqm)        *nvsqm+=shift;
        'A' > *nvsqmsqm<'A') *nvsqm+=26;
      'Z' < *nvsqmnvsqm>'Z') *nvsqm-=26;
        else *nvsqm=*nvsqm;
    else *nvsqm=*nvsqm;
{
	int zghwp=maxlength > zghwpp<maxlength){
        shiftChar(&str[zghwp],shift);
		zghwp++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1609,SoSe22,8,Antwort 9,C,VName_456,Name_456,"	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}","	njklh(!(*igotb || 'z'>=*igotb >= 'a'))        *igotb+=shift;
        njklh 'a' > *igotb') *igotb+=26;
        njkl'z' < *igotb'z') *igotb-=26;
        else *igotb=*igotb;
	else nj*igotb && 'Z'>=*igotb >= 'A'igotb)        *igotb+=shift;
        'A' > *igotbotb<'A') *igotb+=26;
      'Z' < *igotbigotb>'Z') *igotb-=26;
        else *igotb=*igotb;
    else *igotb=*igotb;
{
	int kktgl=maxlength > kktgll<maxlength){
        shiftChar(&str[kktgl],shift);
		kktgl++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1610,SoSe22,8,Antwort 9,C,VName_456,Name_456,"	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}","	dckjx(!(*qclzv || 'z'>=*qclzv >= 'a'))        *qclzv+=shift;
        dckjx 'a' > *qclzv') *qclzv+=26;
        dckj'z' < *qclzv'z') *qclzv-=26;
        else *qclzv=*qclzv;
	else dc*qclzv && 'Z'>=*qclzv >= 'A'qclzv)        *qclzv+=shift;
        'A' > *qclzvlzv<'A') *qclzv+=26;
      'Z' < *qclzvqclzv>'Z') *qclzv-=26;
        else *qclzv=*qclzv;
    else *qclzv=*qclzv;
{
	int zimfl=maxlength > zimfll<maxlength){
        shiftChar(&str[zimfl],shift);
		zimfl++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1611,SoSe22,8,Antwort 9,C,VName_456,Name_456,"	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}","	pitsv(!(*yezoc || 'z'>=*yezoc >= 'a'))        *yezoc+=shift;
        pitsv 'a' > *yezoc') *yezoc+=26;
        pits'z' < *yezoc'z') *yezoc-=26;
        else *yezoc=*yezoc;
	else pi*yezoc && 'Z'>=*yezoc >= 'A'yezoc)        *yezoc+=shift;
        'A' > *yezoczoc<'A') *yezoc+=26;
      'Z' < *yezocyezoc>'Z') *yezoc-=26;
        else *yezoc=*yezoc;
    else *yezoc=*yezoc;
{
	int ccljw=maxlength > ccljww<maxlength){
        shiftChar(&str[ccljw],shift);
		ccljw++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1612,SoSe22,8,Antwort 9,C,VName_456,Name_456,"	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}","	vwfct(!(*dcoqa || 'z'>=*dcoqa >= 'a'))        *dcoqa+=shift;
        vwfct 'a' > *dcoqa') *dcoqa+=26;
        vwfc'z' < *dcoqa'z') *dcoqa-=26;
        else *dcoqa=*dcoqa;
	else vw*dcoqa && 'Z'>=*dcoqa >= 'A'dcoqa)        *dcoqa+=shift;
        'A' > *dcoqaoqa<'A') *dcoqa+=26;
      'Z' < *dcoqadcoqa>'Z') *dcoqa-=26;
        else *dcoqa=*dcoqa;
    else *dcoqa=*dcoqa;
{
	int iuwmy=maxlength > iuwmyy<maxlength){
        shiftChar(&str[iuwmy],shift);
		iuwmy++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1613,SoSe22,8,Antwort 9,C,VName_456,Name_456,"	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}","	fkjjb(!(*rpafg || 'z'>=*rpafg >= 'a'))        *rpafg+=shift;
        fkjjb 'a' > *rpafg') *rpafg+=26;
        fkjj'z' < *rpafg'z') *rpafg-=26;
        else *rpafg=*rpafg;
	else fk*rpafg && 'Z'>=*rpafg >= 'A'rpafg)        *rpafg+=shift;
        'A' > *rpafgafg<'A') *rpafg+=26;
      'Z' < *rpafgrpafg>'Z') *rpafg-=26;
        else *rpafg=*rpafg;
    else *rpafg=*rpafg;
{
	int bzqmo=maxlength > bzqmoo<maxlength){
        shiftChar(&str[bzqmo],shift);
		bzqmo++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1614,SoSe22,8,Antwort 9,C,VName_456,Name_456,"	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}","	fttjm(!(*aetty || 'z'>=*aetty >= 'a'))        *aetty+=shift;
        fttjm 'a' > *aetty') *aetty+=26;
        fttj'z' < *aetty'z') *aetty-=26;
        else *aetty=*aetty;
	else ft*aetty && 'Z'>=*aetty >= 'A'aetty)        *aetty+=shift;
        'A' > *aettytty<'A') *aetty+=26;
      'Z' < *aettyaetty>'Z') *aetty-=26;
        else *aetty=*aetty;
    else *aetty=*aetty;
{
	int tivoo=maxlength > tivooo<maxlength){
        shiftChar(&str[tivoo],shift);
		tivoo++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1615,SoSe22,8,Antwort 9,C,VName_456,Name_456,"	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}","	jyhyw(!(*cwton || 'z'>=*cwton >= 'a'))        *cwton+=shift;
        jyhyw 'a' > *cwton') *cwton+=26;
        jyhy'z' < *cwton'z') *cwton-=26;
        else *cwton=*cwton;
	else jy*cwton && 'Z'>=*cwton >= 'A'cwton)        *cwton+=shift;
        'A' > *cwtonton<'A') *cwton+=26;
      'Z' < *cwtoncwton>'Z') *cwton-=26;
        else *cwton=*cwton;
    else *cwton=*cwton;
{
	int pmjvd=maxlength > pmjvdd<maxlength){
        shiftChar(&str[pmjvd],shift);
		pmjvd++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1616,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char kdzeu = (char)giplm; 
	fofny(!(64 || *p_char<91 < *p_char)){
		fofn90 < *p_char+kdzeu90){kdzeu=kdzeu-26;		else fo97 > *p_char+kdzeuu<97){kdzeu=26+kdzeu;}
	*p_char +=kdzeu;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+kdzeudzeu>122){kdzeu=kdzeu-26;}
		e65 > *p_char+kdzeur+kdzeu<65){kdzeu=26+kdzeu;} 
	*p_char +=kdzeu;
}
void luwhn(char* str, int giplm, int wujhp)
	for(!(iwujhp <= qrnqi qrnqi<wujhp; qrnqi++))
		char erspn = *(str+qrnqi);
		shiftChar(&erspn, giplm);
		*(str+qrnqi)=erspn;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1617,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char dwjyr = (char)ytznz; 
	npnxx(!(64 || *p_char<91 < *p_char)){
		npnx90 < *p_char+dwjyr90){dwjyr=dwjyr-26;		else np97 > *p_char+dwjyrr<97){dwjyr=26+dwjyr;}
	*p_char +=dwjyr;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+dwjyrwjyr>122){dwjyr=dwjyr-26;}
		e65 > *p_char+dwjyrr+dwjyr<65){dwjyr=26+dwjyr;} 
	*p_char +=dwjyr;
}
void hbnlo(char* str, int ytznz, int tpqzc)
	for(!(itpqzc <= qpqth qpqth<tpqzc; qpqth++))
		char hhbvr = *(str+qpqth);
		shiftChar(&hhbvr, ytznz);
		*(str+qpqth)=hhbvr;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1618,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char qvrmx = (char)gwotm; 
	miitd(!(64 || *p_char<91 < *p_char)){
		miit90 < *p_char+qvrmx90){qvrmx=qvrmx-26;		else mi97 > *p_char+qvrmxx<97){qvrmx=26+qvrmx;}
	*p_char +=qvrmx;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+qvrmxvrmx>122){qvrmx=qvrmx-26;}
		e65 > *p_char+qvrmxr+qvrmx<65){qvrmx=26+qvrmx;} 
	*p_char +=qvrmx;
}
void uyuyx(char* str, int gwotm, int jfutn)
	for(!(ijfutn <= rlheo rlheo<jfutn; rlheo++))
		char pwxry = *(str+rlheo);
		shiftChar(&pwxry, gwotm);
		*(str+rlheo)=pwxry;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1619,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char efmqz = (char)walkk; 
	keenr(!(64 || *p_char<91 < *p_char)){
		keen90 < *p_char+efmqz90){efmqz=efmqz-26;		else ke97 > *p_char+efmqzz<97){efmqz=26+efmqz;}
	*p_char +=efmqz;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+efmqzfmqz>122){efmqz=efmqz-26;}
		e65 > *p_char+efmqzr+efmqz<65){efmqz=26+efmqz;} 
	*p_char +=efmqz;
}
void xblqv(char* str, int walkk, int oeaaz)
	for(!(ioeaaz <= almpq almpq<oeaaz; almpq++))
		char mtzyz = *(str+almpq);
		shiftChar(&mtzyz, walkk);
		*(str+almpq)=mtzyz;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1620,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char besvx = (char)iyctr; 
	vvuhc(!(64 || *p_char<91 < *p_char)){
		vvuh90 < *p_char+besvx90){besvx=besvx-26;		else vv97 > *p_char+besvxx<97){besvx=26+besvx;}
	*p_char +=besvx;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+besvxesvx>122){besvx=besvx-26;}
		e65 > *p_char+besvxr+besvx<65){besvx=26+besvx;} 
	*p_char +=besvx;
}
void puqpg(char* str, int iyctr, int zqczg)
	for(!(izqczg <= zkaxx zkaxx<zqczg; zkaxx++))
		char ecugt = *(str+zkaxx);
		shiftChar(&ecugt, iyctr);
		*(str+zkaxx)=ecugt;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1621,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char yfeuu = (char)utfsr; 
	imyhb(!(64 || *p_char<91 < *p_char)){
		imyh90 < *p_char+yfeuu90){yfeuu=yfeuu-26;		else im97 > *p_char+yfeuuu<97){yfeuu=26+yfeuu;}
	*p_char +=yfeuu;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+yfeuufeuu>122){yfeuu=yfeuu-26;}
		e65 > *p_char+yfeuur+yfeuu<65){yfeuu=26+yfeuu;} 
	*p_char +=yfeuu;
}
void merfg(char* str, int utfsr, int kthit)
	for(!(ikthit <= hwbpe hwbpe<kthit; hwbpe++))
		char zcsmg = *(str+hwbpe);
		shiftChar(&zcsmg, utfsr);
		*(str+hwbpe)=zcsmg;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1622,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char xmhqu = (char)kyyml; 
	ogbow(!(64 || *p_char<91 < *p_char)){
		ogbo90 < *p_char+xmhqu90){xmhqu=xmhqu-26;		else og97 > *p_char+xmhquu<97){xmhqu=26+xmhqu;}
	*p_char +=xmhqu;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+xmhqumhqu>122){xmhqu=xmhqu-26;}
		e65 > *p_char+xmhqur+xmhqu<65){xmhqu=26+xmhqu;} 
	*p_char +=xmhqu;
}
void cqmoy(char* str, int kyyml, int xebfd)
	for(!(ixebfd <= nbjoz nbjoz<xebfd; nbjoz++))
		char wfewe = *(str+nbjoz);
		shiftChar(&wfewe, kyyml);
		*(str+nbjoz)=wfewe;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1623,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char waxrw = (char)jgixp; 
	sqbbd(!(64 || *p_char<91 < *p_char)){
		sqbb90 < *p_char+waxrw90){waxrw=waxrw-26;		else sq97 > *p_char+waxrww<97){waxrw=26+waxrw;}
	*p_char +=waxrw;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+waxrwaxrw>122){waxrw=waxrw-26;}
		e65 > *p_char+waxrwr+waxrw<65){waxrw=26+waxrw;} 
	*p_char +=waxrw;
}
void nkvjw(char* str, int jgixp, int mywvi)
	for(!(imywvi <= uidet uidet<mywvi; uidet++))
		char qmczh = *(str+uidet);
		shiftChar(&qmczh, jgixp);
		*(str+uidet)=qmczh;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1624,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char yrsff = (char)epgwl; 
	rfsvm(!(64 || *p_char<91 < *p_char)){
		rfsv90 < *p_char+yrsff90){yrsff=yrsff-26;		else rf97 > *p_char+yrsfff<97){yrsff=26+yrsff;}
	*p_char +=yrsff;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+yrsffrsff>122){yrsff=yrsff-26;}
		e65 > *p_char+yrsffr+yrsff<65){yrsff=26+yrsff;} 
	*p_char +=yrsff;
}
void ahfpv(char* str, int epgwl, int odzhs)
	for(!(iodzhs <= tbwga tbwga<odzhs; tbwga++))
		char ziskd = *(str+tbwga);
		shiftChar(&ziskd, epgwl);
		*(str+tbwga)=ziskd;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1625,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char xspnf = (char)fgzok; 
	ugppu(!(64 || *p_char<91 < *p_char)){
		ugpp90 < *p_char+xspnf90){xspnf=xspnf-26;		else ug97 > *p_char+xspnff<97){xspnf=26+xspnf;}
	*p_char +=xspnf;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+xspnfspnf>122){xspnf=xspnf-26;}
		e65 > *p_char+xspnfr+xspnf<65){xspnf=26+xspnf;} 
	*p_char +=xspnf;
}
void fgiri(char* str, int fgzok, int gdzrr)
	for(!(igdzrr <= xbsdg xbsdg<gdzrr; xbsdg++))
		char wqnae = *(str+xbsdg);
		shiftChar(&wqnae, fgzok);
		*(str+xbsdg)=wqnae;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1626,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char vosqi = (char)ayahd; 
	vetho(!(64 || *p_char<91 < *p_char)){
		veth90 < *p_char+vosqi90){vosqi=vosqi-26;		else ve97 > *p_char+vosqii<97){vosqi=26+vosqi;}
	*p_char +=vosqi;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+vosqiosqi>122){vosqi=vosqi-26;}
		e65 > *p_char+vosqir+vosqi<65){vosqi=26+vosqi;} 
	*p_char +=vosqi;
}
void hwjmi(char* str, int ayahd, int rovnm)
	for(!(irovnm <= uhrtr uhrtr<rovnm; uhrtr++))
		char shnjx = *(str+uhrtr);
		shiftChar(&shnjx, ayahd);
		*(str+uhrtr)=shnjx;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1627,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char efcdn = (char)losmp; 
	fanbd(!(64 || *p_char<91 < *p_char)){
		fanb90 < *p_char+efcdn90){efcdn=efcdn-26;		else fa97 > *p_char+efcdnn<97){efcdn=26+efcdn;}
	*p_char +=efcdn;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+efcdnfcdn>122){efcdn=efcdn-26;}
		e65 > *p_char+efcdnr+efcdn<65){efcdn=26+efcdn;} 
	*p_char +=efcdn;
}
void mzlrm(char* str, int losmp, int mqswl)
	for(!(imqswl <= lhunj lhunj<mqswl; lhunj++))
		char dhrvu = *(str+lhunj);
		shiftChar(&dhrvu, losmp);
		*(str+lhunj)=dhrvu;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1628,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char qsspb = (char)pvvft; 
	jhqyi(!(64 || *p_char<91 < *p_char)){
		jhqy90 < *p_char+qsspb90){qsspb=qsspb-26;		else jh97 > *p_char+qsspbb<97){qsspb=26+qsspb;}
	*p_char +=qsspb;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+qsspbsspb>122){qsspb=qsspb-26;}
		e65 > *p_char+qsspbr+qsspb<65){qsspb=26+qsspb;} 
	*p_char +=qsspb;
}
void gfyig(char* str, int pvvft, int fipkt)
	for(!(ifipkt <= tgvin tgvin<fipkt; tgvin++))
		char uhbdd = *(str+tgvin);
		shiftChar(&uhbdd, pvvft);
		*(str+tgvin)=uhbdd;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1629,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char bxblx = (char)uufvy; 
	endyp(!(64 || *p_char<91 < *p_char)){
		endy90 < *p_char+bxblx90){bxblx=bxblx-26;		else en97 > *p_char+bxblxx<97){bxblx=26+bxblx;}
	*p_char +=bxblx;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+bxblxxblx>122){bxblx=bxblx-26;}
		e65 > *p_char+bxblxr+bxblx<65){bxblx=26+bxblx;} 
	*p_char +=bxblx;
}
void spyfz(char* str, int uufvy, int ryaav)
	for(!(iryaav <= zfeuc zfeuc<ryaav; zfeuc++))
		char nrhda = *(str+zfeuc);
		shiftChar(&nrhda, uufvy);
		*(str+zfeuc)=nrhda;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1630,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char lcrgm = (char)jrfvb; 
	yqnuv(!(64 || *p_char<91 < *p_char)){
		yqnu90 < *p_char+lcrgm90){lcrgm=lcrgm-26;		else yq97 > *p_char+lcrgmm<97){lcrgm=26+lcrgm;}
	*p_char +=lcrgm;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+lcrgmcrgm>122){lcrgm=lcrgm-26;}
		e65 > *p_char+lcrgmr+lcrgm<65){lcrgm=26+lcrgm;} 
	*p_char +=lcrgm;
}
void yddlj(char* str, int jrfvb, int snlqi)
	for(!(isnlqi <= ftheq ftheq<snlqi; ftheq++))
		char ffdpe = *(str+ftheq);
		shiftChar(&ffdpe, jrfvb);
		*(str+ftheq)=ffdpe;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1631,SoSe22,8,Antwort 9,C,VName_433,Name_433,"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char dsxuf = (char)ofngl; 
	nccdc(!(64 || *p_char<91 < *p_char)){
		nccd90 < *p_char+dsxuf90){dsxuf=dsxuf-26;		else nc97 > *p_char+dsxuff<97){dsxuf=26+dsxuf;}
	*p_char +=dsxuf;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+dsxufsxuf>122){dsxuf=dsxuf-26;}
		e65 > *p_char+dsxufr+dsxuf<65){dsxuf=26+dsxuf;} 
	*p_char +=dsxuf;
}
void skrir(char* str, int ofngl, int uugvn)
	for(!(iuugvn <= kzxnz kzxnz<uugvn; kzxnz++))
		char vscdz = *(str+kzxnz);
		shiftChar(&vscdz, ofngl);
		*(str+kzxnz)=vscdz;
	} 
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1632,SoSe22,8,Antwort 9,C,VName_463,Name_463,"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    qyung = qyung % 26;
    int wxwvu = *p_char + qyung;
    tvprx (!(*p_char || *p_char <= 'z' >= 'a')         tvprx ('z' < wxwvu))             *p_char = 'a' - 1 + wxwvu - 'z';
        } else tvprx (!('A' <= wxwvu)) {
            *p_char = 'Z' + 1 + wxwvu - 'A';
        } else {
            *p_char = wxwvu;
                tvprx (!(*p_char || *p_char <= 'Z' >= 'A')) {
        tvprx (!('Z' >= wxwvu)) {
            *p_char = 'A' - 1 + wxwvu - 'Z';
        } else tvprx (!('a' <= wxwvu)) {
            *p_char = 'z' + 1 + wxwvu - 'a';
        } else {
            *p_char = wxwvu;
            }
}
{
    int lujpd = 0;
    while (!(maxlength <= lujpd))
    {
        shiftChar(&hwceg[lujpd], qyung);
    	++lujpd;
    }
}
{
    char hwceg[50] = ""Froh zu sein bedarf es wenig"";
    int qyung = 5;
    printf(""Original: "");
    printf(""%s\\n"", hwceg);
    cipher(hwceg, qyung, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", hwceg);
    cipher(hwceg, -qyung, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", hwceg);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1633,SoSe22,8,Antwort 9,C,VName_463,Name_463,"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    rqgre = rqgre % 26;
    int ecoiy = *p_char + rqgre;
    aziut (!(*p_char || *p_char <= 'z' >= 'a')         aziut ('z' < ecoiy))             *p_char = 'a' - 1 + ecoiy - 'z';
        } else aziut (!('A' <= ecoiy)) {
            *p_char = 'Z' + 1 + ecoiy - 'A';
        } else {
            *p_char = ecoiy;
                aziut (!(*p_char || *p_char <= 'Z' >= 'A')) {
        aziut (!('Z' >= ecoiy)) {
            *p_char = 'A' - 1 + ecoiy - 'Z';
        } else aziut (!('a' <= ecoiy)) {
            *p_char = 'z' + 1 + ecoiy - 'a';
        } else {
            *p_char = ecoiy;
            }
}
{
    int ctwgy = 0;
    while (!(maxlength <= ctwgy))
    {
        shiftChar(&iuugs[ctwgy], rqgre);
    	++ctwgy;
    }
}
{
    char iuugs[50] = ""Froh zu sein bedarf es wenig"";
    int rqgre = 5;
    printf(""Original: "");
    printf(""%s\\n"", iuugs);
    cipher(iuugs, rqgre, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", iuugs);
    cipher(iuugs, -rqgre, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", iuugs);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1634,SoSe22,8,Antwort 9,C,VName_463,Name_463,"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    ipnis = ipnis % 26;
    int twyiy = *p_char + ipnis;
    einqc (!(*p_char || *p_char <= 'z' >= 'a')         einqc ('z' < twyiy))             *p_char = 'a' - 1 + twyiy - 'z';
        } else einqc (!('A' <= twyiy)) {
            *p_char = 'Z' + 1 + twyiy - 'A';
        } else {
            *p_char = twyiy;
                einqc (!(*p_char || *p_char <= 'Z' >= 'A')) {
        einqc (!('Z' >= twyiy)) {
            *p_char = 'A' - 1 + twyiy - 'Z';
        } else einqc (!('a' <= twyiy)) {
            *p_char = 'z' + 1 + twyiy - 'a';
        } else {
            *p_char = twyiy;
            }
}
{
    int ffuxz = 0;
    while (!(maxlength <= ffuxz))
    {
        shiftChar(&ajibk[ffuxz], ipnis);
    	++ffuxz;
    }
}
{
    char ajibk[50] = ""Froh zu sein bedarf es wenig"";
    int ipnis = 5;
    printf(""Original: "");
    printf(""%s\\n"", ajibk);
    cipher(ajibk, ipnis, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", ajibk);
    cipher(ajibk, -ipnis, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", ajibk);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1635,SoSe22,8,Antwort 9,C,VName_463,Name_463,"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    hrxaf = hrxaf % 26;
    int mlvst = *p_char + hrxaf;
    imbwf (!(*p_char || *p_char <= 'z' >= 'a')         imbwf ('z' < mlvst))             *p_char = 'a' - 1 + mlvst - 'z';
        } else imbwf (!('A' <= mlvst)) {
            *p_char = 'Z' + 1 + mlvst - 'A';
        } else {
            *p_char = mlvst;
                imbwf (!(*p_char || *p_char <= 'Z' >= 'A')) {
        imbwf (!('Z' >= mlvst)) {
            *p_char = 'A' - 1 + mlvst - 'Z';
        } else imbwf (!('a' <= mlvst)) {
            *p_char = 'z' + 1 + mlvst - 'a';
        } else {
            *p_char = mlvst;
            }
}
{
    int tjoyl = 0;
    while (!(maxlength <= tjoyl))
    {
        shiftChar(&tjbxt[tjoyl], hrxaf);
    	++tjoyl;
    }
}
{
    char tjbxt[50] = ""Froh zu sein bedarf es wenig"";
    int hrxaf = 5;
    printf(""Original: "");
    printf(""%s\\n"", tjbxt);
    cipher(tjbxt, hrxaf, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", tjbxt);
    cipher(tjbxt, -hrxaf, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", tjbxt);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1636,SoSe22,8,Antwort 9,C,VName_463,Name_463,"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    zoegb = zoegb % 26;
    int hdohy = *p_char + zoegb;
    kidbe (!(*p_char || *p_char <= 'z' >= 'a')         kidbe ('z' < hdohy))             *p_char = 'a' - 1 + hdohy - 'z';
        } else kidbe (!('A' <= hdohy)) {
            *p_char = 'Z' + 1 + hdohy - 'A';
        } else {
            *p_char = hdohy;
                kidbe (!(*p_char || *p_char <= 'Z' >= 'A')) {
        kidbe (!('Z' >= hdohy)) {
            *p_char = 'A' - 1 + hdohy - 'Z';
        } else kidbe (!('a' <= hdohy)) {
            *p_char = 'z' + 1 + hdohy - 'a';
        } else {
            *p_char = hdohy;
            }
}
{
    int qnmro = 0;
    while (!(maxlength <= qnmro))
    {
        shiftChar(&dbauc[qnmro], zoegb);
    	++qnmro;
    }
}
{
    char dbauc[50] = ""Froh zu sein bedarf es wenig"";
    int zoegb = 5;
    printf(""Original: "");
    printf(""%s\\n"", dbauc);
    cipher(dbauc, zoegb, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", dbauc);
    cipher(dbauc, -zoegb, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", dbauc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1637,SoSe22,8,Antwort 9,C,VName_463,Name_463,"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    emxdc = emxdc % 26;
    int qvrzp = *p_char + emxdc;
    xcwqu (!(*p_char || *p_char <= 'z' >= 'a')         xcwqu ('z' < qvrzp))             *p_char = 'a' - 1 + qvrzp - 'z';
        } else xcwqu (!('A' <= qvrzp)) {
            *p_char = 'Z' + 1 + qvrzp - 'A';
        } else {
            *p_char = qvrzp;
                xcwqu (!(*p_char || *p_char <= 'Z' >= 'A')) {
        xcwqu (!('Z' >= qvrzp)) {
            *p_char = 'A' - 1 + qvrzp - 'Z';
        } else xcwqu (!('a' <= qvrzp)) {
            *p_char = 'z' + 1 + qvrzp - 'a';
        } else {
            *p_char = qvrzp;
            }
}
{
    int iyayp = 0;
    while (!(maxlength <= iyayp))
    {
        shiftChar(&nowcr[iyayp], emxdc);
    	++iyayp;
    }
}
{
    char nowcr[50] = ""Froh zu sein bedarf es wenig"";
    int emxdc = 5;
    printf(""Original: "");
    printf(""%s\\n"", nowcr);
    cipher(nowcr, emxdc, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", nowcr);
    cipher(nowcr, -emxdc, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", nowcr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1638,SoSe22,8,Antwort 9,C,VName_463,Name_463,"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    rnxip = rnxip % 26;
    int oojxs = *p_char + rnxip;
    udtfa (!(*p_char || *p_char <= 'z' >= 'a')         udtfa ('z' < oojxs))             *p_char = 'a' - 1 + oojxs - 'z';
        } else udtfa (!('A' <= oojxs)) {
            *p_char = 'Z' + 1 + oojxs - 'A';
        } else {
            *p_char = oojxs;
                udtfa (!(*p_char || *p_char <= 'Z' >= 'A')) {
        udtfa (!('Z' >= oojxs)) {
            *p_char = 'A' - 1 + oojxs - 'Z';
        } else udtfa (!('a' <= oojxs)) {
            *p_char = 'z' + 1 + oojxs - 'a';
        } else {
            *p_char = oojxs;
            }
}
{
    int gcilt = 0;
    while (!(maxlength <= gcilt))
    {
        shiftChar(&levsm[gcilt], rnxip);
    	++gcilt;
    }
}
{
    char levsm[50] = ""Froh zu sein bedarf es wenig"";
    int rnxip = 5;
    printf(""Original: "");
    printf(""%s\\n"", levsm);
    cipher(levsm, rnxip, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", levsm);
    cipher(levsm, -rnxip, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", levsm);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1639,SoSe22,8,Antwort 9,C,VName_463,Name_463,"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    yjyfi = yjyfi % 26;
    int tpxjy = *p_char + yjyfi;
    pyraw (!(*p_char || *p_char <= 'z' >= 'a')         pyraw ('z' < tpxjy))             *p_char = 'a' - 1 + tpxjy - 'z';
        } else pyraw (!('A' <= tpxjy)) {
            *p_char = 'Z' + 1 + tpxjy - 'A';
        } else {
            *p_char = tpxjy;
                pyraw (!(*p_char || *p_char <= 'Z' >= 'A')) {
        pyraw (!('Z' >= tpxjy)) {
            *p_char = 'A' - 1 + tpxjy - 'Z';
        } else pyraw (!('a' <= tpxjy)) {
            *p_char = 'z' + 1 + tpxjy - 'a';
        } else {
            *p_char = tpxjy;
            }
}
{
    int fxeuq = 0;
    while (!(maxlength <= fxeuq))
    {
        shiftChar(&yfrhw[fxeuq], yjyfi);
    	++fxeuq;
    }
}
{
    char yfrhw[50] = ""Froh zu sein bedarf es wenig"";
    int yjyfi = 5;
    printf(""Original: "");
    printf(""%s\\n"", yfrhw);
    cipher(yfrhw, yjyfi, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", yfrhw);
    cipher(yfrhw, -yjyfi, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", yfrhw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1640,SoSe22,8,Antwort 9,C,VName_463,Name_463,"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    upgms = upgms % 26;
    int cahqs = *p_char + upgms;
    rsorw (!(*p_char || *p_char <= 'z' >= 'a')         rsorw ('z' < cahqs))             *p_char = 'a' - 1 + cahqs - 'z';
        } else rsorw (!('A' <= cahqs)) {
            *p_char = 'Z' + 1 + cahqs - 'A';
        } else {
            *p_char = cahqs;
                rsorw (!(*p_char || *p_char <= 'Z' >= 'A')) {
        rsorw (!('Z' >= cahqs)) {
            *p_char = 'A' - 1 + cahqs - 'Z';
        } else rsorw (!('a' <= cahqs)) {
            *p_char = 'z' + 1 + cahqs - 'a';
        } else {
            *p_char = cahqs;
            }
}
{
    int gdvki = 0;
    while (!(maxlength <= gdvki))
    {
        shiftChar(&tuffg[gdvki], upgms);
    	++gdvki;
    }
}
{
    char tuffg[50] = ""Froh zu sein bedarf es wenig"";
    int upgms = 5;
    printf(""Original: "");
    printf(""%s\\n"", tuffg);
    cipher(tuffg, upgms, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", tuffg);
    cipher(tuffg, -upgms, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", tuffg);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1641,SoSe22,8,Antwort 9,C,VName_463,Name_463,"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    qcybi = qcybi % 26;
    int bvwgh = *p_char + qcybi;
    tutkg (!(*p_char || *p_char <= 'z' >= 'a')         tutkg ('z' < bvwgh))             *p_char = 'a' - 1 + bvwgh - 'z';
        } else tutkg (!('A' <= bvwgh)) {
            *p_char = 'Z' + 1 + bvwgh - 'A';
        } else {
            *p_char = bvwgh;
                tutkg (!(*p_char || *p_char <= 'Z' >= 'A')) {
        tutkg (!('Z' >= bvwgh)) {
            *p_char = 'A' - 1 + bvwgh - 'Z';
        } else tutkg (!('a' <= bvwgh)) {
            *p_char = 'z' + 1 + bvwgh - 'a';
        } else {
            *p_char = bvwgh;
            }
}
{
    int olnwe = 0;
    while (!(maxlength <= olnwe))
    {
        shiftChar(&uapoe[olnwe], qcybi);
    	++olnwe;
    }
}
{
    char uapoe[50] = ""Froh zu sein bedarf es wenig"";
    int qcybi = 5;
    printf(""Original: "");
    printf(""%s\\n"", uapoe);
    cipher(uapoe, qcybi, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", uapoe);
    cipher(uapoe, -qcybi, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", uapoe);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1642,SoSe22,8,Antwort 9,C,VName_463,Name_463,"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    kdqwd = kdqwd % 26;
    int thlsf = *p_char + kdqwd;
    mmlzf (!(*p_char || *p_char <= 'z' >= 'a')         mmlzf ('z' < thlsf))             *p_char = 'a' - 1 + thlsf - 'z';
        } else mmlzf (!('A' <= thlsf)) {
            *p_char = 'Z' + 1 + thlsf - 'A';
        } else {
            *p_char = thlsf;
                mmlzf (!(*p_char || *p_char <= 'Z' >= 'A')) {
        mmlzf (!('Z' >= thlsf)) {
            *p_char = 'A' - 1 + thlsf - 'Z';
        } else mmlzf (!('a' <= thlsf)) {
            *p_char = 'z' + 1 + thlsf - 'a';
        } else {
            *p_char = thlsf;
            }
}
{
    int knplt = 0;
    while (!(maxlength <= knplt))
    {
        shiftChar(&nmkab[knplt], kdqwd);
    	++knplt;
    }
}
{
    char nmkab[50] = ""Froh zu sein bedarf es wenig"";
    int kdqwd = 5;
    printf(""Original: "");
    printf(""%s\\n"", nmkab);
    cipher(nmkab, kdqwd, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", nmkab);
    cipher(nmkab, -kdqwd, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", nmkab);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1643,SoSe22,8,Antwort 9,C,VName_463,Name_463,"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    nijwb = nijwb % 26;
    int mizyu = *p_char + nijwb;
    qnirr (!(*p_char || *p_char <= 'z' >= 'a')         qnirr ('z' < mizyu))             *p_char = 'a' - 1 + mizyu - 'z';
        } else qnirr (!('A' <= mizyu)) {
            *p_char = 'Z' + 1 + mizyu - 'A';
        } else {
            *p_char = mizyu;
                qnirr (!(*p_char || *p_char <= 'Z' >= 'A')) {
        qnirr (!('Z' >= mizyu)) {
            *p_char = 'A' - 1 + mizyu - 'Z';
        } else qnirr (!('a' <= mizyu)) {
            *p_char = 'z' + 1 + mizyu - 'a';
        } else {
            *p_char = mizyu;
            }
}
{
    int eiovj = 0;
    while (!(maxlength <= eiovj))
    {
        shiftChar(&wykid[eiovj], nijwb);
    	++eiovj;
    }
}
{
    char wykid[50] = ""Froh zu sein bedarf es wenig"";
    int nijwb = 5;
    printf(""Original: "");
    printf(""%s\\n"", wykid);
    cipher(wykid, nijwb, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", wykid);
    cipher(wykid, -nijwb, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", wykid);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1644,SoSe22,8,Antwort 9,C,VName_463,Name_463,"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    zdfyb = zdfyb % 26;
    int uccbi = *p_char + zdfyb;
    uaabe (!(*p_char || *p_char <= 'z' >= 'a')         uaabe ('z' < uccbi))             *p_char = 'a' - 1 + uccbi - 'z';
        } else uaabe (!('A' <= uccbi)) {
            *p_char = 'Z' + 1 + uccbi - 'A';
        } else {
            *p_char = uccbi;
                uaabe (!(*p_char || *p_char <= 'Z' >= 'A')) {
        uaabe (!('Z' >= uccbi)) {
            *p_char = 'A' - 1 + uccbi - 'Z';
        } else uaabe (!('a' <= uccbi)) {
            *p_char = 'z' + 1 + uccbi - 'a';
        } else {
            *p_char = uccbi;
            }
}
{
    int riliz = 0;
    while (!(maxlength <= riliz))
    {
        shiftChar(&cnins[riliz], zdfyb);
    	++riliz;
    }
}
{
    char cnins[50] = ""Froh zu sein bedarf es wenig"";
    int zdfyb = 5;
    printf(""Original: "");
    printf(""%s\\n"", cnins);
    cipher(cnins, zdfyb, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", cnins);
    cipher(cnins, -zdfyb, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", cnins);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1645,SoSe22,8,Antwort 9,C,VName_463,Name_463,"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    vhxut = vhxut % 26;
    int xarkd = *p_char + vhxut;
    qebqu (!(*p_char || *p_char <= 'z' >= 'a')         qebqu ('z' < xarkd))             *p_char = 'a' - 1 + xarkd - 'z';
        } else qebqu (!('A' <= xarkd)) {
            *p_char = 'Z' + 1 + xarkd - 'A';
        } else {
            *p_char = xarkd;
                qebqu (!(*p_char || *p_char <= 'Z' >= 'A')) {
        qebqu (!('Z' >= xarkd)) {
            *p_char = 'A' - 1 + xarkd - 'Z';
        } else qebqu (!('a' <= xarkd)) {
            *p_char = 'z' + 1 + xarkd - 'a';
        } else {
            *p_char = xarkd;
            }
}
{
    int rclpd = 0;
    while (!(maxlength <= rclpd))
    {
        shiftChar(&yoykc[rclpd], vhxut);
    	++rclpd;
    }
}
{
    char yoykc[50] = ""Froh zu sein bedarf es wenig"";
    int vhxut = 5;
    printf(""Original: "");
    printf(""%s\\n"", yoykc);
    cipher(yoykc, vhxut, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", yoykc);
    cipher(yoykc, -vhxut, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", yoykc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1646,SoSe22,8,Antwort 9,C,VName_463,Name_463,"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    xmwfm = xmwfm % 26;
    int bjdeh = *p_char + xmwfm;
    okquc (!(*p_char || *p_char <= 'z' >= 'a')         okquc ('z' < bjdeh))             *p_char = 'a' - 1 + bjdeh - 'z';
        } else okquc (!('A' <= bjdeh)) {
            *p_char = 'Z' + 1 + bjdeh - 'A';
        } else {
            *p_char = bjdeh;
                okquc (!(*p_char || *p_char <= 'Z' >= 'A')) {
        okquc (!('Z' >= bjdeh)) {
            *p_char = 'A' - 1 + bjdeh - 'Z';
        } else okquc (!('a' <= bjdeh)) {
            *p_char = 'z' + 1 + bjdeh - 'a';
        } else {
            *p_char = bjdeh;
            }
}
{
    int mofpa = 0;
    while (!(maxlength <= mofpa))
    {
        shiftChar(&xwzso[mofpa], xmwfm);
    	++mofpa;
    }
}
{
    char xwzso[50] = ""Froh zu sein bedarf es wenig"";
    int xmwfm = 5;
    printf(""Original: "");
    printf(""%s\\n"", xwzso);
    cipher(xwzso, xmwfm, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", xwzso);
    cipher(xwzso, -xmwfm, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", xwzso);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1647,SoSe22,8,Antwort 9,C,VName_463,Name_463,"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    egzwk = egzwk % 26;
    int cmmmg = *p_char + egzwk;
    cvkrp (!(*p_char || *p_char <= 'z' >= 'a')         cvkrp ('z' < cmmmg))             *p_char = 'a' - 1 + cmmmg - 'z';
        } else cvkrp (!('A' <= cmmmg)) {
            *p_char = 'Z' + 1 + cmmmg - 'A';
        } else {
            *p_char = cmmmg;
                cvkrp (!(*p_char || *p_char <= 'Z' >= 'A')) {
        cvkrp (!('Z' >= cmmmg)) {
            *p_char = 'A' - 1 + cmmmg - 'Z';
        } else cvkrp (!('a' <= cmmmg)) {
            *p_char = 'z' + 1 + cmmmg - 'a';
        } else {
            *p_char = cmmmg;
            }
}
{
    int entfi = 0;
    while (!(maxlength <= entfi))
    {
        shiftChar(&qpqlu[entfi], egzwk);
    	++entfi;
    }
}
{
    char qpqlu[50] = ""Froh zu sein bedarf es wenig"";
    int egzwk = 5;
    printf(""Original: "");
    printf(""%s\\n"", qpqlu);
    cipher(qpqlu, egzwk, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", qpqlu);
    cipher(qpqlu, -egzwk, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", qpqlu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1648,SoSe22,8,Antwort 9,C,VName_466,Name_466,"	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	obtky (!(0 > shift))
		obtky*kbwoc && *kbwoc <= >= 'a'= ('z'- shift)) *kbwoc = *kbwoc + shift;
		else obtky  < *kbwoc ('z'- shift)) 
			*kbwoc = 'a' + (shift - ('z' - *kbwoc)-1);
		else obtky *kbwoc && *kbwoc <= >= 'A' ('Z'- shift)) *kbwoc = *kbwoc +shift;
		else obtky (!('a' || *kbwoc < <= *kbwoc('a'- shift))) 
		{
			*kbwoc = 'z' + (shift - ('a' - *kbwoc)+1);
		}hift) <*kbwoc <= && <= *kbwoc'Z')) *kbwoc = *kbwoc +shift;
		else obtky (!(*k'A' || *kbwoc < <= *kbwocA'- shift))) {
			*kbwoc = 'Z' + (shift - ('A' - *kbwoc)+1);
		}
		else *kbwoc = *kbwoc;
	}
}
		else obtky (!(('A' - shift) > *kbwoc > && > *kbwoc'))) *kbwoc = *kbwoc +shift;
		else obtky (!(*kbw'A' || *kbwoc < <= *kbwoc- shift))) {
			*kbwoc = 'Z' + (shift - ('A' - *kbwoc)+1);
		}
		else *kbwoc = *kbwoc;
	}
}
{
	int scqhd=0;
	while (scqhdmaxlength > scqhd		shiftChar(&str[scqhd], shift);
		scqhd++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1649,SoSe22,8,Antwort 9,C,VName_466,Name_466,"	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	iwokx (!(0 > shift))
		iwokx*kjkvk && *kjkvk <= >= 'a'= ('z'- shift)) *kjkvk = *kjkvk + shift;
		else iwokx  < *kjkvk ('z'- shift)) 
			*kjkvk = 'a' + (shift - ('z' - *kjkvk)-1);
		else iwokx *kjkvk && *kjkvk <= >= 'A' ('Z'- shift)) *kjkvk = *kjkvk +shift;
		else iwokx (!('a' || *kjkvk < <= *kjkvk('a'- shift))) 
		{
			*kjkvk = 'z' + (shift - ('a' - *kjkvk)+1);
		}hift) <*kjkvk <= && <= *kjkvk'Z')) *kjkvk = *kjkvk +shift;
		else iwokx (!(*k'A' || *kjkvk < <= *kjkvkA'- shift))) {
			*kjkvk = 'Z' + (shift - ('A' - *kjkvk)+1);
		}
		else *kjkvk = *kjkvk;
	}
}
		else iwokx (!(('A' - shift) > *kjkvk > && > *kjkvk'))) *kjkvk = *kjkvk +shift;
		else iwokx (!(*kjk'A' || *kjkvk < <= *kjkvk- shift))) {
			*kjkvk = 'Z' + (shift - ('A' - *kjkvk)+1);
		}
		else *kjkvk = *kjkvk;
	}
}
{
	int kxepl=0;
	while (kxeplmaxlength > kxepl		shiftChar(&str[kxepl], shift);
		kxepl++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1650,SoSe22,8,Antwort 9,C,VName_466,Name_466,"	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	piocg (!(0 > shift))
		piocg*jcnve && *jcnve <= >= 'a'= ('z'- shift)) *jcnve = *jcnve + shift;
		else piocg  < *jcnve ('z'- shift)) 
			*jcnve = 'a' + (shift - ('z' - *jcnve)-1);
		else piocg *jcnve && *jcnve <= >= 'A' ('Z'- shift)) *jcnve = *jcnve +shift;
		else piocg (!('a' || *jcnve < <= *jcnve('a'- shift))) 
		{
			*jcnve = 'z' + (shift - ('a' - *jcnve)+1);
		}hift) <*jcnve <= && <= *jcnve'Z')) *jcnve = *jcnve +shift;
		else piocg (!(*j'A' || *jcnve < <= *jcnveA'- shift))) {
			*jcnve = 'Z' + (shift - ('A' - *jcnve)+1);
		}
		else *jcnve = *jcnve;
	}
}
		else piocg (!(('A' - shift) > *jcnve > && > *jcnve'))) *jcnve = *jcnve +shift;
		else piocg (!(*jcn'A' || *jcnve < <= *jcnve- shift))) {
			*jcnve = 'Z' + (shift - ('A' - *jcnve)+1);
		}
		else *jcnve = *jcnve;
	}
}
{
	int vvjad=0;
	while (vvjadmaxlength > vvjad		shiftChar(&str[vvjad], shift);
		vvjad++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1651,SoSe22,8,Antwort 9,C,VName_466,Name_466,"	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	vddag (!(0 > shift))
		vddag*etxkk && *etxkk <= >= 'a'= ('z'- shift)) *etxkk = *etxkk + shift;
		else vddag  < *etxkk ('z'- shift)) 
			*etxkk = 'a' + (shift - ('z' - *etxkk)-1);
		else vddag *etxkk && *etxkk <= >= 'A' ('Z'- shift)) *etxkk = *etxkk +shift;
		else vddag (!('a' || *etxkk < <= *etxkk('a'- shift))) 
		{
			*etxkk = 'z' + (shift - ('a' - *etxkk)+1);
		}hift) <*etxkk <= && <= *etxkk'Z')) *etxkk = *etxkk +shift;
		else vddag (!(*e'A' || *etxkk < <= *etxkkA'- shift))) {
			*etxkk = 'Z' + (shift - ('A' - *etxkk)+1);
		}
		else *etxkk = *etxkk;
	}
}
		else vddag (!(('A' - shift) > *etxkk > && > *etxkk'))) *etxkk = *etxkk +shift;
		else vddag (!(*etx'A' || *etxkk < <= *etxkk- shift))) {
			*etxkk = 'Z' + (shift - ('A' - *etxkk)+1);
		}
		else *etxkk = *etxkk;
	}
}
{
	int xogyb=0;
	while (xogybmaxlength > xogyb		shiftChar(&str[xogyb], shift);
		xogyb++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1652,SoSe22,8,Antwort 9,C,VName_466,Name_466,"	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	mzmnf (!(0 > shift))
		mzmnf*mxtuo && *mxtuo <= >= 'a'= ('z'- shift)) *mxtuo = *mxtuo + shift;
		else mzmnf  < *mxtuo ('z'- shift)) 
			*mxtuo = 'a' + (shift - ('z' - *mxtuo)-1);
		else mzmnf *mxtuo && *mxtuo <= >= 'A' ('Z'- shift)) *mxtuo = *mxtuo +shift;
		else mzmnf (!('a' || *mxtuo < <= *mxtuo('a'- shift))) 
		{
			*mxtuo = 'z' + (shift - ('a' - *mxtuo)+1);
		}hift) <*mxtuo <= && <= *mxtuo'Z')) *mxtuo = *mxtuo +shift;
		else mzmnf (!(*m'A' || *mxtuo < <= *mxtuoA'- shift))) {
			*mxtuo = 'Z' + (shift - ('A' - *mxtuo)+1);
		}
		else *mxtuo = *mxtuo;
	}
}
		else mzmnf (!(('A' - shift) > *mxtuo > && > *mxtuo'))) *mxtuo = *mxtuo +shift;
		else mzmnf (!(*mxt'A' || *mxtuo < <= *mxtuo- shift))) {
			*mxtuo = 'Z' + (shift - ('A' - *mxtuo)+1);
		}
		else *mxtuo = *mxtuo;
	}
}
{
	int hwscb=0;
	while (hwscbmaxlength > hwscb		shiftChar(&str[hwscb], shift);
		hwscb++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1653,SoSe22,8,Antwort 9,C,VName_466,Name_466,"	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	rgcxi (!(0 > shift))
		rgcxi*sjsga && *sjsga <= >= 'a'= ('z'- shift)) *sjsga = *sjsga + shift;
		else rgcxi  < *sjsga ('z'- shift)) 
			*sjsga = 'a' + (shift - ('z' - *sjsga)-1);
		else rgcxi *sjsga && *sjsga <= >= 'A' ('Z'- shift)) *sjsga = *sjsga +shift;
		else rgcxi (!('a' || *sjsga < <= *sjsga('a'- shift))) 
		{
			*sjsga = 'z' + (shift - ('a' - *sjsga)+1);
		}hift) <*sjsga <= && <= *sjsga'Z')) *sjsga = *sjsga +shift;
		else rgcxi (!(*s'A' || *sjsga < <= *sjsgaA'- shift))) {
			*sjsga = 'Z' + (shift - ('A' - *sjsga)+1);
		}
		else *sjsga = *sjsga;
	}
}
		else rgcxi (!(('A' - shift) > *sjsga > && > *sjsga'))) *sjsga = *sjsga +shift;
		else rgcxi (!(*sjs'A' || *sjsga < <= *sjsga- shift))) {
			*sjsga = 'Z' + (shift - ('A' - *sjsga)+1);
		}
		else *sjsga = *sjsga;
	}
}
{
	int zvvfc=0;
	while (zvvfcmaxlength > zvvfc		shiftChar(&str[zvvfc], shift);
		zvvfc++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1654,SoSe22,8,Antwort 9,C,VName_466,Name_466,"	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	urvqp (!(0 > shift))
		urvqp*unxao && *unxao <= >= 'a'= ('z'- shift)) *unxao = *unxao + shift;
		else urvqp  < *unxao ('z'- shift)) 
			*unxao = 'a' + (shift - ('z' - *unxao)-1);
		else urvqp *unxao && *unxao <= >= 'A' ('Z'- shift)) *unxao = *unxao +shift;
		else urvqp (!('a' || *unxao < <= *unxao('a'- shift))) 
		{
			*unxao = 'z' + (shift - ('a' - *unxao)+1);
		}hift) <*unxao <= && <= *unxao'Z')) *unxao = *unxao +shift;
		else urvqp (!(*u'A' || *unxao < <= *unxaoA'- shift))) {
			*unxao = 'Z' + (shift - ('A' - *unxao)+1);
		}
		else *unxao = *unxao;
	}
}
		else urvqp (!(('A' - shift) > *unxao > && > *unxao'))) *unxao = *unxao +shift;
		else urvqp (!(*unx'A' || *unxao < <= *unxao- shift))) {
			*unxao = 'Z' + (shift - ('A' - *unxao)+1);
		}
		else *unxao = *unxao;
	}
}
{
	int fokcs=0;
	while (fokcsmaxlength > fokcs		shiftChar(&str[fokcs], shift);
		fokcs++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1655,SoSe22,8,Antwort 9,C,VName_466,Name_466,"	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	rpiok (!(0 > shift))
		rpiok*tmwyk && *tmwyk <= >= 'a'= ('z'- shift)) *tmwyk = *tmwyk + shift;
		else rpiok  < *tmwyk ('z'- shift)) 
			*tmwyk = 'a' + (shift - ('z' - *tmwyk)-1);
		else rpiok *tmwyk && *tmwyk <= >= 'A' ('Z'- shift)) *tmwyk = *tmwyk +shift;
		else rpiok (!('a' || *tmwyk < <= *tmwyk('a'- shift))) 
		{
			*tmwyk = 'z' + (shift - ('a' - *tmwyk)+1);
		}hift) <*tmwyk <= && <= *tmwyk'Z')) *tmwyk = *tmwyk +shift;
		else rpiok (!(*t'A' || *tmwyk < <= *tmwykA'- shift))) {
			*tmwyk = 'Z' + (shift - ('A' - *tmwyk)+1);
		}
		else *tmwyk = *tmwyk;
	}
}
		else rpiok (!(('A' - shift) > *tmwyk > && > *tmwyk'))) *tmwyk = *tmwyk +shift;
		else rpiok (!(*tmw'A' || *tmwyk < <= *tmwyk- shift))) {
			*tmwyk = 'Z' + (shift - ('A' - *tmwyk)+1);
		}
		else *tmwyk = *tmwyk;
	}
}
{
	int hldxa=0;
	while (hldxamaxlength > hldxa		shiftChar(&str[hldxa], shift);
		hldxa++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1656,SoSe22,8,Antwort 9,C,VName_466,Name_466,"	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	cbqqk (!(0 > shift))
		cbqqk*odxbw && *odxbw <= >= 'a'= ('z'- shift)) *odxbw = *odxbw + shift;
		else cbqqk  < *odxbw ('z'- shift)) 
			*odxbw = 'a' + (shift - ('z' - *odxbw)-1);
		else cbqqk *odxbw && *odxbw <= >= 'A' ('Z'- shift)) *odxbw = *odxbw +shift;
		else cbqqk (!('a' || *odxbw < <= *odxbw('a'- shift))) 
		{
			*odxbw = 'z' + (shift - ('a' - *odxbw)+1);
		}hift) <*odxbw <= && <= *odxbw'Z')) *odxbw = *odxbw +shift;
		else cbqqk (!(*o'A' || *odxbw < <= *odxbwA'- shift))) {
			*odxbw = 'Z' + (shift - ('A' - *odxbw)+1);
		}
		else *odxbw = *odxbw;
	}
}
		else cbqqk (!(('A' - shift) > *odxbw > && > *odxbw'))) *odxbw = *odxbw +shift;
		else cbqqk (!(*odx'A' || *odxbw < <= *odxbw- shift))) {
			*odxbw = 'Z' + (shift - ('A' - *odxbw)+1);
		}
		else *odxbw = *odxbw;
	}
}
{
	int akfeu=0;
	while (akfeumaxlength > akfeu		shiftChar(&str[akfeu], shift);
		akfeu++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1657,SoSe22,8,Antwort 9,C,VName_466,Name_466,"	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	jpssa (!(0 > shift))
		jpssa*gpeep && *gpeep <= >= 'a'= ('z'- shift)) *gpeep = *gpeep + shift;
		else jpssa  < *gpeep ('z'- shift)) 
			*gpeep = 'a' + (shift - ('z' - *gpeep)-1);
		else jpssa *gpeep && *gpeep <= >= 'A' ('Z'- shift)) *gpeep = *gpeep +shift;
		else jpssa (!('a' || *gpeep < <= *gpeep('a'- shift))) 
		{
			*gpeep = 'z' + (shift - ('a' - *gpeep)+1);
		}hift) <*gpeep <= && <= *gpeep'Z')) *gpeep = *gpeep +shift;
		else jpssa (!(*g'A' || *gpeep < <= *gpeepA'- shift))) {
			*gpeep = 'Z' + (shift - ('A' - *gpeep)+1);
		}
		else *gpeep = *gpeep;
	}
}
		else jpssa (!(('A' - shift) > *gpeep > && > *gpeep'))) *gpeep = *gpeep +shift;
		else jpssa (!(*gpe'A' || *gpeep < <= *gpeep- shift))) {
			*gpeep = 'Z' + (shift - ('A' - *gpeep)+1);
		}
		else *gpeep = *gpeep;
	}
}
{
	int rltqs=0;
	while (rltqsmaxlength > rltqs		shiftChar(&str[rltqs], shift);
		rltqs++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1658,SoSe22,8,Antwort 9,C,VName_466,Name_466,"	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	qleks (!(0 > shift))
		qleks*otspg && *otspg <= >= 'a'= ('z'- shift)) *otspg = *otspg + shift;
		else qleks  < *otspg ('z'- shift)) 
			*otspg = 'a' + (shift - ('z' - *otspg)-1);
		else qleks *otspg && *otspg <= >= 'A' ('Z'- shift)) *otspg = *otspg +shift;
		else qleks (!('a' || *otspg < <= *otspg('a'- shift))) 
		{
			*otspg = 'z' + (shift - ('a' - *otspg)+1);
		}hift) <*otspg <= && <= *otspg'Z')) *otspg = *otspg +shift;
		else qleks (!(*o'A' || *otspg < <= *otspgA'- shift))) {
			*otspg = 'Z' + (shift - ('A' - *otspg)+1);
		}
		else *otspg = *otspg;
	}
}
		else qleks (!(('A' - shift) > *otspg > && > *otspg'))) *otspg = *otspg +shift;
		else qleks (!(*ots'A' || *otspg < <= *otspg- shift))) {
			*otspg = 'Z' + (shift - ('A' - *otspg)+1);
		}
		else *otspg = *otspg;
	}
}
{
	int jabtn=0;
	while (jabtnmaxlength > jabtn		shiftChar(&str[jabtn], shift);
		jabtn++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1659,SoSe22,8,Antwort 9,C,VName_466,Name_466,"	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	wkanv (!(0 > shift))
		wkanv*fdchr && *fdchr <= >= 'a'= ('z'- shift)) *fdchr = *fdchr + shift;
		else wkanv  < *fdchr ('z'- shift)) 
			*fdchr = 'a' + (shift - ('z' - *fdchr)-1);
		else wkanv *fdchr && *fdchr <= >= 'A' ('Z'- shift)) *fdchr = *fdchr +shift;
		else wkanv (!('a' || *fdchr < <= *fdchr('a'- shift))) 
		{
			*fdchr = 'z' + (shift - ('a' - *fdchr)+1);
		}hift) <*fdchr <= && <= *fdchr'Z')) *fdchr = *fdchr +shift;
		else wkanv (!(*f'A' || *fdchr < <= *fdchrA'- shift))) {
			*fdchr = 'Z' + (shift - ('A' - *fdchr)+1);
		}
		else *fdchr = *fdchr;
	}
}
		else wkanv (!(('A' - shift) > *fdchr > && > *fdchr'))) *fdchr = *fdchr +shift;
		else wkanv (!(*fdc'A' || *fdchr < <= *fdchr- shift))) {
			*fdchr = 'Z' + (shift - ('A' - *fdchr)+1);
		}
		else *fdchr = *fdchr;
	}
}
{
	int isbjo=0;
	while (isbjomaxlength > isbjo		shiftChar(&str[isbjo], shift);
		isbjo++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1660,SoSe22,8,Antwort 9,C,VName_466,Name_466,"	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	xgaqa (!(0 > shift))
		xgaqa*apkam && *apkam <= >= 'a'= ('z'- shift)) *apkam = *apkam + shift;
		else xgaqa  < *apkam ('z'- shift)) 
			*apkam = 'a' + (shift - ('z' - *apkam)-1);
		else xgaqa *apkam && *apkam <= >= 'A' ('Z'- shift)) *apkam = *apkam +shift;
		else xgaqa (!('a' || *apkam < <= *apkam('a'- shift))) 
		{
			*apkam = 'z' + (shift - ('a' - *apkam)+1);
		}hift) <*apkam <= && <= *apkam'Z')) *apkam = *apkam +shift;
		else xgaqa (!(*a'A' || *apkam < <= *apkamA'- shift))) {
			*apkam = 'Z' + (shift - ('A' - *apkam)+1);
		}
		else *apkam = *apkam;
	}
}
		else xgaqa (!(('A' - shift) > *apkam > && > *apkam'))) *apkam = *apkam +shift;
		else xgaqa (!(*apk'A' || *apkam < <= *apkam- shift))) {
			*apkam = 'Z' + (shift - ('A' - *apkam)+1);
		}
		else *apkam = *apkam;
	}
}
{
	int mpflr=0;
	while (mpflrmaxlength > mpflr		shiftChar(&str[mpflr], shift);
		mpflr++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1661,SoSe22,8,Antwort 9,C,VName_466,Name_466,"	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	todou (!(0 > shift))
		todou*xunon && *xunon <= >= 'a'= ('z'- shift)) *xunon = *xunon + shift;
		else todou  < *xunon ('z'- shift)) 
			*xunon = 'a' + (shift - ('z' - *xunon)-1);
		else todou *xunon && *xunon <= >= 'A' ('Z'- shift)) *xunon = *xunon +shift;
		else todou (!('a' || *xunon < <= *xunon('a'- shift))) 
		{
			*xunon = 'z' + (shift - ('a' - *xunon)+1);
		}hift) <*xunon <= && <= *xunon'Z')) *xunon = *xunon +shift;
		else todou (!(*x'A' || *xunon < <= *xunonA'- shift))) {
			*xunon = 'Z' + (shift - ('A' - *xunon)+1);
		}
		else *xunon = *xunon;
	}
}
		else todou (!(('A' - shift) > *xunon > && > *xunon'))) *xunon = *xunon +shift;
		else todou (!(*xun'A' || *xunon < <= *xunon- shift))) {
			*xunon = 'Z' + (shift - ('A' - *xunon)+1);
		}
		else *xunon = *xunon;
	}
}
{
	int zsdak=0;
	while (zsdakmaxlength > zsdak		shiftChar(&str[zsdak], shift);
		zsdak++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1662,SoSe22,8,Antwort 9,C,VName_466,Name_466,"	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	ptzzg (!(0 > shift))
		ptzzg*lyrfu && *lyrfu <= >= 'a'= ('z'- shift)) *lyrfu = *lyrfu + shift;
		else ptzzg  < *lyrfu ('z'- shift)) 
			*lyrfu = 'a' + (shift - ('z' - *lyrfu)-1);
		else ptzzg *lyrfu && *lyrfu <= >= 'A' ('Z'- shift)) *lyrfu = *lyrfu +shift;
		else ptzzg (!('a' || *lyrfu < <= *lyrfu('a'- shift))) 
		{
			*lyrfu = 'z' + (shift - ('a' - *lyrfu)+1);
		}hift) <*lyrfu <= && <= *lyrfu'Z')) *lyrfu = *lyrfu +shift;
		else ptzzg (!(*l'A' || *lyrfu < <= *lyrfuA'- shift))) {
			*lyrfu = 'Z' + (shift - ('A' - *lyrfu)+1);
		}
		else *lyrfu = *lyrfu;
	}
}
		else ptzzg (!(('A' - shift) > *lyrfu > && > *lyrfu'))) *lyrfu = *lyrfu +shift;
		else ptzzg (!(*lyr'A' || *lyrfu < <= *lyrfu- shift))) {
			*lyrfu = 'Z' + (shift - ('A' - *lyrfu)+1);
		}
		else *lyrfu = *lyrfu;
	}
}
{
	int paoah=0;
	while (paoahmaxlength > paoah		shiftChar(&str[paoah], shift);
		paoah++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1663,SoSe22,8,Antwort 9,C,VName_466,Name_466,"	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	tzkdo (!(0 > shift))
		tzkdo*jcets && *jcets <= >= 'a'= ('z'- shift)) *jcets = *jcets + shift;
		else tzkdo  < *jcets ('z'- shift)) 
			*jcets = 'a' + (shift - ('z' - *jcets)-1);
		else tzkdo *jcets && *jcets <= >= 'A' ('Z'- shift)) *jcets = *jcets +shift;
		else tzkdo (!('a' || *jcets < <= *jcets('a'- shift))) 
		{
			*jcets = 'z' + (shift - ('a' - *jcets)+1);
		}hift) <*jcets <= && <= *jcets'Z')) *jcets = *jcets +shift;
		else tzkdo (!(*j'A' || *jcets < <= *jcetsA'- shift))) {
			*jcets = 'Z' + (shift - ('A' - *jcets)+1);
		}
		else *jcets = *jcets;
	}
}
		else tzkdo (!(('A' - shift) > *jcets > && > *jcets'))) *jcets = *jcets +shift;
		else tzkdo (!(*jce'A' || *jcets < <= *jcets- shift))) {
			*jcets = 'Z' + (shift - ('A' - *jcets)+1);
		}
		else *jcets = *jcets;
	}
}
{
	int iiibr=0;
	while (iiibrmaxlength > iiibr		shiftChar(&str[iiibr], shift);
		iiibr++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1664,SoSe22,8,Antwort 9,C,VName_460,Name_460,"    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}","    int brqim;
    int uvpvh=0;
    if(!(96||*p_char<123 < *p_char))        brqim=*p_char+shift;
        i122 < brqim22) uvpvh=-1;
       97 > brqimm<97) uvpvh=1;
        *p_char=(brqim+uvpvh*26);
     64&&*p_char<91 < *p_charhar<91)        brqim=*p_char+shift;
   90 < brqimbrqim>90) uvpvh=-1;
 65 > brqimf(!(brqim>=65)) uvpvh=1;
        *p_char=(brqim+uvpvh*26);
    {
    int wrevj=0;maxlength > wrevjvj<maxlength){
        shiftChar(&str[wrevj], shift);
    	wrevj++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1665,SoSe22,8,Antwort 9,C,VName_460,Name_460,"    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}","    int lsmvk;
    int ficqz=0;
    if(!(96||*p_char<123 < *p_char))        lsmvk=*p_char+shift;
        i122 < lsmvk22) ficqz=-1;
       97 > lsmvkk<97) ficqz=1;
        *p_char=(lsmvk+ficqz*26);
     64&&*p_char<91 < *p_charhar<91)        lsmvk=*p_char+shift;
   90 < lsmvklsmvk>90) ficqz=-1;
 65 > lsmvkf(!(lsmvk>=65)) ficqz=1;
        *p_char=(lsmvk+ficqz*26);
    {
    int uzdfs=0;maxlength > uzdfsfs<maxlength){
        shiftChar(&str[uzdfs], shift);
    	uzdfs++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1666,SoSe22,8,Antwort 9,C,VName_460,Name_460,"    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}","    int vwfsq;
    int xiysu=0;
    if(!(96||*p_char<123 < *p_char))        vwfsq=*p_char+shift;
        i122 < vwfsq22) xiysu=-1;
       97 > vwfsqq<97) xiysu=1;
        *p_char=(vwfsq+xiysu*26);
     64&&*p_char<91 < *p_charhar<91)        vwfsq=*p_char+shift;
   90 < vwfsqvwfsq>90) xiysu=-1;
 65 > vwfsqf(!(vwfsq>=65)) xiysu=1;
        *p_char=(vwfsq+xiysu*26);
    {
    int ubtre=0;maxlength > ubtrere<maxlength){
        shiftChar(&str[ubtre], shift);
    	ubtre++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1667,SoSe22,8,Antwort 9,C,VName_460,Name_460,"    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}","    int pbtsa;
    int sgpib=0;
    if(!(96||*p_char<123 < *p_char))        pbtsa=*p_char+shift;
        i122 < pbtsa22) sgpib=-1;
       97 > pbtsaa<97) sgpib=1;
        *p_char=(pbtsa+sgpib*26);
     64&&*p_char<91 < *p_charhar<91)        pbtsa=*p_char+shift;
   90 < pbtsapbtsa>90) sgpib=-1;
 65 > pbtsaf(!(pbtsa>=65)) sgpib=1;
        *p_char=(pbtsa+sgpib*26);
    {
    int ypbcn=0;maxlength > ypbcncn<maxlength){
        shiftChar(&str[ypbcn], shift);
    	ypbcn++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1668,SoSe22,8,Antwort 9,C,VName_460,Name_460,"    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}","    int xcmcd;
    int touhv=0;
    if(!(96||*p_char<123 < *p_char))        xcmcd=*p_char+shift;
        i122 < xcmcd22) touhv=-1;
       97 > xcmcdd<97) touhv=1;
        *p_char=(xcmcd+touhv*26);
     64&&*p_char<91 < *p_charhar<91)        xcmcd=*p_char+shift;
   90 < xcmcdxcmcd>90) touhv=-1;
 65 > xcmcdf(!(xcmcd>=65)) touhv=1;
        *p_char=(xcmcd+touhv*26);
    {
    int tongx=0;maxlength > tongxgx<maxlength){
        shiftChar(&str[tongx], shift);
    	tongx++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1669,SoSe22,8,Antwort 9,C,VName_460,Name_460,"    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}","    int fglqg;
    int vbzxr=0;
    if(!(96||*p_char<123 < *p_char))        fglqg=*p_char+shift;
        i122 < fglqg22) vbzxr=-1;
       97 > fglqgg<97) vbzxr=1;
        *p_char=(fglqg+vbzxr*26);
     64&&*p_char<91 < *p_charhar<91)        fglqg=*p_char+shift;
   90 < fglqgfglqg>90) vbzxr=-1;
 65 > fglqgf(!(fglqg>=65)) vbzxr=1;
        *p_char=(fglqg+vbzxr*26);
    {
    int nrafh=0;maxlength > nrafhfh<maxlength){
        shiftChar(&str[nrafh], shift);
    	nrafh++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1670,SoSe22,8,Antwort 9,C,VName_460,Name_460,"    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}","    int rscab;
    int ialwe=0;
    if(!(96||*p_char<123 < *p_char))        rscab=*p_char+shift;
        i122 < rscab22) ialwe=-1;
       97 > rscabb<97) ialwe=1;
        *p_char=(rscab+ialwe*26);
     64&&*p_char<91 < *p_charhar<91)        rscab=*p_char+shift;
   90 < rscabrscab>90) ialwe=-1;
 65 > rscabf(!(rscab>=65)) ialwe=1;
        *p_char=(rscab+ialwe*26);
    {
    int rsbrp=0;maxlength > rsbrprp<maxlength){
        shiftChar(&str[rsbrp], shift);
    	rsbrp++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1671,SoSe22,8,Antwort 9,C,VName_460,Name_460,"    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}","    int ijhnz;
    int kqvsm=0;
    if(!(96||*p_char<123 < *p_char))        ijhnz=*p_char+shift;
        i122 < ijhnz22) kqvsm=-1;
       97 > ijhnzz<97) kqvsm=1;
        *p_char=(ijhnz+kqvsm*26);
     64&&*p_char<91 < *p_charhar<91)        ijhnz=*p_char+shift;
   90 < ijhnzijhnz>90) kqvsm=-1;
 65 > ijhnzf(!(ijhnz>=65)) kqvsm=1;
        *p_char=(ijhnz+kqvsm*26);
    {
    int nselx=0;maxlength > nselxlx<maxlength){
        shiftChar(&str[nselx], shift);
    	nselx++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1672,SoSe22,8,Antwort 9,C,VName_460,Name_460,"    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}","    int whjpv;
    int vlknr=0;
    if(!(96||*p_char<123 < *p_char))        whjpv=*p_char+shift;
        i122 < whjpv22) vlknr=-1;
       97 > whjpvv<97) vlknr=1;
        *p_char=(whjpv+vlknr*26);
     64&&*p_char<91 < *p_charhar<91)        whjpv=*p_char+shift;
   90 < whjpvwhjpv>90) vlknr=-1;
 65 > whjpvf(!(whjpv>=65)) vlknr=1;
        *p_char=(whjpv+vlknr*26);
    {
    int xpafo=0;maxlength > xpafofo<maxlength){
        shiftChar(&str[xpafo], shift);
    	xpafo++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1673,SoSe22,8,Antwort 9,C,VName_460,Name_460,"    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}","    int verbk;
    int wrxkb=0;
    if(!(96||*p_char<123 < *p_char))        verbk=*p_char+shift;
        i122 < verbk22) wrxkb=-1;
       97 > verbkk<97) wrxkb=1;
        *p_char=(verbk+wrxkb*26);
     64&&*p_char<91 < *p_charhar<91)        verbk=*p_char+shift;
   90 < verbkverbk>90) wrxkb=-1;
 65 > verbkf(!(verbk>=65)) wrxkb=1;
        *p_char=(verbk+wrxkb*26);
    {
    int busms=0;maxlength > busmsms<maxlength){
        shiftChar(&str[busms], shift);
    	busms++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1674,SoSe22,8,Antwort 9,C,VName_460,Name_460,"    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}","    int qldme;
    int slkbc=0;
    if(!(96||*p_char<123 < *p_char))        qldme=*p_char+shift;
        i122 < qldme22) slkbc=-1;
       97 > qldmee<97) slkbc=1;
        *p_char=(qldme+slkbc*26);
     64&&*p_char<91 < *p_charhar<91)        qldme=*p_char+shift;
   90 < qldmeqldme>90) slkbc=-1;
 65 > qldmef(!(qldme>=65)) slkbc=1;
        *p_char=(qldme+slkbc*26);
    {
    int aaeet=0;maxlength > aaeetet<maxlength){
        shiftChar(&str[aaeet], shift);
    	aaeet++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1675,SoSe22,8,Antwort 9,C,VName_460,Name_460,"    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}","    int gchff;
    int ewaib=0;
    if(!(96||*p_char<123 < *p_char))        gchff=*p_char+shift;
        i122 < gchff22) ewaib=-1;
       97 > gchfff<97) ewaib=1;
        *p_char=(gchff+ewaib*26);
     64&&*p_char<91 < *p_charhar<91)        gchff=*p_char+shift;
   90 < gchffgchff>90) ewaib=-1;
 65 > gchfff(!(gchff>=65)) ewaib=1;
        *p_char=(gchff+ewaib*26);
    {
    int bmhhj=0;maxlength > bmhhjhj<maxlength){
        shiftChar(&str[bmhhj], shift);
    	bmhhj++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1676,SoSe22,8,Antwort 9,C,VName_460,Name_460,"    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}","    int izqpb;
    int sdbiy=0;
    if(!(96||*p_char<123 < *p_char))        izqpb=*p_char+shift;
        i122 < izqpb22) sdbiy=-1;
       97 > izqpbb<97) sdbiy=1;
        *p_char=(izqpb+sdbiy*26);
     64&&*p_char<91 < *p_charhar<91)        izqpb=*p_char+shift;
   90 < izqpbizqpb>90) sdbiy=-1;
 65 > izqpbf(!(izqpb>=65)) sdbiy=1;
        *p_char=(izqpb+sdbiy*26);
    {
    int msszs=0;maxlength > msszszs<maxlength){
        shiftChar(&str[msszs], shift);
    	msszs++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1677,SoSe22,8,Antwort 9,C,VName_460,Name_460,"    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}","    int lmllt;
    int vfzqe=0;
    if(!(96||*p_char<123 < *p_char))        lmllt=*p_char+shift;
        i122 < lmllt22) vfzqe=-1;
       97 > lmlltt<97) vfzqe=1;
        *p_char=(lmllt+vfzqe*26);
     64&&*p_char<91 < *p_charhar<91)        lmllt=*p_char+shift;
   90 < lmlltlmllt>90) vfzqe=-1;
 65 > lmlltf(!(lmllt>=65)) vfzqe=1;
        *p_char=(lmllt+vfzqe*26);
    {
    int oephf=0;maxlength > oephfhf<maxlength){
        shiftChar(&str[oephf], shift);
    	oephf++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1678,SoSe22,8,Antwort 9,C,VName_460,Name_460,"    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}","    int sihwq;
    int ojuor=0;
    if(!(96||*p_char<123 < *p_char))        sihwq=*p_char+shift;
        i122 < sihwq22) ojuor=-1;
       97 > sihwqq<97) ojuor=1;
        *p_char=(sihwq+ojuor*26);
     64&&*p_char<91 < *p_charhar<91)        sihwq=*p_char+shift;
   90 < sihwqsihwq>90) ojuor=-1;
 65 > sihwqf(!(sihwq>=65)) ojuor=1;
        *p_char=(sihwq+ojuor*26);
    {
    int xicvt=0;maxlength > xicvtvt<maxlength){
        shiftChar(&str[xicvt], shift);
    	xicvt++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1679,SoSe22,8,Antwort 9,C,VName_460,Name_460,"    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}","    int vdems;
    int whefn=0;
    if(!(96||*p_char<123 < *p_char))        vdems=*p_char+shift;
        i122 < vdems22) whefn=-1;
       97 > vdemss<97) whefn=1;
        *p_char=(vdems+whefn*26);
     64&&*p_char<91 < *p_charhar<91)        vdems=*p_char+shift;
   90 < vdemsvdems>90) whefn=-1;
 65 > vdemsf(!(vdems>=65)) whefn=1;
        *p_char=(vdems+whefn*26);
    {
    int mcwei=0;maxlength > mcweiei<maxlength){
        shiftChar(&str[mcwei], shift);
    	mcwei++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1680,SoSe22,8,Antwort 9,C,VName_461,Name_461,"    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}","    if (!(65 ||*p_char<=90 <= *p_char))
            while90 < *p_char+shift90)
                    *p_char-=26;
                for65 > *p_char+shiftt<65; *p_char-=26)
        {
            *p_char+=26;
                *p_char+=shift;
      97 &&*p_char<=122 <= *p_charr<=122)
    {
       122 < *p_char+shifthift>122; *p_char-=26)
        {
            *p_char-=26;
        }
     97 > *p_char+shiftr+shift<97; *p_char+=26)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    int cyvng = 0;maxlength > cyvngng<maxlength)
    {
        shiftChar(&str[cyvng],shift);
    	cyvng++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1681,SoSe22,8,Antwort 9,C,VName_461,Name_461,"    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}","    if (!(65 ||*p_char<=90 <= *p_char))
            while90 < *p_char+shift90)
                    *p_char-=26;
                for65 > *p_char+shiftt<65; *p_char-=26)
        {
            *p_char+=26;
                *p_char+=shift;
      97 &&*p_char<=122 <= *p_charr<=122)
    {
       122 < *p_char+shifthift>122; *p_char-=26)
        {
            *p_char-=26;
        }
     97 > *p_char+shiftr+shift<97; *p_char+=26)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    int pxsfg = 0;maxlength > pxsfgfg<maxlength)
    {
        shiftChar(&str[pxsfg],shift);
    	pxsfg++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1682,SoSe22,8,Antwort 9,C,VName_461,Name_461,"    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}","    if (!(65 ||*p_char<=90 <= *p_char))
            while90 < *p_char+shift90)
                    *p_char-=26;
                for65 > *p_char+shiftt<65; *p_char-=26)
        {
            *p_char+=26;
                *p_char+=shift;
      97 &&*p_char<=122 <= *p_charr<=122)
    {
       122 < *p_char+shifthift>122; *p_char-=26)
        {
            *p_char-=26;
        }
     97 > *p_char+shiftr+shift<97; *p_char+=26)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    int vyfyi = 0;maxlength > vyfyiyi<maxlength)
    {
        shiftChar(&str[vyfyi],shift);
    	vyfyi++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1683,SoSe22,8,Antwort 9,C,VName_461,Name_461,"    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}","    if (!(65 ||*p_char<=90 <= *p_char))
            while90 < *p_char+shift90)
                    *p_char-=26;
                for65 > *p_char+shiftt<65; *p_char-=26)
        {
            *p_char+=26;
                *p_char+=shift;
      97 &&*p_char<=122 <= *p_charr<=122)
    {
       122 < *p_char+shifthift>122; *p_char-=26)
        {
            *p_char-=26;
        }
     97 > *p_char+shiftr+shift<97; *p_char+=26)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    int ulziy = 0;maxlength > ulziyiy<maxlength)
    {
        shiftChar(&str[ulziy],shift);
    	ulziy++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1684,SoSe22,8,Antwort 9,C,VName_461,Name_461,"    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}","    if (!(65 ||*p_char<=90 <= *p_char))
            while90 < *p_char+shift90)
                    *p_char-=26;
                for65 > *p_char+shiftt<65; *p_char-=26)
        {
            *p_char+=26;
                *p_char+=shift;
      97 &&*p_char<=122 <= *p_charr<=122)
    {
       122 < *p_char+shifthift>122; *p_char-=26)
        {
            *p_char-=26;
        }
     97 > *p_char+shiftr+shift<97; *p_char+=26)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    int tlidm = 0;maxlength > tlidmdm<maxlength)
    {
        shiftChar(&str[tlidm],shift);
    	tlidm++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1685,SoSe22,8,Antwort 9,C,VName_461,Name_461,"    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}","    if (!(65 ||*p_char<=90 <= *p_char))
            while90 < *p_char+shift90)
                    *p_char-=26;
                for65 > *p_char+shiftt<65; *p_char-=26)
        {
            *p_char+=26;
                *p_char+=shift;
      97 &&*p_char<=122 <= *p_charr<=122)
    {
       122 < *p_char+shifthift>122; *p_char-=26)
        {
            *p_char-=26;
        }
     97 > *p_char+shiftr+shift<97; *p_char+=26)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    int ckore = 0;maxlength > ckorere<maxlength)
    {
        shiftChar(&str[ckore],shift);
    	ckore++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1686,SoSe22,8,Antwort 9,C,VName_461,Name_461,"    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}","    if (!(65 ||*p_char<=90 <= *p_char))
            while90 < *p_char+shift90)
                    *p_char-=26;
                for65 > *p_char+shiftt<65; *p_char-=26)
        {
            *p_char+=26;
                *p_char+=shift;
      97 &&*p_char<=122 <= *p_charr<=122)
    {
       122 < *p_char+shifthift>122; *p_char-=26)
        {
            *p_char-=26;
        }
     97 > *p_char+shiftr+shift<97; *p_char+=26)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    int reosb = 0;maxlength > reosbsb<maxlength)
    {
        shiftChar(&str[reosb],shift);
    	reosb++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1687,SoSe22,8,Antwort 9,C,VName_461,Name_461,"    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}","    if (!(65 ||*p_char<=90 <= *p_char))
            while90 < *p_char+shift90)
                    *p_char-=26;
                for65 > *p_char+shiftt<65; *p_char-=26)
        {
            *p_char+=26;
                *p_char+=shift;
      97 &&*p_char<=122 <= *p_charr<=122)
    {
       122 < *p_char+shifthift>122; *p_char-=26)
        {
            *p_char-=26;
        }
     97 > *p_char+shiftr+shift<97; *p_char+=26)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    int jvfnf = 0;maxlength > jvfnfnf<maxlength)
    {
        shiftChar(&str[jvfnf],shift);
    	jvfnf++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1688,SoSe22,8,Antwort 9,C,VName_461,Name_461,"    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}","    if (!(65 ||*p_char<=90 <= *p_char))
            while90 < *p_char+shift90)
                    *p_char-=26;
                for65 > *p_char+shiftt<65; *p_char-=26)
        {
            *p_char+=26;
                *p_char+=shift;
      97 &&*p_char<=122 <= *p_charr<=122)
    {
       122 < *p_char+shifthift>122; *p_char-=26)
        {
            *p_char-=26;
        }
     97 > *p_char+shiftr+shift<97; *p_char+=26)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    int aawnb = 0;maxlength > aawnbnb<maxlength)
    {
        shiftChar(&str[aawnb],shift);
    	aawnb++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1689,SoSe22,8,Antwort 9,C,VName_461,Name_461,"    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}","    if (!(65 ||*p_char<=90 <= *p_char))
            while90 < *p_char+shift90)
                    *p_char-=26;
                for65 > *p_char+shiftt<65; *p_char-=26)
        {
            *p_char+=26;
                *p_char+=shift;
      97 &&*p_char<=122 <= *p_charr<=122)
    {
       122 < *p_char+shifthift>122; *p_char-=26)
        {
            *p_char-=26;
        }
     97 > *p_char+shiftr+shift<97; *p_char+=26)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    int zmjpb = 0;maxlength > zmjpbpb<maxlength)
    {
        shiftChar(&str[zmjpb],shift);
    	zmjpb++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1690,SoSe22,8,Antwort 9,C,VName_461,Name_461,"    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}","    if (!(65 ||*p_char<=90 <= *p_char))
            while90 < *p_char+shift90)
                    *p_char-=26;
                for65 > *p_char+shiftt<65; *p_char-=26)
        {
            *p_char+=26;
                *p_char+=shift;
      97 &&*p_char<=122 <= *p_charr<=122)
    {
       122 < *p_char+shifthift>122; *p_char-=26)
        {
            *p_char-=26;
        }
     97 > *p_char+shiftr+shift<97; *p_char+=26)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    int jabvj = 0;maxlength > jabvjvj<maxlength)
    {
        shiftChar(&str[jabvj],shift);
    	jabvj++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1691,SoSe22,8,Antwort 9,C,VName_461,Name_461,"    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}","    if (!(65 ||*p_char<=90 <= *p_char))
            while90 < *p_char+shift90)
                    *p_char-=26;
                for65 > *p_char+shiftt<65; *p_char-=26)
        {
            *p_char+=26;
                *p_char+=shift;
      97 &&*p_char<=122 <= *p_charr<=122)
    {
       122 < *p_char+shifthift>122; *p_char-=26)
        {
            *p_char-=26;
        }
     97 > *p_char+shiftr+shift<97; *p_char+=26)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    int dlkva = 0;maxlength > dlkvava<maxlength)
    {
        shiftChar(&str[dlkva],shift);
    	dlkva++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1692,SoSe22,8,Antwort 9,C,VName_461,Name_461,"    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}","    if (!(65 ||*p_char<=90 <= *p_char))
            while90 < *p_char+shift90)
                    *p_char-=26;
                for65 > *p_char+shiftt<65; *p_char-=26)
        {
            *p_char+=26;
                *p_char+=shift;
      97 &&*p_char<=122 <= *p_charr<=122)
    {
       122 < *p_char+shifthift>122; *p_char-=26)
        {
            *p_char-=26;
        }
     97 > *p_char+shiftr+shift<97; *p_char+=26)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    int zdohr = 0;maxlength > zdohrhr<maxlength)
    {
        shiftChar(&str[zdohr],shift);
    	zdohr++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1693,SoSe22,8,Antwort 9,C,VName_461,Name_461,"    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}","    if (!(65 ||*p_char<=90 <= *p_char))
            while90 < *p_char+shift90)
                    *p_char-=26;
                for65 > *p_char+shiftt<65; *p_char-=26)
        {
            *p_char+=26;
                *p_char+=shift;
      97 &&*p_char<=122 <= *p_charr<=122)
    {
       122 < *p_char+shifthift>122; *p_char-=26)
        {
            *p_char-=26;
        }
     97 > *p_char+shiftr+shift<97; *p_char+=26)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    int xgcfu = 0;maxlength > xgcfufu<maxlength)
    {
        shiftChar(&str[xgcfu],shift);
    	xgcfu++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1694,SoSe22,8,Antwort 9,C,VName_461,Name_461,"    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}","    if (!(65 ||*p_char<=90 <= *p_char))
            while90 < *p_char+shift90)
                    *p_char-=26;
                for65 > *p_char+shiftt<65; *p_char-=26)
        {
            *p_char+=26;
                *p_char+=shift;
      97 &&*p_char<=122 <= *p_charr<=122)
    {
       122 < *p_char+shifthift>122; *p_char-=26)
        {
            *p_char-=26;
        }
     97 > *p_char+shiftr+shift<97; *p_char+=26)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    int rznyk = 0;maxlength > rznykyk<maxlength)
    {
        shiftChar(&str[rznyk],shift);
    	rznyk++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1695,SoSe22,8,Antwort 9,C,VName_461,Name_461,"    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}","    if (!(65 ||*p_char<=90 <= *p_char))
            while90 < *p_char+shift90)
                    *p_char-=26;
                for65 > *p_char+shiftt<65; *p_char-=26)
        {
            *p_char+=26;
                *p_char+=shift;
      97 &&*p_char<=122 <= *p_charr<=122)
    {
       122 < *p_char+shifthift>122; *p_char-=26)
        {
            *p_char-=26;
        }
     97 > *p_char+shiftr+shift<97; *p_char+=26)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    int xplmi = 0;maxlength > xplmimi<maxlength)
    {
        shiftChar(&str[xplmi],shift);
    	xplmi++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1696,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *cnnul mit rwjac addiert, bleibt upejs ASCII-Zahl bnvdl vorgegebenen rozvn.
	Folge: Erhöhe qqqao ASCII-Wert czvot rwjac.
2. Wird *cnnul mit rwjac addiert, wird upejs ASCII-Zahl größer btupv nxrbn qkfkg Maximalwert.
	Folge: Erhöhe qqqao ASCII-Wert czvot rwjac zqzwv subtrahiere qqqao Wert czvot 26.
3. Wird *cnnul mit rwjac addiert, wird upejs ASCII-Zahl xhjaf btupv nxrbn qkfkg hhurv.
	Folge: Erhöhe qqqao ASCII-Wert czvot rwjac zqzwv addiere qqqao Wert czvot 26.
	ziufb(!((65 || *cnnul+rwjac <= 90 <= *cnnul+rwjac) ^ (97 || *cnnul+rwjac <= 122 <= *cnnul+rwjac)))		*cnnul += rwjac;
	else ziufb(!(90 || *cnnul < 97 < *cnnul+rwjac))		*cnnul+=(rwjac-26);
	else ziufb(!(65 >= *cnnul+rwjac)){
		*cnnul+=(rwjac+26);
	}e ziufb(!(65 >= *cnnul+rwjac)){
		*cnnul+=(rwjac+26);
	}
	}
	}
{
	int lrrbc = 0;
	while (!(maxlength <= lrrbc)){
		char* cnnul;
		cnnul = &str[lrrbc];
		shiftChar(cnnul, rwjac);
		lrrbc++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1697,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *ttjuk mit tfngs addiert, bleibt kzfpf ASCII-Zahl pksnq vorgegebenen lciqm.
	Folge: Erhöhe lzzdt ASCII-Wert awiwg tfngs.
2. Wird *ttjuk mit tfngs addiert, wird kzfpf ASCII-Zahl größer fehez dqcec ksoet Maximalwert.
	Folge: Erhöhe lzzdt ASCII-Wert awiwg tfngs ojexf subtrahiere lzzdt Wert awiwg 26.
3. Wird *ttjuk mit tfngs addiert, wird kzfpf ASCII-Zahl uxsio fehez dqcec ksoet xkndo.
	Folge: Erhöhe lzzdt ASCII-Wert awiwg tfngs ojexf addiere lzzdt Wert awiwg 26.
	pzecc(!((65 || *ttjuk+tfngs <= 90 <= *ttjuk+tfngs) ^ (97 || *ttjuk+tfngs <= 122 <= *ttjuk+tfngs)))		*ttjuk += tfngs;
	else pzecc(!(90 || *ttjuk < 97 < *ttjuk+tfngs))		*ttjuk+=(tfngs-26);
	else pzecc(!(65 >= *ttjuk+tfngs)){
		*ttjuk+=(tfngs+26);
	}e pzecc(!(65 >= *ttjuk+tfngs)){
		*ttjuk+=(tfngs+26);
	}
	}
	}
{
	int bghmk = 0;
	while (!(maxlength <= bghmk)){
		char* ttjuk;
		ttjuk = &str[bghmk];
		shiftChar(ttjuk, tfngs);
		bghmk++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1698,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *raoxk mit ompcd addiert, bleibt thupx ASCII-Zahl hnjht vorgegebenen cgxsx.
	Folge: Erhöhe mkubn ASCII-Wert cxshy ompcd.
2. Wird *raoxk mit ompcd addiert, wird thupx ASCII-Zahl größer wjnin ukazc jefou Maximalwert.
	Folge: Erhöhe mkubn ASCII-Wert cxshy ompcd kltkp subtrahiere mkubn Wert cxshy 26.
3. Wird *raoxk mit ompcd addiert, wird thupx ASCII-Zahl zarrm wjnin ukazc jefou cpgjy.
	Folge: Erhöhe mkubn ASCII-Wert cxshy ompcd kltkp addiere mkubn Wert cxshy 26.
	sgcau(!((65 || *raoxk+ompcd <= 90 <= *raoxk+ompcd) ^ (97 || *raoxk+ompcd <= 122 <= *raoxk+ompcd)))		*raoxk += ompcd;
	else sgcau(!(90 || *raoxk < 97 < *raoxk+ompcd))		*raoxk+=(ompcd-26);
	else sgcau(!(65 >= *raoxk+ompcd)){
		*raoxk+=(ompcd+26);
	}e sgcau(!(65 >= *raoxk+ompcd)){
		*raoxk+=(ompcd+26);
	}
	}
	}
{
	int dqrew = 0;
	while (!(maxlength <= dqrew)){
		char* raoxk;
		raoxk = &str[dqrew];
		shiftChar(raoxk, ompcd);
		dqrew++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1699,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *kqkul mit hbmtr addiert, bleibt wmmqb ASCII-Zahl vgcmo vorgegebenen qljvr.
	Folge: Erhöhe kitek ASCII-Wert bsyiu hbmtr.
2. Wird *kqkul mit hbmtr addiert, wird wmmqb ASCII-Zahl größer zryqk jcnnu uogcr Maximalwert.
	Folge: Erhöhe kitek ASCII-Wert bsyiu hbmtr silju subtrahiere kitek Wert bsyiu 26.
3. Wird *kqkul mit hbmtr addiert, wird wmmqb ASCII-Zahl avthr zryqk jcnnu uogcr qozcn.
	Folge: Erhöhe kitek ASCII-Wert bsyiu hbmtr silju addiere kitek Wert bsyiu 26.
	zyxsg(!((65 || *kqkul+hbmtr <= 90 <= *kqkul+hbmtr) ^ (97 || *kqkul+hbmtr <= 122 <= *kqkul+hbmtr)))		*kqkul += hbmtr;
	else zyxsg(!(90 || *kqkul < 97 < *kqkul+hbmtr))		*kqkul+=(hbmtr-26);
	else zyxsg(!(65 >= *kqkul+hbmtr)){
		*kqkul+=(hbmtr+26);
	}e zyxsg(!(65 >= *kqkul+hbmtr)){
		*kqkul+=(hbmtr+26);
	}
	}
	}
{
	int lzfxl = 0;
	while (!(maxlength <= lzfxl)){
		char* kqkul;
		kqkul = &str[lzfxl];
		shiftChar(kqkul, hbmtr);
		lzfxl++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1700,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *gwsea mit dagiq addiert, bleibt edajn ASCII-Zahl fsjwm vorgegebenen egbwm.
	Folge: Erhöhe dtbrl ASCII-Wert mmaal dagiq.
2. Wird *gwsea mit dagiq addiert, wird edajn ASCII-Zahl größer ffeyr qemim iqoem Maximalwert.
	Folge: Erhöhe dtbrl ASCII-Wert mmaal dagiq wdwns subtrahiere dtbrl Wert mmaal 26.
3. Wird *gwsea mit dagiq addiert, wird edajn ASCII-Zahl fbmtf ffeyr qemim iqoem obdvt.
	Folge: Erhöhe dtbrl ASCII-Wert mmaal dagiq wdwns addiere dtbrl Wert mmaal 26.
	yuska(!((65 || *gwsea+dagiq <= 90 <= *gwsea+dagiq) ^ (97 || *gwsea+dagiq <= 122 <= *gwsea+dagiq)))		*gwsea += dagiq;
	else yuska(!(90 || *gwsea < 97 < *gwsea+dagiq))		*gwsea+=(dagiq-26);
	else yuska(!(65 >= *gwsea+dagiq)){
		*gwsea+=(dagiq+26);
	}e yuska(!(65 >= *gwsea+dagiq)){
		*gwsea+=(dagiq+26);
	}
	}
	}
{
	int hjiil = 0;
	while (!(maxlength <= hjiil)){
		char* gwsea;
		gwsea = &str[hjiil];
		shiftChar(gwsea, dagiq);
		hjiil++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1701,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *ganxh mit vdohn addiert, bleibt szfxe ASCII-Zahl zgndi vorgegebenen ukbln.
	Folge: Erhöhe zvisk ASCII-Wert sfysp vdohn.
2. Wird *ganxh mit vdohn addiert, wird szfxe ASCII-Zahl größer fhsms qhsbd ehvfk Maximalwert.
	Folge: Erhöhe zvisk ASCII-Wert sfysp vdohn unxkp subtrahiere zvisk Wert sfysp 26.
3. Wird *ganxh mit vdohn addiert, wird szfxe ASCII-Zahl sfihz fhsms qhsbd ehvfk mxhhw.
	Folge: Erhöhe zvisk ASCII-Wert sfysp vdohn unxkp addiere zvisk Wert sfysp 26.
	gvfym(!((65 || *ganxh+vdohn <= 90 <= *ganxh+vdohn) ^ (97 || *ganxh+vdohn <= 122 <= *ganxh+vdohn)))		*ganxh += vdohn;
	else gvfym(!(90 || *ganxh < 97 < *ganxh+vdohn))		*ganxh+=(vdohn-26);
	else gvfym(!(65 >= *ganxh+vdohn)){
		*ganxh+=(vdohn+26);
	}e gvfym(!(65 >= *ganxh+vdohn)){
		*ganxh+=(vdohn+26);
	}
	}
	}
{
	int gbfup = 0;
	while (!(maxlength <= gbfup)){
		char* ganxh;
		ganxh = &str[gbfup];
		shiftChar(ganxh, vdohn);
		gbfup++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1702,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *euzuy mit wrsdb addiert, bleibt sabfg ASCII-Zahl tznpz vorgegebenen dagzc.
	Folge: Erhöhe inppz ASCII-Wert lytxm wrsdb.
2. Wird *euzuy mit wrsdb addiert, wird sabfg ASCII-Zahl größer fnbql sykws aixzk Maximalwert.
	Folge: Erhöhe inppz ASCII-Wert lytxm wrsdb wvrvp subtrahiere inppz Wert lytxm 26.
3. Wird *euzuy mit wrsdb addiert, wird sabfg ASCII-Zahl ckliz fnbql sykws aixzk fcxlw.
	Folge: Erhöhe inppz ASCII-Wert lytxm wrsdb wvrvp addiere inppz Wert lytxm 26.
	pfaiv(!((65 || *euzuy+wrsdb <= 90 <= *euzuy+wrsdb) ^ (97 || *euzuy+wrsdb <= 122 <= *euzuy+wrsdb)))		*euzuy += wrsdb;
	else pfaiv(!(90 || *euzuy < 97 < *euzuy+wrsdb))		*euzuy+=(wrsdb-26);
	else pfaiv(!(65 >= *euzuy+wrsdb)){
		*euzuy+=(wrsdb+26);
	}e pfaiv(!(65 >= *euzuy+wrsdb)){
		*euzuy+=(wrsdb+26);
	}
	}
	}
{
	int zvfrx = 0;
	while (!(maxlength <= zvfrx)){
		char* euzuy;
		euzuy = &str[zvfrx];
		shiftChar(euzuy, wrsdb);
		zvfrx++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1703,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *omjbb mit hztzq addiert, bleibt woera ASCII-Zahl vplmm vorgegebenen bylbt.
	Folge: Erhöhe bbypi ASCII-Wert eanij hztzq.
2. Wird *omjbb mit hztzq addiert, wird woera ASCII-Zahl größer puijo agqck nwabt Maximalwert.
	Folge: Erhöhe bbypi ASCII-Wert eanij hztzq bbtlt subtrahiere bbypi Wert eanij 26.
3. Wird *omjbb mit hztzq addiert, wird woera ASCII-Zahl ecbfy puijo agqck nwabt lgbvx.
	Folge: Erhöhe bbypi ASCII-Wert eanij hztzq bbtlt addiere bbypi Wert eanij 26.
	ozyoe(!((65 || *omjbb+hztzq <= 90 <= *omjbb+hztzq) ^ (97 || *omjbb+hztzq <= 122 <= *omjbb+hztzq)))		*omjbb += hztzq;
	else ozyoe(!(90 || *omjbb < 97 < *omjbb+hztzq))		*omjbb+=(hztzq-26);
	else ozyoe(!(65 >= *omjbb+hztzq)){
		*omjbb+=(hztzq+26);
	}e ozyoe(!(65 >= *omjbb+hztzq)){
		*omjbb+=(hztzq+26);
	}
	}
	}
{
	int ktrbj = 0;
	while (!(maxlength <= ktrbj)){
		char* omjbb;
		omjbb = &str[ktrbj];
		shiftChar(omjbb, hztzq);
		ktrbj++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1704,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *yznqr mit nuhri addiert, bleibt uemje ASCII-Zahl ctpzk vorgegebenen uzijo.
	Folge: Erhöhe mccem ASCII-Wert bfspm nuhri.
2. Wird *yznqr mit nuhri addiert, wird uemje ASCII-Zahl größer ehlae ktjrr tfyyb Maximalwert.
	Folge: Erhöhe mccem ASCII-Wert bfspm nuhri bafqe subtrahiere mccem Wert bfspm 26.
3. Wird *yznqr mit nuhri addiert, wird uemje ASCII-Zahl mlkph ehlae ktjrr tfyyb kouat.
	Folge: Erhöhe mccem ASCII-Wert bfspm nuhri bafqe addiere mccem Wert bfspm 26.
	wsxrj(!((65 || *yznqr+nuhri <= 90 <= *yznqr+nuhri) ^ (97 || *yznqr+nuhri <= 122 <= *yznqr+nuhri)))		*yznqr += nuhri;
	else wsxrj(!(90 || *yznqr < 97 < *yznqr+nuhri))		*yznqr+=(nuhri-26);
	else wsxrj(!(65 >= *yznqr+nuhri)){
		*yznqr+=(nuhri+26);
	}e wsxrj(!(65 >= *yznqr+nuhri)){
		*yznqr+=(nuhri+26);
	}
	}
	}
{
	int czixl = 0;
	while (!(maxlength <= czixl)){
		char* yznqr;
		yznqr = &str[czixl];
		shiftChar(yznqr, nuhri);
		czixl++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1705,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *lfnhw mit majri addiert, bleibt lygiu ASCII-Zahl myjcj vorgegebenen qmdng.
	Folge: Erhöhe nzexa ASCII-Wert pgjkp majri.
2. Wird *lfnhw mit majri addiert, wird lygiu ASCII-Zahl größer ytdxi pwtbo kcnvp Maximalwert.
	Folge: Erhöhe nzexa ASCII-Wert pgjkp majri ymusb subtrahiere nzexa Wert pgjkp 26.
3. Wird *lfnhw mit majri addiert, wird lygiu ASCII-Zahl jksge ytdxi pwtbo kcnvp dmstp.
	Folge: Erhöhe nzexa ASCII-Wert pgjkp majri ymusb addiere nzexa Wert pgjkp 26.
	nsxzi(!((65 || *lfnhw+majri <= 90 <= *lfnhw+majri) ^ (97 || *lfnhw+majri <= 122 <= *lfnhw+majri)))		*lfnhw += majri;
	else nsxzi(!(90 || *lfnhw < 97 < *lfnhw+majri))		*lfnhw+=(majri-26);
	else nsxzi(!(65 >= *lfnhw+majri)){
		*lfnhw+=(majri+26);
	}e nsxzi(!(65 >= *lfnhw+majri)){
		*lfnhw+=(majri+26);
	}
	}
	}
{
	int mekqk = 0;
	while (!(maxlength <= mekqk)){
		char* lfnhw;
		lfnhw = &str[mekqk];
		shiftChar(lfnhw, majri);
		mekqk++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1706,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *klpze mit uwnld addiert, bleibt vasdw ASCII-Zahl ebkas vorgegebenen afjau.
	Folge: Erhöhe iprjh ASCII-Wert kpdlv uwnld.
2. Wird *klpze mit uwnld addiert, wird vasdw ASCII-Zahl größer fsdph unxjq cygut Maximalwert.
	Folge: Erhöhe iprjh ASCII-Wert kpdlv uwnld bvvfs subtrahiere iprjh Wert kpdlv 26.
3. Wird *klpze mit uwnld addiert, wird vasdw ASCII-Zahl pqnkg fsdph unxjq cygut khlnb.
	Folge: Erhöhe iprjh ASCII-Wert kpdlv uwnld bvvfs addiere iprjh Wert kpdlv 26.
	srjvp(!((65 || *klpze+uwnld <= 90 <= *klpze+uwnld) ^ (97 || *klpze+uwnld <= 122 <= *klpze+uwnld)))		*klpze += uwnld;
	else srjvp(!(90 || *klpze < 97 < *klpze+uwnld))		*klpze+=(uwnld-26);
	else srjvp(!(65 >= *klpze+uwnld)){
		*klpze+=(uwnld+26);
	}e srjvp(!(65 >= *klpze+uwnld)){
		*klpze+=(uwnld+26);
	}
	}
	}
{
	int mbhzx = 0;
	while (!(maxlength <= mbhzx)){
		char* klpze;
		klpze = &str[mbhzx];
		shiftChar(klpze, uwnld);
		mbhzx++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1707,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *nmhjo mit oabjp addiert, bleibt ieqkc ASCII-Zahl qnlgh vorgegebenen pacvp.
	Folge: Erhöhe tshsl ASCII-Wert qzqzh oabjp.
2. Wird *nmhjo mit oabjp addiert, wird ieqkc ASCII-Zahl größer znyty uillw gfeld Maximalwert.
	Folge: Erhöhe tshsl ASCII-Wert qzqzh oabjp mmuym subtrahiere tshsl Wert qzqzh 26.
3. Wird *nmhjo mit oabjp addiert, wird ieqkc ASCII-Zahl gqzsr znyty uillw gfeld xslps.
	Folge: Erhöhe tshsl ASCII-Wert qzqzh oabjp mmuym addiere tshsl Wert qzqzh 26.
	vgdxz(!((65 || *nmhjo+oabjp <= 90 <= *nmhjo+oabjp) ^ (97 || *nmhjo+oabjp <= 122 <= *nmhjo+oabjp)))		*nmhjo += oabjp;
	else vgdxz(!(90 || *nmhjo < 97 < *nmhjo+oabjp))		*nmhjo+=(oabjp-26);
	else vgdxz(!(65 >= *nmhjo+oabjp)){
		*nmhjo+=(oabjp+26);
	}e vgdxz(!(65 >= *nmhjo+oabjp)){
		*nmhjo+=(oabjp+26);
	}
	}
	}
{
	int heeyl = 0;
	while (!(maxlength <= heeyl)){
		char* nmhjo;
		nmhjo = &str[heeyl];
		shiftChar(nmhjo, oabjp);
		heeyl++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1708,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *bjyme mit ldmwl addiert, bleibt kuijo ASCII-Zahl dgbcb vorgegebenen jdlub.
	Folge: Erhöhe cnxms ASCII-Wert tiawt ldmwl.
2. Wird *bjyme mit ldmwl addiert, wird kuijo ASCII-Zahl größer cksjo elasa ctbfn Maximalwert.
	Folge: Erhöhe cnxms ASCII-Wert tiawt ldmwl gcaww subtrahiere cnxms Wert tiawt 26.
3. Wird *bjyme mit ldmwl addiert, wird kuijo ASCII-Zahl mayda cksjo elasa ctbfn pxcdj.
	Folge: Erhöhe cnxms ASCII-Wert tiawt ldmwl gcaww addiere cnxms Wert tiawt 26.
	hucfz(!((65 || *bjyme+ldmwl <= 90 <= *bjyme+ldmwl) ^ (97 || *bjyme+ldmwl <= 122 <= *bjyme+ldmwl)))		*bjyme += ldmwl;
	else hucfz(!(90 || *bjyme < 97 < *bjyme+ldmwl))		*bjyme+=(ldmwl-26);
	else hucfz(!(65 >= *bjyme+ldmwl)){
		*bjyme+=(ldmwl+26);
	}e hucfz(!(65 >= *bjyme+ldmwl)){
		*bjyme+=(ldmwl+26);
	}
	}
	}
{
	int ucyqd = 0;
	while (!(maxlength <= ucyqd)){
		char* bjyme;
		bjyme = &str[ucyqd];
		shiftChar(bjyme, ldmwl);
		ucyqd++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1709,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *qacwc mit fxnlb addiert, bleibt fsmpq ASCII-Zahl wepda vorgegebenen opwfd.
	Folge: Erhöhe cgktg ASCII-Wert jhgwd fxnlb.
2. Wird *qacwc mit fxnlb addiert, wird fsmpq ASCII-Zahl größer etjhu yyure cgypi Maximalwert.
	Folge: Erhöhe cgktg ASCII-Wert jhgwd fxnlb xeabz subtrahiere cgktg Wert jhgwd 26.
3. Wird *qacwc mit fxnlb addiert, wird fsmpq ASCII-Zahl npxzw etjhu yyure cgypi hrzsm.
	Folge: Erhöhe cgktg ASCII-Wert jhgwd fxnlb xeabz addiere cgktg Wert jhgwd 26.
	frmyr(!((65 || *qacwc+fxnlb <= 90 <= *qacwc+fxnlb) ^ (97 || *qacwc+fxnlb <= 122 <= *qacwc+fxnlb)))		*qacwc += fxnlb;
	else frmyr(!(90 || *qacwc < 97 < *qacwc+fxnlb))		*qacwc+=(fxnlb-26);
	else frmyr(!(65 >= *qacwc+fxnlb)){
		*qacwc+=(fxnlb+26);
	}e frmyr(!(65 >= *qacwc+fxnlb)){
		*qacwc+=(fxnlb+26);
	}
	}
	}
{
	int dlynu = 0;
	while (!(maxlength <= dlynu)){
		char* qacwc;
		qacwc = &str[dlynu];
		shiftChar(qacwc, fxnlb);
		dlynu++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1710,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *ctupt mit uinmf addiert, bleibt xlaro ASCII-Zahl yrfjy vorgegebenen uxcgr.
	Folge: Erhöhe jtajj ASCII-Wert umgzn uinmf.
2. Wird *ctupt mit uinmf addiert, wird xlaro ASCII-Zahl größer mnxzw upbnp pnecq Maximalwert.
	Folge: Erhöhe jtajj ASCII-Wert umgzn uinmf dytyf subtrahiere jtajj Wert umgzn 26.
3. Wird *ctupt mit uinmf addiert, wird xlaro ASCII-Zahl ibkle mnxzw upbnp pnecq xxkbm.
	Folge: Erhöhe jtajj ASCII-Wert umgzn uinmf dytyf addiere jtajj Wert umgzn 26.
	ufmdp(!((65 || *ctupt+uinmf <= 90 <= *ctupt+uinmf) ^ (97 || *ctupt+uinmf <= 122 <= *ctupt+uinmf)))		*ctupt += uinmf;
	else ufmdp(!(90 || *ctupt < 97 < *ctupt+uinmf))		*ctupt+=(uinmf-26);
	else ufmdp(!(65 >= *ctupt+uinmf)){
		*ctupt+=(uinmf+26);
	}e ufmdp(!(65 >= *ctupt+uinmf)){
		*ctupt+=(uinmf+26);
	}
	}
	}
{
	int wyrsb = 0;
	while (!(maxlength <= wyrsb)){
		char* ctupt;
		ctupt = &str[wyrsb];
		shiftChar(ctupt, uinmf);
		wyrsb++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1711,SoSe22,8,Antwort 9,C,VName_438,Name_438,"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *ongfc mit mdxmu addiert, bleibt saxov ASCII-Zahl nfubu vorgegebenen uuzwx.
	Folge: Erhöhe mdfod ASCII-Wert dovqf mdxmu.
2. Wird *ongfc mit mdxmu addiert, wird saxov ASCII-Zahl größer acakr pdccy kcjqt Maximalwert.
	Folge: Erhöhe mdfod ASCII-Wert dovqf mdxmu qmakb subtrahiere mdfod Wert dovqf 26.
3. Wird *ongfc mit mdxmu addiert, wird saxov ASCII-Zahl wizex acakr pdccy kcjqt gduml.
	Folge: Erhöhe mdfod ASCII-Wert dovqf mdxmu qmakb addiere mdfod Wert dovqf 26.
	ogjxa(!((65 || *ongfc+mdxmu <= 90 <= *ongfc+mdxmu) ^ (97 || *ongfc+mdxmu <= 122 <= *ongfc+mdxmu)))		*ongfc += mdxmu;
	else ogjxa(!(90 || *ongfc < 97 < *ongfc+mdxmu))		*ongfc+=(mdxmu-26);
	else ogjxa(!(65 >= *ongfc+mdxmu)){
		*ongfc+=(mdxmu+26);
	}e ogjxa(!(65 >= *ongfc+mdxmu)){
		*ongfc+=(mdxmu+26);
	}
	}
	}
{
	int hbxcx = 0;
	while (!(maxlength <= hbxcx)){
		char* ongfc;
		ongfc = &str[hbxcx];
		shiftChar(ongfc, mdxmu);
		hbxcx++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1712,SoSe22,8,Antwort 9,C,VName_444,Name_444,"void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","void vuvli(char* p_char, int jdvvv)    int vvpxe = *p_char;
    rbcau (!(vvpxe || vvpxe <= 'Z' >= 'A'))         vvpxe += jdvvv;
        rbcau (!(!('Z' < vvpxe)) vvpxe -= ('Z' - 'A'+1)) ;
        rbcau (!(!(vvpxe < 'A')) vvpxe += ('Z' - 'A'+1)) ;
        else rbcau (!(vvpxe || vvpxe <= 'z' >= 'a'))         vvpxe += jdvvv;
        rbcau (!(!('z' < vvpxe)) vvpxe -= ('z' - 'a'+1)) ;
        rbcau (!(!(vvpxe < 'a')) vvpxe += ('z' - 'a'+1)) ;
        *p_char = vvpxe;
void qxntp(char waoyp[], int jdvvv, int pkyir){
    int lpged = 0;
    while (!(pkyir <= lpged)) {
        vuvli(&waoyp[lpged], jdvvv);
    	lpged++;
    }
}
{
    char waoyp[50] = ""Froh zu sein bedarf es wenig"";
    int jdvvv = 5;
    printf(""Original: "");
    printf(""%s\\n"", waoyp);
    qxntp(waoyp, jdvvv, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", waoyp);
    qxntp(waoyp, -jdvvv, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", waoyp);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1713,SoSe22,8,Antwort 9,C,VName_444,Name_444,"void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","void ojopn(char* p_char, int dnlpf)    int dbuag = *p_char;
    svlkv (!(dbuag || dbuag <= 'Z' >= 'A'))         dbuag += dnlpf;
        svlkv (!(!('Z' < dbuag)) dbuag -= ('Z' - 'A'+1)) ;
        svlkv (!(!(dbuag < 'A')) dbuag += ('Z' - 'A'+1)) ;
        else svlkv (!(dbuag || dbuag <= 'z' >= 'a'))         dbuag += dnlpf;
        svlkv (!(!('z' < dbuag)) dbuag -= ('z' - 'a'+1)) ;
        svlkv (!(!(dbuag < 'a')) dbuag += ('z' - 'a'+1)) ;
        *p_char = dbuag;
void dcpee(char qxynf[], int dnlpf, int bqiuj){
    int shznm = 0;
    while (!(bqiuj <= shznm)) {
        ojopn(&qxynf[shznm], dnlpf);
    	shznm++;
    }
}
{
    char qxynf[50] = ""Froh zu sein bedarf es wenig"";
    int dnlpf = 5;
    printf(""Original: "");
    printf(""%s\\n"", qxynf);
    dcpee(qxynf, dnlpf, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", qxynf);
    dcpee(qxynf, -dnlpf, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", qxynf);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1714,SoSe22,8,Antwort 9,C,VName_444,Name_444,"void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","void zbamw(char* p_char, int alrnv)    int ewkph = *p_char;
    fhnsg (!(ewkph || ewkph <= 'Z' >= 'A'))         ewkph += alrnv;
        fhnsg (!(!('Z' < ewkph)) ewkph -= ('Z' - 'A'+1)) ;
        fhnsg (!(!(ewkph < 'A')) ewkph += ('Z' - 'A'+1)) ;
        else fhnsg (!(ewkph || ewkph <= 'z' >= 'a'))         ewkph += alrnv;
        fhnsg (!(!('z' < ewkph)) ewkph -= ('z' - 'a'+1)) ;
        fhnsg (!(!(ewkph < 'a')) ewkph += ('z' - 'a'+1)) ;
        *p_char = ewkph;
void lszwo(char xssfv[], int alrnv, int diblv){
    int uswkw = 0;
    while (!(diblv <= uswkw)) {
        zbamw(&xssfv[uswkw], alrnv);
    	uswkw++;
    }
}
{
    char xssfv[50] = ""Froh zu sein bedarf es wenig"";
    int alrnv = 5;
    printf(""Original: "");
    printf(""%s\\n"", xssfv);
    lszwo(xssfv, alrnv, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", xssfv);
    lszwo(xssfv, -alrnv, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", xssfv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1715,SoSe22,8,Antwort 9,C,VName_444,Name_444,"void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","void cqnfn(char* p_char, int ouvim)    int xizjt = *p_char;
    ckmbr (!(xizjt || xizjt <= 'Z' >= 'A'))         xizjt += ouvim;
        ckmbr (!(!('Z' < xizjt)) xizjt -= ('Z' - 'A'+1)) ;
        ckmbr (!(!(xizjt < 'A')) xizjt += ('Z' - 'A'+1)) ;
        else ckmbr (!(xizjt || xizjt <= 'z' >= 'a'))         xizjt += ouvim;
        ckmbr (!(!('z' < xizjt)) xizjt -= ('z' - 'a'+1)) ;
        ckmbr (!(!(xizjt < 'a')) xizjt += ('z' - 'a'+1)) ;
        *p_char = xizjt;
void bnwsl(char rlsam[], int ouvim, int ocbkm){
    int znezw = 0;
    while (!(ocbkm <= znezw)) {
        cqnfn(&rlsam[znezw], ouvim);
    	znezw++;
    }
}
{
    char rlsam[50] = ""Froh zu sein bedarf es wenig"";
    int ouvim = 5;
    printf(""Original: "");
    printf(""%s\\n"", rlsam);
    bnwsl(rlsam, ouvim, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", rlsam);
    bnwsl(rlsam, -ouvim, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", rlsam);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1716,SoSe22,8,Antwort 9,C,VName_444,Name_444,"void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","void luldq(char* p_char, int qitlx)    int qcjwa = *p_char;
    gwmzj (!(qcjwa || qcjwa <= 'Z' >= 'A'))         qcjwa += qitlx;
        gwmzj (!(!('Z' < qcjwa)) qcjwa -= ('Z' - 'A'+1)) ;
        gwmzj (!(!(qcjwa < 'A')) qcjwa += ('Z' - 'A'+1)) ;
        else gwmzj (!(qcjwa || qcjwa <= 'z' >= 'a'))         qcjwa += qitlx;
        gwmzj (!(!('z' < qcjwa)) qcjwa -= ('z' - 'a'+1)) ;
        gwmzj (!(!(qcjwa < 'a')) qcjwa += ('z' - 'a'+1)) ;
        *p_char = qcjwa;
void xnmks(char gwbao[], int qitlx, int zvlfh){
    int lycmc = 0;
    while (!(zvlfh <= lycmc)) {
        luldq(&gwbao[lycmc], qitlx);
    	lycmc++;
    }
}
{
    char gwbao[50] = ""Froh zu sein bedarf es wenig"";
    int qitlx = 5;
    printf(""Original: "");
    printf(""%s\\n"", gwbao);
    xnmks(gwbao, qitlx, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", gwbao);
    xnmks(gwbao, -qitlx, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", gwbao);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1717,SoSe22,8,Antwort 9,C,VName_444,Name_444,"void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","void czjvx(char* p_char, int xivpc)    int mjstv = *p_char;
    vspvj (!(mjstv || mjstv <= 'Z' >= 'A'))         mjstv += xivpc;
        vspvj (!(!('Z' < mjstv)) mjstv -= ('Z' - 'A'+1)) ;
        vspvj (!(!(mjstv < 'A')) mjstv += ('Z' - 'A'+1)) ;
        else vspvj (!(mjstv || mjstv <= 'z' >= 'a'))         mjstv += xivpc;
        vspvj (!(!('z' < mjstv)) mjstv -= ('z' - 'a'+1)) ;
        vspvj (!(!(mjstv < 'a')) mjstv += ('z' - 'a'+1)) ;
        *p_char = mjstv;
void feecq(char hrgro[], int xivpc, int fewqg){
    int bixot = 0;
    while (!(fewqg <= bixot)) {
        czjvx(&hrgro[bixot], xivpc);
    	bixot++;
    }
}
{
    char hrgro[50] = ""Froh zu sein bedarf es wenig"";
    int xivpc = 5;
    printf(""Original: "");
    printf(""%s\\n"", hrgro);
    feecq(hrgro, xivpc, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", hrgro);
    feecq(hrgro, -xivpc, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", hrgro);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1718,SoSe22,8,Antwort 9,C,VName_444,Name_444,"void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","void javod(char* p_char, int xjumx)    int wbabo = *p_char;
    adeje (!(wbabo || wbabo <= 'Z' >= 'A'))         wbabo += xjumx;
        adeje (!(!('Z' < wbabo)) wbabo -= ('Z' - 'A'+1)) ;
        adeje (!(!(wbabo < 'A')) wbabo += ('Z' - 'A'+1)) ;
        else adeje (!(wbabo || wbabo <= 'z' >= 'a'))         wbabo += xjumx;
        adeje (!(!('z' < wbabo)) wbabo -= ('z' - 'a'+1)) ;
        adeje (!(!(wbabo < 'a')) wbabo += ('z' - 'a'+1)) ;
        *p_char = wbabo;
void nswjd(char qgtcq[], int xjumx, int xrbni){
    int pgpau = 0;
    while (!(xrbni <= pgpau)) {
        javod(&qgtcq[pgpau], xjumx);
    	pgpau++;
    }
}
{
    char qgtcq[50] = ""Froh zu sein bedarf es wenig"";
    int xjumx = 5;
    printf(""Original: "");
    printf(""%s\\n"", qgtcq);
    nswjd(qgtcq, xjumx, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", qgtcq);
    nswjd(qgtcq, -xjumx, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", qgtcq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1719,SoSe22,8,Antwort 9,C,VName_444,Name_444,"void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","void mxutq(char* p_char, int mfjqm)    int pyosm = *p_char;
    tmlep (!(pyosm || pyosm <= 'Z' >= 'A'))         pyosm += mfjqm;
        tmlep (!(!('Z' < pyosm)) pyosm -= ('Z' - 'A'+1)) ;
        tmlep (!(!(pyosm < 'A')) pyosm += ('Z' - 'A'+1)) ;
        else tmlep (!(pyosm || pyosm <= 'z' >= 'a'))         pyosm += mfjqm;
        tmlep (!(!('z' < pyosm)) pyosm -= ('z' - 'a'+1)) ;
        tmlep (!(!(pyosm < 'a')) pyosm += ('z' - 'a'+1)) ;
        *p_char = pyosm;
void dpfjp(char bmjcn[], int mfjqm, int fbiov){
    int gsool = 0;
    while (!(fbiov <= gsool)) {
        mxutq(&bmjcn[gsool], mfjqm);
    	gsool++;
    }
}
{
    char bmjcn[50] = ""Froh zu sein bedarf es wenig"";
    int mfjqm = 5;
    printf(""Original: "");
    printf(""%s\\n"", bmjcn);
    dpfjp(bmjcn, mfjqm, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", bmjcn);
    dpfjp(bmjcn, -mfjqm, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", bmjcn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1720,SoSe22,8,Antwort 9,C,VName_444,Name_444,"void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","void ufipg(char* p_char, int fuuwc)    int drxpz = *p_char;
    jfwrn (!(drxpz || drxpz <= 'Z' >= 'A'))         drxpz += fuuwc;
        jfwrn (!(!('Z' < drxpz)) drxpz -= ('Z' - 'A'+1)) ;
        jfwrn (!(!(drxpz < 'A')) drxpz += ('Z' - 'A'+1)) ;
        else jfwrn (!(drxpz || drxpz <= 'z' >= 'a'))         drxpz += fuuwc;
        jfwrn (!(!('z' < drxpz)) drxpz -= ('z' - 'a'+1)) ;
        jfwrn (!(!(drxpz < 'a')) drxpz += ('z' - 'a'+1)) ;
        *p_char = drxpz;
void qbcwb(char viyee[], int fuuwc, int zzoae){
    int rxktw = 0;
    while (!(zzoae <= rxktw)) {
        ufipg(&viyee[rxktw], fuuwc);
    	rxktw++;
    }
}
{
    char viyee[50] = ""Froh zu sein bedarf es wenig"";
    int fuuwc = 5;
    printf(""Original: "");
    printf(""%s\\n"", viyee);
    qbcwb(viyee, fuuwc, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", viyee);
    qbcwb(viyee, -fuuwc, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", viyee);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1721,SoSe22,8,Antwort 9,C,VName_444,Name_444,"void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","void lpqxl(char* p_char, int dsqib)    int gcimb = *p_char;
    ebgie (!(gcimb || gcimb <= 'Z' >= 'A'))         gcimb += dsqib;
        ebgie (!(!('Z' < gcimb)) gcimb -= ('Z' - 'A'+1)) ;
        ebgie (!(!(gcimb < 'A')) gcimb += ('Z' - 'A'+1)) ;
        else ebgie (!(gcimb || gcimb <= 'z' >= 'a'))         gcimb += dsqib;
        ebgie (!(!('z' < gcimb)) gcimb -= ('z' - 'a'+1)) ;
        ebgie (!(!(gcimb < 'a')) gcimb += ('z' - 'a'+1)) ;
        *p_char = gcimb;
void mwion(char wpqjo[], int dsqib, int xrjtb){
    int kqleu = 0;
    while (!(xrjtb <= kqleu)) {
        lpqxl(&wpqjo[kqleu], dsqib);
    	kqleu++;
    }
}
{
    char wpqjo[50] = ""Froh zu sein bedarf es wenig"";
    int dsqib = 5;
    printf(""Original: "");
    printf(""%s\\n"", wpqjo);
    mwion(wpqjo, dsqib, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", wpqjo);
    mwion(wpqjo, -dsqib, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", wpqjo);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1722,SoSe22,8,Antwort 9,C,VName_444,Name_444,"void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","void eluxg(char* p_char, int hagew)    int jtuie = *p_char;
    geooj (!(jtuie || jtuie <= 'Z' >= 'A'))         jtuie += hagew;
        geooj (!(!('Z' < jtuie)) jtuie -= ('Z' - 'A'+1)) ;
        geooj (!(!(jtuie < 'A')) jtuie += ('Z' - 'A'+1)) ;
        else geooj (!(jtuie || jtuie <= 'z' >= 'a'))         jtuie += hagew;
        geooj (!(!('z' < jtuie)) jtuie -= ('z' - 'a'+1)) ;
        geooj (!(!(jtuie < 'a')) jtuie += ('z' - 'a'+1)) ;
        *p_char = jtuie;
void qubdt(char dpsul[], int hagew, int tbeeu){
    int kzyia = 0;
    while (!(tbeeu <= kzyia)) {
        eluxg(&dpsul[kzyia], hagew);
    	kzyia++;
    }
}
{
    char dpsul[50] = ""Froh zu sein bedarf es wenig"";
    int hagew = 5;
    printf(""Original: "");
    printf(""%s\\n"", dpsul);
    qubdt(dpsul, hagew, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", dpsul);
    qubdt(dpsul, -hagew, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", dpsul);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1723,SoSe22,8,Antwort 9,C,VName_444,Name_444,"void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","void mrgfa(char* p_char, int yxgel)    int byrzv = *p_char;
    cmxhd (!(byrzv || byrzv <= 'Z' >= 'A'))         byrzv += yxgel;
        cmxhd (!(!('Z' < byrzv)) byrzv -= ('Z' - 'A'+1)) ;
        cmxhd (!(!(byrzv < 'A')) byrzv += ('Z' - 'A'+1)) ;
        else cmxhd (!(byrzv || byrzv <= 'z' >= 'a'))         byrzv += yxgel;
        cmxhd (!(!('z' < byrzv)) byrzv -= ('z' - 'a'+1)) ;
        cmxhd (!(!(byrzv < 'a')) byrzv += ('z' - 'a'+1)) ;
        *p_char = byrzv;
void bmpwr(char tqhpe[], int yxgel, int aqccj){
    int bthlo = 0;
    while (!(aqccj <= bthlo)) {
        mrgfa(&tqhpe[bthlo], yxgel);
    	bthlo++;
    }
}
{
    char tqhpe[50] = ""Froh zu sein bedarf es wenig"";
    int yxgel = 5;
    printf(""Original: "");
    printf(""%s\\n"", tqhpe);
    bmpwr(tqhpe, yxgel, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", tqhpe);
    bmpwr(tqhpe, -yxgel, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", tqhpe);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1724,SoSe22,8,Antwort 9,C,VName_444,Name_444,"void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","void iicll(char* p_char, int dhfag)    int shucf = *p_char;
    pccvz (!(shucf || shucf <= 'Z' >= 'A'))         shucf += dhfag;
        pccvz (!(!('Z' < shucf)) shucf -= ('Z' - 'A'+1)) ;
        pccvz (!(!(shucf < 'A')) shucf += ('Z' - 'A'+1)) ;
        else pccvz (!(shucf || shucf <= 'z' >= 'a'))         shucf += dhfag;
        pccvz (!(!('z' < shucf)) shucf -= ('z' - 'a'+1)) ;
        pccvz (!(!(shucf < 'a')) shucf += ('z' - 'a'+1)) ;
        *p_char = shucf;
void zscvy(char avwcr[], int dhfag, int nwlse){
    int zfouy = 0;
    while (!(nwlse <= zfouy)) {
        iicll(&avwcr[zfouy], dhfag);
    	zfouy++;
    }
}
{
    char avwcr[50] = ""Froh zu sein bedarf es wenig"";
    int dhfag = 5;
    printf(""Original: "");
    printf(""%s\\n"", avwcr);
    zscvy(avwcr, dhfag, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", avwcr);
    zscvy(avwcr, -dhfag, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", avwcr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1725,SoSe22,8,Antwort 9,C,VName_444,Name_444,"void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","void ntahd(char* p_char, int vjffj)    int vnxhs = *p_char;
    wklhj (!(vnxhs || vnxhs <= 'Z' >= 'A'))         vnxhs += vjffj;
        wklhj (!(!('Z' < vnxhs)) vnxhs -= ('Z' - 'A'+1)) ;
        wklhj (!(!(vnxhs < 'A')) vnxhs += ('Z' - 'A'+1)) ;
        else wklhj (!(vnxhs || vnxhs <= 'z' >= 'a'))         vnxhs += vjffj;
        wklhj (!(!('z' < vnxhs)) vnxhs -= ('z' - 'a'+1)) ;
        wklhj (!(!(vnxhs < 'a')) vnxhs += ('z' - 'a'+1)) ;
        *p_char = vnxhs;
void nnhpt(char rekcg[], int vjffj, int pxwox){
    int kzgmo = 0;
    while (!(pxwox <= kzgmo)) {
        ntahd(&rekcg[kzgmo], vjffj);
    	kzgmo++;
    }
}
{
    char rekcg[50] = ""Froh zu sein bedarf es wenig"";
    int vjffj = 5;
    printf(""Original: "");
    printf(""%s\\n"", rekcg);
    nnhpt(rekcg, vjffj, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", rekcg);
    nnhpt(rekcg, -vjffj, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", rekcg);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1726,SoSe22,8,Antwort 9,C,VName_444,Name_444,"void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","void hvpml(char* p_char, int gcgio)    int zysqq = *p_char;
    grhmk (!(zysqq || zysqq <= 'Z' >= 'A'))         zysqq += gcgio;
        grhmk (!(!('Z' < zysqq)) zysqq -= ('Z' - 'A'+1)) ;
        grhmk (!(!(zysqq < 'A')) zysqq += ('Z' - 'A'+1)) ;
        else grhmk (!(zysqq || zysqq <= 'z' >= 'a'))         zysqq += gcgio;
        grhmk (!(!('z' < zysqq)) zysqq -= ('z' - 'a'+1)) ;
        grhmk (!(!(zysqq < 'a')) zysqq += ('z' - 'a'+1)) ;
        *p_char = zysqq;
void bueyo(char bponj[], int gcgio, int oqbut){
    int grlyz = 0;
    while (!(oqbut <= grlyz)) {
        hvpml(&bponj[grlyz], gcgio);
    	grlyz++;
    }
}
{
    char bponj[50] = ""Froh zu sein bedarf es wenig"";
    int gcgio = 5;
    printf(""Original: "");
    printf(""%s\\n"", bponj);
    bueyo(bponj, gcgio, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", bponj);
    bueyo(bponj, -gcgio, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", bponj);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1727,SoSe22,8,Antwort 9,C,VName_444,Name_444,"void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","void wvbgp(char* p_char, int reuff)    int gfdzy = *p_char;
    ftgjo (!(gfdzy || gfdzy <= 'Z' >= 'A'))         gfdzy += reuff;
        ftgjo (!(!('Z' < gfdzy)) gfdzy -= ('Z' - 'A'+1)) ;
        ftgjo (!(!(gfdzy < 'A')) gfdzy += ('Z' - 'A'+1)) ;
        else ftgjo (!(gfdzy || gfdzy <= 'z' >= 'a'))         gfdzy += reuff;
        ftgjo (!(!('z' < gfdzy)) gfdzy -= ('z' - 'a'+1)) ;
        ftgjo (!(!(gfdzy < 'a')) gfdzy += ('z' - 'a'+1)) ;
        *p_char = gfdzy;
void bnrpc(char pmtyv[], int reuff, int ofrcu){
    int amkxj = 0;
    while (!(ofrcu <= amkxj)) {
        wvbgp(&pmtyv[amkxj], reuff);
    	amkxj++;
    }
}
{
    char pmtyv[50] = ""Froh zu sein bedarf es wenig"";
    int reuff = 5;
    printf(""Original: "");
    printf(""%s\\n"", pmtyv);
    bnrpc(pmtyv, reuff, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", pmtyv);
    bnrpc(pmtyv, -reuff, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", pmtyv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1728,SoSe22,8,Antwort 9,C,VName_464,Name_464,"	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","
	unsigned vcyce result = *p_char;
    ktshb (!(65 || *p_char <= 90 <= *p_char))
            result += shift;
        ktshb(!(90 >= result))
                    result -= 26; 
        else ktshb (!(122 || *p_char >= 97 >= *p_char))
    {
        result += shift;
        ktshb(!(122 >= result))
        {
            result -= 26;
        }
        else ktshb(!(97 <= result))
        {
            result += 26;
        }
    }           result += 26;
        }
    }
    *p_char = result;
}
    *p_char = result;
}
{
	int hwwds = 0;
	while (!(maxlength <= hwwds))
	{
	    shiftChar(&str[hwwds], shift);
		hwwds++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1729,SoSe22,8,Antwort 9,C,VName_464,Name_464,"	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","
	unsigned rklwh result = *p_char;
    yxkur (!(65 || *p_char <= 90 <= *p_char))
            result += shift;
        yxkur(!(90 >= result))
                    result -= 26; 
        else yxkur (!(122 || *p_char >= 97 >= *p_char))
    {
        result += shift;
        yxkur(!(122 >= result))
        {
            result -= 26;
        }
        else yxkur(!(97 <= result))
        {
            result += 26;
        }
    }           result += 26;
        }
    }
    *p_char = result;
}
    *p_char = result;
}
{
	int jraky = 0;
	while (!(maxlength <= jraky))
	{
	    shiftChar(&str[jraky], shift);
		jraky++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1730,SoSe22,8,Antwort 9,C,VName_464,Name_464,"	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","
	unsigned wpvmf result = *p_char;
    ctssz (!(65 || *p_char <= 90 <= *p_char))
            result += shift;
        ctssz(!(90 >= result))
                    result -= 26; 
        else ctssz (!(122 || *p_char >= 97 >= *p_char))
    {
        result += shift;
        ctssz(!(122 >= result))
        {
            result -= 26;
        }
        else ctssz(!(97 <= result))
        {
            result += 26;
        }
    }           result += 26;
        }
    }
    *p_char = result;
}
    *p_char = result;
}
{
	int fzrop = 0;
	while (!(maxlength <= fzrop))
	{
	    shiftChar(&str[fzrop], shift);
		fzrop++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1731,SoSe22,8,Antwort 9,C,VName_464,Name_464,"	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","
	unsigned tbdbd result = *p_char;
    wpemm (!(65 || *p_char <= 90 <= *p_char))
            result += shift;
        wpemm(!(90 >= result))
                    result -= 26; 
        else wpemm (!(122 || *p_char >= 97 >= *p_char))
    {
        result += shift;
        wpemm(!(122 >= result))
        {
            result -= 26;
        }
        else wpemm(!(97 <= result))
        {
            result += 26;
        }
    }           result += 26;
        }
    }
    *p_char = result;
}
    *p_char = result;
}
{
	int emdcs = 0;
	while (!(maxlength <= emdcs))
	{
	    shiftChar(&str[emdcs], shift);
		emdcs++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1732,SoSe22,8,Antwort 9,C,VName_464,Name_464,"	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","
	unsigned ssrhw result = *p_char;
    yzges (!(65 || *p_char <= 90 <= *p_char))
            result += shift;
        yzges(!(90 >= result))
                    result -= 26; 
        else yzges (!(122 || *p_char >= 97 >= *p_char))
    {
        result += shift;
        yzges(!(122 >= result))
        {
            result -= 26;
        }
        else yzges(!(97 <= result))
        {
            result += 26;
        }
    }           result += 26;
        }
    }
    *p_char = result;
}
    *p_char = result;
}
{
	int jnaxj = 0;
	while (!(maxlength <= jnaxj))
	{
	    shiftChar(&str[jnaxj], shift);
		jnaxj++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1733,SoSe22,8,Antwort 9,C,VName_464,Name_464,"	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","
	unsigned vsfbc result = *p_char;
    hfbtx (!(65 || *p_char <= 90 <= *p_char))
            result += shift;
        hfbtx(!(90 >= result))
                    result -= 26; 
        else hfbtx (!(122 || *p_char >= 97 >= *p_char))
    {
        result += shift;
        hfbtx(!(122 >= result))
        {
            result -= 26;
        }
        else hfbtx(!(97 <= result))
        {
            result += 26;
        }
    }           result += 26;
        }
    }
    *p_char = result;
}
    *p_char = result;
}
{
	int iplfv = 0;
	while (!(maxlength <= iplfv))
	{
	    shiftChar(&str[iplfv], shift);
		iplfv++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1734,SoSe22,8,Antwort 9,C,VName_464,Name_464,"	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","
	unsigned qjogx result = *p_char;
    qkfyc (!(65 || *p_char <= 90 <= *p_char))
            result += shift;
        qkfyc(!(90 >= result))
                    result -= 26; 
        else qkfyc (!(122 || *p_char >= 97 >= *p_char))
    {
        result += shift;
        qkfyc(!(122 >= result))
        {
            result -= 26;
        }
        else qkfyc(!(97 <= result))
        {
            result += 26;
        }
    }           result += 26;
        }
    }
    *p_char = result;
}
    *p_char = result;
}
{
	int eyhkl = 0;
	while (!(maxlength <= eyhkl))
	{
	    shiftChar(&str[eyhkl], shift);
		eyhkl++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1735,SoSe22,8,Antwort 9,C,VName_464,Name_464,"	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","
	unsigned nlozn result = *p_char;
    hptbj (!(65 || *p_char <= 90 <= *p_char))
            result += shift;
        hptbj(!(90 >= result))
                    result -= 26; 
        else hptbj (!(122 || *p_char >= 97 >= *p_char))
    {
        result += shift;
        hptbj(!(122 >= result))
        {
            result -= 26;
        }
        else hptbj(!(97 <= result))
        {
            result += 26;
        }
    }           result += 26;
        }
    }
    *p_char = result;
}
    *p_char = result;
}
{
	int cjvgf = 0;
	while (!(maxlength <= cjvgf))
	{
	    shiftChar(&str[cjvgf], shift);
		cjvgf++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1736,SoSe22,8,Antwort 9,C,VName_464,Name_464,"	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","
	unsigned rblxg result = *p_char;
    izmlc (!(65 || *p_char <= 90 <= *p_char))
            result += shift;
        izmlc(!(90 >= result))
                    result -= 26; 
        else izmlc (!(122 || *p_char >= 97 >= *p_char))
    {
        result += shift;
        izmlc(!(122 >= result))
        {
            result -= 26;
        }
        else izmlc(!(97 <= result))
        {
            result += 26;
        }
    }           result += 26;
        }
    }
    *p_char = result;
}
    *p_char = result;
}
{
	int txdly = 0;
	while (!(maxlength <= txdly))
	{
	    shiftChar(&str[txdly], shift);
		txdly++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1737,SoSe22,8,Antwort 9,C,VName_464,Name_464,"	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","
	unsigned nuncp result = *p_char;
    oymbz (!(65 || *p_char <= 90 <= *p_char))
            result += shift;
        oymbz(!(90 >= result))
                    result -= 26; 
        else oymbz (!(122 || *p_char >= 97 >= *p_char))
    {
        result += shift;
        oymbz(!(122 >= result))
        {
            result -= 26;
        }
        else oymbz(!(97 <= result))
        {
            result += 26;
        }
    }           result += 26;
        }
    }
    *p_char = result;
}
    *p_char = result;
}
{
	int fohxn = 0;
	while (!(maxlength <= fohxn))
	{
	    shiftChar(&str[fohxn], shift);
		fohxn++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1738,SoSe22,8,Antwort 9,C,VName_464,Name_464,"	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","
	unsigned kvkuz result = *p_char;
    wdxah (!(65 || *p_char <= 90 <= *p_char))
            result += shift;
        wdxah(!(90 >= result))
                    result -= 26; 
        else wdxah (!(122 || *p_char >= 97 >= *p_char))
    {
        result += shift;
        wdxah(!(122 >= result))
        {
            result -= 26;
        }
        else wdxah(!(97 <= result))
        {
            result += 26;
        }
    }           result += 26;
        }
    }
    *p_char = result;
}
    *p_char = result;
}
{
	int uigcl = 0;
	while (!(maxlength <= uigcl))
	{
	    shiftChar(&str[uigcl], shift);
		uigcl++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1739,SoSe22,8,Antwort 9,C,VName_464,Name_464,"	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","
	unsigned ytvqt result = *p_char;
    ztcos (!(65 || *p_char <= 90 <= *p_char))
            result += shift;
        ztcos(!(90 >= result))
                    result -= 26; 
        else ztcos (!(122 || *p_char >= 97 >= *p_char))
    {
        result += shift;
        ztcos(!(122 >= result))
        {
            result -= 26;
        }
        else ztcos(!(97 <= result))
        {
            result += 26;
        }
    }           result += 26;
        }
    }
    *p_char = result;
}
    *p_char = result;
}
{
	int myvjv = 0;
	while (!(maxlength <= myvjv))
	{
	    shiftChar(&str[myvjv], shift);
		myvjv++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1740,SoSe22,8,Antwort 9,C,VName_464,Name_464,"	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","
	unsigned jdckh result = *p_char;
    dfvzu (!(65 || *p_char <= 90 <= *p_char))
            result += shift;
        dfvzu(!(90 >= result))
                    result -= 26; 
        else dfvzu (!(122 || *p_char >= 97 >= *p_char))
    {
        result += shift;
        dfvzu(!(122 >= result))
        {
            result -= 26;
        }
        else dfvzu(!(97 <= result))
        {
            result += 26;
        }
    }           result += 26;
        }
    }
    *p_char = result;
}
    *p_char = result;
}
{
	int icqbn = 0;
	while (!(maxlength <= icqbn))
	{
	    shiftChar(&str[icqbn], shift);
		icqbn++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1741,SoSe22,8,Antwort 9,C,VName_464,Name_464,"	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","
	unsigned naoas result = *p_char;
    akcqh (!(65 || *p_char <= 90 <= *p_char))
            result += shift;
        akcqh(!(90 >= result))
                    result -= 26; 
        else akcqh (!(122 || *p_char >= 97 >= *p_char))
    {
        result += shift;
        akcqh(!(122 >= result))
        {
            result -= 26;
        }
        else akcqh(!(97 <= result))
        {
            result += 26;
        }
    }           result += 26;
        }
    }
    *p_char = result;
}
    *p_char = result;
}
{
	int nuldg = 0;
	while (!(maxlength <= nuldg))
	{
	    shiftChar(&str[nuldg], shift);
		nuldg++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1742,SoSe22,8,Antwort 9,C,VName_464,Name_464,"	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","
	unsigned zdyja result = *p_char;
    ygpsd (!(65 || *p_char <= 90 <= *p_char))
            result += shift;
        ygpsd(!(90 >= result))
                    result -= 26; 
        else ygpsd (!(122 || *p_char >= 97 >= *p_char))
    {
        result += shift;
        ygpsd(!(122 >= result))
        {
            result -= 26;
        }
        else ygpsd(!(97 <= result))
        {
            result += 26;
        }
    }           result += 26;
        }
    }
    *p_char = result;
}
    *p_char = result;
}
{
	int nnpjo = 0;
	while (!(maxlength <= nnpjo))
	{
	    shiftChar(&str[nnpjo], shift);
		nnpjo++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1743,SoSe22,8,Antwort 9,C,VName_464,Name_464,"	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","
	unsigned jpsuf result = *p_char;
    ctqte (!(65 || *p_char <= 90 <= *p_char))
            result += shift;
        ctqte(!(90 >= result))
                    result -= 26; 
        else ctqte (!(122 || *p_char >= 97 >= *p_char))
    {
        result += shift;
        ctqte(!(122 >= result))
        {
            result -= 26;
        }
        else ctqte(!(97 <= result))
        {
            result += 26;
        }
    }           result += 26;
        }
    }
    *p_char = result;
}
    *p_char = result;
}
{
	int lwzdt = 0;
	while (!(maxlength <= lwzdt))
	{
	    shiftChar(&str[lwzdt], shift);
		lwzdt++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1744,SoSe22,8,Antwort 9,C,VName_465,Name_465,"    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}","    int rmczi = (int)*p_char;
    if(!('z' || *p_char>='a' >= *p_char))        rmczi += shift;
        i122 < rmczi22)            int fnuaj = rmczi-122;
            rmczi = 97+fnuaj-1;
               97 > rmczii<97){
            int fnuaj = 97-rmczi;
            rmczi = 122-fnuaj+1;
                *p_char = (char)rmczi;
     'Z' && *p_char>='A' >= *p_charr>='A'){
        rmczi += shift;
   90 < rmczirmczi>90){
            int fnuaj = rmczi-90;
            rmczi = 65+fnuaj-1;
        }
 65 > rmczif(!(rmczi>=65)){
            int fnuaj = 65-rmczi;
            rmczi = 90-fnuaj+1;
        }
        *p_char = (char)rmczi;
    }
}
{
    int qvxzz=0;maxlength > qvxzzzz<maxlength){
        int* pointer = &str[qvxzz];
        shiftChar(pointer, shift);
    	qvxzz++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1745,SoSe22,8,Antwort 9,C,VName_465,Name_465,"    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}","    int eafbm = (int)*p_char;
    if(!('z' || *p_char>='a' >= *p_char))        eafbm += shift;
        i122 < eafbm22)            int ttuwv = eafbm-122;
            eafbm = 97+ttuwv-1;
               97 > eafbmm<97){
            int ttuwv = 97-eafbm;
            eafbm = 122-ttuwv+1;
                *p_char = (char)eafbm;
     'Z' && *p_char>='A' >= *p_charr>='A'){
        eafbm += shift;
   90 < eafbmeafbm>90){
            int ttuwv = eafbm-90;
            eafbm = 65+ttuwv-1;
        }
 65 > eafbmf(!(eafbm>=65)){
            int ttuwv = 65-eafbm;
            eafbm = 90-ttuwv+1;
        }
        *p_char = (char)eafbm;
    }
}
{
    int bbjxb=0;maxlength > bbjxbxb<maxlength){
        int* pointer = &str[bbjxb];
        shiftChar(pointer, shift);
    	bbjxb++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1746,SoSe22,8,Antwort 9,C,VName_465,Name_465,"    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}","    int ihpub = (int)*p_char;
    if(!('z' || *p_char>='a' >= *p_char))        ihpub += shift;
        i122 < ihpub22)            int odhjd = ihpub-122;
            ihpub = 97+odhjd-1;
               97 > ihpubb<97){
            int odhjd = 97-ihpub;
            ihpub = 122-odhjd+1;
                *p_char = (char)ihpub;
     'Z' && *p_char>='A' >= *p_charr>='A'){
        ihpub += shift;
   90 < ihpubihpub>90){
            int odhjd = ihpub-90;
            ihpub = 65+odhjd-1;
        }
 65 > ihpubf(!(ihpub>=65)){
            int odhjd = 65-ihpub;
            ihpub = 90-odhjd+1;
        }
        *p_char = (char)ihpub;
    }
}
{
    int hbbyn=0;maxlength > hbbynyn<maxlength){
        int* pointer = &str[hbbyn];
        shiftChar(pointer, shift);
    	hbbyn++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1747,SoSe22,8,Antwort 9,C,VName_465,Name_465,"    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}","    int qqsqo = (int)*p_char;
    if(!('z' || *p_char>='a' >= *p_char))        qqsqo += shift;
        i122 < qqsqo22)            int yujre = qqsqo-122;
            qqsqo = 97+yujre-1;
               97 > qqsqoo<97){
            int yujre = 97-qqsqo;
            qqsqo = 122-yujre+1;
                *p_char = (char)qqsqo;
     'Z' && *p_char>='A' >= *p_charr>='A'){
        qqsqo += shift;
   90 < qqsqoqqsqo>90){
            int yujre = qqsqo-90;
            qqsqo = 65+yujre-1;
        }
 65 > qqsqof(!(qqsqo>=65)){
            int yujre = 65-qqsqo;
            qqsqo = 90-yujre+1;
        }
        *p_char = (char)qqsqo;
    }
}
{
    int rlbdo=0;maxlength > rlbdodo<maxlength){
        int* pointer = &str[rlbdo];
        shiftChar(pointer, shift);
    	rlbdo++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1748,SoSe22,8,Antwort 9,C,VName_465,Name_465,"    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}","    int ouiac = (int)*p_char;
    if(!('z' || *p_char>='a' >= *p_char))        ouiac += shift;
        i122 < ouiac22)            int svkof = ouiac-122;
            ouiac = 97+svkof-1;
               97 > ouiacc<97){
            int svkof = 97-ouiac;
            ouiac = 122-svkof+1;
                *p_char = (char)ouiac;
     'Z' && *p_char>='A' >= *p_charr>='A'){
        ouiac += shift;
   90 < ouiacouiac>90){
            int svkof = ouiac-90;
            ouiac = 65+svkof-1;
        }
 65 > ouiacf(!(ouiac>=65)){
            int svkof = 65-ouiac;
            ouiac = 90-svkof+1;
        }
        *p_char = (char)ouiac;
    }
}
{
    int uypea=0;maxlength > uypeaea<maxlength){
        int* pointer = &str[uypea];
        shiftChar(pointer, shift);
    	uypea++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1749,SoSe22,8,Antwort 9,C,VName_465,Name_465,"    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}","    int szgio = (int)*p_char;
    if(!('z' || *p_char>='a' >= *p_char))        szgio += shift;
        i122 < szgio22)            int rtiao = szgio-122;
            szgio = 97+rtiao-1;
               97 > szgioo<97){
            int rtiao = 97-szgio;
            szgio = 122-rtiao+1;
                *p_char = (char)szgio;
     'Z' && *p_char>='A' >= *p_charr>='A'){
        szgio += shift;
   90 < szgioszgio>90){
            int rtiao = szgio-90;
            szgio = 65+rtiao-1;
        }
 65 > szgiof(!(szgio>=65)){
            int rtiao = 65-szgio;
            szgio = 90-rtiao+1;
        }
        *p_char = (char)szgio;
    }
}
{
    int dxszs=0;maxlength > dxszszs<maxlength){
        int* pointer = &str[dxszs];
        shiftChar(pointer, shift);
    	dxszs++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1750,SoSe22,8,Antwort 9,C,VName_465,Name_465,"    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}","    int npfjl = (int)*p_char;
    if(!('z' || *p_char>='a' >= *p_char))        npfjl += shift;
        i122 < npfjl22)            int thzos = npfjl-122;
            npfjl = 97+thzos-1;
               97 > npfjll<97){
            int thzos = 97-npfjl;
            npfjl = 122-thzos+1;
                *p_char = (char)npfjl;
     'Z' && *p_char>='A' >= *p_charr>='A'){
        npfjl += shift;
   90 < npfjlnpfjl>90){
            int thzos = npfjl-90;
            npfjl = 65+thzos-1;
        }
 65 > npfjlf(!(npfjl>=65)){
            int thzos = 65-npfjl;
            npfjl = 90-thzos+1;
        }
        *p_char = (char)npfjl;
    }
}
{
    int rvrju=0;maxlength > rvrjuju<maxlength){
        int* pointer = &str[rvrju];
        shiftChar(pointer, shift);
    	rvrju++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1751,SoSe22,8,Antwort 9,C,VName_465,Name_465,"    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}","    int pcczh = (int)*p_char;
    if(!('z' || *p_char>='a' >= *p_char))        pcczh += shift;
        i122 < pcczh22)            int qywuu = pcczh-122;
            pcczh = 97+qywuu-1;
               97 > pcczhh<97){
            int qywuu = 97-pcczh;
            pcczh = 122-qywuu+1;
                *p_char = (char)pcczh;
     'Z' && *p_char>='A' >= *p_charr>='A'){
        pcczh += shift;
   90 < pcczhpcczh>90){
            int qywuu = pcczh-90;
            pcczh = 65+qywuu-1;
        }
 65 > pcczhf(!(pcczh>=65)){
            int qywuu = 65-pcczh;
            pcczh = 90-qywuu+1;
        }
        *p_char = (char)pcczh;
    }
}
{
    int ecrpx=0;maxlength > ecrpxpx<maxlength){
        int* pointer = &str[ecrpx];
        shiftChar(pointer, shift);
    	ecrpx++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1752,SoSe22,8,Antwort 9,C,VName_465,Name_465,"    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}","    int noqgm = (int)*p_char;
    if(!('z' || *p_char>='a' >= *p_char))        noqgm += shift;
        i122 < noqgm22)            int bcrug = noqgm-122;
            noqgm = 97+bcrug-1;
               97 > noqgmm<97){
            int bcrug = 97-noqgm;
            noqgm = 122-bcrug+1;
                *p_char = (char)noqgm;
     'Z' && *p_char>='A' >= *p_charr>='A'){
        noqgm += shift;
   90 < noqgmnoqgm>90){
            int bcrug = noqgm-90;
            noqgm = 65+bcrug-1;
        }
 65 > noqgmf(!(noqgm>=65)){
            int bcrug = 65-noqgm;
            noqgm = 90-bcrug+1;
        }
        *p_char = (char)noqgm;
    }
}
{
    int yhjqy=0;maxlength > yhjqyqy<maxlength){
        int* pointer = &str[yhjqy];
        shiftChar(pointer, shift);
    	yhjqy++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1753,SoSe22,8,Antwort 9,C,VName_465,Name_465,"    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}","    int ursfc = (int)*p_char;
    if(!('z' || *p_char>='a' >= *p_char))        ursfc += shift;
        i122 < ursfc22)            int eldsa = ursfc-122;
            ursfc = 97+eldsa-1;
               97 > ursfcc<97){
            int eldsa = 97-ursfc;
            ursfc = 122-eldsa+1;
                *p_char = (char)ursfc;
     'Z' && *p_char>='A' >= *p_charr>='A'){
        ursfc += shift;
   90 < ursfcursfc>90){
            int eldsa = ursfc-90;
            ursfc = 65+eldsa-1;
        }
 65 > ursfcf(!(ursfc>=65)){
            int eldsa = 65-ursfc;
            ursfc = 90-eldsa+1;
        }
        *p_char = (char)ursfc;
    }
}
{
    int uitjz=0;maxlength > uitjzjz<maxlength){
        int* pointer = &str[uitjz];
        shiftChar(pointer, shift);
    	uitjz++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1754,SoSe22,8,Antwort 9,C,VName_465,Name_465,"    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}","    int pcbns = (int)*p_char;
    if(!('z' || *p_char>='a' >= *p_char))        pcbns += shift;
        i122 < pcbns22)            int iziwq = pcbns-122;
            pcbns = 97+iziwq-1;
               97 > pcbnss<97){
            int iziwq = 97-pcbns;
            pcbns = 122-iziwq+1;
                *p_char = (char)pcbns;
     'Z' && *p_char>='A' >= *p_charr>='A'){
        pcbns += shift;
   90 < pcbnspcbns>90){
            int iziwq = pcbns-90;
            pcbns = 65+iziwq-1;
        }
 65 > pcbnsf(!(pcbns>=65)){
            int iziwq = 65-pcbns;
            pcbns = 90-iziwq+1;
        }
        *p_char = (char)pcbns;
    }
}
{
    int yhcss=0;maxlength > yhcssss<maxlength){
        int* pointer = &str[yhcss];
        shiftChar(pointer, shift);
    	yhcss++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1755,SoSe22,8,Antwort 9,C,VName_465,Name_465,"    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}","    int haari = (int)*p_char;
    if(!('z' || *p_char>='a' >= *p_char))        haari += shift;
        i122 < haari22)            int ysxuz = haari-122;
            haari = 97+ysxuz-1;
               97 > haarii<97){
            int ysxuz = 97-haari;
            haari = 122-ysxuz+1;
                *p_char = (char)haari;
     'Z' && *p_char>='A' >= *p_charr>='A'){
        haari += shift;
   90 < haarihaari>90){
            int ysxuz = haari-90;
            haari = 65+ysxuz-1;
        }
 65 > haarif(!(haari>=65)){
            int ysxuz = 65-haari;
            haari = 90-ysxuz+1;
        }
        *p_char = (char)haari;
    }
}
{
    int fmakg=0;maxlength > fmakgkg<maxlength){
        int* pointer = &str[fmakg];
        shiftChar(pointer, shift);
    	fmakg++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1756,SoSe22,8,Antwort 9,C,VName_465,Name_465,"    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}","    int jmqjs = (int)*p_char;
    if(!('z' || *p_char>='a' >= *p_char))        jmqjs += shift;
        i122 < jmqjs22)            int viorv = jmqjs-122;
            jmqjs = 97+viorv-1;
               97 > jmqjss<97){
            int viorv = 97-jmqjs;
            jmqjs = 122-viorv+1;
                *p_char = (char)jmqjs;
     'Z' && *p_char>='A' >= *p_charr>='A'){
        jmqjs += shift;
   90 < jmqjsjmqjs>90){
            int viorv = jmqjs-90;
            jmqjs = 65+viorv-1;
        }
 65 > jmqjsf(!(jmqjs>=65)){
            int viorv = 65-jmqjs;
            jmqjs = 90-viorv+1;
        }
        *p_char = (char)jmqjs;
    }
}
{
    int bpqxu=0;maxlength > bpqxuxu<maxlength){
        int* pointer = &str[bpqxu];
        shiftChar(pointer, shift);
    	bpqxu++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1757,SoSe22,8,Antwort 9,C,VName_465,Name_465,"    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}","    int svtjy = (int)*p_char;
    if(!('z' || *p_char>='a' >= *p_char))        svtjy += shift;
        i122 < svtjy22)            int mabqt = svtjy-122;
            svtjy = 97+mabqt-1;
               97 > svtjyy<97){
            int mabqt = 97-svtjy;
            svtjy = 122-mabqt+1;
                *p_char = (char)svtjy;
     'Z' && *p_char>='A' >= *p_charr>='A'){
        svtjy += shift;
   90 < svtjysvtjy>90){
            int mabqt = svtjy-90;
            svtjy = 65+mabqt-1;
        }
 65 > svtjyf(!(svtjy>=65)){
            int mabqt = 65-svtjy;
            svtjy = 90-mabqt+1;
        }
        *p_char = (char)svtjy;
    }
}
{
    int xhoec=0;maxlength > xhoecec<maxlength){
        int* pointer = &str[xhoec];
        shiftChar(pointer, shift);
    	xhoec++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1758,SoSe22,8,Antwort 9,C,VName_465,Name_465,"    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}","    int zyarq = (int)*p_char;
    if(!('z' || *p_char>='a' >= *p_char))        zyarq += shift;
        i122 < zyarq22)            int gakab = zyarq-122;
            zyarq = 97+gakab-1;
               97 > zyarqq<97){
            int gakab = 97-zyarq;
            zyarq = 122-gakab+1;
                *p_char = (char)zyarq;
     'Z' && *p_char>='A' >= *p_charr>='A'){
        zyarq += shift;
   90 < zyarqzyarq>90){
            int gakab = zyarq-90;
            zyarq = 65+gakab-1;
        }
 65 > zyarqf(!(zyarq>=65)){
            int gakab = 65-zyarq;
            zyarq = 90-gakab+1;
        }
        *p_char = (char)zyarq;
    }
}
{
    int jbtmk=0;maxlength > jbtmkmk<maxlength){
        int* pointer = &str[jbtmk];
        shiftChar(pointer, shift);
    	jbtmk++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1759,SoSe22,8,Antwort 9,C,VName_465,Name_465,"    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}","    int pmygk = (int)*p_char;
    if(!('z' || *p_char>='a' >= *p_char))        pmygk += shift;
        i122 < pmygk22)            int xlkdz = pmygk-122;
            pmygk = 97+xlkdz-1;
               97 > pmygkk<97){
            int xlkdz = 97-pmygk;
            pmygk = 122-xlkdz+1;
                *p_char = (char)pmygk;
     'Z' && *p_char>='A' >= *p_charr>='A'){
        pmygk += shift;
   90 < pmygkpmygk>90){
            int xlkdz = pmygk-90;
            pmygk = 65+xlkdz-1;
        }
 65 > pmygkf(!(pmygk>=65)){
            int xlkdz = 65-pmygk;
            pmygk = 90-xlkdz+1;
        }
        *p_char = (char)pmygk;
    }
}
{
    int jsobu=0;maxlength > jsobubu<maxlength){
        int* pointer = &str[jsobu];
        shiftChar(pointer, shift);
    	jsobu++;
    }
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1760,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void wyxet(char *vnofy, int xpqhn)
	dyhzy(!('A' || *vnofy <= 'Z' <= *vnofy)         dyhzy ('Z' < *vnofy + xpqhn))            *vnofy = *vnofy + xpqhn - 26;
        } else dyhzy (!('a' || *vnofy <= 'z' <= *vnofy)) { else {
            *vnofy += xpqhn;
            } else dyhzy (!('A' <= *vnofy + xpqhn)) {
            *vnofy = *vnofy + xpqhn + 26;
        }
        dyhzy (!('z' >= *vnofy + xpqhn)){
                *vnofy = *vnofy + xpqhn - 26;
        } else dyhzy (!('a' <= *vnofy + xpqhn)) {
            *vnofy = *vnofy + xpqhn + 26;
        } else {
            *vnofy += xpqhn;
            }
{
	int hixss=0;
	while (!(maxlength < hixss)){
		wyxet(&str[hixss], xpqhn);
		hixss++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1761,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void zexjt(char *dvnvw, int fzonn)
	eixlk(!('A' || *dvnvw <= 'Z' <= *dvnvw)         eixlk ('Z' < *dvnvw + fzonn))            *dvnvw = *dvnvw + fzonn - 26;
        } else eixlk (!('a' || *dvnvw <= 'z' <= *dvnvw)) { else {
            *dvnvw += fzonn;
            } else eixlk (!('A' <= *dvnvw + fzonn)) {
            *dvnvw = *dvnvw + fzonn + 26;
        }
        eixlk (!('z' >= *dvnvw + fzonn)){
                *dvnvw = *dvnvw + fzonn - 26;
        } else eixlk (!('a' <= *dvnvw + fzonn)) {
            *dvnvw = *dvnvw + fzonn + 26;
        } else {
            *dvnvw += fzonn;
            }
{
	int nymhq=0;
	while (!(maxlength < nymhq)){
		zexjt(&str[nymhq], fzonn);
		nymhq++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1762,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void uiyin(char *zckhm, int liiiw)
	eiyrt(!('A' || *zckhm <= 'Z' <= *zckhm)         eiyrt ('Z' < *zckhm + liiiw))            *zckhm = *zckhm + liiiw - 26;
        } else eiyrt (!('a' || *zckhm <= 'z' <= *zckhm)) { else {
            *zckhm += liiiw;
            } else eiyrt (!('A' <= *zckhm + liiiw)) {
            *zckhm = *zckhm + liiiw + 26;
        }
        eiyrt (!('z' >= *zckhm + liiiw)){
                *zckhm = *zckhm + liiiw - 26;
        } else eiyrt (!('a' <= *zckhm + liiiw)) {
            *zckhm = *zckhm + liiiw + 26;
        } else {
            *zckhm += liiiw;
            }
{
	int evnyq=0;
	while (!(maxlength < evnyq)){
		uiyin(&str[evnyq], liiiw);
		evnyq++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1763,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void wufdu(char *qyroy, int ogjbo)
	xcpkl(!('A' || *qyroy <= 'Z' <= *qyroy)         xcpkl ('Z' < *qyroy + ogjbo))            *qyroy = *qyroy + ogjbo - 26;
        } else xcpkl (!('a' || *qyroy <= 'z' <= *qyroy)) { else {
            *qyroy += ogjbo;
            } else xcpkl (!('A' <= *qyroy + ogjbo)) {
            *qyroy = *qyroy + ogjbo + 26;
        }
        xcpkl (!('z' >= *qyroy + ogjbo)){
                *qyroy = *qyroy + ogjbo - 26;
        } else xcpkl (!('a' <= *qyroy + ogjbo)) {
            *qyroy = *qyroy + ogjbo + 26;
        } else {
            *qyroy += ogjbo;
            }
{
	int ridul=0;
	while (!(maxlength < ridul)){
		wufdu(&str[ridul], ogjbo);
		ridul++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1764,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void qfobd(char *zztve, int adtvi)
	fncsb(!('A' || *zztve <= 'Z' <= *zztve)         fncsb ('Z' < *zztve + adtvi))            *zztve = *zztve + adtvi - 26;
        } else fncsb (!('a' || *zztve <= 'z' <= *zztve)) { else {
            *zztve += adtvi;
            } else fncsb (!('A' <= *zztve + adtvi)) {
            *zztve = *zztve + adtvi + 26;
        }
        fncsb (!('z' >= *zztve + adtvi)){
                *zztve = *zztve + adtvi - 26;
        } else fncsb (!('a' <= *zztve + adtvi)) {
            *zztve = *zztve + adtvi + 26;
        } else {
            *zztve += adtvi;
            }
{
	int vokgc=0;
	while (!(maxlength < vokgc)){
		qfobd(&str[vokgc], adtvi);
		vokgc++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1765,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void jeuvm(char *jifjg, int gxyoa)
	slrbf(!('A' || *jifjg <= 'Z' <= *jifjg)         slrbf ('Z' < *jifjg + gxyoa))            *jifjg = *jifjg + gxyoa - 26;
        } else slrbf (!('a' || *jifjg <= 'z' <= *jifjg)) { else {
            *jifjg += gxyoa;
            } else slrbf (!('A' <= *jifjg + gxyoa)) {
            *jifjg = *jifjg + gxyoa + 26;
        }
        slrbf (!('z' >= *jifjg + gxyoa)){
                *jifjg = *jifjg + gxyoa - 26;
        } else slrbf (!('a' <= *jifjg + gxyoa)) {
            *jifjg = *jifjg + gxyoa + 26;
        } else {
            *jifjg += gxyoa;
            }
{
	int gextq=0;
	while (!(maxlength < gextq)){
		jeuvm(&str[gextq], gxyoa);
		gextq++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1766,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void iivru(char *iecjs, int simij)
	wgcol(!('A' || *iecjs <= 'Z' <= *iecjs)         wgcol ('Z' < *iecjs + simij))            *iecjs = *iecjs + simij - 26;
        } else wgcol (!('a' || *iecjs <= 'z' <= *iecjs)) { else {
            *iecjs += simij;
            } else wgcol (!('A' <= *iecjs + simij)) {
            *iecjs = *iecjs + simij + 26;
        }
        wgcol (!('z' >= *iecjs + simij)){
                *iecjs = *iecjs + simij - 26;
        } else wgcol (!('a' <= *iecjs + simij)) {
            *iecjs = *iecjs + simij + 26;
        } else {
            *iecjs += simij;
            }
{
	int iltht=0;
	while (!(maxlength < iltht)){
		iivru(&str[iltht], simij);
		iltht++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1767,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void qffvd(char *nxjac, int tovjl)
	vqtdg(!('A' || *nxjac <= 'Z' <= *nxjac)         vqtdg ('Z' < *nxjac + tovjl))            *nxjac = *nxjac + tovjl - 26;
        } else vqtdg (!('a' || *nxjac <= 'z' <= *nxjac)) { else {
            *nxjac += tovjl;
            } else vqtdg (!('A' <= *nxjac + tovjl)) {
            *nxjac = *nxjac + tovjl + 26;
        }
        vqtdg (!('z' >= *nxjac + tovjl)){
                *nxjac = *nxjac + tovjl - 26;
        } else vqtdg (!('a' <= *nxjac + tovjl)) {
            *nxjac = *nxjac + tovjl + 26;
        } else {
            *nxjac += tovjl;
            }
{
	int rxbdi=0;
	while (!(maxlength < rxbdi)){
		qffvd(&str[rxbdi], tovjl);
		rxbdi++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1768,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void znbyu(char *okzgu, int eobxl)
	ngigw(!('A' || *okzgu <= 'Z' <= *okzgu)         ngigw ('Z' < *okzgu + eobxl))            *okzgu = *okzgu + eobxl - 26;
        } else ngigw (!('a' || *okzgu <= 'z' <= *okzgu)) { else {
            *okzgu += eobxl;
            } else ngigw (!('A' <= *okzgu + eobxl)) {
            *okzgu = *okzgu + eobxl + 26;
        }
        ngigw (!('z' >= *okzgu + eobxl)){
                *okzgu = *okzgu + eobxl - 26;
        } else ngigw (!('a' <= *okzgu + eobxl)) {
            *okzgu = *okzgu + eobxl + 26;
        } else {
            *okzgu += eobxl;
            }
{
	int zhqkl=0;
	while (!(maxlength < zhqkl)){
		znbyu(&str[zhqkl], eobxl);
		zhqkl++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1769,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void ljjen(char *hnatu, int lauul)
	fvzih(!('A' || *hnatu <= 'Z' <= *hnatu)         fvzih ('Z' < *hnatu + lauul))            *hnatu = *hnatu + lauul - 26;
        } else fvzih (!('a' || *hnatu <= 'z' <= *hnatu)) { else {
            *hnatu += lauul;
            } else fvzih (!('A' <= *hnatu + lauul)) {
            *hnatu = *hnatu + lauul + 26;
        }
        fvzih (!('z' >= *hnatu + lauul)){
                *hnatu = *hnatu + lauul - 26;
        } else fvzih (!('a' <= *hnatu + lauul)) {
            *hnatu = *hnatu + lauul + 26;
        } else {
            *hnatu += lauul;
            }
{
	int ougdb=0;
	while (!(maxlength < ougdb)){
		ljjen(&str[ougdb], lauul);
		ougdb++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1770,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void brpqw(char *fudtr, int cqzln)
	rbgkq(!('A' || *fudtr <= 'Z' <= *fudtr)         rbgkq ('Z' < *fudtr + cqzln))            *fudtr = *fudtr + cqzln - 26;
        } else rbgkq (!('a' || *fudtr <= 'z' <= *fudtr)) { else {
            *fudtr += cqzln;
            } else rbgkq (!('A' <= *fudtr + cqzln)) {
            *fudtr = *fudtr + cqzln + 26;
        }
        rbgkq (!('z' >= *fudtr + cqzln)){
                *fudtr = *fudtr + cqzln - 26;
        } else rbgkq (!('a' <= *fudtr + cqzln)) {
            *fudtr = *fudtr + cqzln + 26;
        } else {
            *fudtr += cqzln;
            }
{
	int dihzy=0;
	while (!(maxlength < dihzy)){
		brpqw(&str[dihzy], cqzln);
		dihzy++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1771,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void ixlhx(char *vdxdf, int lvfvx)
	uxhfm(!('A' || *vdxdf <= 'Z' <= *vdxdf)         uxhfm ('Z' < *vdxdf + lvfvx))            *vdxdf = *vdxdf + lvfvx - 26;
        } else uxhfm (!('a' || *vdxdf <= 'z' <= *vdxdf)) { else {
            *vdxdf += lvfvx;
            } else uxhfm (!('A' <= *vdxdf + lvfvx)) {
            *vdxdf = *vdxdf + lvfvx + 26;
        }
        uxhfm (!('z' >= *vdxdf + lvfvx)){
                *vdxdf = *vdxdf + lvfvx - 26;
        } else uxhfm (!('a' <= *vdxdf + lvfvx)) {
            *vdxdf = *vdxdf + lvfvx + 26;
        } else {
            *vdxdf += lvfvx;
            }
{
	int atama=0;
	while (!(maxlength < atama)){
		ixlhx(&str[atama], lvfvx);
		atama++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1772,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void skums(char *swbpn, int vsorm)
	yraav(!('A' || *swbpn <= 'Z' <= *swbpn)         yraav ('Z' < *swbpn + vsorm))            *swbpn = *swbpn + vsorm - 26;
        } else yraav (!('a' || *swbpn <= 'z' <= *swbpn)) { else {
            *swbpn += vsorm;
            } else yraav (!('A' <= *swbpn + vsorm)) {
            *swbpn = *swbpn + vsorm + 26;
        }
        yraav (!('z' >= *swbpn + vsorm)){
                *swbpn = *swbpn + vsorm - 26;
        } else yraav (!('a' <= *swbpn + vsorm)) {
            *swbpn = *swbpn + vsorm + 26;
        } else {
            *swbpn += vsorm;
            }
{
	int viona=0;
	while (!(maxlength < viona)){
		skums(&str[viona], vsorm);
		viona++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1773,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void rmhtn(char *bxvfb, int yrlst)
	xjahe(!('A' || *bxvfb <= 'Z' <= *bxvfb)         xjahe ('Z' < *bxvfb + yrlst))            *bxvfb = *bxvfb + yrlst - 26;
        } else xjahe (!('a' || *bxvfb <= 'z' <= *bxvfb)) { else {
            *bxvfb += yrlst;
            } else xjahe (!('A' <= *bxvfb + yrlst)) {
            *bxvfb = *bxvfb + yrlst + 26;
        }
        xjahe (!('z' >= *bxvfb + yrlst)){
                *bxvfb = *bxvfb + yrlst - 26;
        } else xjahe (!('a' <= *bxvfb + yrlst)) {
            *bxvfb = *bxvfb + yrlst + 26;
        } else {
            *bxvfb += yrlst;
            }
{
	int xdcio=0;
	while (!(maxlength < xdcio)){
		rmhtn(&str[xdcio], yrlst);
		xdcio++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1774,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void zdein(char *hvyig, int ytsvc)
	flizu(!('A' || *hvyig <= 'Z' <= *hvyig)         flizu ('Z' < *hvyig + ytsvc))            *hvyig = *hvyig + ytsvc - 26;
        } else flizu (!('a' || *hvyig <= 'z' <= *hvyig)) { else {
            *hvyig += ytsvc;
            } else flizu (!('A' <= *hvyig + ytsvc)) {
            *hvyig = *hvyig + ytsvc + 26;
        }
        flizu (!('z' >= *hvyig + ytsvc)){
                *hvyig = *hvyig + ytsvc - 26;
        } else flizu (!('a' <= *hvyig + ytsvc)) {
            *hvyig = *hvyig + ytsvc + 26;
        } else {
            *hvyig += ytsvc;
            }
{
	int hsohw=0;
	while (!(maxlength < hsohw)){
		zdein(&str[hsohw], ytsvc);
		hsohw++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1775,SoSe22,8,Antwort 9,C,VName_453,Name_453,"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void xjmwr(char *shxxz, int fared)
	ypshc(!('A' || *shxxz <= 'Z' <= *shxxz)         ypshc ('Z' < *shxxz + fared))            *shxxz = *shxxz + fared - 26;
        } else ypshc (!('a' || *shxxz <= 'z' <= *shxxz)) { else {
            *shxxz += fared;
            } else ypshc (!('A' <= *shxxz + fared)) {
            *shxxz = *shxxz + fared + 26;
        }
        ypshc (!('z' >= *shxxz + fared)){
                *shxxz = *shxxz + fared - 26;
        } else ypshc (!('a' <= *shxxz + fared)) {
            *shxxz = *shxxz + fared + 26;
        } else {
            *shxxz += fared;
            }
{
	int lqryr=0;
	while (!(maxlength < lqryr)){
		xjmwr(&str[lqryr], fared);
		lqryr++;
	}
}
{
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1776,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength bftxq uuwoh
	tcvgd	bftxq foyis
 * Bekommt wllni Pointer nwwde ein pxfap cbqhz pmkrj wllni vzdrg tcvgd lmvww.
 * intShiftet dzsls cbqhz ugkbg dem pmvtu a-z pmkrj A-Z drpea den vzdrg tcvgd. 
}else izbxw(!(90 >= *p_char+tcvgd)){
			*p_char = *p_char + tcvgd - 26;
		}
	izbxw(!((65 > *p_char) && (90 >= *p_char))){
		izbxw(!(65 <= *p_char+tcvgd)){
			*p_char = *p_char + tcvgd + 26;
		void vyile(dgpzc* p_char, int tcvgd){else{
			*p_char = *p_char + tcvgd;
	}else izbxw(!((97 > *p_char) && (122 >= *p_char))){
		izbxw(!(97 <= *p_char+tcvgd)){
			*p_char = *p_char + tcvgd + 26;
		}else izbxw(!(122 >= *p_char+tcvgd)){
			*p_char = *p_char + tcvgd - 26;
		}else{
			*p_char = *p_char + tcvgd;
	}else{
}
 * Bekommt wllni beliebigen dgpzc-Array jkabo Laenge uuwoh lmvww. 
 * Fuehrt nwwde jedem cbqhz des sndfe die kniem-Funktion ugkbg.
void jlkry(dgpzc urvat[], int tcvgd, int uuwoh){
	int cpinq=0;
	while (!(uuwoh <= cpinq)){
		vyile(&urvat[cpinq], tcvgd);
		cpinq++;
	}
}
int main(){
	dgpzc urvat[] = ""Froh zu sein bedarf es wenig"";
	// dgpzc urvat[] = ""AZ   az"";
	// dgpzc urvat[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int grhew = (sizeof urvat / sizeof *urvat);
	int tcvgd = 5;
	jlkry(urvat, tcvgd, grhew);
	jlkry(urvat, -tcvgd, grhew);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1777,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength gkvxt vlecm
	oqatw	gkvxt fygbh
 * Bekommt btbvz Pointer fcdmw ein nkqpw cwpye xfghs btbvz qrriq oqatw sgftn.
 * intShiftet mfrtv cwpye dxzyq dem hwwyh a-z xfghs A-Z dbcgl den qrriq oqatw. 
}else qhyvn(!(90 >= *p_char+oqatw)){
			*p_char = *p_char + oqatw - 26;
		}
	qhyvn(!((65 > *p_char) && (90 >= *p_char))){
		qhyvn(!(65 <= *p_char+oqatw)){
			*p_char = *p_char + oqatw + 26;
		void mdgma(hijgf* p_char, int oqatw){else{
			*p_char = *p_char + oqatw;
	}else qhyvn(!((97 > *p_char) && (122 >= *p_char))){
		qhyvn(!(97 <= *p_char+oqatw)){
			*p_char = *p_char + oqatw + 26;
		}else qhyvn(!(122 >= *p_char+oqatw)){
			*p_char = *p_char + oqatw - 26;
		}else{
			*p_char = *p_char + oqatw;
	}else{
}
 * Bekommt btbvz beliebigen hijgf-Array nhxgo Laenge vlecm sgftn. 
 * Fuehrt fcdmw jedem cwpye des pwmmh die afwwm-Funktion dxzyq.
void oialy(hijgf gquti[], int oqatw, int vlecm){
	int sfjsj=0;
	while (!(vlecm <= sfjsj)){
		mdgma(&gquti[sfjsj], oqatw);
		sfjsj++;
	}
}
int main(){
	hijgf gquti[] = ""Froh zu sein bedarf es wenig"";
	// hijgf gquti[] = ""AZ   az"";
	// hijgf gquti[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int ampbb = (sizeof gquti / sizeof *gquti);
	int oqatw = 5;
	oialy(gquti, oqatw, ampbb);
	oialy(gquti, -oqatw, ampbb);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1778,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength prokj wcqns
	ohfgh	prokj hphte
 * Bekommt rekzk Pointer fwtse ein ncbmn vrjsr rzmqm rekzk zvfmo ohfgh hlenu.
 * intShiftet ndgeg vrjsr hvbyo dem vchsx a-z rzmqm A-Z hdlcd den zvfmo ohfgh. 
}else kovmz(!(90 >= *p_char+ohfgh)){
			*p_char = *p_char + ohfgh - 26;
		}
	kovmz(!((65 > *p_char) && (90 >= *p_char))){
		kovmz(!(65 <= *p_char+ohfgh)){
			*p_char = *p_char + ohfgh + 26;
		void zpibu(sfcnl* p_char, int ohfgh){else{
			*p_char = *p_char + ohfgh;
	}else kovmz(!((97 > *p_char) && (122 >= *p_char))){
		kovmz(!(97 <= *p_char+ohfgh)){
			*p_char = *p_char + ohfgh + 26;
		}else kovmz(!(122 >= *p_char+ohfgh)){
			*p_char = *p_char + ohfgh - 26;
		}else{
			*p_char = *p_char + ohfgh;
	}else{
}
 * Bekommt rekzk beliebigen sfcnl-Array jpaho Laenge wcqns hlenu. 
 * Fuehrt fwtse jedem vrjsr des rydaj die kwajg-Funktion hvbyo.
void tzuvw(sfcnl siqpe[], int ohfgh, int wcqns){
	int dwwau=0;
	while (!(wcqns <= dwwau)){
		zpibu(&siqpe[dwwau], ohfgh);
		dwwau++;
	}
}
int main(){
	sfcnl siqpe[] = ""Froh zu sein bedarf es wenig"";
	// sfcnl siqpe[] = ""AZ   az"";
	// sfcnl siqpe[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int sdlsl = (sizeof siqpe / sizeof *siqpe);
	int ohfgh = 5;
	tzuvw(siqpe, ohfgh, sdlsl);
	tzuvw(siqpe, -ohfgh, sdlsl);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1779,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength alqzh cnisx
	pjghc	alqzh edbdp
 * Bekommt pwaca Pointer toxik ein qvlwx apdkz yifwc pwaca ltmvl pjghc pxwce.
 * intShiftet qkfms apdkz qlwmp dem peajy a-z yifwc A-Z ddrgf den ltmvl pjghc. 
}else yzibb(!(90 >= *p_char+pjghc)){
			*p_char = *p_char + pjghc - 26;
		}
	yzibb(!((65 > *p_char) && (90 >= *p_char))){
		yzibb(!(65 <= *p_char+pjghc)){
			*p_char = *p_char + pjghc + 26;
		void avyyo(myuid* p_char, int pjghc){else{
			*p_char = *p_char + pjghc;
	}else yzibb(!((97 > *p_char) && (122 >= *p_char))){
		yzibb(!(97 <= *p_char+pjghc)){
			*p_char = *p_char + pjghc + 26;
		}else yzibb(!(122 >= *p_char+pjghc)){
			*p_char = *p_char + pjghc - 26;
		}else{
			*p_char = *p_char + pjghc;
	}else{
}
 * Bekommt pwaca beliebigen myuid-Array dobwn Laenge cnisx pxwce. 
 * Fuehrt toxik jedem apdkz des mnugo die ssmyo-Funktion qlwmp.
void ejuot(myuid hyfjy[], int pjghc, int cnisx){
	int regpk=0;
	while (!(cnisx <= regpk)){
		avyyo(&hyfjy[regpk], pjghc);
		regpk++;
	}
}
int main(){
	myuid hyfjy[] = ""Froh zu sein bedarf es wenig"";
	// myuid hyfjy[] = ""AZ   az"";
	// myuid hyfjy[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int ayveh = (sizeof hyfjy / sizeof *hyfjy);
	int pjghc = 5;
	ejuot(hyfjy, pjghc, ayveh);
	ejuot(hyfjy, -pjghc, ayveh);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1780,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength ernoh tssic
	yqdlp	ernoh aeghx
 * Bekommt qlvja Pointer jvogc ein zzhyd kjkre nknjl qlvja zfmcg yqdlp rmuih.
 * intShiftet dkvtf kjkre rggqe dem qzfiu a-z nknjl A-Z lvxrs den zfmcg yqdlp. 
}else ljmiz(!(90 >= *p_char+yqdlp)){
			*p_char = *p_char + yqdlp - 26;
		}
	ljmiz(!((65 > *p_char) && (90 >= *p_char))){
		ljmiz(!(65 <= *p_char+yqdlp)){
			*p_char = *p_char + yqdlp + 26;
		void irgvz(gmmvc* p_char, int yqdlp){else{
			*p_char = *p_char + yqdlp;
	}else ljmiz(!((97 > *p_char) && (122 >= *p_char))){
		ljmiz(!(97 <= *p_char+yqdlp)){
			*p_char = *p_char + yqdlp + 26;
		}else ljmiz(!(122 >= *p_char+yqdlp)){
			*p_char = *p_char + yqdlp - 26;
		}else{
			*p_char = *p_char + yqdlp;
	}else{
}
 * Bekommt qlvja beliebigen gmmvc-Array kznct Laenge tssic rmuih. 
 * Fuehrt jvogc jedem kjkre des wgfly die geuvy-Funktion rggqe.
void xjgby(gmmvc wqrka[], int yqdlp, int tssic){
	int vxryc=0;
	while (!(tssic <= vxryc)){
		irgvz(&wqrka[vxryc], yqdlp);
		vxryc++;
	}
}
int main(){
	gmmvc wqrka[] = ""Froh zu sein bedarf es wenig"";
	// gmmvc wqrka[] = ""AZ   az"";
	// gmmvc wqrka[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int xyhke = (sizeof wqrka / sizeof *wqrka);
	int yqdlp = 5;
	xjgby(wqrka, yqdlp, xyhke);
	xjgby(wqrka, -yqdlp, xyhke);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1781,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength dkhrq jpqlv
	gxzuf	dkhrq uwfcq
 * Bekommt gegkp Pointer iabhl ein kzxdv ziefv qpygi gegkp gepzs gxzuf jhncq.
 * intShiftet rjuup ziefv njayr dem xoyka a-z qpygi A-Z srurk den gepzs gxzuf. 
}else wkzii(!(90 >= *p_char+gxzuf)){
			*p_char = *p_char + gxzuf - 26;
		}
	wkzii(!((65 > *p_char) && (90 >= *p_char))){
		wkzii(!(65 <= *p_char+gxzuf)){
			*p_char = *p_char + gxzuf + 26;
		void tfaht(kfowi* p_char, int gxzuf){else{
			*p_char = *p_char + gxzuf;
	}else wkzii(!((97 > *p_char) && (122 >= *p_char))){
		wkzii(!(97 <= *p_char+gxzuf)){
			*p_char = *p_char + gxzuf + 26;
		}else wkzii(!(122 >= *p_char+gxzuf)){
			*p_char = *p_char + gxzuf - 26;
		}else{
			*p_char = *p_char + gxzuf;
	}else{
}
 * Bekommt gegkp beliebigen kfowi-Array dhcqd Laenge jpqlv jhncq. 
 * Fuehrt iabhl jedem ziefv des hlyou die fxezk-Funktion njayr.
void bpddc(kfowi oivkw[], int gxzuf, int jpqlv){
	int tljpe=0;
	while (!(jpqlv <= tljpe)){
		tfaht(&oivkw[tljpe], gxzuf);
		tljpe++;
	}
}
int main(){
	kfowi oivkw[] = ""Froh zu sein bedarf es wenig"";
	// kfowi oivkw[] = ""AZ   az"";
	// kfowi oivkw[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int xgvri = (sizeof oivkw / sizeof *oivkw);
	int gxzuf = 5;
	bpddc(oivkw, gxzuf, xgvri);
	bpddc(oivkw, -gxzuf, xgvri);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1782,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength afpyu zblct
	hdvjp	afpyu xkvad
 * Bekommt hoaob Pointer tyuwi ein illjg hczya whckw hoaob egmtl hdvjp gvylp.
 * intShiftet xjpet hczya qvllr dem lzzbk a-z whckw A-Z vygta den egmtl hdvjp. 
}else xezid(!(90 >= *p_char+hdvjp)){
			*p_char = *p_char + hdvjp - 26;
		}
	xezid(!((65 > *p_char) && (90 >= *p_char))){
		xezid(!(65 <= *p_char+hdvjp)){
			*p_char = *p_char + hdvjp + 26;
		void ksyis(iduim* p_char, int hdvjp){else{
			*p_char = *p_char + hdvjp;
	}else xezid(!((97 > *p_char) && (122 >= *p_char))){
		xezid(!(97 <= *p_char+hdvjp)){
			*p_char = *p_char + hdvjp + 26;
		}else xezid(!(122 >= *p_char+hdvjp)){
			*p_char = *p_char + hdvjp - 26;
		}else{
			*p_char = *p_char + hdvjp;
	}else{
}
 * Bekommt hoaob beliebigen iduim-Array vkaku Laenge zblct gvylp. 
 * Fuehrt tyuwi jedem hczya des yriqz die cspjn-Funktion qvllr.
void giqoi(iduim gtflx[], int hdvjp, int zblct){
	int iyxre=0;
	while (!(zblct <= iyxre)){
		ksyis(&gtflx[iyxre], hdvjp);
		iyxre++;
	}
}
int main(){
	iduim gtflx[] = ""Froh zu sein bedarf es wenig"";
	// iduim gtflx[] = ""AZ   az"";
	// iduim gtflx[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int gjant = (sizeof gtflx / sizeof *gtflx);
	int hdvjp = 5;
	giqoi(gtflx, hdvjp, gjant);
	giqoi(gtflx, -hdvjp, gjant);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1783,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength yegpw orctg
	nqmdx	yegpw szrdg
 * Bekommt odayx Pointer szzsq ein bnvkj doikt jdjyz odayx yctvu nqmdx betcd.
 * intShiftet bsbsm doikt wuhop dem czrvx a-z jdjyz A-Z loqqq den yctvu nqmdx. 
}else kxgbb(!(90 >= *p_char+nqmdx)){
			*p_char = *p_char + nqmdx - 26;
		}
	kxgbb(!((65 > *p_char) && (90 >= *p_char))){
		kxgbb(!(65 <= *p_char+nqmdx)){
			*p_char = *p_char + nqmdx + 26;
		void qrkoc(nrerb* p_char, int nqmdx){else{
			*p_char = *p_char + nqmdx;
	}else kxgbb(!((97 > *p_char) && (122 >= *p_char))){
		kxgbb(!(97 <= *p_char+nqmdx)){
			*p_char = *p_char + nqmdx + 26;
		}else kxgbb(!(122 >= *p_char+nqmdx)){
			*p_char = *p_char + nqmdx - 26;
		}else{
			*p_char = *p_char + nqmdx;
	}else{
}
 * Bekommt odayx beliebigen nrerb-Array zcjfp Laenge orctg betcd. 
 * Fuehrt szzsq jedem doikt des sybmy die rcsln-Funktion wuhop.
void cfqps(nrerb dbzwy[], int nqmdx, int orctg){
	int sqjzf=0;
	while (!(orctg <= sqjzf)){
		qrkoc(&dbzwy[sqjzf], nqmdx);
		sqjzf++;
	}
}
int main(){
	nrerb dbzwy[] = ""Froh zu sein bedarf es wenig"";
	// nrerb dbzwy[] = ""AZ   az"";
	// nrerb dbzwy[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int mpgfw = (sizeof dbzwy / sizeof *dbzwy);
	int nqmdx = 5;
	cfqps(dbzwy, nqmdx, mpgfw);
	cfqps(dbzwy, -nqmdx, mpgfw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1784,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength ikoio rwbyp
	vsmiz	ikoio wqlvj
 * Bekommt igval Pointer avpgs ein mnhdx heaiz veego igval scqkx vsmiz cysjl.
 * intShiftet ilfkb heaiz zuszq dem jwyon a-z veego A-Z zylae den scqkx vsmiz. 
}else dxvks(!(90 >= *p_char+vsmiz)){
			*p_char = *p_char + vsmiz - 26;
		}
	dxvks(!((65 > *p_char) && (90 >= *p_char))){
		dxvks(!(65 <= *p_char+vsmiz)){
			*p_char = *p_char + vsmiz + 26;
		void acayr(wuxto* p_char, int vsmiz){else{
			*p_char = *p_char + vsmiz;
	}else dxvks(!((97 > *p_char) && (122 >= *p_char))){
		dxvks(!(97 <= *p_char+vsmiz)){
			*p_char = *p_char + vsmiz + 26;
		}else dxvks(!(122 >= *p_char+vsmiz)){
			*p_char = *p_char + vsmiz - 26;
		}else{
			*p_char = *p_char + vsmiz;
	}else{
}
 * Bekommt igval beliebigen wuxto-Array pbxuz Laenge rwbyp cysjl. 
 * Fuehrt avpgs jedem heaiz des voalg die xmitl-Funktion zuszq.
void yjtst(wuxto esain[], int vsmiz, int rwbyp){
	int iugbv=0;
	while (!(rwbyp <= iugbv)){
		acayr(&esain[iugbv], vsmiz);
		iugbv++;
	}
}
int main(){
	wuxto esain[] = ""Froh zu sein bedarf es wenig"";
	// wuxto esain[] = ""AZ   az"";
	// wuxto esain[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int mnlfg = (sizeof esain / sizeof *esain);
	int vsmiz = 5;
	yjtst(esain, vsmiz, mnlfg);
	yjtst(esain, -vsmiz, mnlfg);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1785,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength wjxbe mfhhq
	qaqbf	wjxbe ktwtt
 * Bekommt xqhsi Pointer skgpu ein qhjjo ruoxe zlcmm xqhsi femxo qaqbf yxdif.
 * intShiftet hzfmh ruoxe roxdu dem yvcoc a-z zlcmm A-Z ydarz den femxo qaqbf. 
}else mqwfa(!(90 >= *p_char+qaqbf)){
			*p_char = *p_char + qaqbf - 26;
		}
	mqwfa(!((65 > *p_char) && (90 >= *p_char))){
		mqwfa(!(65 <= *p_char+qaqbf)){
			*p_char = *p_char + qaqbf + 26;
		void dvwjw(xixdi* p_char, int qaqbf){else{
			*p_char = *p_char + qaqbf;
	}else mqwfa(!((97 > *p_char) && (122 >= *p_char))){
		mqwfa(!(97 <= *p_char+qaqbf)){
			*p_char = *p_char + qaqbf + 26;
		}else mqwfa(!(122 >= *p_char+qaqbf)){
			*p_char = *p_char + qaqbf - 26;
		}else{
			*p_char = *p_char + qaqbf;
	}else{
}
 * Bekommt xqhsi beliebigen xixdi-Array ytjow Laenge mfhhq yxdif. 
 * Fuehrt skgpu jedem ruoxe des xtlqf die igjrw-Funktion roxdu.
void kvmlt(xixdi nesli[], int qaqbf, int mfhhq){
	int lbcue=0;
	while (!(mfhhq <= lbcue)){
		dvwjw(&nesli[lbcue], qaqbf);
		lbcue++;
	}
}
int main(){
	xixdi nesli[] = ""Froh zu sein bedarf es wenig"";
	// xixdi nesli[] = ""AZ   az"";
	// xixdi nesli[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int pokqt = (sizeof nesli / sizeof *nesli);
	int qaqbf = 5;
	kvmlt(nesli, qaqbf, pokqt);
	kvmlt(nesli, -qaqbf, pokqt);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1786,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength lnwcd zpsia
	awwlq	lnwcd crswc
 * Bekommt josbx Pointer ofuap ein srrvc tixgg lbrum josbx ntclr awwlq cosbk.
 * intShiftet feqdc tixgg epogm dem ambhs a-z lbrum A-Z pcyru den ntclr awwlq. 
}else qehex(!(90 >= *p_char+awwlq)){
			*p_char = *p_char + awwlq - 26;
		}
	qehex(!((65 > *p_char) && (90 >= *p_char))){
		qehex(!(65 <= *p_char+awwlq)){
			*p_char = *p_char + awwlq + 26;
		void rnqjz(msgdn* p_char, int awwlq){else{
			*p_char = *p_char + awwlq;
	}else qehex(!((97 > *p_char) && (122 >= *p_char))){
		qehex(!(97 <= *p_char+awwlq)){
			*p_char = *p_char + awwlq + 26;
		}else qehex(!(122 >= *p_char+awwlq)){
			*p_char = *p_char + awwlq - 26;
		}else{
			*p_char = *p_char + awwlq;
	}else{
}
 * Bekommt josbx beliebigen msgdn-Array gxwax Laenge zpsia cosbk. 
 * Fuehrt ofuap jedem tixgg des skdbs die lfcrq-Funktion epogm.
void jlfau(msgdn yuetz[], int awwlq, int zpsia){
	int ecvnh=0;
	while (!(zpsia <= ecvnh)){
		rnqjz(&yuetz[ecvnh], awwlq);
		ecvnh++;
	}
}
int main(){
	msgdn yuetz[] = ""Froh zu sein bedarf es wenig"";
	// msgdn yuetz[] = ""AZ   az"";
	// msgdn yuetz[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int qsldc = (sizeof yuetz / sizeof *yuetz);
	int awwlq = 5;
	jlfau(yuetz, awwlq, qsldc);
	jlfau(yuetz, -awwlq, qsldc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1787,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength yeqka iizqb
	frqkh	yeqka wvswe
 * Bekommt mbsbx Pointer mzidk ein imjgo qllpw hvqvn mbsbx vwjgi frqkh sfpun.
 * intShiftet zlwxc qllpw ktgus dem glmma a-z hvqvn A-Z emsii den vwjgi frqkh. 
}else pbyuz(!(90 >= *p_char+frqkh)){
			*p_char = *p_char + frqkh - 26;
		}
	pbyuz(!((65 > *p_char) && (90 >= *p_char))){
		pbyuz(!(65 <= *p_char+frqkh)){
			*p_char = *p_char + frqkh + 26;
		void hueai(ubvvu* p_char, int frqkh){else{
			*p_char = *p_char + frqkh;
	}else pbyuz(!((97 > *p_char) && (122 >= *p_char))){
		pbyuz(!(97 <= *p_char+frqkh)){
			*p_char = *p_char + frqkh + 26;
		}else pbyuz(!(122 >= *p_char+frqkh)){
			*p_char = *p_char + frqkh - 26;
		}else{
			*p_char = *p_char + frqkh;
	}else{
}
 * Bekommt mbsbx beliebigen ubvvu-Array lhust Laenge iizqb sfpun. 
 * Fuehrt mzidk jedem qllpw des xbdoh die qsjth-Funktion ktgus.
void hzxfq(ubvvu gipyf[], int frqkh, int iizqb){
	int qifpi=0;
	while (!(iizqb <= qifpi)){
		hueai(&gipyf[qifpi], frqkh);
		qifpi++;
	}
}
int main(){
	ubvvu gipyf[] = ""Froh zu sein bedarf es wenig"";
	// ubvvu gipyf[] = ""AZ   az"";
	// ubvvu gipyf[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int vmxcc = (sizeof gipyf / sizeof *gipyf);
	int frqkh = 5;
	hzxfq(gipyf, frqkh, vmxcc);
	hzxfq(gipyf, -frqkh, vmxcc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1788,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength isdli xowbn
	vtgtn	isdli eaymz
 * Bekommt lcgwz Pointer ozmdx ein frobb fgard wuprc lcgwz kbfdx vtgtn ktlkq.
 * intShiftet gtnye fgard ioave dem lngwi a-z wuprc A-Z kmmxp den kbfdx vtgtn. 
}else bexze(!(90 >= *p_char+vtgtn)){
			*p_char = *p_char + vtgtn - 26;
		}
	bexze(!((65 > *p_char) && (90 >= *p_char))){
		bexze(!(65 <= *p_char+vtgtn)){
			*p_char = *p_char + vtgtn + 26;
		void jciba(vwbqi* p_char, int vtgtn){else{
			*p_char = *p_char + vtgtn;
	}else bexze(!((97 > *p_char) && (122 >= *p_char))){
		bexze(!(97 <= *p_char+vtgtn)){
			*p_char = *p_char + vtgtn + 26;
		}else bexze(!(122 >= *p_char+vtgtn)){
			*p_char = *p_char + vtgtn - 26;
		}else{
			*p_char = *p_char + vtgtn;
	}else{
}
 * Bekommt lcgwz beliebigen vwbqi-Array idsgg Laenge xowbn ktlkq. 
 * Fuehrt ozmdx jedem fgard des zokyc die cqodl-Funktion ioave.
void qrtpz(vwbqi exmnx[], int vtgtn, int xowbn){
	int nbmor=0;
	while (!(xowbn <= nbmor)){
		jciba(&exmnx[nbmor], vtgtn);
		nbmor++;
	}
}
int main(){
	vwbqi exmnx[] = ""Froh zu sein bedarf es wenig"";
	// vwbqi exmnx[] = ""AZ   az"";
	// vwbqi exmnx[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int ujgaz = (sizeof exmnx / sizeof *exmnx);
	int vtgtn = 5;
	qrtpz(exmnx, vtgtn, ujgaz);
	qrtpz(exmnx, -vtgtn, ujgaz);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1789,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength vlgfj qrwly
	sugje	vlgfj ewlpn
 * Bekommt osrla Pointer euwtr ein cgcui smpvt cbvey osrla cejwu sugje ebuwi.
 * intShiftet sufkn smpvt gqpgu dem tuoel a-z cbvey A-Z rwhqu den cejwu sugje. 
}else xvpsw(!(90 >= *p_char+sugje)){
			*p_char = *p_char + sugje - 26;
		}
	xvpsw(!((65 > *p_char) && (90 >= *p_char))){
		xvpsw(!(65 <= *p_char+sugje)){
			*p_char = *p_char + sugje + 26;
		void vyrpf(jjqyb* p_char, int sugje){else{
			*p_char = *p_char + sugje;
	}else xvpsw(!((97 > *p_char) && (122 >= *p_char))){
		xvpsw(!(97 <= *p_char+sugje)){
			*p_char = *p_char + sugje + 26;
		}else xvpsw(!(122 >= *p_char+sugje)){
			*p_char = *p_char + sugje - 26;
		}else{
			*p_char = *p_char + sugje;
	}else{
}
 * Bekommt osrla beliebigen jjqyb-Array zlnjq Laenge qrwly ebuwi. 
 * Fuehrt euwtr jedem smpvt des tstnm die ckdsa-Funktion gqpgu.
void iwwwb(jjqyb yrrae[], int sugje, int qrwly){
	int neaya=0;
	while (!(qrwly <= neaya)){
		vyrpf(&yrrae[neaya], sugje);
		neaya++;
	}
}
int main(){
	jjqyb yrrae[] = ""Froh zu sein bedarf es wenig"";
	// jjqyb yrrae[] = ""AZ   az"";
	// jjqyb yrrae[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int mdmhj = (sizeof yrrae / sizeof *yrrae);
	int sugje = 5;
	iwwwb(yrrae, sugje, mdmhj);
	iwwwb(yrrae, -sugje, mdmhj);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1790,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength ylqxr ugeoz
	mkwgo	ylqxr zsrqc
 * Bekommt qtzup Pointer duxyi ein rhnwp basmt feppi qtzup rpueq mkwgo vfrsl.
 * intShiftet nhbvn basmt slkhr dem arbro a-z feppi A-Z jmnzd den rpueq mkwgo. 
}else galia(!(90 >= *p_char+mkwgo)){
			*p_char = *p_char + mkwgo - 26;
		}
	galia(!((65 > *p_char) && (90 >= *p_char))){
		galia(!(65 <= *p_char+mkwgo)){
			*p_char = *p_char + mkwgo + 26;
		void eutni(xeqzd* p_char, int mkwgo){else{
			*p_char = *p_char + mkwgo;
	}else galia(!((97 > *p_char) && (122 >= *p_char))){
		galia(!(97 <= *p_char+mkwgo)){
			*p_char = *p_char + mkwgo + 26;
		}else galia(!(122 >= *p_char+mkwgo)){
			*p_char = *p_char + mkwgo - 26;
		}else{
			*p_char = *p_char + mkwgo;
	}else{
}
 * Bekommt qtzup beliebigen xeqzd-Array bsvjb Laenge ugeoz vfrsl. 
 * Fuehrt duxyi jedem basmt des fntkl die kxldx-Funktion slkhr.
void gqzqn(xeqzd xruxc[], int mkwgo, int ugeoz){
	int ocjtk=0;
	while (!(ugeoz <= ocjtk)){
		eutni(&xruxc[ocjtk], mkwgo);
		ocjtk++;
	}
}
int main(){
	xeqzd xruxc[] = ""Froh zu sein bedarf es wenig"";
	// xeqzd xruxc[] = ""AZ   az"";
	// xeqzd xruxc[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int rzggu = (sizeof xruxc / sizeof *xruxc);
	int mkwgo = 5;
	gqzqn(xruxc, mkwgo, rzggu);
	gqzqn(xruxc, -mkwgo, rzggu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1791,SoSe22,8,Antwort 9,C,VName_432,Name_432,"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength xtrzm xzdyy
	nzudi	xtrzm ztsju
 * Bekommt frkvt Pointer vgief ein nhedb wxdre shaxm frkvt ejfky nzudi qilgx.
 * intShiftet hruvz wxdre ffyhn dem aawad a-z shaxm A-Z demlg den ejfky nzudi. 
}else gjguz(!(90 >= *p_char+nzudi)){
			*p_char = *p_char + nzudi - 26;
		}
	gjguz(!((65 > *p_char) && (90 >= *p_char))){
		gjguz(!(65 <= *p_char+nzudi)){
			*p_char = *p_char + nzudi + 26;
		void maltz(ekvyy* p_char, int nzudi){else{
			*p_char = *p_char + nzudi;
	}else gjguz(!((97 > *p_char) && (122 >= *p_char))){
		gjguz(!(97 <= *p_char+nzudi)){
			*p_char = *p_char + nzudi + 26;
		}else gjguz(!(122 >= *p_char+nzudi)){
			*p_char = *p_char + nzudi - 26;
		}else{
			*p_char = *p_char + nzudi;
	}else{
}
 * Bekommt frkvt beliebigen ekvyy-Array wgxxo Laenge xzdyy qilgx. 
 * Fuehrt vgief jedem wxdre des hmbqd die dkizl-Funktion ffyhn.
void xgwec(ekvyy hmlyq[], int nzudi, int xzdyy){
	int siokm=0;
	while (!(xzdyy <= siokm)){
		maltz(&hmlyq[siokm], nzudi);
		siokm++;
	}
}
int main(){
	ekvyy hmlyq[] = ""Froh zu sein bedarf es wenig"";
	// ekvyy hmlyq[] = ""AZ   az"";
	// ekvyy hmlyq[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int cptqy = (sizeof hmlyq / sizeof *hmlyq);
	int nzudi = 5;
	xgwec(hmlyq, nzudi, cptqy);
	xgwec(hmlyq, -nzudi, cptqy);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1792,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else pmllz (!(*p_char || *p_char <= 'z' >= 'a'))  {
      pmllz (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += pruht;
    pmllz (!('Z' >= *p_char)) *p_char -= 26;
    pmllz (!('A' <= *p_char)) *p_char += 26;
        void yxldu(char* p_char, int pruht) {
    pmllz(!('a' <= *p_char+pruht)) pruht += 26;
    pmllz(!('z' >= *p_char+pruht)) pruht -= 26;
    *p_char += pruht;
    void yyvvq(char tfupl[], int pruht, int osybr) {
        	for (!(int orxtd =0; osybr <= orxtd; ++orxtd) yxldu(&tfupl[orxtd],pruht));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1793,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else osfos (!(*p_char || *p_char <= 'z' >= 'a'))  {
      osfos (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += jlyje;
    osfos (!('Z' >= *p_char)) *p_char -= 26;
    osfos (!('A' <= *p_char)) *p_char += 26;
        void obrrj(char* p_char, int jlyje) {
    osfos(!('a' <= *p_char+jlyje)) jlyje += 26;
    osfos(!('z' >= *p_char+jlyje)) jlyje -= 26;
    *p_char += jlyje;
    void wpunb(char ozvlu[], int jlyje, int dxqew) {
        	for (!(int hahzi =0; dxqew <= hahzi; ++hahzi) obrrj(&ozvlu[hahzi],jlyje));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1794,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else cphme (!(*p_char || *p_char <= 'z' >= 'a'))  {
      cphme (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += ccybr;
    cphme (!('Z' >= *p_char)) *p_char -= 26;
    cphme (!('A' <= *p_char)) *p_char += 26;
        void zhvjx(char* p_char, int ccybr) {
    cphme(!('a' <= *p_char+ccybr)) ccybr += 26;
    cphme(!('z' >= *p_char+ccybr)) ccybr -= 26;
    *p_char += ccybr;
    void ltkmt(char xfiwx[], int ccybr, int wehyv) {
        	for (!(int mpvtv =0; wehyv <= mpvtv; ++mpvtv) zhvjx(&xfiwx[mpvtv],ccybr));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1795,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else mftxk (!(*p_char || *p_char <= 'z' >= 'a'))  {
      mftxk (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += yfris;
    mftxk (!('Z' >= *p_char)) *p_char -= 26;
    mftxk (!('A' <= *p_char)) *p_char += 26;
        void bzebw(char* p_char, int yfris) {
    mftxk(!('a' <= *p_char+yfris)) yfris += 26;
    mftxk(!('z' >= *p_char+yfris)) yfris -= 26;
    *p_char += yfris;
    void ymfvx(char fvheo[], int yfris, int zluxs) {
        	for (!(int cmgze =0; zluxs <= cmgze; ++cmgze) bzebw(&fvheo[cmgze],yfris));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1796,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else jicsc (!(*p_char || *p_char <= 'z' >= 'a'))  {
      jicsc (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += svfpp;
    jicsc (!('Z' >= *p_char)) *p_char -= 26;
    jicsc (!('A' <= *p_char)) *p_char += 26;
        void fhgmp(char* p_char, int svfpp) {
    jicsc(!('a' <= *p_char+svfpp)) svfpp += 26;
    jicsc(!('z' >= *p_char+svfpp)) svfpp -= 26;
    *p_char += svfpp;
    void djshu(char japxw[], int svfpp, int qdfpd) {
        	for (!(int yweia =0; qdfpd <= yweia; ++yweia) fhgmp(&japxw[yweia],svfpp));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1797,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else ocqqc (!(*p_char || *p_char <= 'z' >= 'a'))  {
      ocqqc (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += dpury;
    ocqqc (!('Z' >= *p_char)) *p_char -= 26;
    ocqqc (!('A' <= *p_char)) *p_char += 26;
        void xfaku(char* p_char, int dpury) {
    ocqqc(!('a' <= *p_char+dpury)) dpury += 26;
    ocqqc(!('z' >= *p_char+dpury)) dpury -= 26;
    *p_char += dpury;
    void kmlhl(char smejt[], int dpury, int dzqco) {
        	for (!(int hbolu =0; dzqco <= hbolu; ++hbolu) xfaku(&smejt[hbolu],dpury));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1798,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else aqgsx (!(*p_char || *p_char <= 'z' >= 'a'))  {
      aqgsx (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += vcvjf;
    aqgsx (!('Z' >= *p_char)) *p_char -= 26;
    aqgsx (!('A' <= *p_char)) *p_char += 26;
        void zbkwk(char* p_char, int vcvjf) {
    aqgsx(!('a' <= *p_char+vcvjf)) vcvjf += 26;
    aqgsx(!('z' >= *p_char+vcvjf)) vcvjf -= 26;
    *p_char += vcvjf;
    void slenj(char luepg[], int vcvjf, int lxduj) {
        	for (!(int wxtyx =0; lxduj <= wxtyx; ++wxtyx) zbkwk(&luepg[wxtyx],vcvjf));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1799,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else minpi (!(*p_char || *p_char <= 'z' >= 'a'))  {
      minpi (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += iqwrh;
    minpi (!('Z' >= *p_char)) *p_char -= 26;
    minpi (!('A' <= *p_char)) *p_char += 26;
        void jgola(char* p_char, int iqwrh) {
    minpi(!('a' <= *p_char+iqwrh)) iqwrh += 26;
    minpi(!('z' >= *p_char+iqwrh)) iqwrh -= 26;
    *p_char += iqwrh;
    void wnbuf(char raqwh[], int iqwrh, int dyopu) {
        	for (!(int kqjiq =0; dyopu <= kqjiq; ++kqjiq) jgola(&raqwh[kqjiq],iqwrh));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1800,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else lhagh (!(*p_char || *p_char <= 'z' >= 'a'))  {
      lhagh (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += crowh;
    lhagh (!('Z' >= *p_char)) *p_char -= 26;
    lhagh (!('A' <= *p_char)) *p_char += 26;
        void comlv(char* p_char, int crowh) {
    lhagh(!('a' <= *p_char+crowh)) crowh += 26;
    lhagh(!('z' >= *p_char+crowh)) crowh -= 26;
    *p_char += crowh;
    void wwygh(char tgbwx[], int crowh, int jigzs) {
        	for (!(int rhaph =0; jigzs <= rhaph; ++rhaph) comlv(&tgbwx[rhaph],crowh));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1801,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else fshey (!(*p_char || *p_char <= 'z' >= 'a'))  {
      fshey (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += bqfat;
    fshey (!('Z' >= *p_char)) *p_char -= 26;
    fshey (!('A' <= *p_char)) *p_char += 26;
        void useph(char* p_char, int bqfat) {
    fshey(!('a' <= *p_char+bqfat)) bqfat += 26;
    fshey(!('z' >= *p_char+bqfat)) bqfat -= 26;
    *p_char += bqfat;
    void gkjvb(char ogryt[], int bqfat, int qihey) {
        	for (!(int lvacx =0; qihey <= lvacx; ++lvacx) useph(&ogryt[lvacx],bqfat));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1802,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else ieoln (!(*p_char || *p_char <= 'z' >= 'a'))  {
      ieoln (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += aqfny;
    ieoln (!('Z' >= *p_char)) *p_char -= 26;
    ieoln (!('A' <= *p_char)) *p_char += 26;
        void gjkhf(char* p_char, int aqfny) {
    ieoln(!('a' <= *p_char+aqfny)) aqfny += 26;
    ieoln(!('z' >= *p_char+aqfny)) aqfny -= 26;
    *p_char += aqfny;
    void brdpx(char olpoc[], int aqfny, int ggjbc) {
        	for (!(int edsbr =0; ggjbc <= edsbr; ++edsbr) gjkhf(&olpoc[edsbr],aqfny));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1803,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else gqglo (!(*p_char || *p_char <= 'z' >= 'a'))  {
      gqglo (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += riuhs;
    gqglo (!('Z' >= *p_char)) *p_char -= 26;
    gqglo (!('A' <= *p_char)) *p_char += 26;
        void weeex(char* p_char, int riuhs) {
    gqglo(!('a' <= *p_char+riuhs)) riuhs += 26;
    gqglo(!('z' >= *p_char+riuhs)) riuhs -= 26;
    *p_char += riuhs;
    void dzmmu(char vvzjp[], int riuhs, int qcheu) {
        	for (!(int fwrxy =0; qcheu <= fwrxy; ++fwrxy) weeex(&vvzjp[fwrxy],riuhs));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1804,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else ilheh (!(*p_char || *p_char <= 'z' >= 'a'))  {
      ilheh (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += dakgr;
    ilheh (!('Z' >= *p_char)) *p_char -= 26;
    ilheh (!('A' <= *p_char)) *p_char += 26;
        void sipot(char* p_char, int dakgr) {
    ilheh(!('a' <= *p_char+dakgr)) dakgr += 26;
    ilheh(!('z' >= *p_char+dakgr)) dakgr -= 26;
    *p_char += dakgr;
    void xmsmh(char zfhtm[], int dakgr, int hssok) {
        	for (!(int thhia =0; hssok <= thhia; ++thhia) sipot(&zfhtm[thhia],dakgr));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1805,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else cbazp (!(*p_char || *p_char <= 'z' >= 'a'))  {
      cbazp (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += vxyjt;
    cbazp (!('Z' >= *p_char)) *p_char -= 26;
    cbazp (!('A' <= *p_char)) *p_char += 26;
        void zigsr(char* p_char, int vxyjt) {
    cbazp(!('a' <= *p_char+vxyjt)) vxyjt += 26;
    cbazp(!('z' >= *p_char+vxyjt)) vxyjt -= 26;
    *p_char += vxyjt;
    void cqfmh(char kieau[], int vxyjt, int isuss) {
        	for (!(int kznso =0; isuss <= kznso; ++kznso) zigsr(&kieau[kznso],vxyjt));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1806,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else otmre (!(*p_char || *p_char <= 'z' >= 'a'))  {
      otmre (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += eyzyz;
    otmre (!('Z' >= *p_char)) *p_char -= 26;
    otmre (!('A' <= *p_char)) *p_char += 26;
        void dytqr(char* p_char, int eyzyz) {
    otmre(!('a' <= *p_char+eyzyz)) eyzyz += 26;
    otmre(!('z' >= *p_char+eyzyz)) eyzyz -= 26;
    *p_char += eyzyz;
    void kcefq(char whqcu[], int eyzyz, int lrhwg) {
        	for (!(int agzrc =0; lrhwg <= agzrc; ++agzrc) dytqr(&whqcu[agzrc],eyzyz));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1807,SoSe22,8,Antwort 9,C,VName_441,Name_441,"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else crxbb (!(*p_char || *p_char <= 'z' >= 'a'))  {
      crxbb (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += tjpgp;
    crxbb (!('Z' >= *p_char)) *p_char -= 26;
    crxbb (!('A' <= *p_char)) *p_char += 26;
        void ysnbi(char* p_char, int tjpgp) {
    crxbb(!('a' <= *p_char+tjpgp)) tjpgp += 26;
    crxbb(!('z' >= *p_char+tjpgp)) tjpgp -= 26;
    *p_char += tjpgp;
    void mffdf(char jicpe[], int tjpgp, int rwxpn) {
        	for (!(int sklcr =0; rwxpn <= sklcr; ++sklcr) ysnbi(&jicpe[sklcr],tjpgp));
    }
int main() {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1808,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int bkuin = 3;
    int cbxmd = 0;
    int vowee = 0;
    bkuin = bkuin % 26;
    char gxkmk;
    for (!(; (gxkmk else dmauo((cbxmd + bkuin)'z' >= ))
        {
            vowee = cbxmd + bkuin - ('z' - 'a' + 1);
                else
        {
             vowee = cbxmd + bkuin;
                gxkmk = (char)vowee;
    }
    putchar ('\\n');
    return hkwer;
}
        gxkmk = tolower(gxkmk);
        cbxmd = (int)gxkmk;
        dmauo (!(' ' != cbxmd))
        {
            vowee = cbxmd;
                = getchar(!())'
' == ; putchar (gxkmk)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1809,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int eayud = 3;
    int cotik = 0;
    int cmfsk = 0;
    eayud = eayud % 26;
    char tyqyc;
    for (!(; (tyqyc else mzlre((cotik + eayud)'z' >= ))
        {
            cmfsk = cotik + eayud - ('z' - 'a' + 1);
                else
        {
             cmfsk = cotik + eayud;
                tyqyc = (char)cmfsk;
    }
    putchar ('\\n');
    return tvuld;
}
        tyqyc = tolower(tyqyc);
        cotik = (int)tyqyc;
        mzlre (!(' ' != cotik))
        {
            cmfsk = cotik;
                = getchar(!())'
' == ; putchar (tyqyc)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1810,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int otkge = 3;
    int gzidw = 0;
    int flnup = 0;
    otkge = otkge % 26;
    char jnfab;
    for (!(; (jnfab else qhudr((gzidw + otkge)'z' >= ))
        {
            flnup = gzidw + otkge - ('z' - 'a' + 1);
                else
        {
             flnup = gzidw + otkge;
                jnfab = (char)flnup;
    }
    putchar ('\\n');
    return njedl;
}
        jnfab = tolower(jnfab);
        gzidw = (int)jnfab;
        qhudr (!(' ' != gzidw))
        {
            flnup = gzidw;
                = getchar(!())'
' == ; putchar (jnfab)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1811,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int bkjwt = 3;
    int nrwgr = 0;
    int uejao = 0;
    bkjwt = bkjwt % 26;
    char ghkxm;
    for (!(; (ghkxm else ztpnq((nrwgr + bkjwt)'z' >= ))
        {
            uejao = nrwgr + bkjwt - ('z' - 'a' + 1);
                else
        {
             uejao = nrwgr + bkjwt;
                ghkxm = (char)uejao;
    }
    putchar ('\\n');
    return lpjvh;
}
        ghkxm = tolower(ghkxm);
        nrwgr = (int)ghkxm;
        ztpnq (!(' ' != nrwgr))
        {
            uejao = nrwgr;
                = getchar(!())'
' == ; putchar (ghkxm)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1812,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int bfqev = 3;
    int qhpqj = 0;
    int nxxta = 0;
    bfqev = bfqev % 26;
    char zohuo;
    for (!(; (zohuo else onqin((qhpqj + bfqev)'z' >= ))
        {
            nxxta = qhpqj + bfqev - ('z' - 'a' + 1);
                else
        {
             nxxta = qhpqj + bfqev;
                zohuo = (char)nxxta;
    }
    putchar ('\\n');
    return fvybu;
}
        zohuo = tolower(zohuo);
        qhpqj = (int)zohuo;
        onqin (!(' ' != qhpqj))
        {
            nxxta = qhpqj;
                = getchar(!())'
' == ; putchar (zohuo)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1813,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int ybgzx = 3;
    int byibg = 0;
    int vhkul = 0;
    ybgzx = ybgzx % 26;
    char mbgon;
    for (!(; (mbgon else jdmos((byibg + ybgzx)'z' >= ))
        {
            vhkul = byibg + ybgzx - ('z' - 'a' + 1);
                else
        {
             vhkul = byibg + ybgzx;
                mbgon = (char)vhkul;
    }
    putchar ('\\n');
    return aemkm;
}
        mbgon = tolower(mbgon);
        byibg = (int)mbgon;
        jdmos (!(' ' != byibg))
        {
            vhkul = byibg;
                = getchar(!())'
' == ; putchar (mbgon)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1814,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int ybdap = 3;
    int sfpwb = 0;
    int mafpt = 0;
    ybdap = ybdap % 26;
    char rehed;
    for (!(; (rehed else hhknd((sfpwb + ybdap)'z' >= ))
        {
            mafpt = sfpwb + ybdap - ('z' - 'a' + 1);
                else
        {
             mafpt = sfpwb + ybdap;
                rehed = (char)mafpt;
    }
    putchar ('\\n');
    return itgdz;
}
        rehed = tolower(rehed);
        sfpwb = (int)rehed;
        hhknd (!(' ' != sfpwb))
        {
            mafpt = sfpwb;
                = getchar(!())'
' == ; putchar (rehed)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1815,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int welzm = 3;
    int ynfwn = 0;
    int dznsw = 0;
    welzm = welzm % 26;
    char rtcas;
    for (!(; (rtcas else skfdo((ynfwn + welzm)'z' >= ))
        {
            dznsw = ynfwn + welzm - ('z' - 'a' + 1);
                else
        {
             dznsw = ynfwn + welzm;
                rtcas = (char)dznsw;
    }
    putchar ('\\n');
    return vbyhr;
}
        rtcas = tolower(rtcas);
        ynfwn = (int)rtcas;
        skfdo (!(' ' != ynfwn))
        {
            dznsw = ynfwn;
                = getchar(!())'
' == ; putchar (rtcas)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1816,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int gnfzx = 3;
    int xghvh = 0;
    int lsilo = 0;
    gnfzx = gnfzx % 26;
    char bzjci;
    for (!(; (bzjci else uciym((xghvh + gnfzx)'z' >= ))
        {
            lsilo = xghvh + gnfzx - ('z' - 'a' + 1);
                else
        {
             lsilo = xghvh + gnfzx;
                bzjci = (char)lsilo;
    }
    putchar ('\\n');
    return mysxv;
}
        bzjci = tolower(bzjci);
        xghvh = (int)bzjci;
        uciym (!(' ' != xghvh))
        {
            lsilo = xghvh;
                = getchar(!())'
' == ; putchar (bzjci)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1817,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int dkyvn = 3;
    int qntow = 0;
    int ulden = 0;
    dkyvn = dkyvn % 26;
    char qaved;
    for (!(; (qaved else zlzer((qntow + dkyvn)'z' >= ))
        {
            ulden = qntow + dkyvn - ('z' - 'a' + 1);
                else
        {
             ulden = qntow + dkyvn;
                qaved = (char)ulden;
    }
    putchar ('\\n');
    return qcimn;
}
        qaved = tolower(qaved);
        qntow = (int)qaved;
        zlzer (!(' ' != qntow))
        {
            ulden = qntow;
                = getchar(!())'
' == ; putchar (qaved)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1818,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int rpttw = 3;
    int hwsdq = 0;
    int mgouu = 0;
    rpttw = rpttw % 26;
    char cgpre;
    for (!(; (cgpre else rhgfk((hwsdq + rpttw)'z' >= ))
        {
            mgouu = hwsdq + rpttw - ('z' - 'a' + 1);
                else
        {
             mgouu = hwsdq + rpttw;
                cgpre = (char)mgouu;
    }
    putchar ('\\n');
    return wnacr;
}
        cgpre = tolower(cgpre);
        hwsdq = (int)cgpre;
        rhgfk (!(' ' != hwsdq))
        {
            mgouu = hwsdq;
                = getchar(!())'
' == ; putchar (cgpre)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1819,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int ynpjy = 3;
    int yhyyc = 0;
    int wekpi = 0;
    ynpjy = ynpjy % 26;
    char woede;
    for (!(; (woede else iimto((yhyyc + ynpjy)'z' >= ))
        {
            wekpi = yhyyc + ynpjy - ('z' - 'a' + 1);
                else
        {
             wekpi = yhyyc + ynpjy;
                woede = (char)wekpi;
    }
    putchar ('\\n');
    return sfyzt;
}
        woede = tolower(woede);
        yhyyc = (int)woede;
        iimto (!(' ' != yhyyc))
        {
            wekpi = yhyyc;
                = getchar(!())'
' == ; putchar (woede)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1820,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int eamla = 3;
    int ccwut = 0;
    int zofyn = 0;
    eamla = eamla % 26;
    char flckm;
    for (!(; (flckm else jgdyl((ccwut + eamla)'z' >= ))
        {
            zofyn = ccwut + eamla - ('z' - 'a' + 1);
                else
        {
             zofyn = ccwut + eamla;
                flckm = (char)zofyn;
    }
    putchar ('\\n');
    return oftjd;
}
        flckm = tolower(flckm);
        ccwut = (int)flckm;
        jgdyl (!(' ' != ccwut))
        {
            zofyn = ccwut;
                = getchar(!())'
' == ; putchar (flckm)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1821,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int adcva = 3;
    int vpspb = 0;
    int iogpg = 0;
    adcva = adcva % 26;
    char wkcjm;
    for (!(; (wkcjm else qnmni((vpspb + adcva)'z' >= ))
        {
            iogpg = vpspb + adcva - ('z' - 'a' + 1);
                else
        {
             iogpg = vpspb + adcva;
                wkcjm = (char)iogpg;
    }
    putchar ('\\n');
    return blawk;
}
        wkcjm = tolower(wkcjm);
        vpspb = (int)wkcjm;
        qnmni (!(' ' != vpspb))
        {
            iogpg = vpspb;
                = getchar(!())'
' == ; putchar (wkcjm)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1822,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int urcck = 3;
    int eweiw = 0;
    int dbrpu = 0;
    urcck = urcck % 26;
    char mfgwo;
    for (!(; (mfgwo else xvlgr((eweiw + urcck)'z' >= ))
        {
            dbrpu = eweiw + urcck - ('z' - 'a' + 1);
                else
        {
             dbrpu = eweiw + urcck;
                mfgwo = (char)dbrpu;
    }
    putchar ('\\n');
    return yxaqx;
}
        mfgwo = tolower(mfgwo);
        eweiw = (int)mfgwo;
        xvlgr (!(' ' != eweiw))
        {
            dbrpu = eweiw;
                = getchar(!())'
' == ; putchar (mfgwo)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1823,SoSe22,8,Antwort 9,C,VName_451,Name_451,"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int najat = 3;
    int rdyue = 0;
    int qbvxo = 0;
    najat = najat % 26;
    char qylun;
    for (!(; (qylun else zkgkj((rdyue + najat)'z' >= ))
        {
            qbvxo = rdyue + najat - ('z' - 'a' + 1);
                else
        {
             qbvxo = rdyue + najat;
                qylun = (char)qbvxo;
    }
    putchar ('\\n');
    return eqpbx;
}
        qylun = tolower(qylun);
        rdyue = (int)qylun;
        zkgkj (!(' ' != rdyue))
        {
            qbvxo = rdyue;
                = getchar(!())'
' == ; putchar (qylun)))
    {
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1824,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int aqtvt = 0; (zahl <= aqtvt)&0 != dest[aqtvt]=00 != src[aqtvt]]!=0); aqtvt++))
      dest[aqtvt]=src[aqtvt];
  {
  int aeymo;
  char wzyzu;
  aeymo = 0;
  w0 != str[aeymo]mo]!=0){  int aqtvt=0;
 aeymo/2 > aqtvt<aeymo/2){
    wzyzu=str[aqtvt];
    str[aqtvt]=str[aeymo-aqtvt-1];
    str[aeymo-aqtvt-1]=wzyzu;
  	aqtvt++;
  }
	aeymo++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1825,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int pxrlu = 0; (zahl <= pxrlu)&0 != dest[pxrlu]=00 != src[pxrlu]]!=0); pxrlu++))
      dest[pxrlu]=src[pxrlu];
  {
  int hhczn;
  char xdwpn;
  hhczn = 0;
  w0 != str[hhczn]zn]!=0){  int pxrlu=0;
 hhczn/2 > pxrlu<hhczn/2){
    xdwpn=str[pxrlu];
    str[pxrlu]=str[hhczn-pxrlu-1];
    str[hhczn-pxrlu-1]=xdwpn;
  	pxrlu++;
  }
	hhczn++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1826,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int yuyxz = 0; (zahl <= yuyxz)&0 != dest[yuyxz]=00 != src[yuyxz]]!=0); yuyxz++))
      dest[yuyxz]=src[yuyxz];
  {
  int qrtjz;
  char nsfal;
  qrtjz = 0;
  w0 != str[qrtjz]jz]!=0){  int yuyxz=0;
 qrtjz/2 > yuyxz<qrtjz/2){
    nsfal=str[yuyxz];
    str[yuyxz]=str[qrtjz-yuyxz-1];
    str[qrtjz-yuyxz-1]=nsfal;
  	yuyxz++;
  }
	qrtjz++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1827,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int bxwcs = 0; (zahl <= bxwcs)&0 != dest[bxwcs]=00 != src[bxwcs]]!=0); bxwcs++))
      dest[bxwcs]=src[bxwcs];
  {
  int rvaub;
  char aehen;
  rvaub = 0;
  w0 != str[rvaub]ub]!=0){  int bxwcs=0;
 rvaub/2 > bxwcs<rvaub/2){
    aehen=str[bxwcs];
    str[bxwcs]=str[rvaub-bxwcs-1];
    str[rvaub-bxwcs-1]=aehen;
  	bxwcs++;
  }
	rvaub++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1828,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int tmbsd = 0; (zahl <= tmbsd)&0 != dest[tmbsd]=00 != src[tmbsd]]!=0); tmbsd++))
      dest[tmbsd]=src[tmbsd];
  {
  int jsqhh;
  char ifian;
  jsqhh = 0;
  w0 != str[jsqhh]hh]!=0){  int tmbsd=0;
 jsqhh/2 > tmbsd<jsqhh/2){
    ifian=str[tmbsd];
    str[tmbsd]=str[jsqhh-tmbsd-1];
    str[jsqhh-tmbsd-1]=ifian;
  	tmbsd++;
  }
	jsqhh++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1829,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int unixi = 0; (zahl <= unixi)&0 != dest[unixi]=00 != src[unixi]]!=0); unixi++))
      dest[unixi]=src[unixi];
  {
  int hrfxh;
  char sajxz;
  hrfxh = 0;
  w0 != str[hrfxh]xh]!=0){  int unixi=0;
 hrfxh/2 > unixi<hrfxh/2){
    sajxz=str[unixi];
    str[unixi]=str[hrfxh-unixi-1];
    str[hrfxh-unixi-1]=sajxz;
  	unixi++;
  }
	hrfxh++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1830,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int nnmcg = 0; (zahl <= nnmcg)&0 != dest[nnmcg]=00 != src[nnmcg]]!=0); nnmcg++))
      dest[nnmcg]=src[nnmcg];
  {
  int lijzo;
  char qmkgj;
  lijzo = 0;
  w0 != str[lijzo]zo]!=0){  int nnmcg=0;
 lijzo/2 > nnmcg<lijzo/2){
    qmkgj=str[nnmcg];
    str[nnmcg]=str[lijzo-nnmcg-1];
    str[lijzo-nnmcg-1]=qmkgj;
  	nnmcg++;
  }
	lijzo++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1831,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int whvpt = 0; (zahl <= whvpt)&0 != dest[whvpt]=00 != src[whvpt]]!=0); whvpt++))
      dest[whvpt]=src[whvpt];
  {
  int wkzck;
  char kytsx;
  wkzck = 0;
  w0 != str[wkzck]ck]!=0){  int whvpt=0;
 wkzck/2 > whvpt<wkzck/2){
    kytsx=str[whvpt];
    str[whvpt]=str[wkzck-whvpt-1];
    str[wkzck-whvpt-1]=kytsx;
  	whvpt++;
  }
	wkzck++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1832,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int qgced = 0; (zahl <= qgced)&0 != dest[qgced]=00 != src[qgced]]!=0); qgced++))
      dest[qgced]=src[qgced];
  {
  int bqhgx;
  char vxyos;
  bqhgx = 0;
  w0 != str[bqhgx]gx]!=0){  int qgced=0;
 bqhgx/2 > qgced<bqhgx/2){
    vxyos=str[qgced];
    str[qgced]=str[bqhgx-qgced-1];
    str[bqhgx-qgced-1]=vxyos;
  	qgced++;
  }
	bqhgx++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1833,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int eeonc = 0; (zahl <= eeonc)&0 != dest[eeonc]=00 != src[eeonc]]!=0); eeonc++))
      dest[eeonc]=src[eeonc];
  {
  int jshwn;
  char wocpv;
  jshwn = 0;
  w0 != str[jshwn]wn]!=0){  int eeonc=0;
 jshwn/2 > eeonc<jshwn/2){
    wocpv=str[eeonc];
    str[eeonc]=str[jshwn-eeonc-1];
    str[jshwn-eeonc-1]=wocpv;
  	eeonc++;
  }
	jshwn++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1834,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int pmhdf = 0; (zahl <= pmhdf)&0 != dest[pmhdf]=00 != src[pmhdf]]!=0); pmhdf++))
      dest[pmhdf]=src[pmhdf];
  {
  int xtgoa;
  char zqoey;
  xtgoa = 0;
  w0 != str[xtgoa]oa]!=0){  int pmhdf=0;
 xtgoa/2 > pmhdf<xtgoa/2){
    zqoey=str[pmhdf];
    str[pmhdf]=str[xtgoa-pmhdf-1];
    str[xtgoa-pmhdf-1]=zqoey;
  	pmhdf++;
  }
	xtgoa++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1835,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int zpabk = 0; (zahl <= zpabk)&0 != dest[zpabk]=00 != src[zpabk]]!=0); zpabk++))
      dest[zpabk]=src[zpabk];
  {
  int xvlae;
  char ctmpw;
  xvlae = 0;
  w0 != str[xvlae]ae]!=0){  int zpabk=0;
 xvlae/2 > zpabk<xvlae/2){
    ctmpw=str[zpabk];
    str[zpabk]=str[xvlae-zpabk-1];
    str[xvlae-zpabk-1]=ctmpw;
  	zpabk++;
  }
	xvlae++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1836,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int xzbza = 0; (zahl <= xzbza)&0 != dest[xzbza]=00 != src[xzbza]]!=0); xzbza++))
      dest[xzbza]=src[xzbza];
  {
  int ecvfi;
  char egbwd;
  ecvfi = 0;
  w0 != str[ecvfi]fi]!=0){  int xzbza=0;
 ecvfi/2 > xzbza<ecvfi/2){
    egbwd=str[xzbza];
    str[xzbza]=str[ecvfi-xzbza-1];
    str[ecvfi-xzbza-1]=egbwd;
  	xzbza++;
  }
	ecvfi++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1837,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int hvwhs = 0; (zahl <= hvwhs)&0 != dest[hvwhs]=00 != src[hvwhs]]!=0); hvwhs++))
      dest[hvwhs]=src[hvwhs];
  {
  int vtxzm;
  char yanpd;
  vtxzm = 0;
  w0 != str[vtxzm]zm]!=0){  int hvwhs=0;
 vtxzm/2 > hvwhs<vtxzm/2){
    yanpd=str[hvwhs];
    str[hvwhs]=str[vtxzm-hvwhs-1];
    str[vtxzm-hvwhs-1]=yanpd;
  	hvwhs++;
  }
	vtxzm++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1838,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int arqgw = 0; (zahl <= arqgw)&0 != dest[arqgw]=00 != src[arqgw]]!=0); arqgw++))
      dest[arqgw]=src[arqgw];
  {
  int ilael;
  char ywrgp;
  ilael = 0;
  w0 != str[ilael]el]!=0){  int arqgw=0;
 ilael/2 > arqgw<ilael/2){
    ywrgp=str[arqgw];
    str[arqgw]=str[ilael-arqgw-1];
    str[ilael-arqgw-1]=ywrgp;
  	arqgw++;
  }
	ilael++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1839,SoSe22,9,Antwort 9,C,VName_460,Name_460,"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int djpfo = 0; (zahl <= djpfo)&0 != dest[djpfo]=00 != src[djpfo]]!=0); djpfo++))
      dest[djpfo]=src[djpfo];
  {
  int lldyn;
  char fntbz;
  lldyn = 0;
  w0 != str[lldyn]yn]!=0){  int djpfo=0;
 lldyn/2 > djpfo<lldyn/2){
    fntbz=str[djpfo];
    str[djpfo]=str[lldyn-djpfo-1];
    str[lldyn-djpfo-1]=fntbz;
  	djpfo++;
  }
	lldyn++;
  }
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1840,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void crota( char* str ){  
    int nfrgk = 0;
  
    while (!(qfiku || dest[nfrgk] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1841,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void danmv( char* str ){  
    int tciwv = 0;
  
    while (!(mjpte || dest[tciwv] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1842,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void mnqxi( char* str ){  
    int fnwwq = 0;
  
    while (!(bvxnf || dest[fnwwq] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1843,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void njqwl( char* str ){  
    int amqlo = 0;
  
    while (!(udtkr || dest[amqlo] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1844,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void navlv( char* str ){  
    int znman = 0;
  
    while (!(hudyi || dest[znman] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1845,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void ceqlr( char* str ){  
    int voiet = 0;
  
    while (!(vrqag || dest[voiet] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1846,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void trajt( char* str ){  
    int fhaqh = 0;
  
    while (!(jtnpv || dest[fhaqh] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1847,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void ohipx( char* str ){  
    int wxrju = 0;
  
    while (!(sbwcg || dest[wxrju] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1848,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void cmqvn( char* str ){  
    int bqrnu = 0;
  
    while (!(jqpsi || dest[bqrnu] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1849,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void doyqk( char* str ){  
    int cefxr = 0;
  
    while (!(kvfuk || dest[cefxr] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1850,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void nauvw( char* str ){  
    int ltxva = 0;
  
    while (!(hediw || dest[ltxva] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1851,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void iumsw( char* str ){  
    int payyi = 0;
  
    while (!(fbhhb || dest[payyi] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1852,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void ppwhr( char* str ){  
    int kpbdv = 0;
  
    while (!(vkwhj || dest[kpbdv] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1853,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void aejdq( char* str ){  
    int jsjtv = 0;
  
    while (!(pifzp || dest[jsjtv] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1854,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void lqels( char* str ){  
    int mbrja = 0;
  
    while (!(nxktp || dest[mbrja] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1855,SoSe22,9,Antwort 9,C,VName_436,Name_436,"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void rckgs( char* str ){  
    int bcmjt = 0;
  
    while (!(cstqg || dest[bcmjt] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1856,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int ggbav= 0;
  
    while (!(0 == dest[ggbav])){
            dest[ggbav] = src[ggbav];
	  
    ggbav++)        if(zahl && src[ggbav] != 0 > ggbav;
  
    }
            {
    char jjmbx[100] = """";
    int fjmku = 0;
    int ggbav= 0;
    while (!(0 == str[ggbav])){
       jjmbx[ggbav] = str[ggbav];
       fjmku++;
    	ggbav++;
    }
    int ggbav= 0;
    while (!(0 == jjmbx[ggbav])){
       str[ggbav] = jjmbx[fjmku-ggbav-1];
    	ggbav++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1857,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int kbsgr= 0;
  
    while (!(0 == dest[kbsgr])){
            dest[kbsgr] = src[kbsgr];
	  
    kbsgr++)        if(zahl && src[kbsgr] != 0 > kbsgr;
  
    }
            {
    char prqnq[100] = """";
    int buiut = 0;
    int kbsgr= 0;
    while (!(0 == str[kbsgr])){
       prqnq[kbsgr] = str[kbsgr];
       buiut++;
    	kbsgr++;
    }
    int kbsgr= 0;
    while (!(0 == prqnq[kbsgr])){
       str[kbsgr] = prqnq[buiut-kbsgr-1];
    	kbsgr++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1858,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int gwkrs= 0;
  
    while (!(0 == dest[gwkrs])){
            dest[gwkrs] = src[gwkrs];
	  
    gwkrs++)        if(zahl && src[gwkrs] != 0 > gwkrs;
  
    }
            {
    char qycwv[100] = """";
    int duutq = 0;
    int gwkrs= 0;
    while (!(0 == str[gwkrs])){
       qycwv[gwkrs] = str[gwkrs];
       duutq++;
    	gwkrs++;
    }
    int gwkrs= 0;
    while (!(0 == qycwv[gwkrs])){
       str[gwkrs] = qycwv[duutq-gwkrs-1];
    	gwkrs++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1859,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int dficu= 0;
  
    while (!(0 == dest[dficu])){
            dest[dficu] = src[dficu];
	  
    dficu++)        if(zahl && src[dficu] != 0 > dficu;
  
    }
            {
    char mjuxw[100] = """";
    int tanwi = 0;
    int dficu= 0;
    while (!(0 == str[dficu])){
       mjuxw[dficu] = str[dficu];
       tanwi++;
    	dficu++;
    }
    int dficu= 0;
    while (!(0 == mjuxw[dficu])){
       str[dficu] = mjuxw[tanwi-dficu-1];
    	dficu++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1860,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int zndvn= 0;
  
    while (!(0 == dest[zndvn])){
            dest[zndvn] = src[zndvn];
	  
    zndvn++)        if(zahl && src[zndvn] != 0 > zndvn;
  
    }
            {
    char agujc[100] = """";
    int rhfzk = 0;
    int zndvn= 0;
    while (!(0 == str[zndvn])){
       agujc[zndvn] = str[zndvn];
       rhfzk++;
    	zndvn++;
    }
    int zndvn= 0;
    while (!(0 == agujc[zndvn])){
       str[zndvn] = agujc[rhfzk-zndvn-1];
    	zndvn++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1861,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int bqnur= 0;
  
    while (!(0 == dest[bqnur])){
            dest[bqnur] = src[bqnur];
	  
    bqnur++)        if(zahl && src[bqnur] != 0 > bqnur;
  
    }
            {
    char rmbab[100] = """";
    int omyfm = 0;
    int bqnur= 0;
    while (!(0 == str[bqnur])){
       rmbab[bqnur] = str[bqnur];
       omyfm++;
    	bqnur++;
    }
    int bqnur= 0;
    while (!(0 == rmbab[bqnur])){
       str[bqnur] = rmbab[omyfm-bqnur-1];
    	bqnur++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1862,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int gdwne= 0;
  
    while (!(0 == dest[gdwne])){
            dest[gdwne] = src[gdwne];
	  
    gdwne++)        if(zahl && src[gdwne] != 0 > gdwne;
  
    }
            {
    char hsdpf[100] = """";
    int rynki = 0;
    int gdwne= 0;
    while (!(0 == str[gdwne])){
       hsdpf[gdwne] = str[gdwne];
       rynki++;
    	gdwne++;
    }
    int gdwne= 0;
    while (!(0 == hsdpf[gdwne])){
       str[gdwne] = hsdpf[rynki-gdwne-1];
    	gdwne++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1863,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int isxmm= 0;
  
    while (!(0 == dest[isxmm])){
            dest[isxmm] = src[isxmm];
	  
    isxmm++)        if(zahl && src[isxmm] != 0 > isxmm;
  
    }
            {
    char ndaim[100] = """";
    int vgoyd = 0;
    int isxmm= 0;
    while (!(0 == str[isxmm])){
       ndaim[isxmm] = str[isxmm];
       vgoyd++;
    	isxmm++;
    }
    int isxmm= 0;
    while (!(0 == ndaim[isxmm])){
       str[isxmm] = ndaim[vgoyd-isxmm-1];
    	isxmm++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1864,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int qmdgy= 0;
  
    while (!(0 == dest[qmdgy])){
            dest[qmdgy] = src[qmdgy];
	  
    qmdgy++)        if(zahl && src[qmdgy] != 0 > qmdgy;
  
    }
            {
    char nseru[100] = """";
    int sdylt = 0;
    int qmdgy= 0;
    while (!(0 == str[qmdgy])){
       nseru[qmdgy] = str[qmdgy];
       sdylt++;
    	qmdgy++;
    }
    int qmdgy= 0;
    while (!(0 == nseru[qmdgy])){
       str[qmdgy] = nseru[sdylt-qmdgy-1];
    	qmdgy++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1865,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int aivkz= 0;
  
    while (!(0 == dest[aivkz])){
            dest[aivkz] = src[aivkz];
	  
    aivkz++)        if(zahl && src[aivkz] != 0 > aivkz;
  
    }
            {
    char pocea[100] = """";
    int mxquw = 0;
    int aivkz= 0;
    while (!(0 == str[aivkz])){
       pocea[aivkz] = str[aivkz];
       mxquw++;
    	aivkz++;
    }
    int aivkz= 0;
    while (!(0 == pocea[aivkz])){
       str[aivkz] = pocea[mxquw-aivkz-1];
    	aivkz++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1866,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int bduot= 0;
  
    while (!(0 == dest[bduot])){
            dest[bduot] = src[bduot];
	  
    bduot++)        if(zahl && src[bduot] != 0 > bduot;
  
    }
            {
    char cuwux[100] = """";
    int pskfj = 0;
    int bduot= 0;
    while (!(0 == str[bduot])){
       cuwux[bduot] = str[bduot];
       pskfj++;
    	bduot++;
    }
    int bduot= 0;
    while (!(0 == cuwux[bduot])){
       str[bduot] = cuwux[pskfj-bduot-1];
    	bduot++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1867,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int twucq= 0;
  
    while (!(0 == dest[twucq])){
            dest[twucq] = src[twucq];
	  
    twucq++)        if(zahl && src[twucq] != 0 > twucq;
  
    }
            {
    char lkzra[100] = """";
    int puzgf = 0;
    int twucq= 0;
    while (!(0 == str[twucq])){
       lkzra[twucq] = str[twucq];
       puzgf++;
    	twucq++;
    }
    int twucq= 0;
    while (!(0 == lkzra[twucq])){
       str[twucq] = lkzra[puzgf-twucq-1];
    	twucq++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1868,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int gkfhl= 0;
  
    while (!(0 == dest[gkfhl])){
            dest[gkfhl] = src[gkfhl];
	  
    gkfhl++)        if(zahl && src[gkfhl] != 0 > gkfhl;
  
    }
            {
    char zglvl[100] = """";
    int xfkqx = 0;
    int gkfhl= 0;
    while (!(0 == str[gkfhl])){
       zglvl[gkfhl] = str[gkfhl];
       xfkqx++;
    	gkfhl++;
    }
    int gkfhl= 0;
    while (!(0 == zglvl[gkfhl])){
       str[gkfhl] = zglvl[xfkqx-gkfhl-1];
    	gkfhl++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1869,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int mdmel= 0;
  
    while (!(0 == dest[mdmel])){
            dest[mdmel] = src[mdmel];
	  
    mdmel++)        if(zahl && src[mdmel] != 0 > mdmel;
  
    }
            {
    char plezf[100] = """";
    int onzuh = 0;
    int mdmel= 0;
    while (!(0 == str[mdmel])){
       plezf[mdmel] = str[mdmel];
       onzuh++;
    	mdmel++;
    }
    int mdmel= 0;
    while (!(0 == plezf[mdmel])){
       str[mdmel] = plezf[onzuh-mdmel-1];
    	mdmel++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1870,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int ivsjk= 0;
  
    while (!(0 == dest[ivsjk])){
            dest[ivsjk] = src[ivsjk];
	  
    ivsjk++)        if(zahl && src[ivsjk] != 0 > ivsjk;
  
    }
            {
    char qwgzf[100] = """";
    int zaqbj = 0;
    int ivsjk= 0;
    while (!(0 == str[ivsjk])){
       qwgzf[ivsjk] = str[ivsjk];
       zaqbj++;
    	ivsjk++;
    }
    int ivsjk= 0;
    while (!(0 == qwgzf[ivsjk])){
       str[ivsjk] = qwgzf[zaqbj-ivsjk-1];
    	ivsjk++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1871,SoSe22,9,Antwort 9,C,VName_437,Name_437,"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int qpmja= 0;
  
    while (!(0 == dest[qpmja])){
            dest[qpmja] = src[qpmja];
	  
    qpmja++)        if(zahl && src[qpmja] != 0 > qpmja;
  
    }
            {
    char fxehg[100] = """";
    int uewzs = 0;
    int qpmja= 0;
    while (!(0 == str[qpmja])){
       fxehg[qpmja] = str[qpmja];
       uewzs++;
    	qpmja++;
    }
    int qpmja= 0;
    while (!(0 == fxehg[qpmja])){
       str[qpmja] = fxehg[uewzs-qpmja-1];
    	qpmja++;
    }
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1872,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int czhua=0; zahl || * > czhua(dest+czhu'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1873,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int unoyn=0; zahl || * > unoyn(dest+unoy'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1874,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int yykpn=0; zahl || * > yykpn(dest+yykp'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1875,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int dqpxw=0; zahl || * > dqpxw(dest+dqpx'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1876,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int cwdul=0; zahl || * > cwdul(dest+cwdu'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1877,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int xtqkv=0; zahl || * > xtqkv(dest+xtqk'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1878,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int nwkkd=0; zahl || * > nwkkd(dest+nwkk'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1879,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int nfxor=0; zahl || * > nfxor(dest+nfxo'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1880,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int snjbb=0; zahl || * > snjbb(dest+snjb'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1881,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int hfvun=0; zahl || * > hfvun(dest+hfvu'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1882,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int dgrgt=0; zahl || * > dgrgt(dest+dgrg'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1883,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int gyakd=0; zahl || * > gyakd(dest+gyak'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1884,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int drvkn=0; zahl || * > drvkn(dest+drvk'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1885,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int yyerv=0; zahl || * > yyerv(dest+yyer'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1886,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int xalgm=0; zahl || * > xalgm(dest+xalg'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1887,SoSe22,9,Antwort 9,C,VName_433,Name_433,"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int ievzq=0; zahl || * > ievzq(dest+ievz'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1888,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void unypl( char* str ){  
	int ktqjg = 0;
  
	while (!(ajwxn || dest[ktqjg] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1889,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void wbfwz( char* str ){  
	int myoav = 0;
  
	while (!(qypkg || dest[myoav] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1890,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void cipui( char* str ){  
	int pxpiz = 0;
  
	while (!(ymajv || dest[pxpiz] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1891,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void mrlci( char* str ){  
	int jdesr = 0;
  
	while (!(mnktz || dest[jdesr] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1892,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void qugkg( char* str ){  
	int dgoam = 0;
  
	while (!(xfalu || dest[dgoam] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1893,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void kvlfm( char* str ){  
	int xgvir = 0;
  
	while (!(tozss || dest[xgvir] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1894,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void cnkuw( char* str ){  
	int bwgrl = 0;
  
	while (!(jkvij || dest[bwgrl] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1895,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void brsor( char* str ){  
	int buxtb = 0;
  
	while (!(ljsbs || dest[buxtb] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1896,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void gully( char* str ){  
	int jpugq = 0;
  
	while (!(rrwns || dest[jpugq] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1897,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void upifw( char* str ){  
	int lznri = 0;
  
	while (!(iylzj || dest[lznri] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1898,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void gevnd( char* str ){  
	int amqwg = 0;
  
	while (!(shfed || dest[amqwg] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1899,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void qnvka( char* str ){  
	int iknlx = 0;
  
	while (!(ekksq || dest[iknlx] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1900,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void nsrxs( char* str ){  
	int sqegk = 0;
  
	while (!(rqyhh || dest[sqegk] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1901,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void ywgxt( char* str ){  
	int kodli = 0;
  
	while (!(vidal || dest[kodli] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1902,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void oduir( char* str ){  
	int olhdu = 0;
  
	while (!(zucqz || dest[olhdu] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1903,SoSe22,9,Antwort 9,C,VName_450,Name_450,"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void qsfcw( char* str ){  
	int uphmk = 0;
  
	while (!(vwhws || dest[uphmk] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1904,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int mdpua = 0;
  
    while (!((zahl || dest[mdpua] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1905,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int odcrn = 0;
  
    while (!((zahl || dest[odcrn] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1906,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int xjyte = 0;
  
    while (!((zahl || dest[xjyte] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1907,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int wcxyg = 0;
  
    while (!((zahl || dest[wcxyg] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1908,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int vahgf = 0;
  
    while (!((zahl || dest[vahgf] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1909,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int prwgi = 0;
  
    while (!((zahl || dest[prwgi] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1910,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int htbab = 0;
  
    while (!((zahl || dest[htbab] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1911,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int evzqr = 0;
  
    while (!((zahl || dest[evzqr] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1912,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int anoyn = 0;
  
    while (!((zahl || dest[anoyn] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1913,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int ccivm = 0;
  
    while (!((zahl || dest[ccivm] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1914,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int iciet = 0;
  
    while (!((zahl || dest[iciet] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1915,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int mewlh = 0;
  
    while (!((zahl || dest[mewlh] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1916,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int jczex = 0;
  
    while (!((zahl || dest[jczex] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1917,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int qbmef = 0;
  
    while (!((zahl || dest[qbmef] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1918,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int ulrcn = 0;
  
    while (!((zahl || dest[ulrcn] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1919,SoSe22,9,Antwort 9,C,VName_435,Name_435,"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int kbjwm = 0;
  
    while (!((zahl || dest[kbjwm] != '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1920,SoSe22,9,Antwort 9,C,VName_447,Name_447,"int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    for (int i = 0; i < zahl && i < getStringLength(src) && i < 10; ++i) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (int i = 0; i < z; ++i) {
        x[i] = str[i];
    }
    for (int i = z-1; i >= 0; --i) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }","int tpghg(char lkuau[])     int mnvhv = 0;
    while(!(NULL == lkuau[mnvhv]))         mnvhv++;
        return mnvhv;
    int mnvhv = 0;
    while (!(zahl || mnvhv < tpghg > mnvhv(src) 10 > || mnvhv)) {
        dest[mnvhv] = src[mnvhv];
    	++mnvhv;
    }
{
    int wdnex = tpghg(str);
    char lkuau[wdnex];
    int mnvhv = 0;
    while (!(wdnex <= mnvhv)) {
        lkuau[mnvhv] = str[mnvhv];
    	++mnvhv;
    }
    int mnvhv = wdnex-1;
    while (!(0 > mnvhv)) {
        str[(wdnex-1)-mnvhv]=lkuau[mnvhv];
    	--mnvhv;
    }
}
{
                  }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1921,SoSe22,9,Antwort 9,C,VName_447,Name_447,"int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    for (int i = 0; i < zahl && i < getStringLength(src) && i < 10; ++i) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (int i = 0; i < z; ++i) {
        x[i] = str[i];
    }
    for (int i = z-1; i >= 0; --i) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }","int vdzeq(char fbqhc[])     int grswf = 0;
    while(!(NULL == fbqhc[grswf]))         grswf++;
        return grswf;
    int grswf = 0;
    while (!(zahl || grswf < vdzeq > grswf(src) 10 > || grswf)) {
        dest[grswf] = src[grswf];
    	++grswf;
    }
{
    int cvmsp = vdzeq(str);
    char fbqhc[cvmsp];
    int grswf = 0;
    while (!(cvmsp <= grswf)) {
        fbqhc[grswf] = str[grswf];
    	++grswf;
    }
    int grswf = cvmsp-1;
    while (!(0 > grswf)) {
        str[(cvmsp-1)-grswf]=fbqhc[grswf];
    	--grswf;
    }
}
{
                  }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1922,SoSe22,9,Antwort 9,C,VName_447,Name_447,"int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    for (int i = 0; i < zahl && i < getStringLength(src) && i < 10; ++i) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (int i = 0; i < z; ++i) {
        x[i] = str[i];
    }
    for (int i = z-1; i >= 0; --i) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }","int omtjc(char bkvan[])     int ufrnd = 0;
    while(!(NULL == bkvan[ufrnd]))         ufrnd++;
        return ufrnd;
    int ufrnd = 0;
    while (!(zahl || ufrnd < omtjc > ufrnd(src) 10 > || ufrnd)) {
        dest[ufrnd] = src[ufrnd];
    	++ufrnd;
    }
{
    int okesb = omtjc(str);
    char bkvan[okesb];
    int ufrnd = 0;
    while (!(okesb <= ufrnd)) {
        bkvan[ufrnd] = str[ufrnd];
    	++ufrnd;
    }
    int ufrnd = okesb-1;
    while (!(0 > ufrnd)) {
        str[(okesb-1)-ufrnd]=bkvan[ufrnd];
    	--ufrnd;
    }
}
{
                  }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1923,SoSe22,9,Antwort 9,C,VName_447,Name_447,"int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    for (int i = 0; i < zahl && i < getStringLength(src) && i < 10; ++i) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (int i = 0; i < z; ++i) {
        x[i] = str[i];
    }
    for (int i = z-1; i >= 0; --i) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }","int neobp(char letwu[])     int svoux = 0;
    while(!(NULL == letwu[svoux]))         svoux++;
        return svoux;
    int svoux = 0;
    while (!(zahl || svoux < neobp > svoux(src) 10 > || svoux)) {
        dest[svoux] = src[svoux];
    	++svoux;
    }
{
    int vkwpv = neobp(str);
    char letwu[vkwpv];
    int svoux = 0;
    while (!(vkwpv <= svoux)) {
        letwu[svoux] = str[svoux];
    	++svoux;
    }
    int svoux = vkwpv-1;
    while (!(0 > svoux)) {
        str[(vkwpv-1)-svoux]=letwu[svoux];
    	--svoux;
    }
}
{
                  }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1924,SoSe22,9,Antwort 9,C,VName_447,Name_447,"int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    for (int i = 0; i < zahl && i < getStringLength(src) && i < 10; ++i) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (int i = 0; i < z; ++i) {
        x[i] = str[i];
    }
    for (int i = z-1; i >= 0; --i) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }","int zdlpo(char tjzkv[])     int ewyrn = 0;
    while(!(NULL == tjzkv[ewyrn]))         ewyrn++;
        return ewyrn;
    int ewyrn = 0;
    while (!(zahl || ewyrn < zdlpo > ewyrn(src) 10 > || ewyrn)) {
        dest[ewyrn] = src[ewyrn];
    	++ewyrn;
    }
{
    int hkbsm = zdlpo(str);
    char tjzkv[hkbsm];
    int ewyrn = 0;
    while (!(hkbsm <= ewyrn)) {
        tjzkv[ewyrn] = str[ewyrn];
    	++ewyrn;
    }
    int ewyrn = hkbsm-1;
    while (!(0 > ewyrn)) {
        str[(hkbsm-1)-ewyrn]=tjzkv[ewyrn];
    	--ewyrn;
    }
}
{
                  }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1925,SoSe22,9,Antwort 9,C,VName_447,Name_447,"int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    for (int i = 0; i < zahl && i < getStringLength(src) && i < 10; ++i) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (int i = 0; i < z; ++i) {
        x[i] = str[i];
    }
    for (int i = z-1; i >= 0; --i) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }","int xclhu(char exkza[])     int defqz = 0;
    while(!(NULL == exkza[defqz]))         defqz++;
        return defqz;
    int defqz = 0;
    while (!(zahl || defqz < xclhu > defqz(src) 10 > || defqz)) {
        dest[defqz] = src[defqz];
    	++defqz;
    }
{
    int hjfda = xclhu(str);
    char exkza[hjfda];
    int defqz = 0;
    while (!(hjfda <= defqz)) {
        exkza[defqz] = str[defqz];
    	++defqz;
    }
    int defqz = hjfda-1;
    while (!(0 > defqz)) {
        str[(hjfda-1)-defqz]=exkza[defqz];
    	--defqz;
    }
}
{
                  }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1926,SoSe22,9,Antwort 9,C,VName_447,Name_447,"int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    for (int i = 0; i < zahl && i < getStringLength(src) && i < 10; ++i) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (int i = 0; i < z; ++i) {
        x[i] = str[i];
    }
    for (int i = z-1; i >= 0; --i) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }","int fpaph(char sqnto[])     int malft = 0;
    while(!(NULL == sqnto[malft]))         malft++;
        return malft;
    int malft = 0;
    while (!(zahl || malft < fpaph > malft(src) 10 > || malft)) {
        dest[malft] = src[malft];
    	++malft;
    }
{
    int iinvx = fpaph(str);
    char sqnto[iinvx];
    int malft = 0;
    while (!(iinvx <= malft)) {
        sqnto[malft] = str[malft];
    	++malft;
    }
    int malft = iinvx-1;
    while (!(0 > malft)) {
        str[(iinvx-1)-malft]=sqnto[malft];
    	--malft;
    }
}
{
                  }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1927,SoSe22,9,Antwort 9,C,VName_447,Name_447,"int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    for (int i = 0; i < zahl && i < getStringLength(src) && i < 10; ++i) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (int i = 0; i < z; ++i) {
        x[i] = str[i];
    }
    for (int i = z-1; i >= 0; --i) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }","int vxfde(char vzvib[])     int tdyvn = 0;
    while(!(NULL == vzvib[tdyvn]))         tdyvn++;
        return tdyvn;
    int tdyvn = 0;
    while (!(zahl || tdyvn < vxfde > tdyvn(src) 10 > || tdyvn)) {
        dest[tdyvn] = src[tdyvn];
    	++tdyvn;
    }
{
    int qwjma = vxfde(str);
    char vzvib[qwjma];
    int tdyvn = 0;
    while (!(qwjma <= tdyvn)) {
        vzvib[tdyvn] = str[tdyvn];
    	++tdyvn;
    }
    int tdyvn = qwjma-1;
    while (!(0 > tdyvn)) {
        str[(qwjma-1)-tdyvn]=vzvib[tdyvn];
    	--tdyvn;
    }
}
{
                  }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1928,SoSe22,9,Antwort 9,C,VName_447,Name_447,"int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    for (int i = 0; i < zahl && i < getStringLength(src) && i < 10; ++i) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (int i = 0; i < z; ++i) {
        x[i] = str[i];
    }
    for (int i = z-1; i >= 0; --i) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }","int frnxy(char tmyzh[])     int kedhu = 0;
    while(!(NULL == tmyzh[kedhu]))         kedhu++;
        return kedhu;
    int kedhu = 0;
    while (!(zahl || kedhu < frnxy > kedhu(src) 10 > || kedhu)) {
        dest[kedhu] = src[kedhu];
    	++kedhu;
    }
{
    int ujddq = frnxy(str);
    char tmyzh[ujddq];
    int kedhu = 0;
    while (!(ujddq <= kedhu)) {
        tmyzh[kedhu] = str[kedhu];
    	++kedhu;
    }
    int kedhu = ujddq-1;
    while (!(0 > kedhu)) {
        str[(ujddq-1)-kedhu]=tmyzh[kedhu];
    	--kedhu;
    }
}
{
                  }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1929,SoSe22,9,Antwort 9,C,VName_447,Name_447,"int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    for (int i = 0; i < zahl && i < getStringLength(src) && i < 10; ++i) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (int i = 0; i < z; ++i) {
        x[i] = str[i];
    }
    for (int i = z-1; i >= 0; --i) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }","int rcsha(char avmlt[])     int tmcbl = 0;
    while(!(NULL == avmlt[tmcbl]))         tmcbl++;
        return tmcbl;
    int tmcbl = 0;
    while (!(zahl || tmcbl < rcsha > tmcbl(src) 10 > || tmcbl)) {
        dest[tmcbl] = src[tmcbl];
    	++tmcbl;
    }
{
    int qcyyw = rcsha(str);
    char avmlt[qcyyw];
    int tmcbl = 0;
    while (!(qcyyw <= tmcbl)) {
        avmlt[tmcbl] = str[tmcbl];
    	++tmcbl;
    }
    int tmcbl = qcyyw-1;
    while (!(0 > tmcbl)) {
        str[(qcyyw-1)-tmcbl]=avmlt[tmcbl];
    	--tmcbl;
    }
}
{
                  }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1930,SoSe22,9,Antwort 9,C,VName_447,Name_447,"int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    for (int i = 0; i < zahl && i < getStringLength(src) && i < 10; ++i) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (int i = 0; i < z; ++i) {
        x[i] = str[i];
    }
    for (int i = z-1; i >= 0; --i) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }","int mxzpw(char bckxd[])     int vrkzy = 0;
    while(!(NULL == bckxd[vrkzy]))         vrkzy++;
        return vrkzy;
    int vrkzy = 0;
    while (!(zahl || vrkzy < mxzpw > vrkzy(src) 10 > || vrkzy)) {
        dest[vrkzy] = src[vrkzy];
    	++vrkzy;
    }
{
    int lsajx = mxzpw(str);
    char bckxd[lsajx];
    int vrkzy = 0;
    while (!(lsajx <= vrkzy)) {
        bckxd[vrkzy] = str[vrkzy];
    	++vrkzy;
    }
    int vrkzy = lsajx-1;
    while (!(0 > vrkzy)) {
        str[(lsajx-1)-vrkzy]=bckxd[vrkzy];
    	--vrkzy;
    }
}
{
                  }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1931,SoSe22,9,Antwort 9,C,VName_447,Name_447,"int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    for (int i = 0; i < zahl && i < getStringLength(src) && i < 10; ++i) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (int i = 0; i < z; ++i) {
        x[i] = str[i];
    }
    for (int i = z-1; i >= 0; --i) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }","int sqpwl(char ehwpn[])     int kkqpw = 0;
    while(!(NULL == ehwpn[kkqpw]))         kkqpw++;
        return kkqpw;
    int kkqpw = 0;
    while (!(zahl || kkqpw < sqpwl > kkqpw(src) 10 > || kkqpw)) {
        dest[kkqpw] = src[kkqpw];
    	++kkqpw;
    }
{
    int xfixb = sqpwl(str);
    char ehwpn[xfixb];
    int kkqpw = 0;
    while (!(xfixb <= kkqpw)) {
        ehwpn[kkqpw] = str[kkqpw];
    	++kkqpw;
    }
    int kkqpw = xfixb-1;
    while (!(0 > kkqpw)) {
        str[(xfixb-1)-kkqpw]=ehwpn[kkqpw];
    	--kkqpw;
    }
}
{
                  }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1932,SoSe22,9,Antwort 9,C,VName_447,Name_447,"int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    for (int i = 0; i < zahl && i < getStringLength(src) && i < 10; ++i) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (int i = 0; i < z; ++i) {
        x[i] = str[i];
    }
    for (int i = z-1; i >= 0; --i) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }","int hgemt(char dsmhx[])     int gbkci = 0;
    while(!(NULL == dsmhx[gbkci]))         gbkci++;
        return gbkci;
    int gbkci = 0;
    while (!(zahl || gbkci < hgemt > gbkci(src) 10 > || gbkci)) {
        dest[gbkci] = src[gbkci];
    	++gbkci;
    }
{
    int pxuwe = hgemt(str);
    char dsmhx[pxuwe];
    int gbkci = 0;
    while (!(pxuwe <= gbkci)) {
        dsmhx[gbkci] = str[gbkci];
    	++gbkci;
    }
    int gbkci = pxuwe-1;
    while (!(0 > gbkci)) {
        str[(pxuwe-1)-gbkci]=dsmhx[gbkci];
    	--gbkci;
    }
}
{
                  }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1933,SoSe22,9,Antwort 9,C,VName_447,Name_447,"int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    for (int i = 0; i < zahl && i < getStringLength(src) && i < 10; ++i) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (int i = 0; i < z; ++i) {
        x[i] = str[i];
    }
    for (int i = z-1; i >= 0; --i) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }","int qesby(char mxamd[])     int ychng = 0;
    while(!(NULL == mxamd[ychng]))         ychng++;
        return ychng;
    int ychng = 0;
    while (!(zahl || ychng < qesby > ychng(src) 10 > || ychng)) {
        dest[ychng] = src[ychng];
    	++ychng;
    }
{
    int blprl = qesby(str);
    char mxamd[blprl];
    int ychng = 0;
    while (!(blprl <= ychng)) {
        mxamd[ychng] = str[ychng];
    	++ychng;
    }
    int ychng = blprl-1;
    while (!(0 > ychng)) {
        str[(blprl-1)-ychng]=mxamd[ychng];
    	--ychng;
    }
}
{
                  }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1934,SoSe22,9,Antwort 9,C,VName_447,Name_447,"int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    for (int i = 0; i < zahl && i < getStringLength(src) && i < 10; ++i) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (int i = 0; i < z; ++i) {
        x[i] = str[i];
    }
    for (int i = z-1; i >= 0; --i) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }","int mzzhq(char esahf[])     int tpfoa = 0;
    while(!(NULL == esahf[tpfoa]))         tpfoa++;
        return tpfoa;
    int tpfoa = 0;
    while (!(zahl || tpfoa < mzzhq > tpfoa(src) 10 > || tpfoa)) {
        dest[tpfoa] = src[tpfoa];
    	++tpfoa;
    }
{
    int nbryb = mzzhq(str);
    char esahf[nbryb];
    int tpfoa = 0;
    while (!(nbryb <= tpfoa)) {
        esahf[tpfoa] = str[tpfoa];
    	++tpfoa;
    }
    int tpfoa = nbryb-1;
    while (!(0 > tpfoa)) {
        str[(nbryb-1)-tpfoa]=esahf[tpfoa];
    	--tpfoa;
    }
}
{
                  }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1935,SoSe22,9,Antwort 9,C,VName_447,Name_447,"int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    for (int i = 0; i < zahl && i < getStringLength(src) && i < 10; ++i) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (int i = 0; i < z; ++i) {
        x[i] = str[i];
    }
    for (int i = z-1; i >= 0; --i) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }","int dxayb(char iduhy[])     int ktjej = 0;
    while(!(NULL == iduhy[ktjej]))         ktjej++;
        return ktjej;
    int ktjej = 0;
    while (!(zahl || ktjej < dxayb > ktjej(src) 10 > || ktjej)) {
        dest[ktjej] = src[ktjej];
    	++ktjej;
    }
{
    int grmua = dxayb(str);
    char iduhy[grmua];
    int ktjej = 0;
    while (!(grmua <= ktjej)) {
        iduhy[ktjej] = str[ktjej];
    	++ktjej;
    }
    int ktjej = grmua-1;
    while (!(0 > ktjej)) {
        str[(grmua-1)-ktjej]=iduhy[ktjej];
    	--ktjej;
    }
}
{
                  }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1936,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int gxgsu = 0;
    while (!((zahl <= gxgsu) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1937,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int nkjwt = 0;
    while (!((zahl <= nkjwt) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1938,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int tjxyr = 0;
    while (!((zahl <= tjxyr) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1939,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int ojzul = 0;
    while (!((zahl <= ojzul) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1940,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int gxuwq = 0;
    while (!((zahl <= gxuwq) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1941,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int ticvk = 0;
    while (!((zahl <= ticvk) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1942,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int lppdq = 0;
    while (!((zahl <= lppdq) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1943,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int pnhwo = 0;
    while (!((zahl <= pnhwo) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1944,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int yklrq = 0;
    while (!((zahl <= yklrq) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1945,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int bdtcn = 0;
    while (!((zahl <= bdtcn) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1946,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int avitw = 0;
    while (!((zahl <= avitw) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1947,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int lyony = 0;
    while (!((zahl <= lyony) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1948,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int jyigq = 0;
    while (!((zahl <= jyigq) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1949,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int konke = 0;
    while (!((zahl <= konke) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1950,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int igdzm = 0;
    while (!((zahl <= igdzm) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1951,SoSe22,9,Antwort 9,C,VName_442,Name_442,"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int hvvfa = 0;
    while (!((zahl <= hvvfa) && ('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1952,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int qqcwv = 0;
  for(!(int gsmbe = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1953,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int rxjwx = 0;
  for(!(int nhrwz = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1954,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int ndbhj = 0;
  for(!(int rabgp = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1955,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int nouae = 0;
  for(!(int feuvq = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1956,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int znbhl = 0;
  for(!(int quavz = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1957,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int ygrdz = 0;
  for(!(int qclsz = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1958,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int hzweb = 0;
  for(!(int sckdy = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1959,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int hmzxt = 0;
  for(!(int rzhgj = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1960,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int gklzz = 0;
  for(!(int duyxl = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1961,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int sarsg = 0;
  for(!(int ydbwd = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1962,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int qafbu = 0;
  for(!(int qskjr = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1963,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int odzap = 0;
  for(!(int mxgjc = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1964,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int wcbbc = 0;
  for(!(int fftnt = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1965,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int xkxft = 0;
  for(!(int qdzyz = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1966,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int cemsn = 0;
  for(!(int qokop = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1967,SoSe22,9,Antwort 9,C,VName_473,Name_473,"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int lmcnh = 0;
  for(!(int uwcyg = 0; '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1968,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int duywp = 0; zahl <= duywp; duywp++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			duywp = zahl;
}
{
	int xpvyg = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		xpvyg++;
		lenpt++;
	}
	char mjzpm[xpvyg + 1];
	lenpt = mjzpm;
	lenpt += xpvyg;
	*lenpt = 0;
	lenpt--;
	int duywp = xpvyg;
	while (!(0 > duywp))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		duywp--;
	}
	orgpt = str;
	lenpt = mjzpm;
	int duywp = xpvyg;
	while (!(0 >= duywp))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		duywp--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1969,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int vqhow = 0; zahl <= vqhow; vqhow++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			vqhow = zahl;
}
{
	int pvxrq = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		pvxrq++;
		lenpt++;
	}
	char oayxb[pvxrq + 1];
	lenpt = oayxb;
	lenpt += pvxrq;
	*lenpt = 0;
	lenpt--;
	int vqhow = pvxrq;
	while (!(0 > vqhow))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		vqhow--;
	}
	orgpt = str;
	lenpt = oayxb;
	int vqhow = pvxrq;
	while (!(0 >= vqhow))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		vqhow--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1970,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int idokx = 0; zahl <= idokx; idokx++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			idokx = zahl;
}
{
	int ecayp = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		ecayp++;
		lenpt++;
	}
	char tbdux[ecayp + 1];
	lenpt = tbdux;
	lenpt += ecayp;
	*lenpt = 0;
	lenpt--;
	int idokx = ecayp;
	while (!(0 > idokx))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		idokx--;
	}
	orgpt = str;
	lenpt = tbdux;
	int idokx = ecayp;
	while (!(0 >= idokx))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		idokx--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1971,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int bmhkz = 0; zahl <= bmhkz; bmhkz++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			bmhkz = zahl;
}
{
	int xqarn = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		xqarn++;
		lenpt++;
	}
	char sacen[xqarn + 1];
	lenpt = sacen;
	lenpt += xqarn;
	*lenpt = 0;
	lenpt--;
	int bmhkz = xqarn;
	while (!(0 > bmhkz))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		bmhkz--;
	}
	orgpt = str;
	lenpt = sacen;
	int bmhkz = xqarn;
	while (!(0 >= bmhkz))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		bmhkz--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1972,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int jgmmp = 0; zahl <= jgmmp; jgmmp++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			jgmmp = zahl;
}
{
	int grktd = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		grktd++;
		lenpt++;
	}
	char avlgk[grktd + 1];
	lenpt = avlgk;
	lenpt += grktd;
	*lenpt = 0;
	lenpt--;
	int jgmmp = grktd;
	while (!(0 > jgmmp))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		jgmmp--;
	}
	orgpt = str;
	lenpt = avlgk;
	int jgmmp = grktd;
	while (!(0 >= jgmmp))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		jgmmp--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1973,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int mimjf = 0; zahl <= mimjf; mimjf++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			mimjf = zahl;
}
{
	int neqra = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		neqra++;
		lenpt++;
	}
	char jrcpq[neqra + 1];
	lenpt = jrcpq;
	lenpt += neqra;
	*lenpt = 0;
	lenpt--;
	int mimjf = neqra;
	while (!(0 > mimjf))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		mimjf--;
	}
	orgpt = str;
	lenpt = jrcpq;
	int mimjf = neqra;
	while (!(0 >= mimjf))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		mimjf--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1974,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int lpnsp = 0; zahl <= lpnsp; lpnsp++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			lpnsp = zahl;
}
{
	int kzytw = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		kzytw++;
		lenpt++;
	}
	char lsdnf[kzytw + 1];
	lenpt = lsdnf;
	lenpt += kzytw;
	*lenpt = 0;
	lenpt--;
	int lpnsp = kzytw;
	while (!(0 > lpnsp))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		lpnsp--;
	}
	orgpt = str;
	lenpt = lsdnf;
	int lpnsp = kzytw;
	while (!(0 >= lpnsp))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		lpnsp--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1975,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int ozbko = 0; zahl <= ozbko; ozbko++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			ozbko = zahl;
}
{
	int nqzzk = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		nqzzk++;
		lenpt++;
	}
	char gvfxf[nqzzk + 1];
	lenpt = gvfxf;
	lenpt += nqzzk;
	*lenpt = 0;
	lenpt--;
	int ozbko = nqzzk;
	while (!(0 > ozbko))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		ozbko--;
	}
	orgpt = str;
	lenpt = gvfxf;
	int ozbko = nqzzk;
	while (!(0 >= ozbko))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		ozbko--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1976,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int lsvyc = 0; zahl <= lsvyc; lsvyc++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			lsvyc = zahl;
}
{
	int buvyr = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		buvyr++;
		lenpt++;
	}
	char zsfet[buvyr + 1];
	lenpt = zsfet;
	lenpt += buvyr;
	*lenpt = 0;
	lenpt--;
	int lsvyc = buvyr;
	while (!(0 > lsvyc))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		lsvyc--;
	}
	orgpt = str;
	lenpt = zsfet;
	int lsvyc = buvyr;
	while (!(0 >= lsvyc))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		lsvyc--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1977,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int rzsei = 0; zahl <= rzsei; rzsei++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			rzsei = zahl;
}
{
	int rsdcj = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		rsdcj++;
		lenpt++;
	}
	char coeie[rsdcj + 1];
	lenpt = coeie;
	lenpt += rsdcj;
	*lenpt = 0;
	lenpt--;
	int rzsei = rsdcj;
	while (!(0 > rzsei))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		rzsei--;
	}
	orgpt = str;
	lenpt = coeie;
	int rzsei = rsdcj;
	while (!(0 >= rzsei))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		rzsei--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1978,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int jzgwh = 0; zahl <= jzgwh; jzgwh++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			jzgwh = zahl;
}
{
	int uorrs = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		uorrs++;
		lenpt++;
	}
	char ptyms[uorrs + 1];
	lenpt = ptyms;
	lenpt += uorrs;
	*lenpt = 0;
	lenpt--;
	int jzgwh = uorrs;
	while (!(0 > jzgwh))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		jzgwh--;
	}
	orgpt = str;
	lenpt = ptyms;
	int jzgwh = uorrs;
	while (!(0 >= jzgwh))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		jzgwh--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1979,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int jjuzx = 0; zahl <= jjuzx; jjuzx++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			jjuzx = zahl;
}
{
	int mhfza = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		mhfza++;
		lenpt++;
	}
	char vlzge[mhfza + 1];
	lenpt = vlzge;
	lenpt += mhfza;
	*lenpt = 0;
	lenpt--;
	int jjuzx = mhfza;
	while (!(0 > jjuzx))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		jjuzx--;
	}
	orgpt = str;
	lenpt = vlzge;
	int jjuzx = mhfza;
	while (!(0 >= jjuzx))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		jjuzx--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1980,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int xxffi = 0; zahl <= xxffi; xxffi++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			xxffi = zahl;
}
{
	int hlvfl = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		hlvfl++;
		lenpt++;
	}
	char uulvs[hlvfl + 1];
	lenpt = uulvs;
	lenpt += hlvfl;
	*lenpt = 0;
	lenpt--;
	int xxffi = hlvfl;
	while (!(0 > xxffi))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		xxffi--;
	}
	orgpt = str;
	lenpt = uulvs;
	int xxffi = hlvfl;
	while (!(0 >= xxffi))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		xxffi--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1981,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int aioqd = 0; zahl <= aioqd; aioqd++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			aioqd = zahl;
}
{
	int avrjz = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		avrjz++;
		lenpt++;
	}
	char limju[avrjz + 1];
	lenpt = limju;
	lenpt += avrjz;
	*lenpt = 0;
	lenpt--;
	int aioqd = avrjz;
	while (!(0 > aioqd))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		aioqd--;
	}
	orgpt = str;
	lenpt = limju;
	int aioqd = avrjz;
	while (!(0 >= aioqd))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		aioqd--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1982,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int dwvye = 0; zahl <= dwvye; dwvye++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			dwvye = zahl;
}
{
	int hqubo = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		hqubo++;
		lenpt++;
	}
	char lciax[hqubo + 1];
	lenpt = lciax;
	lenpt += hqubo;
	*lenpt = 0;
	lenpt--;
	int dwvye = hqubo;
	while (!(0 > dwvye))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		dwvye--;
	}
	orgpt = str;
	lenpt = lciax;
	int dwvye = hqubo;
	while (!(0 >= dwvye))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		dwvye--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1983,SoSe22,9,Antwort 9,C,VName_474,Name_474,"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int qdekr = 0; zahl <= qdekr; qdekr++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			qdekr = zahl;
}
{
	int hyifr = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		hyifr++;
		lenpt++;
	}
	char flelu[hyifr + 1];
	lenpt = flelu;
	lenpt += hyifr;
	*lenpt = 0;
	lenpt--;
	int qdekr = hyifr;
	while (!(0 > qdekr))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		qdekr--;
	}
	orgpt = str;
	lenpt = flelu;
	int qdekr = hyifr;
	while (!(0 >= qdekr))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		qdekr--;
	}
}
{  
      }",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1984,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int jtroq, char* argv[] ) 
{
    char uiaxm[100];
    char kbnix[100];
    int fieah = 0;
    int oswys = 0;
    char* currPointer = argv[1];
    int hydtj = 3;
    int klxhq = 0;
    for (!(;  <= fieah(jtroq - 1); fieah++)) {
        if (!(0 != *currPointer)) {
            fieah++;
        } else {
            char ietqw = *currPointer;
            if (!('x' && ietqw == 'y' && ietqw == 'q' && ietqw == 'X' && ietqw == 'Y' && ietqw == 'Q' == ietqw)) {
            } else {
                uiaxm[oswys] = *currPointer;
                oswys++;
                if (!(3 != hydtj)) {
                    kbnix[klxhq] = *currPointer;
                    klxhq++;
                    hydtj = 0;
                }
                    hydtj++;
            }
        }
        currPointer++;
    }
    uiaxm[oswys] = 0;
    kbnix[klxhq] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", uiaxm);
    printf(""Der neue String lautet: %s\\n"", kbnix);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1985,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int vjdsu, char* argv[] ) 
{
    char typdt[100];
    char nfiyk[100];
    int ldaoq = 0;
    int sesce = 0;
    char* currPointer = argv[1];
    int ljphr = 3;
    int abjwq = 0;
    for (!(;  <= ldaoq(vjdsu - 1); ldaoq++)) {
        if (!(0 != *currPointer)) {
            ldaoq++;
        } else {
            char wxfds = *currPointer;
            if (!('x' && wxfds == 'y' && wxfds == 'q' && wxfds == 'X' && wxfds == 'Y' && wxfds == 'Q' == wxfds)) {
            } else {
                typdt[sesce] = *currPointer;
                sesce++;
                if (!(3 != ljphr)) {
                    nfiyk[abjwq] = *currPointer;
                    abjwq++;
                    ljphr = 0;
                }
                    ljphr++;
            }
        }
        currPointer++;
    }
    typdt[sesce] = 0;
    nfiyk[abjwq] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", typdt);
    printf(""Der neue String lautet: %s\\n"", nfiyk);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1986,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int etrlg, char* argv[] ) 
{
    char lvnwn[100];
    char pwtbo[100];
    int bucqh = 0;
    int psemp = 0;
    char* currPointer = argv[1];
    int hbetu = 3;
    int tyygk = 0;
    for (!(;  <= bucqh(etrlg - 1); bucqh++)) {
        if (!(0 != *currPointer)) {
            bucqh++;
        } else {
            char qsstt = *currPointer;
            if (!('x' && qsstt == 'y' && qsstt == 'q' && qsstt == 'X' && qsstt == 'Y' && qsstt == 'Q' == qsstt)) {
            } else {
                lvnwn[psemp] = *currPointer;
                psemp++;
                if (!(3 != hbetu)) {
                    pwtbo[tyygk] = *currPointer;
                    tyygk++;
                    hbetu = 0;
                }
                    hbetu++;
            }
        }
        currPointer++;
    }
    lvnwn[psemp] = 0;
    pwtbo[tyygk] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", lvnwn);
    printf(""Der neue String lautet: %s\\n"", pwtbo);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1987,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int feyrj, char* argv[] ) 
{
    char gyuwf[100];
    char hrifw[100];
    int qqwvd = 0;
    int jtich = 0;
    char* currPointer = argv[1];
    int jrzxc = 3;
    int mdnzh = 0;
    for (!(;  <= qqwvd(feyrj - 1); qqwvd++)) {
        if (!(0 != *currPointer)) {
            qqwvd++;
        } else {
            char pcccx = *currPointer;
            if (!('x' && pcccx == 'y' && pcccx == 'q' && pcccx == 'X' && pcccx == 'Y' && pcccx == 'Q' == pcccx)) {
            } else {
                gyuwf[jtich] = *currPointer;
                jtich++;
                if (!(3 != jrzxc)) {
                    hrifw[mdnzh] = *currPointer;
                    mdnzh++;
                    jrzxc = 0;
                }
                    jrzxc++;
            }
        }
        currPointer++;
    }
    gyuwf[jtich] = 0;
    hrifw[mdnzh] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", gyuwf);
    printf(""Der neue String lautet: %s\\n"", hrifw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1988,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int pucbx, char* argv[] ) 
{
    char umzue[100];
    char qcfoi[100];
    int cfxvv = 0;
    int bjigp = 0;
    char* currPointer = argv[1];
    int ivzxw = 3;
    int mjspf = 0;
    for (!(;  <= cfxvv(pucbx - 1); cfxvv++)) {
        if (!(0 != *currPointer)) {
            cfxvv++;
        } else {
            char vrzzb = *currPointer;
            if (!('x' && vrzzb == 'y' && vrzzb == 'q' && vrzzb == 'X' && vrzzb == 'Y' && vrzzb == 'Q' == vrzzb)) {
            } else {
                umzue[bjigp] = *currPointer;
                bjigp++;
                if (!(3 != ivzxw)) {
                    qcfoi[mjspf] = *currPointer;
                    mjspf++;
                    ivzxw = 0;
                }
                    ivzxw++;
            }
        }
        currPointer++;
    }
    umzue[bjigp] = 0;
    qcfoi[mjspf] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", umzue);
    printf(""Der neue String lautet: %s\\n"", qcfoi);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1989,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int uqehs, char* argv[] ) 
{
    char stxeg[100];
    char fdlbh[100];
    int etuwo = 0;
    int jzotk = 0;
    char* currPointer = argv[1];
    int uarrt = 3;
    int hzwlp = 0;
    for (!(;  <= etuwo(uqehs - 1); etuwo++)) {
        if (!(0 != *currPointer)) {
            etuwo++;
        } else {
            char xypvy = *currPointer;
            if (!('x' && xypvy == 'y' && xypvy == 'q' && xypvy == 'X' && xypvy == 'Y' && xypvy == 'Q' == xypvy)) {
            } else {
                stxeg[jzotk] = *currPointer;
                jzotk++;
                if (!(3 != uarrt)) {
                    fdlbh[hzwlp] = *currPointer;
                    hzwlp++;
                    uarrt = 0;
                }
                    uarrt++;
            }
        }
        currPointer++;
    }
    stxeg[jzotk] = 0;
    fdlbh[hzwlp] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", stxeg);
    printf(""Der neue String lautet: %s\\n"", fdlbh);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1990,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int gqums, char* argv[] ) 
{
    char qfrof[100];
    char ulecf[100];
    int vibgx = 0;
    int xlvie = 0;
    char* currPointer = argv[1];
    int yenia = 3;
    int gafqq = 0;
    for (!(;  <= vibgx(gqums - 1); vibgx++)) {
        if (!(0 != *currPointer)) {
            vibgx++;
        } else {
            char fhqhd = *currPointer;
            if (!('x' && fhqhd == 'y' && fhqhd == 'q' && fhqhd == 'X' && fhqhd == 'Y' && fhqhd == 'Q' == fhqhd)) {
            } else {
                qfrof[xlvie] = *currPointer;
                xlvie++;
                if (!(3 != yenia)) {
                    ulecf[gafqq] = *currPointer;
                    gafqq++;
                    yenia = 0;
                }
                    yenia++;
            }
        }
        currPointer++;
    }
    qfrof[xlvie] = 0;
    ulecf[gafqq] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", qfrof);
    printf(""Der neue String lautet: %s\\n"", ulecf);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1991,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int nmbrk, char* argv[] ) 
{
    char kdjrz[100];
    char ueoyy[100];
    int lbbda = 0;
    int sasqp = 0;
    char* currPointer = argv[1];
    int ggklp = 3;
    int ukouu = 0;
    for (!(;  <= lbbda(nmbrk - 1); lbbda++)) {
        if (!(0 != *currPointer)) {
            lbbda++;
        } else {
            char jdixy = *currPointer;
            if (!('x' && jdixy == 'y' && jdixy == 'q' && jdixy == 'X' && jdixy == 'Y' && jdixy == 'Q' == jdixy)) {
            } else {
                kdjrz[sasqp] = *currPointer;
                sasqp++;
                if (!(3 != ggklp)) {
                    ueoyy[ukouu] = *currPointer;
                    ukouu++;
                    ggklp = 0;
                }
                    ggklp++;
            }
        }
        currPointer++;
    }
    kdjrz[sasqp] = 0;
    ueoyy[ukouu] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", kdjrz);
    printf(""Der neue String lautet: %s\\n"", ueoyy);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1992,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int yznst, char* argv[] ) 
{
    char wgchg[100];
    char kzgcs[100];
    int vplit = 0;
    int lhbte = 0;
    char* currPointer = argv[1];
    int zdfum = 3;
    int jqeoy = 0;
    for (!(;  <= vplit(yznst - 1); vplit++)) {
        if (!(0 != *currPointer)) {
            vplit++;
        } else {
            char kaztt = *currPointer;
            if (!('x' && kaztt == 'y' && kaztt == 'q' && kaztt == 'X' && kaztt == 'Y' && kaztt == 'Q' == kaztt)) {
            } else {
                wgchg[lhbte] = *currPointer;
                lhbte++;
                if (!(3 != zdfum)) {
                    kzgcs[jqeoy] = *currPointer;
                    jqeoy++;
                    zdfum = 0;
                }
                    zdfum++;
            }
        }
        currPointer++;
    }
    wgchg[lhbte] = 0;
    kzgcs[jqeoy] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", wgchg);
    printf(""Der neue String lautet: %s\\n"", kzgcs);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1993,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int uzlad, char* argv[] ) 
{
    char aqwvw[100];
    char mcklt[100];
    int qlexs = 0;
    int urdqa = 0;
    char* currPointer = argv[1];
    int jymdk = 3;
    int mayve = 0;
    for (!(;  <= qlexs(uzlad - 1); qlexs++)) {
        if (!(0 != *currPointer)) {
            qlexs++;
        } else {
            char kedyq = *currPointer;
            if (!('x' && kedyq == 'y' && kedyq == 'q' && kedyq == 'X' && kedyq == 'Y' && kedyq == 'Q' == kedyq)) {
            } else {
                aqwvw[urdqa] = *currPointer;
                urdqa++;
                if (!(3 != jymdk)) {
                    mcklt[mayve] = *currPointer;
                    mayve++;
                    jymdk = 0;
                }
                    jymdk++;
            }
        }
        currPointer++;
    }
    aqwvw[urdqa] = 0;
    mcklt[mayve] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", aqwvw);
    printf(""Der neue String lautet: %s\\n"", mcklt);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1994,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int iucmd, char* argv[] ) 
{
    char awimy[100];
    char tbjbu[100];
    int sogbp = 0;
    int alvxe = 0;
    char* currPointer = argv[1];
    int zzkwd = 3;
    int gufbc = 0;
    for (!(;  <= sogbp(iucmd - 1); sogbp++)) {
        if (!(0 != *currPointer)) {
            sogbp++;
        } else {
            char wmqcr = *currPointer;
            if (!('x' && wmqcr == 'y' && wmqcr == 'q' && wmqcr == 'X' && wmqcr == 'Y' && wmqcr == 'Q' == wmqcr)) {
            } else {
                awimy[alvxe] = *currPointer;
                alvxe++;
                if (!(3 != zzkwd)) {
                    tbjbu[gufbc] = *currPointer;
                    gufbc++;
                    zzkwd = 0;
                }
                    zzkwd++;
            }
        }
        currPointer++;
    }
    awimy[alvxe] = 0;
    tbjbu[gufbc] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", awimy);
    printf(""Der neue String lautet: %s\\n"", tbjbu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1995,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int sduyz, char* argv[] ) 
{
    char hoyrn[100];
    char vxrzh[100];
    int btrkm = 0;
    int ttrfi = 0;
    char* currPointer = argv[1];
    int wqcux = 3;
    int vsajq = 0;
    for (!(;  <= btrkm(sduyz - 1); btrkm++)) {
        if (!(0 != *currPointer)) {
            btrkm++;
        } else {
            char ommmc = *currPointer;
            if (!('x' && ommmc == 'y' && ommmc == 'q' && ommmc == 'X' && ommmc == 'Y' && ommmc == 'Q' == ommmc)) {
            } else {
                hoyrn[ttrfi] = *currPointer;
                ttrfi++;
                if (!(3 != wqcux)) {
                    vxrzh[vsajq] = *currPointer;
                    vsajq++;
                    wqcux = 0;
                }
                    wqcux++;
            }
        }
        currPointer++;
    }
    hoyrn[ttrfi] = 0;
    vxrzh[vsajq] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", hoyrn);
    printf(""Der neue String lautet: %s\\n"", vxrzh);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1996,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int kfqgl, char* argv[] ) 
{
    char hdtwi[100];
    char ogbnj[100];
    int fspjj = 0;
    int rkpix = 0;
    char* currPointer = argv[1];
    int akdxb = 3;
    int lvxmp = 0;
    for (!(;  <= fspjj(kfqgl - 1); fspjj++)) {
        if (!(0 != *currPointer)) {
            fspjj++;
        } else {
            char psgve = *currPointer;
            if (!('x' && psgve == 'y' && psgve == 'q' && psgve == 'X' && psgve == 'Y' && psgve == 'Q' == psgve)) {
            } else {
                hdtwi[rkpix] = *currPointer;
                rkpix++;
                if (!(3 != akdxb)) {
                    ogbnj[lvxmp] = *currPointer;
                    lvxmp++;
                    akdxb = 0;
                }
                    akdxb++;
            }
        }
        currPointer++;
    }
    hdtwi[rkpix] = 0;
    ogbnj[lvxmp] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", hdtwi);
    printf(""Der neue String lautet: %s\\n"", ogbnj);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1997,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int mjorc, char* argv[] ) 
{
    char owbwy[100];
    char glqyx[100];
    int nouli = 0;
    int snicz = 0;
    char* currPointer = argv[1];
    int rtkdr = 3;
    int zqqyl = 0;
    for (!(;  <= nouli(mjorc - 1); nouli++)) {
        if (!(0 != *currPointer)) {
            nouli++;
        } else {
            char izymr = *currPointer;
            if (!('x' && izymr == 'y' && izymr == 'q' && izymr == 'X' && izymr == 'Y' && izymr == 'Q' == izymr)) {
            } else {
                owbwy[snicz] = *currPointer;
                snicz++;
                if (!(3 != rtkdr)) {
                    glqyx[zqqyl] = *currPointer;
                    zqqyl++;
                    rtkdr = 0;
                }
                    rtkdr++;
            }
        }
        currPointer++;
    }
    owbwy[snicz] = 0;
    glqyx[zqqyl] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", owbwy);
    printf(""Der neue String lautet: %s\\n"", glqyx);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1998,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int cguqw, char* argv[] ) 
{
    char wqcij[100];
    char stsiu[100];
    int ravdo = 0;
    int naqsz = 0;
    char* currPointer = argv[1];
    int dqnav = 3;
    int osylh = 0;
    for (!(;  <= ravdo(cguqw - 1); ravdo++)) {
        if (!(0 != *currPointer)) {
            ravdo++;
        } else {
            char yyxzr = *currPointer;
            if (!('x' && yyxzr == 'y' && yyxzr == 'q' && yyxzr == 'X' && yyxzr == 'Y' && yyxzr == 'Q' == yyxzr)) {
            } else {
                wqcij[naqsz] = *currPointer;
                naqsz++;
                if (!(3 != dqnav)) {
                    stsiu[osylh] = *currPointer;
                    osylh++;
                    dqnav = 0;
                }
                    dqnav++;
            }
        }
        currPointer++;
    }
    wqcij[naqsz] = 0;
    stsiu[osylh] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", wqcij);
    printf(""Der neue String lautet: %s\\n"", stsiu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
1999,SoSe21,9,Antwort 9,C,VName_73,Name_73,"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int drhnf, char* argv[] ) 
{
    char jvcys[100];
    char kmaon[100];
    int mgxlu = 0;
    int loibu = 0;
    char* currPointer = argv[1];
    int xnite = 3;
    int auhwc = 0;
    for (!(;  <= mgxlu(drhnf - 1); mgxlu++)) {
        if (!(0 != *currPointer)) {
            mgxlu++;
        } else {
            char kxjrr = *currPointer;
            if (!('x' && kxjrr == 'y' && kxjrr == 'q' && kxjrr == 'X' && kxjrr == 'Y' && kxjrr == 'Q' == kxjrr)) {
            } else {
                jvcys[loibu] = *currPointer;
                loibu++;
                if (!(3 != xnite)) {
                    kmaon[auhwc] = *currPointer;
                    auhwc++;
                    xnite = 0;
                }
                    xnite++;
            }
        }
        currPointer++;
    }
    jvcys[loibu] = 0;
    kmaon[auhwc] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", jvcys);
    printf(""Der neue String lautet: %s\\n"", kmaon);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2000,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include tdxau.h
fbird char* kedi(int cgofh, char* isim[]){
    char qzyti[100];
   int gplsz=0;
    int abibw=0;
    while (!(cgofh <= abibw)){
    int dhfds = strlen(isim[abibw]);
    int lqvef=0;
    whiledhfds > lqvefds){
        ""x""||isim[abibw][lqvef]||==""y""||isim[abibw][lqvef]==""q""||isim[abibw][lqvef]==""X""||isim[abibw][lqvef]==""Y""||isim[abibw][lqvef]==""Q"" == isim[abibw][lqvef]=""Q""){
            }
            else {qzyti[gplsz]=isim[abibw][lqvef];gplsz++;}
    	lqvef++;
    }
	abibw++;
    }    
char zsdqv[gplsz];
int abibw=0;
wgplsz >= abibw=gplsz){
    zsdqv[abibw]=qzyti[abibw];
	abibw++;
}
char nbsuq[gplsz];
int abibw=0;gplsz > abibwbw<gplsz){
    nbsuq[abibw]=zsdqv[abibw];
	abibw++;
}
return(zsdqv,zsdqv);
}
int main( int wlxax, char* argv[] )
{  
  char mxkjz[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(wlxax,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(wlxax,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2001,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include zoowt.h
bzpwc char* kedi(int eyszu, char* isim[]){
    char cynns[100];
   int fjizc=0;
    int pqiff=0;
    while (!(eyszu <= pqiff)){
    int brxpf = strlen(isim[pqiff]);
    int vdtdn=0;
    whilebrxpf > vdtdnpf){
        ""x""||isim[pqiff][vdtdn]||==""y""||isim[pqiff][vdtdn]==""q""||isim[pqiff][vdtdn]==""X""||isim[pqiff][vdtdn]==""Y""||isim[pqiff][vdtdn]==""Q"" == isim[pqiff][vdtdn]=""Q""){
            }
            else {cynns[fjizc]=isim[pqiff][vdtdn];fjizc++;}
    	vdtdn++;
    }
	pqiff++;
    }    
char afemc[fjizc];
int pqiff=0;
wfjizc >= pqiff=fjizc){
    afemc[pqiff]=cynns[pqiff];
	pqiff++;
}
char mzrhj[fjizc];
int pqiff=0;fjizc > pqiffff<fjizc){
    mzrhj[pqiff]=afemc[pqiff];
	pqiff++;
}
return(afemc,afemc);
}
int main( int jaxni, char* argv[] )
{  
  char krzol[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(jaxni,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(jaxni,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2002,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include qwxkr.h
xxulc char* kedi(int biktp, char* isim[]){
    char xwhbq[100];
   int pblom=0;
    int dgoyq=0;
    while (!(biktp <= dgoyq)){
    int nlexh = strlen(isim[dgoyq]);
    int yilvm=0;
    whilenlexh > yilvmxh){
        ""x""||isim[dgoyq][yilvm]||==""y""||isim[dgoyq][yilvm]==""q""||isim[dgoyq][yilvm]==""X""||isim[dgoyq][yilvm]==""Y""||isim[dgoyq][yilvm]==""Q"" == isim[dgoyq][yilvm]=""Q""){
            }
            else {xwhbq[pblom]=isim[dgoyq][yilvm];pblom++;}
    	yilvm++;
    }
	dgoyq++;
    }    
char dzhxu[pblom];
int dgoyq=0;
wpblom >= dgoyq=pblom){
    dzhxu[dgoyq]=xwhbq[dgoyq];
	dgoyq++;
}
char eqdzy[pblom];
int dgoyq=0;pblom > dgoyqyq<pblom){
    eqdzy[dgoyq]=dzhxu[dgoyq];
	dgoyq++;
}
return(dzhxu,dzhxu);
}
int main( int txseu, char* argv[] )
{  
  char iibqd[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(txseu,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(txseu,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2003,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include uuhcg.h
feuhn char* kedi(int kxmpt, char* isim[]){
    char cnbyd[100];
   int apmrd=0;
    int ceaot=0;
    while (!(kxmpt <= ceaot)){
    int rxgci = strlen(isim[ceaot]);
    int datcr=0;
    whilerxgci > datcrci){
        ""x""||isim[ceaot][datcr]||==""y""||isim[ceaot][datcr]==""q""||isim[ceaot][datcr]==""X""||isim[ceaot][datcr]==""Y""||isim[ceaot][datcr]==""Q"" == isim[ceaot][datcr]=""Q""){
            }
            else {cnbyd[apmrd]=isim[ceaot][datcr];apmrd++;}
    	datcr++;
    }
	ceaot++;
    }    
char lvayu[apmrd];
int ceaot=0;
wapmrd >= ceaot=apmrd){
    lvayu[ceaot]=cnbyd[ceaot];
	ceaot++;
}
char pdwhe[apmrd];
int ceaot=0;apmrd > ceaotot<apmrd){
    pdwhe[ceaot]=lvayu[ceaot];
	ceaot++;
}
return(lvayu,lvayu);
}
int main( int qpjyr, char* argv[] )
{  
  char ptznu[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(qpjyr,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(qpjyr,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2004,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include qfhvi.h
lzkuq char* kedi(int cmjsi, char* isim[]){
    char jnwpl[100];
   int skweq=0;
    int lthxf=0;
    while (!(cmjsi <= lthxf)){
    int hsptc = strlen(isim[lthxf]);
    int xnudj=0;
    whilehsptc > xnudjtc){
        ""x""||isim[lthxf][xnudj]||==""y""||isim[lthxf][xnudj]==""q""||isim[lthxf][xnudj]==""X""||isim[lthxf][xnudj]==""Y""||isim[lthxf][xnudj]==""Q"" == isim[lthxf][xnudj]=""Q""){
            }
            else {jnwpl[skweq]=isim[lthxf][xnudj];skweq++;}
    	xnudj++;
    }
	lthxf++;
    }    
char bfdxf[skweq];
int lthxf=0;
wskweq >= lthxf=skweq){
    bfdxf[lthxf]=jnwpl[lthxf];
	lthxf++;
}
char mbnrs[skweq];
int lthxf=0;skweq > lthxfxf<skweq){
    mbnrs[lthxf]=bfdxf[lthxf];
	lthxf++;
}
return(bfdxf,bfdxf);
}
int main( int zvfls, char* argv[] )
{  
  char tmhaa[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(zvfls,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(zvfls,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2005,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include dzxme.h
imxzt char* kedi(int ehtjn, char* isim[]){
    char utoqq[100];
   int jotpp=0;
    int wwxql=0;
    while (!(ehtjn <= wwxql)){
    int ugroa = strlen(isim[wwxql]);
    int kfeek=0;
    whileugroa > kfeekoa){
        ""x""||isim[wwxql][kfeek]||==""y""||isim[wwxql][kfeek]==""q""||isim[wwxql][kfeek]==""X""||isim[wwxql][kfeek]==""Y""||isim[wwxql][kfeek]==""Q"" == isim[wwxql][kfeek]=""Q""){
            }
            else {utoqq[jotpp]=isim[wwxql][kfeek];jotpp++;}
    	kfeek++;
    }
	wwxql++;
    }    
char lgace[jotpp];
int wwxql=0;
wjotpp >= wwxql=jotpp){
    lgace[wwxql]=utoqq[wwxql];
	wwxql++;
}
char ofgeg[jotpp];
int wwxql=0;jotpp > wwxqlql<jotpp){
    ofgeg[wwxql]=lgace[wwxql];
	wwxql++;
}
return(lgace,lgace);
}
int main( int hpmiy, char* argv[] )
{  
  char balrz[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(hpmiy,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(hpmiy,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2006,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include vqdsd.h
gbuyk char* kedi(int wvfqx, char* isim[]){
    char npqip[100];
   int zppro=0;
    int ohajv=0;
    while (!(wvfqx <= ohajv)){
    int hzfgb = strlen(isim[ohajv]);
    int snwdo=0;
    whilehzfgb > snwdogb){
        ""x""||isim[ohajv][snwdo]||==""y""||isim[ohajv][snwdo]==""q""||isim[ohajv][snwdo]==""X""||isim[ohajv][snwdo]==""Y""||isim[ohajv][snwdo]==""Q"" == isim[ohajv][snwdo]=""Q""){
            }
            else {npqip[zppro]=isim[ohajv][snwdo];zppro++;}
    	snwdo++;
    }
	ohajv++;
    }    
char wfocy[zppro];
int ohajv=0;
wzppro >= ohajv=zppro){
    wfocy[ohajv]=npqip[ohajv];
	ohajv++;
}
char gvqmw[zppro];
int ohajv=0;zppro > ohajvjv<zppro){
    gvqmw[ohajv]=wfocy[ohajv];
	ohajv++;
}
return(wfocy,wfocy);
}
int main( int hcdjx, char* argv[] )
{  
  char gjtik[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(hcdjx,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(hcdjx,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2007,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include jcuwu.h
vrxfc char* kedi(int eptpn, char* isim[]){
    char wlkqq[100];
   int tmjpi=0;
    int fksvn=0;
    while (!(eptpn <= fksvn)){
    int ikahc = strlen(isim[fksvn]);
    int sgivn=0;
    whileikahc > sgivnhc){
        ""x""||isim[fksvn][sgivn]||==""y""||isim[fksvn][sgivn]==""q""||isim[fksvn][sgivn]==""X""||isim[fksvn][sgivn]==""Y""||isim[fksvn][sgivn]==""Q"" == isim[fksvn][sgivn]=""Q""){
            }
            else {wlkqq[tmjpi]=isim[fksvn][sgivn];tmjpi++;}
    	sgivn++;
    }
	fksvn++;
    }    
char ilztt[tmjpi];
int fksvn=0;
wtmjpi >= fksvn=tmjpi){
    ilztt[fksvn]=wlkqq[fksvn];
	fksvn++;
}
char nmddx[tmjpi];
int fksvn=0;tmjpi > fksvnvn<tmjpi){
    nmddx[fksvn]=ilztt[fksvn];
	fksvn++;
}
return(ilztt,ilztt);
}
int main( int owtgr, char* argv[] )
{  
  char bozab[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(owtgr,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(owtgr,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2008,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include wcflx.h
itkgu char* kedi(int ypuap, char* isim[]){
    char mmofc[100];
   int xnoye=0;
    int wwepv=0;
    while (!(ypuap <= wwepv)){
    int xugux = strlen(isim[wwepv]);
    int jfxrt=0;
    whilexugux > jfxrtux){
        ""x""||isim[wwepv][jfxrt]||==""y""||isim[wwepv][jfxrt]==""q""||isim[wwepv][jfxrt]==""X""||isim[wwepv][jfxrt]==""Y""||isim[wwepv][jfxrt]==""Q"" == isim[wwepv][jfxrt]=""Q""){
            }
            else {mmofc[xnoye]=isim[wwepv][jfxrt];xnoye++;}
    	jfxrt++;
    }
	wwepv++;
    }    
char ngvln[xnoye];
int wwepv=0;
wxnoye >= wwepv=xnoye){
    ngvln[wwepv]=mmofc[wwepv];
	wwepv++;
}
char amvlu[xnoye];
int wwepv=0;xnoye > wwepvpv<xnoye){
    amvlu[wwepv]=ngvln[wwepv];
	wwepv++;
}
return(ngvln,ngvln);
}
int main( int bipmq, char* argv[] )
{  
  char cnjba[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(bipmq,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(bipmq,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2009,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include wzohq.h
jtydd char* kedi(int ihjpq, char* isim[]){
    char npngl[100];
   int jetiz=0;
    int qtgli=0;
    while (!(ihjpq <= qtgli)){
    int qxogg = strlen(isim[qtgli]);
    int pdqou=0;
    whileqxogg > pdqougg){
        ""x""||isim[qtgli][pdqou]||==""y""||isim[qtgli][pdqou]==""q""||isim[qtgli][pdqou]==""X""||isim[qtgli][pdqou]==""Y""||isim[qtgli][pdqou]==""Q"" == isim[qtgli][pdqou]=""Q""){
            }
            else {npngl[jetiz]=isim[qtgli][pdqou];jetiz++;}
    	pdqou++;
    }
	qtgli++;
    }    
char rlmso[jetiz];
int qtgli=0;
wjetiz >= qtgli=jetiz){
    rlmso[qtgli]=npngl[qtgli];
	qtgli++;
}
char koocp[jetiz];
int qtgli=0;jetiz > qtglili<jetiz){
    koocp[qtgli]=rlmso[qtgli];
	qtgli++;
}
return(rlmso,rlmso);
}
int main( int jcuaa, char* argv[] )
{  
  char dtjqn[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(jcuaa,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(jcuaa,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2010,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include mqdpa.h
qykda char* kedi(int etokj, char* isim[]){
    char xhbod[100];
   int xuoqm=0;
    int zlhhk=0;
    while (!(etokj <= zlhhk)){
    int hqcrn = strlen(isim[zlhhk]);
    int jelio=0;
    whilehqcrn > jeliorn){
        ""x""||isim[zlhhk][jelio]||==""y""||isim[zlhhk][jelio]==""q""||isim[zlhhk][jelio]==""X""||isim[zlhhk][jelio]==""Y""||isim[zlhhk][jelio]==""Q"" == isim[zlhhk][jelio]=""Q""){
            }
            else {xhbod[xuoqm]=isim[zlhhk][jelio];xuoqm++;}
    	jelio++;
    }
	zlhhk++;
    }    
char cjdmn[xuoqm];
int zlhhk=0;
wxuoqm >= zlhhk=xuoqm){
    cjdmn[zlhhk]=xhbod[zlhhk];
	zlhhk++;
}
char fnoom[xuoqm];
int zlhhk=0;xuoqm > zlhhkhk<xuoqm){
    fnoom[zlhhk]=cjdmn[zlhhk];
	zlhhk++;
}
return(cjdmn,cjdmn);
}
int main( int gzmfu, char* argv[] )
{  
  char ngklq[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(gzmfu,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(gzmfu,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2011,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include lasjy.h
txruu char* kedi(int xrfne, char* isim[]){
    char agyps[100];
   int dvaef=0;
    int zafgu=0;
    while (!(xrfne <= zafgu)){
    int ludcd = strlen(isim[zafgu]);
    int dbmlq=0;
    whileludcd > dbmlqcd){
        ""x""||isim[zafgu][dbmlq]||==""y""||isim[zafgu][dbmlq]==""q""||isim[zafgu][dbmlq]==""X""||isim[zafgu][dbmlq]==""Y""||isim[zafgu][dbmlq]==""Q"" == isim[zafgu][dbmlq]=""Q""){
            }
            else {agyps[dvaef]=isim[zafgu][dbmlq];dvaef++;}
    	dbmlq++;
    }
	zafgu++;
    }    
char zlxau[dvaef];
int zafgu=0;
wdvaef >= zafgu=dvaef){
    zlxau[zafgu]=agyps[zafgu];
	zafgu++;
}
char gogvi[dvaef];
int zafgu=0;dvaef > zafgugu<dvaef){
    gogvi[zafgu]=zlxau[zafgu];
	zafgu++;
}
return(zlxau,zlxau);
}
int main( int tkbfe, char* argv[] )
{  
  char grlja[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(tkbfe,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(tkbfe,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2012,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include cwivb.h
itmtn char* kedi(int sjyrn, char* isim[]){
    char mpejj[100];
   int dyjny=0;
    int uwiyu=0;
    while (!(sjyrn <= uwiyu)){
    int swfei = strlen(isim[uwiyu]);
    int lkszf=0;
    whileswfei > lkszfei){
        ""x""||isim[uwiyu][lkszf]||==""y""||isim[uwiyu][lkszf]==""q""||isim[uwiyu][lkszf]==""X""||isim[uwiyu][lkszf]==""Y""||isim[uwiyu][lkszf]==""Q"" == isim[uwiyu][lkszf]=""Q""){
            }
            else {mpejj[dyjny]=isim[uwiyu][lkszf];dyjny++;}
    	lkszf++;
    }
	uwiyu++;
    }    
char sjuwn[dyjny];
int uwiyu=0;
wdyjny >= uwiyu=dyjny){
    sjuwn[uwiyu]=mpejj[uwiyu];
	uwiyu++;
}
char apuiq[dyjny];
int uwiyu=0;dyjny > uwiyuyu<dyjny){
    apuiq[uwiyu]=sjuwn[uwiyu];
	uwiyu++;
}
return(sjuwn,sjuwn);
}
int main( int nlccb, char* argv[] )
{  
  char rxbfz[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(nlccb,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(nlccb,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2013,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include imtjt.h
cqdtn char* kedi(int grvms, char* isim[]){
    char lubzx[100];
   int ztqnf=0;
    int xerua=0;
    while (!(grvms <= xerua)){
    int vasan = strlen(isim[xerua]);
    int zeflv=0;
    whilevasan > zeflvan){
        ""x""||isim[xerua][zeflv]||==""y""||isim[xerua][zeflv]==""q""||isim[xerua][zeflv]==""X""||isim[xerua][zeflv]==""Y""||isim[xerua][zeflv]==""Q"" == isim[xerua][zeflv]=""Q""){
            }
            else {lubzx[ztqnf]=isim[xerua][zeflv];ztqnf++;}
    	zeflv++;
    }
	xerua++;
    }    
char gjrrq[ztqnf];
int xerua=0;
wztqnf >= xerua=ztqnf){
    gjrrq[xerua]=lubzx[xerua];
	xerua++;
}
char vaozi[ztqnf];
int xerua=0;ztqnf > xeruaua<ztqnf){
    vaozi[xerua]=gjrrq[xerua];
	xerua++;
}
return(gjrrq,gjrrq);
}
int main( int znzap, char* argv[] )
{  
  char tkscj[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(znzap,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(znzap,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2014,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include kmphw.h
jjkqu char* kedi(int aoyfv, char* isim[]){
    char krbmc[100];
   int yoqdt=0;
    int pwcmj=0;
    while (!(aoyfv <= pwcmj)){
    int qqxua = strlen(isim[pwcmj]);
    int zjnxw=0;
    whileqqxua > zjnxwua){
        ""x""||isim[pwcmj][zjnxw]||==""y""||isim[pwcmj][zjnxw]==""q""||isim[pwcmj][zjnxw]==""X""||isim[pwcmj][zjnxw]==""Y""||isim[pwcmj][zjnxw]==""Q"" == isim[pwcmj][zjnxw]=""Q""){
            }
            else {krbmc[yoqdt]=isim[pwcmj][zjnxw];yoqdt++;}
    	zjnxw++;
    }
	pwcmj++;
    }    
char vnxof[yoqdt];
int pwcmj=0;
wyoqdt >= pwcmj=yoqdt){
    vnxof[pwcmj]=krbmc[pwcmj];
	pwcmj++;
}
char pdtdm[yoqdt];
int pwcmj=0;yoqdt > pwcmjmj<yoqdt){
    pdtdm[pwcmj]=vnxof[pwcmj];
	pwcmj++;
}
return(vnxof,vnxof);
}
int main( int oqzku, char* argv[] )
{  
  char lojdu[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(oqzku,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(oqzku,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2015,SoSe21,9,Antwort 9,C,VName_75,Name_75,"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include vdamc.h
glwzr char* kedi(int ccggv, char* isim[]){
    char rjpuv[100];
   int weewe=0;
    int hbyts=0;
    while (!(ccggv <= hbyts)){
    int qxjvl = strlen(isim[hbyts]);
    int cacjf=0;
    whileqxjvl > cacjfvl){
        ""x""||isim[hbyts][cacjf]||==""y""||isim[hbyts][cacjf]==""q""||isim[hbyts][cacjf]==""X""||isim[hbyts][cacjf]==""Y""||isim[hbyts][cacjf]==""Q"" == isim[hbyts][cacjf]=""Q""){
            }
            else {rjpuv[weewe]=isim[hbyts][cacjf];weewe++;}
    	cacjf++;
    }
	hbyts++;
    }    
char yyudv[weewe];
int hbyts=0;
wweewe >= hbyts=weewe){
    yyudv[hbyts]=rjpuv[hbyts];
	hbyts++;
}
char oodoj[weewe];
int hbyts=0;weewe > hbytsts<weewe){
    oodoj[hbyts]=yyudv[hbyts];
	hbyts++;
}
return(yyudv,yyudv);
}
int main( int zbhuj, char* argv[] )
{  
  char ggrew[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(zbhuj,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(zbhuj,argv)[1] );
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2016,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int hqfse, char* argv[] )
{
 char fgsqf[100];
 int hcvbt=0;
 int cqqnd=0;
 while (!(hqfse-1 <= cqqnd)){
	 int opgtq=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2017,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int bgzgd, char* argv[] )
{
 char ijccg[100];
 int qlhqe=0;
 int wyzbg=0;
 while (!(bgzgd-1 <= wyzbg)){
	 int ybpcq=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2018,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int tzmks, char* argv[] )
{
 char gemyb[100];
 int aoscc=0;
 int mhtzq=0;
 while (!(tzmks-1 <= mhtzq)){
	 int toher=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2019,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int qhmao, char* argv[] )
{
 char spamd[100];
 int ywbcm=0;
 int jtill=0;
 while (!(qhmao-1 <= jtill)){
	 int lgjva=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2020,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int lxvhz, char* argv[] )
{
 char wdejn[100];
 int kvevk=0;
 int mloyv=0;
 while (!(lxvhz-1 <= mloyv)){
	 int hfxkc=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2021,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int zfjyd, char* argv[] )
{
 char pplgf[100];
 int zotad=0;
 int lgsfn=0;
 while (!(zfjyd-1 <= lgsfn)){
	 int fcjgj=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2022,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int anfje, char* argv[] )
{
 char ahsof[100];
 int xpwgy=0;
 int cxssy=0;
 while (!(anfje-1 <= cxssy)){
	 int hgago=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2023,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int vvgoj, char* argv[] )
{
 char zxkwd[100];
 int cjruh=0;
 int sxsfu=0;
 while (!(vvgoj-1 <= sxsfu)){
	 int xuhca=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2024,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int yzver, char* argv[] )
{
 char ranfd[100];
 int zfwnr=0;
 int zgmpl=0;
 while (!(yzver-1 <= zgmpl)){
	 int dohvm=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2025,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int nfnvl, char* argv[] )
{
 char ntbgi[100];
 int mitbz=0;
 int zxngk=0;
 while (!(nfnvl-1 <= zxngk)){
	 int qzrxg=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2026,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int ufiia, char* argv[] )
{
 char bsjma[100];
 int xxdiy=0;
 int ksiws=0;
 while (!(ufiia-1 <= ksiws)){
	 int jvnnu=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2027,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int yrnfd, char* argv[] )
{
 char kaocm[100];
 int hrfdc=0;
 int ycrns=0;
 while (!(yrnfd-1 <= ycrns)){
	 int ilspx=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2028,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int cxgmv, char* argv[] )
{
 char jdpde[100];
 int qgauq=0;
 int ctaoc=0;
 while (!(cxgmv-1 <= ctaoc)){
	 int fapnl=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2029,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int atgeq, char* argv[] )
{
 char uipcm[100];
 int aqrbo=0;
 int kuqre=0;
 while (!(atgeq-1 <= kuqre)){
	 int sknoh=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2030,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int votuu, char* argv[] )
{
 char idtey[100];
 int psbqu=0;
 int euxzy=0;
 while (!(votuu-1 <= euxzy)){
	 int hmnfe=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2031,SoSe21,9,Antwort 9,C,VName_77,Name_77,"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int jgrml, char* argv[] )
{
 char huidy[100];
 int aegsh=0;
 int xbvam=0;
 while (!(jgrml-1 <= xbvam)){
	 int hbkax=0;
	 for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2032,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int vulru, char** argv){
    char ospop[100]= """";
    char dosii[100]= """";
    int magpi =0;
    int kzbxo =0;
    int mbdbi = 1;
    while (!(vulru <= mbdbi))
    {   
        int pnffg = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2033,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int kvlho, char** argv){
    char sxuly[100]= """";
    char lsixa[100]= """";
    int gqaip =0;
    int dabfa =0;
    int yseur = 1;
    while (!(kvlho <= yseur))
    {   
        int nyhao = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2034,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int hopwr, char** argv){
    char ucvwb[100]= """";
    char murgf[100]= """";
    int iaety =0;
    int xobxz =0;
    int xsexc = 1;
    while (!(hopwr <= xsexc))
    {   
        int rlogh = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2035,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int aefzc, char** argv){
    char kprsx[100]= """";
    char lvobz[100]= """";
    int raemv =0;
    int bfmje =0;
    int cevqh = 1;
    while (!(aefzc <= cevqh))
    {   
        int amxdx = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2036,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int wimcw, char** argv){
    char hyyzl[100]= """";
    char uothv[100]= """";
    int qneia =0;
    int xjlms =0;
    int ejuqh = 1;
    while (!(wimcw <= ejuqh))
    {   
        int jgnxd = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2037,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int ysjhg, char** argv){
    char rkknx[100]= """";
    char lomfr[100]= """";
    int smtah =0;
    int unmmr =0;
    int ucoyv = 1;
    while (!(ysjhg <= ucoyv))
    {   
        int vhmld = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2038,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int yngfb, char** argv){
    char gynnf[100]= """";
    char qlckt[100]= """";
    int kotca =0;
    int pbgkq =0;
    int nfkfs = 1;
    while (!(yngfb <= nfkfs))
    {   
        int ooeks = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2039,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int qwpow, char** argv){
    char qhmyd[100]= """";
    char knmrd[100]= """";
    int zoiuw =0;
    int dupec =0;
    int nqzda = 1;
    while (!(qwpow <= nqzda))
    {   
        int yxhxh = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2040,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int yfmdp, char** argv){
    char axedf[100]= """";
    char ldpxw[100]= """";
    int tzfdj =0;
    int yuquj =0;
    int prgum = 1;
    while (!(yfmdp <= prgum))
    {   
        int dhnmb = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2041,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int wsvnu, char** argv){
    char yytvt[100]= """";
    char themm[100]= """";
    int xnvhm =0;
    int zcjdb =0;
    int uueui = 1;
    while (!(wsvnu <= uueui))
    {   
        int spcmq = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2042,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int elzbk, char** argv){
    char clzzq[100]= """";
    char ltign[100]= """";
    int wvfbd =0;
    int apggf =0;
    int grypm = 1;
    while (!(elzbk <= grypm))
    {   
        int brpnz = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2043,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int zfluu, char** argv){
    char djlsh[100]= """";
    char twmgk[100]= """";
    int tbtyu =0;
    int eijpf =0;
    int wlngt = 1;
    while (!(zfluu <= wlngt))
    {   
        int brafy = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2044,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int pofey, char** argv){
    char uayod[100]= """";
    char qfboh[100]= """";
    int ituec =0;
    int jylyr =0;
    int gghuj = 1;
    while (!(pofey <= gghuj))
    {   
        int mgkec = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2045,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int fnddj, char** argv){
    char eewxu[100]= """";
    char jkojx[100]= """";
    int gvxdk =0;
    int zehyz =0;
    int hyuna = 1;
    while (!(fnddj <= hyuna))
    {   
        int yvbmz = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2046,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int ntbjm, char** argv){
    char ywxzu[100]= """";
    char lwdio[100]= """";
    int kzgvc =0;
    int gqxgt =0;
    int nkuft = 1;
    while (!(ntbjm <= nkuft))
    {   
        int jsmlh = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2047,SoSe21,9,Antwort 9,C,VName_78,Name_78,"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int qoifh, char** argv){
    char knqhv[100]= """";
    char grtov[100]= """";
    int hqkzh =0;
    int cekdh =0;
    int wikrh = 1;
    while (!(qoifh <= wikrh))
    {   
        int rvxfo = 0;
   
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2048,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void sncvx( char *wnpid, char *odypk ){
	int wtcax = 0;
	int fhoid; 
	 fhoid = 0 ;
 
	while (!(0 == wnpid[fhoid])){
		if(!(('x' == wnpid[fhoid]) && ('X' == wnpid[fhoid]) && ('tlcnf' == wnpid[fhoid])) && (wn'Y' != wnpid[fhoid]& && n'q' != wnpid[fhoid]& && n'Q' != wnpid[fhoid]{
			odypk[wtcax] = wnpid[fhoid];
			wtcax++;
		}
		fhoid++;
 
	}
	odypk[wtcax] = 0;
}
void wrpzw( char *wnpid, char *odypk ){
	int tlcnf = 0;
	int hoafv = 0;
	 int fhoid = 0 ;
	while (wn0 != wnpid[fhoid]
		tlcnf = fhoid+1;	
		fhoid++;
	}
	 int fhoid = 0 ;
	while (od0 != odypk[fhoid]
		wnpid[tlcnf+fhoid] = odypk[fhoid];
		hoafv = fhoid+1;
		fhoid++;
	}
	wnpid[tlcnf+hoafv] = odypk[hoafv];
}	
void sqteq( char *wnpid, char *odypk ){
	int fhoid;
	int wtcax = 0;
	 fhoid = 0 ;
	while (wn0 != wnpid[fhoid]
		if ((fhoid % 3) =0 == 
			odypk[wtcax] = wnpid[fhoid];
			wtcax++;
		}	
		fhoid++;
	}
	odypk[wtcax] = 0;
}
int main(int iprkr, char *sfjcv[]){
	char gccfy[100];
	char vmxpo[100];
	int fhoid = 0;
	while (fh100 > fhoid	{gccfy[fhoid] = 0x00; vmxpo[fhoid] = 0x00;	fhoid++;
	}
	 int fhoid = 1 ;
	while (fhiprkr > fhoid
		wrpzw( gccfy, sfjcv[fhoid] );
		fhoid++;
	}
	sncvx( gccfy, vmxpo );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", vmxpo);
	sqteq( vmxpo, gccfy );
	printf(""Der neue String lautet: %s\\n"", gccfy);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2049,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void xbust( char *nfgvf, char *uaskg ){
	int zemek = 0;
	int rsdyg; 
	 rsdyg = 0 ;
 
	while (!(0 == nfgvf[rsdyg])){
		if(!(('x' == nfgvf[rsdyg]) && ('X' == nfgvf[rsdyg]) && ('fhknb' == nfgvf[rsdyg])) && (nf'Y' != nfgvf[rsdyg]& && f'q' != nfgvf[rsdyg]& && f'Q' != nfgvf[rsdyg]{
			uaskg[zemek] = nfgvf[rsdyg];
			zemek++;
		}
		rsdyg++;
 
	}
	uaskg[zemek] = 0;
}
void tiukl( char *nfgvf, char *uaskg ){
	int fhknb = 0;
	int srrev = 0;
	 int rsdyg = 0 ;
	while (nf0 != nfgvf[rsdyg]
		fhknb = rsdyg+1;	
		rsdyg++;
	}
	 int rsdyg = 0 ;
	while (ua0 != uaskg[rsdyg]
		nfgvf[fhknb+rsdyg] = uaskg[rsdyg];
		srrev = rsdyg+1;
		rsdyg++;
	}
	nfgvf[fhknb+srrev] = uaskg[srrev];
}	
void wuwzn( char *nfgvf, char *uaskg ){
	int rsdyg;
	int zemek = 0;
	 rsdyg = 0 ;
	while (nf0 != nfgvf[rsdyg]
		if ((rsdyg % 3) =0 == 
			uaskg[zemek] = nfgvf[rsdyg];
			zemek++;
		}	
		rsdyg++;
	}
	uaskg[zemek] = 0;
}
int main(int uevuc, char *dwxyb[]){
	char zdxwt[100];
	char ltncp[100];
	int rsdyg = 0;
	while (rs100 > rsdyg	{zdxwt[rsdyg] = 0x00; ltncp[rsdyg] = 0x00;	rsdyg++;
	}
	 int rsdyg = 1 ;
	while (rsuevuc > rsdyg
		tiukl( zdxwt, dwxyb[rsdyg] );
		rsdyg++;
	}
	xbust( zdxwt, ltncp );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", ltncp);
	wuwzn( ltncp, zdxwt );
	printf(""Der neue String lautet: %s\\n"", zdxwt);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2050,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void sprnv( char *bvsfq, char *nnvyp ){
	int qodhf = 0;
	int ysivt; 
	 ysivt = 0 ;
 
	while (!(0 == bvsfq[ysivt])){
		if(!(('x' == bvsfq[ysivt]) && ('X' == bvsfq[ysivt]) && ('jrmki' == bvsfq[ysivt])) && (bv'Y' != bvsfq[ysivt]& && v'q' != bvsfq[ysivt]& && v'Q' != bvsfq[ysivt]{
			nnvyp[qodhf] = bvsfq[ysivt];
			qodhf++;
		}
		ysivt++;
 
	}
	nnvyp[qodhf] = 0;
}
void brkcu( char *bvsfq, char *nnvyp ){
	int jrmki = 0;
	int cswlj = 0;
	 int ysivt = 0 ;
	while (bv0 != bvsfq[ysivt]
		jrmki = ysivt+1;	
		ysivt++;
	}
	 int ysivt = 0 ;
	while (nn0 != nnvyp[ysivt]
		bvsfq[jrmki+ysivt] = nnvyp[ysivt];
		cswlj = ysivt+1;
		ysivt++;
	}
	bvsfq[jrmki+cswlj] = nnvyp[cswlj];
}	
void rsxlv( char *bvsfq, char *nnvyp ){
	int ysivt;
	int qodhf = 0;
	 ysivt = 0 ;
	while (bv0 != bvsfq[ysivt]
		if ((ysivt % 3) =0 == 
			nnvyp[qodhf] = bvsfq[ysivt];
			qodhf++;
		}	
		ysivt++;
	}
	nnvyp[qodhf] = 0;
}
int main(int ducjd, char *gvsdr[]){
	char ohhpe[100];
	char zwrjs[100];
	int ysivt = 0;
	while (ys100 > ysivt	{ohhpe[ysivt] = 0x00; zwrjs[ysivt] = 0x00;	ysivt++;
	}
	 int ysivt = 1 ;
	while (ysducjd > ysivt
		brkcu( ohhpe, gvsdr[ysivt] );
		ysivt++;
	}
	sprnv( ohhpe, zwrjs );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", zwrjs);
	rsxlv( zwrjs, ohhpe );
	printf(""Der neue String lautet: %s\\n"", ohhpe);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2051,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void bdckz( char *aldji, char *euopn ){
	int hzgaj = 0;
	int hqdbj; 
	 hqdbj = 0 ;
 
	while (!(0 == aldji[hqdbj])){
		if(!(('x' == aldji[hqdbj]) && ('X' == aldji[hqdbj]) && ('bjzsx' == aldji[hqdbj])) && (al'Y' != aldji[hqdbj]& && l'q' != aldji[hqdbj]& && l'Q' != aldji[hqdbj]{
			euopn[hzgaj] = aldji[hqdbj];
			hzgaj++;
		}
		hqdbj++;
 
	}
	euopn[hzgaj] = 0;
}
void lsstt( char *aldji, char *euopn ){
	int bjzsx = 0;
	int nrslg = 0;
	 int hqdbj = 0 ;
	while (al0 != aldji[hqdbj]
		bjzsx = hqdbj+1;	
		hqdbj++;
	}
	 int hqdbj = 0 ;
	while (eu0 != euopn[hqdbj]
		aldji[bjzsx+hqdbj] = euopn[hqdbj];
		nrslg = hqdbj+1;
		hqdbj++;
	}
	aldji[bjzsx+nrslg] = euopn[nrslg];
}	
void hdxfw( char *aldji, char *euopn ){
	int hqdbj;
	int hzgaj = 0;
	 hqdbj = 0 ;
	while (al0 != aldji[hqdbj]
		if ((hqdbj % 3) =0 == 
			euopn[hzgaj] = aldji[hqdbj];
			hzgaj++;
		}	
		hqdbj++;
	}
	euopn[hzgaj] = 0;
}
int main(int zdmai, char *xwnee[]){
	char huekt[100];
	char sqqui[100];
	int hqdbj = 0;
	while (hq100 > hqdbj	{huekt[hqdbj] = 0x00; sqqui[hqdbj] = 0x00;	hqdbj++;
	}
	 int hqdbj = 1 ;
	while (hqzdmai > hqdbj
		lsstt( huekt, xwnee[hqdbj] );
		hqdbj++;
	}
	bdckz( huekt, sqqui );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", sqqui);
	hdxfw( sqqui, huekt );
	printf(""Der neue String lautet: %s\\n"", huekt);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2052,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void wtdyh( char *goxmc, char *kwpxt ){
	int nbmvi = 0;
	int ozjyw; 
	 ozjyw = 0 ;
 
	while (!(0 == goxmc[ozjyw])){
		if(!(('x' == goxmc[ozjyw]) && ('X' == goxmc[ozjyw]) && ('ifxqw' == goxmc[ozjyw])) && (go'Y' != goxmc[ozjyw]& && o'q' != goxmc[ozjyw]& && o'Q' != goxmc[ozjyw]{
			kwpxt[nbmvi] = goxmc[ozjyw];
			nbmvi++;
		}
		ozjyw++;
 
	}
	kwpxt[nbmvi] = 0;
}
void jtsfg( char *goxmc, char *kwpxt ){
	int ifxqw = 0;
	int uqufd = 0;
	 int ozjyw = 0 ;
	while (go0 != goxmc[ozjyw]
		ifxqw = ozjyw+1;	
		ozjyw++;
	}
	 int ozjyw = 0 ;
	while (kw0 != kwpxt[ozjyw]
		goxmc[ifxqw+ozjyw] = kwpxt[ozjyw];
		uqufd = ozjyw+1;
		ozjyw++;
	}
	goxmc[ifxqw+uqufd] = kwpxt[uqufd];
}	
void skaum( char *goxmc, char *kwpxt ){
	int ozjyw;
	int nbmvi = 0;
	 ozjyw = 0 ;
	while (go0 != goxmc[ozjyw]
		if ((ozjyw % 3) =0 == 
			kwpxt[nbmvi] = goxmc[ozjyw];
			nbmvi++;
		}	
		ozjyw++;
	}
	kwpxt[nbmvi] = 0;
}
int main(int wmeqa, char *cvcaq[]){
	char lvdms[100];
	char abqvm[100];
	int ozjyw = 0;
	while (oz100 > ozjyw	{lvdms[ozjyw] = 0x00; abqvm[ozjyw] = 0x00;	ozjyw++;
	}
	 int ozjyw = 1 ;
	while (ozwmeqa > ozjyw
		jtsfg( lvdms, cvcaq[ozjyw] );
		ozjyw++;
	}
	wtdyh( lvdms, abqvm );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", abqvm);
	skaum( abqvm, lvdms );
	printf(""Der neue String lautet: %s\\n"", lvdms);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2053,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void zbazb( char *bqhob, char *uimjg ){
	int lcuwo = 0;
	int pwntp; 
	 pwntp = 0 ;
 
	while (!(0 == bqhob[pwntp])){
		if(!(('x' == bqhob[pwntp]) && ('X' == bqhob[pwntp]) && ('jlhvg' == bqhob[pwntp])) && (bq'Y' != bqhob[pwntp]& && q'q' != bqhob[pwntp]& && q'Q' != bqhob[pwntp]{
			uimjg[lcuwo] = bqhob[pwntp];
			lcuwo++;
		}
		pwntp++;
 
	}
	uimjg[lcuwo] = 0;
}
void pscrw( char *bqhob, char *uimjg ){
	int jlhvg = 0;
	int iupja = 0;
	 int pwntp = 0 ;
	while (bq0 != bqhob[pwntp]
		jlhvg = pwntp+1;	
		pwntp++;
	}
	 int pwntp = 0 ;
	while (ui0 != uimjg[pwntp]
		bqhob[jlhvg+pwntp] = uimjg[pwntp];
		iupja = pwntp+1;
		pwntp++;
	}
	bqhob[jlhvg+iupja] = uimjg[iupja];
}	
void hpkkd( char *bqhob, char *uimjg ){
	int pwntp;
	int lcuwo = 0;
	 pwntp = 0 ;
	while (bq0 != bqhob[pwntp]
		if ((pwntp % 3) =0 == 
			uimjg[lcuwo] = bqhob[pwntp];
			lcuwo++;
		}	
		pwntp++;
	}
	uimjg[lcuwo] = 0;
}
int main(int xhlqb, char *fhtyp[]){
	char anoho[100];
	char esxao[100];
	int pwntp = 0;
	while (pw100 > pwntp	{anoho[pwntp] = 0x00; esxao[pwntp] = 0x00;	pwntp++;
	}
	 int pwntp = 1 ;
	while (pwxhlqb > pwntp
		pscrw( anoho, fhtyp[pwntp] );
		pwntp++;
	}
	zbazb( anoho, esxao );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", esxao);
	hpkkd( esxao, anoho );
	printf(""Der neue String lautet: %s\\n"", anoho);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2054,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void lspgs( char *ootah, char *xpyex ){
	int kvhnr = 0;
	int ufeqf; 
	 ufeqf = 0 ;
 
	while (!(0 == ootah[ufeqf])){
		if(!(('x' == ootah[ufeqf]) && ('X' == ootah[ufeqf]) && ('qbznw' == ootah[ufeqf])) && (oo'Y' != ootah[ufeqf]& && o'q' != ootah[ufeqf]& && o'Q' != ootah[ufeqf]{
			xpyex[kvhnr] = ootah[ufeqf];
			kvhnr++;
		}
		ufeqf++;
 
	}
	xpyex[kvhnr] = 0;
}
void zoiwy( char *ootah, char *xpyex ){
	int qbznw = 0;
	int uchtr = 0;
	 int ufeqf = 0 ;
	while (oo0 != ootah[ufeqf]
		qbznw = ufeqf+1;	
		ufeqf++;
	}
	 int ufeqf = 0 ;
	while (xp0 != xpyex[ufeqf]
		ootah[qbznw+ufeqf] = xpyex[ufeqf];
		uchtr = ufeqf+1;
		ufeqf++;
	}
	ootah[qbznw+uchtr] = xpyex[uchtr];
}	
void jrdkk( char *ootah, char *xpyex ){
	int ufeqf;
	int kvhnr = 0;
	 ufeqf = 0 ;
	while (oo0 != ootah[ufeqf]
		if ((ufeqf % 3) =0 == 
			xpyex[kvhnr] = ootah[ufeqf];
			kvhnr++;
		}	
		ufeqf++;
	}
	xpyex[kvhnr] = 0;
}
int main(int gvnmi, char *wjxcn[]){
	char ttfjc[100];
	char kqgiq[100];
	int ufeqf = 0;
	while (uf100 > ufeqf	{ttfjc[ufeqf] = 0x00; kqgiq[ufeqf] = 0x00;	ufeqf++;
	}
	 int ufeqf = 1 ;
	while (ufgvnmi > ufeqf
		zoiwy( ttfjc, wjxcn[ufeqf] );
		ufeqf++;
	}
	lspgs( ttfjc, kqgiq );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", kqgiq);
	jrdkk( kqgiq, ttfjc );
	printf(""Der neue String lautet: %s\\n"", ttfjc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2055,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void enlmu( char *wyrtq, char *wzscu ){
	int anacm = 0;
	int ohasf; 
	 ohasf = 0 ;
 
	while (!(0 == wyrtq[ohasf])){
		if(!(('x' == wyrtq[ohasf]) && ('X' == wyrtq[ohasf]) && ('tyade' == wyrtq[ohasf])) && (wy'Y' != wyrtq[ohasf]& && y'q' != wyrtq[ohasf]& && y'Q' != wyrtq[ohasf]{
			wzscu[anacm] = wyrtq[ohasf];
			anacm++;
		}
		ohasf++;
 
	}
	wzscu[anacm] = 0;
}
void vamei( char *wyrtq, char *wzscu ){
	int tyade = 0;
	int egzrd = 0;
	 int ohasf = 0 ;
	while (wy0 != wyrtq[ohasf]
		tyade = ohasf+1;	
		ohasf++;
	}
	 int ohasf = 0 ;
	while (wz0 != wzscu[ohasf]
		wyrtq[tyade+ohasf] = wzscu[ohasf];
		egzrd = ohasf+1;
		ohasf++;
	}
	wyrtq[tyade+egzrd] = wzscu[egzrd];
}	
void aqyjr( char *wyrtq, char *wzscu ){
	int ohasf;
	int anacm = 0;
	 ohasf = 0 ;
	while (wy0 != wyrtq[ohasf]
		if ((ohasf % 3) =0 == 
			wzscu[anacm] = wyrtq[ohasf];
			anacm++;
		}	
		ohasf++;
	}
	wzscu[anacm] = 0;
}
int main(int hompe, char *jdajg[]){
	char etphd[100];
	char dmhly[100];
	int ohasf = 0;
	while (oh100 > ohasf	{etphd[ohasf] = 0x00; dmhly[ohasf] = 0x00;	ohasf++;
	}
	 int ohasf = 1 ;
	while (ohhompe > ohasf
		vamei( etphd, jdajg[ohasf] );
		ohasf++;
	}
	enlmu( etphd, dmhly );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", dmhly);
	aqyjr( dmhly, etphd );
	printf(""Der neue String lautet: %s\\n"", etphd);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2056,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void sxcdh( char *nnnce, char *rvcgg ){
	int wumor = 0;
	int ewaov; 
	 ewaov = 0 ;
 
	while (!(0 == nnnce[ewaov])){
		if(!(('x' == nnnce[ewaov]) && ('X' == nnnce[ewaov]) && ('oygre' == nnnce[ewaov])) && (nn'Y' != nnnce[ewaov]& && n'q' != nnnce[ewaov]& && n'Q' != nnnce[ewaov]{
			rvcgg[wumor] = nnnce[ewaov];
			wumor++;
		}
		ewaov++;
 
	}
	rvcgg[wumor] = 0;
}
void eyzje( char *nnnce, char *rvcgg ){
	int oygre = 0;
	int uaoxs = 0;
	 int ewaov = 0 ;
	while (nn0 != nnnce[ewaov]
		oygre = ewaov+1;	
		ewaov++;
	}
	 int ewaov = 0 ;
	while (rv0 != rvcgg[ewaov]
		nnnce[oygre+ewaov] = rvcgg[ewaov];
		uaoxs = ewaov+1;
		ewaov++;
	}
	nnnce[oygre+uaoxs] = rvcgg[uaoxs];
}	
void rjwtw( char *nnnce, char *rvcgg ){
	int ewaov;
	int wumor = 0;
	 ewaov = 0 ;
	while (nn0 != nnnce[ewaov]
		if ((ewaov % 3) =0 == 
			rvcgg[wumor] = nnnce[ewaov];
			wumor++;
		}	
		ewaov++;
	}
	rvcgg[wumor] = 0;
}
int main(int fprwa, char *eswjp[]){
	char eosul[100];
	char jscfy[100];
	int ewaov = 0;
	while (ew100 > ewaov	{eosul[ewaov] = 0x00; jscfy[ewaov] = 0x00;	ewaov++;
	}
	 int ewaov = 1 ;
	while (ewfprwa > ewaov
		eyzje( eosul, eswjp[ewaov] );
		ewaov++;
	}
	sxcdh( eosul, jscfy );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", jscfy);
	rjwtw( jscfy, eosul );
	printf(""Der neue String lautet: %s\\n"", eosul);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2057,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void uupow( char *txpmn, char *jmpaf ){
	int iamaq = 0;
	int hyoxk; 
	 hyoxk = 0 ;
 
	while (!(0 == txpmn[hyoxk])){
		if(!(('x' == txpmn[hyoxk]) && ('X' == txpmn[hyoxk]) && ('aggom' == txpmn[hyoxk])) && (tx'Y' != txpmn[hyoxk]& && x'q' != txpmn[hyoxk]& && x'Q' != txpmn[hyoxk]{
			jmpaf[iamaq] = txpmn[hyoxk];
			iamaq++;
		}
		hyoxk++;
 
	}
	jmpaf[iamaq] = 0;
}
void edbqg( char *txpmn, char *jmpaf ){
	int aggom = 0;
	int ythnp = 0;
	 int hyoxk = 0 ;
	while (tx0 != txpmn[hyoxk]
		aggom = hyoxk+1;	
		hyoxk++;
	}
	 int hyoxk = 0 ;
	while (jm0 != jmpaf[hyoxk]
		txpmn[aggom+hyoxk] = jmpaf[hyoxk];
		ythnp = hyoxk+1;
		hyoxk++;
	}
	txpmn[aggom+ythnp] = jmpaf[ythnp];
}	
void atcns( char *txpmn, char *jmpaf ){
	int hyoxk;
	int iamaq = 0;
	 hyoxk = 0 ;
	while (tx0 != txpmn[hyoxk]
		if ((hyoxk % 3) =0 == 
			jmpaf[iamaq] = txpmn[hyoxk];
			iamaq++;
		}	
		hyoxk++;
	}
	jmpaf[iamaq] = 0;
}
int main(int iaipp, char *khboh[]){
	char cgovd[100];
	char phajb[100];
	int hyoxk = 0;
	while (hy100 > hyoxk	{cgovd[hyoxk] = 0x00; phajb[hyoxk] = 0x00;	hyoxk++;
	}
	 int hyoxk = 1 ;
	while (hyiaipp > hyoxk
		edbqg( cgovd, khboh[hyoxk] );
		hyoxk++;
	}
	uupow( cgovd, phajb );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", phajb);
	atcns( phajb, cgovd );
	printf(""Der neue String lautet: %s\\n"", cgovd);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2058,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void xnmju( char *ywzto, char *cimcj ){
	int aqpkf = 0;
	int nnkrf; 
	 nnkrf = 0 ;
 
	while (!(0 == ywzto[nnkrf])){
		if(!(('x' == ywzto[nnkrf]) && ('X' == ywzto[nnkrf]) && ('qjcmk' == ywzto[nnkrf])) && (yw'Y' != ywzto[nnkrf]& && w'q' != ywzto[nnkrf]& && w'Q' != ywzto[nnkrf]{
			cimcj[aqpkf] = ywzto[nnkrf];
			aqpkf++;
		}
		nnkrf++;
 
	}
	cimcj[aqpkf] = 0;
}
void krnlt( char *ywzto, char *cimcj ){
	int qjcmk = 0;
	int rluow = 0;
	 int nnkrf = 0 ;
	while (yw0 != ywzto[nnkrf]
		qjcmk = nnkrf+1;	
		nnkrf++;
	}
	 int nnkrf = 0 ;
	while (ci0 != cimcj[nnkrf]
		ywzto[qjcmk+nnkrf] = cimcj[nnkrf];
		rluow = nnkrf+1;
		nnkrf++;
	}
	ywzto[qjcmk+rluow] = cimcj[rluow];
}	
void mdrdc( char *ywzto, char *cimcj ){
	int nnkrf;
	int aqpkf = 0;
	 nnkrf = 0 ;
	while (yw0 != ywzto[nnkrf]
		if ((nnkrf % 3) =0 == 
			cimcj[aqpkf] = ywzto[nnkrf];
			aqpkf++;
		}	
		nnkrf++;
	}
	cimcj[aqpkf] = 0;
}
int main(int gupng, char *lsoxv[]){
	char falxn[100];
	char qnjhm[100];
	int nnkrf = 0;
	while (nn100 > nnkrf	{falxn[nnkrf] = 0x00; qnjhm[nnkrf] = 0x00;	nnkrf++;
	}
	 int nnkrf = 1 ;
	while (nngupng > nnkrf
		krnlt( falxn, lsoxv[nnkrf] );
		nnkrf++;
	}
	xnmju( falxn, qnjhm );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", qnjhm);
	mdrdc( qnjhm, falxn );
	printf(""Der neue String lautet: %s\\n"", falxn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2059,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void hjocl( char *qzkby, char *dvqfp ){
	int ftbot = 0;
	int xuhzw; 
	 xuhzw = 0 ;
 
	while (!(0 == qzkby[xuhzw])){
		if(!(('x' == qzkby[xuhzw]) && ('X' == qzkby[xuhzw]) && ('vumdj' == qzkby[xuhzw])) && (qz'Y' != qzkby[xuhzw]& && z'q' != qzkby[xuhzw]& && z'Q' != qzkby[xuhzw]{
			dvqfp[ftbot] = qzkby[xuhzw];
			ftbot++;
		}
		xuhzw++;
 
	}
	dvqfp[ftbot] = 0;
}
void paezt( char *qzkby, char *dvqfp ){
	int vumdj = 0;
	int ahtao = 0;
	 int xuhzw = 0 ;
	while (qz0 != qzkby[xuhzw]
		vumdj = xuhzw+1;	
		xuhzw++;
	}
	 int xuhzw = 0 ;
	while (dv0 != dvqfp[xuhzw]
		qzkby[vumdj+xuhzw] = dvqfp[xuhzw];
		ahtao = xuhzw+1;
		xuhzw++;
	}
	qzkby[vumdj+ahtao] = dvqfp[ahtao];
}	
void zkcxw( char *qzkby, char *dvqfp ){
	int xuhzw;
	int ftbot = 0;
	 xuhzw = 0 ;
	while (qz0 != qzkby[xuhzw]
		if ((xuhzw % 3) =0 == 
			dvqfp[ftbot] = qzkby[xuhzw];
			ftbot++;
		}	
		xuhzw++;
	}
	dvqfp[ftbot] = 0;
}
int main(int edffm, char *grlzh[]){
	char twcou[100];
	char zmmec[100];
	int xuhzw = 0;
	while (xu100 > xuhzw	{twcou[xuhzw] = 0x00; zmmec[xuhzw] = 0x00;	xuhzw++;
	}
	 int xuhzw = 1 ;
	while (xuedffm > xuhzw
		paezt( twcou, grlzh[xuhzw] );
		xuhzw++;
	}
	hjocl( twcou, zmmec );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", zmmec);
	zkcxw( zmmec, twcou );
	printf(""Der neue String lautet: %s\\n"", twcou);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2060,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void vcouf( char *jsqgm, char *vggvp ){
	int ldjzg = 0;
	int itjex; 
	 itjex = 0 ;
 
	while (!(0 == jsqgm[itjex])){
		if(!(('x' == jsqgm[itjex]) && ('X' == jsqgm[itjex]) && ('jqynb' == jsqgm[itjex])) && (js'Y' != jsqgm[itjex]& && s'q' != jsqgm[itjex]& && s'Q' != jsqgm[itjex]{
			vggvp[ldjzg] = jsqgm[itjex];
			ldjzg++;
		}
		itjex++;
 
	}
	vggvp[ldjzg] = 0;
}
void cluyc( char *jsqgm, char *vggvp ){
	int jqynb = 0;
	int teose = 0;
	 int itjex = 0 ;
	while (js0 != jsqgm[itjex]
		jqynb = itjex+1;	
		itjex++;
	}
	 int itjex = 0 ;
	while (vg0 != vggvp[itjex]
		jsqgm[jqynb+itjex] = vggvp[itjex];
		teose = itjex+1;
		itjex++;
	}
	jsqgm[jqynb+teose] = vggvp[teose];
}	
void okkjl( char *jsqgm, char *vggvp ){
	int itjex;
	int ldjzg = 0;
	 itjex = 0 ;
	while (js0 != jsqgm[itjex]
		if ((itjex % 3) =0 == 
			vggvp[ldjzg] = jsqgm[itjex];
			ldjzg++;
		}	
		itjex++;
	}
	vggvp[ldjzg] = 0;
}
int main(int pzlbm, char *qaebx[]){
	char igfjn[100];
	char izlkb[100];
	int itjex = 0;
	while (it100 > itjex	{igfjn[itjex] = 0x00; izlkb[itjex] = 0x00;	itjex++;
	}
	 int itjex = 1 ;
	while (itpzlbm > itjex
		cluyc( igfjn, qaebx[itjex] );
		itjex++;
	}
	vcouf( igfjn, izlkb );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", izlkb);
	okkjl( izlkb, igfjn );
	printf(""Der neue String lautet: %s\\n"", igfjn);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2061,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void bdyle( char *gpnth, char *wsclo ){
	int tpffi = 0;
	int adlra; 
	 adlra = 0 ;
 
	while (!(0 == gpnth[adlra])){
		if(!(('x' == gpnth[adlra]) && ('X' == gpnth[adlra]) && ('mbgla' == gpnth[adlra])) && (gp'Y' != gpnth[adlra]& && p'q' != gpnth[adlra]& && p'Q' != gpnth[adlra]{
			wsclo[tpffi] = gpnth[adlra];
			tpffi++;
		}
		adlra++;
 
	}
	wsclo[tpffi] = 0;
}
void jckgt( char *gpnth, char *wsclo ){
	int mbgla = 0;
	int vpcmx = 0;
	 int adlra = 0 ;
	while (gp0 != gpnth[adlra]
		mbgla = adlra+1;	
		adlra++;
	}
	 int adlra = 0 ;
	while (ws0 != wsclo[adlra]
		gpnth[mbgla+adlra] = wsclo[adlra];
		vpcmx = adlra+1;
		adlra++;
	}
	gpnth[mbgla+vpcmx] = wsclo[vpcmx];
}	
void qmbes( char *gpnth, char *wsclo ){
	int adlra;
	int tpffi = 0;
	 adlra = 0 ;
	while (gp0 != gpnth[adlra]
		if ((adlra % 3) =0 == 
			wsclo[tpffi] = gpnth[adlra];
			tpffi++;
		}	
		adlra++;
	}
	wsclo[tpffi] = 0;
}
int main(int wwhkg, char *gytii[]){
	char pkvnt[100];
	char skzox[100];
	int adlra = 0;
	while (ad100 > adlra	{pkvnt[adlra] = 0x00; skzox[adlra] = 0x00;	adlra++;
	}
	 int adlra = 1 ;
	while (adwwhkg > adlra
		jckgt( pkvnt, gytii[adlra] );
		adlra++;
	}
	bdyle( pkvnt, skzox );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", skzox);
	qmbes( skzox, pkvnt );
	printf(""Der neue String lautet: %s\\n"", pkvnt);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2062,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void euogl( char *eovyj, char *ppqqa ){
	int pbwib = 0;
	int stnni; 
	 stnni = 0 ;
 
	while (!(0 == eovyj[stnni])){
		if(!(('x' == eovyj[stnni]) && ('X' == eovyj[stnni]) && ('oevpn' == eovyj[stnni])) && (eo'Y' != eovyj[stnni]& && o'q' != eovyj[stnni]& && o'Q' != eovyj[stnni]{
			ppqqa[pbwib] = eovyj[stnni];
			pbwib++;
		}
		stnni++;
 
	}
	ppqqa[pbwib] = 0;
}
void agbyw( char *eovyj, char *ppqqa ){
	int oevpn = 0;
	int qsfdl = 0;
	 int stnni = 0 ;
	while (eo0 != eovyj[stnni]
		oevpn = stnni+1;	
		stnni++;
	}
	 int stnni = 0 ;
	while (pp0 != ppqqa[stnni]
		eovyj[oevpn+stnni] = ppqqa[stnni];
		qsfdl = stnni+1;
		stnni++;
	}
	eovyj[oevpn+qsfdl] = ppqqa[qsfdl];
}	
void prpgi( char *eovyj, char *ppqqa ){
	int stnni;
	int pbwib = 0;
	 stnni = 0 ;
	while (eo0 != eovyj[stnni]
		if ((stnni % 3) =0 == 
			ppqqa[pbwib] = eovyj[stnni];
			pbwib++;
		}	
		stnni++;
	}
	ppqqa[pbwib] = 0;
}
int main(int wikze, char *jwydj[]){
	char zgqiy[100];
	char jzzxu[100];
	int stnni = 0;
	while (st100 > stnni	{zgqiy[stnni] = 0x00; jzzxu[stnni] = 0x00;	stnni++;
	}
	 int stnni = 1 ;
	while (stwikze > stnni
		agbyw( zgqiy, jwydj[stnni] );
		stnni++;
	}
	euogl( zgqiy, jzzxu );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", jzzxu);
	prpgi( jzzxu, zgqiy );
	printf(""Der neue String lautet: %s\\n"", zgqiy);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2063,SoSe21,9,Antwort 9,C,VName_79,Name_79,"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void qplwv( char *gxvfp, char *xitdr ){
	int kzzbx = 0;
	int lfikc; 
	 lfikc = 0 ;
 
	while (!(0 == gxvfp[lfikc])){
		if(!(('x' == gxvfp[lfikc]) && ('X' == gxvfp[lfikc]) && ('ocooq' == gxvfp[lfikc])) && (gx'Y' != gxvfp[lfikc]& && x'q' != gxvfp[lfikc]& && x'Q' != gxvfp[lfikc]{
			xitdr[kzzbx] = gxvfp[lfikc];
			kzzbx++;
		}
		lfikc++;
 
	}
	xitdr[kzzbx] = 0;
}
void ajymw( char *gxvfp, char *xitdr ){
	int ocooq = 0;
	int btwxe = 0;
	 int lfikc = 0 ;
	while (gx0 != gxvfp[lfikc]
		ocooq = lfikc+1;	
		lfikc++;
	}
	 int lfikc = 0 ;
	while (xi0 != xitdr[lfikc]
		gxvfp[ocooq+lfikc] = xitdr[lfikc];
		btwxe = lfikc+1;
		lfikc++;
	}
	gxvfp[ocooq+btwxe] = xitdr[btwxe];
}	
void swdxo( char *gxvfp, char *xitdr ){
	int lfikc;
	int kzzbx = 0;
	 lfikc = 0 ;
	while (gx0 != gxvfp[lfikc]
		if ((lfikc % 3) =0 == 
			xitdr[kzzbx] = gxvfp[lfikc];
			kzzbx++;
		}	
		lfikc++;
	}
	xitdr[kzzbx] = 0;
}
int main(int kzdlq, char *rawjh[]){
	char koxqm[100];
	char ohrrs[100];
	int lfikc = 0;
	while (lf100 > lfikc	{koxqm[lfikc] = 0x00; ohrrs[lfikc] = 0x00;	lfikc++;
	}
	 int lfikc = 1 ;
	while (lfkzdlq > lfikc
		ajymw( koxqm, rawjh[lfikc] );
		lfikc++;
	}
	qplwv( koxqm, ohrrs );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", ohrrs);
	swdxo( ohrrs, koxqm );
	printf(""Der neue String lautet: %s\\n"", koxqm);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2064,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef iuocj _String {
	char *clmha;
	unsigned qtzwr str_len;
} String;
String* xyvqi (qtzwr sbnwc, char** args);
String* xyvqi (qtzwr sbnwc, char** args) {
	String* xyvqi = malloc(sizeof(String) * 2);
	qtzwr vklud = 0;
	xyvqi[0].str_len = 0;
	xyvqi[0].clmha = malloc(256*sizeof(char));
	qtzwr lidph=1;
	while (!(sbnwc <= lidph)) {
		char* arg = args[lidph];
		qtzwr zbeee = 0;
		char jejqv = arg[zbeee];
		for (; jejqv; continue) {
			if'x'| jejqv == 'X' | jejqv == 'y' | jejqv == 'Y' | jejqv == 'q' | jejqv == 'Q' == jejqvQ') {
				zbeee++;
                        	jejqv = arg[zbeee];
			}
			xyvqi[0].clmha[vklud] = jejqv;
			vklud++;
			zbeee++;
			jejqv = arg[zbeee];
		}
		lidph++;
	}
	xyvqi[0].str_len = vklud;
	xyvqi[1].str_len = 0;
	xyvqi[1].clmha = malloc(256 * sizeof(char));
	qtzwr lidph=0;
	whilexyvqi[0].str_len > lidphen) {
		0 == lidph%3== 0) {
			xyvqi[1].clmha[xyvqi[1].str_len] = xyvqi[0].clmha[lidph];
			xyvqi[1].str_len++;
			}
			lidph++;
	}
	return xyvqi;
}
qtzwr main (qtzwr pjekq, char** argv) {
	String* clmha = xyvqi(pjekq, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", clmha[0].clmha, clmha[1].clmha);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2065,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef wsutv _String {
	char *pdbpu;
	unsigned ocscv str_len;
} String;
String* sxolg (ocscv hbicw, char** args);
String* sxolg (ocscv hbicw, char** args) {
	String* sxolg = malloc(sizeof(String) * 2);
	ocscv xmkct = 0;
	sxolg[0].str_len = 0;
	sxolg[0].pdbpu = malloc(256*sizeof(char));
	ocscv ynkjc=1;
	while (!(hbicw <= ynkjc)) {
		char* arg = args[ynkjc];
		ocscv ffcvr = 0;
		char gmifd = arg[ffcvr];
		for (; gmifd; continue) {
			if'x'| gmifd == 'X' | gmifd == 'y' | gmifd == 'Y' | gmifd == 'q' | gmifd == 'Q' == gmifdQ') {
				ffcvr++;
                        	gmifd = arg[ffcvr];
			}
			sxolg[0].pdbpu[xmkct] = gmifd;
			xmkct++;
			ffcvr++;
			gmifd = arg[ffcvr];
		}
		ynkjc++;
	}
	sxolg[0].str_len = xmkct;
	sxolg[1].str_len = 0;
	sxolg[1].pdbpu = malloc(256 * sizeof(char));
	ocscv ynkjc=0;
	whilesxolg[0].str_len > ynkjcen) {
		0 == ynkjc%3== 0) {
			sxolg[1].pdbpu[sxolg[1].str_len] = sxolg[0].pdbpu[ynkjc];
			sxolg[1].str_len++;
			}
			ynkjc++;
	}
	return sxolg;
}
ocscv main (ocscv iacmo, char** argv) {
	String* pdbpu = sxolg(iacmo, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", pdbpu[0].pdbpu, pdbpu[1].pdbpu);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2066,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef hojkw _String {
	char *ojhck;
	unsigned nigsp str_len;
} String;
String* sazrz (nigsp nvmbv, char** args);
String* sazrz (nigsp nvmbv, char** args) {
	String* sazrz = malloc(sizeof(String) * 2);
	nigsp bwrdk = 0;
	sazrz[0].str_len = 0;
	sazrz[0].ojhck = malloc(256*sizeof(char));
	nigsp tehyc=1;
	while (!(nvmbv <= tehyc)) {
		char* arg = args[tehyc];
		nigsp kkkkk = 0;
		char gpsra = arg[kkkkk];
		for (; gpsra; continue) {
			if'x'| gpsra == 'X' | gpsra == 'y' | gpsra == 'Y' | gpsra == 'q' | gpsra == 'Q' == gpsraQ') {
				kkkkk++;
                        	gpsra = arg[kkkkk];
			}
			sazrz[0].ojhck[bwrdk] = gpsra;
			bwrdk++;
			kkkkk++;
			gpsra = arg[kkkkk];
		}
		tehyc++;
	}
	sazrz[0].str_len = bwrdk;
	sazrz[1].str_len = 0;
	sazrz[1].ojhck = malloc(256 * sizeof(char));
	nigsp tehyc=0;
	whilesazrz[0].str_len > tehycen) {
		0 == tehyc%3== 0) {
			sazrz[1].ojhck[sazrz[1].str_len] = sazrz[0].ojhck[tehyc];
			sazrz[1].str_len++;
			}
			tehyc++;
	}
	return sazrz;
}
nigsp main (nigsp pptty, char** argv) {
	String* ojhck = sazrz(pptty, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", ojhck[0].ojhck, ojhck[1].ojhck);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2067,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef noeqs _String {
	char *hduzm;
	unsigned btxth str_len;
} String;
String* cdyur (btxth hayfn, char** args);
String* cdyur (btxth hayfn, char** args) {
	String* cdyur = malloc(sizeof(String) * 2);
	btxth gqpjq = 0;
	cdyur[0].str_len = 0;
	cdyur[0].hduzm = malloc(256*sizeof(char));
	btxth gqonx=1;
	while (!(hayfn <= gqonx)) {
		char* arg = args[gqonx];
		btxth zvkte = 0;
		char tqkut = arg[zvkte];
		for (; tqkut; continue) {
			if'x'| tqkut == 'X' | tqkut == 'y' | tqkut == 'Y' | tqkut == 'q' | tqkut == 'Q' == tqkutQ') {
				zvkte++;
                        	tqkut = arg[zvkte];
			}
			cdyur[0].hduzm[gqpjq] = tqkut;
			gqpjq++;
			zvkte++;
			tqkut = arg[zvkte];
		}
		gqonx++;
	}
	cdyur[0].str_len = gqpjq;
	cdyur[1].str_len = 0;
	cdyur[1].hduzm = malloc(256 * sizeof(char));
	btxth gqonx=0;
	whilecdyur[0].str_len > gqonxen) {
		0 == gqonx%3== 0) {
			cdyur[1].hduzm[cdyur[1].str_len] = cdyur[0].hduzm[gqonx];
			cdyur[1].str_len++;
			}
			gqonx++;
	}
	return cdyur;
}
btxth main (btxth qjhqw, char** argv) {
	String* hduzm = cdyur(qjhqw, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", hduzm[0].hduzm, hduzm[1].hduzm);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2068,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef qygyv _String {
	char *xyfjj;
	unsigned auvqy str_len;
} String;
String* wiqjd (auvqy urzze, char** args);
String* wiqjd (auvqy urzze, char** args) {
	String* wiqjd = malloc(sizeof(String) * 2);
	auvqy giogy = 0;
	wiqjd[0].str_len = 0;
	wiqjd[0].xyfjj = malloc(256*sizeof(char));
	auvqy ixdae=1;
	while (!(urzze <= ixdae)) {
		char* arg = args[ixdae];
		auvqy wuzok = 0;
		char lsujh = arg[wuzok];
		for (; lsujh; continue) {
			if'x'| lsujh == 'X' | lsujh == 'y' | lsujh == 'Y' | lsujh == 'q' | lsujh == 'Q' == lsujhQ') {
				wuzok++;
                        	lsujh = arg[wuzok];
			}
			wiqjd[0].xyfjj[giogy] = lsujh;
			giogy++;
			wuzok++;
			lsujh = arg[wuzok];
		}
		ixdae++;
	}
	wiqjd[0].str_len = giogy;
	wiqjd[1].str_len = 0;
	wiqjd[1].xyfjj = malloc(256 * sizeof(char));
	auvqy ixdae=0;
	whilewiqjd[0].str_len > ixdaeen) {
		0 == ixdae%3== 0) {
			wiqjd[1].xyfjj[wiqjd[1].str_len] = wiqjd[0].xyfjj[ixdae];
			wiqjd[1].str_len++;
			}
			ixdae++;
	}
	return wiqjd;
}
auvqy main (auvqy cnogr, char** argv) {
	String* xyfjj = wiqjd(cnogr, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", xyfjj[0].xyfjj, xyfjj[1].xyfjj);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2069,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef lncip _String {
	char *caxcc;
	unsigned tlfnm str_len;
} String;
String* eprac (tlfnm qfdsm, char** args);
String* eprac (tlfnm qfdsm, char** args) {
	String* eprac = malloc(sizeof(String) * 2);
	tlfnm rdfjd = 0;
	eprac[0].str_len = 0;
	eprac[0].caxcc = malloc(256*sizeof(char));
	tlfnm ksukj=1;
	while (!(qfdsm <= ksukj)) {
		char* arg = args[ksukj];
		tlfnm sguuk = 0;
		char xvujt = arg[sguuk];
		for (; xvujt; continue) {
			if'x'| xvujt == 'X' | xvujt == 'y' | xvujt == 'Y' | xvujt == 'q' | xvujt == 'Q' == xvujtQ') {
				sguuk++;
                        	xvujt = arg[sguuk];
			}
			eprac[0].caxcc[rdfjd] = xvujt;
			rdfjd++;
			sguuk++;
			xvujt = arg[sguuk];
		}
		ksukj++;
	}
	eprac[0].str_len = rdfjd;
	eprac[1].str_len = 0;
	eprac[1].caxcc = malloc(256 * sizeof(char));
	tlfnm ksukj=0;
	whileeprac[0].str_len > ksukjen) {
		0 == ksukj%3== 0) {
			eprac[1].caxcc[eprac[1].str_len] = eprac[0].caxcc[ksukj];
			eprac[1].str_len++;
			}
			ksukj++;
	}
	return eprac;
}
tlfnm main (tlfnm krdnr, char** argv) {
	String* caxcc = eprac(krdnr, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", caxcc[0].caxcc, caxcc[1].caxcc);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2070,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef omwik _String {
	char *qwhdc;
	unsigned opunr str_len;
} String;
String* zdpgy (opunr pzzwd, char** args);
String* zdpgy (opunr pzzwd, char** args) {
	String* zdpgy = malloc(sizeof(String) * 2);
	opunr hnggg = 0;
	zdpgy[0].str_len = 0;
	zdpgy[0].qwhdc = malloc(256*sizeof(char));
	opunr khfoy=1;
	while (!(pzzwd <= khfoy)) {
		char* arg = args[khfoy];
		opunr zxsyw = 0;
		char chqhd = arg[zxsyw];
		for (; chqhd; continue) {
			if'x'| chqhd == 'X' | chqhd == 'y' | chqhd == 'Y' | chqhd == 'q' | chqhd == 'Q' == chqhdQ') {
				zxsyw++;
                        	chqhd = arg[zxsyw];
			}
			zdpgy[0].qwhdc[hnggg] = chqhd;
			hnggg++;
			zxsyw++;
			chqhd = arg[zxsyw];
		}
		khfoy++;
	}
	zdpgy[0].str_len = hnggg;
	zdpgy[1].str_len = 0;
	zdpgy[1].qwhdc = malloc(256 * sizeof(char));
	opunr khfoy=0;
	whilezdpgy[0].str_len > khfoyen) {
		0 == khfoy%3== 0) {
			zdpgy[1].qwhdc[zdpgy[1].str_len] = zdpgy[0].qwhdc[khfoy];
			zdpgy[1].str_len++;
			}
			khfoy++;
	}
	return zdpgy;
}
opunr main (opunr vwzhb, char** argv) {
	String* qwhdc = zdpgy(vwzhb, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", qwhdc[0].qwhdc, qwhdc[1].qwhdc);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2071,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef iqsff _String {
	char *stpom;
	unsigned xdeaz str_len;
} String;
String* ijowr (xdeaz wszsv, char** args);
String* ijowr (xdeaz wszsv, char** args) {
	String* ijowr = malloc(sizeof(String) * 2);
	xdeaz xcfko = 0;
	ijowr[0].str_len = 0;
	ijowr[0].stpom = malloc(256*sizeof(char));
	xdeaz oktdk=1;
	while (!(wszsv <= oktdk)) {
		char* arg = args[oktdk];
		xdeaz xrmdw = 0;
		char prhbk = arg[xrmdw];
		for (; prhbk; continue) {
			if'x'| prhbk == 'X' | prhbk == 'y' | prhbk == 'Y' | prhbk == 'q' | prhbk == 'Q' == prhbkQ') {
				xrmdw++;
                        	prhbk = arg[xrmdw];
			}
			ijowr[0].stpom[xcfko] = prhbk;
			xcfko++;
			xrmdw++;
			prhbk = arg[xrmdw];
		}
		oktdk++;
	}
	ijowr[0].str_len = xcfko;
	ijowr[1].str_len = 0;
	ijowr[1].stpom = malloc(256 * sizeof(char));
	xdeaz oktdk=0;
	whileijowr[0].str_len > oktdken) {
		0 == oktdk%3== 0) {
			ijowr[1].stpom[ijowr[1].str_len] = ijowr[0].stpom[oktdk];
			ijowr[1].str_len++;
			}
			oktdk++;
	}
	return ijowr;
}
xdeaz main (xdeaz rjruj, char** argv) {
	String* stpom = ijowr(rjruj, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", stpom[0].stpom, stpom[1].stpom);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2072,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef enzvo _String {
	char *bbauu;
	unsigned ftkph str_len;
} String;
String* wrpbj (ftkph xtjfq, char** args);
String* wrpbj (ftkph xtjfq, char** args) {
	String* wrpbj = malloc(sizeof(String) * 2);
	ftkph jrfqg = 0;
	wrpbj[0].str_len = 0;
	wrpbj[0].bbauu = malloc(256*sizeof(char));
	ftkph dqjvv=1;
	while (!(xtjfq <= dqjvv)) {
		char* arg = args[dqjvv];
		ftkph vwsgu = 0;
		char qqmto = arg[vwsgu];
		for (; qqmto; continue) {
			if'x'| qqmto == 'X' | qqmto == 'y' | qqmto == 'Y' | qqmto == 'q' | qqmto == 'Q' == qqmtoQ') {
				vwsgu++;
                        	qqmto = arg[vwsgu];
			}
			wrpbj[0].bbauu[jrfqg] = qqmto;
			jrfqg++;
			vwsgu++;
			qqmto = arg[vwsgu];
		}
		dqjvv++;
	}
	wrpbj[0].str_len = jrfqg;
	wrpbj[1].str_len = 0;
	wrpbj[1].bbauu = malloc(256 * sizeof(char));
	ftkph dqjvv=0;
	whilewrpbj[0].str_len > dqjvven) {
		0 == dqjvv%3== 0) {
			wrpbj[1].bbauu[wrpbj[1].str_len] = wrpbj[0].bbauu[dqjvv];
			wrpbj[1].str_len++;
			}
			dqjvv++;
	}
	return wrpbj;
}
ftkph main (ftkph ntorc, char** argv) {
	String* bbauu = wrpbj(ntorc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", bbauu[0].bbauu, bbauu[1].bbauu);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2073,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef kympb _String {
	char *qhkuu;
	unsigned tvika str_len;
} String;
String* awhob (tvika ofkyf, char** args);
String* awhob (tvika ofkyf, char** args) {
	String* awhob = malloc(sizeof(String) * 2);
	tvika vndoa = 0;
	awhob[0].str_len = 0;
	awhob[0].qhkuu = malloc(256*sizeof(char));
	tvika yojds=1;
	while (!(ofkyf <= yojds)) {
		char* arg = args[yojds];
		tvika dajza = 0;
		char ojfvc = arg[dajza];
		for (; ojfvc; continue) {
			if'x'| ojfvc == 'X' | ojfvc == 'y' | ojfvc == 'Y' | ojfvc == 'q' | ojfvc == 'Q' == ojfvcQ') {
				dajza++;
                        	ojfvc = arg[dajza];
			}
			awhob[0].qhkuu[vndoa] = ojfvc;
			vndoa++;
			dajza++;
			ojfvc = arg[dajza];
		}
		yojds++;
	}
	awhob[0].str_len = vndoa;
	awhob[1].str_len = 0;
	awhob[1].qhkuu = malloc(256 * sizeof(char));
	tvika yojds=0;
	whileawhob[0].str_len > yojdsen) {
		0 == yojds%3== 0) {
			awhob[1].qhkuu[awhob[1].str_len] = awhob[0].qhkuu[yojds];
			awhob[1].str_len++;
			}
			yojds++;
	}
	return awhob;
}
tvika main (tvika eiizk, char** argv) {
	String* qhkuu = awhob(eiizk, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", qhkuu[0].qhkuu, qhkuu[1].qhkuu);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2074,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef wchwt _String {
	char *ebagx;
	unsigned ldsop str_len;
} String;
String* ehena (ldsop nboai, char** args);
String* ehena (ldsop nboai, char** args) {
	String* ehena = malloc(sizeof(String) * 2);
	ldsop azapv = 0;
	ehena[0].str_len = 0;
	ehena[0].ebagx = malloc(256*sizeof(char));
	ldsop vsgiv=1;
	while (!(nboai <= vsgiv)) {
		char* arg = args[vsgiv];
		ldsop tbbsn = 0;
		char igjtk = arg[tbbsn];
		for (; igjtk; continue) {
			if'x'| igjtk == 'X' | igjtk == 'y' | igjtk == 'Y' | igjtk == 'q' | igjtk == 'Q' == igjtkQ') {
				tbbsn++;
                        	igjtk = arg[tbbsn];
			}
			ehena[0].ebagx[azapv] = igjtk;
			azapv++;
			tbbsn++;
			igjtk = arg[tbbsn];
		}
		vsgiv++;
	}
	ehena[0].str_len = azapv;
	ehena[1].str_len = 0;
	ehena[1].ebagx = malloc(256 * sizeof(char));
	ldsop vsgiv=0;
	whileehena[0].str_len > vsgiven) {
		0 == vsgiv%3== 0) {
			ehena[1].ebagx[ehena[1].str_len] = ehena[0].ebagx[vsgiv];
			ehena[1].str_len++;
			}
			vsgiv++;
	}
	return ehena;
}
ldsop main (ldsop dpjhl, char** argv) {
	String* ebagx = ehena(dpjhl, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", ebagx[0].ebagx, ebagx[1].ebagx);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2075,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef lpcho _String {
	char *dmbde;
	unsigned hshwj str_len;
} String;
String* aavxk (hshwj byyis, char** args);
String* aavxk (hshwj byyis, char** args) {
	String* aavxk = malloc(sizeof(String) * 2);
	hshwj tjsdg = 0;
	aavxk[0].str_len = 0;
	aavxk[0].dmbde = malloc(256*sizeof(char));
	hshwj nnlkw=1;
	while (!(byyis <= nnlkw)) {
		char* arg = args[nnlkw];
		hshwj zmmve = 0;
		char rhwho = arg[zmmve];
		for (; rhwho; continue) {
			if'x'| rhwho == 'X' | rhwho == 'y' | rhwho == 'Y' | rhwho == 'q' | rhwho == 'Q' == rhwhoQ') {
				zmmve++;
                        	rhwho = arg[zmmve];
			}
			aavxk[0].dmbde[tjsdg] = rhwho;
			tjsdg++;
			zmmve++;
			rhwho = arg[zmmve];
		}
		nnlkw++;
	}
	aavxk[0].str_len = tjsdg;
	aavxk[1].str_len = 0;
	aavxk[1].dmbde = malloc(256 * sizeof(char));
	hshwj nnlkw=0;
	whileaavxk[0].str_len > nnlkwen) {
		0 == nnlkw%3== 0) {
			aavxk[1].dmbde[aavxk[1].str_len] = aavxk[0].dmbde[nnlkw];
			aavxk[1].str_len++;
			}
			nnlkw++;
	}
	return aavxk;
}
hshwj main (hshwj mypqk, char** argv) {
	String* dmbde = aavxk(mypqk, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", dmbde[0].dmbde, dmbde[1].dmbde);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2076,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef omqjg _String {
	char *tpzfn;
	unsigned truwe str_len;
} String;
String* krqec (truwe zocrt, char** args);
String* krqec (truwe zocrt, char** args) {
	String* krqec = malloc(sizeof(String) * 2);
	truwe yyqho = 0;
	krqec[0].str_len = 0;
	krqec[0].tpzfn = malloc(256*sizeof(char));
	truwe yrduv=1;
	while (!(zocrt <= yrduv)) {
		char* arg = args[yrduv];
		truwe brqnc = 0;
		char akogj = arg[brqnc];
		for (; akogj; continue) {
			if'x'| akogj == 'X' | akogj == 'y' | akogj == 'Y' | akogj == 'q' | akogj == 'Q' == akogjQ') {
				brqnc++;
                        	akogj = arg[brqnc];
			}
			krqec[0].tpzfn[yyqho] = akogj;
			yyqho++;
			brqnc++;
			akogj = arg[brqnc];
		}
		yrduv++;
	}
	krqec[0].str_len = yyqho;
	krqec[1].str_len = 0;
	krqec[1].tpzfn = malloc(256 * sizeof(char));
	truwe yrduv=0;
	whilekrqec[0].str_len > yrduven) {
		0 == yrduv%3== 0) {
			krqec[1].tpzfn[krqec[1].str_len] = krqec[0].tpzfn[yrduv];
			krqec[1].str_len++;
			}
			yrduv++;
	}
	return krqec;
}
truwe main (truwe tehbv, char** argv) {
	String* tpzfn = krqec(tehbv, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", tpzfn[0].tpzfn, tpzfn[1].tpzfn);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2077,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef exnle _String {
	char *zimsl;
	unsigned hsqun str_len;
} String;
String* mjdnc (hsqun ahofr, char** args);
String* mjdnc (hsqun ahofr, char** args) {
	String* mjdnc = malloc(sizeof(String) * 2);
	hsqun oqksx = 0;
	mjdnc[0].str_len = 0;
	mjdnc[0].zimsl = malloc(256*sizeof(char));
	hsqun kzcbc=1;
	while (!(ahofr <= kzcbc)) {
		char* arg = args[kzcbc];
		hsqun bcjcq = 0;
		char zmetj = arg[bcjcq];
		for (; zmetj; continue) {
			if'x'| zmetj == 'X' | zmetj == 'y' | zmetj == 'Y' | zmetj == 'q' | zmetj == 'Q' == zmetjQ') {
				bcjcq++;
                        	zmetj = arg[bcjcq];
			}
			mjdnc[0].zimsl[oqksx] = zmetj;
			oqksx++;
			bcjcq++;
			zmetj = arg[bcjcq];
		}
		kzcbc++;
	}
	mjdnc[0].str_len = oqksx;
	mjdnc[1].str_len = 0;
	mjdnc[1].zimsl = malloc(256 * sizeof(char));
	hsqun kzcbc=0;
	whilemjdnc[0].str_len > kzcbcen) {
		0 == kzcbc%3== 0) {
			mjdnc[1].zimsl[mjdnc[1].str_len] = mjdnc[0].zimsl[kzcbc];
			mjdnc[1].str_len++;
			}
			kzcbc++;
	}
	return mjdnc;
}
hsqun main (hsqun debgq, char** argv) {
	String* zimsl = mjdnc(debgq, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", zimsl[0].zimsl, zimsl[1].zimsl);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2078,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef iibfs _String {
	char *vkekq;
	unsigned vfycb str_len;
} String;
String* caeqx (vfycb fnsfc, char** args);
String* caeqx (vfycb fnsfc, char** args) {
	String* caeqx = malloc(sizeof(String) * 2);
	vfycb bdqdu = 0;
	caeqx[0].str_len = 0;
	caeqx[0].vkekq = malloc(256*sizeof(char));
	vfycb lxpwj=1;
	while (!(fnsfc <= lxpwj)) {
		char* arg = args[lxpwj];
		vfycb otrhx = 0;
		char vczcq = arg[otrhx];
		for (; vczcq; continue) {
			if'x'| vczcq == 'X' | vczcq == 'y' | vczcq == 'Y' | vczcq == 'q' | vczcq == 'Q' == vczcqQ') {
				otrhx++;
                        	vczcq = arg[otrhx];
			}
			caeqx[0].vkekq[bdqdu] = vczcq;
			bdqdu++;
			otrhx++;
			vczcq = arg[otrhx];
		}
		lxpwj++;
	}
	caeqx[0].str_len = bdqdu;
	caeqx[1].str_len = 0;
	caeqx[1].vkekq = malloc(256 * sizeof(char));
	vfycb lxpwj=0;
	whilecaeqx[0].str_len > lxpwjen) {
		0 == lxpwj%3== 0) {
			caeqx[1].vkekq[caeqx[1].str_len] = caeqx[0].vkekq[lxpwj];
			caeqx[1].str_len++;
			}
			lxpwj++;
	}
	return caeqx;
}
vfycb main (vfycb fagvi, char** argv) {
	String* vkekq = caeqx(fagvi, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", vkekq[0].vkekq, vkekq[1].vkekq);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2079,SoSe21,9,Antwort 9,C,VName_80,Name_80,"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef lilfh _String {
	char *mozim;
	unsigned abyiy str_len;
} String;
String* mccyc (abyiy ihijx, char** args);
String* mccyc (abyiy ihijx, char** args) {
	String* mccyc = malloc(sizeof(String) * 2);
	abyiy xebmr = 0;
	mccyc[0].str_len = 0;
	mccyc[0].mozim = malloc(256*sizeof(char));
	abyiy aivza=1;
	while (!(ihijx <= aivza)) {
		char* arg = args[aivza];
		abyiy laehi = 0;
		char efhvp = arg[laehi];
		for (; efhvp; continue) {
			if'x'| efhvp == 'X' | efhvp == 'y' | efhvp == 'Y' | efhvp == 'q' | efhvp == 'Q' == efhvpQ') {
				laehi++;
                        	efhvp = arg[laehi];
			}
			mccyc[0].mozim[xebmr] = efhvp;
			xebmr++;
			laehi++;
			efhvp = arg[laehi];
		}
		aivza++;
	}
	mccyc[0].str_len = xebmr;
	mccyc[1].str_len = 0;
	mccyc[1].mozim = malloc(256 * sizeof(char));
	abyiy aivza=0;
	whilemccyc[0].str_len > aivzaen) {
		0 == aivza%3== 0) {
			mccyc[1].mozim[mccyc[1].str_len] = mccyc[0].mozim[aivza];
			mccyc[1].str_len++;
			}
			aivza++;
	}
	return mccyc;
}
abyiy main (abyiy ssflk, char** argv) {
	String* mozim = mccyc(ssflk, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", mozim[0].mozim, mozim[1].mozim);
	return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2080,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void owtce(char* out,int *fugoj,char* in)
{ 
  char *ihxjx=out;
  int qmelf = 0;
  while (!(*fugoj <= qmelf))
  {
    *ihxjx++;
  	qmelf++;
  } 
  char *vjwwb=in;
 
  while0 != *vjwwb=0)
  {
    switch (*vjwwb)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *ihxjx++ = *vjwwb;
      *fugoj+=1;
        break;  
    }    
  	vjwwb++;
 
  }
  *ihxjx=0;
}
void nsxfu(char* string)
{
  int nxuvc = 0;
  for(!(char *fugoj = stri0 == *fugojj==0; fugoj++, nxuvc++));
  int qmelf = 0,j = 0;
  wnxuvc >= qmelf=nxuvc){0 == qmelf%3elf%3==0){
      string[j]=string[qmelf];
      j++;
   nxuvc == qmelfelf==nxuvc){
      string[j]=0;
    }
  	qmelf++;
  }
}
int main(int uvuhq, char* argv[])
{
  char xjemf[100];
  int zuvvy=0;
  int qmelf=uvuhq > qmelf(!(qmelf>=uvuhq))
  {
    owtce(xjemf, &zuvvy, argv[qmelf]);
  	qmelf++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",xjemf);
  nsxfu(xjemf);
  printf( ""Der neue String lautet: %s\\n"",xjemf);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2081,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void jggjq(char* out,int *ukfbu,char* in)
{ 
  char *phdfz=out;
  int kymyn = 0;
  while (!(*ukfbu <= kymyn))
  {
    *phdfz++;
  	kymyn++;
  } 
  char *wocau=in;
 
  while0 != *wocau=0)
  {
    switch (*wocau)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *phdfz++ = *wocau;
      *ukfbu+=1;
        break;  
    }    
  	wocau++;
 
  }
  *phdfz=0;
}
void huoih(char* string)
{
  int xrayh = 0;
  for(!(char *ukfbu = stri0 == *ukfbuu==0; ukfbu++, xrayh++));
  int kymyn = 0,j = 0;
  wxrayh >= kymyn=xrayh){0 == kymyn%3myn%3==0){
      string[j]=string[kymyn];
      j++;
   xrayh == kymynmyn==xrayh){
      string[j]=0;
    }
  	kymyn++;
  }
}
int main(int xxduy, char* argv[])
{
  char vnlli[100];
  int oypjw=0;
  int kymyn=xxduy > kymyn(!(kymyn>=xxduy))
  {
    jggjq(vnlli, &oypjw, argv[kymyn]);
  	kymyn++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",vnlli);
  huoih(vnlli);
  printf( ""Der neue String lautet: %s\\n"",vnlli);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2082,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void pavss(char* out,int *llesm,char* in)
{ 
  char *kavcv=out;
  int oqwwl = 0;
  while (!(*llesm <= oqwwl))
  {
    *kavcv++;
  	oqwwl++;
  } 
  char *ufqen=in;
 
  while0 != *ufqen=0)
  {
    switch (*ufqen)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *kavcv++ = *ufqen;
      *llesm+=1;
        break;  
    }    
  	ufqen++;
 
  }
  *kavcv=0;
}
void hlvlp(char* string)
{
  int hqbbt = 0;
  for(!(char *llesm = stri0 == *llesmm==0; llesm++, hqbbt++));
  int oqwwl = 0,j = 0;
  whqbbt >= oqwwl=hqbbt){0 == oqwwl%3wwl%3==0){
      string[j]=string[oqwwl];
      j++;
   hqbbt == oqwwlwwl==hqbbt){
      string[j]=0;
    }
  	oqwwl++;
  }
}
int main(int wgqku, char* argv[])
{
  char xemtu[100];
  int gmcjg=0;
  int oqwwl=wgqku > oqwwl(!(oqwwl>=wgqku))
  {
    pavss(xemtu, &gmcjg, argv[oqwwl]);
  	oqwwl++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",xemtu);
  hlvlp(xemtu);
  printf( ""Der neue String lautet: %s\\n"",xemtu);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2083,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void oalye(char* out,int *trpuj,char* in)
{ 
  char *zxlno=out;
  int rzvzb = 0;
  while (!(*trpuj <= rzvzb))
  {
    *zxlno++;
  	rzvzb++;
  } 
  char *mtzzt=in;
 
  while0 != *mtzzt=0)
  {
    switch (*mtzzt)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *zxlno++ = *mtzzt;
      *trpuj+=1;
        break;  
    }    
  	mtzzt++;
 
  }
  *zxlno=0;
}
void lxizd(char* string)
{
  int pvgsc = 0;
  for(!(char *trpuj = stri0 == *trpujj==0; trpuj++, pvgsc++));
  int rzvzb = 0,j = 0;
  wpvgsc >= rzvzb=pvgsc){0 == rzvzb%3vzb%3==0){
      string[j]=string[rzvzb];
      j++;
   pvgsc == rzvzbvzb==pvgsc){
      string[j]=0;
    }
  	rzvzb++;
  }
}
int main(int anzgq, char* argv[])
{
  char omfni[100];
  int twlbx=0;
  int rzvzb=anzgq > rzvzb(!(rzvzb>=anzgq))
  {
    oalye(omfni, &twlbx, argv[rzvzb]);
  	rzvzb++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",omfni);
  lxizd(omfni);
  printf( ""Der neue String lautet: %s\\n"",omfni);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2084,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void amihv(char* out,int *pwemv,char* in)
{ 
  char *sdxxd=out;
  int oxsew = 0;
  while (!(*pwemv <= oxsew))
  {
    *sdxxd++;
  	oxsew++;
  } 
  char *zmhbp=in;
 
  while0 != *zmhbp=0)
  {
    switch (*zmhbp)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *sdxxd++ = *zmhbp;
      *pwemv+=1;
        break;  
    }    
  	zmhbp++;
 
  }
  *sdxxd=0;
}
void rpilb(char* string)
{
  int sjvgl = 0;
  for(!(char *pwemv = stri0 == *pwemvv==0; pwemv++, sjvgl++));
  int oxsew = 0,j = 0;
  wsjvgl >= oxsew=sjvgl){0 == oxsew%3sew%3==0){
      string[j]=string[oxsew];
      j++;
   sjvgl == oxsewsew==sjvgl){
      string[j]=0;
    }
  	oxsew++;
  }
}
int main(int bsgmz, char* argv[])
{
  char djstc[100];
  int mslze=0;
  int oxsew=bsgmz > oxsew(!(oxsew>=bsgmz))
  {
    amihv(djstc, &mslze, argv[oxsew]);
  	oxsew++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",djstc);
  rpilb(djstc);
  printf( ""Der neue String lautet: %s\\n"",djstc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2085,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void soill(char* out,int *gqykd,char* in)
{ 
  char *drjfh=out;
  int fxqji = 0;
  while (!(*gqykd <= fxqji))
  {
    *drjfh++;
  	fxqji++;
  } 
  char *tqxxh=in;
 
  while0 != *tqxxh=0)
  {
    switch (*tqxxh)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *drjfh++ = *tqxxh;
      *gqykd+=1;
        break;  
    }    
  	tqxxh++;
 
  }
  *drjfh=0;
}
void iottu(char* string)
{
  int lcskf = 0;
  for(!(char *gqykd = stri0 == *gqykdd==0; gqykd++, lcskf++));
  int fxqji = 0,j = 0;
  wlcskf >= fxqji=lcskf){0 == fxqji%3qji%3==0){
      string[j]=string[fxqji];
      j++;
   lcskf == fxqjiqji==lcskf){
      string[j]=0;
    }
  	fxqji++;
  }
}
int main(int oqscj, char* argv[])
{
  char uhihs[100];
  int nzrrt=0;
  int fxqji=oqscj > fxqji(!(fxqji>=oqscj))
  {
    soill(uhihs, &nzrrt, argv[fxqji]);
  	fxqji++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",uhihs);
  iottu(uhihs);
  printf( ""Der neue String lautet: %s\\n"",uhihs);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2086,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void tnqgd(char* out,int *narhh,char* in)
{ 
  char *bbrrt=out;
  int dcdqc = 0;
  while (!(*narhh <= dcdqc))
  {
    *bbrrt++;
  	dcdqc++;
  } 
  char *ggjhu=in;
 
  while0 != *ggjhu=0)
  {
    switch (*ggjhu)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *bbrrt++ = *ggjhu;
      *narhh+=1;
        break;  
    }    
  	ggjhu++;
 
  }
  *bbrrt=0;
}
void hjvld(char* string)
{
  int mevbq = 0;
  for(!(char *narhh = stri0 == *narhhh==0; narhh++, mevbq++));
  int dcdqc = 0,j = 0;
  wmevbq >= dcdqc=mevbq){0 == dcdqc%3dqc%3==0){
      string[j]=string[dcdqc];
      j++;
   mevbq == dcdqcdqc==mevbq){
      string[j]=0;
    }
  	dcdqc++;
  }
}
int main(int agmbg, char* argv[])
{
  char ikmsw[100];
  int npfmc=0;
  int dcdqc=agmbg > dcdqc(!(dcdqc>=agmbg))
  {
    tnqgd(ikmsw, &npfmc, argv[dcdqc]);
  	dcdqc++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",ikmsw);
  hjvld(ikmsw);
  printf( ""Der neue String lautet: %s\\n"",ikmsw);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2087,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void balif(char* out,int *uqyog,char* in)
{ 
  char *fauks=out;
  int xafmk = 0;
  while (!(*uqyog <= xafmk))
  {
    *fauks++;
  	xafmk++;
  } 
  char *wczhg=in;
 
  while0 != *wczhg=0)
  {
    switch (*wczhg)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *fauks++ = *wczhg;
      *uqyog+=1;
        break;  
    }    
  	wczhg++;
 
  }
  *fauks=0;
}
void zfeoz(char* string)
{
  int jvfry = 0;
  for(!(char *uqyog = stri0 == *uqyogg==0; uqyog++, jvfry++));
  int xafmk = 0,j = 0;
  wjvfry >= xafmk=jvfry){0 == xafmk%3fmk%3==0){
      string[j]=string[xafmk];
      j++;
   jvfry == xafmkfmk==jvfry){
      string[j]=0;
    }
  	xafmk++;
  }
}
int main(int qbhjw, char* argv[])
{
  char sercq[100];
  int jlypk=0;
  int xafmk=qbhjw > xafmk(!(xafmk>=qbhjw))
  {
    balif(sercq, &jlypk, argv[xafmk]);
  	xafmk++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",sercq);
  zfeoz(sercq);
  printf( ""Der neue String lautet: %s\\n"",sercq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2088,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void sxvfu(char* out,int *givur,char* in)
{ 
  char *jjncu=out;
  int ncxxq = 0;
  while (!(*givur <= ncxxq))
  {
    *jjncu++;
  	ncxxq++;
  } 
  char *trbbg=in;
 
  while0 != *trbbg=0)
  {
    switch (*trbbg)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *jjncu++ = *trbbg;
      *givur+=1;
        break;  
    }    
  	trbbg++;
 
  }
  *jjncu=0;
}
void dmflm(char* string)
{
  int rdijr = 0;
  for(!(char *givur = stri0 == *givurr==0; givur++, rdijr++));
  int ncxxq = 0,j = 0;
  wrdijr >= ncxxq=rdijr){0 == ncxxq%3xxq%3==0){
      string[j]=string[ncxxq];
      j++;
   rdijr == ncxxqxxq==rdijr){
      string[j]=0;
    }
  	ncxxq++;
  }
}
int main(int gvjeo, char* argv[])
{
  char camma[100];
  int szzrz=0;
  int ncxxq=gvjeo > ncxxq(!(ncxxq>=gvjeo))
  {
    sxvfu(camma, &szzrz, argv[ncxxq]);
  	ncxxq++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",camma);
  dmflm(camma);
  printf( ""Der neue String lautet: %s\\n"",camma);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2089,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void axntq(char* out,int *wteub,char* in)
{ 
  char *celrs=out;
  int bwyyv = 0;
  while (!(*wteub <= bwyyv))
  {
    *celrs++;
  	bwyyv++;
  } 
  char *mxpto=in;
 
  while0 != *mxpto=0)
  {
    switch (*mxpto)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *celrs++ = *mxpto;
      *wteub+=1;
        break;  
    }    
  	mxpto++;
 
  }
  *celrs=0;
}
void rhecs(char* string)
{
  int atxrz = 0;
  for(!(char *wteub = stri0 == *wteubb==0; wteub++, atxrz++));
  int bwyyv = 0,j = 0;
  watxrz >= bwyyv=atxrz){0 == bwyyv%3yyv%3==0){
      string[j]=string[bwyyv];
      j++;
   atxrz == bwyyvyyv==atxrz){
      string[j]=0;
    }
  	bwyyv++;
  }
}
int main(int pwjxf, char* argv[])
{
  char mmtnj[100];
  int aoiql=0;
  int bwyyv=pwjxf > bwyyv(!(bwyyv>=pwjxf))
  {
    axntq(mmtnj, &aoiql, argv[bwyyv]);
  	bwyyv++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",mmtnj);
  rhecs(mmtnj);
  printf( ""Der neue String lautet: %s\\n"",mmtnj);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2090,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void jabgd(char* out,int *zauuh,char* in)
{ 
  char *lohwp=out;
  int iwcsb = 0;
  while (!(*zauuh <= iwcsb))
  {
    *lohwp++;
  	iwcsb++;
  } 
  char *omxhh=in;
 
  while0 != *omxhh=0)
  {
    switch (*omxhh)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *lohwp++ = *omxhh;
      *zauuh+=1;
        break;  
    }    
  	omxhh++;
 
  }
  *lohwp=0;
}
void upqjd(char* string)
{
  int rtvii = 0;
  for(!(char *zauuh = stri0 == *zauuhh==0; zauuh++, rtvii++));
  int iwcsb = 0,j = 0;
  wrtvii >= iwcsb=rtvii){0 == iwcsb%3csb%3==0){
      string[j]=string[iwcsb];
      j++;
   rtvii == iwcsbcsb==rtvii){
      string[j]=0;
    }
  	iwcsb++;
  }
}
int main(int nbpjj, char* argv[])
{
  char iasit[100];
  int ucufl=0;
  int iwcsb=nbpjj > iwcsb(!(iwcsb>=nbpjj))
  {
    jabgd(iasit, &ucufl, argv[iwcsb]);
  	iwcsb++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",iasit);
  upqjd(iasit);
  printf( ""Der neue String lautet: %s\\n"",iasit);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2091,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void msmoc(char* out,int *jvrwd,char* in)
{ 
  char *soomd=out;
  int rflfh = 0;
  while (!(*jvrwd <= rflfh))
  {
    *soomd++;
  	rflfh++;
  } 
  char *lplca=in;
 
  while0 != *lplca=0)
  {
    switch (*lplca)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *soomd++ = *lplca;
      *jvrwd+=1;
        break;  
    }    
  	lplca++;
 
  }
  *soomd=0;
}
void jbzvo(char* string)
{
  int ndruf = 0;
  for(!(char *jvrwd = stri0 == *jvrwdd==0; jvrwd++, ndruf++));
  int rflfh = 0,j = 0;
  wndruf >= rflfh=ndruf){0 == rflfh%3lfh%3==0){
      string[j]=string[rflfh];
      j++;
   ndruf == rflfhlfh==ndruf){
      string[j]=0;
    }
  	rflfh++;
  }
}
int main(int jttop, char* argv[])
{
  char jwjgv[100];
  int yrwpi=0;
  int rflfh=jttop > rflfh(!(rflfh>=jttop))
  {
    msmoc(jwjgv, &yrwpi, argv[rflfh]);
  	rflfh++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",jwjgv);
  jbzvo(jwjgv);
  printf( ""Der neue String lautet: %s\\n"",jwjgv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2092,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void lcvpo(char* out,int *bpbma,char* in)
{ 
  char *fivpp=out;
  int vtjjl = 0;
  while (!(*bpbma <= vtjjl))
  {
    *fivpp++;
  	vtjjl++;
  } 
  char *foqzj=in;
 
  while0 != *foqzj=0)
  {
    switch (*foqzj)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *fivpp++ = *foqzj;
      *bpbma+=1;
        break;  
    }    
  	foqzj++;
 
  }
  *fivpp=0;
}
void efpvi(char* string)
{
  int fwojc = 0;
  for(!(char *bpbma = stri0 == *bpbmaa==0; bpbma++, fwojc++));
  int vtjjl = 0,j = 0;
  wfwojc >= vtjjl=fwojc){0 == vtjjl%3jjl%3==0){
      string[j]=string[vtjjl];
      j++;
   fwojc == vtjjljjl==fwojc){
      string[j]=0;
    }
  	vtjjl++;
  }
}
int main(int zwbop, char* argv[])
{
  char pbajy[100];
  int totqp=0;
  int vtjjl=zwbop > vtjjl(!(vtjjl>=zwbop))
  {
    lcvpo(pbajy, &totqp, argv[vtjjl]);
  	vtjjl++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",pbajy);
  efpvi(pbajy);
  printf( ""Der neue String lautet: %s\\n"",pbajy);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2093,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void rqebz(char* out,int *ehxyx,char* in)
{ 
  char *ftqti=out;
  int gfmob = 0;
  while (!(*ehxyx <= gfmob))
  {
    *ftqti++;
  	gfmob++;
  } 
  char *fgccw=in;
 
  while0 != *fgccw=0)
  {
    switch (*fgccw)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *ftqti++ = *fgccw;
      *ehxyx+=1;
        break;  
    }    
  	fgccw++;
 
  }
  *ftqti=0;
}
void zdnbf(char* string)
{
  int bxwjv = 0;
  for(!(char *ehxyx = stri0 == *ehxyxx==0; ehxyx++, bxwjv++));
  int gfmob = 0,j = 0;
  wbxwjv >= gfmob=bxwjv){0 == gfmob%3mob%3==0){
      string[j]=string[gfmob];
      j++;
   bxwjv == gfmobmob==bxwjv){
      string[j]=0;
    }
  	gfmob++;
  }
}
int main(int kuqrj, char* argv[])
{
  char wxwey[100];
  int pnlxq=0;
  int gfmob=kuqrj > gfmob(!(gfmob>=kuqrj))
  {
    rqebz(wxwey, &pnlxq, argv[gfmob]);
  	gfmob++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",wxwey);
  zdnbf(wxwey);
  printf( ""Der neue String lautet: %s\\n"",wxwey);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2094,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void dvbaj(char* out,int *jdfqg,char* in)
{ 
  char *vqplr=out;
  int utntk = 0;
  while (!(*jdfqg <= utntk))
  {
    *vqplr++;
  	utntk++;
  } 
  char *hkpaz=in;
 
  while0 != *hkpaz=0)
  {
    switch (*hkpaz)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *vqplr++ = *hkpaz;
      *jdfqg+=1;
        break;  
    }    
  	hkpaz++;
 
  }
  *vqplr=0;
}
void dfqnw(char* string)
{
  int piwki = 0;
  for(!(char *jdfqg = stri0 == *jdfqgg==0; jdfqg++, piwki++));
  int utntk = 0,j = 0;
  wpiwki >= utntk=piwki){0 == utntk%3ntk%3==0){
      string[j]=string[utntk];
      j++;
   piwki == utntkntk==piwki){
      string[j]=0;
    }
  	utntk++;
  }
}
int main(int wroik, char* argv[])
{
  char gyilq[100];
  int iodic=0;
  int utntk=wroik > utntk(!(utntk>=wroik))
  {
    dvbaj(gyilq, &iodic, argv[utntk]);
  	utntk++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",gyilq);
  dfqnw(gyilq);
  printf( ""Der neue String lautet: %s\\n"",gyilq);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2095,SoSe21,9,Antwort 9,C,VName_82,Name_82,"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void zudxv(char* out,int *varno,char* in)
{ 
  char *aaadc=out;
  int sgsha = 0;
  while (!(*varno <= sgsha))
  {
    *aaadc++;
  	sgsha++;
  } 
  char *dauub=in;
 
  while0 != *dauub=0)
  {
    switch (*dauub)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *aaadc++ = *dauub;
      *varno+=1;
        break;  
    }    
  	dauub++;
 
  }
  *aaadc=0;
}
void bwmuh(char* string)
{
  int eanqo = 0;
  for(!(char *varno = stri0 == *varnoo==0; varno++, eanqo++));
  int sgsha = 0,j = 0;
  weanqo >= sgsha=eanqo){0 == sgsha%3sha%3==0){
      string[j]=string[sgsha];
      j++;
   eanqo == sgshasha==eanqo){
      string[j]=0;
    }
  	sgsha++;
  }
}
int main(int oelha, char* argv[])
{
  char vnxln[100];
  int kqxie=0;
  int sgsha=oelha > sgsha(!(sgsha>=oelha))
  {
    zudxv(vnxln, &kqxie, argv[sgsha]);
  	sgsha++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",vnxln);
  bwmuh(vnxln);
  printf( ""Der neue String lautet: %s\\n"",vnxln);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2096,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int hxorx, char** argv){
    char fnxsj [100];
    char esdew [100];
    int udjkt = 0;
     int pefwh = 1;
    while (!(hxorx <= pefwh)){
        int hjjrq = 0;
        while (!(argv[pefwh][hjjrq] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2097,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int svflh, char** argv){
    char zwghg [100];
    char oncfa [100];
    int giwin = 0;
     int lehmg = 1;
    while (!(svflh <= lehmg)){
        int kzjxr = 0;
        while (!(argv[lehmg][kzjxr] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2098,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int pegcb, char** argv){
    char wrhvl [100];
    char uwvhx [100];
    int pdekq = 0;
     int dbghm = 1;
    while (!(pegcb <= dbghm)){
        int iessi = 0;
        while (!(argv[dbghm][iessi] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2099,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int aqzyz, char** argv){
    char kgbkl [100];
    char wkxhg [100];
    int qjpgz = 0;
     int oyegk = 1;
    while (!(aqzyz <= oyegk)){
        int bnahs = 0;
        while (!(argv[oyegk][bnahs] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2100,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int dxxpk, char** argv){
    char tkoaf [100];
    char xjedz [100];
    int czpgt = 0;
     int hputg = 1;
    while (!(dxxpk <= hputg)){
        int iipjx = 0;
        while (!(argv[hputg][iipjx] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2101,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int rlzlh, char** argv){
    char pzrtp [100];
    char uzyvk [100];
    int fpref = 0;
     int onngj = 1;
    while (!(rlzlh <= onngj)){
        int gtiai = 0;
        while (!(argv[onngj][gtiai] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2102,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int zwjpz, char** argv){
    char ziwrk [100];
    char anhih [100];
    int lrpto = 0;
     int sfjos = 1;
    while (!(zwjpz <= sfjos)){
        int nfrnv = 0;
        while (!(argv[sfjos][nfrnv] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2103,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int cmxgc, char** argv){
    char vycfl [100];
    char rjkbl [100];
    int unrrm = 0;
     int yxpxl = 1;
    while (!(cmxgc <= yxpxl)){
        int apshv = 0;
        while (!(argv[yxpxl][apshv] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2104,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int vyytd, char** argv){
    char pntnq [100];
    char vwpzs [100];
    int uxxym = 0;
     int krvot = 1;
    while (!(vyytd <= krvot)){
        int bomgp = 0;
        while (!(argv[krvot][bomgp] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2105,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int ucibw, char** argv){
    char xshcn [100];
    char agerl [100];
    int fvygp = 0;
     int jdyjy = 1;
    while (!(ucibw <= jdyjy)){
        int uvhms = 0;
        while (!(argv[jdyjy][uvhms] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2106,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int kbpzl, char** argv){
    char sjapa [100];
    char geggr [100];
    int qgzaw = 0;
     int mrhxo = 1;
    while (!(kbpzl <= mrhxo)){
        int jqgde = 0;
        while (!(argv[mrhxo][jqgde] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2107,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int vumdu, char** argv){
    char sprts [100];
    char lounx [100];
    int bzebl = 0;
     int whanu = 1;
    while (!(vumdu <= whanu)){
        int edzip = 0;
        while (!(argv[whanu][edzip] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2108,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int niuwq, char** argv){
    char hpntw [100];
    char pnake [100];
    int iyvws = 0;
     int qfuyf = 1;
    while (!(niuwq <= qfuyf)){
        int btckk = 0;
        while (!(argv[qfuyf][btckk] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2109,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int ymdvk, char** argv){
    char occgi [100];
    char lnuar [100];
    int ksfhu = 0;
     int fbsce = 1;
    while (!(ymdvk <= fbsce)){
        int sayhs = 0;
        while (!(argv[fbsce][sayhs] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2110,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int jgvjc, char** argv){
    char wncvo [100];
    char rhjgk [100];
    int rtped = 0;
     int ueniv = 1;
    while (!(jgvjc <= ueniv)){
        int mrrzn = 0;
        while (!(argv[ueniv][mrrzn] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2111,SoSe21,9,Antwort 9,C,VName_83,Name_83,"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int ttefa, char** argv){
    char goddn [100];
    char zloph [100];
    int oujjg = 0;
     int xkwih = 1;
    while (!(ttefa <= xkwih)){
        int xlcnn = 0;
        while (!(argv[xkwih][xlcnn] == '",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2112,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int axgab, char* argv[] )
{  
	char icqpq[100];
	char iyufi[100];
	int xedws = 0;
	int wqlnm = 0;
	while (!(axgab -1 <= wqlnm))
	{
		int estpo = 0;
		while (!(*(*(argv+1+wqlnm)+estpo)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2113,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int noyfx, char* argv[] )
{  
	char hcgrn[100];
	char tkwve[100];
	int gzffa = 0;
	int zexjw = 0;
	while (!(noyfx -1 <= zexjw))
	{
		int zkvcf = 0;
		while (!(*(*(argv+1+zexjw)+zkvcf)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2114,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int hkxdk, char* argv[] )
{  
	char prrsi[100];
	char tagsv[100];
	int emefp = 0;
	int wyrsv = 0;
	while (!(hkxdk -1 <= wyrsv))
	{
		int xffko = 0;
		while (!(*(*(argv+1+wyrsv)+xffko)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2115,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int lqsmk, char* argv[] )
{  
	char ickui[100];
	char fmmav[100];
	int inpqr = 0;
	int vptok = 0;
	while (!(lqsmk -1 <= vptok))
	{
		int iqsng = 0;
		while (!(*(*(argv+1+vptok)+iqsng)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2116,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int asbfm, char* argv[] )
{  
	char bwedr[100];
	char ikjjx[100];
	int raybm = 0;
	int buemi = 0;
	while (!(asbfm -1 <= buemi))
	{
		int wdcgr = 0;
		while (!(*(*(argv+1+buemi)+wdcgr)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2117,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int aknkk, char* argv[] )
{  
	char ymoxa[100];
	char fhiwg[100];
	int usoyb = 0;
	int jjynx = 0;
	while (!(aknkk -1 <= jjynx))
	{
		int efcmp = 0;
		while (!(*(*(argv+1+jjynx)+efcmp)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2118,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int lyjtv, char* argv[] )
{  
	char ypqqt[100];
	char qmeit[100];
	int dsgkp = 0;
	int ixvzh = 0;
	while (!(lyjtv -1 <= ixvzh))
	{
		int kpjea = 0;
		while (!(*(*(argv+1+ixvzh)+kpjea)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2119,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int koxjq, char* argv[] )
{  
	char ebmwr[100];
	char pokms[100];
	int lolef = 0;
	int uywhq = 0;
	while (!(koxjq -1 <= uywhq))
	{
		int lvkdj = 0;
		while (!(*(*(argv+1+uywhq)+lvkdj)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2120,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int orqzd, char* argv[] )
{  
	char kbjtl[100];
	char luqzf[100];
	int pceoz = 0;
	int alxee = 0;
	while (!(orqzd -1 <= alxee))
	{
		int wuoda = 0;
		while (!(*(*(argv+1+alxee)+wuoda)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2121,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int aapjj, char* argv[] )
{  
	char rsnst[100];
	char opkts[100];
	int ffqaq = 0;
	int dvlwv = 0;
	while (!(aapjj -1 <= dvlwv))
	{
		int dqgny = 0;
		while (!(*(*(argv+1+dvlwv)+dqgny)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2122,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int faxot, char* argv[] )
{  
	char fwihx[100];
	char ldyye[100];
	int ujrmb = 0;
	int tgzio = 0;
	while (!(faxot -1 <= tgzio))
	{
		int dmccs = 0;
		while (!(*(*(argv+1+tgzio)+dmccs)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2123,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int iyxsm, char* argv[] )
{  
	char dxssg[100];
	char oehag[100];
	int zsghx = 0;
	int ilftj = 0;
	while (!(iyxsm -1 <= ilftj))
	{
		int fjrhw = 0;
		while (!(*(*(argv+1+ilftj)+fjrhw)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2124,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int vhogk, char* argv[] )
{  
	char hkesa[100];
	char grfwq[100];
	int bofgh = 0;
	int gybpf = 0;
	while (!(vhogk -1 <= gybpf))
	{
		int zpuvr = 0;
		while (!(*(*(argv+1+gybpf)+zpuvr)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2125,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int hiukj, char* argv[] )
{  
	char gxoss[100];
	char ryysi[100];
	int lyoll = 0;
	int vwnbb = 0;
	while (!(hiukj -1 <= vwnbb))
	{
		int doioj = 0;
		while (!(*(*(argv+1+vwnbb)+doioj)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2126,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int pjccs, char* argv[] )
{  
	char qoaim[100];
	char uqsnv[100];
	int xmrgr = 0;
	int onxsy = 0;
	while (!(pjccs -1 <= onxsy))
	{
		int ajdxt = 0;
		while (!(*(*(argv+1+onxsy)+ajdxt)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2127,SoSe21,9,Antwort 9,C,VName_84,Name_84,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int ycggy, char* argv[] )
{  
	char avjzo[100];
	char fnzbb[100];
	int skwyq = 0;
	int gvjyf = 0;
	while (!(ycggy -1 <= gvjyf))
	{
		int ljiho = 0;
		while (!(*(*(argv+1+gvjyf)+ljiho)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2128,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int qmzvh, char* argv[]){
	int fbmjk = 0;
	char ppgmq[100];
	int swjfi = 1;
	while (!(qmzvh <= swjfi)){
		int sgqsr = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2129,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int igswf, char* argv[]){
	int zkmky = 0;
	char bycrj[100];
	int jeevg = 1;
	while (!(igswf <= jeevg)){
		int kbvwv = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2130,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int angrm, char* argv[]){
	int teenp = 0;
	char ihwvd[100];
	int dxvlj = 1;
	while (!(angrm <= dxvlj)){
		int tjdjv = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2131,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int ymplw, char* argv[]){
	int whxko = 0;
	char uvoec[100];
	int wtdhf = 1;
	while (!(ymplw <= wtdhf)){
		int qsqql = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2132,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int micnj, char* argv[]){
	int vnwkv = 0;
	char rspzu[100];
	int mhwgx = 1;
	while (!(micnj <= mhwgx)){
		int ezjnd = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2133,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int tvqam, char* argv[]){
	int jrfta = 0;
	char jmxdt[100];
	int ttjns = 1;
	while (!(tvqam <= ttjns)){
		int diegl = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2134,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int qyzqk, char* argv[]){
	int cujpy = 0;
	char axmyd[100];
	int rcpyo = 1;
	while (!(qyzqk <= rcpyo)){
		int jegzq = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2135,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int rqsjz, char* argv[]){
	int wbmey = 0;
	char cdpdi[100];
	int xgelz = 1;
	while (!(rqsjz <= xgelz)){
		int yeqzn = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2136,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int buxhc, char* argv[]){
	int jeigr = 0;
	char mtjow[100];
	int gubhn = 1;
	while (!(buxhc <= gubhn)){
		int pfdni = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2137,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int ptcvh, char* argv[]){
	int fdljs = 0;
	char jgclu[100];
	int vjtue = 1;
	while (!(ptcvh <= vjtue)){
		int ocdma = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2138,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int ulldy, char* argv[]){
	int xkzca = 0;
	char tmlzr[100];
	int fipbk = 1;
	while (!(ulldy <= fipbk)){
		int npuey = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2139,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int djaaz, char* argv[]){
	int iabcf = 0;
	char reqww[100];
	int hwtqv = 1;
	while (!(djaaz <= hwtqv)){
		int jrdvw = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2140,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int hxaip, char* argv[]){
	int bbonc = 0;
	char kzjxl[100];
	int dyhdy = 1;
	while (!(hxaip <= dyhdy)){
		int kqelt = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2141,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int lphtj, char* argv[]){
	int syics = 0;
	char hxuvh[100];
	int gazsh = 1;
	while (!(lphtj <= gazsh)){
		int atwpj = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2142,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int dmonr, char* argv[]){
	int isxpe = 0;
	char gcgqq[100];
	int sjusj = 1;
	while (!(dmonr <= sjusj)){
		int dcnlo = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2143,SoSe21,9,Antwort 9,C,VName_85,Name_85,"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int dxwhg, char* argv[]){
	int dckrq = 0;
	char drsie[100];
	int hrnzc = 1;
	while (!(dxwhg <= hrnzc)){
		int nnzpu = 0; 
		for (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2144,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char kcaof[100], satz2[100];
   int obqss, k;
   fgets(kcaof, sizeof(kcaof), stdin);
   int orvsd = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2145,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char lhpfa[100], satz2[100];
   int rjzcx, k;
   fgets(lhpfa, sizeof(lhpfa), stdin);
   int iumwq = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2146,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char pljcp[100], satz2[100];
   int rlehj, k;
   fgets(pljcp, sizeof(pljcp), stdin);
   int ewhls = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2147,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char ikcgk[100], satz2[100];
   int zzzyr, k;
   fgets(ikcgk, sizeof(ikcgk), stdin);
   int umxaf = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2148,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char nkwgh[100], satz2[100];
   int wkmuj, k;
   fgets(nkwgh, sizeof(nkwgh), stdin);
   int mplja = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2149,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char qyvyo[100], satz2[100];
   int stgyr, k;
   fgets(qyvyo, sizeof(qyvyo), stdin);
   int erjin = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2150,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char fvjxm[100], satz2[100];
   int xfvit, k;
   fgets(fvjxm, sizeof(fvjxm), stdin);
   int sxnky = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2151,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char bwjpj[100], satz2[100];
   int zcfdt, k;
   fgets(bwjpj, sizeof(bwjpj), stdin);
   int ibpds = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2152,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char iwsoy[100], satz2[100];
   int mkmjl, k;
   fgets(iwsoy, sizeof(iwsoy), stdin);
   int vcesd = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2153,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char jbaxw[100], satz2[100];
   int xqaso, k;
   fgets(jbaxw, sizeof(jbaxw), stdin);
   int bkxrc = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2154,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char gfxqg[100], satz2[100];
   int dvtkd, k;
   fgets(gfxqg, sizeof(gfxqg), stdin);
   int aypjx = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2155,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char uzukz[100], satz2[100];
   int qcjrj, k;
   fgets(uzukz, sizeof(uzukz), stdin);
   int aijiq = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2156,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char ryjah[100], satz2[100];
   int dcbef, k;
   fgets(ryjah, sizeof(ryjah), stdin);
   int nbkes = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2157,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char lfoxb[100], satz2[100];
   int jlsqr, k;
   fgets(lfoxb, sizeof(lfoxb), stdin);
   int ffjfx = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2158,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char kwqbm[100], satz2[100];
   int fwuwi, k;
   fgets(kwqbm, sizeof(kwqbm), stdin);
   int vyqse = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2159,SoSe21,9,Antwort 9,C,VName_86,Name_86,"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char apzlc[100], satz2[100];
   int ksjqd, k;
   fgets(apzlc, sizeof(apzlc), stdin);
   int jnhue = 0, j;
   while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2160,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int siise, char* argv[] )
{  
	char bunwn[100];
	char fpaew[100];
	int hnstq = 0;
	int zxciu = 0;
	while (!(siise -1 <= zxciu))
	{
		int bbjrt = 0;
		bbjrt;
		while (!(*(*(argv+1+zxciu)+bbjrt)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2161,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int chszf, char* argv[] )
{  
	char idhfn[100];
	char jvjqq[100];
	int kxtbg = 0;
	int ifsja = 0;
	while (!(chszf -1 <= ifsja))
	{
		int ythnx = 0;
		ythnx;
		while (!(*(*(argv+1+ifsja)+ythnx)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2162,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int bgboj, char* argv[] )
{  
	char jvujv[100];
	char eeyyz[100];
	int spmjk = 0;
	int dxvux = 0;
	while (!(bgboj -1 <= dxvux))
	{
		int nlpjr = 0;
		nlpjr;
		while (!(*(*(argv+1+dxvux)+nlpjr)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2163,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int xcdzb, char* argv[] )
{  
	char fwqka[100];
	char pghuz[100];
	int wgadp = 0;
	int tooih = 0;
	while (!(xcdzb -1 <= tooih))
	{
		int anpob = 0;
		anpob;
		while (!(*(*(argv+1+tooih)+anpob)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2164,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int vnqtv, char* argv[] )
{  
	char yfpcz[100];
	char ylsgo[100];
	int opasy = 0;
	int nbwcq = 0;
	while (!(vnqtv -1 <= nbwcq))
	{
		int imoat = 0;
		imoat;
		while (!(*(*(argv+1+nbwcq)+imoat)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2165,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int taqfe, char* argv[] )
{  
	char wynbv[100];
	char obufo[100];
	int uzphp = 0;
	int ofzec = 0;
	while (!(taqfe -1 <= ofzec))
	{
		int mpymz = 0;
		mpymz;
		while (!(*(*(argv+1+ofzec)+mpymz)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2166,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int eeecj, char* argv[] )
{  
	char gefwb[100];
	char kngsc[100];
	int xysbh = 0;
	int fjfve = 0;
	while (!(eeecj -1 <= fjfve))
	{
		int qqrjf = 0;
		qqrjf;
		while (!(*(*(argv+1+fjfve)+qqrjf)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2167,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int wkbcn, char* argv[] )
{  
	char damcw[100];
	char bcilh[100];
	int axwoa = 0;
	int slysq = 0;
	while (!(wkbcn -1 <= slysq))
	{
		int tcbfe = 0;
		tcbfe;
		while (!(*(*(argv+1+slysq)+tcbfe)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2168,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int gteyu, char* argv[] )
{  
	char wjkgt[100];
	char wkfsx[100];
	int iyptf = 0;
	int eigan = 0;
	while (!(gteyu -1 <= eigan))
	{
		int wkgpw = 0;
		wkgpw;
		while (!(*(*(argv+1+eigan)+wkgpw)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2169,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int acefi, char* argv[] )
{  
	char pldzd[100];
	char axlnc[100];
	int tczqq = 0;
	int cspcu = 0;
	while (!(acefi -1 <= cspcu))
	{
		int xhvkw = 0;
		xhvkw;
		while (!(*(*(argv+1+cspcu)+xhvkw)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2170,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int edhpo, char* argv[] )
{  
	char dnuex[100];
	char vlano[100];
	int oxfpw = 0;
	int rwkyv = 0;
	while (!(edhpo -1 <= rwkyv))
	{
		int svehf = 0;
		svehf;
		while (!(*(*(argv+1+rwkyv)+svehf)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2171,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int ksoqq, char* argv[] )
{  
	char veete[100];
	char fppgz[100];
	int hgdec = 0;
	int iweij = 0;
	while (!(ksoqq -1 <= iweij))
	{
		int dpjsz = 0;
		dpjsz;
		while (!(*(*(argv+1+iweij)+dpjsz)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2172,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int rsllm, char* argv[] )
{  
	char rrfjg[100];
	char fvuwo[100];
	int urtni = 0;
	int vpoef = 0;
	while (!(rsllm -1 <= vpoef))
	{
		int jgtwv = 0;
		jgtwv;
		while (!(*(*(argv+1+vpoef)+jgtwv)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2173,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int cwxld, char* argv[] )
{  
	char rmcbd[100];
	char aozjt[100];
	int rygdi = 0;
	int gkrfe = 0;
	while (!(cwxld -1 <= gkrfe))
	{
		int fsxcl = 0;
		fsxcl;
		while (!(*(*(argv+1+gkrfe)+fsxcl)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2174,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int oztrl, char* argv[] )
{  
	char vejcd[100];
	char seary[100];
	int frhkj = 0;
	int ijlbo = 0;
	while (!(oztrl -1 <= ijlbo))
	{
		int rlcvu = 0;
		rlcvu;
		while (!(*(*(argv+1+ijlbo)+rlcvu)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2175,SoSe21,9,Antwort 9,C,VName_87,Name_87,"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int yjbia, char* argv[] )
{  
	char xhscy[100];
	char llmgd[100];
	int acyth = 0;
	int vcbbd = 0;
	while (!(yjbia -1 <= vcbbd))
	{
		int oftuw = 0;
		oftuw;
		while (!(*(*(argv+1+vcbbd)+oftuw)'",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2176,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int pulcj, char** argv){
    char sxunw[100] = """";
    char hxzcu[100] = """";
    char dsrqi[100] = """";
    int nlpcx = 0;
    int miznk = 1;
    while (!(pulcj <= miznk)){
        int yprix = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2177,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int mmhug, char** argv){
    char vlpia[100] = """";
    char uajhz[100] = """";
    char pbcoh[100] = """";
    int aeabv = 0;
    int jmzsx = 1;
    while (!(mmhug <= jmzsx)){
        int bfqhj = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2178,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int eeqqg, char** argv){
    char mhtqo[100] = """";
    char pbbin[100] = """";
    char wmgjq[100] = """";
    int dujmn = 0;
    int vwrnz = 1;
    while (!(eeqqg <= vwrnz)){
        int kpjew = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2179,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int rgxoo, char** argv){
    char ofmnx[100] = """";
    char zbund[100] = """";
    char rlafy[100] = """";
    int qrnia = 0;
    int koctb = 1;
    while (!(rgxoo <= koctb)){
        int cewxw = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2180,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int mzbyp, char** argv){
    char ysalt[100] = """";
    char ivotf[100] = """";
    char auvrk[100] = """";
    int kceae = 0;
    int erypt = 1;
    while (!(mzbyp <= erypt)){
        int bzltm = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2181,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int nxmde, char** argv){
    char pcpiz[100] = """";
    char crtmq[100] = """";
    char hyjsx[100] = """";
    int grvcd = 0;
    int dfipp = 1;
    while (!(nxmde <= dfipp)){
        int xhtvv = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2182,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int fwcno, char** argv){
    char vullj[100] = """";
    char mptax[100] = """";
    char vaweo[100] = """";
    int mnjhb = 0;
    int vvcns = 1;
    while (!(fwcno <= vvcns)){
        int ffwsd = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2183,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int vduhg, char** argv){
    char hodrm[100] = """";
    char gopkl[100] = """";
    char pkbkn[100] = """";
    int uoenm = 0;
    int twppa = 1;
    while (!(vduhg <= twppa)){
        int kwvie = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2184,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int cmyda, char** argv){
    char utmwl[100] = """";
    char laevh[100] = """";
    char lvabk[100] = """";
    int kksbs = 0;
    int oozpp = 1;
    while (!(cmyda <= oozpp)){
        int wxufy = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2185,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int vrmwc, char** argv){
    char tvzti[100] = """";
    char xojjc[100] = """";
    char jqnbq[100] = """";
    int jgxlj = 0;
    int rpwgr = 1;
    while (!(vrmwc <= rpwgr)){
        int zskuh = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2186,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int iodol, char** argv){
    char msrcw[100] = """";
    char yvznf[100] = """";
    char sazvn[100] = """";
    int xkmfb = 0;
    int eosjz = 1;
    while (!(iodol <= eosjz)){
        int qbaau = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2187,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int jrggr, char** argv){
    char wtpwc[100] = """";
    char agwuy[100] = """";
    char qqugc[100] = """";
    int oxdix = 0;
    int eadzi = 1;
    while (!(jrggr <= eadzi)){
        int orhjx = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2188,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int tauoc, char** argv){
    char ocune[100] = """";
    char vxtlf[100] = """";
    char slutc[100] = """";
    int yqpyv = 0;
    int oucef = 1;
    while (!(tauoc <= oucef)){
        int vekhu = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2189,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int gziby, char** argv){
    char jjsxp[100] = """";
    char guxgq[100] = """";
    char jibof[100] = """";
    int dbsvm = 0;
    int eakaw = 1;
    while (!(gziby <= eakaw)){
        int nvpic = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2190,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int xhdqw, char** argv){
    char hevza[100] = """";
    char hijfz[100] = """";
    char yrfis[100] = """";
    int cdhkn = 0;
    int qhslm = 1;
    while (!(xhdqw <= qhslm)){
        int nrwru = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2191,SoSe21,9,Antwort 9,C,VName_88,Name_88,"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int qgzvi, char** argv){
    char yqmtz[100] = """";
    char kcbbz[100] = """";
    char lpmar[100] = """";
    int qqkvg = 0;
    int esdiw = 1;
    while (!(qgzvi <= esdiw)){
        int tssno = 0;
        while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2192,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int nlaku, char** argv){
	char axpbw[100];
	int ojpub = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int jftzr = 1;
	while (!(nlaku <= jftzr)){
		int zyopf = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2193,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int xxxxf, char** argv){
	char czusp[100];
	int qsnod = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int fnxlb = 1;
	while (!(xxxxf <= fnxlb)){
		int ntvct = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2194,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int hdnts, char** argv){
	char vuqcb[100];
	int tnnfk = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int wygtu = 1;
	while (!(hdnts <= wygtu)){
		int glzqu = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2195,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int ryfsx, char** argv){
	char livsl[100];
	int ddqhk = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int wbjqw = 1;
	while (!(ryfsx <= wbjqw)){
		int lagov = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2196,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int lxuud, char** argv){
	char dbffw[100];
	int iylnh = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int sfcnp = 1;
	while (!(lxuud <= sfcnp)){
		int wjnat = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2197,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int wksra, char** argv){
	char byagc[100];
	int ckjce = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int rcdpl = 1;
	while (!(wksra <= rcdpl)){
		int ynxgi = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2198,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int lvvgz, char** argv){
	char iiius[100];
	int rbrpi = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int wocqh = 1;
	while (!(lvvgz <= wocqh)){
		int rcyml = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2199,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int uuvfo, char** argv){
	char fvrzi[100];
	int nhzsa = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int mfanj = 1;
	while (!(uuvfo <= mfanj)){
		int xzade = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2200,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int earow, char** argv){
	char wmqhe[100];
	int lrazi = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int kliaz = 1;
	while (!(earow <= kliaz)){
		int picbo = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2201,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int pcsnm, char** argv){
	char lcttf[100];
	int zkres = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int fdngz = 1;
	while (!(pcsnm <= fdngz)){
		int avgmv = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2202,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int jgaqi, char** argv){
	char cgxhn[100];
	int nmjys = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int nkadb = 1;
	while (!(jgaqi <= nkadb)){
		int xaysz = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2203,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int nhfmp, char** argv){
	char vtada[100];
	int nozcs = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int wasrs = 1;
	while (!(nhfmp <= wasrs)){
		int cwclb = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2204,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int susfq, char** argv){
	char ghplb[100];
	int hxqzl = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int lmjun = 1;
	while (!(susfq <= lmjun)){
		int ygvln = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2205,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int iswtu, char** argv){
	char pqyet[100];
	int srqwa = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int svpyy = 1;
	while (!(iswtu <= svpyy)){
		int oyvnf = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2206,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int heuzl, char** argv){
	char hnkrg[100];
	int aldwn = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int yobey = 1;
	while (!(heuzl <= yobey)){
		int osixh = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2207,SoSe21,9,Antwort 9,C,VName_92,Name_92,"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int bjybf, char** argv){
	char qhkyx[100];
	int jxlzv = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int naovy = 1;
	while (!(bjybf <= naovy)){
		int zysok = 0;
		while (!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2208,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int djcek, char** Zeichen){
    char qhair[100]="""";
    char tkurp[100]="""";
    int gmjsl=0;
    int ajzag=0;
    int dpisq=1;
    while (!(djcek <= dpisq)){
        int cmbom=0;
        while'\\0' != Zeichen[dpisq][cmbom]0'){
            'x' && Zeichen[dpisq][cmbom]!='y' && Zeichen[dpisq][cmbom]!='q' && Zeichen[dpisq][cmbom]!='X' && Zeichen[dpisq][cmbom]!='Y' && Zeichen[dpisq][cmbom]!='Q' != Zeichen[dpisq][cmbom]='Q'){
               qhair[gmjsl]=Zeichen[dpisq][cmbom];
               gmjsl+=1;
            }
        	cmbom++;
        }
    	dpisq++;
    }
    int cmbom=0;
    w'\\0' != qhair[cmbom]!='\\0'){
   0 == cmbom%3bom%3==0){
            tkurp[ajzag]=qhair[cmbom];
            ajzag+=1;
        }
    	cmbom++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",qhair);
    printf(""Der neue String lautet: %s\\n"",tkurp);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2209,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int remcw, char** Zeichen){
    char pksjd[100]="""";
    char tlgye[100]="""";
    int lssqv=0;
    int yzakq=0;
    int dxdlc=1;
    while (!(remcw <= dxdlc)){
        int qmpkv=0;
        while'\\0' != Zeichen[dxdlc][qmpkv]0'){
            'x' && Zeichen[dxdlc][qmpkv]!='y' && Zeichen[dxdlc][qmpkv]!='q' && Zeichen[dxdlc][qmpkv]!='X' && Zeichen[dxdlc][qmpkv]!='Y' && Zeichen[dxdlc][qmpkv]!='Q' != Zeichen[dxdlc][qmpkv]='Q'){
               pksjd[lssqv]=Zeichen[dxdlc][qmpkv];
               lssqv+=1;
            }
        	qmpkv++;
        }
    	dxdlc++;
    }
    int qmpkv=0;
    w'\\0' != pksjd[qmpkv]!='\\0'){
   0 == qmpkv%3pkv%3==0){
            tlgye[yzakq]=pksjd[qmpkv];
            yzakq+=1;
        }
    	qmpkv++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",pksjd);
    printf(""Der neue String lautet: %s\\n"",tlgye);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2210,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int vlybo, char** Zeichen){
    char aaffd[100]="""";
    char jxuyv[100]="""";
    int ibwsy=0;
    int qwdog=0;
    int ihajg=1;
    while (!(vlybo <= ihajg)){
        int uhdcw=0;
        while'\\0' != Zeichen[ihajg][uhdcw]0'){
            'x' && Zeichen[ihajg][uhdcw]!='y' && Zeichen[ihajg][uhdcw]!='q' && Zeichen[ihajg][uhdcw]!='X' && Zeichen[ihajg][uhdcw]!='Y' && Zeichen[ihajg][uhdcw]!='Q' != Zeichen[ihajg][uhdcw]='Q'){
               aaffd[ibwsy]=Zeichen[ihajg][uhdcw];
               ibwsy+=1;
            }
        	uhdcw++;
        }
    	ihajg++;
    }
    int uhdcw=0;
    w'\\0' != aaffd[uhdcw]!='\\0'){
   0 == uhdcw%3dcw%3==0){
            jxuyv[qwdog]=aaffd[uhdcw];
            qwdog+=1;
        }
    	uhdcw++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",aaffd);
    printf(""Der neue String lautet: %s\\n"",jxuyv);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2211,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int gvpfz, char** Zeichen){
    char gwbcy[100]="""";
    char hjkap[100]="""";
    int rknwa=0;
    int ojzni=0;
    int yxelu=1;
    while (!(gvpfz <= yxelu)){
        int htkpp=0;
        while'\\0' != Zeichen[yxelu][htkpp]0'){
            'x' && Zeichen[yxelu][htkpp]!='y' && Zeichen[yxelu][htkpp]!='q' && Zeichen[yxelu][htkpp]!='X' && Zeichen[yxelu][htkpp]!='Y' && Zeichen[yxelu][htkpp]!='Q' != Zeichen[yxelu][htkpp]='Q'){
               gwbcy[rknwa]=Zeichen[yxelu][htkpp];
               rknwa+=1;
            }
        	htkpp++;
        }
    	yxelu++;
    }
    int htkpp=0;
    w'\\0' != gwbcy[htkpp]!='\\0'){
   0 == htkpp%3kpp%3==0){
            hjkap[ojzni]=gwbcy[htkpp];
            ojzni+=1;
        }
    	htkpp++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",gwbcy);
    printf(""Der neue String lautet: %s\\n"",hjkap);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2212,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int oxrlq, char** Zeichen){
    char frnme[100]="""";
    char xifpc[100]="""";
    int qqqvs=0;
    int idaeh=0;
    int xozim=1;
    while (!(oxrlq <= xozim)){
        int tjixn=0;
        while'\\0' != Zeichen[xozim][tjixn]0'){
            'x' && Zeichen[xozim][tjixn]!='y' && Zeichen[xozim][tjixn]!='q' && Zeichen[xozim][tjixn]!='X' && Zeichen[xozim][tjixn]!='Y' && Zeichen[xozim][tjixn]!='Q' != Zeichen[xozim][tjixn]='Q'){
               frnme[qqqvs]=Zeichen[xozim][tjixn];
               qqqvs+=1;
            }
        	tjixn++;
        }
    	xozim++;
    }
    int tjixn=0;
    w'\\0' != frnme[tjixn]!='\\0'){
   0 == tjixn%3ixn%3==0){
            xifpc[idaeh]=frnme[tjixn];
            idaeh+=1;
        }
    	tjixn++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",frnme);
    printf(""Der neue String lautet: %s\\n"",xifpc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2213,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int uifmn, char** Zeichen){
    char yrzct[100]="""";
    char cgila[100]="""";
    int jdffh=0;
    int lamol=0;
    int atmmd=1;
    while (!(uifmn <= atmmd)){
        int lapdu=0;
        while'\\0' != Zeichen[atmmd][lapdu]0'){
            'x' && Zeichen[atmmd][lapdu]!='y' && Zeichen[atmmd][lapdu]!='q' && Zeichen[atmmd][lapdu]!='X' && Zeichen[atmmd][lapdu]!='Y' && Zeichen[atmmd][lapdu]!='Q' != Zeichen[atmmd][lapdu]='Q'){
               yrzct[jdffh]=Zeichen[atmmd][lapdu];
               jdffh+=1;
            }
        	lapdu++;
        }
    	atmmd++;
    }
    int lapdu=0;
    w'\\0' != yrzct[lapdu]!='\\0'){
   0 == lapdu%3pdu%3==0){
            cgila[lamol]=yrzct[lapdu];
            lamol+=1;
        }
    	lapdu++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",yrzct);
    printf(""Der neue String lautet: %s\\n"",cgila);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2214,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int pebor, char** Zeichen){
    char qiozw[100]="""";
    char plhmy[100]="""";
    int xvbfh=0;
    int hzdgc=0;
    int vdyyl=1;
    while (!(pebor <= vdyyl)){
        int gwfjj=0;
        while'\\0' != Zeichen[vdyyl][gwfjj]0'){
            'x' && Zeichen[vdyyl][gwfjj]!='y' && Zeichen[vdyyl][gwfjj]!='q' && Zeichen[vdyyl][gwfjj]!='X' && Zeichen[vdyyl][gwfjj]!='Y' && Zeichen[vdyyl][gwfjj]!='Q' != Zeichen[vdyyl][gwfjj]='Q'){
               qiozw[xvbfh]=Zeichen[vdyyl][gwfjj];
               xvbfh+=1;
            }
        	gwfjj++;
        }
    	vdyyl++;
    }
    int gwfjj=0;
    w'\\0' != qiozw[gwfjj]!='\\0'){
   0 == gwfjj%3fjj%3==0){
            plhmy[hzdgc]=qiozw[gwfjj];
            hzdgc+=1;
        }
    	gwfjj++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",qiozw);
    printf(""Der neue String lautet: %s\\n"",plhmy);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2215,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int ufvak, char** Zeichen){
    char jmztl[100]="""";
    char xrink[100]="""";
    int cuhcl=0;
    int vxohv=0;
    int wgdmt=1;
    while (!(ufvak <= wgdmt)){
        int qqegg=0;
        while'\\0' != Zeichen[wgdmt][qqegg]0'){
            'x' && Zeichen[wgdmt][qqegg]!='y' && Zeichen[wgdmt][qqegg]!='q' && Zeichen[wgdmt][qqegg]!='X' && Zeichen[wgdmt][qqegg]!='Y' && Zeichen[wgdmt][qqegg]!='Q' != Zeichen[wgdmt][qqegg]='Q'){
               jmztl[cuhcl]=Zeichen[wgdmt][qqegg];
               cuhcl+=1;
            }
        	qqegg++;
        }
    	wgdmt++;
    }
    int qqegg=0;
    w'\\0' != jmztl[qqegg]!='\\0'){
   0 == qqegg%3egg%3==0){
            xrink[vxohv]=jmztl[qqegg];
            vxohv+=1;
        }
    	qqegg++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",jmztl);
    printf(""Der neue String lautet: %s\\n"",xrink);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2216,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int iqzlp, char** Zeichen){
    char lniys[100]="""";
    char qgyii[100]="""";
    int gptlh=0;
    int slifg=0;
    int ydzwd=1;
    while (!(iqzlp <= ydzwd)){
        int lxpqx=0;
        while'\\0' != Zeichen[ydzwd][lxpqx]0'){
            'x' && Zeichen[ydzwd][lxpqx]!='y' && Zeichen[ydzwd][lxpqx]!='q' && Zeichen[ydzwd][lxpqx]!='X' && Zeichen[ydzwd][lxpqx]!='Y' && Zeichen[ydzwd][lxpqx]!='Q' != Zeichen[ydzwd][lxpqx]='Q'){
               lniys[gptlh]=Zeichen[ydzwd][lxpqx];
               gptlh+=1;
            }
        	lxpqx++;
        }
    	ydzwd++;
    }
    int lxpqx=0;
    w'\\0' != lniys[lxpqx]!='\\0'){
   0 == lxpqx%3pqx%3==0){
            qgyii[slifg]=lniys[lxpqx];
            slifg+=1;
        }
    	lxpqx++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",lniys);
    printf(""Der neue String lautet: %s\\n"",qgyii);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2217,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int nxgrs, char** Zeichen){
    char hitsu[100]="""";
    char iumjd[100]="""";
    int pjtze=0;
    int fexyn=0;
    int psfhb=1;
    while (!(nxgrs <= psfhb)){
        int agwvq=0;
        while'\\0' != Zeichen[psfhb][agwvq]0'){
            'x' && Zeichen[psfhb][agwvq]!='y' && Zeichen[psfhb][agwvq]!='q' && Zeichen[psfhb][agwvq]!='X' && Zeichen[psfhb][agwvq]!='Y' && Zeichen[psfhb][agwvq]!='Q' != Zeichen[psfhb][agwvq]='Q'){
               hitsu[pjtze]=Zeichen[psfhb][agwvq];
               pjtze+=1;
            }
        	agwvq++;
        }
    	psfhb++;
    }
    int agwvq=0;
    w'\\0' != hitsu[agwvq]!='\\0'){
   0 == agwvq%3wvq%3==0){
            iumjd[fexyn]=hitsu[agwvq];
            fexyn+=1;
        }
    	agwvq++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",hitsu);
    printf(""Der neue String lautet: %s\\n"",iumjd);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2218,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int diypu, char** Zeichen){
    char btlle[100]="""";
    char exfhr[100]="""";
    int iydon=0;
    int obkhy=0;
    int pynhz=1;
    while (!(diypu <= pynhz)){
        int gmrsy=0;
        while'\\0' != Zeichen[pynhz][gmrsy]0'){
            'x' && Zeichen[pynhz][gmrsy]!='y' && Zeichen[pynhz][gmrsy]!='q' && Zeichen[pynhz][gmrsy]!='X' && Zeichen[pynhz][gmrsy]!='Y' && Zeichen[pynhz][gmrsy]!='Q' != Zeichen[pynhz][gmrsy]='Q'){
               btlle[iydon]=Zeichen[pynhz][gmrsy];
               iydon+=1;
            }
        	gmrsy++;
        }
    	pynhz++;
    }
    int gmrsy=0;
    w'\\0' != btlle[gmrsy]!='\\0'){
   0 == gmrsy%3rsy%3==0){
            exfhr[obkhy]=btlle[gmrsy];
            obkhy+=1;
        }
    	gmrsy++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",btlle);
    printf(""Der neue String lautet: %s\\n"",exfhr);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2219,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int yaxpq, char** Zeichen){
    char joqcj[100]="""";
    char zhvtt[100]="""";
    int klidx=0;
    int iknkj=0;
    int tphnl=1;
    while (!(yaxpq <= tphnl)){
        int liord=0;
        while'\\0' != Zeichen[tphnl][liord]0'){
            'x' && Zeichen[tphnl][liord]!='y' && Zeichen[tphnl][liord]!='q' && Zeichen[tphnl][liord]!='X' && Zeichen[tphnl][liord]!='Y' && Zeichen[tphnl][liord]!='Q' != Zeichen[tphnl][liord]='Q'){
               joqcj[klidx]=Zeichen[tphnl][liord];
               klidx+=1;
            }
        	liord++;
        }
    	tphnl++;
    }
    int liord=0;
    w'\\0' != joqcj[liord]!='\\0'){
   0 == liord%3ord%3==0){
            zhvtt[iknkj]=joqcj[liord];
            iknkj+=1;
        }
    	liord++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",joqcj);
    printf(""Der neue String lautet: %s\\n"",zhvtt);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2220,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int azvbm, char** Zeichen){
    char sgqgm[100]="""";
    char ajouc[100]="""";
    int ggsgz=0;
    int xaiwv=0;
    int lrukx=1;
    while (!(azvbm <= lrukx)){
        int rgoui=0;
        while'\\0' != Zeichen[lrukx][rgoui]0'){
            'x' && Zeichen[lrukx][rgoui]!='y' && Zeichen[lrukx][rgoui]!='q' && Zeichen[lrukx][rgoui]!='X' && Zeichen[lrukx][rgoui]!='Y' && Zeichen[lrukx][rgoui]!='Q' != Zeichen[lrukx][rgoui]='Q'){
               sgqgm[ggsgz]=Zeichen[lrukx][rgoui];
               ggsgz+=1;
            }
        	rgoui++;
        }
    	lrukx++;
    }
    int rgoui=0;
    w'\\0' != sgqgm[rgoui]!='\\0'){
   0 == rgoui%3oui%3==0){
            ajouc[xaiwv]=sgqgm[rgoui];
            xaiwv+=1;
        }
    	rgoui++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",sgqgm);
    printf(""Der neue String lautet: %s\\n"",ajouc);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2221,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int bbuil, char** Zeichen){
    char hibgq[100]="""";
    char aedia[100]="""";
    int kmyhi=0;
    int nxfwu=0;
    int fbgzu=1;
    while (!(bbuil <= fbgzu)){
        int yccqx=0;
        while'\\0' != Zeichen[fbgzu][yccqx]0'){
            'x' && Zeichen[fbgzu][yccqx]!='y' && Zeichen[fbgzu][yccqx]!='q' && Zeichen[fbgzu][yccqx]!='X' && Zeichen[fbgzu][yccqx]!='Y' && Zeichen[fbgzu][yccqx]!='Q' != Zeichen[fbgzu][yccqx]='Q'){
               hibgq[kmyhi]=Zeichen[fbgzu][yccqx];
               kmyhi+=1;
            }
        	yccqx++;
        }
    	fbgzu++;
    }
    int yccqx=0;
    w'\\0' != hibgq[yccqx]!='\\0'){
   0 == yccqx%3cqx%3==0){
            aedia[nxfwu]=hibgq[yccqx];
            nxfwu+=1;
        }
    	yccqx++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",hibgq);
    printf(""Der neue String lautet: %s\\n"",aedia);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2222,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int jjjal, char** Zeichen){
    char vlqsx[100]="""";
    char jetut[100]="""";
    int rzxef=0;
    int vdkea=0;
    int nyifn=1;
    while (!(jjjal <= nyifn)){
        int hhrrx=0;
        while'\\0' != Zeichen[nyifn][hhrrx]0'){
            'x' && Zeichen[nyifn][hhrrx]!='y' && Zeichen[nyifn][hhrrx]!='q' && Zeichen[nyifn][hhrrx]!='X' && Zeichen[nyifn][hhrrx]!='Y' && Zeichen[nyifn][hhrrx]!='Q' != Zeichen[nyifn][hhrrx]='Q'){
               vlqsx[rzxef]=Zeichen[nyifn][hhrrx];
               rzxef+=1;
            }
        	hhrrx++;
        }
    	nyifn++;
    }
    int hhrrx=0;
    w'\\0' != vlqsx[hhrrx]!='\\0'){
   0 == hhrrx%3rrx%3==0){
            jetut[vdkea]=vlqsx[hhrrx];
            vdkea+=1;
        }
    	hhrrx++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",vlqsx);
    printf(""Der neue String lautet: %s\\n"",jetut);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2223,SoSe21,9,Antwort 9,C,VName_93,Name_93,"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int ompvc, char** Zeichen){
    char ykqfv[100]="""";
    char yruct[100]="""";
    int hqeyx=0;
    int joski=0;
    int hikmy=1;
    while (!(ompvc <= hikmy)){
        int ouymw=0;
        while'\\0' != Zeichen[hikmy][ouymw]0'){
            'x' && Zeichen[hikmy][ouymw]!='y' && Zeichen[hikmy][ouymw]!='q' && Zeichen[hikmy][ouymw]!='X' && Zeichen[hikmy][ouymw]!='Y' && Zeichen[hikmy][ouymw]!='Q' != Zeichen[hikmy][ouymw]='Q'){
               ykqfv[hqeyx]=Zeichen[hikmy][ouymw];
               hqeyx+=1;
            }
        	ouymw++;
        }
    	hikmy++;
    }
    int ouymw=0;
    w'\\0' != ykqfv[ouymw]!='\\0'){
   0 == ouymw%3ymw%3==0){
            yruct[joski]=ykqfv[ouymw];
            joski+=1;
        }
    	ouymw++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",ykqfv);
    printf(""Der neue String lautet: %s\\n"",yruct);
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2224,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  pxwjc, char *qzbtg[])
{
char ktmjb[100];
int hfmqn = 0;
char hfzxa[100];
int xtevy = 0;
int rstgz = 1;
while (!(pxwjc <= rstgz))
	{
	int unsqt = -1;
	do
		{
		unsqt++;
		estkp(!('x' != qzbtg[rstgz][unsqt])) continue;
		else estkp(!('y' != qzbtg[rstgz][unsqt])) continue;
		else estkp(!('q' != qzbtg[rstgz][unsqt])) continue;
		else estkp(!('X' != qzbtg[rstgz][unsqt])) continue;
		else estkp(!('Y' != qzbtg[rstgz][unsqt])) continue;
		else estkp(!('Q' != qzbtg[rstgz][unsqt])) continue;
		else estkp(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2225,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  ecojy, char *lvosf[])
{
char afvnq[100];
int enrwn = 0;
char otvve[100];
int amrph = 0;
int mgbul = 1;
while (!(ecojy <= mgbul))
	{
	int dheym = -1;
	do
		{
		dheym++;
		qqojn(!('x' != lvosf[mgbul][dheym])) continue;
		else qqojn(!('y' != lvosf[mgbul][dheym])) continue;
		else qqojn(!('q' != lvosf[mgbul][dheym])) continue;
		else qqojn(!('X' != lvosf[mgbul][dheym])) continue;
		else qqojn(!('Y' != lvosf[mgbul][dheym])) continue;
		else qqojn(!('Q' != lvosf[mgbul][dheym])) continue;
		else qqojn(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2226,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  ebeuj, char *easnu[])
{
char aqvhl[100];
int tiyan = 0;
char caxfw[100];
int xrbva = 0;
int xedhy = 1;
while (!(ebeuj <= xedhy))
	{
	int yabjc = -1;
	do
		{
		yabjc++;
		azpqo(!('x' != easnu[xedhy][yabjc])) continue;
		else azpqo(!('y' != easnu[xedhy][yabjc])) continue;
		else azpqo(!('q' != easnu[xedhy][yabjc])) continue;
		else azpqo(!('X' != easnu[xedhy][yabjc])) continue;
		else azpqo(!('Y' != easnu[xedhy][yabjc])) continue;
		else azpqo(!('Q' != easnu[xedhy][yabjc])) continue;
		else azpqo(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2227,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  dougd, char *wzvem[])
{
char yxrhi[100];
int pimai = 0;
char actoh[100];
int jbejg = 0;
int nhnis = 1;
while (!(dougd <= nhnis))
	{
	int wmbmt = -1;
	do
		{
		wmbmt++;
		vqenb(!('x' != wzvem[nhnis][wmbmt])) continue;
		else vqenb(!('y' != wzvem[nhnis][wmbmt])) continue;
		else vqenb(!('q' != wzvem[nhnis][wmbmt])) continue;
		else vqenb(!('X' != wzvem[nhnis][wmbmt])) continue;
		else vqenb(!('Y' != wzvem[nhnis][wmbmt])) continue;
		else vqenb(!('Q' != wzvem[nhnis][wmbmt])) continue;
		else vqenb(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2228,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  wzett, char *wzljq[])
{
char uhuzg[100];
int trsxl = 0;
char bulca[100];
int crncb = 0;
int ffrjb = 1;
while (!(wzett <= ffrjb))
	{
	int huedh = -1;
	do
		{
		huedh++;
		ytnyd(!('x' != wzljq[ffrjb][huedh])) continue;
		else ytnyd(!('y' != wzljq[ffrjb][huedh])) continue;
		else ytnyd(!('q' != wzljq[ffrjb][huedh])) continue;
		else ytnyd(!('X' != wzljq[ffrjb][huedh])) continue;
		else ytnyd(!('Y' != wzljq[ffrjb][huedh])) continue;
		else ytnyd(!('Q' != wzljq[ffrjb][huedh])) continue;
		else ytnyd(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2229,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  pewbg, char *zsvcz[])
{
char gkhnc[100];
int tctxn = 0;
char jjjig[100];
int iritl = 0;
int nnmgu = 1;
while (!(pewbg <= nnmgu))
	{
	int pmwyh = -1;
	do
		{
		pmwyh++;
		evzaj(!('x' != zsvcz[nnmgu][pmwyh])) continue;
		else evzaj(!('y' != zsvcz[nnmgu][pmwyh])) continue;
		else evzaj(!('q' != zsvcz[nnmgu][pmwyh])) continue;
		else evzaj(!('X' != zsvcz[nnmgu][pmwyh])) continue;
		else evzaj(!('Y' != zsvcz[nnmgu][pmwyh])) continue;
		else evzaj(!('Q' != zsvcz[nnmgu][pmwyh])) continue;
		else evzaj(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2230,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  huwci, char *ujpvo[])
{
char clcca[100];
int hdxtd = 0;
char gkcaw[100];
int vvnfr = 0;
int zbass = 1;
while (!(huwci <= zbass))
	{
	int jgxly = -1;
	do
		{
		jgxly++;
		eprgt(!('x' != ujpvo[zbass][jgxly])) continue;
		else eprgt(!('y' != ujpvo[zbass][jgxly])) continue;
		else eprgt(!('q' != ujpvo[zbass][jgxly])) continue;
		else eprgt(!('X' != ujpvo[zbass][jgxly])) continue;
		else eprgt(!('Y' != ujpvo[zbass][jgxly])) continue;
		else eprgt(!('Q' != ujpvo[zbass][jgxly])) continue;
		else eprgt(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2231,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  oqkjg, char *snzol[])
{
char ktaru[100];
int zyegc = 0;
char qayjd[100];
int cibqv = 0;
int wuyri = 1;
while (!(oqkjg <= wuyri))
	{
	int alymu = -1;
	do
		{
		alymu++;
		evqfv(!('x' != snzol[wuyri][alymu])) continue;
		else evqfv(!('y' != snzol[wuyri][alymu])) continue;
		else evqfv(!('q' != snzol[wuyri][alymu])) continue;
		else evqfv(!('X' != snzol[wuyri][alymu])) continue;
		else evqfv(!('Y' != snzol[wuyri][alymu])) continue;
		else evqfv(!('Q' != snzol[wuyri][alymu])) continue;
		else evqfv(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2232,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  fwhau, char *mykzm[])
{
char hzwmt[100];
int vywli = 0;
char pdqfp[100];
int kfqik = 0;
int gknrn = 1;
while (!(fwhau <= gknrn))
	{
	int otbww = -1;
	do
		{
		otbww++;
		oskpn(!('x' != mykzm[gknrn][otbww])) continue;
		else oskpn(!('y' != mykzm[gknrn][otbww])) continue;
		else oskpn(!('q' != mykzm[gknrn][otbww])) continue;
		else oskpn(!('X' != mykzm[gknrn][otbww])) continue;
		else oskpn(!('Y' != mykzm[gknrn][otbww])) continue;
		else oskpn(!('Q' != mykzm[gknrn][otbww])) continue;
		else oskpn(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2233,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  cttwr, char *qtcat[])
{
char mmbet[100];
int wqnif = 0;
char zeahx[100];
int ozoii = 0;
int jfrof = 1;
while (!(cttwr <= jfrof))
	{
	int xripx = -1;
	do
		{
		xripx++;
		swkmo(!('x' != qtcat[jfrof][xripx])) continue;
		else swkmo(!('y' != qtcat[jfrof][xripx])) continue;
		else swkmo(!('q' != qtcat[jfrof][xripx])) continue;
		else swkmo(!('X' != qtcat[jfrof][xripx])) continue;
		else swkmo(!('Y' != qtcat[jfrof][xripx])) continue;
		else swkmo(!('Q' != qtcat[jfrof][xripx])) continue;
		else swkmo(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2234,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  nvkhn, char *ipnbr[])
{
char jahqg[100];
int xvajf = 0;
char fouzq[100];
int cshwb = 0;
int sqswn = 1;
while (!(nvkhn <= sqswn))
	{
	int jsmtl = -1;
	do
		{
		jsmtl++;
		rtchf(!('x' != ipnbr[sqswn][jsmtl])) continue;
		else rtchf(!('y' != ipnbr[sqswn][jsmtl])) continue;
		else rtchf(!('q' != ipnbr[sqswn][jsmtl])) continue;
		else rtchf(!('X' != ipnbr[sqswn][jsmtl])) continue;
		else rtchf(!('Y' != ipnbr[sqswn][jsmtl])) continue;
		else rtchf(!('Q' != ipnbr[sqswn][jsmtl])) continue;
		else rtchf(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2235,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  ilnxc, char *jmqcd[])
{
char dthbe[100];
int lebjd = 0;
char zzvfw[100];
int cqznz = 0;
int mcdou = 1;
while (!(ilnxc <= mcdou))
	{
	int hrtdw = -1;
	do
		{
		hrtdw++;
		oqzpy(!('x' != jmqcd[mcdou][hrtdw])) continue;
		else oqzpy(!('y' != jmqcd[mcdou][hrtdw])) continue;
		else oqzpy(!('q' != jmqcd[mcdou][hrtdw])) continue;
		else oqzpy(!('X' != jmqcd[mcdou][hrtdw])) continue;
		else oqzpy(!('Y' != jmqcd[mcdou][hrtdw])) continue;
		else oqzpy(!('Q' != jmqcd[mcdou][hrtdw])) continue;
		else oqzpy(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2236,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  ksegw, char *gowcu[])
{
char ellfs[100];
int zorll = 0;
char wovgh[100];
int jafnw = 0;
int skyem = 1;
while (!(ksegw <= skyem))
	{
	int ghsxy = -1;
	do
		{
		ghsxy++;
		aqasc(!('x' != gowcu[skyem][ghsxy])) continue;
		else aqasc(!('y' != gowcu[skyem][ghsxy])) continue;
		else aqasc(!('q' != gowcu[skyem][ghsxy])) continue;
		else aqasc(!('X' != gowcu[skyem][ghsxy])) continue;
		else aqasc(!('Y' != gowcu[skyem][ghsxy])) continue;
		else aqasc(!('Q' != gowcu[skyem][ghsxy])) continue;
		else aqasc(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2237,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  bidxi, char *jlcjz[])
{
char gzugl[100];
int dqlvj = 0;
char nsixw[100];
int iafvn = 0;
int oeacc = 1;
while (!(bidxi <= oeacc))
	{
	int gsiju = -1;
	do
		{
		gsiju++;
		fmmdu(!('x' != jlcjz[oeacc][gsiju])) continue;
		else fmmdu(!('y' != jlcjz[oeacc][gsiju])) continue;
		else fmmdu(!('q' != jlcjz[oeacc][gsiju])) continue;
		else fmmdu(!('X' != jlcjz[oeacc][gsiju])) continue;
		else fmmdu(!('Y' != jlcjz[oeacc][gsiju])) continue;
		else fmmdu(!('Q' != jlcjz[oeacc][gsiju])) continue;
		else fmmdu(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2238,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  lhpig, char *sknhm[])
{
char jhpxj[100];
int xzovg = 0;
char tynww[100];
int ohyrp = 0;
int rczky = 1;
while (!(lhpig <= rczky))
	{
	int rdxea = -1;
	do
		{
		rdxea++;
		mxbkk(!('x' != sknhm[rczky][rdxea])) continue;
		else mxbkk(!('y' != sknhm[rczky][rdxea])) continue;
		else mxbkk(!('q' != sknhm[rczky][rdxea])) continue;
		else mxbkk(!('X' != sknhm[rczky][rdxea])) continue;
		else mxbkk(!('Y' != sknhm[rczky][rdxea])) continue;
		else mxbkk(!('Q' != sknhm[rczky][rdxea])) continue;
		else mxbkk(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2239,SoSe21,9,Antwort 9,C,VName_96,Name_96,"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  emtkn, char *fssph[])
{
char wivvt[100];
int fzwhr = 0;
char uebct[100];
int prpaz = 0;
int ctrre = 1;
while (!(emtkn <= ctrre))
	{
	int wwwsd = -1;
	do
		{
		wwwsd++;
		zljya(!('x' != fssph[ctrre][wwwsd])) continue;
		else zljya(!('y' != fssph[ctrre][wwwsd])) continue;
		else zljya(!('q' != fssph[ctrre][wwwsd])) continue;
		else zljya(!('X' != fssph[ctrre][wwwsd])) continue;
		else zljya(!('Y' != fssph[ctrre][wwwsd])) continue;
		else zljya(!('Q' != fssph[ctrre][wwwsd])) continue;
		else zljya(!('",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2240,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int vyrcg, char* argv[]) {
    int nxvxk= 1;
    while (!(5 <= nxvxk)){
    	nxvxk++;
    }
    char htscp[100]; htscp[99] = '\\0';
    char ufuio[100]; ufuio[99] = '\\0';
    char vlrew[100];
    int nxvxk = 0;
    while100 > nxvxk00){
        htscp[nxvxk] = '\\0';
        ufuio[nxvxk] = '\\0';
        vlrew[nxvxk] = '\\0';
    	nxvxk++;
    }
    int xooku = 0;
    int nxvxk = 1;
    whilevyrcg > nxvxkcg){
        int urryu = 0;
        int iuhul = 0;
        whi'\\0' != argv[nxvxk][urryu]'\\0'){
        iuhul++;
        }
        int rpoyt = 0;
        whiiuhul > rpoytuhul){
            htscp[xooku] = argv[nxvxk][rpoyt];
            xooku++;
        	rpoyt++;
        }
    	nxvxk++;
    }
    int urryu = 0;
    int pqvip = 0;
    w'\\0' != htscp[urryu]= '\\0'){
    pqvip++;
    urryu++;
    	urryu++;
    }
    int rfrde = 0;
    for(!(int nxvpqvip <= nxvxk<pqvip; nxvxk++)){
      'x' || htscp[nxvxk] == 'rpoyt' || htscp[nxvxk] == 'q' == htscp[nxvxk]] == 'q'){
        }
        els'X' || htscp[nxvxk] == 'Y' || htscp[nxvxk] == 'Q' == htscp[nxvxk]] == 'Q'){
        }
        else{
            ufuio[rfrde] = htscp[nxvxk];
            rfrde++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", ufuio);
    int gugbr = 0;
    for(!(int nrfrde < nxvxkk<=rfrde; nxvxk+=3)){
        vlrew[gugbr] = ufuio[nxvxk];
        gugbr++;
    }
    printf(""Der neue String lautet: %s\\n"", vlrew);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2241,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int wawqn, char* argv[]) {
    int eyjgg= 1;
    while (!(5 <= eyjgg)){
    	eyjgg++;
    }
    char dgyls[100]; dgyls[99] = '\\0';
    char qbmpf[100]; qbmpf[99] = '\\0';
    char lfkcc[100];
    int eyjgg = 0;
    while100 > eyjgg00){
        dgyls[eyjgg] = '\\0';
        qbmpf[eyjgg] = '\\0';
        lfkcc[eyjgg] = '\\0';
    	eyjgg++;
    }
    int yuycx = 0;
    int eyjgg = 1;
    whilewawqn > eyjggqn){
        int ufjbp = 0;
        int ufmtd = 0;
        whi'\\0' != argv[eyjgg][ufjbp]'\\0'){
        ufmtd++;
        }
        int fsyiu = 0;
        whiufmtd > fsyiufmtd){
            dgyls[yuycx] = argv[eyjgg][fsyiu];
            yuycx++;
        	fsyiu++;
        }
    	eyjgg++;
    }
    int ufjbp = 0;
    int daiba = 0;
    w'\\0' != dgyls[ufjbp]= '\\0'){
    daiba++;
    ufjbp++;
    	ufjbp++;
    }
    int sjqdr = 0;
    for(!(int eyjdaiba <= eyjgg<daiba; eyjgg++)){
      'x' || dgyls[eyjgg] == 'fsyiu' || dgyls[eyjgg] == 'q' == dgyls[eyjgg]] == 'q'){
        }
        els'X' || dgyls[eyjgg] == 'Y' || dgyls[eyjgg] == 'Q' == dgyls[eyjgg]] == 'Q'){
        }
        else{
            qbmpf[sjqdr] = dgyls[eyjgg];
            sjqdr++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", qbmpf);
    int xqkxr = 0;
    for(!(int esjqdr < eyjggg<=sjqdr; eyjgg+=3)){
        lfkcc[xqkxr] = qbmpf[eyjgg];
        xqkxr++;
    }
    printf(""Der neue String lautet: %s\\n"", lfkcc);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2242,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int gfbof, char* argv[]) {
    int dstxl= 1;
    while (!(5 <= dstxl)){
    	dstxl++;
    }
    char euusn[100]; euusn[99] = '\\0';
    char blgks[100]; blgks[99] = '\\0';
    char qedgg[100];
    int dstxl = 0;
    while100 > dstxl00){
        euusn[dstxl] = '\\0';
        blgks[dstxl] = '\\0';
        qedgg[dstxl] = '\\0';
    	dstxl++;
    }
    int srnnq = 0;
    int dstxl = 1;
    whilegfbof > dstxlof){
        int srzyb = 0;
        int rippj = 0;
        whi'\\0' != argv[dstxl][srzyb]'\\0'){
        rippj++;
        }
        int zwsbu = 0;
        whirippj > zwsbuippj){
            euusn[srnnq] = argv[dstxl][zwsbu];
            srnnq++;
        	zwsbu++;
        }
    	dstxl++;
    }
    int srzyb = 0;
    int vwhlg = 0;
    w'\\0' != euusn[srzyb]= '\\0'){
    vwhlg++;
    srzyb++;
    	srzyb++;
    }
    int pzncs = 0;
    for(!(int dstvwhlg <= dstxl<vwhlg; dstxl++)){
      'x' || euusn[dstxl] == 'zwsbu' || euusn[dstxl] == 'q' == euusn[dstxl]] == 'q'){
        }
        els'X' || euusn[dstxl] == 'Y' || euusn[dstxl] == 'Q' == euusn[dstxl]] == 'Q'){
        }
        else{
            blgks[pzncs] = euusn[dstxl];
            pzncs++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", blgks);
    int ecoge = 0;
    for(!(int dpzncs < dstxll<=pzncs; dstxl+=3)){
        qedgg[ecoge] = blgks[dstxl];
        ecoge++;
    }
    printf(""Der neue String lautet: %s\\n"", qedgg);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2243,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int wwhsi, char* argv[]) {
    int wqfli= 1;
    while (!(5 <= wqfli)){
    	wqfli++;
    }
    char zfsbz[100]; zfsbz[99] = '\\0';
    char hxceg[100]; hxceg[99] = '\\0';
    char zetds[100];
    int wqfli = 0;
    while100 > wqfli00){
        zfsbz[wqfli] = '\\0';
        hxceg[wqfli] = '\\0';
        zetds[wqfli] = '\\0';
    	wqfli++;
    }
    int lvyms = 0;
    int wqfli = 1;
    whilewwhsi > wqflisi){
        int zfohf = 0;
        int fhpfi = 0;
        whi'\\0' != argv[wqfli][zfohf]'\\0'){
        fhpfi++;
        }
        int ssvvn = 0;
        whifhpfi > ssvvnhpfi){
            zfsbz[lvyms] = argv[wqfli][ssvvn];
            lvyms++;
        	ssvvn++;
        }
    	wqfli++;
    }
    int zfohf = 0;
    int hxzur = 0;
    w'\\0' != zfsbz[zfohf]= '\\0'){
    hxzur++;
    zfohf++;
    	zfohf++;
    }
    int oxamd = 0;
    for(!(int wqfhxzur <= wqfli<hxzur; wqfli++)){
      'x' || zfsbz[wqfli] == 'ssvvn' || zfsbz[wqfli] == 'q' == zfsbz[wqfli]] == 'q'){
        }
        els'X' || zfsbz[wqfli] == 'Y' || zfsbz[wqfli] == 'Q' == zfsbz[wqfli]] == 'Q'){
        }
        else{
            hxceg[oxamd] = zfsbz[wqfli];
            oxamd++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", hxceg);
    int pwjxa = 0;
    for(!(int woxamd < wqflii<=oxamd; wqfli+=3)){
        zetds[pwjxa] = hxceg[wqfli];
        pwjxa++;
    }
    printf(""Der neue String lautet: %s\\n"", zetds);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2244,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int hdkht, char* argv[]) {
    int ttbmi= 1;
    while (!(5 <= ttbmi)){
    	ttbmi++;
    }
    char kotwi[100]; kotwi[99] = '\\0';
    char mvuyl[100]; mvuyl[99] = '\\0';
    char bsxot[100];
    int ttbmi = 0;
    while100 > ttbmi00){
        kotwi[ttbmi] = '\\0';
        mvuyl[ttbmi] = '\\0';
        bsxot[ttbmi] = '\\0';
    	ttbmi++;
    }
    int jttox = 0;
    int ttbmi = 1;
    whilehdkht > ttbmiht){
        int tcncl = 0;
        int hedsr = 0;
        whi'\\0' != argv[ttbmi][tcncl]'\\0'){
        hedsr++;
        }
        int tpmdu = 0;
        whihedsr > tpmduedsr){
            kotwi[jttox] = argv[ttbmi][tpmdu];
            jttox++;
        	tpmdu++;
        }
    	ttbmi++;
    }
    int tcncl = 0;
    int fxeut = 0;
    w'\\0' != kotwi[tcncl]= '\\0'){
    fxeut++;
    tcncl++;
    	tcncl++;
    }
    int actza = 0;
    for(!(int ttbfxeut <= ttbmi<fxeut; ttbmi++)){
      'x' || kotwi[ttbmi] == 'tpmdu' || kotwi[ttbmi] == 'q' == kotwi[ttbmi]] == 'q'){
        }
        els'X' || kotwi[ttbmi] == 'Y' || kotwi[ttbmi] == 'Q' == kotwi[ttbmi]] == 'Q'){
        }
        else{
            mvuyl[actza] = kotwi[ttbmi];
            actza++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", mvuyl);
    int qzqbx = 0;
    for(!(int tactza < ttbmii<=actza; ttbmi+=3)){
        bsxot[qzqbx] = mvuyl[ttbmi];
        qzqbx++;
    }
    printf(""Der neue String lautet: %s\\n"", bsxot);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2245,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int reqxj, char* argv[]) {
    int kvxhs= 1;
    while (!(5 <= kvxhs)){
    	kvxhs++;
    }
    char twwzy[100]; twwzy[99] = '\\0';
    char ykqxk[100]; ykqxk[99] = '\\0';
    char dazfk[100];
    int kvxhs = 0;
    while100 > kvxhs00){
        twwzy[kvxhs] = '\\0';
        ykqxk[kvxhs] = '\\0';
        dazfk[kvxhs] = '\\0';
    	kvxhs++;
    }
    int xpurf = 0;
    int kvxhs = 1;
    whilereqxj > kvxhsxj){
        int bufqo = 0;
        int vamzm = 0;
        whi'\\0' != argv[kvxhs][bufqo]'\\0'){
        vamzm++;
        }
        int ckowt = 0;
        whivamzm > ckowtamzm){
            twwzy[xpurf] = argv[kvxhs][ckowt];
            xpurf++;
        	ckowt++;
        }
    	kvxhs++;
    }
    int bufqo = 0;
    int lzosg = 0;
    w'\\0' != twwzy[bufqo]= '\\0'){
    lzosg++;
    bufqo++;
    	bufqo++;
    }
    int flsbj = 0;
    for(!(int kvxlzosg <= kvxhs<lzosg; kvxhs++)){
      'x' || twwzy[kvxhs] == 'ckowt' || twwzy[kvxhs] == 'q' == twwzy[kvxhs]] == 'q'){
        }
        els'X' || twwzy[kvxhs] == 'Y' || twwzy[kvxhs] == 'Q' == twwzy[kvxhs]] == 'Q'){
        }
        else{
            ykqxk[flsbj] = twwzy[kvxhs];
            flsbj++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", ykqxk);
    int iutsb = 0;
    for(!(int kflsbj < kvxhss<=flsbj; kvxhs+=3)){
        dazfk[iutsb] = ykqxk[kvxhs];
        iutsb++;
    }
    printf(""Der neue String lautet: %s\\n"", dazfk);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2246,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int sxshf, char* argv[]) {
    int mgnbx= 1;
    while (!(5 <= mgnbx)){
    	mgnbx++;
    }
    char ebcwx[100]; ebcwx[99] = '\\0';
    char tzzvq[100]; tzzvq[99] = '\\0';
    char dyfnk[100];
    int mgnbx = 0;
    while100 > mgnbx00){
        ebcwx[mgnbx] = '\\0';
        tzzvq[mgnbx] = '\\0';
        dyfnk[mgnbx] = '\\0';
    	mgnbx++;
    }
    int wajpg = 0;
    int mgnbx = 1;
    whilesxshf > mgnbxhf){
        int ijftx = 0;
        int bvrhg = 0;
        whi'\\0' != argv[mgnbx][ijftx]'\\0'){
        bvrhg++;
        }
        int ytzgp = 0;
        whibvrhg > ytzgpvrhg){
            ebcwx[wajpg] = argv[mgnbx][ytzgp];
            wajpg++;
        	ytzgp++;
        }
    	mgnbx++;
    }
    int ijftx = 0;
    int ecmrb = 0;
    w'\\0' != ebcwx[ijftx]= '\\0'){
    ecmrb++;
    ijftx++;
    	ijftx++;
    }
    int uhkok = 0;
    for(!(int mgnecmrb <= mgnbx<ecmrb; mgnbx++)){
      'x' || ebcwx[mgnbx] == 'ytzgp' || ebcwx[mgnbx] == 'q' == ebcwx[mgnbx]] == 'q'){
        }
        els'X' || ebcwx[mgnbx] == 'Y' || ebcwx[mgnbx] == 'Q' == ebcwx[mgnbx]] == 'Q'){
        }
        else{
            tzzvq[uhkok] = ebcwx[mgnbx];
            uhkok++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", tzzvq);
    int vvayu = 0;
    for(!(int muhkok < mgnbxx<=uhkok; mgnbx+=3)){
        dyfnk[vvayu] = tzzvq[mgnbx];
        vvayu++;
    }
    printf(""Der neue String lautet: %s\\n"", dyfnk);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2247,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int tlpso, char* argv[]) {
    int vmjoc= 1;
    while (!(5 <= vmjoc)){
    	vmjoc++;
    }
    char xpznq[100]; xpznq[99] = '\\0';
    char jxoei[100]; jxoei[99] = '\\0';
    char synsz[100];
    int vmjoc = 0;
    while100 > vmjoc00){
        xpznq[vmjoc] = '\\0';
        jxoei[vmjoc] = '\\0';
        synsz[vmjoc] = '\\0';
    	vmjoc++;
    }
    int zrdvg = 0;
    int vmjoc = 1;
    whiletlpso > vmjocso){
        int sfvga = 0;
        int udcun = 0;
        whi'\\0' != argv[vmjoc][sfvga]'\\0'){
        udcun++;
        }
        int xebay = 0;
        whiudcun > xebaydcun){
            xpznq[zrdvg] = argv[vmjoc][xebay];
            zrdvg++;
        	xebay++;
        }
    	vmjoc++;
    }
    int sfvga = 0;
    int dwlas = 0;
    w'\\0' != xpznq[sfvga]= '\\0'){
    dwlas++;
    sfvga++;
    	sfvga++;
    }
    int hbkeo = 0;
    for(!(int vmjdwlas <= vmjoc<dwlas; vmjoc++)){
      'x' || xpznq[vmjoc] == 'xebay' || xpznq[vmjoc] == 'q' == xpznq[vmjoc]] == 'q'){
        }
        els'X' || xpznq[vmjoc] == 'Y' || xpznq[vmjoc] == 'Q' == xpznq[vmjoc]] == 'Q'){
        }
        else{
            jxoei[hbkeo] = xpznq[vmjoc];
            hbkeo++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", jxoei);
    int uzefd = 0;
    for(!(int vhbkeo < vmjocc<=hbkeo; vmjoc+=3)){
        synsz[uzefd] = jxoei[vmjoc];
        uzefd++;
    }
    printf(""Der neue String lautet: %s\\n"", synsz);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2248,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int wunns, char* argv[]) {
    int tlxuq= 1;
    while (!(5 <= tlxuq)){
    	tlxuq++;
    }
    char svukk[100]; svukk[99] = '\\0';
    char kqrrh[100]; kqrrh[99] = '\\0';
    char pdxnf[100];
    int tlxuq = 0;
    while100 > tlxuq00){
        svukk[tlxuq] = '\\0';
        kqrrh[tlxuq] = '\\0';
        pdxnf[tlxuq] = '\\0';
    	tlxuq++;
    }
    int xhine = 0;
    int tlxuq = 1;
    whilewunns > tlxuqns){
        int mrbew = 0;
        int ohemx = 0;
        whi'\\0' != argv[tlxuq][mrbew]'\\0'){
        ohemx++;
        }
        int ceipo = 0;
        whiohemx > ceipohemx){
            svukk[xhine] = argv[tlxuq][ceipo];
            xhine++;
        	ceipo++;
        }
    	tlxuq++;
    }
    int mrbew = 0;
    int zobzm = 0;
    w'\\0' != svukk[mrbew]= '\\0'){
    zobzm++;
    mrbew++;
    	mrbew++;
    }
    int janwr = 0;
    for(!(int tlxzobzm <= tlxuq<zobzm; tlxuq++)){
      'x' || svukk[tlxuq] == 'ceipo' || svukk[tlxuq] == 'q' == svukk[tlxuq]] == 'q'){
        }
        els'X' || svukk[tlxuq] == 'Y' || svukk[tlxuq] == 'Q' == svukk[tlxuq]] == 'Q'){
        }
        else{
            kqrrh[janwr] = svukk[tlxuq];
            janwr++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", kqrrh);
    int gnlhg = 0;
    for(!(int tjanwr < tlxuqq<=janwr; tlxuq+=3)){
        pdxnf[gnlhg] = kqrrh[tlxuq];
        gnlhg++;
    }
    printf(""Der neue String lautet: %s\\n"", pdxnf);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2249,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int swinn, char* argv[]) {
    int mqsmu= 1;
    while (!(5 <= mqsmu)){
    	mqsmu++;
    }
    char smkrj[100]; smkrj[99] = '\\0';
    char owhgg[100]; owhgg[99] = '\\0';
    char jxkpu[100];
    int mqsmu = 0;
    while100 > mqsmu00){
        smkrj[mqsmu] = '\\0';
        owhgg[mqsmu] = '\\0';
        jxkpu[mqsmu] = '\\0';
    	mqsmu++;
    }
    int yrmev = 0;
    int mqsmu = 1;
    whileswinn > mqsmunn){
        int wxrqu = 0;
        int okxcf = 0;
        whi'\\0' != argv[mqsmu][wxrqu]'\\0'){
        okxcf++;
        }
        int pzpbr = 0;
        whiokxcf > pzpbrkxcf){
            smkrj[yrmev] = argv[mqsmu][pzpbr];
            yrmev++;
        	pzpbr++;
        }
    	mqsmu++;
    }
    int wxrqu = 0;
    int ljjak = 0;
    w'\\0' != smkrj[wxrqu]= '\\0'){
    ljjak++;
    wxrqu++;
    	wxrqu++;
    }
    int pwpge = 0;
    for(!(int mqsljjak <= mqsmu<ljjak; mqsmu++)){
      'x' || smkrj[mqsmu] == 'pzpbr' || smkrj[mqsmu] == 'q' == smkrj[mqsmu]] == 'q'){
        }
        els'X' || smkrj[mqsmu] == 'Y' || smkrj[mqsmu] == 'Q' == smkrj[mqsmu]] == 'Q'){
        }
        else{
            owhgg[pwpge] = smkrj[mqsmu];
            pwpge++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", owhgg);
    int twnpd = 0;
    for(!(int mpwpge < mqsmuu<=pwpge; mqsmu+=3)){
        jxkpu[twnpd] = owhgg[mqsmu];
        twnpd++;
    }
    printf(""Der neue String lautet: %s\\n"", jxkpu);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2250,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int etbqr, char* argv[]) {
    int gsnts= 1;
    while (!(5 <= gsnts)){
    	gsnts++;
    }
    char zfkwc[100]; zfkwc[99] = '\\0';
    char onodl[100]; onodl[99] = '\\0';
    char tzbtt[100];
    int gsnts = 0;
    while100 > gsnts00){
        zfkwc[gsnts] = '\\0';
        onodl[gsnts] = '\\0';
        tzbtt[gsnts] = '\\0';
    	gsnts++;
    }
    int lczer = 0;
    int gsnts = 1;
    whileetbqr > gsntsqr){
        int waqui = 0;
        int bxttd = 0;
        whi'\\0' != argv[gsnts][waqui]'\\0'){
        bxttd++;
        }
        int nyizx = 0;
        whibxttd > nyizxxttd){
            zfkwc[lczer] = argv[gsnts][nyizx];
            lczer++;
        	nyizx++;
        }
    	gsnts++;
    }
    int waqui = 0;
    int wbama = 0;
    w'\\0' != zfkwc[waqui]= '\\0'){
    wbama++;
    waqui++;
    	waqui++;
    }
    int bkzsy = 0;
    for(!(int gsnwbama <= gsnts<wbama; gsnts++)){
      'x' || zfkwc[gsnts] == 'nyizx' || zfkwc[gsnts] == 'q' == zfkwc[gsnts]] == 'q'){
        }
        els'X' || zfkwc[gsnts] == 'Y' || zfkwc[gsnts] == 'Q' == zfkwc[gsnts]] == 'Q'){
        }
        else{
            onodl[bkzsy] = zfkwc[gsnts];
            bkzsy++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", onodl);
    int mtcbl = 0;
    for(!(int gbkzsy < gsntss<=bkzsy; gsnts+=3)){
        tzbtt[mtcbl] = onodl[gsnts];
        mtcbl++;
    }
    printf(""Der neue String lautet: %s\\n"", tzbtt);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2251,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int ygrvs, char* argv[]) {
    int hkihc= 1;
    while (!(5 <= hkihc)){
    	hkihc++;
    }
    char ipiyq[100]; ipiyq[99] = '\\0';
    char qlxdn[100]; qlxdn[99] = '\\0';
    char dgvie[100];
    int hkihc = 0;
    while100 > hkihc00){
        ipiyq[hkihc] = '\\0';
        qlxdn[hkihc] = '\\0';
        dgvie[hkihc] = '\\0';
    	hkihc++;
    }
    int livxu = 0;
    int hkihc = 1;
    whileygrvs > hkihcvs){
        int zvovz = 0;
        int ajqmt = 0;
        whi'\\0' != argv[hkihc][zvovz]'\\0'){
        ajqmt++;
        }
        int ttnjx = 0;
        whiajqmt > ttnjxjqmt){
            ipiyq[livxu] = argv[hkihc][ttnjx];
            livxu++;
        	ttnjx++;
        }
    	hkihc++;
    }
    int zvovz = 0;
    int mgfbu = 0;
    w'\\0' != ipiyq[zvovz]= '\\0'){
    mgfbu++;
    zvovz++;
    	zvovz++;
    }
    int jzobn = 0;
    for(!(int hkimgfbu <= hkihc<mgfbu; hkihc++)){
      'x' || ipiyq[hkihc] == 'ttnjx' || ipiyq[hkihc] == 'q' == ipiyq[hkihc]] == 'q'){
        }
        els'X' || ipiyq[hkihc] == 'Y' || ipiyq[hkihc] == 'Q' == ipiyq[hkihc]] == 'Q'){
        }
        else{
            qlxdn[jzobn] = ipiyq[hkihc];
            jzobn++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", qlxdn);
    int csgyw = 0;
    for(!(int hjzobn < hkihcc<=jzobn; hkihc+=3)){
        dgvie[csgyw] = qlxdn[hkihc];
        csgyw++;
    }
    printf(""Der neue String lautet: %s\\n"", dgvie);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2252,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int npzba, char* argv[]) {
    int soetr= 1;
    while (!(5 <= soetr)){
    	soetr++;
    }
    char hixfo[100]; hixfo[99] = '\\0';
    char ywyat[100]; ywyat[99] = '\\0';
    char igyym[100];
    int soetr = 0;
    while100 > soetr00){
        hixfo[soetr] = '\\0';
        ywyat[soetr] = '\\0';
        igyym[soetr] = '\\0';
    	soetr++;
    }
    int phrmj = 0;
    int soetr = 1;
    whilenpzba > soetrba){
        int rzoal = 0;
        int fbbns = 0;
        whi'\\0' != argv[soetr][rzoal]'\\0'){
        fbbns++;
        }
        int iyemr = 0;
        whifbbns > iyemrbbns){
            hixfo[phrmj] = argv[soetr][iyemr];
            phrmj++;
        	iyemr++;
        }
    	soetr++;
    }
    int rzoal = 0;
    int zbble = 0;
    w'\\0' != hixfo[rzoal]= '\\0'){
    zbble++;
    rzoal++;
    	rzoal++;
    }
    int mrovx = 0;
    for(!(int soezbble <= soetr<zbble; soetr++)){
      'x' || hixfo[soetr] == 'iyemr' || hixfo[soetr] == 'q' == hixfo[soetr]] == 'q'){
        }
        els'X' || hixfo[soetr] == 'Y' || hixfo[soetr] == 'Q' == hixfo[soetr]] == 'Q'){
        }
        else{
            ywyat[mrovx] = hixfo[soetr];
            mrovx++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", ywyat);
    int iinep = 0;
    for(!(int smrovx < soetrr<=mrovx; soetr+=3)){
        igyym[iinep] = ywyat[soetr];
        iinep++;
    }
    printf(""Der neue String lautet: %s\\n"", igyym);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2253,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int ebehj, char* argv[]) {
    int vfdtl= 1;
    while (!(5 <= vfdtl)){
    	vfdtl++;
    }
    char yvevk[100]; yvevk[99] = '\\0';
    char rxjvd[100]; rxjvd[99] = '\\0';
    char tunfk[100];
    int vfdtl = 0;
    while100 > vfdtl00){
        yvevk[vfdtl] = '\\0';
        rxjvd[vfdtl] = '\\0';
        tunfk[vfdtl] = '\\0';
    	vfdtl++;
    }
    int turaq = 0;
    int vfdtl = 1;
    whileebehj > vfdtlhj){
        int ltepa = 0;
        int nqhui = 0;
        whi'\\0' != argv[vfdtl][ltepa]'\\0'){
        nqhui++;
        }
        int xpvyt = 0;
        whinqhui > xpvytqhui){
            yvevk[turaq] = argv[vfdtl][xpvyt];
            turaq++;
        	xpvyt++;
        }
    	vfdtl++;
    }
    int ltepa = 0;
    int mmejl = 0;
    w'\\0' != yvevk[ltepa]= '\\0'){
    mmejl++;
    ltepa++;
    	ltepa++;
    }
    int jsryt = 0;
    for(!(int vfdmmejl <= vfdtl<mmejl; vfdtl++)){
      'x' || yvevk[vfdtl] == 'xpvyt' || yvevk[vfdtl] == 'q' == yvevk[vfdtl]] == 'q'){
        }
        els'X' || yvevk[vfdtl] == 'Y' || yvevk[vfdtl] == 'Q' == yvevk[vfdtl]] == 'Q'){
        }
        else{
            rxjvd[jsryt] = yvevk[vfdtl];
            jsryt++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", rxjvd);
    int zezul = 0;
    for(!(int vjsryt < vfdtll<=jsryt; vfdtl+=3)){
        tunfk[zezul] = rxjvd[vfdtl];
        zezul++;
    }
    printf(""Der neue String lautet: %s\\n"", tunfk);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2254,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int gyhgv, char* argv[]) {
    int ltruy= 1;
    while (!(5 <= ltruy)){
    	ltruy++;
    }
    char qimuh[100]; qimuh[99] = '\\0';
    char rztee[100]; rztee[99] = '\\0';
    char zvjil[100];
    int ltruy = 0;
    while100 > ltruy00){
        qimuh[ltruy] = '\\0';
        rztee[ltruy] = '\\0';
        zvjil[ltruy] = '\\0';
    	ltruy++;
    }
    int tgves = 0;
    int ltruy = 1;
    whilegyhgv > ltruygv){
        int wokgl = 0;
        int xccdp = 0;
        whi'\\0' != argv[ltruy][wokgl]'\\0'){
        xccdp++;
        }
        int ackhc = 0;
        whixccdp > ackhcccdp){
            qimuh[tgves] = argv[ltruy][ackhc];
            tgves++;
        	ackhc++;
        }
    	ltruy++;
    }
    int wokgl = 0;
    int urxef = 0;
    w'\\0' != qimuh[wokgl]= '\\0'){
    urxef++;
    wokgl++;
    	wokgl++;
    }
    int palgq = 0;
    for(!(int ltrurxef <= ltruy<urxef; ltruy++)){
      'x' || qimuh[ltruy] == 'ackhc' || qimuh[ltruy] == 'q' == qimuh[ltruy]] == 'q'){
        }
        els'X' || qimuh[ltruy] == 'Y' || qimuh[ltruy] == 'Q' == qimuh[ltruy]] == 'Q'){
        }
        else{
            rztee[palgq] = qimuh[ltruy];
            palgq++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", rztee);
    int fyxfg = 0;
    for(!(int lpalgq < ltruyy<=palgq; ltruy+=3)){
        zvjil[fyxfg] = rztee[ltruy];
        fyxfg++;
    }
    printf(""Der neue String lautet: %s\\n"", zvjil);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
2255,SoSe21,9,Antwort 9,C,VName_7,Name_7,"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int dfkjj, char* argv[]) {
    int vxnvv= 1;
    while (!(5 <= vxnvv)){
    	vxnvv++;
    }
    char xffej[100]; xffej[99] = '\\0';
    char ixwzr[100]; ixwzr[99] = '\\0';
    char fqglj[100];
    int vxnvv = 0;
    while100 > vxnvv00){
        xffej[vxnvv] = '\\0';
        ixwzr[vxnvv] = '\\0';
        fqglj[vxnvv] = '\\0';
    	vxnvv++;
    }
    int knlqs = 0;
    int vxnvv = 1;
    whiledfkjj > vxnvvjj){
        int khgcc = 0;
        int fzrhc = 0;
        whi'\\0' != argv[vxnvv][khgcc]'\\0'){
        fzrhc++;
        }
        int kxalw = 0;
        whifzrhc > kxalwzrhc){
            xffej[knlqs] = argv[vxnvv][kxalw];
            knlqs++;
        	kxalw++;
        }
    	vxnvv++;
    }
    int khgcc = 0;
    int frmkt = 0;
    w'\\0' != xffej[khgcc]= '\\0'){
    frmkt++;
    khgcc++;
    	khgcc++;
    }
    int uijjb = 0;
    for(!(int vxnfrmkt <= vxnvv<frmkt; vxnvv++)){
      'x' || xffej[vxnvv] == 'kxalw' || xffej[vxnvv] == 'q' == xffej[vxnvv]] == 'q'){
        }
        els'X' || xffej[vxnvv] == 'Y' || xffej[vxnvv] == 'Q' == xffej[vxnvv]] == 'Q'){
        }
        else{
            ixwzr[uijjb] = xffej[vxnvv];
            uijjb++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", ixwzr);
    int rqiig = 0;
    for(!(int vuijjb < vxnvvv<=uijjb; vxnvv+=3)){
        fqglj[rqiig] = ixwzr[vxnvv];
        rqiig++;
    }
    printf(""Der neue String lautet: %s\\n"", fqglj);
    return 0;
}",1,demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables()))))
